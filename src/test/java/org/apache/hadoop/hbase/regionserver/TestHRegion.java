begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|OperationStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
operator|.
name|TestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnCountGetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|NullComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManagerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IncrementingEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ManualEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Basic stand-alone testing of HRegion.  *  * A lot of the meta information for an HRegion now lives inside other  * HRegions or in the HBaseMaster, so only basic testing is possible.  */
end_comment

begin_class
specifier|public
class|class
name|TestHRegion
extends|extends
name|HBaseTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHRegion
operator|.
name|class
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
name|DIR
init|=
name|HBaseTestingUtility
operator|.
name|getTestDir
argument_list|()
operator|+
literal|"/TestHRegion/"
decl_stmt|;
specifier|private
specifier|final
name|int
name|MAX_VERSIONS
init|=
literal|2
decl_stmt|;
comment|// Test names
specifier|protected
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|qual3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual3"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
comment|/**    * @see org.apache.hadoop.hbase.HBaseTestCase#setUp()    */
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// New tests that doesn't spin up a mini cluster but rather just test the
comment|// individual code pieces in the HRegion. Putting files locally in
comment|// /tmp/testtable
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testGetWhileRegionClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
name|int
name|numRows
init|=
literal|100
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|// Put data in region
specifier|final
name|int
name|startRow
init|=
literal|100
decl_stmt|;
name|putData
argument_list|(
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qual1
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qual2
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qual3
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|// this.region.flushcache();
specifier|final
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|gets
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GetTillDoneOrException
index|[]
name|threads
init|=
operator|new
name|GetTillDoneOrException
index|[
literal|10
index|]
decl_stmt|;
try|try
block|{
comment|// Set ten threads running concurrently getting from the region.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|GetTillDoneOrException
argument_list|(
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|startRow
argument_list|)
argument_list|,
name|done
argument_list|,
name|gets
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Artificially make the condition by setting closing flag explicitly.
comment|// I can't make the issue happen with a call to region.close().
name|this
operator|.
name|region
operator|.
name|closing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|threads
operator|.
name|length
operator|/
literal|2
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|GetTillDoneOrException
argument_list|(
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|startRow
argument_list|)
argument_list|,
name|done
argument_list|,
name|gets
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|this
operator|.
name|region
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|GetTillDoneOrException
name|t
range|:
name|threads
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|e
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception="
operator|+
name|t
operator|.
name|e
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Found a NPE in "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|t
operator|.
name|e
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Thread that does get on single row until 'done' flag is flipped.  If an    * exception causes us to fail, it records it.    */
class|class
name|GetTillDoneOrException
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Get
name|g
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|done
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|count
decl_stmt|;
specifier|private
name|Exception
name|e
decl_stmt|;
name|GetTillDoneOrException
parameter_list|(
specifier|final
name|int
name|i
parameter_list|,
specifier|final
name|byte
index|[]
name|r
parameter_list|,
specifier|final
name|AtomicBoolean
name|d
parameter_list|,
specifier|final
name|AtomicInteger
name|c
parameter_list|)
block|{
name|super
argument_list|(
literal|"getter."
operator|+
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|g
operator|=
operator|new
name|Get
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|d
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|c
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/*    * An involved filter test.  Has multiple column families and deletes in mix.    */
specifier|public
name|void
name|testWeirdCacheBehaviour
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWeirdCacheBehaviour"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
block|}
decl_stmt|;
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|getName
argument_list|()
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
name|String
name|value
init|=
literal|"this is the value"
decl_stmt|;
name|String
name|value2
init|=
literal|"this is some other value"
decl_stmt|;
name|String
name|keyPrefix1
init|=
literal|"prefix1"
decl_stmt|;
comment|// UUID.randomUUID().toString();
name|String
name|keyPrefix2
init|=
literal|"prefix2"
decl_stmt|;
comment|// UUID.randomUUID().toString();
name|String
name|keyPrefix3
init|=
literal|"prefix3"
decl_stmt|;
comment|// UUID.randomUUID().toString();
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
comment|// this.region.flushCommits();
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting important checks....."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix1
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix2
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix3
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteColumns
parameter_list|(
name|HRegion
name|r
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|boolean
name|more
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|more
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
else|else
break|break;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|more
condition|)
do|;
name|assertEquals
argument_list|(
literal|"Did not perform correct number of deletes"
argument_list|,
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getNumberOfRows
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|HRegion
name|r
parameter_list|)
throws|throws
name|Exception
block|{
name|InternalScanner
name|resultScanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|int
name|numberOfResults
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|more
init|=
literal|false
decl_stmt|;
do|do
block|{
name|more
operator|=
name|resultScanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
name|numberOfResults
operator|++
expr_stmt|;
else|else
break|break;
for|for
control|(
name|KeyValue
name|kv
range|:
name|results
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"kv="
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|more
condition|)
do|;
return|return
name|numberOfResults
return|;
block|}
specifier|private
name|InternalScanner
name|buildScanner
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|HRegion
name|r
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Defaults FilterList.Operator.MUST_PASS_ALL.
name|FilterList
name|allFilters
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only return rows where this column value exists in the row.
name|SingleColumnValueFilter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|allFilters
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|private
name|void
name|putRows
parameter_list|(
name|HRegion
name|r
parameter_list|,
name|int
name|numRows
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
name|key
operator|+
literal|"_"
operator|+
name|i
comment|/* UUID.randomUUID().toString() */
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Saving row: %s, with value %s"
argument_list|,
name|row
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value for blob"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"statement"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"20090921010101999"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"adhocTransactionGroupId"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFamilyWithAndWithoutColon
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
name|initHRegion
argument_list|(
name|b
argument_list|,
name|getName
argument_list|()
argument_list|,
name|cf
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cfwithcolon
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf:"
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfwithcolon
argument_list|,
name|cfwithcolon
argument_list|,
name|cfwithcolon
argument_list|)
expr_stmt|;
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchColumnFamilyException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testBatchPut
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
name|initHRegion
argument_list|(
name|b
argument_list|,
name|getName
argument_list|()
argument_list|,
name|cf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|getSyncOps
argument_list|()
expr_stmt|;
comment|// clear counter from prior tests
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|HLog
operator|.
name|getSyncOps
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First a batch put with all valid puts"
argument_list|)
expr_stmt|;
specifier|final
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|puts
index|[
name|i
index|]
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|OperationStatusCode
index|[]
name|codes
init|=
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|puts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|codes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|,
name|codes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|HLog
operator|.
name|getSyncOps
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Next a batch put with one invalid family"
argument_list|)
expr_stmt|;
name|puts
index|[
literal|5
index|]
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BAD_CF"
argument_list|)
argument_list|,
name|qual
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|codes
operator|=
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|codes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|i
operator|==
literal|5
operator|)
condition|?
name|OperationStatusCode
operator|.
name|BAD_FAMILY
else|:
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|,
name|codes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|HLog
operator|.
name|getSyncOps
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Next a batch put that has to break into two batches to avoid a lock"
argument_list|)
expr_stmt|;
name|Integer
name|lockedRow
init|=
name|region
operator|.
name|obtainRowLock
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_2"
argument_list|)
argument_list|)
decl_stmt|;
name|MultithreadedTestUtil
operator|.
name|TestContext
name|ctx
init|=
operator|new
name|MultithreadedTestUtil
operator|.
name|TestContext
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|OperationStatusCode
index|[]
argument_list|>
name|retFromThread
init|=
operator|new
name|AtomicReference
argument_list|<
name|OperationStatusCode
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|TestThread
name|putter
init|=
operator|new
name|TestThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|IOException
block|{
name|retFromThread
operator|.
name|set
argument_list|(
name|region
operator|.
name|put
argument_list|(
name|puts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...starting put thread while holding lock"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
name|putter
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...waiting for put thread to sync first time"
argument_list|)
expr_stmt|;
name|long
name|startWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|HLog
operator|.
name|getSyncOps
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startWait
operator|>
literal|10000
condition|)
block|{
name|fail
argument_list|(
literal|"Timed out waiting for thread to sync first minibatch"
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"...releasing row lock, which should let put thread continue"
argument_list|)
expr_stmt|;
name|region
operator|.
name|releaseRowLock
argument_list|(
name|lockedRow
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...joining on thread"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...checking that next batch was synced"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|HLog
operator|.
name|getSyncOps
argument_list|()
argument_list|)
expr_stmt|;
name|codes
operator|=
name|retFromThread
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|i
operator|==
literal|5
operator|)
condition|?
name|OperationStatusCode
operator|.
name|BAD_FAMILY
else|:
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|,
name|codes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Nexta, a batch put which uses an already-held lock"
argument_list|)
expr_stmt|;
name|lockedRow
operator|=
name|region
operator|.
name|obtainRowLock
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_2"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...obtained row lock"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|putsAndLocks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
name|pair
init|=
operator|new
name|Pair
argument_list|<
name|Put
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|puts
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|pair
operator|.
name|setSecond
argument_list|(
name|lockedRow
argument_list|)
expr_stmt|;
name|putsAndLocks
operator|.
name|add
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
name|codes
operator|=
name|region
operator|.
name|put
argument_list|(
name|putsAndLocks
operator|.
name|toArray
argument_list|(
operator|new
name|Pair
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...performed put"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|i
operator|==
literal|5
operator|)
condition|?
name|OperationStatusCode
operator|.
name|BAD_FAMILY
else|:
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|,
name|codes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Make sure we didn't do an extra batch
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|HLog
operator|.
name|getSyncOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure we still hold lock
name|assertTrue
argument_list|(
name|region
operator|.
name|isRowLocked
argument_list|(
name|lockedRow
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...releasing lock"
argument_list|)
expr_stmt|;
name|region
operator|.
name|releaseRowLock
argument_list|(
name|lockedRow
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// checkAndMutate tests
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testCheckAndMutate_WithEmptyRowValue
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|emptyVal
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
name|Integer
name|lockId
init|=
literal|null
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|//Putting data in key
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
comment|//checkAndPut with correct value
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|put
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// not empty anymore
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|put
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|delete
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
comment|//checkAndPut with correct value
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|//checkAndDelete with correct value
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|delete
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|delete
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|//checkAndPut looking for a null value
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|NullComparator
argument_list|()
argument_list|,
name|put
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckAndMutate_WithWrongValue
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
name|Integer
name|lockId
init|=
literal|null
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|//Putting data in key
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//checkAndPut with wrong value
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|put
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//checkAndDelete with wrong value
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|delete
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckAndMutate_WithCorrectValue
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|Integer
name|lockId
init|=
literal|null
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|//Putting data in key
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//checkAndPut with correct value
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//checkAndDelete with correct value
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckAndPut_ThatPutWasWritten
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
name|Integer
name|lockId
init|=
literal|null
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Putting data in the key to check
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//Creating put to add
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|val2
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
comment|//checkAndPut with wrong value
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
expr_stmt|;
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|actual
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
operator|.
name|raw
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|expected
init|=
block|{
name|kv
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actual
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCheckAndPut_wrongRowInPut
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|,
name|COLUMNS
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value2
argument_list|)
argument_list|,
name|put
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|expected
parameter_list|)
block|{
comment|// expected exception.
block|}
block|}
specifier|public
name|void
name|testCheckAndDelete_ThatDeleteWasWritten
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|emptyVal
init|=
operator|new
name|byte
index|[]
block|{ }
decl_stmt|;
name|Integer
name|lockId
init|=
literal|null
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Put content
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|qf1
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|qf2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|qf3
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf3
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//Multi-column delete
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam2
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf3
argument_list|)
expr_stmt|;
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|delete
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|qf2
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val1
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|fam2
argument_list|,
name|qf2
argument_list|)
argument_list|)
expr_stmt|;
comment|//Family delete
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|delete
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val1
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
comment|//Row delete
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|delete
argument_list|,
name|lockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Delete tests
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testDelete_multiDeleteColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual
argument_list|,
literal|2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// We do support deleting more than 1 'latest' version
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelete_CheckFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam4"
argument_list|)
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|,
name|fam2
argument_list|,
name|fam3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam4
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//testing existing family
name|byte
index|[]
name|family
init|=
name|fam2
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|deleteMap
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|deleteMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|deleteMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Family "
operator|+
operator|new
name|String
argument_list|(
name|family
argument_list|)
operator|+
literal|" does not exist"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//testing non existing family
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|family
operator|=
name|fam4
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|deleteMap
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|deleteMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|deleteMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Family "
operator|+
operator|new
name|String
argument_list|(
name|family
argument_list|)
operator|+
literal|" does exist"
argument_list|,
literal|true
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelete_mixed
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam
block|}
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
operator|new
name|IncrementingEnvironmentEdge
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table_name"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|serverinfo
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"serverinfo"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|splitA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"splitA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|splitB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"splitB"
argument_list|)
decl_stmt|;
comment|// add some data:
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reference_A"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|splitB
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reference_B"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ip_address"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// ok now delete a split:
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// assert some things:
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|splitB
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that after a delete, I can put.
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reference_A"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now delete all... then test I can add stuff back
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reference_A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteRowWithFutureTs
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam
block|}
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table_name"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|serverinfo
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"serverinfo"
argument_list|)
decl_stmt|;
comment|// add data in the far future
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
operator|-
literal|5
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// now delete something in the present
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// make sure we still see our data
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete the future row
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
operator|-
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// make sure it is gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the special LATEST_TIMESTAMP option for puts gets    * replaced by the actual timestamp    */
specifier|public
name|void
name|testPutWithLatestTS
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam
block|}
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
comment|// add data with LATEST_TIMESTAMP, put without WAL
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure it shows up with an actual timestamp
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got: "
operator|+
name|kv
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"LATEST_TIMESTAMP was not replaced with real timestamp"
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
comment|// Check same with WAL enabled (historically these took different
comment|// code paths, so check both)
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure it shows up with an actual timestamp
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|kv
operator|=
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got: "
operator|+
name|kv
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"LATEST_TIMESTAMP was not replaced with real timestamp"
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testScanner_DeleteOneFamilyNotAnother
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_table"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"columnA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"columnB"
argument_list|)
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|,
name|fam2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|rowA
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now create data.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowA
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowB
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowA
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rowB
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteColumns_PostInsert
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
expr_stmt|;
name|doTestDelete_AndPostInsert
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteFamily_PostInsert
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|doTestDelete_AndPostInsert
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestDelete_AndPostInsert
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
operator|new
name|IncrementingEnvironmentEdge
argument_list|()
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// now delete the value:
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// ok put data:
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// ok get:
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertByteEquals
argument_list|(
name|value2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
argument_list|)
expr_stmt|;
comment|// next:
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertByteEquals
argument_list|(
name|value2
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertByteEquals
argument_list|(
name|fam1
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
name|assertByteEquals
argument_list|(
name|qual1
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertByteEquals
argument_list|(
name|row
argument_list|,
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelete_CheckTimestampUpdated
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|//Building checkerList
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|deleteMap
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|deleteMap
operator|.
name|put
argument_list|(
name|fam1
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|deleteMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// extract the key values out the memstore:
comment|// This is kinda hacky, but better than nothing...
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
name|firstKv
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|first
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|firstKv
operator|.
name|getTimestamp
argument_list|()
operator|<=
name|now
argument_list|)
expr_stmt|;
name|now
operator|=
name|firstKv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
operator|.
name|memstore
operator|.
name|kvset
control|)
block|{
name|assertTrue
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|<=
name|now
argument_list|)
expr_stmt|;
name|now
operator|=
name|kv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Get tests
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testGet_FamilyChecker
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"False"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col1
argument_list|)
expr_stmt|;
comment|//Test
try|try
block|{
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchColumnFamilyException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGet_Basic
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5"
argument_list|)
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|//Add to memstore
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col5
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col4
argument_list|)
expr_stmt|;
comment|//Expected result
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|expected
init|=
block|{
name|kv1
block|,
name|kv2
block|}
decl_stmt|;
comment|//Test
name|Result
name|res
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getFamily
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test using a filter on a Get
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|2
decl_stmt|;
name|g
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnCountGetFilter
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGet_Empty
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"emptytable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Test that checked if there was anything special when reading from the ROOT
comment|//table. To be able to use this test you need to comment the part in
comment|//HTableDescriptor that checks for '-' and '.'. You also need to remove the
comment|//s in the beginning of the name.
specifier|public
name|void
name|stestGet_Root
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|HConstants
operator|.
name|ROOT_TABLE_NAME
argument_list|,
name|method
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|//Add to memstore
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
comment|//Expected result
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|expected
init|=
block|{
name|kv1
block|}
decl_stmt|;
comment|//Test from memstore
name|Result
name|res
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getFamily
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//flush
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|//test2
name|res
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getFamily
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|res
operator|.
name|raw
argument_list|()
index|[
name|i
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Scan
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|.
name|next
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getFamily
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|expected
index|[
name|i
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Lock test
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testLocks
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
specifier|final
name|int
name|threadCount
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|lockCount
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Integer
index|[]
name|lockids
init|=
operator|new
name|Integer
index|[
name|lockCount
index|]
decl_stmt|;
comment|// Get locks.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lockCount
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|byte
index|[]
name|rowid
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|lockids
index|[
name|i
index|]
operator|=
name|region
operator|.
name|obtainRowLock
argument_list|(
name|rowid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowid
argument_list|,
name|region
operator|.
name|getRowFromLock
argument_list|(
name|lockids
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" locked "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|rowid
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" set "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|lockCount
argument_list|)
operator|+
literal|" locks"
argument_list|)
expr_stmt|;
comment|// Abort outstanding locks.
for|for
control|(
name|int
name|i
init|=
name|lockCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|region
operator|.
name|releaseRowLock
argument_list|(
name|lockids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" unlocked "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" released "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|lockCount
argument_list|)
operator|+
literal|" locks"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Startup all our threads.
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Now wait around till all are done.
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Go around again.
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"locks completed."
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Merge test
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|addContent
argument_list|(
name|region
argument_list|,
name|fam3
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|byte
index|[]
name|splitRow
init|=
name|region
operator|.
name|checkSplit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|splitRow
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitRow: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitRow
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
index|[]
name|subregions
init|=
name|splitRegion
argument_list|(
name|region
argument_list|,
name|splitRow
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Need to open the regions.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subregions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|openClosedRegion
argument_list|(
name|subregions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|subregions
index|[
name|i
index|]
operator|.
name|compactStores
argument_list|()
expr_stmt|;
block|}
name|Path
name|oldRegionPath
init|=
name|region
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|Path
name|oldRegion1
init|=
name|subregions
index|[
literal|0
index|]
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|Path
name|oldRegion2
init|=
name|subregions
index|[
literal|1
index|]
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|mergeAdjacent
argument_list|(
name|subregions
index|[
literal|0
index|]
argument_list|,
name|subregions
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Merge regions elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegion1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegion2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegionPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"splitAndMerge completed."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subregions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|subregions
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param parent Region to split.    * @param midkey Key to split around.    * @return The Regions we created.    * @throws IOException    */
name|HRegion
index|[]
name|splitRegion
parameter_list|(
specifier|final
name|HRegion
name|parent
parameter_list|,
specifier|final
name|byte
index|[]
name|midkey
parameter_list|)
throws|throws
name|IOException
block|{
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|SplitTransaction
name|st
init|=
operator|new
name|SplitTransaction
argument_list|(
name|parent
argument_list|,
name|midkey
argument_list|)
decl_stmt|;
comment|// If prepare does not return true, for some reason -- logged inside in
comment|// the prepare call -- we are not ready to split just now.  Just return.
if|if
condition|(
operator|!
name|st
operator|.
name|prepare
argument_list|()
condition|)
return|return
literal|null
return|;
try|try
block|{
name|result
operator|=
name|st
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running rollback of failed split of "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"; "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|rollback
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successful rollback of failed split of "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// If failed rollback, kill this server to avoid having a hole in table.
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed rollback of failed split of "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" -- aborting server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HRegion
index|[]
block|{
name|result
operator|.
name|getFirst
argument_list|()
block|,
name|result
operator|.
name|getSecond
argument_list|()
block|}
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Scanner tests
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testGetScanner_WithOkFamilies
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Families could not be found in Region"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetScanner_WithNotOkFamilies
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Families could not be found in Region"
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetScanner_WithNoFamilies
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam4"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|,
name|fam4
block|}
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Putting data in Region
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam4
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
literal|null
decl_stmt|;
name|HRegion
operator|.
name|RegionScanner
name|is
init|=
literal|null
decl_stmt|;
comment|//Testing to see how many scanners that is produced by getScanner, starting
comment|//with known number, 2 - current = 1
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam4
argument_list|)
expr_stmt|;
name|is
operator|=
operator|(
name|RegionScanner
operator|)
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|ReadWriteConsistencyControl
operator|.
name|resetThreadReadPoint
argument_list|(
name|region
operator|.
name|getRWCC
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|RegionScanner
operator|)
name|is
operator|)
operator|.
name|storeHeap
operator|.
name|getHeap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|is
operator|=
operator|(
name|RegionScanner
operator|)
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|ReadWriteConsistencyControl
operator|.
name|resetThreadReadPoint
argument_list|(
name|region
operator|.
name|getRWCC
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|families
operator|.
name|length
operator|-
literal|1
argument_list|,
operator|(
operator|(
name|RegionScanner
operator|)
name|is
operator|)
operator|.
name|storeHeap
operator|.
name|getHeap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method tests https://issues.apache.org/jira/browse/HBASE-2516.    */
specifier|public
name|void
name|testGetScanner_WithRegionClosed
parameter_list|()
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got IOException during initHRegion, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|getScanner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to get an exception during getScanner on a region that is closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
name|e
parameter_list|)
block|{
comment|//this is the correct exception that is expected
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got wrong type of exception - should be a NotServingRegionException, but was an IOException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRegionScanner_Next
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam4"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|,
name|fam4
block|}
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam3
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam4
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam3
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam4
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam4
argument_list|)
expr_stmt|;
name|InternalScanner
name|is
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|res
init|=
literal|null
decl_stmt|;
comment|//Result 1
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected1
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expected1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam4
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|is
operator|.
name|next
argument_list|(
name|res
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Result 2
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected2
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam2
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expected2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam4
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|is
operator|.
name|next
argument_list|(
name|res
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testScanner_ExplicitColumns_FromMemStore_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//Expected
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|//Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testScanner_ExplicitColumns_FromFilesOnly_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
name|long
name|ts1
init|=
literal|1
decl_stmt|;
comment|//System.currentTimeMillis();
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|//Expected
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|//Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testScanner_ExplicitColumns_FromMemStoreAndFiles_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
literal|1
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
name|long
name|ts4
init|=
name|ts1
operator|+
literal|3
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Putting data in Region
name|KeyValue
name|kv14
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv24
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv14
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv24
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//Expected
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv14
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv24
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf2
argument_list|)
expr_stmt|;
name|int
name|versions
init|=
literal|3
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|//Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testScanner_Wildcard_FromMemStore_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//Expected
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|//Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testScanner_Wildcard_FromFilesOnly_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
literal|1
decl_stmt|;
comment|//System.currentTimeMillis();
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|//Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|//Expected
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|//Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testScanner_StopRow1542
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_table"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row111"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row222"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row333"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row444"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row555"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Pub111"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Pub222"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|15L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row3
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row4
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row5
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|40L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row3
argument_list|,
name|row4
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|col1
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_UpdatingInPlace
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|1L
decl_stmt|;
name|long
name|amount
init|=
literal|3L
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|long
name|result
init|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|+
name|amount
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
comment|// ICV removes any extra values floating around in there.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|memstore
operator|.
name|snapshot
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value
operator|+
name|amount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_BumpSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|ManualEnvironmentEdge
name|mee
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
name|mee
argument_list|)
expr_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|42L
decl_stmt|;
name|long
name|incr
init|=
literal|44L
decl_stmt|;
comment|// first put something in kvset, then snapshot it.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// get the store in question:
name|Store
name|s
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
name|s
operator|.
name|snapshot
argument_list|()
expr_stmt|;
comment|//bam
comment|// now increment:
name|long
name|newVal
init|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|incr
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|+
name|incr
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
comment|// get both versions:
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|first
init|=
name|r
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|KeyValue
name|second
init|=
name|r
operator|.
name|raw
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ICV failed to upgrade timestamp"
argument_list|,
name|first
operator|.
name|getTimestamp
argument_list|()
operator|!=
name|second
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_ConcurrentFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|1L
decl_stmt|;
name|long
name|amount
init|=
literal|3L
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// now increment during a flush
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test ICV, got IOE during flushcache()"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|r
init|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|+
name|amount
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|// this also asserts there is only 1 KeyValue in the set.
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value
operator|+
name|amount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_heapSize
parameter_list|()
throws|throws
name|IOException
block|{
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
operator|new
name|IncrementingEnvironmentEdge
argument_list|()
argument_list|)
expr_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|byAmount
init|=
literal|1L
decl_stmt|;
name|long
name|size
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|byAmount
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|size
operator|=
name|region
operator|.
name|memstoreSize
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"memstore size: "
operator|+
name|size
argument_list|,
name|size
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testIncrementColumnValue_UpdatingInPlace_Negative
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|3L
decl_stmt|;
name|long
name|amount
init|=
operator|-
literal|1L
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|long
name|result
init|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|+
name|amount
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value
operator|+
name|amount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_AddingNew
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|1L
decl_stmt|;
name|long
name|amount
init|=
literal|3L
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|long
name|result
init|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual3
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amount
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual3
argument_list|)
expr_stmt|;
name|Result
name|rr
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rr
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure none of the other cols were incremented.
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual3
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_UpdatingFromSF
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|1L
decl_stmt|;
name|long
name|amount
init|=
literal|3L
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// flush to disk.
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|r
init|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|+
name|amount
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value
operator|+
name|amount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_AddingNewAfterSFCheck
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|1L
decl_stmt|;
name|long
name|amount
init|=
literal|3L
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|r
init|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual3
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amount
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual3
argument_list|,
name|amount
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// ensure that this gets to disk.
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual3
argument_list|,
name|amount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Added for HBASE-3235.    *    * When the initial put and an ICV update were arriving with the same timestamp,    * the initial Put KV was being skipped during {@link MemStore#upsert(KeyValue)}    * causing the iteration for matching KVs, causing the update-in-place to not    * happen and the ICV put to effectively disappear.    * @throws IOException    */
specifier|public
name|void
name|testIncrementColumnValue_UpdatingInPlace_TimestampClobber
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|long
name|value
init|=
literal|1L
decl_stmt|;
name|long
name|amount
init|=
literal|3L
decl_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ManualEnvironmentEdge
name|mock
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|mock
operator|.
name|setValue
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
name|mock
argument_list|)
expr_stmt|;
comment|// verify we catch an ICV on a put with the same timestamp
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|long
name|result
init|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
operator|+
name|amount
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
comment|// ICV should update the existing Put with the same timestamp
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|memstore
operator|.
name|snapshot
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value
operator|+
name|amount
argument_list|)
expr_stmt|;
comment|// verify we catch an ICV even when the put ts> now
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual2
argument_list|,
name|amount
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|+
name|amount
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|store
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
comment|// ICV should update the existing Put with the same timestamp
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|memstore
operator|.
name|snapshot
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual2
argument_list|,
name|value
operator|+
name|amount
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_WrongInitialSize
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1234"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|row1Field1
init|=
literal|0
decl_stmt|;
name|int
name|row1Field2
init|=
literal|1
decl_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put1
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row1Field1
argument_list|)
argument_list|)
expr_stmt|;
name|put1
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row1Field2
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|long
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|region
operator|.
name|incrementColumnValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to fail here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// Expected.
block|}
name|assertICV
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|row1Field1
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual2
argument_list|,
name|row1Field2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertICV
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|familiy
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
comment|// run a get and see?
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|familiy
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|long
name|r
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amount
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertICV
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|familiy
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
comment|// run a get and see?
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|familiy
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|int
name|r
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amount
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testScanner_Wildcard_FromMemStoreAndFiles_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"quateslifier2"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
literal|1
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
name|long
name|ts4
init|=
name|ts1
operator|+
literal|3
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|//Putting data in Region
name|KeyValue
name|kv14
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv24
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv14
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv24
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//Expected
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv14
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv24
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|int
name|versions
init|=
literal|3
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|//Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Split test
comment|//////////////////////////////////////////////////////////////////////////////
comment|/**    * Splits twice and verifies getting from each of the split regions.    * @throws Exception    */
specifier|public
name|void
name|testBasicSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|addContent
argument_list|(
name|region
argument_list|,
name|fam3
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|byte
index|[]
name|splitRow
init|=
name|region
operator|.
name|checkSplit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|splitRow
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitRow: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitRow
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
index|[]
name|regions
init|=
name|splitRegion
argument_list|(
name|region
argument_list|,
name|splitRow
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Need to open the regions.
comment|// TODO: Add an 'open' to HRegion... don't do open by constructing
comment|// instance.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|=
name|openClosedRegion
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Assert can get rows out of new regions. Should be able to get first
comment|// row from first region and the midkey from second region.
name|assertGet
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|fam3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|fam3
argument_list|,
name|splitRow
argument_list|)
expr_stmt|;
comment|// Test I can get scanner and that it starts at right place.
name|assertScan
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|fam3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertScan
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|fam3
argument_list|,
name|splitRow
argument_list|)
expr_stmt|;
comment|// Now prove can't split regions that have references.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Add so much data to this region, we create a store file that is>
comment|// than one of our unsplitable references. it will.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam3
argument_list|)
expr_stmt|;
block|}
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam2
argument_list|)
expr_stmt|;
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|regions
index|[
name|i
index|]
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|midkeys
init|=
operator|new
name|byte
index|[
name|regions
operator|.
name|length
index|]
index|[]
decl_stmt|;
comment|// To make regions splitable force compaction.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|midkeys
index|[
name|i
index|]
operator|=
name|regions
index|[
name|i
index|]
operator|.
name|checkSplit
argument_list|()
expr_stmt|;
block|}
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
comment|// Split these two daughter regions so then I'll have 4 regions. Will
comment|// split because added data above.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HRegion
index|[]
name|rs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|midkeys
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|rs
operator|=
name|splitRegion
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|midkeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sortedMap
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rs
index|[
name|j
index|]
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|openClosedRegion
argument_list|(
name|rs
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Made 4 regions"
argument_list|)
expr_stmt|;
comment|// The splits should have been even. Test I can get some arbitrary row
comment|// out of each.
name|int
name|interval
init|=
operator|(
name|LAST_CHAR
operator|-
name|FIRST_CHAR
operator|)
operator|/
literal|3
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|sortedMap
operator|.
name|values
argument_list|()
control|)
block|{
name|assertGet
argument_list|(
name|r
argument_list|,
name|fam3
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
index|[
literal|0
index|]
operator|+=
name|interval
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|regions
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testSplitRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam3
block|}
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|//Put data in region
name|int
name|startRow
init|=
literal|100
decl_stmt|;
name|putData
argument_list|(
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|int
name|splitRow
init|=
name|startRow
operator|+
name|numRows
decl_stmt|;
name|putData
argument_list|(
name|splitRow
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|HRegion
index|[]
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|splitRegion
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRow
argument_list|)
argument_list|)
expr_stmt|;
comment|//Opening the regions returned.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|=
name|openClosedRegion
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|//Verifying that the region has been split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regions
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//Verifying that all data is still there and that data is in the right
comment|//place
name|verifyData
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|splitRow
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Flushes the cache in a thread while scanning. The tests verify that the    * scan is coherent - e.g. the returned results are always of the same or    * later update as the previous results.    * @throws IOException scan / compact    * @throws InterruptedException thread join    */
specifier|public
name|void
name|testFlushCacheWhileScanning
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFlushCacheWhileScanning"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|int
name|numRows
init|=
literal|1000
decl_stmt|;
name|int
name|flushAndScanInterval
init|=
literal|10
decl_stmt|;
name|int
name|compactInterval
init|=
literal|10
operator|*
name|flushAndScanInterval
decl_stmt|;
name|String
name|method
init|=
literal|"testFlushCacheWhileScanning"
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|FlushThread
name|flushThread
init|=
operator|new
name|FlushThread
argument_list|()
decl_stmt|;
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|5L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|toggle
init|=
literal|true
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|%
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|compactInterval
operator|==
literal|0
condition|)
block|{
comment|//System.out.println("iteration = " + i);
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|5L
condition|)
block|{
name|expectedCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|flushAndScanInterval
operator|==
literal|0
condition|)
block|{
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
if|if
condition|(
name|toggle
condition|)
block|{
name|flushThread
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|res
argument_list|)
condition|)
empty_stmt|;
if|if
condition|(
operator|!
name|toggle
condition|)
block|{
name|flushThread
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|expectedCount
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|toggle
operator|=
operator|!
name|toggle
expr_stmt|;
block|}
block|}
name|flushThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
block|}
specifier|protected
class|class
name|FlushThread
extends|extends
name|Thread
block|{
specifier|private
specifier|volatile
name|boolean
name|done
decl_stmt|;
specifier|private
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|done
parameter_list|()
block|{
name|done
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkNoError
parameter_list|()
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|done
operator|=
literal|false
expr_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
if|if
condition|(
name|done
condition|)
block|{
break|break;
block|}
block|}
block|}
try|try
block|{
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while flusing cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
operator|=
name|e
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes very wide records and scans for the latest every time..    * Flushes and compacts the region every now and then to keep things    * realistic.    *    * @throws IOException          by flush / scan / compaction    * @throws InterruptedException when joining threads    */
specifier|public
name|void
name|testWritesWhileScanning
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWritesWhileScanning"
argument_list|)
decl_stmt|;
name|int
name|testCount
init|=
literal|100
decl_stmt|;
name|int
name|numRows
init|=
literal|1
decl_stmt|;
name|int
name|numFamilies
init|=
literal|10
decl_stmt|;
name|int
name|numQualifiers
init|=
literal|100
decl_stmt|;
name|int
name|flushInterval
init|=
literal|7
decl_stmt|;
name|int
name|compactInterval
init|=
literal|5
operator|*
name|flushInterval
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
operator|new
name|byte
index|[
name|numFamilies
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFamilies
condition|;
name|i
operator|++
control|)
block|{
name|families
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|qualifiers
init|=
operator|new
name|byte
index|[
name|numQualifiers
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQualifiers
condition|;
name|i
operator|++
control|)
block|{
name|qualifiers
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|String
name|method
init|=
literal|"testWritesWhileScanning"
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|PutThread
name|putThread
init|=
operator|new
name|PutThread
argument_list|(
name|numRows
argument_list|,
name|families
argument_list|,
name|qualifiers
argument_list|)
decl_stmt|;
name|putThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|waitForFirstPut
argument_list|()
expr_stmt|;
name|FlushThread
name|flushThread
init|=
operator|new
name|FlushThread
argument_list|()
decl_stmt|;
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
comment|//    scan.setFilter(new RowFilter(CompareFilter.CompareOp.EQUAL,
comment|//      new BinaryComparator(Bytes.toBytes("row0"))));
name|int
name|expectedCount
init|=
name|numFamilies
operator|*
name|numQualifiers
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|prevTimestamp
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|compactInterval
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|flushInterval
operator|==
literal|0
condition|)
block|{
comment|//System.out.println("flush scan iteration = " + i);
name|flushThread
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|boolean
name|previousEmpty
init|=
name|res
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|res
argument_list|)
condition|)
empty_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|previousEmpty
operator|||
name|i
operator|>
name|compactInterval
condition|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|expectedCount
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|timestamp
init|=
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Timestamps were broke: "
operator|+
name|timestamp
operator|+
literal|" prev: "
operator|+
name|prevTimestamp
argument_list|,
name|timestamp
operator|>=
name|prevTimestamp
argument_list|)
expr_stmt|;
name|prevTimestamp
operator|=
name|timestamp
expr_stmt|;
block|}
block|}
name|putThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
block|}
specifier|protected
class|class
name|PutThread
extends|extends
name|Thread
block|{
specifier|private
specifier|volatile
name|boolean
name|done
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|numPutsFinished
init|=
literal|0
decl_stmt|;
specifier|private
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|numRows
decl_stmt|;
specifier|private
name|byte
index|[]
index|[]
name|families
decl_stmt|;
specifier|private
name|byte
index|[]
index|[]
name|qualifiers
decl_stmt|;
specifier|private
name|PutThread
parameter_list|(
name|int
name|numRows
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|)
block|{
name|this
operator|.
name|numRows
operator|=
name|numRows
expr_stmt|;
name|this
operator|.
name|families
operator|=
name|families
expr_stmt|;
name|this
operator|.
name|qualifiers
operator|=
name|qualifiers
expr_stmt|;
block|}
comment|/**      * Block until this thread has put at least one row.      */
specifier|public
name|void
name|waitForFirstPut
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// wait until put thread actually puts some data
while|while
condition|(
name|numPutsFinished
operator|==
literal|0
condition|)
block|{
name|checkNoError
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|done
parameter_list|()
block|{
name|done
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkNoError
parameter_list|()
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|done
operator|=
literal|false
expr_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
try|try
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|numRows
condition|;
name|r
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|r
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
operator|(
name|long
operator|)
name|numPutsFinished
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|numPutsFinished
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//            System.out.println("Putting of kvsetsize=" + put.size());
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|numPutsFinished
operator|++
expr_stmt|;
if|if
condition|(
name|numPutsFinished
operator|>
literal|0
operator|&&
name|numPutsFinished
operator|%
literal|47
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"put iteration = "
operator|+
name|numPutsFinished
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
operator|(
name|long
operator|)
name|numPutsFinished
operator|-
literal|30
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|numPutsFinished
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error while putting records"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Writes very wide records and gets the latest row every time..    * Flushes and compacts the region every now and then to keep things    * realistic.    *    * @throws IOException          by flush / scan / compaction    * @throws InterruptedException when joining threads    */
specifier|public
name|void
name|testWritesWhileGetting
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWritesWhileScanning"
argument_list|)
decl_stmt|;
name|int
name|testCount
init|=
literal|100
decl_stmt|;
name|int
name|numRows
init|=
literal|1
decl_stmt|;
name|int
name|numFamilies
init|=
literal|10
decl_stmt|;
name|int
name|numQualifiers
init|=
literal|100
decl_stmt|;
name|int
name|flushInterval
init|=
literal|10
decl_stmt|;
name|int
name|compactInterval
init|=
literal|10
operator|*
name|flushInterval
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
operator|new
name|byte
index|[
name|numFamilies
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFamilies
condition|;
name|i
operator|++
control|)
block|{
name|families
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|qualifiers
init|=
operator|new
name|byte
index|[
name|numQualifiers
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQualifiers
condition|;
name|i
operator|++
control|)
block|{
name|qualifiers
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|String
name|method
init|=
literal|"testWritesWhileGetting"
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|PutThread
name|putThread
init|=
operator|new
name|PutThread
argument_list|(
name|numRows
argument_list|,
name|families
argument_list|,
name|qualifiers
argument_list|)
decl_stmt|;
name|putThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|waitForFirstPut
argument_list|()
expr_stmt|;
name|FlushThread
name|flushThread
init|=
operator|new
name|FlushThread
argument_list|()
decl_stmt|;
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row0"
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|int
name|expectedCount
init|=
name|numFamilies
operator|*
name|numQualifiers
decl_stmt|;
name|long
name|prevTimestamp
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|compactInterval
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|flushInterval
operator|==
literal|0
condition|)
block|{
comment|//System.out.println("iteration = " + i);
name|flushThread
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|boolean
name|previousEmpty
init|=
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|previousEmpty
operator|||
name|i
operator|>
name|compactInterval
condition|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|expectedCount
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO this was removed, now what dangit?!
comment|// search looking for the qualifier in question?
name|long
name|timestamp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|sorted
argument_list|()
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|,
name|families
index|[
literal|0
index|]
argument_list|)
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|qualifiers
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|timestamp
operator|=
name|kv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|timestamp
operator|>=
name|prevTimestamp
argument_list|)
expr_stmt|;
name|prevTimestamp
operator|=
name|timestamp
expr_stmt|;
name|byte
index|[]
name|gotValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|raw
argument_list|()
control|)
block|{
name|byte
index|[]
name|thisValue
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|gotValue
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|gotValue
argument_list|,
name|thisValue
argument_list|)
expr_stmt|;
block|}
name|gotValue
operator|=
name|thisValue
expr_stmt|;
block|}
block|}
block|}
name|putThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testIndexesScanWithOneDeletedRow
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testIndexesScanWithOneDeletedRow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
comment|//Setting up region
name|String
name|method
init|=
literal|"testIndexesScanWithOneDeletedRow"
decl_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1L
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//delete.deleteColumn(family, qual1);
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|idxScan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|idxScan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|idxScan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
expr|<
name|Filter
operator|>
name|asList
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SingleColumnValueFilter
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|idxScan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
comment|//long start = System.nanoTime();
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|res
argument_list|)
condition|)
empty_stmt|;
comment|//long end = System.nanoTime();
comment|//System.out.println("memStoreEmpty=" + memStoreEmpty + ", time=" + (end - start)/1000000D);
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Bloom filter test
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testBloomFilterSize
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBloomFilterSize"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
comment|// Create Table
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
literal|"rowcol"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
literal|"testBloomFilterSize"
argument_list|)
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|int
name|num_unique_rows
init|=
literal|10
decl_stmt|;
name|int
name|duplicate_multiplier
init|=
literal|2
decl_stmt|;
name|int
name|num_storefiles
init|=
literal|4
decl_stmt|;
name|int
name|version
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|num_storefiles
condition|;
name|f
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|duplicate_multiplier
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|num_unique_rows
condition|;
name|j
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|version
operator|++
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
comment|//before compaction
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFile
name|storefile
range|:
name|storeFiles
control|)
block|{
name|StoreFile
operator|.
name|Reader
name|reader
init|=
name|storefile
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|num_unique_rows
operator|*
name|duplicate_multiplier
argument_list|,
name|reader
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|num_unique_rows
argument_list|,
name|reader
operator|.
name|getFilterEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//after compaction
name|storeFiles
operator|=
name|store
operator|.
name|getStorefiles
argument_list|()
expr_stmt|;
for|for
control|(
name|StoreFile
name|storefile
range|:
name|storeFiles
control|)
block|{
name|StoreFile
operator|.
name|Reader
name|reader
init|=
name|storefile
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|num_unique_rows
operator|*
name|duplicate_multiplier
operator|*
name|num_storefiles
argument_list|,
name|reader
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|num_unique_rows
argument_list|,
name|reader
operator|.
name|getFilterEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAllColumnsWithBloomFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testAllColumnsWithBloomFilter"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
comment|//Create table
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
literal|"rowcol"
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_REPLICATION_SCOPE
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
literal|"testAllColumnsWithBloomFilter"
argument_list|)
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// For row:0, col:0: insert versions 1 through 5.
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
literal|0
argument_list|)
decl_stmt|;
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
literal|0
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|idx
init|=
literal|1
init|;
name|idx
operator|<=
literal|4
condition|;
name|idx
operator|++
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|column
argument_list|,
name|idx
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-version-"
operator|+
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//Flush
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|//Get rows
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
operator|.
name|raw
argument_list|()
decl_stmt|;
comment|//Check if rows are correct
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**     * Testcase to cover bug-fix for HBASE-2823     * Ensures correct delete when issuing delete row     * on columns with bloom filter set to row+col (BloomType.ROWCOL)    */
specifier|public
name|void
name|testDeleteRowWithBloomFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testDeleteRowWithBloomFilter"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|familyName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyName"
argument_list|)
decl_stmt|;
comment|// Create Table
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|familyName
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
literal|"rowcol"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
literal|"TestDeleteRowWithBloomFilter"
argument_list|)
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// Insert some data
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
name|col
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|familyName
argument_list|,
name|col
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"SomeRandomValue"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Get remaining rows (should have none)
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|familyName
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|keyValues
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
operator|.
name|raw
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|keyValues
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|putData
parameter_list|(
name|int
name|startRow
parameter_list|,
name|int
name|numRows
parameter_list|,
name|byte
index|[]
name|qf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|startRow
operator|+
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyData
parameter_list|(
name|HRegion
name|newReg
parameter_list|,
name|int
name|startRow
parameter_list|,
name|int
name|numRows
parameter_list|,
name|byte
index|[]
name|qf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|startRow
operator|+
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf
argument_list|)
expr_stmt|;
block|}
name|Result
name|result
init|=
name|newReg
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|raw
init|=
name|result
operator|.
name|sorted
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|families
operator|.
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|families
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|row
argument_list|,
name|raw
index|[
name|j
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|families
index|[
name|j
index|]
argument_list|,
name|raw
index|[
name|j
index|]
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|qf
argument_list|,
name|raw
index|[
name|j
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|assertGet
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|k
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Now I have k, get values out and assert they are as expected.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|k
argument_list|)
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|results
init|=
name|r
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
operator|.
name|raw
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|results
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|tmp
init|=
name|results
index|[
name|j
index|]
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Row should be equal to value every time.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|k
argument_list|,
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Assert first value in the passed region is<code>firstValue</code>.    * @param r    * @param fs    * @param firstValue    * @throws IOException    */
specifier|private
name|void
name|assertScan
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|fs
parameter_list|,
specifier|final
name|byte
index|[]
name|firstValue
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fs
block|}
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|families
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|scan
operator|.
name|addFamily
argument_list|(
name|families
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|r
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|curVals
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|OUTER_LOOP
label|:
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|KeyValue
name|kv
range|:
name|curVals
control|)
block|{
name|byte
index|[]
name|val
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|curval
init|=
name|val
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|curval
argument_list|,
name|firstValue
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not asserting anything.  Might as well break.
break|break
name|OUTER_LOOP
break|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Configuration
name|initSplit
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Always compact if there is more than one store file.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Make lease timeout longer, lease checks less frequent
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.lease.thread.wakefrequency"
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_REGIONSERVER_LEASE_PERIOD_KEY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Increase the amount of time between client retries
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// This size should make it so we always split using the addContent
comment|// below.  After adding all data, the first region is 1.3M
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.hregion.max.filesize"
argument_list|,
literal|1024
operator|*
literal|128
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|private
name|void
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|callingMethod
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
name|callingMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed delete of "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
name|region
operator|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that the passed in KeyValue has expected contents for the    * specified row, column& timestamp.    */
specifier|private
name|void
name|checkOneCell
parameter_list|(
name|KeyValue
name|kv
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|int
name|colIdx
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
name|String
name|ctx
init|=
literal|"rowIdx="
operator|+
name|rowIdx
operator|+
literal|"; colIdx="
operator|+
name|colIdx
operator|+
literal|"; ts="
operator|+
name|ts
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Row mismatch which checking: "
operator|+
name|ctx
argument_list|,
literal|"row:"
operator|+
name|rowIdx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColumnFamily mismatch while checking: "
operator|+
name|ctx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cf
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column qualifier mismatch while checking: "
operator|+
name|ctx
argument_list|,
literal|"column:"
operator|+
name|colIdx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Timestamp mismatch while checking: "
operator|+
name|ctx
argument_list|,
name|ts
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value mismatch while checking: "
operator|+
name|ctx
argument_list|,
literal|"value-version-"
operator|+
name|ts
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

