begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** JUnit test case for HLog */
end_comment

begin_class
specifier|public
class|class
name|TestHLog
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHLog
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LeaseManager
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSNamesystem
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|HLog
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dir
decl_stmt|;
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Path
name|hbaseDir
decl_stmt|;
specifier|private
specifier|static
name|Path
name|oldLogDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStatus
index|[]
name|entries
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|dir
range|:
name|entries
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make block sizes small.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.blocksize"
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.flushlogentries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// needed for testAppendClose()
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// quicker heartbeat interval for faster DN death notification
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"heartbeat.recheck.interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.heartbeat.interval"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.socket.timeout"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// faster failover with cluster.shutdown();fs.close() idiom
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"ipc.client.connect.max.retries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.client.block.recovery.retries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|hbaseDir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.rootdir"
argument_list|)
argument_list|)
expr_stmt|;
name|oldLogDir
operator|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
literal|".oldlogs"
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getName
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|"TestHLog"
return|;
block|}
comment|/**    * Just write multiple logs then split.  Before fix for HADOOP-2283, this    * would fail.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
decl_stmt|;
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|logdir
argument_list|,
name|oldLogDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|howmany
init|=
literal|3
decl_stmt|;
name|HRegionInfo
index|[]
name|infos
init|=
operator|new
name|HRegionInfo
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|howmany
condition|;
name|i
operator|++
control|)
block|{
name|infos
index|[
name|i
index|]
operator|=
operator|new
name|HRegionInfo
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Add edits for three regions.
try|try
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|howmany
condition|;
name|ii
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|howmany
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|howmany
condition|;
name|j
operator|++
control|)
block|{
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Region "
operator|+
name|i
operator|+
literal|": "
operator|+
name|edit
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|infos
index|[
name|i
index|]
argument_list|,
name|tableName
argument_list|,
name|edit
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|splitsdir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|dir
argument_list|,
literal|"splits"
argument_list|)
decl_stmt|;
name|HLogSplitter
name|logSplitter
init|=
name|HLogSplitter
operator|.
name|createLogSplitter
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
name|logSplitter
operator|.
name|splitLog
argument_list|(
name|splitsdir
argument_list|,
name|logdir
argument_list|,
name|this
operator|.
name|oldLogDir
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verifySplits
argument_list|(
name|splits
argument_list|,
name|howmany
argument_list|)
expr_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test new HDFS-265 sync.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|Broken_testSync
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// First verify that using streams all works.
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|getName
argument_list|()
operator|+
literal|".fsdos"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|sync
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"hlogdir"
argument_list|)
decl_stmt|;
name|HLog
name|wal
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|subdir
argument_list|,
name|oldLogDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|total
init|=
literal|20
decl_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|bytes
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|bytes
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now call sync and try reading.  Opening a Reader before you sync just
comment|// gives you EOFE.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// Open a Reader.
name|Path
name|walPath
init|=
name|wal
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
name|HLog
operator|.
name|Reader
name|reader
init|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|new
name|HLog
operator|.
name|Entry
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add test that checks to see that an open of a Reader works on a file
comment|// that has had a sync done on it.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|bytes
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|>=
name|total
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If I sync, should see double the edits.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Now do a test that ensures stuff works when we go over block boundary,
comment|// especially that we return good length on file.
specifier|final
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|1025
operator|*
literal|1024
index|]
decl_stmt|;
comment|// Make a 1M value.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|bytes
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now I should have written out lots of blocks.  Sync then read.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Close it and ensure that closed, Reader gets right length also.
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the findMemstoresWithEditsOlderThan method.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testFindMemstoresWithEditsOlderThan
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|regionsToSeqids
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Long
name|l
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|regionsToSeqids
operator|.
name|put
argument_list|(
name|l
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|regions
init|=
name|HLog
operator|.
name|findMemstoresWithEditsOlderThan
argument_list|(
literal|1
argument_list|,
name|regionsToSeqids
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
literal|"0"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|regions
operator|=
name|HLog
operator|.
name|findMemstoresWithEditsOlderThan
argument_list|(
literal|3
argument_list|,
name|regionsToSeqids
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|3
decl_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|regions
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Regions returned are not ordered.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
literal|"0"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
literal|"1"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
literal|"2"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifySplits
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|splits
parameter_list|,
specifier|final
name|int
name|howmany
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|howmany
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying="
operator|+
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Reader
name|reader
init|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|String
name|previousRegion
init|=
literal|null
decl_stmt|;
name|long
name|seqno
init|=
operator|-
literal|1
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|new
name|HLog
operator|.
name|Entry
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|HLogKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|region
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assert that all edits are for same region.
if|if
condition|(
name|previousRegion
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|previousRegion
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"oldseqno="
operator|+
name|seqno
operator|+
literal|", newseqno="
operator|+
name|key
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seqno
operator|<
name|key
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
expr_stmt|;
name|seqno
operator|=
name|key
operator|.
name|getLogSeqNum
argument_list|()
expr_stmt|;
name|previousRegion
operator|=
name|region
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|howmany
operator|*
name|howmany
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// For this test to pass, requires:
comment|// 1. HDFS-200 (append support)
comment|// 2. HDFS-988 (SafeMode should freeze file operations
comment|//              [FSNamesystem.nextGenerationStampForBlock])
comment|// 3. HDFS-142 (on restart, maintain pendingCreates)
annotation|@
name|Test
specifier|public
name|void
name|testAppendClose
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|regioninfo
init|=
operator|new
name|HRegionInfo
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"hlogdir"
argument_list|)
decl_stmt|;
name|Path
name|archdir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"hlogdir_archive"
argument_list|)
decl_stmt|;
name|HLog
name|wal
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|subdir
argument_list|,
name|archdir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|total
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|regioninfo
argument_list|,
name|tableName
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now call sync to send the data to HDFS datanodes
name|wal
operator|.
name|sync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|namenodePort
init|=
name|cluster
operator|.
name|getNameNodePort
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|walPath
init|=
name|wal
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
comment|// Stop the cluster.  (ensure restart since we're sharing MiniDFSCluster)
try|try
block|{
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
comment|// wal.writer.close() will throw an exception,
comment|// but still call this since it closes the LogSyncer thread first
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// closing FS last so DFSOutputStream can't call close
name|LOG
operator|.
name|info
argument_list|(
literal|"STOPPED first instance of the cluster"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Restart the cluster
while|while
condition|(
name|cluster
operator|.
name|isClusterUp
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Waiting for cluster to go down"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|namenodePort
argument_list|,
name|conf
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"START second instance."
argument_list|)
expr_stmt|;
block|}
comment|// set the lease period to be 1 second so that the
comment|// namenode triggers lease recovery upon append request
name|Method
name|setLeasePeriod
init|=
name|cluster
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setLeasePeriod"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Long
operator|.
name|TYPE
block|,
name|Long
operator|.
name|TYPE
block|}
argument_list|)
decl_stmt|;
name|setLeasePeriod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setLeasePeriod
operator|.
name|invoke
argument_list|(
name|cluster
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Long
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|Long
argument_list|(
literal|1000
argument_list|)
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now try recovering the log, like the HMaster would do
specifier|final
name|FileSystem
name|recoveredFs
init|=
name|fs
decl_stmt|;
specifier|final
name|Configuration
name|rlConf
init|=
name|conf
decl_stmt|;
class|class
name|RecoverLogThread
extends|extends
name|Thread
block|{
specifier|public
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|FSUtils
operator|.
name|recoverFileLease
argument_list|(
name|recoveredFs
argument_list|,
name|walPath
argument_list|,
name|rlConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
name|RecoverLogThread
name|t
init|=
operator|new
name|RecoverLogThread
argument_list|()
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Timeout after 60 sec. Without correct patches, would be an infinite loop
name|t
operator|.
name|join
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timed out waiting for HLog.recoverLog()"
argument_list|)
throw|;
block|}
if|if
condition|(
name|t
operator|.
name|exception
operator|!=
literal|null
condition|)
throw|throw
name|t
operator|.
name|exception
throw|;
comment|// Make sure you can read all the content
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|walPath
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HLogKey
name|key
init|=
name|HLog
operator|.
name|newKey
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|WALEdit
name|val
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be one KeyValue per WALEdit"
argument_list|,
name|val
operator|.
name|getKeyValues
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|total
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests that we can write out an edit, close, and then read it back in again.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testEditAdd
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|COL_COUNT
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|HLog
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|oldLogDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write columns named 1, 2, 3, etc. and then values of single byte
comment|// 1, 2, 3...
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COL_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"1"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|log
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|logSeqId
init|=
name|log
operator|.
name|startCacheFlush
argument_list|()
decl_stmt|;
name|log
operator|.
name|completeCacheFlush
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|logSeqId
argument_list|,
name|info
operator|.
name|isMetaRegion
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
name|log
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
comment|// Now open a reader on the log and assert append worked.
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|filename
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Above we added all columns on a single row so we only read one
comment|// entry in the below... thats why we have '1'.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|HLog
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
break|break;
name|HLogKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|WALEdit
name|val
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|key
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|val
operator|.
name|getKeyValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
name|HLog
operator|.
name|Entry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|HLogKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|WALEdit
name|val
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
comment|// Assert only one more row... the meta flushed row.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|key
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|val
operator|.
name|getKeyValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HLog
operator|.
name|METAROW
argument_list|,
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HLog
operator|.
name|METAFAMILY
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|HLog
operator|.
name|COMPLETE_CACHE_FLUSH
argument_list|,
name|val
operator|.
name|getKeyValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|COL_COUNT
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|oldLogDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write columns named 1, 2, 3, etc. and then values of single byte
comment|// 1, 2, 3...
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COL_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|log
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|logSeqId
init|=
name|log
operator|.
name|startCacheFlush
argument_list|()
decl_stmt|;
name|log
operator|.
name|completeCacheFlush
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|logSeqId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
name|log
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
comment|// Now open a reader on the log and assert append worked.
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|filename
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|COL_COUNT
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|val
range|:
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getKeyValues
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|val
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|idx
operator|+
literal|'0'
argument_list|)
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|val
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// Get next row... the meta flushed row.
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|val
range|:
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getKeyValues
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HLog
operator|.
name|METAROW
argument_list|,
name|val
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HLog
operator|.
name|METAFAMILY
argument_list|,
name|val
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|HLog
operator|.
name|COMPLETE_CACHE_FLUSH
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that we can visit entries before they are appended    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testVisitors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|COL_COUNT
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|oldLogDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DumbWALObserver
name|visitor
init|=
operator|new
name|DumbWALObserver
argument_list|()
decl_stmt|;
name|log
operator|.
name|registerWALActionsListener
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COL_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|COL_COUNT
argument_list|,
name|visitor
operator|.
name|increments
argument_list|)
expr_stmt|;
name|log
operator|.
name|unregisterWALActionsListener
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
literal|11
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COL_COUNT
argument_list|,
name|visitor
operator|.
name|increments
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|DumbWALObserver
implements|implements
name|WALObserver
block|{
name|int
name|increments
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitLogEntryBeforeWrite
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
block|{
name|increments
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|logRolled
parameter_list|(
name|Path
name|newFile
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|logRollRequested
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|logCloseRequested
parameter_list|()
block|{
comment|// not interested
block|}
block|}
block|}
end_class

end_unit

