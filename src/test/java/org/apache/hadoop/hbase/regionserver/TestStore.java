begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManagerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ManualEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * Test class for the Store  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestStore
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|Store
name|store
decl_stmt|;
name|byte
index|[]
name|table
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf6
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf6"
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|id
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestStore"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|/**    * Setup    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|qualifiers
operator|.
name|add
argument_list|(
name|qf1
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|qf3
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|qf5
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|iter
init|=
name|qualifiers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|byte
index|[]
name|next
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|next
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|methodName
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|methodName
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// some of the tests write 4 versions and then flush
comment|// (with HBASE-4241, lower versions are collected on flush)
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Setting up a Store
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
name|methodName
argument_list|)
decl_stmt|;
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
name|methodName
operator|+
literal|"/logs"
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HLog
name|hlog
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|logdir
argument_list|,
name|oldLogDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
operator|new
name|HRegion
argument_list|(
name|basedir
argument_list|,
name|hlog
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|Store
argument_list|(
name|basedir
argument_list|,
name|region
argument_list|,
name|hcd
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteExpiredStoreFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|storeFileNum
init|=
literal|4
decl_stmt|;
name|int
name|ttl
init|=
literal|1
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Enable the expired store file deletion
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.store.delete.expired.storefile"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
name|long
name|sleepTime
init|=
name|this
operator|.
name|store
operator|.
name|scanInfo
operator|.
name|getTtl
argument_list|()
operator|/
name|storeFileNum
decl_stmt|;
name|long
name|timeStamp
decl_stmt|;
comment|// There are 4 store files and the max time stamp difference among these
comment|// store files will be (this.store.ttl / storeFileNum)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|storeFileNum
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding some data for the store file #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|timeStamp
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|timeStamp
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
name|timeStamp
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
name|timeStamp
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
comment|// Verify the total number of store files
name|assertEquals
argument_list|(
name|storeFileNum
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Each compaction request will find one expired store file and delete it
comment|// by the compaction.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|storeFileNum
condition|;
name|i
operator|++
control|)
block|{
comment|// verify the expired store file.
name|CompactionRequest
name|cr
init|=
name|this
operator|.
name|store
operator|.
name|requestCompaction
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cr
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cr
operator|.
name|getFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
operator|<
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|this
operator|.
name|store
operator|.
name|scanInfo
operator|.
name|getTtl
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// Verify that the expired the store has been deleted.
name|this
operator|.
name|store
operator|.
name|compact
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storeFileNum
operator|-
name|i
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let the next store file expired.
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLowestModificationTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Initialize region
name|init
argument_list|(
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|storeFileNum
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|storeFileNum
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding some data for the store file #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|i
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
name|i
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
name|i
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// after flush; check the lowest time stamp
name|long
name|lowestTimeStampFromStore
init|=
name|Store
operator|.
name|getLowestTimestamp
argument_list|(
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|lowestTimeStampFromFS
init|=
name|getLowestTimeStampFromFS
argument_list|(
name|fs
argument_list|,
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lowestTimeStampFromStore
argument_list|,
name|lowestTimeStampFromFS
argument_list|)
expr_stmt|;
comment|// after compact; check the lowest time stamp
name|store
operator|.
name|compact
argument_list|(
name|store
operator|.
name|requestCompaction
argument_list|()
argument_list|)
expr_stmt|;
name|lowestTimeStampFromStore
operator|=
name|Store
operator|.
name|getLowestTimestamp
argument_list|(
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
expr_stmt|;
name|lowestTimeStampFromFS
operator|=
name|getLowestTimeStampFromFS
argument_list|(
name|fs
argument_list|,
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lowestTimeStampFromStore
argument_list|,
name|lowestTimeStampFromFS
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|getLowestTimeStampFromFS
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|List
argument_list|<
name|StoreFile
argument_list|>
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|minTs
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|minTs
return|;
block|}
name|Path
index|[]
name|p
init|=
operator|new
name|Path
index|[
name|candidates
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|candidates
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|p
index|[
name|i
index|]
operator|=
name|candidates
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|minTs
return|;
block|}
for|for
control|(
name|FileStatus
name|s
range|:
name|stats
control|)
block|{
name|minTs
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minTs
argument_list|,
name|s
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|minTs
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Get tests
comment|//////////////////////////////////////////////////////////////////////////////
comment|/**    * Test for hbase-1686.    * @throws IOException    */
specifier|public
name|void
name|testEmptyStoreFile
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a store file.
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Now put in place an empty store file.  Its a little tricky.  Have to
comment|// do manually with hacked in sequence id.
name|StoreFile
name|f
init|=
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|storedir
init|=
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|long
name|seqid
init|=
name|f
operator|.
name|getMaxSequenceId
argument_list|()
decl_stmt|;
name|Configuration
name|c
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|w
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|c
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|c
argument_list|)
argument_list|,
name|fs
argument_list|,
name|StoreFile
operator|.
name|DEFAULT_BLOCKSIZE_SMALL
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|storedir
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|w
operator|.
name|appendMetadata
argument_list|(
name|seqid
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Reopen it... should pick up two files
name|this
operator|.
name|store
operator|=
operator|new
name|Store
argument_list|(
name|storedir
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|this
operator|.
name|store
operator|.
name|getHRegion
argument_list|()
argument_list|,
name|this
operator|.
name|store
operator|.
name|getFamily
argument_list|()
argument_list|,
name|fs
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|this
operator|.
name|store
operator|.
name|getHRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Getting data from memstore only    * @throws IOException    */
specifier|public
name|void
name|testGet_FromMemStoreOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//Get
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
comment|//Compare
name|assertCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * Getting data from files only    * @throws IOException    */
specifier|public
name|void
name|testGet_FromFilesOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//Get
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
comment|//this.store.get(get, qualifiers, result);
comment|//Need to sort the result since multiple files
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
comment|//Compare
name|assertCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * Getting data from memstore and files    * @throws IOException    */
specifier|public
name|void
name|testGet_FromMemStoreAndFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//Get
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
comment|//Need to sort the result since multiple files
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
comment|//Compare
name|assertCheck
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|flush
parameter_list|(
name|int
name|storeFilessize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storeFilessize
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCheck
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// IncrementColumnValue tests
comment|//////////////////////////////////////////////////////////////////////////////
comment|/*    * test the internal details of how ICV works, especially during a flush scenario.    */
specifier|public
name|void
name|testIncrementColumnValue_ICVDuringFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|oldValue
init|=
literal|1L
decl_stmt|;
name|long
name|newValue
init|=
literal|3L
decl_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|oldValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// snapshot the store.
name|this
operator|.
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
comment|// add other things:
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|oldValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// update during the snapshot.
name|long
name|ret
init|=
name|this
operator|.
name|store
operator|.
name|updateColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
comment|// memstore should have grown by some amount.
name|assertTrue
argument_list|(
name|ret
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// then flush.
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// from the one we inserted up there, and a new one
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// how many key/values for this row are there?
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// all versions.
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|results
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|ts1
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|ts2
init|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ts1
operator|>
name|ts2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newValue
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldValue
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testICV_negMemstoreSize
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|time
init|=
literal|100
decl_stmt|;
name|ManualEnvironmentEdge
name|ee
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|ee
operator|.
name|setValue
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
name|ee
argument_list|)
expr_stmt|;
name|long
name|newValue
init|=
literal|3L
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
name|size
operator|+=
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"200909091000"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|+=
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"200909091200"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|+=
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"200909091300"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|+=
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"200909091400"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|+=
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"200909091500"
argument_list|)
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|newValue
operator|++
expr_stmt|;
name|long
name|ret
init|=
name|this
operator|.
name|store
operator|.
name|updateColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
name|long
name|ret2
init|=
name|this
operator|.
name|store
operator|.
name|updateColumnValue
argument_list|(
name|row2
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ret: "
operator|+
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret2
operator|!=
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ret2: "
operator|+
name|ret2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ret: "
operator|+
name|ret
argument_list|,
name|ret
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|size
operator|+=
name|ret
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ret2: "
operator|+
name|ret2
argument_list|,
name|ret2
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|size
operator|+=
name|ret2
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
name|ee
operator|.
name|setValue
argument_list|(
operator|++
name|time
argument_list|)
expr_stmt|;
block|}
name|long
name|computedSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|this
operator|.
name|store
operator|.
name|memstore
operator|.
name|kvset
control|)
block|{
name|long
name|kvsize
init|=
name|this
operator|.
name|store
operator|.
name|memstore
operator|.
name|heapSizeChange
argument_list|(
name|kv
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//System.out.println(kv + " size= " + kvsize + " kvsize= " + kv.heapSize());
name|computedSize
operator|+=
name|kvsize
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|computedSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementColumnValue_SnapshotFlushCombo
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualEnvironmentEdge
name|mee
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
name|mee
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|oldValue
init|=
literal|1L
decl_stmt|;
name|long
name|newValue
init|=
literal|3L
decl_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|oldValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// snapshot the store.
name|this
operator|.
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
comment|// update during the snapshot, the exact same TS as the Put (lololol)
name|long
name|ret
init|=
name|this
operator|.
name|store
operator|.
name|updateColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
comment|// memstore should have grown by some amount.
name|assertTrue
argument_list|(
name|ret
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// then flush.
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now increment again:
name|newValue
operator|+=
literal|1
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|updateColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
comment|// at this point we have a TS=1 in snapshot, and a TS=2 in kvset, so increment again:
name|newValue
operator|+=
literal|1
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|updateColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
comment|// the second TS should be TS=2 or higher., even though 'time=1' right now.
comment|// how many key/values for this row are there?
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// all versions.
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|results
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|ts1
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|long
name|ts2
init|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ts1
operator|>
name|ts2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newValue
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldValue
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mee
operator|.
name|setValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// time goes up slightly
name|newValue
operator|+=
literal|1
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|updateColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|results
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ts1
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
name|ts2
operator|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ts1
operator|>
name|ts2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newValue
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldValue
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHandleErrorsInFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting up a faulty file system that cannot write"
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testhandleerrorsinflush"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|)
decl_stmt|;
comment|// Inject our faulty LocalFileSystem
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|FaultyFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure it worked (above is sensitive to caching details in hadoop core)
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FaultyFileSystem
operator|.
name|class
argument_list|,
name|fs
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize region
name|init
argument_list|(
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding some data"
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Before flush, we should have no files"
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|store
operator|.
name|getHomedir
argument_list|()
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|files
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Got paths: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//flush
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing"
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't bubble up IOE!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Fault injected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"After failed flush, we should still have no files!"
argument_list|)
expr_stmt|;
name|files
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|store
operator|.
name|getHomedir
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Got paths: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|FaultyFileSystem
extends|extends
name|FilterFileSystem
block|{
name|List
argument_list|<
name|SoftReference
argument_list|<
name|FaultyOutputStream
argument_list|>
argument_list|>
name|outStreams
init|=
operator|new
name|ArrayList
argument_list|<
name|SoftReference
argument_list|<
name|FaultyOutputStream
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|faultPos
init|=
literal|200
decl_stmt|;
specifier|public
name|FaultyFileSystem
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|LocalFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Creating faulty!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FaultyOutputStream
argument_list|(
name|super
operator|.
name|create
argument_list|(
name|p
argument_list|)
argument_list|,
name|faultPos
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FaultyOutputStream
argument_list|(
name|super
operator|.
name|create
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
argument_list|,
name|faultPos
argument_list|)
return|;
block|}
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Fake it.  Call create instead.  The default implementation throws an IOE
comment|// that this is not supported.
return|return
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|FaultyOutputStream
extends|extends
name|FSDataOutputStream
block|{
specifier|volatile
name|long
name|faultPos
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|public
name|FaultyOutputStream
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|,
name|long
name|faultPos
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|faultPos
operator|=
name|faultPos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"faulty stream write at pos "
operator|+
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|injectFault
argument_list|()
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|injectFault
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|getPos
argument_list|()
operator|>=
name|faultPos
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fault injected"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|flushStore
parameter_list|(
name|Store
name|store
parameter_list|,
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFlusher
name|storeFlusher
init|=
name|store
operator|.
name|getStoreFlusher
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|storeFlusher
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|storeFlusher
operator|.
name|flushCache
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlusher
operator|.
name|commit
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generate a list of KeyValues for testing based on given parameters    * @param timestamps    * @param numRows    * @param qualifier    * @param family    * @return    */
name|List
argument_list|<
name|KeyValue
argument_list|>
name|getKeyValueSet
parameter_list|(
name|long
index|[]
name|timestamps
parameter_list|,
name|int
name|numRows
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvList
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|timestamp
range|:
name|timestamps
control|)
block|{
name|kvList
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|kvList
return|;
block|}
comment|/**    * Test to ensure correctness when using Stores with multiple timestamps    * @throws IOException    */
specifier|public
name|void
name|testMultipleTimestamps
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numRows
init|=
literal|1
decl_stmt|;
name|long
index|[]
name|timestamps1
init|=
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|5
block|,
literal|10
block|,
literal|20
block|}
decl_stmt|;
name|long
index|[]
name|timestamps2
init|=
operator|new
name|long
index|[]
block|{
literal|30
block|,
literal|80
block|}
decl_stmt|;
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvList1
init|=
name|getKeyValueSet
argument_list|(
name|timestamps1
argument_list|,
name|numRows
argument_list|,
name|qf1
argument_list|,
name|family
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvList1
control|)
block|{
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvList2
init|=
name|getKeyValueSet
argument_list|(
name|timestamps2
argument_list|,
name|numRows
argument_list|,
name|qf1
argument_list|,
name|family
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvList2
control|)
block|{
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|40
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|10
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|80
argument_list|,
literal|145
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|90
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for HBASE-3492 - Test split on empty colfam (no store files).    *    * @throws IOException When the IO operations fail.    */
specifier|public
name|void
name|testSplitWithEmptyColFam
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|getSplitPoint
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|forceSplit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|getSplitPoint
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|clearSplit_TESTS_ONLY
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

