begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManagerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestBlocksRead
extends|extends
name|HBaseTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBlocksRead
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|BlockCache
name|blockCache
decl_stmt|;
specifier|private
name|HBaseConfiguration
name|getConf
parameter_list|()
block|{
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
comment|// disable compactions in this test.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
name|DIR
init|=
name|HBaseTestingUtility
operator|.
name|getTestDir
argument_list|()
operator|+
literal|"/TestBlocksRead/"
decl_stmt|;
comment|/**    * @see org.apache.hadoop.hbase.HBaseTestCase#setUp()    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|HBaseConfiguration
name|conf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|familyDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_VERSIONS
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
literal|1
argument_list|,
comment|// small block size deliberate; each kv on its own block
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOMFILTER
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_REPLICATION_SCOPE
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|familyDesc
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
name|callingMethod
argument_list|)
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|blockCache
operator|=
name|StoreFile
operator|.
name|getBlockCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|putData
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|col
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|putData
argument_list|(
name|cf
argument_list|,
name|row
argument_list|,
name|col
argument_list|,
name|version
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|// generates a value to put for a row/col/version.
specifier|private
specifier|static
name|byte
index|[]
name|genValue
parameter_list|(
name|String
name|row
parameter_list|,
name|String
name|col
parameter_list|,
name|long
name|version
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Value:"
operator|+
name|row
operator|+
literal|"#"
operator|+
name|col
operator|+
literal|"#"
operator|+
name|version
argument_list|)
return|;
block|}
specifier|private
name|void
name|putData
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|col
parameter_list|,
name|long
name|versionStart
parameter_list|,
name|long
name|versionEnd
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|columnBytes
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|version
init|=
name|versionStart
init|;
name|version
operator|<=
name|versionEnd
condition|;
name|version
operator|++
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|cf
argument_list|,
name|columnBytes
argument_list|,
name|version
argument_list|,
name|genValue
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|private
name|KeyValue
index|[]
name|getData
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|String
name|row
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|int
name|expBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|blocksStart
init|=
name|getBlkAccessCount
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|column
range|:
name|columns
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|KeyValue
index|[]
name|kvs
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|,
literal|null
argument_list|)
operator|.
name|raw
argument_list|()
decl_stmt|;
name|long
name|blocksEnd
init|=
name|getBlkAccessCount
argument_list|(
name|cf
argument_list|)
decl_stmt|;
if|if
condition|(
name|expBlocks
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Blocks Read Check"
argument_list|,
name|expBlocks
argument_list|,
name|blocksEnd
operator|-
name|blocksStart
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Blocks Read = "
operator|+
operator|(
name|blocksEnd
operator|-
name|blocksStart
operator|)
operator|+
literal|"Expected = "
operator|+
name|expBlocks
argument_list|)
expr_stmt|;
return|return
name|kvs
return|;
block|}
specifier|private
name|KeyValue
index|[]
name|getData
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|column
parameter_list|,
name|int
name|expBlocks
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getData
argument_list|(
name|cf
argument_list|,
name|row
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|column
argument_list|)
argument_list|,
name|expBlocks
argument_list|)
return|;
block|}
specifier|private
name|void
name|deleteFamily
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|String
name|row
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|del
operator|.
name|deleteFamily
argument_list|(
name|cf
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteFamily
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|column
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|del
operator|.
name|deleteColumns
argument_list|(
name|cf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|del
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verifyData
parameter_list|(
name|KeyValue
name|kv
parameter_list|,
name|String
name|expectedRow
parameter_list|,
name|String
name|expectedCol
parameter_list|,
name|long
name|expectedVersion
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"RowCheck"
argument_list|,
name|expectedRow
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColumnCheck"
argument_list|,
name|expectedCol
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TSCheck"
argument_list|,
name|expectedVersion
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ValueCheck"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|genValue
argument_list|(
name|expectedRow
argument_list|,
name|expectedCol
argument_list|,
name|expectedVersion
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|getBlkAccessCount
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|)
block|{
return|return
name|blockCache
operator|.
name|getStats
argument_list|()
operator|.
name|getRequestCount
argument_list|()
return|;
block|}
comment|/**    * Test # of blocks read for some simple seek cases.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBlocksRead
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBlocksRead"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
name|KeyValue
name|kvs
index|[]
decl_stmt|;
name|HBaseConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col4"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col5"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col6"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col7"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Expected block reads: 1
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Expected block reads: 3
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Expected block reads: 5
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Expected block reads: 3
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col5"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col5"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test # of blocks read (targetted at some of the cases Lazy Seek optimizes).    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testLazySeekBlocksRead
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testLazySeekBlocksRead"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
decl_stmt|;
name|KeyValue
name|kvs
index|[]
decl_stmt|;
name|HBaseConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
comment|// File 1
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// File 2
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Baseline expected blocks read: 2
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Baseline expected blocks read: 6
comment|// This increase is a minor glitch due to: HBASE-4466. Once that
comment|// is fixed this will drop back. The extra access will be a cache
comment|// hit.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// File 3: Add another column
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Baseline expected blocks read: 5
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Get a column from older file.
comment|// Baseline expected blocks read: 3
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// File 4: Delete the entire row.
name|deleteFamily
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Baseline expected blocks read: 6.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// File 5: Delete
name|deleteFamily
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// File 6: some more puts, but with timestamps older than the
comment|// previous delete.
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Baseline expected blocks read: 10
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// File 7: Put back new data
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Baseline expected blocks read: 21
comment|// This increase is a minor glitch due to: HBASE-4466. Once that
comment|// is fixed this will drop back. The extra access will be a cache
comment|// hit. The test case only has 13 blocks altogther!
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

