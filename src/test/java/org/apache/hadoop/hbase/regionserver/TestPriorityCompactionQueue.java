begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for the priority compaction queue  */
end_comment

begin_class
specifier|public
class|class
name|TestPriorityCompactionQueue
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPriorityCompactionQueue
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{   }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{    }
class|class
name|DummyHRegion
extends|extends
name|HRegion
block|{
name|String
name|name
decl_stmt|;
name|DummyHRegion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|DummyHRegion
name|r
parameter_list|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|r
operator|.
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[DummyHRegion "
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|getRegionNameAsString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
specifier|protected
name|void
name|getAndCheckRegion
parameter_list|(
name|PriorityCompactionQueue
name|pq
parameter_list|,
name|HRegion
name|checkRegion
parameter_list|)
block|{
name|HRegion
name|r
init|=
name|pq
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|checkRegion
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't get expected "
operator|+
name|checkRegion
operator|+
literal|" got "
operator|+
name|r
argument_list|,
name|r
operator|.
name|equals
argument_list|(
name|checkRegion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addRegion
parameter_list|(
name|PriorityCompactionQueue
name|pq
parameter_list|,
name|HRegion
name|r
parameter_list|,
name|int
name|p
parameter_list|)
block|{
name|pq
operator|.
name|add
argument_list|(
name|r
argument_list|,
name|p
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Sleep 1 millisecond so 2 things are not put in the queue within the
comment|// same millisecond. The queue breaks ties arbitrarily between two
comment|// requests inserted at the same time. We want the ordering to
comment|// be consistent for our unit test.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// continue
block|}
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// tests
comment|// ////////////////////////////////////////////////////////////////////////////
comment|/** tests general functionality of the compaction queue */
annotation|@
name|Test
specifier|public
name|void
name|testPriorityQueue
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|PriorityCompactionQueue
name|pq
init|=
operator|new
name|PriorityCompactionQueue
argument_list|()
decl_stmt|;
name|HRegion
name|r1
init|=
operator|new
name|DummyHRegion
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
name|HRegion
name|r2
init|=
operator|new
name|DummyHRegion
argument_list|(
literal|"r2"
argument_list|)
decl_stmt|;
name|HRegion
name|r3
init|=
operator|new
name|DummyHRegion
argument_list|(
literal|"r3"
argument_list|)
decl_stmt|;
name|HRegion
name|r4
init|=
operator|new
name|DummyHRegion
argument_list|(
literal|"r4"
argument_list|)
decl_stmt|;
name|HRegion
name|r5
init|=
operator|new
name|DummyHRegion
argument_list|(
literal|"r5"
argument_list|)
decl_stmt|;
comment|// test 1
comment|// check fifo w/priority
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|)
expr_stmt|;
comment|// test 2
comment|// check fifo w/mixed priority
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|)
expr_stmt|;
comment|// test 3
comment|// check fifo w/mixed priority
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|)
expr_stmt|;
comment|// test 4
comment|// check fifo w/mixed priority elevation time
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|)
expr_stmt|;
comment|// reset the priority compaction queue back to a normal queue
name|pq
operator|=
operator|new
name|PriorityCompactionQueue
argument_list|()
expr_stmt|;
comment|// test 5
comment|// test that lower priority are removed from the queue when a high priority
comment|// is added
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Queue should be empty."
argument_list|,
name|pq
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// test 6
comment|// don't add the same region more than once
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Queue should be empty."
argument_list|,
name|pq
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// test 7
comment|// we can handle negative priorities
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_USER
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|,
name|CompactSplitThread
operator|.
name|PRIORITY_BLOCKING
argument_list|)
expr_stmt|;
name|addRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r4
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r3
argument_list|)
expr_stmt|;
name|getAndCheckRegion
argument_list|(
name|pq
argument_list|,
name|r1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Queue should be empty."
argument_list|,
name|pq
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

