begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|RegionTransitionData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|SplitRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Like {@link TestSplitTransaction} in that we're testing {@link SplitTransaction}  * only the below tests are against a running cluster where {@link TestSplitTransaction}  * is tests against a bare {@link HRegion}.  */
end_comment

begin_class
specifier|public
class|class
name|TestSplitTransactionOnCluster
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSplitTransactionOnCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TESTING_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.balancer.period"
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|TESTING_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|TESTING_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|TESTING_UTIL
operator|.
name|ensureSomeRegionServersAvailable
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|TESTING_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HRegionInfo
name|getAndCheckSingleTableRegion
parameter_list|(
specifier|final
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
comment|/**    * Test what happens if master goes to balance a region just as regionserver    * goes to split it.  The PENDING_CLOSE state is the strange one since its    * in the Master's head only, not out in zk.  Test this case.    * @throws IOException    * @throws InterruptedException    * @throws NodeExistsException    * @throws KeeperException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
specifier|public
name|void
name|testPendingCloseAndSplit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|NodeExistsException
throws|,
name|KeeperException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"pendingCloseAndSplit"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|TESTING_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|this
operator|.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Now send in a close of a region but first make the close on the regionserver
comment|// a NOOP.  This way the master has all the state of it going to close
comment|// but then a SPLITTING arrives.  This is what we want to test.
comment|// Here is how we turn CLOSE into NOOP in test.
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
operator|.
name|TEST_SKIP_CLOSE
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|unassign
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Now try splitting and it should work.
name|LOG
operator|.
name|info
argument_list|(
literal|"Running split on server "
operator|+
name|server
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|split
argument_list|(
name|hri
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get daughters
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|this
operator|.
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|// Assert the ephemeral node is gone in zk.
name|String
name|path
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|t
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Stat
name|stat
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stat
operator|=
name|t
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stat for znode path="
operator|+
name|path
operator|+
literal|": "
operator|+
name|stat
argument_list|)
expr_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
break|break;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|stat
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Set this flag back.
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
operator|.
name|TEST_SKIP_CLOSE
operator|=
literal|false
expr_stmt|;
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A test that intentionally has master fail the processing of the split message.    * Tests that the regionserver split ephemeral node gets cleaned up if it    * crashes and that after we process server shutdown, the daughters are up on    * line.    * @throws IOException    * @throws InterruptedException    * @throws NodeExistsException    * @throws KeeperException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
specifier|public
name|void
name|testRSSplitEphemeralsDisappearButDaughtersAreOnlinedAfterShutdownHandling
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|NodeExistsException
throws|,
name|KeeperException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ephemeral"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|TESTING_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Now, before we split, set special flag in master, a flag that has
comment|// it FAIL the processing of split.
name|SplitRegionHandler
operator|.
name|TEST_SKIP
operator|=
literal|true
expr_stmt|;
comment|// Now try splitting and it should work.
name|split
argument_list|(
name|hri
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get daughters
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|// Assert the ephemeral node is up in zk.
name|String
name|path
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|t
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Stat
name|stats
init|=
name|t
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"EPHEMERAL NODE BEFORE SERVER ABORT, path="
operator|+
name|path
operator|+
literal|", stats="
operator|+
name|stats
argument_list|)
expr_stmt|;
name|RegionTransitionData
name|rtd
init|=
name|ZKAssign
operator|.
name|getData
argument_list|(
name|t
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// State could be SPLIT or SPLITTING.
name|assertTrue
argument_list|(
name|rtd
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLIT
argument_list|)
operator|||
name|rtd
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now crash the server
name|cluster
operator|.
name|abortRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
expr_stmt|;
while|while
condition|(
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on server to go down"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Wait till regions are back on line again.
while|while
condition|(
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|daughters
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for repair to happen"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// Assert daughters are online.
name|regions
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|daughters
operator|.
name|contains
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Finally assert that the ephemeral SPLIT znode was cleaned up.
name|stats
operator|=
name|t
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"EPHEMERAL NODE AFTER SERVER ABORT, path="
operator|+
name|path
operator|+
literal|", stats="
operator|+
name|stats
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Set this flag back.
name|SplitRegionHandler
operator|.
name|TEST_SKIP
operator|=
literal|false
expr_stmt|;
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
specifier|public
name|void
name|testExistingZnodeBlocksSplitAndWeRollback
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|NodeExistsException
throws|,
name|KeeperException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testExistingZnodeBlocksSplitAndWeRollback"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|TESTING_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Insert into zk a blocking znode, a znode of same name as region
comment|// so it gets in way of our splitting.
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|t
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
argument_list|,
operator|new
name|ServerName
argument_list|(
literal|"any.old.server"
argument_list|,
literal|1234
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now try splitting.... should fail.  And each should successfully
comment|// rollback.
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait around a while and assert count of regions remains constant.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|regionCount
argument_list|,
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now clear the zknode
name|ZKAssign
operator|.
name|deleteClosingNode
argument_list|(
name|t
operator|.
name|getConnection
argument_list|()
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// Now try splitting and it should work.
name|split
argument_list|(
name|hri
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get daughters
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|// OK, so split happened after we cleared the blocking node.
block|}
finally|finally
block|{
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Messy test that simulates case where SplitTransactions fails to add one    * of the daughters up into the .META. table before crash.  We're testing    * fact that the shutdown handler will fixup the missing daughter region    * adding it back into .META.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
specifier|public
name|void
name|testShutdownSimpleFixup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testShutdownSimpleFixup"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|TESTING_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Now split.
name|split
argument_list|(
name|hri
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get daughters
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|// Remove one of the daughters from .META. to simulate failed insert of
comment|// daughter region up into .META.
name|removeDaughterFromMeta
argument_list|(
name|daughters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now crash the server
name|cluster
operator|.
name|abortRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
expr_stmt|;
while|while
condition|(
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on server to go down"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Wait till regions are back on line again.
while|while
condition|(
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|daughters
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for repair to happen"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// Assert daughters are online.
name|regions
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|daughters
operator|.
name|contains
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that if daughter split on us, we won't do the shutdown handler fixup    * just because we can't find the immediate daughter of an offlined parent.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testShutdownFixupWhenDaughterHasSplit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testShutdownFixupWhenDaughterHasSplit"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|TESTING_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Now split.
name|split
argument_list|(
name|hri
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get daughters
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|// Now split one of the daughters.
name|regionCount
operator|=
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|HRegionInfo
name|daughter
init|=
name|daughters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
comment|// Compact first to ensure we have cleaned up references -- else the split
comment|// will fail.
name|this
operator|.
name|admin
operator|.
name|compact
argument_list|(
name|daughter
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|split
argument_list|(
name|daughter
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get list of daughters
name|daughters
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Now crash the server
name|cluster
operator|.
name|abortRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
expr_stmt|;
while|while
condition|(
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on server to go down"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Wait till regions are back on line again.
while|while
condition|(
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|daughters
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for repair to happen"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// Assert daughters are online and ONLY the original daughters -- that
comment|// fixup didn't insert one during server shutdown recover.
name|regions
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|daughters
operator|.
name|contains
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|admin
operator|.
name|balanceSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|split
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|HRegionServer
name|server
parameter_list|,
specifier|final
name|int
name|regionCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|server
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|regionCount
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting on region to split"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeDaughterFromMeta
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|metaTable
init|=
operator|new
name|HTable
argument_list|(
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|metaTable
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure single table region is not on same server as the single .META. table    * region.    * @param admin    * @param hri    * @return Index of the server hosting the single table region    * @throws UnknownRegionException    * @throws MasterNotRunningException    * @throws ZooKeeperConnectionException    * @throws InterruptedException    */
specifier|private
name|int
name|ensureTableRegionNotOnSameServerAsMeta
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|UnknownRegionException
throws|,
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
throws|,
name|InterruptedException
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TESTING_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
comment|// Now make sure that the table region is not on same server as that hosting
comment|// .META.  We don't want .META. replay polluting our test when we later crash
comment|// the table region serving server.
name|int
name|metaServerIndex
init|=
name|cluster
operator|.
name|getServerWithMeta
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metaServerIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|HRegionServer
name|metaRegionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|metaServerIndex
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableRegionIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|HRegionServer
name|tableRegionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaRegionServer
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|tableRegionServer
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|HRegionServer
name|hrs
init|=
name|getOtherRegionServer
argument_list|(
name|cluster
argument_list|,
name|metaRegionServer
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" to "
operator|+
name|hrs
operator|.
name|getServerName
argument_list|()
operator|+
literal|"; metaServerIndex="
operator|+
name|metaServerIndex
argument_list|)
expr_stmt|;
name|admin
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait till table region is up on the server that is NOT carrying .META..
while|while
condition|(
literal|true
condition|)
block|{
name|tableRegionIndex
operator|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableRegionIndex
operator|!=
operator|-
literal|1
operator|&&
name|tableRegionIndex
operator|!=
name|metaServerIndex
condition|)
break|break;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting on region move off the .META. server; current index "
operator|+
name|tableRegionIndex
operator|+
literal|" and metaServerIndex="
operator|+
name|metaServerIndex
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Verify for sure table region is not on same server as .META.
name|tableRegionIndex
operator|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tableRegionIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|metaServerIndex
argument_list|,
name|tableRegionIndex
argument_list|)
expr_stmt|;
return|return
name|tableRegionIndex
return|;
block|}
comment|/**    * Find regionserver other than the one passed.    * Can't rely on indexes into list of regionservers since crashed servers    * occupy an index.    * @param cluster    * @param notThisOne    * @return A regionserver that is not<code>notThisOne</code> or null if none    * found    */
specifier|private
name|HRegionServer
name|getOtherRegionServer
parameter_list|(
specifier|final
name|MiniHBaseCluster
name|cluster
parameter_list|,
specifier|final
name|HRegionServer
name|notThisOne
parameter_list|)
block|{
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|hrs
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|notThisOne
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|hrs
operator|.
name|isStopping
argument_list|()
operator|||
name|hrs
operator|.
name|isStopped
argument_list|()
condition|)
continue|continue;
return|return
name|hrs
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|printOutRegions
parameter_list|(
specifier|final
name|HRegionServer
name|hrs
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|hrs
operator|.
name|getOnlineRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|prefix
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

