begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileDataBlockEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileDataBlockEncoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFilePrettyPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|NoOpDataBlockEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreScanner
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|LoadTestTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Tests HFile read/write workloads, such as merging HFiles and random reads.  */
end_comment

begin_class
specifier|public
class|class
name|HFileReadWriteTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"MyTable"
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|Workload
block|{
name|MERGE
argument_list|(
literal|"merge"
argument_list|,
literal|"Merge the specified HFiles"
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|RANDOM_READS
argument_list|(
literal|"read"
argument_list|,
literal|"Perform a random read benchmark on the given HFile"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|;
specifier|private
name|String
name|option
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
specifier|public
specifier|final
name|int
name|minNumInputFiles
decl_stmt|;
specifier|public
specifier|final
name|int
name|maxNumInputFiles
decl_stmt|;
name|Workload
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|description
parameter_list|,
name|int
name|minNumInputFiles
parameter_list|,
name|int
name|maxNumInputFiles
parameter_list|)
block|{
name|this
operator|.
name|option
operator|=
name|option
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|minNumInputFiles
operator|=
name|minNumInputFiles
expr_stmt|;
name|this
operator|.
name|maxNumInputFiles
operator|=
name|maxNumInputFiles
expr_stmt|;
block|}
specifier|static
name|OptionGroup
name|getOptionGroup
parameter_list|()
block|{
name|OptionGroup
name|optionGroup
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|Workload
name|w
range|:
name|values
argument_list|()
control|)
name|optionGroup
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|w
operator|.
name|option
argument_list|,
name|w
operator|.
name|description
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|optionGroup
return|;
block|}
specifier|private
specifier|static
name|String
name|getOptionListStr
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Workload
name|w
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-"
operator|+
name|w
operator|.
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|Workload
name|fromCmdLine
parameter_list|(
name|CommandLine
name|cmdLine
parameter_list|)
block|{
for|for
control|(
name|Workload
name|w
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|w
operator|.
name|option
argument_list|)
condition|)
return|return
name|w
return|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"No workload specified. Specify one of the options: "
operator|+
name|getOptionListStr
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|onlyUsedFor
parameter_list|()
block|{
return|return
literal|". Only used for the "
operator|+
name|this
operator|+
literal|" workload."
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_DIR_OPTION
init|=
literal|"output_dir"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMPRESSION_OPTION
init|=
literal|"compression"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLOOM_FILTER_OPTION
init|=
literal|"bloom"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLOCK_SIZE_OPTION
init|=
literal|"block_size"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DURATION_OPTION
init|=
literal|"duration"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NUM_THREADS_OPTION
init|=
literal|"num_threads"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HFileReadWriteTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Workload
name|workload
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|CacheConfig
name|cacheConf
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|inputFileNames
decl_stmt|;
specifier|private
name|Path
name|outputDir
decl_stmt|;
specifier|private
name|int
name|numReadThreads
decl_stmt|;
specifier|private
name|int
name|durationSec
decl_stmt|;
specifier|private
name|DataBlockEncoding
name|dataBlockEncoding
decl_stmt|;
specifier|private
name|boolean
name|encodeInCacheOnly
decl_stmt|;
specifier|private
name|HFileDataBlockEncoder
name|dataBlockEncoder
init|=
name|NoOpDataBlockEncoder
operator|.
name|INSTANCE
decl_stmt|;
specifier|private
name|StoreFile
operator|.
name|BloomType
name|bloomType
init|=
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
decl_stmt|;
specifier|private
name|int
name|blockSize
decl_stmt|;
specifier|private
name|Compression
operator|.
name|Algorithm
name|compression
init|=
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
decl_stmt|;
specifier|private
name|byte
index|[]
name|firstRow
decl_stmt|,
name|lastRow
decl_stmt|;
specifier|private
name|AtomicLong
name|numSeeks
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|numKV
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|totalBytes
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
name|long
name|endTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keysRead
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|StoreFile
argument_list|>
name|inputStoreFiles
decl_stmt|;
specifier|public
name|HFileReadWriteTest
parameter_list|()
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|parseOptions
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OUTPUT_DIR_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Output directory"
operator|+
name|Workload
operator|.
name|MERGE
operator|.
name|onlyUsedFor
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|COMPRESSION_OPTION
argument_list|,
literal|true
argument_list|,
literal|" Compression type, one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|values
argument_list|()
argument_list|)
operator|+
name|Workload
operator|.
name|MERGE
operator|.
name|onlyUsedFor
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|BLOOM_FILTER_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Bloom filter type, one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|StoreFile
operator|.
name|BloomType
operator|.
name|values
argument_list|()
argument_list|)
operator|+
name|Workload
operator|.
name|MERGE
operator|.
name|onlyUsedFor
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|BLOCK_SIZE_OPTION
argument_list|,
literal|true
argument_list|,
literal|"HFile block size"
operator|+
name|Workload
operator|.
name|MERGE
operator|.
name|onlyUsedFor
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|DURATION_OPTION
argument_list|,
literal|true
argument_list|,
literal|"The amount of time to run the "
operator|+
literal|"random read workload for"
operator|+
name|Workload
operator|.
name|RANDOM_READS
operator|.
name|onlyUsedFor
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|NUM_THREADS_OPTION
argument_list|,
literal|true
argument_list|,
literal|"The number of random "
operator|+
literal|"reader threads"
operator|+
name|Workload
operator|.
name|RANDOM_READS
operator|.
name|onlyUsedFor
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|NUM_THREADS_OPTION
argument_list|,
literal|true
argument_list|,
literal|"The number of random "
operator|+
literal|"reader threads"
operator|+
name|Workload
operator|.
name|RANDOM_READS
operator|.
name|onlyUsedFor
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|LoadTestTool
operator|.
name|OPT_DATA_BLOCK_ENCODING
argument_list|,
literal|true
argument_list|,
name|LoadTestTool
operator|.
name|OPT_DATA_BLOCK_ENCODING_USAGE
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|LoadTestTool
operator|.
name|OPT_ENCODE_IN_CACHE_ONLY
argument_list|,
literal|false
argument_list|,
name|LoadTestTool
operator|.
name|OPT_ENCODE_IN_CACHE_ONLY_USAGE
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOptionGroup
argument_list|(
name|Workload
operator|.
name|getOptionGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
name|HFileReadWriteTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|options
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmdLine
decl_stmt|;
try|try
block|{
name|cmdLine
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|workload
operator|=
name|Workload
operator|.
name|fromCmdLine
argument_list|(
name|cmdLine
argument_list|)
expr_stmt|;
if|if
condition|(
name|workload
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|inputFileNames
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|cmdLine
operator|.
name|getArgList
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputFileNames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No input file names specified"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|inputFileNames
operator|.
name|size
argument_list|()
operator|<
name|workload
operator|.
name|minNumInputFiles
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Too few input files: at least "
operator|+
name|workload
operator|.
name|minNumInputFiles
operator|+
literal|" required"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|inputFileNames
operator|.
name|size
argument_list|()
operator|>
name|workload
operator|.
name|maxNumInputFiles
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Too many input files: at most "
operator|+
name|workload
operator|.
name|minNumInputFiles
operator|+
literal|" allowed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|COMPRESSION_OPTION
argument_list|)
condition|)
block|{
name|compression
operator|=
name|Compression
operator|.
name|Algorithm
operator|.
name|valueOf
argument_list|(
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|COMPRESSION_OPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|BLOOM_FILTER_OPTION
argument_list|)
condition|)
block|{
name|bloomType
operator|=
name|StoreFile
operator|.
name|BloomType
operator|.
name|valueOf
argument_list|(
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|BLOOM_FILTER_OPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|encodeInCacheOnly
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|LoadTestTool
operator|.
name|OPT_ENCODE_IN_CACHE_ONLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|LoadTestTool
operator|.
name|OPT_DATA_BLOCK_ENCODING
argument_list|)
condition|)
block|{
name|dataBlockEncoding
operator|=
name|DataBlockEncoding
operator|.
name|valueOf
argument_list|(
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|LoadTestTool
operator|.
name|OPT_DATA_BLOCK_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
comment|// Optionally encode on disk, always encode in cache.
name|dataBlockEncoder
operator|=
operator|new
name|HFileDataBlockEncoderImpl
argument_list|(
name|encodeInCacheOnly
condition|?
name|DataBlockEncoding
operator|.
name|NONE
else|:
name|dataBlockEncoding
argument_list|,
name|dataBlockEncoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|encodeInCacheOnly
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The -"
operator|+
name|LoadTestTool
operator|.
name|OPT_ENCODE_IN_CACHE_ONLY
operator|+
literal|" option does not make sense without -"
operator|+
name|LoadTestTool
operator|.
name|OPT_DATA_BLOCK_ENCODING
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|blockSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hfile.min.blocksize.size"
argument_list|,
literal|65536
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|BLOCK_SIZE_OPTION
argument_list|)
condition|)
name|blockSize
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|BLOCK_SIZE_OPTION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|workload
operator|==
name|Workload
operator|.
name|MERGE
condition|)
block|{
name|String
name|outputDirStr
init|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|OUTPUT_DIR_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputDirStr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Output directory is not specified"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|outputDir
operator|=
operator|new
name|Path
argument_list|(
name|outputDirStr
argument_list|)
expr_stmt|;
comment|// Will be checked for existence in validateConfiguration.
block|}
if|if
condition|(
name|workload
operator|==
name|Workload
operator|.
name|RANDOM_READS
condition|)
block|{
if|if
condition|(
operator|!
name|requireOptions
argument_list|(
name|cmdLine
argument_list|,
operator|new
name|String
index|[]
block|{
name|DURATION_OPTION
operator|,
name|NUM_THREADS_OPTION
block|}
block|)
block|)
block|{
return|return
literal|false
return|;
block|}
name|durationSec
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|DURATION_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|numReadThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|NUM_THREADS_OPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_class

begin_expr_stmt
name|Collections
operator|.
name|sort
argument_list|(
name|inputFileNames
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
literal|true
return|;
end_return

begin_comment
unit|}
comment|/** @return true if all the given options are specified */
end_comment

begin_function
unit|private
name|boolean
name|requireOptions
parameter_list|(
name|CommandLine
name|cmdLine
parameter_list|,
name|String
index|[]
name|requiredOptions
parameter_list|)
block|{
for|for
control|(
name|String
name|option
range|:
name|requiredOptions
control|)
if|if
condition|(
operator|!
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Required option -"
operator|+
name|option
operator|+
literal|" not specified"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|validateConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|inputFileName
range|:
name|inputFileNames
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|inputFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"File "
operator|+
name|inputFileName
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|inputFileName
operator|+
literal|" is a directory"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|outputDir
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
operator|||
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|outputDir
argument_list|)
operator|.
name|isDir
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|outputDir
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist or is not a "
operator|+
literal|"directory"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|runMergeWorkload
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|maxKeyCount
init|=
name|prepareForMerge
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
init|=
name|StoreFileScanner
operator|.
name|getScannersForStoreFiles
argument_list|(
name|inputStoreFiles
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|columnDescriptor
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|HFileReadWriteTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|columnDescriptor
operator|.
name|setBlocksize
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|columnDescriptor
operator|.
name|setBloomFilterType
argument_list|(
name|bloomType
argument_list|)
expr_stmt|;
name|columnDescriptor
operator|.
name|setCompressionType
argument_list|(
name|compression
argument_list|)
expr_stmt|;
name|columnDescriptor
operator|.
name|setDataBlockEncoding
argument_list|(
name|dataBlockEncoding
argument_list|)
expr_stmt|;
name|HRegionInfo
name|regionInfo
init|=
operator|new
name|HRegionInfo
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
operator|new
name|HRegion
argument_list|(
name|outputDir
argument_list|,
literal|null
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|outputDir
argument_list|,
name|region
argument_list|,
name|columnDescriptor
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|conf
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
argument_list|,
name|fs
argument_list|,
name|blockSize
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|outputDir
argument_list|)
operator|.
name|withCompression
argument_list|(
name|compression
argument_list|)
operator|.
name|withDataBlockEncoder
argument_list|(
name|dataBlockEncoder
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|bloomType
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
name|maxKeyCount
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|HFile
operator|.
name|DEFAULT_CHECKSUM_TYPE
argument_list|)
operator|.
name|withBytesPerChecksum
argument_list|(
name|HFile
operator|.
name|DEFAULT_BYTES_PER_CHECKSUM
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StatisticsPrinter
name|statsPrinter
init|=
operator|new
name|StatisticsPrinter
argument_list|()
decl_stmt|;
name|statsPrinter
operator|.
name|startThread
argument_list|()
expr_stmt|;
try|try
block|{
name|performMerge
argument_list|(
name|scanners
argument_list|,
name|store
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|statsPrinter
operator|.
name|requestStop
argument_list|()
expr_stmt|;
block|}
name|Path
name|resultPath
init|=
name|writer
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|resultPath
operator|=
name|tryUsingSimpleOutputPath
argument_list|(
name|resultPath
argument_list|)
expr_stmt|;
name|long
name|fileSize
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|resultPath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|resultPath
operator|+
literal|", size "
operator|+
name|fileSize
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HFile information for "
operator|+
name|resultPath
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|HFilePrettyPrinter
name|hfpp
init|=
operator|new
name|HFilePrettyPrinter
argument_list|()
decl_stmt|;
name|hfpp
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-m"
block|,
literal|"-f"
block|,
name|resultPath
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|Path
name|tryUsingSimpleOutputPath
parameter_list|(
name|Path
name|resultPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputFileNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// In case of only one input set output to be consistent with the
comment|// input name.
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|inputFileNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|betterOutputPath
init|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
name|inputPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|betterOutputPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|rename
argument_list|(
name|resultPath
argument_list|,
name|betterOutputPath
argument_list|)
expr_stmt|;
name|resultPath
operator|=
name|betterOutputPath
expr_stmt|;
block|}
block|}
return|return
name|resultPath
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|performMerge
parameter_list|(
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|Store
name|store
parameter_list|,
name|StoreFile
operator|.
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Include deletes
name|scanner
operator|=
operator|new
name|StoreScanner
argument_list|(
name|store
argument_list|,
name|scan
argument_list|,
name|scanners
argument_list|,
name|ScanType
operator|.
name|MAJOR_COMPACT
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
operator|||
name|kvs
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|numKV
operator|.
name|addAndGet
argument_list|(
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|totalBytes
operator|.
name|addAndGet
argument_list|(
name|kv
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * @return the total key count in the files being merged    * @throws IOException    */
end_comment

begin_function
specifier|private
name|long
name|prepareForMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Merging "
operator|+
name|inputFileNames
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using block size: "
operator|+
name|blockSize
argument_list|)
expr_stmt|;
name|inputStoreFiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
expr_stmt|;
name|long
name|maxKeyCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|inputFileNames
control|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// Open without caching.
name|StoreFile
name|sf
init|=
name|openStoreFile
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sf
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|inputStoreFiles
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
name|StoreFile
operator|.
name|Reader
name|r
init|=
name|sf
operator|.
name|getReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|long
name|keyCount
init|=
name|r
operator|.
name|getFilterEntries
argument_list|()
decl_stmt|;
name|maxKeyCount
operator|+=
name|keyCount
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compacting: "
operator|+
name|sf
operator|+
literal|"; keyCount = "
operator|+
name|keyCount
operator|+
literal|"; Bloom Type = "
operator|+
name|r
operator|.
name|getBloomFilterType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"; Size = "
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|r
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|maxKeyCount
return|;
block|}
end_function

begin_function
specifier|public
name|HFile
operator|.
name|Reader
index|[]
name|getHFileReaders
parameter_list|()
block|{
name|HFile
operator|.
name|Reader
name|readers
index|[]
init|=
operator|new
name|HFile
operator|.
name|Reader
index|[
name|inputStoreFiles
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputStoreFiles
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|readers
index|[
name|i
index|]
operator|=
name|inputStoreFiles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getReader
argument_list|()
operator|.
name|getHFileReader
argument_list|()
expr_stmt|;
return|return
name|readers
return|;
block|}
end_function

begin_function
specifier|private
name|StoreFile
name|openStoreFile
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|boolean
name|blockCache
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We are passing the ROWCOL Bloom filter type, but StoreFile will still
comment|// use the Bloom filter type specified in the HFile.
return|return
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|ROWCOL
argument_list|,
name|dataBlockEncoder
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|int
name|charToHex
parameter_list|(
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
literal|'0'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'9'
condition|)
return|return
name|c
operator|-
literal|'0'
return|;
if|if
condition|(
literal|'a'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'f'
condition|)
return|return
literal|10
operator|+
name|c
operator|-
literal|'a'
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|int
name|hexToChar
parameter_list|(
name|int
name|h
parameter_list|)
block|{
name|h
operator|&=
literal|0xff
expr_stmt|;
if|if
condition|(
literal|0
operator|<=
name|h
operator|&&
name|h
operator|<=
literal|9
condition|)
return|return
literal|'0'
operator|+
name|h
return|;
if|if
condition|(
literal|10
operator|<=
name|h
operator|&&
name|h
operator|<=
literal|15
condition|)
return|return
literal|'a'
operator|+
name|h
operator|-
literal|10
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|byte
index|[]
name|createRandomRow
parameter_list|(
name|Random
name|rand
parameter_list|,
name|byte
index|[]
name|first
parameter_list|,
name|byte
index|[]
name|last
parameter_list|)
block|{
name|int
name|resultLen
init|=
name|Math
operator|.
name|max
argument_list|(
name|first
operator|.
name|length
argument_list|,
name|last
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|minLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|first
operator|.
name|length
argument_list|,
name|last
operator|.
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|resultLen
index|]
decl_stmt|;
name|boolean
name|greaterThanFirst
init|=
literal|false
decl_stmt|;
name|boolean
name|lessThanLast
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultLen
condition|;
operator|++
name|i
control|)
block|{
comment|// Generate random hex characters if both first and last row are hex
comment|// at this position.
name|boolean
name|isHex
init|=
name|i
operator|<
name|minLen
operator|&&
name|charToHex
argument_list|(
name|first
index|[
name|i
index|]
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
name|charToHex
argument_list|(
name|last
index|[
name|i
index|]
argument_list|)
operator|!=
operator|-
literal|1
decl_stmt|;
comment|// If our key is already greater than the first key, we can use
comment|// arbitrarily low values.
name|int
name|low
init|=
name|greaterThanFirst
operator|||
name|i
operator|>=
name|first
operator|.
name|length
condition|?
literal|0
else|:
name|first
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
comment|// If our key is already less than the last key, we can use arbitrarily
comment|// high values.
name|int
name|high
init|=
name|lessThanLast
operator|||
name|i
operator|>=
name|last
operator|.
name|length
condition|?
literal|0xff
else|:
name|last
index|[
name|i
index|]
operator|&
literal|0xff
decl_stmt|;
comment|// Randomly select the next byte between the lowest and the highest
comment|// value allowed for this position. Restrict to hex characters if
comment|// necessary. We are generally biased towards border cases, which is OK
comment|// for test.
name|int
name|r
decl_stmt|;
if|if
condition|(
name|isHex
condition|)
block|{
comment|// Use hex chars.
if|if
condition|(
name|low
operator|<
literal|'0'
condition|)
name|low
operator|=
literal|'0'
expr_stmt|;
if|if
condition|(
name|high
operator|>
literal|'f'
condition|)
name|high
operator|=
literal|'f'
expr_stmt|;
name|int
name|lowHex
init|=
name|charToHex
argument_list|(
name|low
argument_list|)
decl_stmt|;
name|int
name|highHex
init|=
name|charToHex
argument_list|(
name|high
argument_list|)
decl_stmt|;
name|r
operator|=
name|hexToChar
argument_list|(
name|lowHex
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|highHex
operator|-
name|lowHex
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|low
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|high
operator|-
name|low
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|>
name|low
condition|)
name|greaterThanFirst
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|high
condition|)
name|lessThanLast
operator|=
literal|true
expr_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|r
expr_stmt|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|result
argument_list|,
name|first
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Generated key "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|result
argument_list|)
operator|+
literal|" is less than the first key "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|result
argument_list|,
name|last
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Generated key "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|result
argument_list|)
operator|+
literal|" is greater than te last key "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|last
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|byte
index|[]
name|createRandomQualifier
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
name|byte
index|[]
name|q
init|=
operator|new
name|byte
index|[
literal|10
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|30
argument_list|)
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|q
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
end_function

begin_class
specifier|private
class|class
name|RandomReader
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
name|int
name|readerId
decl_stmt|;
specifier|private
name|StoreFile
operator|.
name|Reader
name|reader
decl_stmt|;
specifier|private
name|boolean
name|pread
decl_stmt|;
specifier|public
name|RandomReader
parameter_list|(
name|int
name|readerId
parameter_list|,
name|StoreFile
operator|.
name|Reader
name|reader
parameter_list|,
name|boolean
name|pread
parameter_list|)
block|{
name|this
operator|.
name|readerId
operator|=
name|readerId
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|pread
operator|=
name|pread
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"reader "
operator|+
name|readerId
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|reader
operator|.
name|getStoreFileScanner
argument_list|(
literal|true
argument_list|,
name|pread
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|byte
index|[]
name|row
init|=
name|createRandomRow
argument_list|(
name|rand
argument_list|,
name|firstRow
argument_list|,
name|lastRow
argument_list|)
decl_stmt|;
name|KeyValue
name|kvToSeek
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|createRandomQualifier
argument_list|(
name|rand
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.0001
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"kvToSeek="
operator|+
name|kvToSeek
argument_list|)
expr_stmt|;
block|}
name|boolean
name|seekResult
decl_stmt|;
try|try
block|{
name|seekResult
operator|=
name|scanner
operator|.
name|seek
argument_list|(
name|kvToSeek
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Seek failed for key "
operator|+
name|kvToSeek
operator|+
literal|", pread="
operator|+
name|pread
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|numSeeks
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|seekResult
condition|)
block|{
name|error
argument_list|(
literal|"Seek returned false for row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|KeyValue
name|kv
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|numKV
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|kv
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
literal|"scanner.next() returned null at the first iteration for "
operator|+
literal|"row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|kv
operator|==
literal|null
condition|)
break|break;
name|String
name|keyHashStr
init|=
name|MD5Hash
operator|.
name|getMD5AsHex
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|keysRead
operator|.
name|add
argument_list|(
name|keyHashStr
argument_list|)
expr_stmt|;
name|totalBytes
operator|.
name|addAndGet
argument_list|(
name|kv
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error in reader "
operator|+
name|readerId
operator|+
literal|" (pread="
operator|+
name|pread
operator|+
literal|"): "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|StatisticsPrinter
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|volatile
name|boolean
name|stopRequested
decl_stmt|;
specifier|private
specifier|volatile
name|Thread
name|thread
decl_stmt|;
specifier|private
name|long
name|totalSeekAndReads
decl_stmt|,
name|totalPositionalReads
decl_stmt|;
comment|/**      * Run the statistics collector in a separate thread without an executor.      */
specifier|public
name|void
name|startThread
parameter_list|()
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting statistics printer"
argument_list|)
expr_stmt|;
name|thread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|StatisticsPrinter
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|curTime
decl_stmt|;
while|while
condition|(
operator|(
name|curTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|)
operator|<
name|endTime
operator|&&
operator|!
name|stopRequested
condition|)
block|{
name|long
name|elapsedTime
init|=
name|curTime
operator|-
name|startTime
decl_stmt|;
name|printStats
argument_list|(
name|elapsedTime
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
operator|-
name|elapsedTime
operator|%
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopRequested
condition|)
break|break;
block|}
block|}
name|printStats
argument_list|(
name|curTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping statistics printer"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|printStats
parameter_list|(
name|long
name|elapsedTime
parameter_list|)
block|{
name|long
name|numSeeksL
init|=
name|numSeeks
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|timeSec
init|=
name|elapsedTime
operator|/
literal|1000.0
decl_stmt|;
name|double
name|seekPerSec
init|=
name|numSeeksL
operator|/
name|timeSec
decl_stmt|;
name|long
name|kvCount
init|=
name|numKV
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|kvPerSec
init|=
name|kvCount
operator|/
name|timeSec
decl_stmt|;
name|long
name|bytes
init|=
name|totalBytes
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|bytesPerSec
init|=
name|bytes
operator|/
name|timeSec
decl_stmt|;
comment|// readOps and preadOps counters get reset on access, so we have to
comment|// accumulate them here. HRegion metrics publishing thread should not
comment|// be running in this tool, so no one else should be resetting these
comment|// metrics.
name|totalSeekAndReads
operator|+=
name|HFile
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
name|totalPositionalReads
operator|+=
name|HFile
operator|.
name|getPreadOps
argument_list|()
expr_stmt|;
name|long
name|totalBlocksRead
init|=
name|totalSeekAndReads
operator|+
name|totalPositionalReads
decl_stmt|;
name|double
name|blkReadPerSec
init|=
name|totalBlocksRead
operator|/
name|timeSec
decl_stmt|;
name|double
name|seekReadPerSec
init|=
name|totalSeekAndReads
operator|/
name|timeSec
decl_stmt|;
name|double
name|preadPerSec
init|=
name|totalPositionalReads
operator|/
name|timeSec
decl_stmt|;
name|boolean
name|isRead
init|=
name|workload
operator|==
name|Workload
operator|.
name|RANDOM_READS
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Time: "
operator|+
operator|(
name|long
operator|)
name|timeSec
operator|+
literal|" sec"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRead
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", seek/sec: "
operator|+
operator|(
name|long
operator|)
name|seekPerSec
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", kv/sec: "
operator|+
operator|(
name|long
operator|)
name|kvPerSec
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", bytes/sec: "
operator|+
operator|(
name|long
operator|)
name|bytesPerSec
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blk/sec: "
operator|+
operator|(
name|long
operator|)
name|blkReadPerSec
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", total KV: "
operator|+
name|numKV
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", total bytes: "
operator|+
name|totalBytes
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", total blk: "
operator|+
name|totalBlocksRead
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", seekRead/sec: "
operator|+
operator|(
name|long
operator|)
name|seekReadPerSec
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", pread/sec: "
operator|+
operator|(
name|long
operator|)
name|preadPerSec
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRead
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", unique keys: "
operator|+
operator|(
name|long
operator|)
name|keysRead
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|requestStop
parameter_list|()
block|{
name|stopRequested
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|thread
operator|!=
literal|null
condition|)
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_function
specifier|public
name|boolean
name|runRandomReadWorkload
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputFileNames
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Need exactly one input file for random reads: "
operator|+
name|inputFileNames
argument_list|)
throw|;
block|}
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|inputFileNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// Make sure we are using caching.
name|StoreFile
name|storeFile
init|=
name|openStoreFile
argument_list|(
name|inputPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|StoreFile
operator|.
name|Reader
name|reader
init|=
name|storeFile
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First key: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|reader
operator|.
name|getFirstKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Last key: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|reader
operator|.
name|getLastKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|firstKV
init|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|reader
operator|.
name|getFirstKey
argument_list|()
argument_list|)
decl_stmt|;
name|firstRow
operator|=
name|firstKV
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|KeyValue
name|lastKV
init|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|reader
operator|.
name|getLastKey
argument_list|()
argument_list|)
decl_stmt|;
name|lastRow
operator|=
name|lastKV
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|byte
index|[]
name|family
init|=
name|firstKV
operator|.
name|getFamily
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|family
argument_list|,
name|lastKV
operator|.
name|getFamily
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"First and last key have different families: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|family
argument_list|)
operator|+
literal|" and "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|lastKV
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|firstRow
argument_list|,
name|lastRow
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"First and last row are the same, cannot run read workload: "
operator|+
literal|"firstRow="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|firstRow
argument_list|)
operator|+
literal|", "
operator|+
literal|"lastRow="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|lastRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numReadThreads
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|numCompleted
init|=
literal|0
decl_stmt|;
name|int
name|numFailed
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ExecutorCompletionService
argument_list|<
name|Boolean
argument_list|>
name|ecs
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|exec
argument_list|)
decl_stmt|;
name|endTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
operator|*
name|durationSec
expr_stmt|;
name|boolean
name|pread
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReadThreads
condition|;
operator|++
name|i
control|)
name|ecs
operator|.
name|submit
argument_list|(
operator|new
name|RandomReader
argument_list|(
name|i
argument_list|,
name|reader
argument_list|,
name|pread
argument_list|)
argument_list|)
expr_stmt|;
name|ecs
operator|.
name|submit
argument_list|(
operator|new
name|StatisticsPrinter
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|result
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|result
operator|=
name|ecs
operator|.
name|poll
argument_list|(
name|endTime
operator|+
literal|1000
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
break|break;
try|try
block|{
if|if
condition|(
name|result
operator|.
name|get
argument_list|()
condition|)
block|{
operator|++
name|numCompleted
expr_stmt|;
block|}
else|else
block|{
operator|++
name|numFailed
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Worker thread failure"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|numFailed
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted after "
operator|+
name|numCompleted
operator|+
literal|" workers completed"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
block|}
finally|finally
block|{
name|storeFile
operator|.
name|closeReader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|BlockCache
name|c
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Worker threads completed: "
operator|+
name|numCompleted
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Worker threads failed: "
operator|+
name|numFailed
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Workload: "
operator|+
name|workload
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|workload
condition|)
block|{
case|case
name|MERGE
case|:
name|runMergeWorkload
argument_list|()
expr_stmt|;
break|break;
case|case
name|RANDOM_READS
case|:
return|return
name|runRandomReadWorkload
argument_list|()
return|;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown workload: "
operator|+
name|workload
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|failure
parameter_list|()
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|HFileReadWriteTest
name|app
init|=
operator|new
name|HFileReadWriteTest
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|app
operator|.
name|parseOptions
argument_list|(
name|args
argument_list|)
condition|)
name|failure
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|app
operator|.
name|validateConfiguration
argument_list|()
operator|||
operator|!
name|app
operator|.
name|run
argument_list|()
condition|)
name|failure
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|failure
argument_list|()
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

