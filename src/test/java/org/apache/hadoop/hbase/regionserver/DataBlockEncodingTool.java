begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|EncodedDataBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|NoOpDataBlockEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_comment
comment|/**  * Tests various algorithms for key compression on an existing HFile. Useful  * for testing, debugging and benchmarking.  */
end_comment

begin_class
specifier|public
class|class
name|DataBlockEncodingTool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DataBlockEncodingTool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|includesMemstoreTS
init|=
literal|true
decl_stmt|;
comment|/**    * How many times should benchmark run.    * More times means better data in terms of statistics.    * It has to be larger than BENCHMARK_N_OMIT.    */
specifier|public
specifier|static
name|int
name|BENCHMARK_N_TIMES
init|=
literal|12
decl_stmt|;
comment|/**    * How many first runs should omit benchmark.    * Usually it is one in order to exclude setup cost.    * Has to be 0 or larger.    */
specifier|public
specifier|static
name|int
name|BENCHMARK_N_OMIT
init|=
literal|2
decl_stmt|;
comment|/** Compression algorithm to use if not specified on the command line */
specifier|private
specifier|static
specifier|final
name|Algorithm
name|DEFAULT_COMPRESSION
init|=
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
decl_stmt|;
specifier|private
name|List
argument_list|<
name|EncodedDataBlock
argument_list|>
name|codecs
init|=
operator|new
name|ArrayList
argument_list|<
name|EncodedDataBlock
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|totalPrefixLength
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|totalKeyLength
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|totalValueLength
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|totalKeyRedundancyLength
init|=
literal|0
decl_stmt|;
specifier|final
specifier|private
name|String
name|compressionAlgorithmName
decl_stmt|;
specifier|final
specifier|private
name|Algorithm
name|compressionAlgorithm
decl_stmt|;
specifier|final
specifier|private
name|Compressor
name|compressor
decl_stmt|;
specifier|final
specifier|private
name|Decompressor
name|decompressor
decl_stmt|;
comment|/**    * @param compressionAlgorithmName What kind of algorithm should be used    *                                 as baseline for comparison (e.g. lzo, gz).    */
specifier|public
name|DataBlockEncodingTool
parameter_list|(
name|String
name|compressionAlgorithmName
parameter_list|)
block|{
name|this
operator|.
name|compressionAlgorithmName
operator|=
name|compressionAlgorithmName
expr_stmt|;
name|this
operator|.
name|compressionAlgorithm
operator|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|compressionAlgorithmName
argument_list|)
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|this
operator|.
name|compressionAlgorithm
operator|.
name|getCompressor
argument_list|()
expr_stmt|;
name|this
operator|.
name|decompressor
operator|=
name|this
operator|.
name|compressionAlgorithm
operator|.
name|getDecompressor
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check statistics for given HFile for different data block encoders.    * @param scanner Of file which will be compressed.    * @param kvLimit Maximal count of KeyValue which will be processed.    * @throws IOException thrown if scanner is invalid    */
specifier|public
name|void
name|checkStatistics
parameter_list|(
specifier|final
name|KeyValueScanner
name|scanner
parameter_list|,
specifier|final
name|int
name|kvLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|scanner
operator|.
name|seek
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
expr_stmt|;
name|KeyValue
name|currentKv
decl_stmt|;
name|byte
index|[]
name|previousKey
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|currentKey
decl_stmt|;
name|List
argument_list|<
name|DataBlockEncoder
argument_list|>
name|dataBlockEncoders
init|=
name|DataBlockEncoding
operator|.
name|getAllEncoders
argument_list|()
decl_stmt|;
for|for
control|(
name|DataBlockEncoder
name|d
range|:
name|dataBlockEncoders
control|)
block|{
name|codecs
operator|.
name|add
argument_list|(
operator|new
name|EncodedDataBlock
argument_list|(
name|d
argument_list|,
name|includesMemstoreTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|currentKv
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|j
operator|<
name|kvLimit
condition|)
block|{
comment|// Iterates through key/value pairs
name|j
operator|++
expr_stmt|;
name|currentKey
operator|=
name|currentKv
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|previousKey
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|previousKey
operator|.
name|length
operator|&&
name|i
operator|<
name|currentKey
operator|.
name|length
operator|&&
name|previousKey
index|[
name|i
index|]
operator|==
name|currentKey
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
name|totalKeyRedundancyLength
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|EncodedDataBlock
name|codec
range|:
name|codecs
control|)
block|{
name|codec
operator|.
name|addKv
argument_list|(
name|currentKv
argument_list|)
expr_stmt|;
block|}
name|previousKey
operator|=
name|currentKey
expr_stmt|;
name|totalPrefixLength
operator|+=
name|currentKv
operator|.
name|getLength
argument_list|()
operator|-
name|currentKv
operator|.
name|getKeyLength
argument_list|()
operator|-
name|currentKv
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
name|totalKeyLength
operator|+=
name|currentKv
operator|.
name|getKeyLength
argument_list|()
expr_stmt|;
name|totalValueLength
operator|+=
name|currentKv
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verify if all data block encoders are working properly.    *     * @param scanner Of file which was compressed.    * @param kvLimit Maximal count of KeyValue which will be processed.    * @return true if all data block encoders compressed/decompressed correctly.    * @throws IOException thrown if scanner is invalid    */
specifier|public
name|boolean
name|verifyCodecs
parameter_list|(
specifier|final
name|KeyValueScanner
name|scanner
parameter_list|,
specifier|final
name|int
name|kvLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyValue
name|currentKv
decl_stmt|;
name|scanner
operator|.
name|seek
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|codecIterators
init|=
operator|new
name|ArrayList
argument_list|<
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|EncodedDataBlock
name|codec
range|:
name|codecs
control|)
block|{
name|codecIterators
operator|.
name|add
argument_list|(
name|codec
operator|.
name|getIterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|currentKv
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|j
operator|<
name|kvLimit
condition|)
block|{
comment|// Iterates through key/value pairs
operator|++
name|j
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
name|it
range|:
name|codecIterators
control|)
block|{
name|KeyValue
name|codecKv
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|codecKv
operator|==
literal|null
operator|||
literal|0
operator|!=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|codecKv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|codecKv
operator|.
name|getOffset
argument_list|()
argument_list|,
name|codecKv
operator|.
name|getLength
argument_list|()
argument_list|,
name|currentKv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|currentKv
operator|.
name|getOffset
argument_list|()
argument_list|,
name|currentKv
operator|.
name|getLength
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|codecKv
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"There is a bug in codec "
operator|+
name|it
operator|+
literal|" it returned null KeyValue,"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|prefix
init|=
literal|0
decl_stmt|;
name|int
name|limitLength
init|=
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
name|Math
operator|.
name|min
argument_list|(
name|codecKv
operator|.
name|getLength
argument_list|()
argument_list|,
name|currentKv
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|prefix
operator|<
name|limitLength
operator|&&
name|codecKv
operator|.
name|getBuffer
argument_list|()
index|[
name|prefix
operator|+
name|codecKv
operator|.
name|getOffset
argument_list|()
index|]
operator|==
name|currentKv
operator|.
name|getBuffer
argument_list|()
index|[
name|prefix
operator|+
name|currentKv
operator|.
name|getOffset
argument_list|()
index|]
condition|)
block|{
name|prefix
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"There is bug in codec "
operator|+
name|it
operator|.
name|toString
argument_list|()
operator|+
literal|"\n on element "
operator|+
name|j
operator|+
literal|"\n codecKv.getKeyLength() "
operator|+
name|codecKv
operator|.
name|getKeyLength
argument_list|()
operator|+
literal|"\n codecKv.getValueLength() "
operator|+
name|codecKv
operator|.
name|getValueLength
argument_list|()
operator|+
literal|"\n codecKv.getLength() "
operator|+
name|codecKv
operator|.
name|getLength
argument_list|()
operator|+
literal|"\n currentKv.getKeyLength() "
operator|+
name|currentKv
operator|.
name|getKeyLength
argument_list|()
operator|+
literal|"\n currentKv.getValueLength() "
operator|+
name|currentKv
operator|.
name|getValueLength
argument_list|()
operator|+
literal|"\n codecKv.getLength() "
operator|+
name|currentKv
operator|.
name|getLength
argument_list|()
operator|+
literal|"\n currentKV rowLength "
operator|+
name|currentKv
operator|.
name|getRowLength
argument_list|()
operator|+
literal|" familyName "
operator|+
name|currentKv
operator|.
name|getFamilyLength
argument_list|()
operator|+
literal|" qualifier "
operator|+
name|currentKv
operator|.
name|getQualifierLength
argument_list|()
operator|+
literal|"\n prefix "
operator|+
name|prefix
operator|+
literal|"\n codecKv   '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|codecKv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|codecKv
operator|.
name|getOffset
argument_list|()
argument_list|,
name|prefix
argument_list|)
operator|+
literal|"' diff '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|codecKv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|codecKv
operator|.
name|getOffset
argument_list|()
operator|+
name|prefix
argument_list|,
name|codecKv
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
argument_list|)
operator|+
literal|"'"
operator|+
literal|"\n currentKv '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|currentKv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|currentKv
operator|.
name|getOffset
argument_list|()
argument_list|,
name|prefix
argument_list|)
operator|+
literal|"' diff '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|currentKv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|currentKv
operator|.
name|getOffset
argument_list|()
operator|+
name|prefix
argument_list|,
name|currentKv
operator|.
name|getLength
argument_list|()
operator|-
name|prefix
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Verification was successful!"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Benchmark codec's speed.    */
specifier|public
name|void
name|benchmarkCodecs
parameter_list|()
block|{
name|int
name|prevTotalSize
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|EncodedDataBlock
name|codec
range|:
name|codecs
control|)
block|{
name|prevTotalSize
operator|=
name|benchmarkEncoder
argument_list|(
name|prevTotalSize
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|buffer
init|=
name|codecs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRawKeyValues
argument_list|()
decl_stmt|;
name|benchmarkDefaultCompression
argument_list|(
name|prevTotalSize
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Benchmark compression/decompression throughput.    * @param previousTotalSize Total size used for verification. Use -1 if    *          unknown.    * @param codec Tested encoder.    * @return Size of uncompressed data.    */
specifier|private
name|int
name|benchmarkEncoder
parameter_list|(
name|int
name|previousTotalSize
parameter_list|,
name|EncodedDataBlock
name|codec
parameter_list|)
block|{
name|int
name|prevTotalSize
init|=
name|previousTotalSize
decl_stmt|;
name|int
name|totalSize
init|=
literal|0
decl_stmt|;
comment|// decompression time
name|List
argument_list|<
name|Long
argument_list|>
name|durations
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|itTime
init|=
literal|0
init|;
name|itTime
operator|<
name|BENCHMARK_N_TIMES
condition|;
operator|++
name|itTime
control|)
block|{
name|totalSize
operator|=
literal|0
expr_stmt|;
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
name|it
decl_stmt|;
name|it
operator|=
name|codec
operator|.
name|getIterator
argument_list|()
expr_stmt|;
comment|// count only the algorithm time, without memory allocations
comment|// (expect first time)
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|totalSize
operator|+=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|finishTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|itTime
operator|>=
name|BENCHMARK_N_OMIT
condition|)
block|{
name|durations
operator|.
name|add
argument_list|(
name|finishTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prevTotalSize
operator|!=
operator|-
literal|1
operator|&&
name|prevTotalSize
operator|!=
name|totalSize
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Algorithm '%s' decoded data to different size"
argument_list|,
name|codec
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|prevTotalSize
operator|=
name|totalSize
expr_stmt|;
block|}
comment|// compression time
name|List
argument_list|<
name|Long
argument_list|>
name|compressDurations
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|itTime
init|=
literal|0
init|;
name|itTime
operator|<
name|BENCHMARK_N_TIMES
condition|;
operator|++
name|itTime
control|)
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|codec
operator|.
name|doCompressData
argument_list|()
expr_stmt|;
specifier|final
name|long
name|finishTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|itTime
operator|>=
name|BENCHMARK_N_OMIT
condition|)
block|{
name|compressDurations
operator|.
name|add
argument_list|(
name|finishTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|codec
operator|.
name|toString
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|printBenchmarkResult
argument_list|(
name|totalSize
argument_list|,
name|compressDurations
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printBenchmarkResult
argument_list|(
name|totalSize
argument_list|,
name|durations
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|prevTotalSize
return|;
block|}
specifier|private
name|void
name|benchmarkDefaultCompression
parameter_list|(
name|int
name|totalSize
parameter_list|,
name|byte
index|[]
name|rawBuffer
parameter_list|)
block|{
name|benchmarkAlgorithm
argument_list|(
name|compressionAlgorithm
argument_list|,
name|compressor
argument_list|,
name|decompressor
argument_list|,
name|compressionAlgorithmName
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|rawBuffer
argument_list|,
literal|0
argument_list|,
name|totalSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check decompress performance of a given algorithm and print it.    * @param algorithm Compression algorithm.    * @param compressorCodec Compressor to be tested.    * @param decompressorCodec Decompressor of the same algorithm.    * @param name Name of algorithm.    * @param buffer Buffer to be compressed.    * @param offset Position of the beginning of the data.    * @param length Length of data in buffer.    */
specifier|public
specifier|static
name|void
name|benchmarkAlgorithm
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|algorithm
parameter_list|,
name|Compressor
name|compressorCodec
parameter_list|,
name|Decompressor
name|decompressorCodec
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|":"
argument_list|)
expr_stmt|;
comment|// compress it
name|List
argument_list|<
name|Long
argument_list|>
name|compressDurations
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|compressedStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|compressingStream
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|itTime
init|=
literal|0
init|;
name|itTime
operator|<
name|BENCHMARK_N_TIMES
condition|;
operator|++
name|itTime
control|)
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|compressingStream
operator|=
name|algorithm
operator|.
name|createCompressionStream
argument_list|(
name|compressedStream
argument_list|,
name|compressorCodec
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|compressingStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|compressingStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|compressedStream
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
specifier|final
name|long
name|finishTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// add time record
if|if
condition|(
name|itTime
operator|>=
name|BENCHMARK_N_OMIT
condition|)
block|{
name|compressDurations
operator|.
name|add
argument_list|(
name|finishTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|itTime
operator|+
literal|1
operator|<
name|BENCHMARK_N_TIMES
condition|)
block|{
comment|// not the last one
name|compressedStream
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Benchmark, or encoding algorithm '%s' cause some stream problems"
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|printBenchmarkResult
argument_list|(
name|length
argument_list|,
name|compressDurations
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|compBuffer
init|=
name|compressedStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// uncompress it several times and measure performance
name|List
argument_list|<
name|Long
argument_list|>
name|durations
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|itTime
init|=
literal|0
init|;
name|itTime
operator|<
name|BENCHMARK_N_TIMES
condition|;
operator|++
name|itTime
control|)
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|byte
index|[]
name|newBuf
init|=
operator|new
name|byte
index|[
name|length
operator|+
literal|1
index|]
decl_stmt|;
try|try
block|{
name|ByteArrayInputStream
name|downStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|compBuffer
argument_list|,
literal|0
argument_list|,
name|compBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
name|InputStream
name|decompressedStream
init|=
name|algorithm
operator|.
name|createDecompressionStream
argument_list|(
name|downStream
argument_list|,
name|decompressorCodec
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|destOffset
init|=
literal|0
decl_stmt|;
name|int
name|nextChunk
decl_stmt|;
while|while
condition|(
operator|(
name|nextChunk
operator|=
name|decompressedStream
operator|.
name|available
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|destOffset
operator|+=
name|decompressedStream
operator|.
name|read
argument_list|(
name|newBuf
argument_list|,
name|destOffset
argument_list|,
name|nextChunk
argument_list|)
expr_stmt|;
block|}
name|decompressedStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// iterate over KeyValue
name|KeyValue
name|kv
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|length
condition|;
name|pos
operator|+=
name|kv
operator|.
name|getLength
argument_list|()
control|)
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|newBuf
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Decoding path in '%s' algorithm cause exception "
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|long
name|finishTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// check correctness
if|if
condition|(
literal|0
operator|!=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|,
name|newBuf
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
condition|)
block|{
name|int
name|prefix
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|prefix
operator|<
name|buffer
operator|.
name|length
operator|&&
name|prefix
operator|<
name|newBuf
operator|.
name|length
condition|;
operator|++
name|prefix
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|prefix
index|]
operator|!=
name|newBuf
index|[
name|prefix
index|]
condition|)
block|{
break|break;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Algorithm '%s' is corrupting the data"
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
comment|// add time record
if|if
condition|(
name|itTime
operator|>=
name|BENCHMARK_N_OMIT
condition|)
block|{
name|durations
operator|.
name|add
argument_list|(
name|finishTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
name|printBenchmarkResult
argument_list|(
name|length
argument_list|,
name|durations
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printBenchmarkResult
parameter_list|(
name|int
name|totalSize
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|durationsInNanoSed
parameter_list|,
name|boolean
name|isDecompression
parameter_list|)
block|{
name|long
name|meanTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|time
range|:
name|durationsInNanoSed
control|)
block|{
name|meanTime
operator|+=
name|time
expr_stmt|;
block|}
name|meanTime
operator|/=
name|durationsInNanoSed
operator|.
name|size
argument_list|()
expr_stmt|;
name|long
name|standardDev
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|time
range|:
name|durationsInNanoSed
control|)
block|{
name|standardDev
operator|+=
operator|(
name|time
operator|-
name|meanTime
operator|)
operator|*
operator|(
name|time
operator|-
name|meanTime
operator|)
expr_stmt|;
block|}
name|standardDev
operator|=
operator|(
name|long
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|standardDev
operator|/
name|durationsInNanoSed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|double
name|million
init|=
literal|1000.0
operator|*
literal|1000.0
operator|*
literal|1000.0
decl_stmt|;
name|double
name|mbPerSec
init|=
operator|(
name|totalSize
operator|*
name|million
operator|)
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|*
name|meanTime
operator|)
decl_stmt|;
name|double
name|mbPerSecDev
init|=
operator|(
name|totalSize
operator|*
name|million
operator|)
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|*
operator|(
name|meanTime
operator|-
name|standardDev
operator|)
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  %s performance:%s %6.2f MB/s (+/- %.2f MB/s)"
argument_list|,
name|isDecompression
condition|?
literal|"Decompression"
else|:
literal|"Compression"
argument_list|,
name|isDecompression
condition|?
literal|""
else|:
literal|"  "
argument_list|,
name|mbPerSec
argument_list|,
name|mbPerSecDev
operator|-
name|mbPerSec
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Display statistics of different compression algorithms.    */
specifier|public
name|void
name|displayStatistics
parameter_list|()
block|{
name|int
name|totalLength
init|=
name|totalPrefixLength
operator|+
name|totalKeyLength
operator|+
name|totalValueLength
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
comment|// might be null e.g. for pure-Java GZIP
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|EncodedDataBlock
name|codec
range|:
name|codecs
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|codec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|saved
init|=
name|totalKeyLength
operator|+
name|totalPrefixLength
operator|+
name|totalValueLength
operator|-
name|codec
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  Saved bytes:                 %8d"
argument_list|,
name|saved
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|keyRatio
init|=
operator|(
name|saved
operator|*
literal|100.0
operator|)
operator|/
operator|(
name|totalPrefixLength
operator|+
name|totalKeyLength
operator|)
decl_stmt|;
name|double
name|allRatio
init|=
operator|(
name|saved
operator|*
literal|100.0
operator|)
operator|/
name|totalLength
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  Key compression ratio:        %.2f %%"
argument_list|,
name|keyRatio
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"  All compression ratio:        %.2f %%"
argument_list|,
name|allRatio
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|compressedSizeCaption
init|=
name|String
operator|.
name|format
argument_list|(
literal|"  %s compressed size:         "
argument_list|,
name|compressionAlgorithmName
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|compressOnlyRatioCaption
init|=
name|String
operator|.
name|format
argument_list|(
literal|"  %s compression ratio:        "
argument_list|,
name|compressionAlgorithmName
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
name|int
name|compressedSize
init|=
name|codec
operator|.
name|checkCompressedSize
argument_list|(
name|compressor
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|compressedSizeCaption
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%8d"
argument_list|,
name|compressedSize
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|compressOnlyRatio
init|=
literal|100.0
operator|*
operator|(
literal|1.0
operator|-
name|compressedSize
operator|/
operator|(
literal|0.0
operator|+
name|totalLength
operator|)
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|compressOnlyRatioCaption
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%.2f %%"
argument_list|,
name|compressOnlyRatio
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|compressedSizeCaption
operator|+
literal|"N/A"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|compressOnlyRatioCaption
operator|+
literal|"N/A"
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Total KV prefix length:   %8d"
argument_list|,
name|totalPrefixLength
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Total key length:         %8d"
argument_list|,
name|totalKeyLength
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Total key redundancy:     %8d"
argument_list|,
name|totalKeyRedundancyLength
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Total value length:       %8d"
argument_list|,
name|totalValueLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a data block encoder on the given HFile. Output results to console.    * @param kvLimit The limit of KeyValue which will be analyzed.    * @param hfilePath an HFile path on the file system.    * @param compressionName Compression algorithm used for comparison.    * @param doBenchmark Run performance benchmarks.    * @param doVerify Verify correctness.    * @throws IOException When pathName is incorrect.    */
specifier|public
specifier|static
name|void
name|testCodecs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|kvLimit
parameter_list|,
name|String
name|hfilePath
parameter_list|,
name|String
name|compressionName
parameter_list|,
name|boolean
name|doBenchmark
parameter_list|,
name|boolean
name|doVerify
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create environment
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|hfilePath
argument_list|)
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StoreFile
name|hsf
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
name|NoOpDataBlockEncoder
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|StoreFile
operator|.
name|Reader
name|reader
init|=
name|hsf
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|KeyValueScanner
name|scanner
init|=
name|reader
operator|.
name|getStoreFileScanner
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// run the utilities
name|DataBlockEncodingTool
name|comp
init|=
operator|new
name|DataBlockEncodingTool
argument_list|(
name|compressionName
argument_list|)
decl_stmt|;
name|comp
operator|.
name|checkStatistics
argument_list|(
name|scanner
argument_list|,
name|kvLimit
argument_list|)
expr_stmt|;
if|if
condition|(
name|doVerify
condition|)
block|{
name|comp
operator|.
name|verifyCodecs
argument_list|(
name|scanner
argument_list|,
name|kvLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doBenchmark
condition|)
block|{
name|comp
operator|.
name|benchmarkCodecs
argument_list|()
expr_stmt|;
block|}
name|comp
operator|.
name|displayStatistics
argument_list|()
expr_stmt|;
comment|// cleanup
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"./hbase %s<options>"
argument_list|,
name|DataBlockEncodingTool
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|it
range|:
name|options
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|Option
name|opt
init|=
operator|(
name|Option
operator|)
name|it
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|hasArg
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"-%s %s: %s"
argument_list|,
name|opt
operator|.
name|getOpt
argument_list|()
argument_list|,
name|opt
operator|.
name|getArgName
argument_list|()
argument_list|,
name|opt
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"-%s: %s"
argument_list|,
name|opt
operator|.
name|getOpt
argument_list|()
argument_list|,
name|opt
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A command line interface to benchmarks.    * @param args Should have length at least 1 and holds the file path to HFile.    * @throws IOException If you specified the wrong file.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set up user arguments
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"f"
argument_list|,
literal|true
argument_list|,
literal|"HFile to analyse (REQUIRED)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|getOption
argument_list|(
literal|"f"
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"FILENAME"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"n"
argument_list|,
literal|true
argument_list|,
literal|"Limit number of KeyValue which will be analysed"
argument_list|)
expr_stmt|;
name|options
operator|.
name|getOption
argument_list|(
literal|"n"
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"NUMBER"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"b"
argument_list|,
literal|false
argument_list|,
literal|"Measure read throughput"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"c"
argument_list|,
literal|false
argument_list|,
literal|"Omit corectness tests."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"a"
argument_list|,
literal|true
argument_list|,
literal|"What kind of compression algorithm use for comparison."
argument_list|)
expr_stmt|;
comment|// parse arguments
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cmd
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not parse arguments!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
comment|// avoid warning
block|}
name|int
name|kvLimit
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"n"
argument_list|)
condition|)
block|{
name|kvLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// basic argument sanity checks
if|if
condition|(
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"f"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: Filename is required!"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|String
name|compressionName
init|=
name|DEFAULT_COMPRESSION
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|compressionName
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"a"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|boolean
name|doBenchmark
init|=
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|boolean
name|doVerify
init|=
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|testCodecs
argument_list|(
name|conf
argument_list|,
name|kvLimit
argument_list|,
name|pathName
argument_list|,
name|compressionName
argument_list|,
name|doBenchmark
argument_list|,
name|doVerify
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|(
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|getBlockCache
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

