begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_comment
comment|/**  * Test HStoreFile  */
end_comment

begin_class
specifier|public
class|class
name|TestStoreFile
extends|extends
name|HBaseTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|this
operator|.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
comment|// Set the hbase.rootdir to be the home directory in mini dfs.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|this
operator|.
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|shutdownDfs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|shutdownDfs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// ReflectionUtils.printThreadInfo(new PrintWriter(System.out),
comment|//  "Temporary end-of-test thread dump debugging HADOOP-2040: " + getName());
block|}
comment|/**    * Write a file and then assert that we can read from top and bottom halves    * using two HalfMapFiles.    * @throws Exception    */
specifier|public
name|void
name|testBasicHalfMapFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make up a directory hierarchy that has a regiondir and familyname.
name|HFile
operator|.
name|Writer
name|writer
init|=
name|StoreFile
operator|.
name|createWriter
argument_list|(
name|this
operator|.
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|this
operator|.
name|testDir
argument_list|,
literal|"regionname"
argument_list|)
argument_list|,
literal|"familyname"
argument_list|)
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|writeStoreFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|checkHalfHFile
argument_list|(
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Writes HStoreKey and ImmutableBytes data to passed writer and    * then closes it.    * @param writer    * @throws IOException    */
specifier|private
name|void
name|writeStoreFile
parameter_list|(
specifier|final
name|HFile
operator|.
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|char
name|d
init|=
name|FIRST_CHAR
init|;
name|d
operator|<=
name|LAST_CHAR
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|char
name|e
init|=
name|FIRST_CHAR
init|;
name|e
operator|<=
name|LAST_CHAR
condition|;
name|e
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|d
block|,
operator|(
name|byte
operator|)
name|e
block|}
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|now
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that our mechanism of writing store files in one region to reference    * store files in other regions works.    * @throws IOException    */
specifier|public
name|void
name|testReference
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|storedir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|this
operator|.
name|testDir
argument_list|,
literal|"regionname"
argument_list|)
argument_list|,
literal|"familyname"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|storedir
argument_list|,
literal|"1234567890"
argument_list|)
decl_stmt|;
comment|// Make a store file and write data to it.
name|HFile
operator|.
name|Writer
name|writer
init|=
name|StoreFile
operator|.
name|createWriter
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|dir
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|writeStoreFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|StoreFile
name|hsf
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
name|hsf
operator|.
name|createReader
argument_list|()
decl_stmt|;
comment|// Split on a row, not in middle of row.  Midkey returned by reader
comment|// may be in middle of row.  Create new one with empty column and
comment|// timestamp.
name|KeyValue
name|kv
init|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|reader
operator|.
name|midkey
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|midRow
init|=
name|kv
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|kv
operator|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|reader
operator|.
name|getLastKey
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|finalRow
init|=
name|kv
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// Make a reference
name|Path
name|refPath
init|=
name|StoreFile
operator|.
name|split
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|hsf
argument_list|,
name|midRow
argument_list|,
name|Range
operator|.
name|top
argument_list|)
decl_stmt|;
name|StoreFile
name|refHsf
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|refPath
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Now confirm that I can read from the reference and that it only gets
comment|// keys from top half of the file.
name|HFileScanner
name|s
init|=
name|refHsf
operator|.
name|createReader
argument_list|()
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|boolean
name|first
init|=
literal|true
init|;
operator|(
operator|!
name|s
operator|.
name|isSeeked
argument_list|()
operator|&&
name|s
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|s
operator|.
name|next
argument_list|()
condition|;
control|)
block|{
name|ByteBuffer
name|bb
init|=
name|s
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|kv
operator|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|bb
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
name|midRow
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
name|finalRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkHalfHFile
parameter_list|(
specifier|final
name|StoreFile
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|midkey
init|=
name|f
operator|.
name|createReader
argument_list|()
operator|.
name|midkey
argument_list|()
decl_stmt|;
name|KeyValue
name|midKV
init|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|midkey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|midRow
init|=
name|midKV
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// Create top split.
name|Path
name|topDir
init|=
name|Store
operator|.
name|getStoreHomedir
argument_list|(
name|this
operator|.
name|testDir
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|topDir
argument_list|)
condition|)
block|{
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|topDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Path
name|topPath
init|=
name|StoreFile
operator|.
name|split
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|topDir
argument_list|,
name|f
argument_list|,
name|midRow
argument_list|,
name|Range
operator|.
name|top
argument_list|)
decl_stmt|;
comment|// Create bottom split.
name|Path
name|bottomDir
init|=
name|Store
operator|.
name|getStoreHomedir
argument_list|(
name|this
operator|.
name|testDir
argument_list|,
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|bottomDir
argument_list|)
condition|)
block|{
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|bottomDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Path
name|bottomPath
init|=
name|StoreFile
operator|.
name|split
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|bottomDir
argument_list|,
name|f
argument_list|,
name|midRow
argument_list|,
name|Range
operator|.
name|bottom
argument_list|)
decl_stmt|;
comment|// Make readers on top and bottom.
name|HFile
operator|.
name|Reader
name|top
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|topPath
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Reader
name|bottom
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|bottomPath
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|ByteBuffer
name|previous
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Midkey: "
operator|+
name|midKV
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bbMidkeyBytes
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|midkey
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Now make two HalfMapFiles and assert they can read the full backing
comment|// file, one from the top and the other from the bottom.
comment|// Test bottom half first.
comment|// Now test reading from the top.
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|ByteBuffer
name|key
init|=
literal|null
decl_stmt|;
name|HFileScanner
name|topScanner
init|=
name|top
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|topScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|topScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
operator|(
name|topScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|topScanner
operator|.
name|next
argument_list|()
operator|)
condition|)
block|{
name|key
operator|=
name|topScanner
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|topScanner
operator|.
name|getReader
argument_list|()
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|key
operator|.
name|array
argument_list|()
argument_list|,
name|key
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|key
operator|.
name|limit
argument_list|()
argument_list|,
name|midkey
argument_list|,
literal|0
argument_list|,
name|midkey
operator|.
name|length
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First in top: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Last in top: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
name|HFileScanner
name|bottomScanner
init|=
name|bottom
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|bottomScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|bottomScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|bottomScanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|previous
operator|=
name|bottomScanner
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|key
operator|=
name|bottomScanner
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First in bottom: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|previous
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|key
operator|.
name|compareTo
argument_list|(
name|bbMidkeyBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Last in bottom: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|previous
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Remove references.
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|topPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|bottomPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Next test using a midkey that does not exist in the file.
comment|// First, do a key that is< than first key. Ensure splits behave
comment|// properly.
name|byte
index|[]
name|badmidkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"  ."
argument_list|)
decl_stmt|;
name|topPath
operator|=
name|StoreFile
operator|.
name|split
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|topDir
argument_list|,
name|f
argument_list|,
name|badmidkey
argument_list|,
name|Range
operator|.
name|top
argument_list|)
expr_stmt|;
name|bottomPath
operator|=
name|StoreFile
operator|.
name|split
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|bottomDir
argument_list|,
name|f
argument_list|,
name|badmidkey
argument_list|,
name|Range
operator|.
name|bottom
argument_list|)
expr_stmt|;
name|top
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|topPath
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|bottom
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|bottomPath
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|bottomScanner
operator|=
name|bottom
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|bottomScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|bottomScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|bottomScanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
comment|// When badkey is< than the bottom, should return no values.
name|assertTrue
argument_list|(
name|count
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Now read from the top.
name|first
operator|=
literal|true
expr_stmt|;
name|topScanner
operator|=
name|top
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
operator|!
name|topScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|topScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|topScanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|key
operator|=
name|topScanner
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|topScanner
operator|.
name|getReader
argument_list|()
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|key
operator|.
name|array
argument_list|()
argument_list|,
name|key
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|key
operator|.
name|limit
argument_list|()
argument_list|,
name|badmidkey
argument_list|,
literal|0
argument_list|,
name|badmidkey
operator|.
name|length
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|KeyValue
name|keyKV
init|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First top when key< bottom: "
operator|+
name|keyKV
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|keyKV
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|tmp
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|KeyValue
name|keyKV
init|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Last top when key< bottom: "
operator|+
name|keyKV
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|keyKV
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|tmp
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'z'
argument_list|)
expr_stmt|;
block|}
comment|// Remove references.
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|topPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|bottomPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test when badkey is> than last key in file ('||'> 'zz').
name|badmidkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"|||"
argument_list|)
expr_stmt|;
name|topPath
operator|=
name|StoreFile
operator|.
name|split
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|topDir
argument_list|,
name|f
argument_list|,
name|badmidkey
argument_list|,
name|Range
operator|.
name|top
argument_list|)
expr_stmt|;
name|bottomPath
operator|=
name|StoreFile
operator|.
name|split
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|bottomDir
argument_list|,
name|f
argument_list|,
name|badmidkey
argument_list|,
name|Range
operator|.
name|bottom
argument_list|)
expr_stmt|;
name|top
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|topPath
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|bottom
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|bottomPath
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|)
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
name|bottomScanner
operator|=
name|bottom
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
operator|!
name|bottomScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|bottomScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|bottomScanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|key
operator|=
name|bottomScanner
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|keyKV
operator|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First bottom when key> top: "
operator|+
name|keyKV
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|keyKV
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|tmp
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|keyKV
operator|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Last bottom when key> top: "
operator|+
name|keyKV
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|keyKV
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'z'
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
literal|0
expr_stmt|;
name|topScanner
operator|=
name|top
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
operator|!
name|topScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|topScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
operator|(
name|topScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|topScanner
operator|.
name|next
argument_list|()
operator|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
comment|// When badkey is< than the bottom, should return no values.
name|assertTrue
argument_list|(
name|count
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|top
operator|!=
literal|null
condition|)
block|{
name|top
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bottom
operator|!=
literal|null
condition|)
block|{
name|bottom
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|ROOT_DIR
init|=
name|HBaseTestingUtility
operator|.
name|getTestDir
argument_list|(
literal|"TestStoreFile"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|localFormatter
init|=
literal|"%010d"
decl_stmt|;
specifier|public
name|void
name|testBloomFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"io.hfile.bloom.error.rate"
argument_list|,
operator|(
name|float
operator|)
literal|0.01
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"io.hfile.bloom.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|StoreFile
operator|.
name|Writer
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|StoreFile
operator|.
name|DEFAULT_BLOCKSIZE_SMALL
argument_list|,
name|HFile
operator|.
name|DEFAULT_COMPRESSION_ALGORITHM
argument_list|,
name|conf
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|ROW
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"family"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"col"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|now
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|StoreFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|StoreFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// check false positives rate
name|int
name|falsePos
init|=
literal|0
decl_stmt|;
name|int
name|falseNeg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"family:col"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|exists
init|=
name|scanner
operator|.
name|shouldSeek
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columns
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
name|falseNeg
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"False negatives: "
operator|+
name|falseNeg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|falseNeg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"False positives: "
operator|+
name|falsePos
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|falsePos
operator|<
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBloomTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|float
name|err
init|=
operator|(
name|float
operator|)
literal|0.01
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"io.hfile.bloom.error.rate"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"io.hfile.bloom.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|50
decl_stmt|;
name|int
name|colCount
init|=
literal|10
decl_stmt|;
name|int
name|versions
init|=
literal|2
decl_stmt|;
comment|// run once using columns and once using rows
name|StoreFile
operator|.
name|BloomType
index|[]
name|bt
init|=
block|{
name|StoreFile
operator|.
name|BloomType
operator|.
name|ROWCOL
block|,
name|StoreFile
operator|.
name|BloomType
operator|.
name|ROW
block|}
decl_stmt|;
name|int
index|[]
name|expKeys
init|=
block|{
name|rowCount
operator|*
name|colCount
block|,
name|rowCount
block|}
decl_stmt|;
comment|// below line deserves commentary.  it is expected bloom false positives
comment|//  column = rowCount*2*colCount inserts
comment|//  row-level = only rowCount*2 inserts, but failures will be magnified by
comment|//              2nd for loop for every column (2*colCount)
name|float
index|[]
name|expErr
init|=
block|{
literal|2
operator|*
name|rowCount
operator|*
name|colCount
operator|*
name|err
block|,
literal|2
operator|*
name|rowCount
operator|*
literal|2
operator|*
name|colCount
operator|*
name|err
block|}
decl_stmt|;
for|for
control|(
name|int
name|x
range|:
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
control|)
block|{
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|StoreFile
operator|.
name|Writer
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|StoreFile
operator|.
name|DEFAULT_BLOCKSIZE_SMALL
argument_list|,
name|HFile
operator|.
name|DEFAULT_COMPRESSION_ALGORITHM
argument_list|,
name|conf
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|bt
index|[
name|x
index|]
argument_list|,
name|expKeys
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
comment|// rows
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|colCount
operator|*
literal|2
condition|;
name|j
operator|+=
literal|2
control|)
block|{
comment|// column qualifiers
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|col
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|versions
condition|;
operator|++
name|k
control|)
block|{
comment|// versions
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"family"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"col"
operator|+
name|col
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|now
operator|-
name|k
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|StoreFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|StoreFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expKeys
index|[
name|x
index|]
argument_list|,
name|reader
operator|.
name|getBloomFilter
argument_list|()
operator|.
name|getKeyCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// check false positives rate
name|int
name|falsePos
init|=
literal|0
decl_stmt|;
name|int
name|falseNeg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
operator|*
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// rows
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|colCount
operator|*
literal|2
condition|;
operator|++
name|j
control|)
block|{
comment|// column qualifiers
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|col
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|(
literal|"col"
operator|+
name|col
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|exists
init|=
name|scanner
operator|.
name|shouldSeek
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|boolean
name|shouldRowExist
init|=
name|i
operator|%
literal|2
operator|==
literal|0
decl_stmt|;
name|boolean
name|shouldColExist
init|=
name|j
operator|%
literal|2
operator|==
literal|0
decl_stmt|;
name|shouldColExist
operator|=
name|shouldColExist
operator|||
name|bt
index|[
name|x
index|]
operator|==
name|StoreFile
operator|.
name|BloomType
operator|.
name|ROW
expr_stmt|;
if|if
condition|(
name|shouldRowExist
operator|&&
name|shouldColExist
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
name|falseNeg
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|bt
index|[
name|x
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  False negatives: "
operator|+
name|falseNeg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  False positives: "
operator|+
name|falsePos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|falseNeg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|falsePos
operator|<
literal|2
operator|*
name|expErr
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

