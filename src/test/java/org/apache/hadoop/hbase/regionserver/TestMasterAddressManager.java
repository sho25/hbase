begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterAddressTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestMasterAddressManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMasterAddressManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Unit tests that uses ZooKeeper but does not use the master-side methods    * but rather acts directly on ZK.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMasterAddressManagerFromZK
parameter_list|()
throws|throws
name|Exception
block|{
name|ZooKeeperWatcher
name|zk
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"testMasterAddressManagerFromZK"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|zk
argument_list|,
name|zk
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
comment|// Should not have a master yet
name|MasterAddressTracker
name|addressManager
init|=
operator|new
name|MasterAddressTracker
argument_list|(
name|zk
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|addressManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|addressManager
operator|.
name|hasMaster
argument_list|()
argument_list|)
expr_stmt|;
name|zk
operator|.
name|registerListener
argument_list|(
name|addressManager
argument_list|)
expr_stmt|;
comment|// Use a listener to capture when the node is actually created
name|NodeCreationListener
name|listener
init|=
operator|new
name|NodeCreationListener
argument_list|(
name|zk
argument_list|,
name|zk
operator|.
name|masterAddressZNode
argument_list|)
decl_stmt|;
name|zk
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// Create the master node with a dummy address
name|String
name|host
init|=
literal|"localhost"
decl_stmt|;
name|int
name|port
init|=
literal|1234
decl_stmt|;
name|ServerName
name|sn
init|=
operator|new
name|ServerName
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating master node"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createEphemeralNodeAndWatch
argument_list|(
name|zk
argument_list|,
name|zk
operator|.
name|masterAddressZNode
argument_list|,
name|sn
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the node to be created
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for master address manager to be notified"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|waitForCreation
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Master node created"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addressManager
operator|.
name|hasMaster
argument_list|()
argument_list|)
expr_stmt|;
name|ServerName
name|pulledAddress
init|=
name|addressManager
operator|.
name|getMasterAddress
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pulledAddress
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|NodeCreationListener
extends|extends
name|ZooKeeperListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NodeCreationListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Semaphore
name|lock
decl_stmt|;
specifier|private
name|String
name|node
decl_stmt|;
specifier|public
name|NodeCreationListener
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|String
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
name|lock
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"nodeCreated("
operator|+
name|path
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|waitForCreation
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|lock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

