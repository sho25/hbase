begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests various scan start and stop row scenarios. This is set in a scan and  * tested in a MapReduce job to see if that is handed over and done properly  * too.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTableInputFormatScan
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTableInputFormatScan
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"scantest"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|INPUT_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|KEY_STARTROW
init|=
literal|"startRow"
decl_stmt|;
specifier|static
specifier|final
name|String
name|KEY_LASTROW
init|=
literal|"stpRow"
decl_stmt|;
specifier|private
specifier|static
name|HTable
name|table
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// switch TIF to log at DEBUG level
name|TEST_UTIL
operator|.
name|enableDebug
argument_list|(
name|TableInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|enableDebug
argument_list|(
name|TableInputFormatBase
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// start mini hbase cluster
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// create and fill table
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|INPUT_FAMILY
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|table
argument_list|,
name|INPUT_FAMILY
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|INPUT_FAMILY
argument_list|)
expr_stmt|;
comment|// start MR cluster
name|TEST_UTIL
operator|.
name|startMiniMapReduceCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniMapReduceCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Pass the key and value to reduce.    */
specifier|public
specifier|static
class|class
name|ScanMapper
extends|extends
name|TableMapper
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
block|{
comment|/**      * Pass the key and value to reduce.      *      * @param key  The key, here "aaa", "aab" etc.      * @param value  The value is the same as the key.      * @param context  The task context.      * @throws IOException When reading the rows fails.      */
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|value
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There should only be one input column"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|>
name|cf
init|=
name|value
operator|.
name|getMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cf
operator|.
name|containsKey
argument_list|(
name|INPUT_FAMILY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wrong input columns. Missing: '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|INPUT_FAMILY
argument_list|)
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|String
name|val
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
operator|.
name|getValue
argument_list|(
name|INPUT_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"map: key -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|", value -> "
operator|+
name|val
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks the last and first key seen against the scanner boundaries.    */
specifier|public
specifier|static
class|class
name|ScanReducer
extends|extends
name|Reducer
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
specifier|private
name|String
name|first
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|last
init|=
literal|null
decl_stmt|;
specifier|protected
name|void
name|reduce
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Iterable
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ImmutableBytesWritable
name|value
range|:
name|values
control|)
block|{
name|String
name|val
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"reduce: key["
operator|+
name|count
operator|+
literal|"] -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|", value -> "
operator|+
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
name|val
expr_stmt|;
name|last
operator|=
name|val
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|c
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|startRow
init|=
name|c
operator|.
name|get
argument_list|(
name|KEY_STARTROW
argument_list|)
decl_stmt|;
name|String
name|lastRow
init|=
name|c
operator|.
name|get
argument_list|(
name|KEY_LASTROW
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cleanup: first -> \""
operator|+
name|first
operator|+
literal|"\", start row -> \""
operator|+
name|startRow
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cleanup: last -> \""
operator|+
name|last
operator|+
literal|"\", last row -> \""
operator|+
name|lastRow
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|startRow
operator|!=
literal|null
operator|&&
name|startRow
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|startRow
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastRow
operator|!=
literal|null
operator|&&
name|lastRow
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|lastRow
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanEmptyToEmpty
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanEmptyToAPP
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|null
argument_list|,
literal|"app"
argument_list|,
literal|"apo"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanEmptyToBBA
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|null
argument_list|,
literal|"bba"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanEmptyToBBB
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|null
argument_list|,
literal|"bbb"
argument_list|,
literal|"bba"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanEmptyToOPP
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|null
argument_list|,
literal|"opp"
argument_list|,
literal|"opo"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanOBBToOPP
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|"obb"
argument_list|,
literal|"opp"
argument_list|,
literal|"opo"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanOBBToQPP
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|"obb"
argument_list|,
literal|"qpp"
argument_list|,
literal|"qpo"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanOPPToEmpty
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|"opp"
argument_list|,
literal|null
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanYYXToEmpty
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|"yyx"
argument_list|,
literal|null
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanYYYToEmpty
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|"yyy"
argument_list|,
literal|null
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanYZYToEmpty
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScan
argument_list|(
literal|"yzy"
argument_list|,
literal|null
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a MR scan using specific start and stop rows.    *    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
specifier|private
name|void
name|testScan
parameter_list|(
name|String
name|start
parameter_list|,
name|String
name|stop
parameter_list|,
name|String
name|last
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|String
name|jobName
init|=
literal|"Scan"
operator|+
operator|(
name|start
operator|!=
literal|null
condition|?
name|start
operator|.
name|toUpperCase
argument_list|()
else|:
literal|"Empty"
operator|)
operator|+
literal|"To"
operator|+
operator|(
name|stop
operator|!=
literal|null
condition|?
name|stop
operator|.
name|toUpperCase
argument_list|()
else|:
literal|"Empty"
operator|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Before map/reduce startup - job "
operator|+
name|jobName
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|INPUT_FAMILY
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|set
argument_list|(
name|KEY_STARTROW
argument_list|,
name|start
operator|!=
literal|null
condition|?
name|start
else|:
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|stop
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|stop
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|set
argument_list|(
name|KEY_LASTROW
argument_list|,
name|last
operator|!=
literal|null
condition|?
name|last
else|:
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"scan before: "
operator|+
name|scan
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|c
argument_list|,
name|jobName
argument_list|)
decl_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|,
name|scan
argument_list|,
name|ScanMapper
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|ScanReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// one to get final "first" and "last" key
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|job
operator|.
name|getJobName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started "
operator|+
name|job
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After map/reduce completion - job "
operator|+
name|jobName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

