begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_comment
comment|/** Creates multiple threads that write key/values into the */
end_comment

begin_class
specifier|public
class|class
name|MultiThreadedWriter
extends|extends
name|MultiThreadedAction
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultiThreadedWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|long
name|minColumnsPerKey
init|=
literal|1
decl_stmt|;
specifier|private
name|long
name|maxColumnsPerKey
init|=
literal|10
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|HBaseWriterThread
argument_list|>
name|writers
init|=
operator|new
name|HashSet
argument_list|<
name|HBaseWriterThread
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isMultiPut
init|=
literal|false
decl_stmt|;
comment|/**    * A temporary place to keep track of inserted keys. This is written to by    * all writers and is drained on a separate thread that populates    * {@link #insertedUpToKey}, the maximum key in the contiguous range of keys    * being inserted. This queue is supposed to stay small.    */
specifier|private
name|BlockingQueue
argument_list|<
name|Long
argument_list|>
name|insertedKeys
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
comment|/**    * This is the current key to be inserted by any thread. Each thread does an    * atomic get and increment operation and inserts the current value.    */
specifier|private
name|AtomicLong
name|nextKeyToInsert
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/**    * The highest key in the contiguous range of keys .    */
specifier|private
name|AtomicLong
name|insertedUpToKey
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/** The sorted set of keys NOT inserted by the writers */
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|failedKeySet
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The total size of the temporary inserted key set that have not yet lined    * up in a our contiguous sequence starting from startKey. Supposed to stay    * small.    */
specifier|private
name|AtomicLong
name|insertedKeyQueueSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/** Enable this if used in conjunction with a concurrent reader. */
specifier|private
name|boolean
name|trackInsertedKeys
decl_stmt|;
specifier|public
name|MultiThreadedWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|columnFamily
argument_list|,
literal|"W"
argument_list|)
expr_stmt|;
block|}
comment|/** Use multi-puts vs. separate puts for every column in a row */
specifier|public
name|void
name|setMultiPut
parameter_list|(
name|boolean
name|isMultiPut
parameter_list|)
block|{
name|this
operator|.
name|isMultiPut
operator|=
name|isMultiPut
expr_stmt|;
block|}
specifier|public
name|void
name|setColumnsPerKey
parameter_list|(
name|long
name|minColumnsPerKey
parameter_list|,
name|long
name|maxColumnsPerKey
parameter_list|)
block|{
name|this
operator|.
name|minColumnsPerKey
operator|=
name|minColumnsPerKey
expr_stmt|;
name|this
operator|.
name|maxColumnsPerKey
operator|=
name|maxColumnsPerKey
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|long
name|startKey
parameter_list|,
name|long
name|endKey
parameter_list|,
name|int
name|numThreads
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|start
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inserting keys ["
operator|+
name|startKey
operator|+
literal|", "
operator|+
name|endKey
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|nextKeyToInsert
operator|.
name|set
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
name|insertedUpToKey
operator|.
name|set
argument_list|(
name|startKey
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|HBaseWriterThread
name|writer
init|=
operator|new
name|HBaseWriterThread
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trackInsertedKeys
condition|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|InsertedKeysTracker
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|numThreadsWorking
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|startThreads
argument_list|(
name|writers
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|longToByteArrayKey
parameter_list|(
name|long
name|rowKey
parameter_list|)
block|{
return|return
name|LoadTestKVGenerator
operator|.
name|md5PrefixedKey
argument_list|(
name|rowKey
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|private
class|class
name|HBaseWriterThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|HTable
name|table
decl_stmt|;
specifier|private
specifier|final
name|int
name|writerId
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LoadTestKVGenerator
name|dataGenerator
init|=
operator|new
name|LoadTestKVGenerator
argument_list|(
name|minDataSize
argument_list|,
name|maxDataSize
argument_list|)
decl_stmt|;
specifier|public
name|HBaseWriterThread
parameter_list|(
name|int
name|writerId
parameter_list|)
throws|throws
name|IOException
block|{
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_"
operator|+
name|writerId
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|writerId
operator|=
name|writerId
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|long
name|rowKey
decl_stmt|;
while|while
condition|(
operator|(
name|rowKey
operator|=
name|nextKeyToInsert
operator|.
name|getAndIncrement
argument_list|()
operator|)
operator|<
name|endKey
condition|)
block|{
name|long
name|numColumns
init|=
name|minColumnsPerKey
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|%
operator|(
name|maxColumnsPerKey
operator|-
name|minColumnsPerKey
operator|)
decl_stmt|;
name|numKeys
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMultiPut
condition|)
block|{
name|multiPutInsertKey
argument_list|(
name|rowKey
argument_list|,
literal|0
argument_list|,
name|numColumns
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|long
name|col
init|=
literal|0
init|;
name|col
operator|<
name|numColumns
condition|;
operator|++
name|col
control|)
block|{
name|insert
argument_list|(
name|rowKey
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|trackInsertedKeys
condition|)
block|{
name|insertedKeys
operator|.
name|add
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing table"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|numThreadsWorking
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|insert
parameter_list|(
name|long
name|rowKey
parameter_list|,
name|long
name|col
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|longToByteArrayKey
argument_list|(
name|rowKey
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|colAsStr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|columnFamily
argument_list|,
name|colAsStr
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dataGenerator
operator|.
name|generateRandomSizeValue
argument_list|(
name|rowKey
argument_list|,
name|colAsStr
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|numCols
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|totalOpTimeMs
operator|.
name|addAndGet
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failedKeySet
operator|.
name|add
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to insert: "
operator|+
name|rowKey
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|multiPutInsertKey
parameter_list|(
name|long
name|rowKey
parameter_list|,
name|long
name|startCol
parameter_list|,
name|long
name|endCol
parameter_list|)
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Preparing put for key = "
operator|+
name|rowKey
operator|+
literal|", cols = ["
operator|+
name|startCol
operator|+
literal|", "
operator|+
name|endCol
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startCol
operator|>=
name|endCol
condition|)
block|{
return|return;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|LoadTestKVGenerator
operator|.
name|md5PrefixedKey
argument_list|(
name|rowKey
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnQualifier
decl_stmt|;
name|byte
index|[]
name|value
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|startCol
init|;
name|i
operator|<
name|endCol
condition|;
operator|++
name|i
control|)
block|{
name|String
name|qualStr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|columnQualifier
operator|=
name|qualStr
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|value
operator|=
name|dataGenerator
operator|.
name|generateRandomSizeValue
argument_list|(
name|rowKey
argument_list|,
name|qualStr
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|columnFamily
argument_list|,
name|columnQualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|numCols
operator|.
name|addAndGet
argument_list|(
name|endCol
operator|-
name|startCol
argument_list|)
expr_stmt|;
name|totalOpTimeMs
operator|.
name|addAndGet
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failedKeySet
operator|.
name|add
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A thread that keeps track of the highest key in the contiguous range of    * inserted keys.    */
specifier|private
class|class
name|InsertedKeysTracker
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|expectedKey
init|=
name|startKey
decl_stmt|;
name|Queue
argument_list|<
name|Long
argument_list|>
name|sortedKeys
init|=
operator|new
name|PriorityQueue
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|expectedKey
operator|<
name|endKey
condition|)
block|{
comment|// Block until a new element is available.
name|Long
name|k
decl_stmt|;
try|try
block|{
name|k
operator|=
name|insertedKeys
operator|.
name|poll
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inserted key tracker thread interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|k
operator|==
name|expectedKey
condition|)
block|{
comment|// Skip the "sorted key" queue and consume this key.
name|insertedUpToKey
operator|.
name|set
argument_list|(
name|k
argument_list|)
expr_stmt|;
operator|++
name|expectedKey
expr_stmt|;
block|}
else|else
block|{
name|sortedKeys
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
comment|// See if we have a sequence of contiguous keys lined up.
while|while
condition|(
operator|!
name|sortedKeys
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|(
name|k
operator|=
name|sortedKeys
operator|.
name|peek
argument_list|()
operator|)
operator|==
name|expectedKey
operator|)
condition|)
block|{
name|sortedKeys
operator|.
name|poll
argument_list|()
expr_stmt|;
name|insertedUpToKey
operator|.
name|set
argument_list|(
name|k
argument_list|)
expr_stmt|;
operator|++
name|expectedKey
expr_stmt|;
block|}
name|insertedKeyQueueSize
operator|.
name|set
argument_list|(
name|insertedKeys
operator|.
name|size
argument_list|()
operator|+
name|sortedKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in inserted key tracker"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|numThreadsWorking
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|waitForFinish
parameter_list|()
block|{
name|super
operator|.
name|waitForFinish
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to write keys: "
operator|+
name|failedKeySet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|key
range|:
name|failedKeySet
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to write key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getNumWriteFailures
parameter_list|()
block|{
return|return
name|failedKeySet
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * The max key until which all keys have been inserted (successfully or not).    * @return the last key that we have inserted all keys up to (inclusive)    */
specifier|public
name|long
name|insertedUpToKey
parameter_list|()
block|{
return|return
name|insertedUpToKey
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|failedToWriteKey
parameter_list|(
name|long
name|k
parameter_list|)
block|{
return|return
name|failedKeySet
operator|.
name|contains
argument_list|(
name|k
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|progressInfo
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendToStatus
argument_list|(
name|sb
argument_list|,
literal|"insertedUpTo"
argument_list|,
name|insertedUpToKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|appendToStatus
argument_list|(
name|sb
argument_list|,
literal|"insertedQSize"
argument_list|,
name|insertedKeyQueueSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Used for a joint write/read workload. Enables tracking the last inserted    * key, which requires a blocking queue and a consumer thread.    * @param enable whether to enable tracking the last inserted key    */
name|void
name|setTrackInsertedKeys
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|trackInsertedKeys
operator|=
name|enable
expr_stmt|;
block|}
block|}
end_class

end_unit

