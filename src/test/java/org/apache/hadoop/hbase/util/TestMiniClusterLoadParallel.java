begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * A write/read/verify load test on a mini HBase cluster. Tests reading  * and writing at the same time.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMiniClusterLoadParallel
extends|extends
name|TestMiniClusterLoadSequential
block|{
specifier|public
name|TestMiniClusterLoadParallel
parameter_list|(
name|boolean
name|isMultiPut
parameter_list|)
block|{
name|super
argument_list|(
name|isMultiPut
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|loadTest
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareForLoadTest
argument_list|()
expr_stmt|;
name|readerThreads
operator|.
name|linkToWriter
argument_list|(
name|writerThreads
argument_list|)
expr_stmt|;
name|writerThreads
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|NUM_KEYS
argument_list|,
name|NUM_THREADS
argument_list|)
expr_stmt|;
name|readerThreads
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|NUM_KEYS
argument_list|,
name|NUM_THREADS
argument_list|)
expr_stmt|;
name|writerThreads
operator|.
name|waitForFinish
argument_list|()
expr_stmt|;
name|readerThreads
operator|.
name|waitForFinish
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|writerThreads
operator|.
name|getNumWriteFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|readerThreads
operator|.
name|getNumReadFailures
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|readerThreads
operator|.
name|getNumReadErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_KEYS
argument_list|,
name|readerThreads
operator|.
name|getNumUniqueKeysVerified
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

