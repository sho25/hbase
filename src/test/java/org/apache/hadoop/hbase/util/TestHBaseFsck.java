begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This tests HBaseFsck's ability to detect reasons for inconsistent tables.  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseFsck
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
comment|// for the instance, reset every test run
specifier|private
name|HTable
name|tbl
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ERROR_CODE
argument_list|>
name|doFsck
parameter_list|(
name|boolean
name|fix
parameter_list|)
throws|throws
name|Exception
block|{
name|HBaseFsck
name|fsck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|displayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|fsck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixErrors
argument_list|(
name|fix
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|doWork
argument_list|()
expr_stmt|;
return|return
name|fsck
operator|.
name|getErrors
argument_list|()
operator|.
name|getErrorList
argument_list|()
return|;
block|}
specifier|private
name|void
name|assertNoErrors
parameter_list|(
name|List
argument_list|<
name|ERROR_CODE
argument_list|>
name|errs
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertErrors
parameter_list|(
name|List
argument_list|<
name|ERROR_CODE
argument_list|>
name|errs
parameter_list|,
name|ERROR_CODE
index|[]
name|expectedErrors
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedErrors
argument_list|)
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHBaseFsck
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|table
init|=
literal|"tableBadMetaAssign"
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|,
name|FAM
argument_list|)
expr_stmt|;
comment|// We created 1 table, should be fine
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now let's mess it up and change the assignment in .META. to
comment|// point to a different region server
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HTableDescriptor
operator|.
name|META_TABLEDESC
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|meta
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|resforloop
label|:
for|for
control|(
name|Result
name|res
range|:
name|scanner
control|)
block|{
name|long
name|startCode
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|res
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rs
range|:
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|ServerName
name|sn
init|=
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// When we find a diff RS, change the assignment and break
if|if
condition|(
name|startCode
operator|!=
name|sn
operator|.
name|getStartcode
argument_list|()
condition|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
break|break
name|resforloop
break|;
block|}
block|}
block|}
comment|// Try to fix the data
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|SERVER_DOES_NOT_MATCH_META
block|}
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
comment|// Should be fixed now
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// comment needed - what is the purpose of this line
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
specifier|private
name|HRegionInfo
name|createRegion
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
return|return
name|hri
return|;
block|}
comment|/**    * Setup a clean table before we start mucking with it.    *     * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
name|void
name|setupTable
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|startKeys
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
block|}
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|FAM
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// If a table has no CF's it doesn't get checked
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|startKeys
argument_list|)
expr_stmt|;
name|tbl
operator|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tablename
argument_list|)
expr_stmt|;
block|}
comment|/**    * delete table in preparation for next test    *     * @param tablename    * @throws IOException    */
name|void
name|deleteTable
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tbytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tbytes
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tbytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * This creates a clean table and confirms that the table is clean.    */
annotation|@
name|Test
specifier|public
name|void
name|testHBaseFsckClean
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|table
init|=
literal|"tableClean"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// We created 1 table, should be fine
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates a bad table with regions that have a duplicate start key    */
annotation|@
name|Test
specifier|public
name|void
name|testDupeStartKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableDupeStartKey"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now let's mess it up, by adding a region with a duplicate startkey
name|HRegionInfo
name|hriDupe
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates a bad table where a start key contained in another region.    */
annotation|@
name|Test
specifier|public
name|void
name|testCoveredStartKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableCoveredStartKey"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap in the metadata
name|HRegionInfo
name|hriOverlap
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B2"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|,
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates a bad table with a hole in meta.    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaHole
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableMetaHole"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|HRegionInfo
name|hriHole
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"E"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriHole
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriHole
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
literal|false
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

