begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|assertErrors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|assertNoErrors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|doFsck
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AdminProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventHandler
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * This tests HBaseFsck's ability to detect reasons for inconsistent tables.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHBaseFsck
block|{
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHBaseFsck
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REGION_ONLINE_TIMEOUT
init|=
literal|300
decl_stmt|;
comment|// for the instance, reset every test run
specifier|private
name|HTable
name|tbl
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
index|[]
name|SPLITS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
block|}
decl_stmt|;
comment|// one row per region.
specifier|private
specifier|final
specifier|static
name|byte
index|[]
index|[]
name|ROWKEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"00"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"50"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A5"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B5"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C5"
argument_list|)
block|}
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_SPLITTING_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHBaseFsck
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|table
init|=
literal|"tableBadMetaAssign"
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|,
name|FAM
argument_list|)
expr_stmt|;
comment|// We created 1 table, should be fine
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now let's mess it up and change the assignment in .META. to
comment|// point to a different region server
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HTableDescriptor
operator|.
name|META_TABLEDESC
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|meta
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|resforloop
label|:
for|for
control|(
name|Result
name|res
range|:
name|scanner
control|)
block|{
name|long
name|startCode
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|res
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rs
range|:
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|ServerName
name|sn
init|=
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// When we find a diff RS, change the assignment and break
if|if
condition|(
name|startCode
operator|!=
name|sn
operator|.
name|getStartcode
argument_list|()
condition|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
break|break
name|resforloop
break|;
block|}
block|}
block|}
comment|// Try to fix the data
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|SERVER_DOES_NOT_MATCH_META
block|}
argument_list|)
expr_stmt|;
comment|// fixing assignments require opening regions is not synchronous.  To make
comment|// the test pass consistently so for now we bake in some sleep to let it
comment|// finish.  1s seems sufficient.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Should be fixed now
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// comment needed - what is the purpose of this line
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a new region in META.    */
specifier|private
name|HRegionInfo
name|createRegion
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
return|return
name|hri
return|;
block|}
comment|/**    * Debugging method to dump the contents of meta.    */
specifier|private
name|void
name|dumpMeta
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|metaRows
init|=
name|TEST_UTIL
operator|.
name|getMetaTableRows
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|metaRows
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method is used to undeploy a region -- close it and attempt to    * remove its state from the Master.    */
specifier|private
name|void
name|undeployRegion
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|HBaseFsckRepair
operator|.
name|closeRegionSilentlyAndWait
argument_list|(
name|admin
argument_list|,
name|sn
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|admin
operator|.
name|getMaster
argument_list|()
operator|.
name|offline
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception when attempting to offline region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete a region from assignments, meta, or completely from hdfs.    * @param unassign if true unassign region if assigned    * @param metaRow  if true remove region's row from META    * @param hdfs if true remove region's dir in HDFS    */
specifier|private
name|void
name|deleteRegion
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|boolean
name|unassign
parameter_list|,
name|boolean
name|metaRow
parameter_list|,
name|boolean
name|hdfs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|unassign
argument_list|,
name|metaRow
argument_list|,
name|hdfs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete a region from assignments, meta, or completely from hdfs.    * @param unassign if true unassign region if assigned    * @param metaRow  if true remove region's row from META    * @param hdfs if true remove region's dir in HDFS    * @param regionInfoOnly if true remove a region dir's .regioninfo file    */
specifier|private
name|void
name|deleteRegion
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|boolean
name|unassign
parameter_list|,
name|boolean
name|metaRow
parameter_list|,
name|boolean
name|hdfs
parameter_list|,
name|boolean
name|regionInfoOnly
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"** Before delete:"
argument_list|)
expr_stmt|;
name|dumpMeta
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|hris
init|=
name|tbl
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|e
range|:
name|hris
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ServerName
name|hsa
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|startKey
argument_list|)
operator|==
literal|0
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|endKey
argument_list|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RegionName: "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|deleteRow
init|=
name|hri
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|unassign
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Undeploying region "
operator|+
name|hri
operator|+
literal|" from server "
operator|+
name|hsa
argument_list|)
expr_stmt|;
name|undeployRegion
argument_list|(
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
argument_list|,
name|hsa
argument_list|,
name|hri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regionInfoOnly
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"deleting hdfs .regioninfo data: "
operator|+
name|hri
operator|.
name|toString
argument_list|()
operator|+
name|hsa
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|rootDir
operator|+
literal|"/"
operator|+
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|hriPath
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|HRegion
operator|.
name|REGIONINFO_FILE
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|hriPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfs
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"deleting hdfs data: "
operator|+
name|hri
operator|.
name|toString
argument_list|()
operator|+
name|hsa
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|rootDir
operator|+
literal|"/"
operator|+
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|p
operator|+
literal|" sucessfully? "
operator|+
name|success
argument_list|)
expr_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaRow
condition|)
block|{
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|deleteRow
argument_list|)
decl_stmt|;
name|meta
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|hri
operator|.
name|toString
argument_list|()
operator|+
name|hsa
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|getMetaTableRows
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"*** After delete:"
argument_list|)
expr_stmt|;
name|dumpMeta
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup a clean table before we start mucking with it.    *     * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
name|HTable
name|setupTable
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|FAM
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// If a table has no CF's it doesn't get checked
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|SPLITS
argument_list|)
expr_stmt|;
name|tbl
operator|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tablename
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|ROWKEYS
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|/**    * Counts the number of row to verify data loss or non-dataloss.    */
name|int
name|countRows
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|tbl
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
comment|/**    * delete table in preparation for next test    *     * @param tablename    * @throws IOException    */
name|void
name|deleteTable
parameter_list|(
name|String
name|tablename
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
name|byte
index|[]
name|tbytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|admin
operator|.
name|disableTableAsync
argument_list|(
name|tbytes
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tbytes
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Interrupted when trying to disable table "
operator|+
name|tablename
argument_list|)
expr_stmt|;
block|}
block|}
name|admin
operator|.
name|deleteTable
argument_list|(
name|tbytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * This creates a clean table and confirms that the table is clean.    */
annotation|@
name|Test
specifier|public
name|void
name|testHBaseFsckClean
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|table
init|=
literal|"tableClean"
decl_stmt|;
try|try
block|{
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// We created 1 table, should be fine
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This create and fixes a bad table with regions that have a duplicate    * start key    */
annotation|@
name|Test
specifier|public
name|void
name|testDupeStartKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableDupeStartKey"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now let's mess it up, by adding a region with a duplicate startkey
name|HRegionInfo
name|hriDupe
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|,
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// seems like the "bigger" region won.
comment|// fix the degenerate region.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that the degenerate region is gone and no data loss
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get region info from local cluster.    */
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getDeployedHRIs
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterStatus
name|status
init|=
name|admin
operator|.
name|getMaster
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|regionServers
init|=
name|status
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mm
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HConnection
name|connection
init|=
name|admin
operator|.
name|getConnection
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|hsi
range|:
name|regionServers
control|)
block|{
name|AdminProtocol
name|server
init|=
name|connection
operator|.
name|getAdmin
argument_list|(
name|hsi
operator|.
name|getHostname
argument_list|()
argument_list|,
name|hsi
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// list all online regions from this region server
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|regionNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regions
control|)
block|{
name|regionNames
operator|.
name|add
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mm
operator|.
name|put
argument_list|(
name|hsi
argument_list|,
name|regionNames
argument_list|)
expr_stmt|;
block|}
return|return
name|mm
return|;
block|}
comment|/**    * Returns the HSI a region info is on.    */
name|ServerName
name|findDeployedHSI
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mm
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|mm
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * This create and fixes a bad table with regions that have a duplicate    * start key    */
annotation|@
name|Test
specifier|public
name|void
name|testDupeRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableDupeRegion"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now let's mess it up, by adding a region with a duplicate startkey
name|HRegionInfo
name|hriDupe
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
comment|// Yikes! The assignment manager can't tell between diff between two
comment|// different regions with the same start/endkeys since it doesn't
comment|// differentiate on ts/regionId!  We actually need to recheck
comment|// deployments!
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|ServerName
name|hsi
decl_stmt|;
while|while
condition|(
operator|(
name|hsi
operator|=
name|findDeployedHSI
argument_list|(
name|getDeployedHRIs
argument_list|(
name|admin
argument_list|)
argument_list|,
name|hriDupe
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished assignment of dupe region"
argument_list|)
expr_stmt|;
comment|// TODO why is dupe region different from dupe start keys?
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|,
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// seems like the "bigger" region won.
comment|// fix the degenerate region.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that the degenerate region is gone and no data loss
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with regions that has startkey == endkey    */
annotation|@
name|Test
specifier|public
name|void
name|testDegenerateRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableDegenerateRegions"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now let's mess it up, by adding a region with a duplicate startkey
name|HRegionInfo
name|hriDupe
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|DEGENERATE_REGION
block|,
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|,
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix the degenerate region.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that the degenerate region is gone and no data loss
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table where a region is completely contained    * by another region.    */
annotation|@
name|Test
specifier|public
name|void
name|testContainedRegionOverlap
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableContainedRegionOverlap"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap in the metadata
name|HRegionInfo
name|hriOverlap
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix the problem.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify that overlaps are fixed
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table where a region is completely contained    * by another region, and there is a hole (sort of like a bad split)    */
annotation|@
name|Test
specifier|public
name|void
name|testOverlapAndOrphan
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableOverlapAndOrphan"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap in the metadata
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriOverlap
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|ORPHAN_HDFS_REGION
block|,
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// fix the problem.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify that overlaps are fixed
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table where a region overlaps two regions --    * a start key contained in another region and its end key is contained in    * yet another region.    */
annotation|@
name|Test
specifier|public
name|void
name|testCoveredStartKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableCoveredStartKey"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap in the metadata
name|HRegionInfo
name|hriOverlap
init|=
name|createRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B2"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|,
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix the problem.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify that overlaps are fixed
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck2
argument_list|,
operator|new
name|ERROR_CODE
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a missing region -- hole in meta    * and data missing in the fs.    */
annotation|@
name|Test
specifier|public
name|void
name|testRegionHole
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableRegionHole"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the assignment, meta, and hdfs data
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
operator|-
literal|2
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// lost a region so lost a row
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a missing region -- hole in meta    * and data present but .regioinfino missing (an orphan hdfs region)in the fs.    */
annotation|@
name|Test
specifier|public
name|void
name|testHDFSRegioninfoMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableHDFSRegioininfoMissing"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|ORPHAN_HDFS_REGION
block|,
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a region that is missing meta and    * not assigned to a region server.    */
annotation|@
name|Test
specifier|public
name|void
name|testNotInMetaOrDeployedHole
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableNotInMetaOrDeployedHole"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// don't rm from fs
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates fixes a bad table with a hole in meta.    */
annotation|@
name|Test
specifier|public
name|void
name|testNotInMetaHole
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableNotInMetaHole"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// don't rm from fs
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a region that is in meta but has    * no deployment or data hdfs    */
annotation|@
name|Test
specifier|public
name|void
name|testNotInHdfs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableNotInHdfs"
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in hlog only there is no data loss
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the hdfs data
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
operator|-
literal|2
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates entries in META with no hdfs data.  This should cleanly    * remove the table.    */
annotation|@
name|Test
specifier|public
name|void
name|testNoHdfsTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"NoHdfsTable"
decl_stmt|;
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in hlog only there is no data loss
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a giant hole in meta
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// in 0.92+, meta entries auto create regiondirs
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table "
operator|+
name|table
operator|+
literal|" should have been deleted"
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * when the hbase.version file missing, It is fix the fault.    */
annotation|@
name|Test
specifier|public
name|void
name|testNoVersionFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// delete the hbase.version file
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|versionFile
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|versionFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NO_VERSION_FILE
block|}
argument_list|)
expr_stmt|;
comment|// fix hbase.version missing
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// no version file fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * the region is not deployed when the table is disabled.    */
annotation|@
name|Test
specifier|public
name|void
name|testRegionShouldNotBeDeployed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"tableRegionShouldNotBeDeployed"
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRegionShouldNotBeDeployed."
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a ZKW to use in the test
name|ZooKeeperWatcher
name|zkw
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|TEST_UTIL
argument_list|)
decl_stmt|;
name|FileSystem
name|filesystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|filesystem
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[
literal|0
index|]
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|}
decl_stmt|;
name|HTableDescriptor
name|htdDisabled
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|htdDisabled
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAM
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write the .tableinfo
name|FSTableDescriptors
operator|.
name|createTableDescriptor
argument_list|(
name|filesystem
argument_list|,
name|rootdir
argument_list|,
name|htdDisabled
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|disabledRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionsInMeta
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htdDisabled
argument_list|,
name|SPLIT_KEYS
argument_list|)
decl_stmt|;
comment|// Let's just assign everything to first RS
name|HRegionServer
name|hrs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
name|hrs
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// create region files.
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Region of disable table was opened on RS
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionInfo
name|region
init|=
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|hrs
operator|.
name|openRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|int
name|iTimes
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|ZKAssign
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|rt
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|RS_ZK_REGION_OPENED
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iTimes
operator|++
expr_stmt|;
if|if
condition|(
name|iTimes
operator|>=
name|REGION_ONLINE_TIMEOUT
condition|)
block|{
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|iTimes
operator|<
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|SHOULD_NOT_BE_DEPLOYED
block|}
argument_list|)
expr_stmt|;
comment|// fix this fault
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check result
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

