begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_comment
comment|/** Determines HBase home path from either class or jar directory */
end_comment

begin_class
specifier|public
class|class
name|HBaseHomePath
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TARGET_CLASSES
init|=
literal|"/target/classes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAR_SUFFIX
init|=
literal|".jar!"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_PREFIX
init|=
literal|"file:"
decl_stmt|;
specifier|private
name|HBaseHomePath
parameter_list|()
block|{   }
specifier|public
specifier|static
name|String
name|getHomePath
parameter_list|()
block|{
name|String
name|className
init|=
name|HConstants
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// This could have been any HBase class.
name|String
name|relPathForClass
init|=
name|className
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|URL
name|url
init|=
name|ClassLoader
operator|.
name|getSystemResource
argument_list|(
name|relPathForClass
argument_list|)
decl_stmt|;
name|relPathForClass
operator|=
literal|"/"
operator|+
name|relPathForClass
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not lookup class location for "
operator|+
name|className
argument_list|)
throw|;
block|}
name|String
name|path
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|relPathForClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Got invalid path trying to look up class "
operator|+
name|className
operator|+
literal|": "
operator|+
name|path
argument_list|)
throw|;
block|}
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
name|relPathForClass
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|FILE_PREFIX
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|FILE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
name|TARGET_CLASSES
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
name|TARGET_CLASSES
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
name|JAR_SUFFIX
argument_list|)
condition|)
block|{
name|int
name|slashIndex
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|slashIndex
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected to find slash in jar path "
operator|+
name|path
argument_list|)
throw|;
block|}
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slashIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot identify HBase source directory or installation path "
operator|+
literal|"from "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

