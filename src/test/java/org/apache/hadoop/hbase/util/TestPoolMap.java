begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PoolMap
operator|.
name|PoolType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Suite
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Suite
operator|.
name|class
argument_list|)
annotation|@
name|Suite
operator|.
name|SuiteClasses
argument_list|(
block|{
name|TestPoolMap
operator|.
name|TestRoundRobinPoolType
operator|.
name|class
block|,
name|TestPoolMap
operator|.
name|TestThreadLocalPoolType
operator|.
name|class
block|,
name|TestPoolMap
operator|.
name|TestReusablePoolType
operator|.
name|class
block|}
argument_list|)
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestPoolMap
block|{
specifier|public
specifier|abstract
specifier|static
class|class
name|TestPoolType
extends|extends
name|TestCase
block|{
specifier|protected
name|PoolMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|poolMap
decl_stmt|;
specifier|protected
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|POOL_SIZE
init|=
literal|3
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|poolMap
operator|=
operator|new
name|PoolMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|getPoolType
argument_list|()
argument_list|,
name|POOL_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|PoolType
name|getPoolType
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|poolMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|runThread
parameter_list|(
specifier|final
name|String
name|randomKey
parameter_list|,
specifier|final
name|String
name|randomValue
parameter_list|,
specifier|final
name|String
name|expectedValue
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|AtomicBoolean
name|matchFound
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|poolMap
operator|.
name|put
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|String
name|actualValue
init|=
name|poolMap
operator|.
name|get
argument_list|(
name|randomKey
argument_list|)
decl_stmt|;
name|matchFound
operator|.
name|set
argument_list|(
name|expectedValue
operator|==
literal|null
condition|?
name|actualValue
operator|==
literal|null
else|:
name|expectedValue
operator|.
name|equals
argument_list|(
name|actualValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|matchFound
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
specifier|static
class|class
name|TestRoundRobinPoolType
extends|extends
name|TestPoolType
block|{
annotation|@
name|Override
specifier|protected
name|PoolType
name|getPoolType
parameter_list|()
block|{
return|return
name|PoolType
operator|.
name|RoundRobin
return|;
block|}
specifier|public
name|void
name|testSingleThreadedClient
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
comment|// As long as the pool is not full, we'll get null back.
comment|// This forces the user to create new values that can be used to populate
comment|// the pool.
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultiThreadedClients
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
comment|// As long as the pool is not full, we'll get null back
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// As long as we use distinct keys, each pool will have one value
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|poolMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
comment|// As long as the pool is not full, we'll get null back
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// since we use the same key, the pool size should grow
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// at the end of the day, there should be as many values as we put
name|assertEquals
argument_list|(
name|POOL_SIZE
operator|-
literal|1
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPoolCap
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|randomValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|randomValues
operator|.
name|add
argument_list|(
name|randomValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|POOL_SIZE
operator|-
literal|1
condition|)
block|{
comment|// As long as the pool is not full, we'll get null back
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// when the pool becomes full, we expect the value we get back to be
comment|// what we put earlier, in round-robin order
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValues
operator|.
name|get
argument_list|(
operator|(
name|i
operator|-
name|POOL_SIZE
operator|+
literal|1
operator|)
operator|%
name|POOL_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|POOL_SIZE
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
specifier|static
class|class
name|TestThreadLocalPoolType
extends|extends
name|TestPoolType
block|{
annotation|@
name|Override
specifier|protected
name|PoolType
name|getPoolType
parameter_list|()
block|{
return|return
name|PoolType
operator|.
name|ThreadLocal
return|;
block|}
specifier|public
name|void
name|testSingleThreadedClient
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
comment|// As long as the pool is not full, we should get back what we put
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultiThreadedClients
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// As long as the pool is not full, we should get back what we put
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPoolCap
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
comment|// as of HBASE-4150, pool limit is no longer used with ThreadLocalPool
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|POOL_SIZE
operator|*
literal|2
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
specifier|static
class|class
name|TestReusablePoolType
extends|extends
name|TestPoolType
block|{
annotation|@
name|Override
specifier|protected
name|PoolType
name|getPoolType
parameter_list|()
block|{
return|return
name|PoolType
operator|.
name|Reusable
return|;
block|}
specifier|public
name|void
name|testSingleThreadedClient
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
comment|// As long as we poll values we put, the pool size should remain zero
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultiThreadedClients
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// As long as we poll values we put, the pool size should remain zero
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|poolMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPoolCap
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// As long as we poll values we put, the pool size should remain zero
name|String
name|randomKey
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|randomValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POOL_SIZE
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|String
name|randomValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|randomValues
operator|.
name|add
argument_list|(
name|randomValue
argument_list|)
expr_stmt|;
name|runThread
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolMap
operator|.
name|size
argument_list|(
name|randomKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

