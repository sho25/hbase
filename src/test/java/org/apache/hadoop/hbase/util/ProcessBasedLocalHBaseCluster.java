begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_comment
comment|/**  * A helper class for process-based mini-cluster tests. Unlike  * {@link MiniHBaseCluster}, starts daemons as separate processes, allowing to  * do real kill testing.  */
end_comment

begin_class
specifier|public
class|class
name|ProcessBasedLocalHBaseCluster
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_WORKDIR
init|=
literal|"/tmp/hbase-"
operator|+
name|System
operator|.
name|getenv
argument_list|(
literal|"USER"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|hbaseHome
decl_stmt|;
specifier|private
specifier|final
name|String
name|workDir
decl_stmt|;
specifier|private
name|int
name|numRegionServers
decl_stmt|;
specifier|private
specifier|final
name|int
name|zkClientPort
decl_stmt|;
specifier|private
specifier|final
name|int
name|masterPort
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_FILE_SIZE_OVERRIDE
init|=
literal|10
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcessBasedLocalHBaseCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|daemonPidFiles
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|private
name|boolean
name|shutdownHookInstalled
decl_stmt|;
specifier|private
name|String
name|hbaseDaemonScript
decl_stmt|;
comment|/**    * Constructor. Modifies the passed configuration.    * @param hbaseHome the top directory of the HBase source tree    */
specifier|public
name|ProcessBasedLocalHBaseCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hbaseHome
parameter_list|,
name|int
name|numRegionServers
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|hbaseHome
operator|=
name|hbaseHome
expr_stmt|;
name|this
operator|.
name|numRegionServers
operator|=
name|numRegionServers
expr_stmt|;
name|this
operator|.
name|workDir
operator|=
name|DEFAULT_WORKDIR
expr_stmt|;
name|hbaseDaemonScript
operator|=
name|hbaseHome
operator|+
literal|"/bin/hbase-daemon.sh"
expr_stmt|;
name|zkClientPort
operator|=
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
expr_stmt|;
name|masterPort
operator|=
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|HConstants
operator|.
name|LOCALHOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|zkClientPort
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|cleanupOldState
argument_list|()
expr_stmt|;
comment|// start ZK
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting ZooKeeper"
argument_list|)
expr_stmt|;
name|startZK
argument_list|()
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|waitForHostPort
argument_list|(
name|HConstants
operator|.
name|LOCALHOST
argument_list|,
name|zkClientPort
argument_list|)
expr_stmt|;
name|startMaster
argument_list|()
expr_stmt|;
name|ZKUtil
operator|.
name|waitForBaseZNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numRegionServers
condition|;
name|idx
operator|++
control|)
block|{
name|startRegionServer
argument_list|(
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for HBase startup by scanning META"
argument_list|)
expr_stmt|;
name|int
name|attemptsLeft
init|=
literal|10
decl_stmt|;
while|while
condition|(
name|attemptsLeft
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for HBase to startup. Retries left: "
operator|+
name|attemptsLeft
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Process-based HBase Cluster with "
operator|+
name|numRegionServers
operator|+
literal|" region servers up and running... \n\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startRegionServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|startServer
argument_list|(
literal|"regionserver"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startMaster
parameter_list|()
block|{
name|startServer
argument_list|(
literal|"master"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|killRegionServer
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|killServer
argument_list|(
literal|"regionserver"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|killMaster
parameter_list|()
throws|throws
name|IOException
block|{
name|killServer
argument_list|(
literal|"master"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startZK
parameter_list|()
block|{
name|startServer
argument_list|(
literal|"zookeeper"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|ensureShutdownHookInstalled
argument_list|()
expr_stmt|;
name|executeCommand
argument_list|(
name|command
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeCommand
parameter_list|(
name|String
name|command
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envOverrides
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Command : "
operator|+
name|command
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|envp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|envOverrides
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|envOverrides
argument_list|)
expr_stmt|;
name|envp
operator|=
operator|new
name|String
index|[
name|map
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|envp
index|[
name|idx
operator|++
index|]
operator|=
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|command
argument_list|,
name|envp
argument_list|)
decl_stmt|;
name|BufferedReader
name|stdInput
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|stdError
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// read the output from the command
name|String
name|s
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|s
operator|=
name|stdInput
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|// read any errors from the attempted command
while|while
condition|(
operator|(
name|s
operator|=
name|stdError
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error running: "
operator|+
name|command
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|shutdownAllProcesses
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing daemons using pid files"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|pidFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|daemonPidFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pidFile
range|:
name|pidFiles
control|)
block|{
name|int
name|pid
init|=
literal|0
decl_stmt|;
try|try
block|{
name|pid
operator|=
name|readPidFromFile
argument_list|(
name|pidFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not kill process with pid from "
operator|+
name|pidFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pid
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing pid "
operator|+
name|pid
operator|+
literal|" ("
operator|+
name|pidFile
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|killProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting a bit to let processes terminate"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|ensureShutdownHookInstalled
parameter_list|()
block|{
if|if
condition|(
name|shutdownHookInstalled
condition|)
block|{
return|return;
block|}
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|shutdownAllProcesses
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|shutdownHookInstalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|cleanupOldState
parameter_list|()
block|{
name|executeCommand
argument_list|(
literal|"rm -rf "
operator|+
name|workDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeStringToFile
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
try|try
block|{
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing to: "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|serverWorkingDir
parameter_list|(
name|String
name|serverName
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|String
name|dir
decl_stmt|;
if|if
condition|(
name|serverName
operator|.
name|equals
argument_list|(
literal|"regionserver"
argument_list|)
condition|)
block|{
name|dir
operator|=
name|workDir
operator|+
literal|"/"
operator|+
name|serverName
operator|+
literal|"-"
operator|+
name|port
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|workDir
operator|+
literal|"/"
operator|+
name|serverName
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
specifier|private
name|int
name|getServerPID
parameter_list|(
name|String
name|serverName
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|pidFile
init|=
name|pidFilePath
argument_list|(
name|serverName
argument_list|,
name|port
argument_list|)
decl_stmt|;
return|return
name|readPidFromFile
argument_list|(
name|pidFile
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|readPidFromFile
parameter_list|(
name|String
name|pidFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
operator|new
name|File
argument_list|(
name|pidFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|scanner
operator|.
name|nextInt
argument_list|()
return|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|pidFilePath
parameter_list|(
name|String
name|serverName
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|String
name|dir
init|=
name|serverWorkingDir
argument_list|(
name|serverName
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"USER"
argument_list|)
decl_stmt|;
name|String
name|pidFile
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/hbase-%s-%s.pid"
argument_list|,
name|dir
argument_list|,
name|user
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
return|return
name|pidFile
return|;
block|}
specifier|private
name|void
name|killServer
parameter_list|(
name|String
name|serverName
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|pid
init|=
name|getServerPID
argument_list|(
name|serverName
argument_list|,
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|pid
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing "
operator|+
name|serverName
operator|+
literal|"; pid="
operator|+
name|pid
argument_list|)
expr_stmt|;
name|killProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|killProcess
parameter_list|(
name|int
name|pid
parameter_list|)
block|{
name|String
name|cmd
init|=
literal|"kill -s KILL "
operator|+
name|pid
decl_stmt|;
name|executeCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startServer
parameter_list|(
name|String
name|serverName
parameter_list|,
name|int
name|rsPort
parameter_list|)
block|{
name|String
name|conf
init|=
name|generateConfig
argument_list|(
name|rsPort
argument_list|)
decl_stmt|;
comment|// create working directory for this region server.
name|String
name|dir
init|=
name|serverWorkingDir
argument_list|(
name|serverName
argument_list|,
name|rsPort
argument_list|)
decl_stmt|;
name|executeCommand
argument_list|(
literal|"mkdir -p "
operator|+
name|dir
argument_list|)
expr_stmt|;
name|writeStringToFile
argument_list|(
name|conf
argument_list|,
name|dir
operator|+
literal|"/"
operator|+
literal|"hbase-site.xml"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|envOverrides
operator|.
name|put
argument_list|(
literal|"HBASE_LOG_DIR"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|envOverrides
operator|.
name|put
argument_list|(
literal|"HBASE_PID_DIR"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|hbaseHome
argument_list|,
literal|"conf/log4j.properties"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"log4j.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not install log4j.properties into "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
name|executeCommand
argument_list|(
name|hbaseDaemonScript
operator|+
literal|" --config "
operator|+
name|dir
operator|+
literal|" start "
operator|+
name|serverName
argument_list|,
name|envOverrides
argument_list|)
expr_stmt|;
name|daemonPidFiles
operator|.
name|add
argument_list|(
name|pidFilePath
argument_list|(
name|serverName
argument_list|,
name|rsPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|generateConfig
parameter_list|(
name|int
name|rsPort
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|confMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|CLUSTER_DISTRIBUTED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsPort
operator|>
literal|0
condition|)
block|{
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_PORT
argument_list|,
name|rsPort
argument_list|)
expr_stmt|;
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_INFO_PORT_AUTO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|zkClientPort
argument_list|)
expr_stmt|;
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|MASTER_PORT
argument_list|,
name|masterPort
argument_list|)
expr_stmt|;
name|confMap
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
name|MAX_FILE_SIZE_OVERRIDE
argument_list|)
expr_stmt|;
name|confMap
operator|.
name|put
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|RawLocalFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<configuration>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|confMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<property>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<name>"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"</name>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<value>"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"</value>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</property>\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</configuration>\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

