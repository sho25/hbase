begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRegionSplitCalculator
block|{
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRegionSplitCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * This is range uses a user specified start and end keys. It also has an    * extra time based tiebreaker so that different ranges with the same    * start/end key pair count as different regions.    */
specifier|static
class|class
name|SimpleRange
implements|implements
name|KeyRange
block|{
name|byte
index|[]
name|start
decl_stmt|,
name|end
decl_stmt|;
name|long
name|tiebreaker
decl_stmt|;
name|SimpleRange
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|end
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|tiebreaker
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getStartKey
parameter_list|()
block|{
return|return
name|start
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEndKey
parameter_list|()
block|{
return|return
name|end
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|start
argument_list|)
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|end
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
name|Comparator
argument_list|<
name|SimpleRange
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SimpleRange
name|sr1
parameter_list|,
name|SimpleRange
name|sr2
parameter_list|)
block|{
name|ComparisonChain
name|cc
init|=
name|ComparisonChain
operator|.
name|start
argument_list|()
decl_stmt|;
name|cc
operator|=
name|cc
operator|.
name|compare
argument_list|(
name|sr1
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|sr2
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|cc
operator|=
name|cc
operator|.
name|compare
argument_list|(
name|sr1
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|sr2
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|RegionSplitCalculator
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|cc
operator|=
name|cc
operator|.
name|compare
argument_list|(
name|sr1
operator|.
name|tiebreaker
argument_list|,
name|sr2
operator|.
name|tiebreaker
argument_list|)
expr_stmt|;
return|return
name|cc
operator|.
name|result
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Check the "depth" (number of regions included at a split) of a generated    * split calculation    */
name|void
name|checkDepths
parameter_list|(
name|SortedSet
argument_list|<
name|byte
index|[]
argument_list|>
name|splits
parameter_list|,
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
parameter_list|,
name|Integer
modifier|...
name|depths
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|splits
operator|.
name|size
argument_list|()
argument_list|,
name|depths
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|k
range|:
name|splits
control|)
block|{
name|Collection
argument_list|<
name|SimpleRange
argument_list|>
name|rs
init|=
name|regions
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|int
name|sz
init|=
name|rs
operator|==
literal|null
condition|?
literal|0
else|:
name|rs
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|depths
index|[
name|i
index|]
argument_list|,
name|sz
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * This dumps data in a visually reasonable way for visual debugging. It has    * the basic iteration structure.    */
name|String
name|dump
parameter_list|(
name|SortedSet
argument_list|<
name|byte
index|[]
argument_list|>
name|splits
parameter_list|,
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
parameter_list|)
block|{
comment|// we display this way because the last end key should be displayed as well.
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|k
range|:
name|splits
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|k
argument_list|)
operator|+
literal|":\t"
argument_list|)
expr_stmt|;
for|for
control|(
name|SimpleRange
name|r
range|:
name|regions
operator|.
name|get
argument_list|(
name|k
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|r
operator|.
name|toString
argument_list|()
operator|+
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\n"
operator|+
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculator
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|b
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|c
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Standard"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, B]\t\n"
operator|+
literal|"B:\t[B, C]\t\n"
operator|+
literal|"C:\t[C, D]\t\n"
operator|+
literal|"D:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorNoEdge
parameter_list|()
block|{
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Empty"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorSingleEdge
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Single edge"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, B]\t\n"
operator|+
literal|"B:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorDegenerateEdge
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Single empty edge"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, A]\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorCoverSplit
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|b
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|c
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AC covers AB, BC"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, B]\t[A, C]\t\n"
operator|+
literal|"B:\t[A, C]\t[B, C]\t\n"
operator|+
literal|"C:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorOverEndpoint
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|b
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|c
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AB, BD covers BC"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, B]\t\n"
operator|+
literal|"B:\t[B, C]\t[B, D]\t\n"
operator|+
literal|"C:\t[B, D]\t\n"
operator|+
literal|"D:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorHoles
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|b
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|c
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"E"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"F"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Hole between C and E"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, B]\t\n"
operator|+
literal|"B:\t[B, C]\t\n"
operator|+
literal|"C:\t\n"
operator|+
literal|"E:\t[E, F]\t\n"
operator|+
literal|"F:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorOverreach
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|b
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AC and BD overlap but share no start/end keys"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, C]\t\n"
operator|+
literal|"B:\t[A, C]\t[B, D]\t\n"
operator|+
literal|"C:\t[B, D]\t\n"
operator|+
literal|"D:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorFloor
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|b
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AC and AB overlap in the beginning"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, B]\t[A, C]\t\n"
operator|+
literal|"B:\t[A, C]\t\n"
operator|+
literal|"C:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorCeil
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|b
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AC and BC overlap in the end"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, C]\t\n"
operator|+
literal|"B:\t[A, C]\t[B, C]\t\n"
operator|+
literal|"C:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorEq
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|b
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AC and AC overlap completely"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, C]\t[A, C]\t\n"
operator|+
literal|"C:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitCalculatorBackwards
parameter_list|()
block|{
name|SimpleRange
name|a
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CA is backwards"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
expr_stmt|;
comment|// expect nothing
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplex
parameter_list|()
block|{
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Am"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Am"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"E"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"F"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"G"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"E"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"H"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"I"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Something fairly complex"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|"A:\t[A, Am]\t[A, B]\t[A, C]\t\n"
operator|+
literal|"Am:\t[A, B]\t[A, C]\t[Am, C]\t\n"
operator|+
literal|"B:\t[A, C]\t[Am, C]\t[B, E]\t\n"
operator|+
literal|"C:\t[B, E]\t\n"
operator|+
literal|"D:\t[B, E]\t[D, E]\t\n"
operator|+
literal|"E:\t\n"
operator|+
literal|"F:\t[F, G]\t\n"
operator|+
literal|"G:\t\n"
operator|+
literal|"H:\t[H, I]\t\n"
operator|+
literal|"I:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBeginEndMarker
parameter_list|()
block|{
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
name|sc
init|=
operator|new
name|RegionSplitCalculator
argument_list|<
name|SimpleRange
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|byte
index|[]
argument_list|,
name|SimpleRange
argument_list|>
name|regions
init|=
name|sc
operator|.
name|calcCoverage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Special cases -- empty"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|dump
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|)
decl_stmt|;
name|checkDepths
argument_list|(
name|sc
operator|.
name|getSplits
argument_list|()
argument_list|,
name|regions
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|":\t[, A]\t\n"
operator|+
literal|"A:\t[A, B]\t\n"
operator|+
literal|"B:\t[B, ]\t\n"
operator|+
literal|"null:\t\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigRanges
parameter_list|()
block|{
name|SimpleRange
name|ai
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"I"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|ae
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"E"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleRange
name|ac
init|=
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|SimpleRange
argument_list|>
name|bigOverlap
init|=
operator|new
name|ArrayList
argument_list|<
name|SimpleRange
argument_list|>
argument_list|()
decl_stmt|;
name|bigOverlap
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"E"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bigOverlap
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bigOverlap
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bigOverlap
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bigOverlap
operator|.
name|add
argument_list|(
operator|new
name|SimpleRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"E"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"H"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bigOverlap
operator|.
name|add
argument_list|(
name|ai
argument_list|)
expr_stmt|;
name|bigOverlap
operator|.
name|add
argument_list|(
name|ae
argument_list|)
expr_stmt|;
name|bigOverlap
operator|.
name|add
argument_list|(
name|ac
argument_list|)
expr_stmt|;
comment|// Expect 1 range to be returned: ai
name|List
argument_list|<
name|SimpleRange
argument_list|>
name|bigRanges
init|=
name|RegionSplitCalculator
operator|.
name|findBigRanges
argument_list|(
name|bigOverlap
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bigRanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ai
argument_list|,
name|bigRanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expect 3 ranges to be returned: ai, ae and ac
name|bigRanges
operator|=
name|RegionSplitCalculator
operator|.
name|findBigRanges
argument_list|(
name|bigOverlap
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bigRanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ai
argument_list|,
name|bigRanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleRange
name|r1
init|=
name|bigRanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SimpleRange
name|r2
init|=
name|bigRanges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|r1
operator|.
name|start
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|r2
operator|.
name|start
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|String
name|r1e
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|r1
operator|.
name|end
argument_list|)
decl_stmt|;
name|String
name|r2e
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|r2
operator|.
name|end
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|r1e
operator|.
name|equals
argument_list|(
literal|"C"
argument_list|)
operator|&&
name|r2e
operator|.
name|equals
argument_list|(
literal|"E"
argument_list|)
operator|)
operator|||
operator|(
name|r1e
operator|.
name|equals
argument_list|(
literal|"E"
argument_list|)
operator|&&
name|r2e
operator|.
name|equals
argument_list|(
literal|"C"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

