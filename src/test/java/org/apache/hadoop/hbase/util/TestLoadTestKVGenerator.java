begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestLoadTestKVGenerator
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MIN_LEN
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LEN
init|=
literal|20
decl_stmt|;
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|28937293L
argument_list|)
decl_stmt|;
specifier|private
name|LoadTestKVGenerator
name|gen
init|=
operator|new
name|LoadTestKVGenerator
argument_list|(
name|MIN_LEN
argument_list|,
name|MAX_LEN
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testValueLength
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|v
init|=
name|gen
operator|.
name|generateRandomSizeValue
argument_list|(
name|i
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|MIN_LEN
operator|<=
name|v
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v
operator|.
name|length
operator|<=
name|MAX_LEN
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerification
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|qualIndex
init|=
literal|0
init|;
name|qualIndex
operator|<
literal|20
condition|;
operator|++
name|qualIndex
control|)
block|{
name|String
name|qual
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|qualIndex
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|gen
operator|.
name|generateRandomSizeValue
argument_list|(
name|i
argument_list|,
name|qual
argument_list|)
decl_stmt|;
name|String
name|rowKey
init|=
name|LoadTestKVGenerator
operator|.
name|md5PrefixedKey
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|LoadTestKVGenerator
operator|.
name|verify
argument_list|(
name|rowKey
argument_list|,
name|qual
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|v
index|[
literal|0
index|]
operator|++
expr_stmt|;
name|assertFalse
argument_list|(
name|LoadTestKVGenerator
operator|.
name|verify
argument_list|(
name|rowKey
argument_list|,
name|qual
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorrectAndUniqueKeys
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|String
name|k
init|=
name|LoadTestKVGenerator
operator|.
name|md5PrefixedKey
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|k
operator|.
name|endsWith
argument_list|(
literal|":"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

