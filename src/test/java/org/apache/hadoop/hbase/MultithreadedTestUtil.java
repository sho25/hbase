begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|MultithreadedTestUtil
block|{
specifier|public
specifier|static
class|class
name|TestContext
block|{
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Throwable
name|err
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|threadDoneCount
init|=
literal|0
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|TestThread
argument_list|>
name|testThreads
init|=
operator|new
name|HashSet
argument_list|<
name|TestThread
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TestContext
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
block|}
specifier|protected
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|shouldRun
parameter_list|()
block|{
return|return
operator|!
name|stopped
operator|&&
name|err
operator|==
literal|null
return|;
block|}
specifier|public
name|void
name|addThread
parameter_list|(
name|TestThread
name|t
parameter_list|)
block|{
name|testThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startThreads
parameter_list|()
block|{
for|for
control|(
name|TestThread
name|t
range|:
name|testThreads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|waitFor
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|millis
decl_stmt|;
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
name|long
name|left
init|=
name|endTime
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|<=
literal|0
condition|)
break|break;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|checkException
argument_list|()
expr_stmt|;
name|wait
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|checkException
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Deferred"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|threadFailed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|err
operator|==
literal|null
condition|)
name|err
operator|=
name|t
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|threadDone
parameter_list|()
block|{
name|threadDoneCount
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|TestThread
name|t
range|:
name|testThreads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|TestThread
extends|extends
name|Thread
block|{
specifier|final
name|TestContext
name|ctx
decl_stmt|;
specifier|protected
name|boolean
name|stopped
decl_stmt|;
specifier|public
name|TestThread
parameter_list|(
name|TestContext
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|ctx
operator|.
name|shouldRun
argument_list|()
operator|&&
operator|!
name|stopped
condition|)
block|{
name|doAnAction
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|ctx
operator|.
name|threadFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|threadDone
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|stopTestThread
parameter_list|()
block|{
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

