begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Jdk14Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
operator|.
name|HRegionInfo090x
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ReadWriteConsistencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_comment
comment|/**  * Facility for testing HBase. Replacement for  * old HBaseTestCase and HBaseCluserTestCase functionality.  * Create an instance and keep it around testing HBase.  This class is  * meant to be your one-stop shop for anything you might need testing.  Manages  * one cluster at a time only.  Depends on log4j being on classpath and  * hbase-site.xml for logging and test-run configuration.  It does not set  * logging levels nor make changes to configuration parameters.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseTestingUtility
block|{
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseTestingUtility
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|MiniZooKeeperCluster
name|zkCluster
init|=
literal|null
decl_stmt|;
comment|/**    * Set if we were passed a zkCluster.  If so, we won't shutdown zk as    * part of general shutdown.    */
specifier|private
name|boolean
name|passedZkCluster
init|=
literal|false
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|hbaseCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniMRCluster
name|mrCluster
init|=
literal|null
decl_stmt|;
comment|// If non-null, then already a cluster running.
specifier|private
name|File
name|clusterTestBuildDir
init|=
literal|null
decl_stmt|;
comment|/**    * System property key to get test directory value.    * Name is as it is because mini dfs has hard-codings to put test data here.    */
specifier|public
specifier|static
specifier|final
name|String
name|TEST_DIRECTORY_KEY
init|=
literal|"test.build.data"
decl_stmt|;
comment|/**    * Default parent directory for test output.    */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TEST_DIRECTORY
init|=
literal|"target/test-data"
decl_stmt|;
comment|/** Compression algorithms to use in parameterized JUnit 4 tests */
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|COMPRESSION_ALGORITHMS_PARAMETERIZED
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
block|}
block|,
block|{
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
block|}
block|}
argument_list|)
decl_stmt|;
comment|/** Compression algorithms to use in testing */
specifier|public
specifier|static
specifier|final
name|Compression
operator|.
name|Algorithm
index|[]
name|COMPRESSION_ALGORITHMS
init|=
operator|new
name|Compression
operator|.
name|Algorithm
index|[]
block|{
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
block|,
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
block|}
decl_stmt|;
specifier|public
name|HBaseTestingUtility
parameter_list|()
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HBaseTestingUtility
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|MiniHBaseCluster
name|getHbaseCluster
parameter_list|()
block|{
return|return
name|hbaseCluster
return|;
block|}
comment|/**    * Returns this classes's instance of {@link Configuration}.  Be careful how    * you use the returned Configuration since {@link HConnection} instances    * can be shared.  The Map of HConnections is keyed by the Configuration.  If    * say, a Connection was being used against a cluster that had been shutdown,    * see {@link #shutdownMiniCluster()}, then the Connection will no longer    * be wholesome.  Rather than use the return direct, its usually best to    * make a copy and use that.  Do    *<code>Configuration c = new Configuration(INSTANCE.getConfiguration());</code>    * @return Instance of Configuration.    */
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/**    * Makes sure the test directory is set up so that {@link #getTestDir()}    * returns a valid directory. Useful in unit tests that do not run a    * mini-cluster.    */
specifier|public
name|void
name|initTestDir
parameter_list|()
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|clusterTestBuildDir
operator|=
name|setupClusterTestBuildDir
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
name|clusterTestBuildDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return Where to write test data on local filesystem; usually    * {@link #DEFAULT_TEST_DIRECTORY}    * @see #setupClusterTestBuildDir()    * @see #clusterTestBuildDir()    * @see #getTestFileSystem()    */
specifier|public
specifier|static
name|Path
name|getTestDir
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
name|DEFAULT_TEST_DIRECTORY
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param subdirName    * @return Path to a subdirectory named<code>subdirName</code> under    * {@link #getTestDir()}.    * @see #setupClusterTestBuildDir()    * @see #clusterTestBuildDir(String)    * @see #getTestFileSystem()    */
specifier|public
specifier|static
name|Path
name|getTestDir
parameter_list|(
specifier|final
name|String
name|subdirName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
name|subdirName
argument_list|)
return|;
block|}
comment|/**    * Home our cluster in a dir under {@link #DEFAULT_TEST_DIRECTORY}.  Give it a    * random name    * so can have many concurrent clusters running if we need to.  Need to    * amend the {@link #TEST_DIRECTORY_KEY} System property.  Its what    * minidfscluster bases    * it data dir on.  Moding a System property is not the way to do concurrent    * instances -- another instance could grab the temporary    * value unintentionally -- but not anything can do about it at moment;    * single instance only is how the minidfscluster works.    * @return The calculated cluster test build directory.    */
specifier|public
name|File
name|setupClusterTestBuildDir
parameter_list|()
block|{
name|String
name|randomStr
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|dirStr
init|=
name|getTestDir
argument_list|(
name|randomStr
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|dirStr
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
comment|// Have it cleaned up on exit
name|dir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|dir
return|;
block|}
comment|/**    * @throws IOException If a cluster -- zk, dfs, or hbase -- already running.    */
name|void
name|isRunningCluster
parameter_list|(
name|String
name|passedBuildPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|clusterTestBuildDir
operator|==
literal|null
operator|||
name|passedBuildPath
operator|!=
literal|null
condition|)
return|return;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster already running at "
operator|+
name|this
operator|.
name|clusterTestBuildDir
argument_list|)
throw|;
block|}
comment|/**    * Start a minidfscluster.    * @param servers How many DNs to start.    * @throws Exception    * @see {@link #shutdownMiniDFSCluster()}    * @return The mini dfs cluster created.    */
specifier|public
name|MiniDFSCluster
name|startMiniDFSCluster
parameter_list|(
name|int
name|servers
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniDFSCluster
argument_list|(
name|servers
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Start a minidfscluster.    * Can only create one.    * @param dir Where to home your dfs cluster.    * @param servers How many DNs to start.    * @throws Exception    * @see {@link #shutdownMiniDFSCluster()}    * @return The mini dfs cluster created.    */
specifier|public
name|MiniDFSCluster
name|startMiniDFSCluster
parameter_list|(
name|int
name|servers
parameter_list|,
specifier|final
name|File
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
comment|// This does the following to home the minidfscluster
comment|//     base_dir = new File(System.getProperty("test.build.data", "build/test/data"), "dfs/");
comment|// Some tests also do this:
comment|//  System.getProperty("test.cache.data", "build/test/cache");
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|clusterTestBuildDir
operator|=
name|setupClusterTestBuildDir
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|clusterTestBuildDir
operator|=
name|dir
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
name|this
operator|.
name|clusterTestBuildDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.cache.data"
argument_list|,
name|this
operator|.
name|clusterTestBuildDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|servers
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Set this just-started cluser as our filesystem.
name|FileSystem
name|fs
init|=
name|this
operator|.
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do old style too just to be safe.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|dfsCluster
return|;
block|}
comment|/**    * Shuts down instance created by call to {@link #startMiniDFSCluster(int, File)}    * or does nothing.    * @throws Exception    */
specifier|public
name|void
name|shutdownMiniDFSCluster
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
comment|// The below throws an exception per dn, AsynchronousCloseException.
name|this
operator|.
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Call this if you only want a zk cluster.    * @see #startMiniZKCluster() if you want zk + dfs + hbase mini cluster.    * @throws Exception    * @see #shutdownMiniZKCluster()    * @return zk cluster started.    */
specifier|public
name|MiniZooKeeperCluster
name|startMiniZKCluster
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|startMiniZKCluster
argument_list|(
name|setupClusterTestBuildDir
argument_list|()
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * Call this if you only want a zk cluster.    * @param zooKeeperServerNum    * @see #startMiniZKCluster() if you want zk + dfs + hbase mini cluster.    * @throws Exception    * @see #shutdownMiniZKCluster()    * @return zk cluster started.    */
specifier|public
name|MiniZooKeeperCluster
name|startMiniZKCluster
parameter_list|(
name|int
name|zooKeeperServerNum
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniZKCluster
argument_list|(
name|setupClusterTestBuildDir
argument_list|()
argument_list|,
name|zooKeeperServerNum
argument_list|)
return|;
block|}
specifier|private
name|MiniZooKeeperCluster
name|startMiniZKCluster
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniZKCluster
argument_list|(
name|dir
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
name|MiniZooKeeperCluster
name|startMiniZKCluster
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|,
name|int
name|zooKeeperServerNum
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|passedZkCluster
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|zkCluster
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster already running at "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|this
operator|.
name|zkCluster
operator|=
operator|new
name|MiniZooKeeperCluster
argument_list|()
expr_stmt|;
name|int
name|clientPort
init|=
name|this
operator|.
name|zkCluster
operator|.
name|startup
argument_list|(
name|dir
argument_list|,
name|zooKeeperServerNum
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|clientPort
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|zkCluster
return|;
block|}
comment|/**    * Shuts down zk cluster created by call to {@link #startMiniZKCluster(File)}    * or does nothing.    * @throws IOException    * @see #startMiniZKCluster()    */
specifier|public
name|void
name|shutdownMiniZKCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|zkCluster
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|zkCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|zkCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Start up a minicluster of hbase, dfs, and zookeeper.    * @throws Exception    * @return Mini hbase cluster instance created.    * @see {@link #shutdownMiniDFSCluster()}    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * Start up a minicluster of hbase, optionally dfs, and zookeeper.    * Modifies Configuration.  Homes the cluster data directory under a random    * subdirectory in a directory under System property test.build.data.    * Directory is cleaned up on exit.    * @param numSlaves Number of slaves to start up.  We'll start this many    * datanodes and regionservers.  If numSlaves is> 1, then make sure    * hbase.regionserver.info.port is -1 (i.e. no ui per regionserver) otherwise    * bind errors.    * @throws Exception    * @see {@link #shutdownMiniCluster()}    * @return Mini hbase cluster instance created.    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|(
specifier|final
name|int
name|numSlaves
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
name|numSlaves
argument_list|)
return|;
block|}
comment|/**    * Start up a minicluster of hbase, optionally dfs, and zookeeper.    * Modifies Configuration.  Homes the cluster data directory under a random    * subdirectory in a directory under System property test.build.data.    * Directory is cleaned up on exit.    * @param numMasters Number of masters to start up.  We'll start this many    * hbase masters.  If numMasters> 1, you can find the active/primary master    * with {@link MiniHBaseCluster#getMaster()}.    * @param numSlaves Number of slaves to start up.  We'll start this many    * datanodes and regionservers.  If numSlaves is> 1, then make sure    * hbase.regionserver.info.port is -1 (i.e. no ui per regionserver) otherwise    * bind errors.    * @throws Exception    * @see {@link #shutdownMiniCluster()}    * @return Mini hbase cluster instance created.    */
specifier|public
name|MiniHBaseCluster
name|startMiniCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting up minicluster with "
operator|+
name|numMasters
operator|+
literal|" master(s) and "
operator|+
name|numSlaves
operator|+
literal|" regionserver(s) and datanode(s)"
argument_list|)
expr_stmt|;
comment|// If we already put up a cluster, fail.
name|String
name|testBuildPath
init|=
name|conf
operator|.
name|get
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|isRunningCluster
argument_list|(
name|testBuildPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|testBuildPath
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using passed path: "
operator|+
name|testBuildPath
argument_list|)
expr_stmt|;
block|}
comment|// Make a new random dir to home everything in.  Set it as system property.
comment|// minidfs reads home from system property.
name|this
operator|.
name|clusterTestBuildDir
operator|=
name|testBuildPath
operator|==
literal|null
condition|?
name|setupClusterTestBuildDir
argument_list|()
else|:
operator|new
name|File
argument_list|(
name|testBuildPath
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
name|this
operator|.
name|clusterTestBuildDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Bring up mini dfs cluster. This spews a bunch of warnings about missing
comment|// scheme. Complaints are 'Scheme is undefined for build/test/data/dfs/name1'.
name|startMiniDFSCluster
argument_list|(
name|numSlaves
argument_list|,
name|this
operator|.
name|clusterTestBuildDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|dfsCluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
comment|// Start up a zk cluster.
if|if
condition|(
name|this
operator|.
name|zkCluster
operator|==
literal|null
condition|)
block|{
name|startMiniZKCluster
argument_list|(
name|this
operator|.
name|clusterTestBuildDir
argument_list|)
expr_stmt|;
block|}
return|return
name|startMiniHBaseCluster
argument_list|(
name|numMasters
argument_list|,
name|numSlaves
argument_list|)
return|;
block|}
comment|/**    * Starts up mini hbase cluster.  Usually used after call to    * {@link #startMiniCluster(int, int)} when doing stepped startup of clusters.    * Usually you won't want this.  You'll usually want {@link #startMiniCluster()}.    * @param numMasters    * @param numSlaves    * @return Reference to the hbase mini hbase cluster.    * @throws IOException    * @throws InterruptedException    * @see {@link #startMiniCluster()}    */
specifier|public
name|MiniHBaseCluster
name|startMiniHBaseCluster
parameter_list|(
specifier|final
name|int
name|numMasters
parameter_list|,
specifier|final
name|int
name|numSlaves
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Now do the mini hbase cluster.  Set the hbase.rootdir in config.
name|createRootDir
argument_list|()
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|hbaseCluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|c
argument_list|,
name|numMasters
argument_list|,
name|numSlaves
argument_list|)
expr_stmt|;
comment|// Don't leave here till we've done a successful scan of the .META.
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Minicluster is up"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|hbaseCluster
return|;
block|}
comment|/**    * Starts the hbase cluster up again after shutting it down previously in a    * test.  Use this if you want to keep dfs/zk up and just stop/start hbase.    * @param servers number of region servers    * @throws IOException    */
specifier|public
name|void
name|restartHBaseCluster
parameter_list|(
name|int
name|servers
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|hbaseCluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// Don't leave here till we've done a successful scan of the .META.
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"HBase has been restarted"
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return Current mini hbase cluster. Only has something in it after a call    * to {@link #startMiniCluster()}.    * @see #startMiniCluster()    */
specifier|public
name|MiniHBaseCluster
name|getMiniHBaseCluster
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
return|;
block|}
comment|/**    * Stops mini hbase, zk, and hdfs clusters.    * @throws IOException    * @see {@link #startMiniCluster(int)}    */
specifier|public
name|void
name|shutdownMiniCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down minicluster"
argument_list|)
expr_stmt|;
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|passedZkCluster
condition|)
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
comment|// The below throws an exception per dn, AsynchronousCloseException.
name|this
operator|.
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Clean up our directory.
if|if
condition|(
name|this
operator|.
name|clusterTestBuildDir
operator|!=
literal|null
operator|&&
name|this
operator|.
name|clusterTestBuildDir
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Need to use deleteDirectory because File.delete required dir is empty.
if|if
condition|(
operator|!
name|FSUtils
operator|.
name|deleteDirectory
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|this
operator|.
name|clusterTestBuildDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed delete of "
operator|+
name|this
operator|.
name|clusterTestBuildDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|clusterTestBuildDir
operator|=
literal|null
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Minicluster is down"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shutdown HBase mini cluster.  Does not shutdown zk or dfs if running.    * @throws IOException    */
specifier|public
name|void
name|shutdownMiniHBaseCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|hbaseCluster
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|hbaseCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Wait till hbase is down before going on to shutdown zk.
name|this
operator|.
name|hbaseCluster
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|hbaseCluster
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Creates an hbase rootdir in user home directory.  Also creates hbase    * version file.  Normally you won't make use of this method.  Root hbasedir    * is created for you as part of mini cluster startup.  You'd only use this    * method if you were doing manual operation.    * @return Fully qualified path to hbase root dir    * @throws IOException    */
specifier|public
name|Path
name|createRootDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|Path
name|hbaseRootdir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|hbaseRootdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|hbaseRootdir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setVersion
argument_list|(
name|fs
argument_list|,
name|hbaseRootdir
argument_list|)
expr_stmt|;
return|return
name|hbaseRootdir
return|;
block|}
comment|/**    * Flushes all caches in the mini hbase cluster    * @throws IOException    */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|hbaseCluster
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
comment|/**    * Flushes all caches in the mini hbase cluster    * @throws IOException    */
specifier|public
name|void
name|flush
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|hbaseCluster
operator|.
name|flushcache
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
name|families
argument_list|,
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param c Configuration to use    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param c Configuration to use    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|,
name|numVersions
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOMFILTER
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_REPLICATION_SCOPE
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param family    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|,
name|numVersions
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOMFILTER
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_REPLICATION_SCOPE
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create a table.    * @param tableName    * @param families    * @param numVersions    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
index|[]
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|,
name|numVersions
index|[
name|i
index|]
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOOMFILTER
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_REPLICATION_SCOPE
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Drop an existing table    * @param tableName existing table    */
specifier|public
name|void
name|deleteTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Provide an existing table name to truncate    * @param tableName existing table    * @return HTable to that new table    * @throws IOException    */
specifier|public
name|HTable
name|truncateTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|resScan
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|resScan
control|)
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
name|resScan
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
comment|/**    * Load table with rows from 'aaa' to 'zzz'.    * @param t Table    * @param f Family    * @return Count of rows loaded.    * @throws IOException    */
specifier|public
name|int
name|loadTable
parameter_list|(
specifier|final
name|HTable
name|t
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|t
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|k
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
name|b1
init|=
literal|'a'
init|;
name|b1
operator|<=
literal|'z'
condition|;
name|b1
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b2
init|=
literal|'a'
init|;
name|b2
operator|<=
literal|'z'
condition|;
name|b2
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b3
init|=
literal|'a'
init|;
name|b3
operator|<=
literal|'z'
condition|;
name|b3
operator|++
control|)
block|{
name|k
index|[
literal|0
index|]
operator|=
name|b1
expr_stmt|;
name|k
index|[
literal|1
index|]
operator|=
name|b2
expr_stmt|;
name|k
index|[
literal|2
index|]
operator|=
name|b3
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
block|}
block|}
name|t
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
return|return
name|rowCount
return|;
block|}
comment|/**    * Load region with rows from 'aaa' to 'zzz'.    * @param r Region    * @param f Family    * @return Count of rows loaded.    * @throws IOException    */
specifier|public
name|int
name|loadRegion
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|k
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
name|b1
init|=
literal|'a'
init|;
name|b1
operator|<=
literal|'z'
condition|;
name|b1
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b2
init|=
literal|'a'
init|;
name|b2
operator|<=
literal|'z'
condition|;
name|b2
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b3
init|=
literal|'a'
init|;
name|b3
operator|<=
literal|'z'
condition|;
name|b3
operator|++
control|)
block|{
name|k
index|[
literal|0
index|]
operator|=
name|b1
expr_stmt|;
name|k
index|[
literal|1
index|]
operator|=
name|b2
expr_stmt|;
name|k
index|[
literal|2
index|]
operator|=
name|b3
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|k
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getLog
argument_list|()
operator|==
literal|null
condition|)
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|rowCount
return|;
block|}
comment|/**    * Return the number of rows in the given table.    */
specifier|public
name|int
name|countRows
parameter_list|(
specifier|final
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|res
range|:
name|results
control|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/**    * Return an md5 digest of the entire contents of a table.    */
specifier|public
name|String
name|checksumRows
parameter_list|(
specifier|final
name|HTable
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
name|digest
operator|.
name|update
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|digest
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Creates many regions names "aaa" to "zzz".    *    * @param table  The table to use for the data.    * @param columnFamily  The family to insert the data into.    * @return count of regions created.    * @throws IOException When creating the regions fails.    */
specifier|public
name|int
name|createMultiRegions
parameter_list|(
name|HTable
name|table
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createMultiRegions
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|,
name|columnFamily
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|KEYS
init|=
block|{
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ggg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hhh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iii"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jjj"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"kkk"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"lll"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nnn"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ooo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ppp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qqq"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rrr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sss"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ttt"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"uuu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vvv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"www"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xxx"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
block|}
decl_stmt|;
comment|/**    * Creates many regions names "aaa" to "zzz".    * @param c Configuration to use.    * @param table  The table to use for the data.    * @param columnFamily  The family to insert the data into.    * @return count of regions created.    * @throws IOException When creating the regions fails.    */
specifier|public
name|int
name|createMultiRegions
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createMultiRegions
argument_list|(
name|c
argument_list|,
name|table
argument_list|,
name|columnFamily
argument_list|,
name|KEYS
argument_list|)
return|;
block|}
comment|/**    * Creates the specified number of regions in the specified table.    * @param c    * @param table    * @param columnFamily    * @param startKeys    * @return    * @throws IOException    */
specifier|public
name|int
name|createMultiRegions
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Must create at least 3 regions"
argument_list|)
throw|;
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzzzz"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|regionStartKeys
init|=
operator|new
name|byte
index|[
name|splitKeys
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regionStartKeys
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|splitKeys
index|[
name|i
index|]
expr_stmt|;
block|}
name|regionStartKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
return|return
name|createMultiRegions
argument_list|(
name|c
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|regionStartKeys
argument_list|)
return|;
block|}
specifier|public
name|int
name|createMultiRegions
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|,
name|byte
index|[]
index|[]
name|startKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|startKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|htd
operator|.
name|hasFamily
argument_list|(
name|columnFamily
argument_list|)
condition|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|columnFamily
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
comment|// remove empty region - this is tricky as the mini cluster during the test
comment|// setup already has the "<tablename>,,123456789" row with an empty start
comment|// and end key. Adding the custom regions below adds those blindly,
comment|// including the new start region from empty to "bbb". lg
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
init|=
name|getMetaTableRows
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|startKeys
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// add custom ones
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|startKeys
operator|.
name|length
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|,
name|startKeys
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createMultiRegions: inserted "
operator|+
name|hri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|// see comment above, remove "old" (or previous) single region
for|for
control|(
name|byte
index|[]
name|row
range|:
name|rows
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"createMultiRegions: deleting meta row -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// flush cache of regions
name|HConnection
name|conn
init|=
name|table
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
comment|// assign all the new regions IF table is enabled.
if|if
condition|(
name|getHBaseAdmin
argument_list|()
operator|.
name|isTableEnabled
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|newRegions
control|)
block|{
name|hbaseCluster
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|createMultiRegionsWithLegacyHRI
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Must create at least 3 regions"
argument_list|)
throw|;
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzzzz"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|regionStartKeys
init|=
operator|new
name|byte
index|[
name|splitKeys
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regionStartKeys
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|splitKeys
index|[
name|i
index|]
expr_stmt|;
block|}
name|regionStartKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
return|return
name|createMultiRegionsWithLegacyHRI
argument_list|(
name|c
argument_list|,
name|htd
argument_list|,
name|family
argument_list|,
name|regionStartKeys
argument_list|)
return|;
block|}
specifier|public
name|int
name|createMultiRegionsWithLegacyHRI
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|,
name|byte
index|[]
index|[]
name|startKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|startKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|htd
operator|.
name|hasFamily
argument_list|(
name|columnFamily
argument_list|)
condition|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|columnFamily
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo090x
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo090x
argument_list|>
argument_list|(
name|startKeys
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|startKeys
operator|.
name|length
decl_stmt|;
name|HRegionInfo090x
name|hri
init|=
operator|new
name|HRegionInfo090x
argument_list|(
name|htd
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|,
name|startKeys
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createMultiRegions: PUT inserted "
operator|+
name|hri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|public
name|int
name|createMultiRegionsWithNewHRI
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Must create at least 3 regions"
argument_list|)
throw|;
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzzzz"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|regionStartKeys
init|=
operator|new
name|byte
index|[
name|splitKeys
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regionStartKeys
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|splitKeys
index|[
name|i
index|]
expr_stmt|;
block|}
name|regionStartKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
return|return
name|createMultiRegionsWithNewHRI
argument_list|(
name|c
argument_list|,
name|htd
argument_list|,
name|family
argument_list|,
name|regionStartKeys
argument_list|)
return|;
block|}
specifier|public
name|int
name|createMultiRegionsWithNewHRI
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|,
name|byte
index|[]
index|[]
name|startKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|startKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|htd
operator|.
name|hasFamily
argument_list|(
name|columnFamily
argument_list|)
condition|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|columnFamily
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|startKeys
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|startKeys
operator|.
name|length
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|,
name|startKeys
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createMultiRegions: PUT inserted "
operator|+
name|hri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Create rows in META for regions of the specified table with the specified    * start keys.  The first startKey should be a 0 length byte array if you    * want to form a proper range of regions.    * @param conf    * @param htd    * @param startKeys    * @return list of region info for regions added to meta    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|createMultiRegionsInMeta
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
index|[]
name|startKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|startKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|startKeys
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// add custom ones
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|startKeys
operator|.
name|length
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|,
name|startKeys
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createMultiRegionsInMeta: inserted "
operator|+
name|hri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|newRegions
return|;
block|}
comment|/**    * Returns all rows from the .META. table.    *    * @throws IOException When reading the rows fails.    */
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getMetaTableRows
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: Redo using MetaReader class
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|s
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getMetaTableRows: row -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|rows
return|;
block|}
comment|/**    * Returns all rows from the .META. table for a given user table    *    * @throws IOException When reading the rows fails.    */
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getMetaTableRows
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Redo using MetaReader.
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|s
control|)
block|{
name|HRegionInfo
name|info
init|=
name|Writables
operator|.
name|getHRegionInfo
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|info
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableName
argument_list|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getMetaTableRows: row -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|rows
return|;
block|}
comment|/**    * Tool to get the reference to the region server object that holds the    * region of the specified user table.    * It first searches for the meta rows that contain the region of the    * specified table, then gets the index of that RS, and finally retrieves    * the RS's reference.    * @param tableName user table to lookup in .META.    * @return region server that holds it, null if the row doesn't exist    * @throws IOException    */
specifier|public
name|HRegionServer
name|getRSForFirstRegionInTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|metaRows
init|=
name|getMetaTableRows
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaRows
operator|==
literal|null
operator|||
name|metaRows
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|hbaseCluster
operator|.
name|getServerWith
argument_list|(
name|metaRows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|hbaseCluster
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getRegionServer
argument_list|()
return|;
block|}
comment|/**    * Starts a<code>MiniMRCluster</code> with a default number of    *<code>TaskTracker</code>'s.    *    * @throws IOException When starting the cluster fails.    */
specifier|public
name|void
name|startMiniMapReduceCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|startMiniMapReduceCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts a<code>MiniMRCluster</code>.    *    * @param servers  The number of<code>TaskTracker</code>'s to start.    * @throws IOException When starting the cluster fails.    */
specifier|public
name|void
name|startMiniMapReduceCluster
parameter_list|(
specifier|final
name|int
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting mini mapreduce cluster..."
argument_list|)
expr_stmt|;
comment|// These are needed for the new and improved Map/Reduce framework
name|Configuration
name|c
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
name|c
operator|.
name|get
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|"mapred.output.dir"
argument_list|,
name|c
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|)
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|servers
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mini mapreduce cluster started"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
name|mrCluster
operator|.
name|createJobConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapred.job.tracker"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stops the previously started<code>MiniMRCluster</code>.    */
specifier|public
name|void
name|shutdownMiniMapReduceCluster
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping mini mapreduce cluster..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Restore configuration to point to local jobtracker
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mini mapreduce cluster stopped"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Switches the logger for the given class to DEBUG level.    *    * @param clazz  The class for which to switch to debug logging.    */
specifier|public
name|void
name|enableDebug
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|Log
name|l
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|instanceof
name|Log4JLogger
condition|)
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|l
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|l
operator|instanceof
name|Jdk14Logger
condition|)
block|{
operator|(
operator|(
name|Jdk14Logger
operator|)
name|l
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Expire the Master's session    * @throws Exception    */
specifier|public
name|void
name|expireMasterSession
parameter_list|()
throws|throws
name|Exception
block|{
name|HMaster
name|master
init|=
name|hbaseCluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|expireSession
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|master
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expire a region server's session    * @param index which RS    * @throws Exception    */
specifier|public
name|void
name|expireRegionServerSession
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|HRegionServer
name|rs
init|=
name|hbaseCluster
operator|.
name|getRegionServer
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|expireSession
argument_list|(
name|rs
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|expireSession
parameter_list|(
name|ZooKeeperWatcher
name|nodeZK
parameter_list|,
name|Server
name|server
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|String
name|quorumServers
init|=
name|ZKConfig
operator|.
name|getZKQuorumServersString
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|int
name|sessionTimeout
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
comment|// 5 seconds
name|ZooKeeper
name|zk
init|=
name|nodeZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|byte
index|[]
name|password
init|=
name|zk
operator|.
name|getSessionPasswd
argument_list|()
decl_stmt|;
name|long
name|sessionID
init|=
name|zk
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|ZooKeeper
name|newZK
init|=
operator|new
name|ZooKeeper
argument_list|(
name|quorumServers
argument_list|,
name|sessionTimeout
argument_list|,
name|EmptyWatcher
operator|.
name|instance
argument_list|,
name|sessionID
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|newZK
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|long
name|sleep
init|=
name|sessionTimeout
operator|*
literal|5L
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ZK Closed Session 0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|sessionID
argument_list|)
operator|+
literal|"; sleeping="
operator|+
name|sleep
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the HBase cluster.    *    * @return hbase cluster    */
specifier|public
name|MiniHBaseCluster
name|getHBaseCluster
parameter_list|()
block|{
return|return
name|hbaseCluster
return|;
block|}
comment|/**    * Returns a HBaseAdmin instance.    *    * @return The HBaseAdmin instance.    * @throws IOException    */
specifier|public
name|HBaseAdmin
name|getHBaseAdmin
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|HBaseAdmin
argument_list|(
operator|new
name|Configuration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Closes the named region.    *    * @param regionName  The region to close.    * @throws IOException    */
specifier|public
name|void
name|closeRegion
parameter_list|(
name|String
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|closeRegion
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes the named region.    *    * @param regionName  The region to close.    * @throws IOException    */
specifier|public
name|void
name|closeRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|closeRegion
argument_list|(
name|regionName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes the region containing the given row.    *    * @param row  The row to find the containing region.    * @param table  The table to find the region.    * @throws IOException    */
specifier|public
name|void
name|closeRegionByRow
parameter_list|(
name|String
name|row
parameter_list|,
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|closeRegionByRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes the region containing the given row.    *    * @param row  The row to find the containing region.    * @param table  The table to find the region.    * @throws IOException    */
specifier|public
name|void
name|closeRegionByRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionLocation
name|hrl
init|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|closeRegion
argument_list|(
name|hrl
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MiniZooKeeperCluster
name|getZkCluster
parameter_list|()
block|{
return|return
name|zkCluster
return|;
block|}
specifier|public
name|void
name|setZkCluster
parameter_list|(
name|MiniZooKeeperCluster
name|zkCluster
parameter_list|)
block|{
name|this
operator|.
name|passedZkCluster
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|zkCluster
operator|=
name|zkCluster
expr_stmt|;
block|}
specifier|public
name|MiniDFSCluster
name|getDFSCluster
parameter_list|()
block|{
return|return
name|dfsCluster
return|;
block|}
specifier|public
name|FileSystem
name|getTestFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * @return True if we removed the test dir    * @throws IOException    */
specifier|public
name|boolean
name|cleanupTestDir
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|deleteDir
argument_list|(
name|getTestDir
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param subdir Test subdir name.    * @return True if we removed the test dir    * @throws IOException    */
specifier|public
name|boolean
name|cleanupTestDir
parameter_list|(
specifier|final
name|String
name|subdir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|deleteDir
argument_list|(
name|getTestDir
argument_list|(
name|subdir
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param dir Directory to delete    * @return True if we deleted it.    * @throws IOException    */
specifier|public
name|boolean
name|deleteDir
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|getTestFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
name|fs
operator|.
name|delete
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|waitTableAvailable
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|long
name|startWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Timed out waiting for table "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|table
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startWait
operator|<
name|timeoutMillis
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Make sure that at least the specified number of region servers    * are running    * @param num minimum number of region servers that should be running    * @return True if we started some servers    * @throws IOException    */
specifier|public
name|boolean
name|ensureSomeRegionServersAvailable
parameter_list|(
specifier|final
name|int
name|num
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|num
condition|)
block|{
comment|// Need at least "num" servers.
name|LOG
operator|.
name|info
argument_list|(
literal|"Started new server="
operator|+
name|this
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * This method clones the passed<code>c</code> configuration setting a new    * user into the clone.  Use it getting new instances of FileSystem.  Only    * works for DistributedFileSystem.    * @param c Initial configuration    * @param differentiatingSuffix Suffix to differentiate this user from others.    * @return A new configuration instance with a different user set into it.    * @throws IOException    */
specifier|public
specifier|static
name|User
name|getDifferentUser
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|String
name|differentiatingSuffix
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|currentfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|currentfs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
return|return
name|User
operator|.
name|getCurrent
argument_list|()
return|;
block|}
comment|// Else distributed filesystem.  Make a new instance per daemon.  Below
comment|// code is taken from the AppendTestUtil over in hdfs.
name|String
name|username
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|differentiatingSuffix
decl_stmt|;
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|c
argument_list|,
name|username
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
decl_stmt|;
return|return
name|user
return|;
block|}
comment|/**    * Set soft and hard limits in namenode.    * You'll get a NPE if you call before you've started a minidfscluster.    * @param soft Soft limit    * @param hard Hard limit    * @throws NoSuchFieldException    * @throws SecurityException    * @throws IllegalAccessException    * @throws IllegalArgumentException    */
specifier|public
name|void
name|setNameNodeNameSystemLeasePeriod
parameter_list|(
specifier|final
name|int
name|soft
parameter_list|,
specifier|final
name|int
name|hard
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
comment|// TODO: If 0.20 hadoop do one thing, if 0.21 hadoop do another.
comment|// Not available in 0.20 hdfs.  Use reflection to make it happen.
comment|// private NameNode nameNode;
name|Field
name|field
init|=
name|this
operator|.
name|dfsCluster
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"nameNode"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
operator|(
name|NameNode
operator|)
name|field
operator|.
name|get
argument_list|(
name|this
operator|.
name|dfsCluster
argument_list|)
decl_stmt|;
name|field
operator|=
name|nn
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"namesystem"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSNamesystem
name|namesystem
init|=
operator|(
name|FSNamesystem
operator|)
name|field
operator|.
name|get
argument_list|(
name|nn
argument_list|)
decl_stmt|;
name|namesystem
operator|.
name|leaseManager
operator|.
name|setLeasePeriod
argument_list|(
literal|100
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set maxRecoveryErrorCount in DFSClient.  In 0.20 pre-append its hard-coded to 5 and    * makes tests linger.  Here is the exception you'll see:    *<pre>    * 2010-06-15 11:52:28,511 WARN  [DataStreamer for file /hbase/.logs/hlog.1276627923013 block blk_928005470262850423_1021] hdfs.DFSClient$DFSOutputStream(2657): Error Recovery for block blk_928005470262850423_1021 failed  because recovery from primary datanode 127.0.0.1:53683 failed 4 times.  Pipeline was 127.0.0.1:53687, 127.0.0.1:53683. Will retry...    *</pre>    * @param stream A DFSClient.DFSOutputStream.    * @param max    * @throws NoSuchFieldException    * @throws SecurityException    * @throws IllegalAccessException    * @throws IllegalArgumentException    */
specifier|public
specifier|static
name|void
name|setMaxRecoveryErrorCount
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|,
specifier|final
name|int
name|max
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|clazzes
init|=
name|DFSClient
operator|.
name|class
operator|.
name|getDeclaredClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|clazzes
control|)
block|{
name|String
name|className
init|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"DFSOutputStream"
argument_list|)
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|Field
name|maxRecoveryErrorCountField
init|=
name|stream
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"maxRecoveryErrorCount"
argument_list|)
decl_stmt|;
name|maxRecoveryErrorCountField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|maxRecoveryErrorCountField
operator|.
name|setInt
argument_list|(
name|stream
argument_list|,
name|max
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not set max recovery field"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait until<code>countOfRegion</code> in .META. have a non-empty    * info:server.  This means all regions have been deployed, master has been    * informed and updated .META. with the regions deployed server.    * @param conf Configuration    * @param countOfRegions How many regions in .META.    * @throws IOException    */
specifier|public
name|void
name|waitUntilAllRegionsAssigned
parameter_list|(
specifier|final
name|int
name|countOfRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
name|ResultScanner
name|s
init|=
name|meta
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|r
init|=
literal|null
init|;
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|byte
index|[]
name|b
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|rows
operator|++
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If I get to here and all rows have a Server, then all have been assigned.
if|if
condition|(
name|rows
operator|==
name|countOfRegions
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found="
operator|+
name|rows
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Do a small get/scan against one store. This is required because store    * has no actual methods of querying itself, and relies on StoreScanner.    */
specifier|public
specifier|static
name|List
argument_list|<
name|KeyValue
argument_list|>
name|getFromStoreFile
parameter_list|(
name|Store
name|store
parameter_list|,
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|ReadWriteConsistencyControl
operator|.
name|resetThreadReadPoint
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// verify that we are on the row we want:
name|KeyValue
name|kv
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Do a small get/scan against one store. This is required because store    * has no actual methods of querying itself, and relies on StoreScanner.    */
specifier|public
specifier|static
name|List
argument_list|<
name|KeyValue
argument_list|>
name|getFromStoreFile
parameter_list|(
name|Store
name|store
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|s
init|=
name|get
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
name|s
operator|.
name|put
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|columns
argument_list|)
expr_stmt|;
return|return
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
return|;
block|}
block|}
end_class

end_unit

