begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|MasterThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_comment
comment|/**  * This class creates a single process HBase cluster.  * each server.  The master uses the 'default' FileSystem.  The RegionServers,  * if we are running on DistributedFilesystem, create a FileSystem instance  * each and will close down their instance on the way out.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|MiniHBaseCluster
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniHBaseCluster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|LocalHBaseCluster
name|hbaseCluster
decl_stmt|;
specifier|private
specifier|static
name|int
name|index
decl_stmt|;
comment|/**    * Start a MiniHBaseCluster.    * @param conf Configuration to be used for cluster    * @param numRegionServers initial number of region servers to start.    * @throws IOException    */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numRegionServers
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
name|numRegionServers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start a MiniHBaseCluster.    * @param conf Configuration to be used for cluster    * @param numMasters initial number of masters to start.    * @param numRegionServers initial number of region servers to start.    * @throws IOException    */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numMasters
parameter_list|,
name|int
name|numRegionServers
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|MASTER_PORT
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|numMasters
argument_list|,
name|numRegionServers
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/**    * Subclass so can get at protected methods (none at moment).  Also, creates    * a FileSystem instance per instantiation.  Adds a shutdown own FileSystem    * on the way out. Shuts down own Filesystem only, not All filesystems as    * the FileSystem system exit hook does.    */
specifier|public
specifier|static
class|class
name|MiniHBaseClusterRegionServer
extends|extends
name|HRegionServer
block|{
specifier|private
name|Thread
name|shutdownThread
init|=
literal|null
decl_stmt|;
specifier|private
name|User
name|user
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|TEST_SKIP_CLOSE
init|=
literal|false
decl_stmt|;
specifier|public
name|MiniHBaseClusterRegionServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|User
operator|.
name|getCurrent
argument_list|()
expr_stmt|;
block|}
comment|/*      * @param c      * @param currentfs We return this if we did not make a new one.      * @param uniqueName Same name used to help identify the created fs.      * @return A new fs instance if we are up on DistributeFileSystem.      * @throws IOException      */
annotation|@
name|Override
specifier|protected
name|void
name|handleReportForDutyResponse
parameter_list|(
specifier|final
name|RegionServerStartupResponse
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|handleReportForDutyResponse
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Run this thread to shutdown our filesystem on way out.
name|this
operator|.
name|shutdownThread
operator|=
operator|new
name|SingleFileSystemShutdownThread
argument_list|(
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|runRegionServer
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in run"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Run this on the way out.
if|if
condition|(
name|this
operator|.
name|shutdownThread
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|shutdownThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Threads
operator|.
name|shutdown
argument_list|(
name|this
operator|.
name|shutdownThread
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runRegionServer
parameter_list|()
block|{
name|super
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|kill
parameter_list|()
block|{
name|super
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|String
name|reason
parameter_list|,
specifier|final
name|Throwable
name|cause
parameter_list|)
block|{
name|this
operator|.
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|abortRegionServer
argument_list|(
name|reason
argument_list|,
name|cause
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|abortRegionServer
parameter_list|(
name|String
name|reason
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
operator|.
name|abort
argument_list|(
name|reason
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Alternate shutdown hook.    * Just shuts down the passed fs, not all as default filesystem hook does.    */
specifier|static
class|class
name|SingleFileSystemShutdownThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
name|SingleFileSystemShutdownThread
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
literal|"Shutdown of "
operator|+
name|fs
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Hook closing fs="
operator|+
name|this
operator|.
name|fs
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Need to fix these: "
operator|+
name|npe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Running hook"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|init
parameter_list|(
specifier|final
name|int
name|nMasterNodes
parameter_list|,
specifier|final
name|int
name|nRegionNodes
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
comment|// start up a LocalHBaseCluster
name|hbaseCluster
operator|=
operator|new
name|LocalHBaseCluster
argument_list|(
name|conf
argument_list|,
name|nMasterNodes
argument_list|,
literal|0
argument_list|,
name|HMaster
operator|.
name|class
argument_list|,
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// manually add the regionservers as other users
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nRegionNodes
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|rsConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|HBaseTestingUtility
operator|.
name|getDifferentUser
argument_list|(
name|rsConf
argument_list|,
literal|".hfs."
operator|+
name|index
operator|++
argument_list|)
decl_stmt|;
name|hbaseCluster
operator|.
name|addRegionServer
argument_list|(
name|rsConf
argument_list|,
name|i
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|hbaseCluster
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting cluster"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Shutting down"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
comment|/**    * Starts a region server thread running    *    * @throws IOException    * @return New RegionServerThread    */
specifier|public
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|startRegionServer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|newConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|User
name|rsUser
init|=
name|HBaseTestingUtility
operator|.
name|getDifferentUser
argument_list|(
name|newConf
argument_list|,
literal|".hfs."
operator|+
name|index
operator|++
argument_list|)
decl_stmt|;
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|t
operator|=
name|hbaseCluster
operator|.
name|addRegionServer
argument_list|(
name|newConf
argument_list|,
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rsUser
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|waitForServerOnline
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted adding regionserver to cluster"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
return|return
name|t
return|;
block|}
comment|/**    * Cause a region server to exit doing basic clean up only on its way out.    * @param serverNumber  Used as index into a list.    */
specifier|public
name|String
name|abortRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
name|HRegionServer
name|server
init|=
name|getRegionServer
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting "
operator|+
name|server
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|abort
argument_list|(
literal|"Aborting for tests"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Trace info"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Shut down the specified region server cleanly    *    * @param serverNumber  Used as index into a list.    * @return the region server that was stopped    */
specifier|public
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|stopRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
return|return
name|stopRegionServer
argument_list|(
name|serverNumber
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Shut down the specified region server cleanly    *    * @param serverNumber  Used as index into a list.    * @param shutdownFS True is we are to shutdown the filesystem as part of this    * regionserver's shutdown.  Usually we do but you do not want to do this if    * you are running multiple regionservers in a test and you shut down one    * before end of the test.    * @return the region server that was stopped    */
specifier|public
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|stopRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|,
specifier|final
name|boolean
name|shutdownFS
parameter_list|)
block|{
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|server
init|=
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
operator|.
name|get
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|server
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|getRegionServer
argument_list|()
operator|.
name|stop
argument_list|(
literal|"Stopping rs "
operator|+
name|serverNumber
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
comment|/**    * Wait for the specified region server to stop. Removes this thread from list    * of running threads.    * @param serverNumber    * @return Name of region server that just went down.    */
specifier|public
name|String
name|waitOnRegionServer
parameter_list|(
specifier|final
name|int
name|serverNumber
parameter_list|)
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|waitOnRegionServer
argument_list|(
name|serverNumber
argument_list|)
return|;
block|}
comment|/**    * Starts a master thread running    *    * @throws IOException    * @return New RegionServerThread    */
specifier|public
name|JVMClusterUtil
operator|.
name|MasterThread
name|startMaster
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|c
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|HBaseTestingUtility
operator|.
name|getDifferentUser
argument_list|(
name|c
argument_list|,
literal|".hfs."
operator|+
name|index
operator|++
argument_list|)
decl_stmt|;
name|JVMClusterUtil
operator|.
name|MasterThread
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|t
operator|=
name|hbaseCluster
operator|.
name|addMaster
argument_list|(
name|c
argument_list|,
name|hbaseCluster
operator|.
name|getMasters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted adding master to cluster"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
return|return
name|t
return|;
block|}
comment|/**    * Returns the current active master, if available.    * @return the active HMaster, null if none is active.    */
specifier|public
name|HMaster
name|getMaster
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getActiveMaster
argument_list|()
return|;
block|}
comment|/**    * Returns the master at the specified index, if available.    * @return the active HMaster, null if none is active.    */
specifier|public
name|HMaster
name|getMaster
parameter_list|(
specifier|final
name|int
name|serverNumber
parameter_list|)
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getMaster
argument_list|(
name|serverNumber
argument_list|)
return|;
block|}
comment|/**    * Cause a master to exit without shutting down entire cluster.    * @param serverNumber  Used as index into a list.    */
specifier|public
name|String
name|abortMaster
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
name|HMaster
name|server
init|=
name|getMaster
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting "
operator|+
name|server
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|abort
argument_list|(
literal|"Aborting for tests"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Trace info"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Shut down the specified master cleanly    *    * @param serverNumber  Used as index into a list.    * @return the region server that was stopped    */
specifier|public
name|JVMClusterUtil
operator|.
name|MasterThread
name|stopMaster
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
return|return
name|stopMaster
argument_list|(
name|serverNumber
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Shut down the specified master cleanly    *    * @param serverNumber  Used as index into a list.    * @param shutdownFS True is we are to shutdown the filesystem as part of this    * master's shutdown.  Usually we do but you do not want to do this if    * you are running multiple master in a test and you shut down one    * before end of the test.    * @return the master that was stopped    */
specifier|public
name|JVMClusterUtil
operator|.
name|MasterThread
name|stopMaster
parameter_list|(
name|int
name|serverNumber
parameter_list|,
specifier|final
name|boolean
name|shutdownFS
parameter_list|)
block|{
name|JVMClusterUtil
operator|.
name|MasterThread
name|server
init|=
name|hbaseCluster
operator|.
name|getMasters
argument_list|()
operator|.
name|get
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|server
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|getMaster
argument_list|()
operator|.
name|stop
argument_list|(
literal|"Stopping master "
operator|+
name|serverNumber
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
comment|/**    * Wait for the specified master to stop. Removes this thread from list    * of running threads.    * @param serverNumber    * @return Name of master that just went down.    */
specifier|public
name|String
name|waitOnMaster
parameter_list|(
specifier|final
name|int
name|serverNumber
parameter_list|)
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|waitOnMaster
argument_list|(
name|serverNumber
argument_list|)
return|;
block|}
comment|/**    * Blocks until there is an active master and that master has completed    * initialization.    *    * @return true if an active master becomes available.  false if there are no    *         masters left.    * @throws InterruptedException    */
specifier|public
name|boolean
name|waitForActiveAndReadyMaster
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|MasterThread
argument_list|>
name|mts
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|mts
operator|=
name|getMasterThreads
argument_list|()
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|JVMClusterUtil
operator|.
name|MasterThread
name|mt
range|:
name|mts
control|)
block|{
if|if
condition|(
name|mt
operator|.
name|getMaster
argument_list|()
operator|.
name|isActiveMaster
argument_list|()
operator|&&
name|mt
operator|.
name|getMaster
argument_list|()
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @return List of master threads.    */
specifier|public
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|MasterThread
argument_list|>
name|getMasterThreads
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getMasters
argument_list|()
return|;
block|}
comment|/**    * @return List of live master threads (skips the aborted and the killed)    */
specifier|public
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|MasterThread
argument_list|>
name|getLiveMasterThreads
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getLiveMasters
argument_list|()
return|;
block|}
comment|/**    * Wait for Mini HBase Cluster to shut down.    */
specifier|public
name|void
name|join
parameter_list|()
block|{
name|this
operator|.
name|hbaseCluster
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shut down the mini HBase cluster    * @throws IOException    */
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|hbaseCluster
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|hbaseCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|HConnectionManager
operator|.
name|deleteAllConnections
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call flushCache on all regions on all participating regionservers.    * @throws IOException    */
specifier|public
name|void
name|flushcache
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|t
range|:
name|this
operator|.
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
control|)
block|{
for|for
control|(
name|HRegion
name|r
range|:
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
control|)
block|{
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Call flushCache on all regions of the specified table.    * @throws IOException    */
specifier|public
name|void
name|flushcache
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|t
range|:
name|this
operator|.
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
control|)
block|{
for|for
control|(
name|HRegion
name|r
range|:
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * @return List of region server threads.    */
specifier|public
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|getRegionServerThreads
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
return|;
block|}
comment|/**    * @return List of live region server threads (skips the aborted and the killed)    */
specifier|public
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|getLiveRegionServerThreads
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getLiveRegionServers
argument_list|()
return|;
block|}
comment|/**    * Grab a numbered region server of your choice.    * @param serverNumber    * @return region server    */
specifier|public
name|HRegionServer
name|getRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
return|return
name|hbaseCluster
operator|.
name|getRegionServer
argument_list|(
name|serverNumber
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|HRegion
argument_list|>
name|getRegions
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
block|{
name|List
argument_list|<
name|HRegion
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|hrs
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * @return Index into List of {@link MiniHBaseCluster#getRegionServerThreads()}    * of HRS carrying regionName. Returns -1 if none found.    */
specifier|public
name|int
name|getServerWithMeta
parameter_list|()
block|{
return|return
name|getServerWith
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the location of the specified region    * @param regionName Name of the region in bytes    * @return Index into List of {@link MiniHBaseCluster#getRegionServerThreads()}    * of HRS carrying .META.. Returns -1 if none found.    */
specifier|public
name|int
name|getServerWith
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
name|HRegion
name|metaRegion
init|=
name|hrs
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaRegion
operator|!=
literal|null
condition|)
block|{
name|index
operator|=
name|count
expr_stmt|;
break|break;
block|}
name|count
operator|++
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
comment|/**    * Counts the total numbers of regions being served by the currently online    * region servers by asking each how many regions they have.  Does not look    * at META at all.  Count includes catalog tables.    * @return number of regions being served by all region servers    */
specifier|public
name|long
name|countServedRegions
parameter_list|()
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|getLiveRegionServerThreads
argument_list|()
control|)
block|{
name|count
operator|+=
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getNumberOfOnlineRegions
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Do a simulated kill all masters and regionservers. Useful when it is    * impossible to bring the mini-cluster back for clean shutdown.    */
specifier|public
name|void
name|killAll
parameter_list|()
block|{
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"killAll"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MasterThread
name|masterThread
range|:
name|getMasterThreads
argument_list|()
control|)
block|{
name|masterThread
operator|.
name|getMaster
argument_list|()
operator|.
name|abort
argument_list|(
literal|"killAll"
argument_list|,
operator|new
name|Throwable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

