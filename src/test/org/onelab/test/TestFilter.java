begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2005, European Commission project OneLab under contract 034819  * (http://www.one-lab.org)  *   * All rights reserved.  * Redistribution and use in source and binary forms, with or   * without modification, are permitted provided that the following   * conditions are met:  *  - Redistributions of source code must retain the above copyright   *    notice, this list of conditions and the following disclaimer.  *  - Redistributions in binary form must reproduce the above copyright   *    notice, this list of conditions and the following disclaimer in   *    the documentation and/or other materials provided with the distribution.  *  - Neither the name of the University Catholique de Louvain - UCL  *    nor the names of its contributors may be used to endorse or   *    promote products derived from this software without specific prior   *    written permission.  *      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS   * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE   * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,   * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;   * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN   * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|onelab
operator|.
name|test
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|onelab
operator|.
name|filter
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test class.  *   * contract<a href="http://www.one-lab.org">European Commission One-Lab Project 034819</a>.  *  * @version 1.0 - 8 Feb. 07  */
end_comment

begin_class
specifier|public
class|class
name|TestFilter
extends|extends
name|TestCase
block|{
comment|/** Test a BloomFilter */
specifier|public
name|void
name|testBloomFilter
parameter_list|()
block|{
name|Filter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|StringKey
argument_list|(
literal|"toto"
argument_list|)
decl_stmt|;
name|Key
name|k2
init|=
operator|new
name|StringKey
argument_list|(
literal|"lulu"
argument_list|)
decl_stmt|;
name|Key
name|k3
init|=
operator|new
name|StringKey
argument_list|(
literal|"mama"
argument_list|)
decl_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|k2
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|k3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"graknyl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"xyzzy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// False positive
name|assertTrue
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// False positive
block|}
comment|/** Test a CountingBloomFilter */
specifier|public
name|void
name|testCountingBloomFilter
parameter_list|()
block|{
name|Filter
name|bf
init|=
operator|new
name|CountingBloomFilter
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|StringKey
argument_list|(
literal|"toto"
argument_list|)
decl_stmt|;
name|Key
name|k2
init|=
operator|new
name|StringKey
argument_list|(
literal|"lulu"
argument_list|)
decl_stmt|;
name|Key
name|k3
init|=
operator|new
name|StringKey
argument_list|(
literal|"mama"
argument_list|)
decl_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|k2
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|k3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"graknyl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"xyzzy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// False positive
name|assertTrue
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// False positive
block|}
comment|/** Test a DynamicBloomFilter */
specifier|public
name|void
name|testDynamicBloomFilter
parameter_list|()
block|{
name|Filter
name|bf
init|=
operator|new
name|DynamicBloomFilter
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|StringKey
argument_list|(
literal|"toto"
argument_list|)
decl_stmt|;
name|Key
name|k2
init|=
operator|new
name|StringKey
argument_list|(
literal|"lulu"
argument_list|)
decl_stmt|;
name|Key
name|k3
init|=
operator|new
name|StringKey
argument_list|(
literal|"mama"
argument_list|)
decl_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|k2
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|k3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"graknyl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"xyzzy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bf
operator|.
name|membershipTest
argument_list|(
operator|new
name|StringKey
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// False positive
block|}
block|}
end_class

begin_comment
comment|//end class
end_comment

end_unit

