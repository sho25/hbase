begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_comment
comment|/**  * Tests for the HStoreKey Plain and Meta RawComparators.  */
end_comment

begin_class
specifier|public
class|class
name|TestHStoreKey
extends|extends
name|TestCase
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMoreComparisons
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Root compares
name|HStoreKey
name|a
init|=
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,99999999999999"
argument_list|)
decl_stmt|;
name|HStoreKey
name|b
init|=
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,1"
argument_list|)
decl_stmt|;
name|HStoreKey
operator|.
name|StoreKeyComparator
name|c
init|=
operator|new
name|HStoreKey
operator|.
name|RootStoreKeyComparator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|,
name|a
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|HStoreKey
name|aa
init|=
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,1"
argument_list|)
decl_stmt|;
name|HStoreKey
name|bb
init|=
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,1"
argument_list|,
literal|"info:regioninfo"
argument_list|,
literal|1235943454602L
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|aa
operator|.
name|getBytes
argument_list|()
argument_list|,
name|bb
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Meta compares
name|HStoreKey
name|aaa
init|=
operator|new
name|HStoreKey
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236020145502"
argument_list|)
decl_stmt|;
name|HStoreKey
name|bbb
init|=
operator|new
name|HStoreKey
argument_list|(
literal|"TestScanMultipleVersions,,99999999999999"
argument_list|)
decl_stmt|;
name|c
operator|=
operator|new
name|HStoreKey
operator|.
name|MetaStoreKeyComparator
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|bbb
operator|.
name|getBytes
argument_list|()
argument_list|,
name|aaa
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|HStoreKey
name|aaaa
init|=
operator|new
name|HStoreKey
argument_list|(
literal|"TestScanMultipleVersions,,1236023996656"
argument_list|,
literal|"info:regioninfo"
argument_list|,
literal|1236024396271L
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|aaaa
operator|.
name|getBytes
argument_list|()
argument_list|,
name|bbb
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|HStoreKey
name|x
init|=
operator|new
name|HStoreKey
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236034574162"
argument_list|,
literal|""
argument_list|,
literal|9223372036854775807L
argument_list|)
decl_stmt|;
name|HStoreKey
name|y
init|=
operator|new
name|HStoreKey
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236034574162"
argument_list|,
literal|"info:regioninfo"
argument_list|,
literal|1236034574912L
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|x
operator|.
name|getBytes
argument_list|()
argument_list|,
name|y
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|comparisons
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyRootComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparisons
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyMetaComparator
argument_list|()
argument_list|)
expr_stmt|;
name|comparisons
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyComparator
argument_list|()
argument_list|)
expr_stmt|;
name|metacomparisons
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyRootComparator
argument_list|()
argument_list|)
expr_stmt|;
name|metacomparisons
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyMetaComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests cases where rows keys have characters below the ','.    * See HBASE-832    * @throws IOException     */
specifier|public
name|void
name|testHStoreKeyBorderCases
parameter_list|()
throws|throws
name|IOException
block|{
name|HStoreKey
name|rowA
init|=
operator|new
name|HStoreKey
argument_list|(
literal|"testtable,www.hbase.org/,1234"
argument_list|,
literal|""
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowABytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|rowA
argument_list|)
decl_stmt|;
name|HStoreKey
name|rowB
init|=
operator|new
name|HStoreKey
argument_list|(
literal|"testtable,www.hbase.org/%20,99999"
argument_list|,
literal|""
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowBBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|rowB
argument_list|)
decl_stmt|;
comment|// This is a plain compare on the row. It gives wrong answer for meta table
comment|// row entry.
name|assertTrue
argument_list|(
name|rowA
operator|.
name|compareTo
argument_list|(
name|rowB
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|HStoreKey
operator|.
name|MetaStoreKeyComparator
name|c
init|=
operator|new
name|HStoreKey
operator|.
name|MetaStoreKeyComparator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|rowABytes
argument_list|,
name|rowBBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|rowA
operator|=
operator|new
name|HStoreKey
argument_list|(
literal|"testtable,,1234"
argument_list|,
literal|""
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|rowB
operator|=
operator|new
name|HStoreKey
argument_list|(
literal|"testtable,$www.hbase.org/,99999"
argument_list|,
literal|""
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rowA
operator|.
name|compareTo
argument_list|(
name|rowB
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|Writables
operator|.
name|getBytes
argument_list|(
name|rowA
argument_list|)
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|rowB
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|rowA
operator|=
operator|new
name|HStoreKey
argument_list|(
literal|".META.,testtable,www.hbase.org/,1234,4321"
argument_list|,
literal|""
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|rowB
operator|=
operator|new
name|HStoreKey
argument_list|(
literal|".META.,testtable,www.hbase.org/%20,99999,99999"
argument_list|,
literal|""
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rowA
operator|.
name|compareTo
argument_list|(
name|rowB
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|HStoreKey
operator|.
name|RootStoreKeyComparator
name|rootComparator
init|=
operator|new
name|HStoreKey
operator|.
name|RootStoreKeyComparator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootComparator
operator|.
name|compare
argument_list|(
name|Writables
operator|.
name|getBytes
argument_list|(
name|rowA
argument_list|)
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|rowB
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|metacomparisons
parameter_list|(
specifier|final
name|HStoreKey
operator|.
name|HStoreKeyComparator
name|c
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|HStoreKey
argument_list|(
literal|".META.,a,,0,1"
argument_list|)
argument_list|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,a,,0,1"
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|HStoreKey
argument_list|(
literal|".META.,a,,0,1"
argument_list|)
argument_list|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,a,,0,2"
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|HStoreKey
argument_list|(
literal|".META.,a,,0,2"
argument_list|)
argument_list|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,a,,0,1"
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|comparisons
parameter_list|(
specifier|final
name|HStoreKey
operator|.
name|HStoreKeyComparator
name|c
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,1"
argument_list|)
argument_list|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,1"
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,1"
argument_list|)
argument_list|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,2"
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,2"
argument_list|)
argument_list|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,1"
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testBinaryKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|HStoreKey
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<
name|HStoreKey
argument_list|>
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyComparator
argument_list|()
argument_list|)
decl_stmt|;
name|HStoreKey
index|[]
name|keys
init|=
block|{
operator|new
name|HStoreKey
argument_list|(
literal|"aaaaa,\u0000\u0000,2"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|"aaaaa,\u0001,3"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|3
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|"aaaaa,,1"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|"aaaaa,\u1000,5"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|5
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|"aaaaa,a,4"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|4
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|"a,a,0"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
block|, 	}
decl_stmt|;
comment|// Add to set with bad comparator
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// This will output the keys incorrectly.
name|boolean
name|assertion
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|HStoreKey
name|k
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
name|count
operator|++
operator|==
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Expected
name|assertion
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
comment|// Make set with good comparator
name|set
operator|=
operator|new
name|TreeSet
argument_list|<
name|HStoreKey
argument_list|>
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyMetaComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|HStoreKey
name|k
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
name|count
operator|++
operator|==
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make up -ROOT- table keys.
name|HStoreKey
index|[]
name|rootKeys
init|=
block|{
operator|new
name|HStoreKey
argument_list|(
literal|".META.,aaaaa,\u0000\u0000,0,2"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,aaaaa,\u0001,0,3"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|3
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,aaaaa,,0,1"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,aaaaa,\u1000,0,5"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|5
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,aaaaa,a,0,4"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|4
argument_list|)
block|,
operator|new
name|HStoreKey
argument_list|(
literal|".META.,,0"
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
block|,       }
decl_stmt|;
comment|// This will output the keys incorrectly.
name|set
operator|=
operator|new
name|TreeSet
argument_list|<
name|HStoreKey
argument_list|>
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyMetaComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add to set with bad comparator
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|rootKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertion
operator|=
literal|false
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
try|try
block|{
for|for
control|(
name|HStoreKey
name|k
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
name|count
operator|++
operator|==
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
name|e
parameter_list|)
block|{
comment|// Expected
name|assertion
operator|=
literal|true
expr_stmt|;
block|}
comment|// Now with right comparator
name|set
operator|=
operator|new
name|TreeSet
argument_list|<
name|HStoreKey
argument_list|>
argument_list|(
operator|new
name|HStoreKey
operator|.
name|HStoreKeyRootComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add to set with bad comparator
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|rootKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|HStoreKey
name|k
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
name|count
operator|++
operator|==
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|HStoreKey
name|hsk
init|=
operator|new
name|HStoreKey
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|hsk
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|HStoreKey
name|hsk2
init|=
name|HStoreKey
operator|.
name|create
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hsk
operator|.
name|equals
argument_list|(
name|hsk2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test getBytes with empty column
name|hsk
operator|=
operator|new
name|HStoreKey
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hsk
operator|.
name|getBytes
argument_list|()
argument_list|,
name|HStoreKey
operator|.
name|getBytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HStoreKey
name|hsk
init|=
operator|new
name|HStoreKey
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|byte
index|[]
name|writablesBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|hsk
argument_list|)
decl_stmt|;
name|byte
index|[]
name|selfSerializationBytes
init|=
name|hsk
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Bytes
operator|.
name|equals
argument_list|(
name|writablesBytes
argument_list|,
name|selfSerializationBytes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testByteBuffer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|ts
init|=
literal|123
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|HStoreKey
name|hsk
init|=
operator|new
name|HStoreKey
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|hsk
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|HStoreKey
operator|.
name|getRow
argument_list|(
name|bb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|column
argument_list|,
name|HStoreKey
operator|.
name|getColumn
argument_list|(
name|bb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|HStoreKey
operator|.
name|getTimestamp
argument_list|(
name|bb
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the byte comparator works same as the object comparator.    */
specifier|public
name|void
name|testRawComparator
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|HStoreKey
name|past
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
operator|-
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
name|pastBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|past
argument_list|)
decl_stmt|;
name|HStoreKey
name|now
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|byte
index|[]
name|nowBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|HStoreKey
name|future
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
operator|+
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
name|futureBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|HStoreKey
operator|.
name|StoreKeyComparator
name|comparator
init|=
operator|new
name|HStoreKey
operator|.
name|StoreKeyComparator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|past
operator|.
name|compareTo
argument_list|(
name|now
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|pastBytes
argument_list|,
name|nowBytes
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|now
operator|.
name|compareTo
argument_list|(
name|now
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|nowBytes
argument_list|,
name|nowBytes
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|compareTo
argument_list|(
name|now
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|futureBytes
argument_list|,
name|nowBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Check that empty column comes before one with a column
name|HStoreKey
name|nocolumn
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|byte
index|[]
name|nocolumnBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|nocolumn
argument_list|)
decl_stmt|;
name|HStoreKey
name|withcolumn
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|byte
index|[]
name|withcolumnBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|withcolumn
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nocolumn
operator|.
name|compareTo
argument_list|(
name|withcolumn
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|nocolumnBytes
argument_list|,
name|withcolumnBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Check that empty column comes and LATEST comes before one with a column
comment|// and old timestamp.
name|nocolumn
operator|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
name|nocolumnBytes
operator|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|nocolumn
argument_list|)
expr_stmt|;
name|withcolumn
operator|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|withcolumnBytes
operator|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|withcolumn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nocolumn
operator|.
name|compareTo
argument_list|(
name|withcolumn
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|nocolumnBytes
argument_list|,
name|withcolumnBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

