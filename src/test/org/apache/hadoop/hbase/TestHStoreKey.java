begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
operator|.
name|StoreKeyByteComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_comment
comment|/**  * Tests for the HStoreKey Plain and Meta RawComparators.  */
end_comment

begin_class
specifier|public
class|class
name|TestHStoreKey
extends|extends
name|TestCase
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testByteBuffer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|ts
init|=
literal|123
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|HStoreKey
name|hsk
init|=
operator|new
name|HStoreKey
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|hsk
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|HStoreKey
operator|.
name|getRow
argument_list|(
name|bb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|column
argument_list|,
name|HStoreKey
operator|.
name|getColumn
argument_list|(
name|bb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|HStoreKey
operator|.
name|getTimestamp
argument_list|(
name|bb
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the byte comparator works same as the object comparator.    */
specifier|public
name|void
name|testRawComparator
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|HStoreKey
name|past
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
operator|-
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
name|pastBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|past
argument_list|)
decl_stmt|;
name|HStoreKey
name|now
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|byte
index|[]
name|nowBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|HStoreKey
name|future
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
operator|+
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
name|futureBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|future
argument_list|)
decl_stmt|;
name|StoreKeyByteComparator
name|comparator
init|=
operator|new
name|HStoreKey
operator|.
name|StoreKeyByteComparator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|past
operator|.
name|compareTo
argument_list|(
name|now
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|pastBytes
argument_list|,
name|nowBytes
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|now
operator|.
name|compareTo
argument_list|(
name|now
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|nowBytes
argument_list|,
name|nowBytes
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|future
operator|.
name|compareTo
argument_list|(
name|now
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|futureBytes
argument_list|,
name|nowBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Check that empty column comes before one with a column
name|HStoreKey
name|nocolumn
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|byte
index|[]
name|nocolumnBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|nocolumn
argument_list|)
decl_stmt|;
name|HStoreKey
name|withcolumn
init|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|byte
index|[]
name|withcolumnBytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|withcolumn
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nocolumn
operator|.
name|compareTo
argument_list|(
name|withcolumn
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|nocolumnBytes
argument_list|,
name|withcolumnBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Check that empty column comes and LATEST comes before one with a column
comment|// and old timestamp.
name|nocolumn
operator|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
name|nocolumnBytes
operator|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|nocolumn
argument_list|)
expr_stmt|;
name|withcolumn
operator|=
operator|new
name|HStoreKey
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|withcolumnBytes
operator|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|withcolumn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nocolumn
operator|.
name|compareTo
argument_list|(
name|withcolumn
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|nocolumnBytes
argument_list|,
name|withcolumnBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//  /**
comment|//   * Tests cases where rows keys have characters below the ','.
comment|//   * See HBASE-832
comment|//   * @throws IOException
comment|//   */
comment|//  public void testHStoreKeyBorderCases() throws IOException {
comment|//    HRegionInfo info = new HRegionInfo(new HTableDescriptor("testtable"),
comment|//        HConstants.EMPTY_BYTE_ARRAY, HConstants.EMPTY_BYTE_ARRAY);
comment|//
comment|//    HStoreKey rowA = new HStoreKey("testtable,www.hbase.org/,1234",
comment|//      "", Long.MAX_VALUE, info);
comment|//    byte [] rowABytes = Writables.getBytes(rowA);
comment|//    HStoreKey rowB = new HStoreKey("testtable,www.hbase.org/%20,99999",
comment|//      "", Long.MAX_VALUE, info);
comment|//    byte [] rowBBytes = Writables.getBytes(rowB);
comment|//    assertTrue(rowA.compareTo(rowB)> 0);
comment|//    HStoreKey.Comparator comparator = new HStoreKey.PlainStoreKeyComparator();
comment|//    assertTrue(comparator.compare(rowABytes, rowBBytes)> 0);
comment|//
comment|//    rowA = new HStoreKey("testtable,www.hbase.org/,1234",
comment|//        "", Long.MAX_VALUE, HRegionInfo.FIRST_META_REGIONINFO);
comment|//    rowB = new HStoreKey("testtable,www.hbase.org/%20,99999",
comment|//        "", Long.MAX_VALUE, HRegionInfo.FIRST_META_REGIONINFO);
comment|//    assertTrue(rowA.compareTo(rowB)< 0);
comment|//    assertTrue(comparator.compare(rowABytes, rowBBytes)< 0);
comment|//
comment|//    rowA = new HStoreKey("testtable,,1234",
comment|//        "", Long.MAX_VALUE, HRegionInfo.FIRST_META_REGIONINFO);
comment|//    rowB = new HStoreKey("testtable,$www.hbase.org/,99999",
comment|//        "", Long.MAX_VALUE, HRegionInfo.FIRST_META_REGIONINFO);
comment|//    assertTrue(rowA.compareTo(rowB)< 0);
comment|//    assertTrue(comparator.compare(rowABytes, rowBBytes)< 0);
comment|//
comment|//    rowA = new HStoreKey(".META.,testtable,www.hbase.org/,1234,4321",
comment|//        "", Long.MAX_VALUE, HRegionInfo.ROOT_REGIONINFO);
comment|//    rowB = new HStoreKey(".META.,testtable,www.hbase.org/%20,99999,99999",
comment|//        "", Long.MAX_VALUE, HRegionInfo.ROOT_REGIONINFO);
comment|//    assertTrue(rowA.compareTo(rowB)> 0);
comment|//    assertTrue(comparator.compare(rowABytes, rowBBytes)> 0);
comment|//  }
block|}
end_class

end_unit

