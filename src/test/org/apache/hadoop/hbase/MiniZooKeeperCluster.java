begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|NIOServerCnxn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZooKeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|persistence
operator|.
name|FileTxnLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|quorum
operator|.
name|QuorumPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|quorum
operator|.
name|QuorumPeer
operator|.
name|QuorumServer
import|;
end_import

begin_comment
comment|/**  * TODO: Most of the code in this class is ripped from ZooKeeper tests. Instead  * of redoing it, we should contribute updates to their code which let us more  * easily access testing helper objects.  */
end_comment

begin_class
specifier|public
class|class
name|MiniZooKeeperCluster
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniZooKeeperCluster
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: make this more configurable?
specifier|private
specifier|static
specifier|final
name|int
name|CLIENT_PORT_START
init|=
literal|21810
decl_stmt|;
comment|// use non-standard port
specifier|private
specifier|static
specifier|final
name|int
name|LEADER_PORT_START
init|=
literal|31810
decl_stmt|;
comment|// use non-standard port
specifier|private
specifier|static
specifier|final
name|int
name|TICK_TIME
init|=
literal|2000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|INIT_LIMIT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SYNC_LIMIT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CONNECTION_TIMEOUT
init|=
literal|30000
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
specifier|private
name|int
name|numPeers
decl_stmt|;
specifier|private
name|File
name|baseDir
decl_stmt|;
comment|// for distributed mode.
specifier|private
name|QuorumPeer
index|[]
name|quorumPeers
decl_stmt|;
comment|// for standalone mode.
specifier|private
name|NIOServerCnxn
operator|.
name|Factory
name|standaloneServerFactory
decl_stmt|;
comment|/**    * @throws IOException    */
specifier|public
name|MiniZooKeeperCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|started
operator|=
literal|false
expr_stmt|;
block|}
comment|// / XXX: From o.a.zk.t.ClientBase
specifier|private
specifier|static
name|void
name|setupTestEnv
parameter_list|()
block|{
comment|// during the tests we run with 100K prealloc in the logs.
comment|// on windows systems prealloc of 64M was seen to take ~15seconds
comment|// resulting in test failure (client timeout on first session).
comment|// set env and directly in order to handle static init/gc issues
name|System
operator|.
name|setProperty
argument_list|(
literal|"zookeeper.preAllocSize"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|FileTxnLog
operator|.
name|setPreallocSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param numPeers    * @param baseDir    * @throws IOException    * @throws InterruptedException    */
specifier|public
name|void
name|startup
parameter_list|(
name|int
name|numPeers
parameter_list|,
name|File
name|baseDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|setupTestEnv
argument_list|()
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|numPeers
operator|<
literal|1
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|numPeers
operator|=
name|numPeers
expr_stmt|;
name|this
operator|.
name|baseDir
operator|=
name|baseDir
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDistributed
argument_list|()
condition|)
block|{
name|startupDistributed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startupStandalone
argument_list|()
expr_stmt|;
block|}
name|started
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|startupStandalone
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"zookeeper-standalone"
argument_list|)
decl_stmt|;
name|recreateDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|ZooKeeperServer
name|server
init|=
operator|new
name|ZooKeeperServer
argument_list|(
name|dir
argument_list|,
name|dir
argument_list|,
name|TICK_TIME
argument_list|)
decl_stmt|;
name|standaloneServerFactory
operator|=
operator|new
name|NIOServerCnxn
operator|.
name|Factory
argument_list|(
name|CLIENT_PORT_START
argument_list|)
expr_stmt|;
name|standaloneServerFactory
operator|.
name|startup
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|ZooKeeperWrapper
operator|.
name|setQuorumServers
argument_list|(
literal|"localhost:"
operator|+
name|CLIENT_PORT_START
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|waitForServerUp
argument_list|(
name|CLIENT_PORT_START
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Waiting for startup of standalone server"
argument_list|)
throw|;
block|}
block|}
comment|// XXX: From o.a.zk.t.QuorumTest.startServers
specifier|private
name|void
name|startupDistributed
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create map of peers
name|HashMap
argument_list|<
name|Long
argument_list|,
name|QuorumServer
argument_list|>
name|peers
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|QuorumServer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|1
init|;
name|id
operator|<=
name|numPeers
condition|;
operator|++
name|id
control|)
block|{
name|int
name|port
init|=
name|LEADER_PORT_START
operator|+
name|id
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|QuorumServer
name|server
init|=
operator|new
name|QuorumServer
argument_list|(
name|id
argument_list|,
name|addr
argument_list|)
decl_stmt|;
name|peers
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|serversBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// Initialize each quorum peer.
name|quorumPeers
operator|=
operator|new
name|QuorumPeer
index|[
name|numPeers
index|]
expr_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|1
init|;
name|id
operator|<=
name|numPeers
condition|;
operator|++
name|id
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"zookeeper-peer-"
operator|+
name|id
argument_list|)
decl_stmt|;
name|recreateDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|CLIENT_PORT_START
operator|+
name|id
decl_stmt|;
name|quorumPeers
index|[
name|id
operator|-
literal|1
index|]
operator|=
operator|new
name|QuorumPeer
argument_list|(
name|peers
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|,
name|port
argument_list|,
literal|0
argument_list|,
name|id
argument_list|,
name|TICK_TIME
argument_list|,
name|INIT_LIMIT
argument_list|,
name|SYNC_LIMIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|>
literal|1
condition|)
block|{
name|serversBuffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|serversBuffer
operator|.
name|append
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
name|String
name|servers
init|=
name|serversBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ZooKeeperWrapper
operator|.
name|setQuorumServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
comment|// Start quorum peer threads.
for|for
control|(
name|QuorumPeer
name|qp
range|:
name|quorumPeers
control|)
block|{
name|qp
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Wait for quorum peers to be up before going on.
for|for
control|(
name|int
name|id
init|=
literal|1
init|;
name|id
operator|<=
name|numPeers
condition|;
operator|++
name|id
control|)
block|{
name|int
name|port
init|=
name|CLIENT_PORT_START
operator|+
name|id
decl_stmt|;
if|if
condition|(
operator|!
name|waitForServerUp
argument_list|(
name|port
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Waiting for startup of peer "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|recreateDir
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"creating dir: "
operator|+
name|dir
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @throws IOException    * @throws InterruptedException    */
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|started
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isDistributed
argument_list|()
condition|)
block|{
name|shutdownDistributed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|shutdownStandalone
argument_list|()
expr_stmt|;
block|}
name|started
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|boolean
name|isDistributed
parameter_list|()
block|{
return|return
name|numPeers
operator|>
literal|1
return|;
block|}
specifier|private
name|void
name|shutdownDistributed
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|QuorumPeer
name|qp
range|:
name|quorumPeers
control|)
block|{
name|qp
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|qp
operator|.
name|join
argument_list|(
name|CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|qp
operator|.
name|isAlive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"QuorumPeer "
operator|+
name|qp
operator|.
name|getId
argument_list|()
operator|+
literal|" failed to shutdown"
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|id
init|=
literal|1
init|;
name|id
operator|<=
name|quorumPeers
operator|.
name|length
condition|;
operator|++
name|id
control|)
block|{
name|int
name|port
init|=
name|CLIENT_PORT_START
operator|+
name|id
decl_stmt|;
if|if
condition|(
operator|!
name|waitForServerDown
argument_list|(
name|port
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Waiting for shutdown of peer "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|shutdownStandalone
parameter_list|()
throws|throws
name|IOException
block|{
name|standaloneServerFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|waitForServerDown
argument_list|(
name|CLIENT_PORT_START
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Waiting for shutdown of standalone server"
argument_list|)
throw|;
block|}
block|}
comment|// XXX: From o.a.zk.t.ClientBase
specifier|private
specifier|static
name|boolean
name|waitForServerDown
parameter_list|(
name|int
name|port
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputStream
name|outstream
init|=
name|sock
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|outstream
operator|.
name|write
argument_list|(
literal|"stat"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outstream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|start
operator|+
name|timeout
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// XXX: From o.a.zk.t.ClientBase
specifier|private
specifier|static
name|boolean
name|waitForServerUp
parameter_list|(
name|int
name|port
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OutputStream
name|outstream
init|=
name|sock
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|outstream
operator|.
name|write
argument_list|(
literal|"stat"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outstream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Reader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
operator|&&
name|line
operator|.
name|startsWith
argument_list|(
literal|"Zookeeper version:"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore as this is expected
name|LOG
operator|.
name|info
argument_list|(
literal|"server localhost:"
operator|+
name|port
operator|+
literal|" not up "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|start
operator|+
name|timeout
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

