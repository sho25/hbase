begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|random
operator|.
name|RandomData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|random
operator|.
name|RandomDataImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  *<p>  * This class runs performance benchmarks for {@link HFile}.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|HFilePerformanceEvaluation
block|{
specifier|private
specifier|static
specifier|final
name|int
name|ROW_LENGTH
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROW_COUNT
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RFILE_BLOCKSIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HFilePerformanceEvaluation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
name|byte
index|[]
name|format
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
name|String
name|v
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0000000000"
operator|.
name|substring
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|v
argument_list|)
return|;
block|}
specifier|static
name|ImmutableBytesWritable
name|format
parameter_list|(
specifier|final
name|int
name|i
parameter_list|,
name|ImmutableBytesWritable
name|w
parameter_list|)
block|{
name|w
operator|.
name|set
argument_list|(
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
specifier|private
name|void
name|runBenchmarks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|mf
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"performanceevaluation.mapfile"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mf
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|mf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|runBenchmark
argument_list|(
operator|new
name|SequentialWriteBenchmark
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|ROW_COUNT
argument_list|)
argument_list|,
name|ROW_COUNT
argument_list|)
expr_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|concurrentReads
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runBenchmark
argument_list|(
operator|new
name|UniformRandomSmallScan
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|ROW_COUNT
argument_list|)
argument_list|,
name|ROW_COUNT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|concurrentReads
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runBenchmark
argument_list|(
operator|new
name|UniformRandomReadBenchmark
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|ROW_COUNT
argument_list|)
argument_list|,
name|ROW_COUNT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|concurrentReads
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runBenchmark
argument_list|(
operator|new
name|GaussianRandomReadBenchmark
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|ROW_COUNT
argument_list|)
argument_list|,
name|ROW_COUNT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|concurrentReads
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runBenchmark
argument_list|(
operator|new
name|SequentialReadBenchmark
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|ROW_COUNT
argument_list|)
argument_list|,
name|ROW_COUNT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runBenchmark
parameter_list|(
name|RowOrientedBenchmark
name|benchmark
parameter_list|,
name|int
name|rowCount
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|benchmark
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" for "
operator|+
name|rowCount
operator|+
literal|" rows."
argument_list|)
expr_stmt|;
name|long
name|elapsedTime
init|=
name|benchmark
operator|.
name|run
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|benchmark
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" for "
operator|+
name|rowCount
operator|+
literal|" rows took "
operator|+
name|elapsedTime
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|abstract
class|class
name|RowOrientedBenchmark
block|{
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|final
name|Path
name|mf
decl_stmt|;
specifier|protected
specifier|final
name|int
name|totalRows
decl_stmt|;
specifier|public
name|RowOrientedBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|mf
parameter_list|,
name|int
name|totalRows
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|mf
operator|=
name|mf
expr_stmt|;
name|this
operator|.
name|totalRows
operator|=
name|totalRows
expr_stmt|;
block|}
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
specifier|abstract
name|void
name|doRow
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalRows
operator|/
literal|10
return|;
block|}
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
comment|/**      * Run benchmark      * @return elapsed time.      * @throws Exception      */
name|long
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|elapsedTime
decl_stmt|;
name|setUp
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalRows
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
name|getReportingPeriod
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed "
operator|+
name|i
operator|+
literal|" rows."
argument_list|)
expr_stmt|;
block|}
name|doRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|elapsedTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
return|return
name|elapsedTime
return|;
block|}
block|}
specifier|static
class|class
name|SequentialWriteBenchmark
extends|extends
name|RowOrientedBenchmark
block|{
specifier|protected
name|HFile
operator|.
name|Writer
name|writer
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|ROW_LENGTH
index|]
decl_stmt|;
specifier|public
name|SequentialWriteBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|mf
parameter_list|,
name|int
name|totalRows
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|totalRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|writer
operator|=
operator|new
name|HFile
operator|.
name|Writer
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|mf
argument_list|,
name|RFILE_BLOCKSIZE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|doRow
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|writer
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|i
argument_list|)
argument_list|,
name|generateValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|generateValue
parameter_list|()
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalRows
return|;
comment|// don't report progress
block|}
annotation|@
name|Override
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|abstract
class|class
name|ReadBenchmark
extends|extends
name|RowOrientedBenchmark
block|{
name|ImmutableBytesWritable
name|key
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|ImmutableBytesWritable
name|value
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
specifier|protected
name|HFile
operator|.
name|Reader
name|reader
decl_stmt|;
specifier|public
name|ReadBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|mf
parameter_list|,
name|int
name|totalRows
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|totalRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|=
operator|new
name|HFile
operator|.
name|Reader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|mf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|SequentialReadBenchmark
extends|extends
name|ReadBenchmark
block|{
specifier|private
name|HFileScanner
name|scanner
decl_stmt|;
specifier|public
name|SequentialReadBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|mf
parameter_list|,
name|int
name|totalRows
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|totalRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
name|this
operator|.
name|reader
operator|.
name|getScanner
argument_list|()
expr_stmt|;
name|this
operator|.
name|scanner
operator|.
name|seekTo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|doRow
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|scanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|ByteBuffer
name|k
init|=
name|this
operator|.
name|scanner
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|assertKey
argument_list|(
name|format
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|ByteBuffer
name|v
init|=
name|scanner
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|assertValueSize
argument_list|(
name|v
operator|.
name|limit
argument_list|()
argument_list|,
name|ROW_LENGTH
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalRows
return|;
comment|// don't report progress
block|}
block|}
specifier|static
class|class
name|UniformRandomReadBenchmark
extends|extends
name|ReadBenchmark
block|{
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|UniformRandomReadBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|mf
parameter_list|,
name|int
name|totalRows
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|totalRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|doRow
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|HFileScanner
name|scanner
init|=
name|this
operator|.
name|reader
operator|.
name|getScanner
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|getRandomRow
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|ByteBuffer
name|k
init|=
name|scanner
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|assertKey
argument_list|(
name|b
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|ByteBuffer
name|v
init|=
name|scanner
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|assertValueSize
argument_list|(
name|v
operator|.
name|limit
argument_list|()
argument_list|,
name|ROW_LENGTH
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|getRandomRow
parameter_list|()
block|{
return|return
name|format
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|totalRows
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|UniformRandomSmallScan
extends|extends
name|ReadBenchmark
block|{
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|UniformRandomSmallScan
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|mf
parameter_list|,
name|int
name|totalRows
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|totalRows
operator|/
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|doRow
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|HFileScanner
name|scanner
init|=
name|this
operator|.
name|reader
operator|.
name|getScanner
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|getRandomRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|scanner
operator|.
name|seekTo
argument_list|(
name|b
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Nonexistent row: "
operator|+
operator|new
name|String
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|ByteBuffer
name|k
init|=
name|scanner
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|assertKey
argument_list|(
name|b
argument_list|,
name|k
argument_list|)
expr_stmt|;
comment|// System.out.println("Found row: " + new String(b));
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
literal|30
condition|;
name|ii
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NOTHING FOLLOWS"
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|v
init|=
name|scanner
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|PerformanceEvaluationCommons
operator|.
name|assertValueSize
argument_list|(
name|v
operator|.
name|limit
argument_list|()
argument_list|,
name|ROW_LENGTH
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|getRandomRow
parameter_list|()
block|{
return|return
name|format
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|totalRows
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|GaussianRandomReadBenchmark
extends|extends
name|ReadBenchmark
block|{
specifier|private
name|RandomData
name|randomData
init|=
operator|new
name|RandomDataImpl
argument_list|()
decl_stmt|;
specifier|public
name|GaussianRandomReadBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|mf
parameter_list|,
name|int
name|totalRows
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|mf
argument_list|,
name|totalRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|doRow
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|HFileScanner
name|scanner
init|=
name|this
operator|.
name|reader
operator|.
name|getScanner
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|getGaussianRandomRowBytes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
literal|30
condition|;
name|ii
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NOTHING FOLLOWS"
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|getGaussianRandomRowBytes
parameter_list|()
block|{
name|int
name|r
init|=
operator|(
name|int
operator|)
name|randomData
operator|.
name|nextGaussian
argument_list|(
name|totalRows
operator|/
literal|2
argument_list|,
name|totalRows
operator|/
literal|10
argument_list|)
decl_stmt|;
return|return
name|format
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
comment|/**    * @param args    * @throws IOException     */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|HFilePerformanceEvaluation
argument_list|()
operator|.
name|runBenchmarks
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

