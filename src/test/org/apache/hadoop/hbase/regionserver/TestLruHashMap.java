begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_class
specifier|public
class|class
name|TestLruHashMap
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|LruHashMap
argument_list|<
name|HStoreKey
argument_list|,
name|HStoreKey
argument_list|>
name|lru
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HStoreKey
index|[]
name|keys
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HStoreKey
name|key
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HStoreKey
name|tmpKey
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HStoreKey
index|[]
name|vals
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HStoreKey
name|val
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HStoreKey
name|tmpVal
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HStoreKey
index|[]
name|tmpData
init|=
literal|null
decl_stmt|;
comment|//Have to set type
specifier|private
specifier|static
name|Set
argument_list|<
name|LruHashMap
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|HStoreKey
argument_list|>
argument_list|>
name|hashSet
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|LruHashMap
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|HStoreKey
argument_list|>
argument_list|>
name|entryList
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|LruHashMap
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|HStoreKey
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Random
name|rand
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|int
name|ENTRY_ARRAY_LEN
init|=
literal|2000
decl_stmt|;
specifier|private
specifier|static
name|int
name|LOOPS
init|=
literal|10
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|long
name|maxMemUsage
init|=
literal|10000000L
decl_stmt|;
comment|//Using the default values for everything, except memUsage
name|lru
operator|=
operator|new
name|LruHashMap
argument_list|<
name|HStoreKey
argument_list|,
name|HStoreKey
argument_list|>
argument_list|(
name|maxMemUsage
argument_list|)
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|keys
operator|=
operator|new
name|HStoreKey
index|[
name|ENTRY_ARRAY_LEN
index|]
expr_stmt|;
name|vals
operator|=
operator|new
name|HStoreKey
index|[
name|ENTRY_ARRAY_LEN
index|]
expr_stmt|;
name|tmpData
operator|=
operator|new
name|HStoreKey
index|[
name|ENTRY_ARRAY_LEN
index|]
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test adds data to the Lru and checks that the head and tail pointers    * are updated correctly    */
specifier|public
name|void
name|testAdd_Pointers
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
name|sequential
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|tmpKey
operator|=
name|keys
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|HStoreKey
name|key
range|:
name|keys
control|)
block|{
name|lru
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"headPtr key not correct"
argument_list|,
name|lru
operator|.
name|getHeadPtr
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|tmpKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tailPtr key not correct"
argument_list|,
name|lru
operator|.
name|getTailPtr
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAdd_Pointers: OK"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test adds data to the Lru and checks that the memFree variable never    * goes below 0      */
specifier|public
name|void
name|testAdd_MemUsage_random
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
name|random
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|HStoreKey
name|key
range|:
name|keys
control|)
block|{
name|lru
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Memory usage exceeded!"
argument_list|,
name|lru
operator|.
name|getMemFree
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAdd_MemUsage: OK"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test adds data to the Lru and checks that the memFree variable never    * goes below 0      */
specifier|public
name|void
name|testAdd_MemUsage_sequential
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
name|sequential
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|HStoreKey
name|key
range|:
name|keys
control|)
block|{
name|lru
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Memory usage exceeded!"
argument_list|,
name|lru
operator|.
name|getMemFree
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAdd_MemUsage: OK"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test adds data to the Lru and checks that the order in the lru is the    * same as the insert order    */
specifier|public
name|void
name|testAdd_Order
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
comment|//Adding to Lru
name|put
argument_list|()
expr_stmt|;
comment|//Getting order from lru
name|entryList
operator|=
name|lru
operator|.
name|entryLruList
argument_list|()
expr_stmt|;
comment|//Comparing orders
name|assertTrue
argument_list|(
literal|"Different lengths"
argument_list|,
name|keys
operator|.
name|length
operator|==
name|entryList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|entryList
control|)
block|{
comment|//Comparing keys
name|assertTrue
argument_list|(
literal|"Different order"
argument_list|,
name|keys
index|[
name|j
operator|++
index|]
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Clearing the Lru
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAdd_Order: OK"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test adds data to the Lru, clears it and checks that the memoryUsage    * looks ok afterwards    */
specifier|public
name|void
name|testAdd_Clear
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|initMemUsage
init|=
literal|0L
decl_stmt|;
name|long
name|putMemUsage
init|=
literal|0L
decl_stmt|;
name|long
name|clearMemUsage
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
name|initMemUsage
operator|=
name|lru
operator|.
name|getMemFree
argument_list|()
expr_stmt|;
comment|//Adding to Lru
name|put
argument_list|()
expr_stmt|;
name|putMemUsage
operator|=
name|lru
operator|.
name|getMemFree
argument_list|()
expr_stmt|;
comment|//Clearing the Lru
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearMemUsage
operator|=
name|lru
operator|.
name|getMemFree
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"memUsage went down"
argument_list|,
name|clearMemUsage
operator|<=
name|initMemUsage
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAdd_Clear: OK"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test adds data to the Lru and checks that all the data that is in    * the hashSet is also in the EntryList    */
specifier|public
name|void
name|testAdd_Containment
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
comment|//Adding to Lru
name|put
argument_list|()
expr_stmt|;
comment|//Getting HashSet
name|hashSet
operator|=
name|lru
operator|.
name|entryTableSet
argument_list|()
expr_stmt|;
comment|//Getting EntryList
name|entryList
operator|=
name|lru
operator|.
name|entryLruList
argument_list|()
expr_stmt|;
comment|//Comparing
name|assertTrue
argument_list|(
literal|"Wrong size"
argument_list|,
name|hashSet
operator|.
name|size
argument_list|()
operator|==
name|entryList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|entryList
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Set doesn't contain value from list"
argument_list|,
name|hashSet
operator|.
name|contains
argument_list|(
name|entryList
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Clearing the Lru
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAdd_Containment: OK"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test gets an entry from the map and checks that the position of it has    * been updated afterwards.    */
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|int
name|getter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
comment|//Adding to Lru
name|put
argument_list|()
expr_stmt|;
comment|//Getting a random entry from the map
name|getter
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ENTRY_ARRAY_LEN
argument_list|)
expr_stmt|;
name|key
operator|=
name|keys
index|[
name|getter
index|]
expr_stmt|;
name|val
operator|=
name|lru
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|//Checking if the entries position has changed
name|entryList
operator|=
name|lru
operator|.
name|entryLruList
argument_list|()
expr_stmt|;
name|tmpKey
operator|=
name|entryList
operator|.
name|get
argument_list|(
name|entryList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Get did not put entry first"
argument_list|,
name|tmpKey
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getter
operator|!=
name|ENTRY_ARRAY_LEN
operator|-
literal|1
condition|)
block|{
name|tmpKey
operator|=
name|entryList
operator|.
name|get
argument_list|(
name|getter
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Get did leave entry in same position"
argument_list|,
name|tmpKey
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGet: OK"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates an entry in the map and checks that the position of it has been    * updated afterwards.    */
specifier|public
name|void
name|testUpdate
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
comment|//Adding to Lru
name|put
argument_list|()
expr_stmt|;
comment|//Getting a random entry from the map
name|key
operator|=
name|keys
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|ENTRY_ARRAY_LEN
argument_list|)
index|]
expr_stmt|;
name|val
operator|=
name|random
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|tmpVal
operator|=
name|lru
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|//Checking if the value has been updated and that the position i first
name|entryList
operator|=
name|lru
operator|.
name|entryLruList
argument_list|()
expr_stmt|;
name|tmpKey
operator|=
name|entryList
operator|.
name|get
argument_list|(
name|entryList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"put(update) did not put entry first"
argument_list|,
name|tmpKey
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|val
operator|.
name|equals
argument_list|(
name|tmpVal
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Value was not updated"
argument_list|,
name|entryList
operator|.
name|get
argument_list|(
name|entryList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Value was not updated"
argument_list|,
name|entryList
operator|.
name|get
argument_list|(
name|entryList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|tmpVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testUpdate: OK"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes an entry in the map and checks that it is no longer in the    * entryList nor the HashSet afterwards    */
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOPS
condition|;
name|i
operator|++
control|)
block|{
comment|//Adding to Lru
name|put
argument_list|()
expr_stmt|;
name|entryList
operator|=
name|lru
operator|.
name|entryLruList
argument_list|()
expr_stmt|;
comment|//Getting a random entry from the map
name|key
operator|=
name|keys
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|ENTRY_ARRAY_LEN
argument_list|)
index|]
expr_stmt|;
name|val
operator|=
name|lru
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|//Checking key is in list
name|entryList
operator|=
name|lru
operator|.
name|entryLruList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|entryList
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertFalse
argument_list|(
literal|"Entry found in list after remove"
argument_list|,
name|entryList
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lru
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testRemove: OK"
argument_list|)
expr_stmt|;
block|}
comment|//Helpers
specifier|private
specifier|static
name|void
name|put
parameter_list|()
block|{
comment|//Setting up keys and values
name|random
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|vals
operator|=
name|keys
expr_stmt|;
comment|//Inserting into Lru
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lru
operator|.
name|put
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Generating data
specifier|private
specifier|static
name|HStoreKey
name|random
parameter_list|(
name|HStoreKey
name|data
parameter_list|)
block|{
return|return
operator|new
name|HStoreKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|ENTRY_ARRAY_LEN
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|random
parameter_list|(
name|HStoreKey
index|[]
name|keys
parameter_list|)
block|{
specifier|final
name|int
name|LENGTH
init|=
name|keys
operator|.
name|length
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LENGTH
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|set
operator|.
name|contains
argument_list|(
name|pos
operator|=
operator|new
name|Integer
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|LENGTH
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{}
name|set
operator|.
name|add
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|keys
index|[
name|i
index|]
operator|=
operator|new
name|HStoreKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|sequential
parameter_list|(
name|HStoreKey
index|[]
name|keys
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|keys
index|[
name|i
index|]
operator|=
operator|new
name|HStoreKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//testAdd
specifier|private
name|HStoreKey
index|[]
name|mapEntriesToArray
parameter_list|(
name|List
argument_list|<
name|LruHashMap
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|HStoreKey
argument_list|>
argument_list|>
name|entryList
parameter_list|)
block|{
name|List
argument_list|<
name|HStoreKey
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|HStoreKey
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HStoreKey
argument_list|,
name|HStoreKey
argument_list|>
name|entry
range|:
name|entryList
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|toArray
argument_list|(
operator|new
name|HStoreKey
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

