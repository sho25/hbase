begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HStoreKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Basic stand-alone testing of HRegion.  *   * A lot of the meta information for an HRegion now lives inside other  * HRegions or in the HBaseMaster, so only basic testing is possible.  */
end_comment

begin_class
specifier|public
class|class
name|TestHRegion
extends|extends
name|HBaseTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHRegion
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Since all the "tests" depend on the results of the previous test, they are    * not Junit tests that can stand alone. Consequently we have a single Junit    * test that runs the "sub-tests" as private methods.    * @throws IOException     */
specifier|public
name|void
name|testHRegion
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
name|locks
argument_list|()
expr_stmt|;
name|badPuts
argument_list|()
expr_stmt|;
name|basic
argument_list|()
expr_stmt|;
name|scan
argument_list|()
expr_stmt|;
name|splitAndMerge
argument_list|()
expr_stmt|;
name|read
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownDfs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|FIRST_ROW
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_VALS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENTS_BASIC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents:basic"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENTSTR
init|=
literal|"contentstr"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANCHORNUM
init|=
literal|"anchor:anchornum-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANCHORSTR
init|=
literal|"anchorstr"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENTS_FIRSTCOL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents:firstcol"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ANCHOR_SECONDCOL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"anchor:secondcol"
argument_list|)
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|private
name|HTableDescriptor
name|desc
init|=
literal|null
decl_stmt|;
name|HRegion
name|r
init|=
literal|null
decl_stmt|;
name|HRegionIncommon
name|region
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|int
name|numInserted
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.hregion.max.filesize"
argument_list|,
literal|65536
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Set the hbase.rootdir to be the home directory in mini dfs.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|this
operator|.
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|// Create directories, start mini cluster, etc.
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"contents:"
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"anchor:"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|createNewHRegion
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|=
operator|new
name|HRegionIncommon
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"setup completed."
argument_list|)
expr_stmt|;
block|}
comment|// Test basic functionality. Writes to contents:basic and anchor:anchornum-*
specifier|private
name|void
name|basic
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Write out a bunch of values
for|for
control|(
name|int
name|k
init|=
name|FIRST_ROW
init|;
name|k
operator|<=
name|NUM_VALS
condition|;
name|k
operator|++
control|)
block|{
name|BatchUpdate
name|batchUpdate
init|=
operator|new
name|BatchUpdate
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|batchUpdate
operator|.
name|put
argument_list|(
name|CONTENTS_BASIC
argument_list|,
operator|(
name|CONTENTSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
argument_list|,
operator|(
name|ANCHORSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Write "
operator|+
name|NUM_VALS
operator|+
literal|" rows. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// Flush cache
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache flush elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// Read them back in
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|byte
index|[]
name|collabel
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|FIRST_ROW
init|;
name|k
operator|<=
name|NUM_VALS
condition|;
name|k
operator|++
control|)
block|{
name|byte
index|[]
name|rowlabel
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bodydata
init|=
name|region
operator|.
name|get
argument_list|(
name|rowlabel
argument_list|,
name|CONTENTS_BASIC
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bodydata
argument_list|)
expr_stmt|;
name|String
name|bodystr
init|=
operator|new
name|String
argument_list|(
name|bodydata
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|teststr
init|=
name|CONTENTSTR
operator|+
name|k
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect value for key: ("
operator|+
name|rowlabel
operator|+
literal|","
operator|+
name|CONTENTS_BASIC
operator|+
literal|"), expected: '"
operator|+
name|teststr
operator|+
literal|"' got: '"
operator|+
name|bodystr
operator|+
literal|"'"
argument_list|,
name|bodystr
argument_list|,
name|teststr
argument_list|)
expr_stmt|;
name|collabel
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
expr_stmt|;
name|bodydata
operator|=
name|region
operator|.
name|get
argument_list|(
name|rowlabel
argument_list|,
name|collabel
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|bodystr
operator|=
operator|new
name|String
argument_list|(
name|bodydata
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|teststr
operator|=
name|ANCHORSTR
operator|+
name|k
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect value for key: ("
operator|+
name|rowlabel
operator|+
literal|","
operator|+
name|collabel
operator|+
literal|"), expected: '"
operator|+
name|teststr
operator|+
literal|"' got: '"
operator|+
name|bodystr
operator|+
literal|"'"
argument_list|,
name|bodystr
argument_list|,
name|teststr
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Read "
operator|+
name|NUM_VALS
operator|+
literal|" rows. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"basic completed."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|badPuts
parameter_list|()
block|{
comment|// Try column name not registered in the table.
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|BatchUpdate
name|batchUpdate
init|=
operator|new
name|BatchUpdate
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Some old key"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|unregisteredColName
init|=
literal|"FamilyGroup:FamilyLabel"
decl_stmt|;
name|batchUpdate
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|unregisteredColName
argument_list|)
argument_list|,
name|unregisteredColName
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{     }
name|assertTrue
argument_list|(
literal|"Bad family"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"badPuts completed."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getting and releasing locks.    */
specifier|private
name|void
name|locks
parameter_list|()
block|{
specifier|final
name|int
name|threadCount
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|lockCount
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Integer
index|[]
name|lockids
init|=
operator|new
name|Integer
index|[
name|lockCount
index|]
decl_stmt|;
comment|// Get locks.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lockCount
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|byte
index|[]
name|rowid
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|lockids
index|[
name|i
index|]
operator|=
name|r
operator|.
name|obtainRowLock
argument_list|(
name|rowid
argument_list|)
expr_stmt|;
name|rowid
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getRowFromLock
argument_list|(
name|lockids
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" locked "
operator|+
name|rowid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" set "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|lockCount
argument_list|)
operator|+
literal|" locks"
argument_list|)
expr_stmt|;
comment|// Abort outstanding locks.
for|for
control|(
name|int
name|i
init|=
name|lockCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|r
operator|.
name|releaseRowLock
argument_list|(
name|lockids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" unlocked "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" released "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|lockCount
argument_list|)
operator|+
literal|" locks"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Startup all our threads.
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Now wait around till all are done.
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Go around again.
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"locks completed."
argument_list|)
expr_stmt|;
block|}
comment|// Test scanners. Writes contents:firstcol and anchor:secondcol
specifier|private
name|void
name|scan
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|cols
index|[]
init|=
block|{
name|CONTENTS_FIRSTCOL
block|,
name|ANCHOR_SECONDCOL
block|}
decl_stmt|;
comment|// Test the Scanner!!!
name|String
index|[]
name|vals1
init|=
operator|new
name|String
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|vals1
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|vals1
index|[
name|k
index|]
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
comment|// 1.  Insert a bunch of values
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|vals1
operator|.
name|length
operator|/
literal|2
condition|;
name|k
operator|++
control|)
block|{
name|String
name|kLabel
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%1$03d"
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|BatchUpdate
name|batchUpdate
init|=
operator|new
name|BatchUpdate
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_vals1_"
operator|+
name|kLabel
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|batchUpdate
operator|.
name|put
argument_list|(
name|cols
index|[
literal|0
index|]
argument_list|,
name|vals1
index|[
name|k
index|]
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|put
argument_list|(
name|cols
index|[
literal|1
index|]
argument_list|,
name|vals1
index|[
name|k
index|]
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
name|numInserted
operator|+=
literal|2
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Write "
operator|+
operator|(
name|vals1
operator|.
name|length
operator|/
literal|2
operator|)
operator|+
literal|" elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// 2.  Scan from cache
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|InternalScanner
name|s
init|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|numFetched
init|=
literal|0
decl_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|byte
index|[]
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|col
argument_list|,
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|k
argument_list|,
name|curval
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
operator|(
name|vals1
operator|.
name|length
operator|/
literal|2
operator|)
operator|+
literal|" rows from cache. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// 3.  Flush to disk
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache flush elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// 4.  Scan from disk
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|s
operator|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numFetched
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|byte
index|[]
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|col
argument_list|,
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|k
argument_list|,
name|curval
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
operator|(
name|vals1
operator|.
name|length
operator|/
literal|2
operator|)
operator|+
literal|" rows from disk. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// 5.  Insert more values
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
name|vals1
operator|.
name|length
operator|/
literal|2
init|;
name|k
operator|<
name|vals1
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|String
name|kLabel
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%1$03d"
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|BatchUpdate
name|batchUpdate
init|=
operator|new
name|BatchUpdate
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_vals1_"
operator|+
name|kLabel
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|batchUpdate
operator|.
name|put
argument_list|(
name|cols
index|[
literal|0
index|]
argument_list|,
name|vals1
index|[
name|k
index|]
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|batchUpdate
operator|.
name|put
argument_list|(
name|cols
index|[
literal|1
index|]
argument_list|,
name|vals1
index|[
name|k
index|]
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|batchUpdate
argument_list|)
expr_stmt|;
name|numInserted
operator|+=
literal|2
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Write "
operator|+
operator|(
name|vals1
operator|.
name|length
operator|/
literal|2
operator|)
operator|+
literal|" rows. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// 6.  Scan from cache and disk
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|s
operator|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numFetched
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|byte
index|[]
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|col
argument_list|,
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|k
argument_list|,
name|curval
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
name|vals1
operator|.
name|length
operator|+
literal|" rows from cache and disk. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// 7.  Flush to disk
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache flush elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// 8.  Scan from disk
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|s
operator|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numFetched
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|byte
index|[]
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|col
argument_list|,
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
name|vals1
operator|.
name|length
operator|+
literal|" rows from disk. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// 9. Scan with a starting point
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|s
operator|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_vals1_500"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numFetched
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|500
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|byte
index|[]
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|col
argument_list|,
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have fetched "
operator|+
operator|(
name|numInserted
operator|/
literal|2
operator|)
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
operator|(
name|numInserted
operator|/
literal|2
operator|)
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
operator|(
name|numFetched
operator|/
literal|2
operator|)
operator|+
literal|" rows from disk with specified start point. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"scan completed."
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: This test depends on testBatchWrite succeeding
specifier|private
name|void
name|splitAndMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|oldRegionPath
init|=
name|r
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|byte
index|[]
name|midKey
init|=
name|r
operator|.
name|compactStores
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|midKey
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HRegion
name|subregions
index|[]
init|=
name|r
operator|.
name|splitRegion
argument_list|(
name|midKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|subregions
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Split region elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of subregions"
argument_list|,
name|subregions
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subregions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subregions
index|[
name|i
index|]
operator|=
name|openClosedRegion
argument_list|(
name|subregions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|subregions
index|[
name|i
index|]
operator|.
name|compactStores
argument_list|()
expr_stmt|;
block|}
comment|// Now merge it back together
name|Path
name|oldRegion1
init|=
name|subregions
index|[
literal|0
index|]
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|Path
name|oldRegion2
init|=
name|subregions
index|[
literal|1
index|]
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|r
operator|=
name|HRegion
operator|.
name|mergeAdjacent
argument_list|(
name|subregions
index|[
literal|0
index|]
argument_list|,
name|subregions
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|region
operator|=
operator|new
name|HRegionIncommon
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Merge regions elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegion1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegion2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegionPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"splitAndMerge completed."
argument_list|)
expr_stmt|;
block|}
comment|// This test verifies that everything is still there after splitting and merging
specifier|private
name|void
name|read
parameter_list|()
throws|throws
name|IOException
block|{
comment|// First verify the data written by testBasic()
name|byte
index|[]
index|[]
name|cols
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ANCHORNUM
operator|+
literal|"[0-9]+"
argument_list|)
block|,
name|CONTENTS_BASIC
block|}
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|InternalScanner
name|s
init|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|contentsFetched
init|=
literal|0
decl_stmt|;
name|int
name|anchorFetched
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|byte
index|[]
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|curval
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|col
argument_list|,
name|CONTENTS_BASIC
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should start with: "
operator|+
name|CONTENTSTR
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
operator|.
name|startsWith
argument_list|(
name|CONTENTSTR
argument_list|)
argument_list|)
expr_stmt|;
name|contentsFetched
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|col
argument_list|)
operator|.
name|startsWith
argument_list|(
name|ANCHORNUM
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|col
argument_list|)
operator|+
literal|" should start with: "
operator|+
name|ANCHORSTR
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
operator|.
name|startsWith
argument_list|(
name|ANCHORSTR
argument_list|)
argument_list|)
expr_stmt|;
name|anchorFetched
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"UNEXPECTED COLUMN "
operator|+
name|col
argument_list|)
expr_stmt|;
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|NUM_VALS
operator|+
literal|" "
operator|+
name|CONTENTS_BASIC
operator|+
literal|" values, but fetched "
operator|+
name|contentsFetched
argument_list|,
name|NUM_VALS
argument_list|,
name|contentsFetched
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|NUM_VALS
operator|+
literal|" "
operator|+
name|ANCHORNUM
operator|+
literal|" values, but fetched "
operator|+
name|anchorFetched
argument_list|,
name|NUM_VALS
argument_list|,
name|anchorFetched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
name|NUM_VALS
operator|+
literal|" rows from disk. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Verify testScan data
name|cols
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FIRSTCOL
block|,
name|ANCHOR_SECONDCOL
block|}
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|s
operator|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|numFetched
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|byte
index|[]
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|col
argument_list|,
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
operator|(
name|numFetched
operator|/
literal|2
operator|)
operator|+
literal|" rows from disk. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Test a scanner which only specifies the column family name
name|cols
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"anchor:"
argument_list|)
block|}
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|s
operator|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|fetched
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fetched
operator|++
expr_stmt|;
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
operator|(
name|NUM_VALS
operator|+
name|numInserted
operator|/
literal|2
operator|)
operator|+
literal|" values, but fetched "
operator|+
name|fetched
argument_list|,
operator|(
name|NUM_VALS
operator|+
name|numInserted
operator|/
literal|2
operator|)
argument_list|,
name|fetched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
name|fetched
operator|+
literal|" rows from disk. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"read completed."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

