begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Reader
import|;
end_import

begin_comment
comment|/** JUnit test case for HLog */
end_comment

begin_class
specifier|public
class|class
name|TestHLog
extends|extends
name|HBaseTestCase
implements|implements
name|HConstants
block|{
specifier|private
name|Path
name|dir
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Enable append for these tests.
name|this
operator|.
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make block sizes small.
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.blocksize"
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.flushlogentries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
comment|// Set the hbase.rootdir to be the home directory in mini dfs.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|this
operator|.
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|this
operator|.
name|dir
argument_list|)
condition|)
block|{
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|shutdownDfs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Just write multiple logs then split.  Before fix for HADOOP-2283, this    * would fail.    * @throws IOException    */
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
decl_stmt|;
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|dir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|howmany
init|=
literal|3
decl_stmt|;
comment|// Add edits for three regions.
try|try
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|howmany
condition|;
name|ii
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|howmany
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|howmany
condition|;
name|j
operator|++
control|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|edit
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Region "
operator|+
name|i
operator|+
literal|": "
operator|+
name|edit
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|edit
argument_list|,
literal|false
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
name|HLog
operator|.
name|splitLog
argument_list|(
name|this
operator|.
name|testDir
argument_list|,
name|this
operator|.
name|dir
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|verifySplits
argument_list|(
name|splits
argument_list|,
name|howmany
argument_list|)
expr_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test new HDFS-265 sync.    * @throws Exception    */
specifier|public
name|void
name|testSync
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// First verify that using streams all works.
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|dir
argument_list|,
name|getName
argument_list|()
operator|+
literal|".fsdos"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|sync
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bytes
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|dir
argument_list|,
literal|"hlogdir"
argument_list|)
decl_stmt|;
name|HLog
name|wal
init|=
operator|new
name|HLog
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|subdir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|total
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|bytes
argument_list|,
name|bytes
argument_list|,
name|kvs
argument_list|,
literal|false
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now call sync and try reading.  Opening a Reader before you sync just
comment|// gives you EOFE.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// Open a Reader.
name|Path
name|walPath
init|=
name|wal
operator|.
name|computeFilename
argument_list|(
name|wal
operator|.
name|getFilenum
argument_list|()
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
name|HLog
operator|.
name|getReader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|walPath
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HLogKey
name|key
init|=
operator|new
name|HLogKey
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add test that checks to see that an open of a Reader works on a file
comment|// that has had a sync done on it.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|bytes
argument_list|,
name|bytes
argument_list|,
name|kvs
argument_list|,
literal|false
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|walPath
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|>=
name|total
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If I sync, should see double the edits.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|walPath
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Now do a test that ensures stuff works when we go over block boundary,
comment|// especially that we return good length on file.
specifier|final
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|1025
operator|*
literal|1024
index|]
decl_stmt|;
comment|// Make a 1M value.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|bytes
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|bytes
argument_list|,
name|bytes
argument_list|,
name|kvs
argument_list|,
literal|false
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now I should have written out lots of blocks.  Sync then read.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|walPath
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Close it and ensure that closed, Reader gets right length also.
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|walPath
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifySplits
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|splits
parameter_list|,
specifier|final
name|int
name|howmany
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|howmany
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SequenceFile
operator|.
name|Reader
name|r
init|=
name|HLog
operator|.
name|getReader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|HLogKey
name|key
init|=
operator|new
name|HLogKey
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|String
name|previousRegion
init|=
literal|null
decl_stmt|;
name|long
name|seqno
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|r
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|kv
argument_list|)
condition|)
block|{
name|String
name|region
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assert that all edits are for same region.
if|if
condition|(
name|previousRegion
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|previousRegion
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|seqno
operator|<
name|key
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
expr_stmt|;
name|seqno
operator|=
name|key
operator|.
name|getLogSeqNum
argument_list|()
expr_stmt|;
name|previousRegion
operator|=
name|region
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" "
operator|+
name|kv
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|howmany
operator|*
name|howmany
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests that we can write out an edit, close, and then read it back in again.    * @throws IOException    */
specifier|public
name|void
name|testEditAdd
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|COL_COUNT
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|regionName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"regionname"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write columns named 1, 2, 3, etc. and then values of single byte
comment|// 1, 2, 3...
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COL_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|append
argument_list|(
name|regionName
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
literal|false
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|logSeqId
init|=
name|log
operator|.
name|startCacheFlush
argument_list|()
decl_stmt|;
name|log
operator|.
name|completeCacheFlush
argument_list|(
name|regionName
argument_list|,
name|tableName
argument_list|,
name|logSeqId
argument_list|)
expr_stmt|;
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
name|log
operator|.
name|computeFilename
argument_list|(
name|log
operator|.
name|getFilenum
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
comment|// Now open a reader on the log and assert append worked.
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|fs
argument_list|,
name|filename
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogKey
name|key
init|=
operator|new
name|HLogKey
argument_list|()
decl_stmt|;
name|KeyValue
name|val
init|=
operator|new
name|KeyValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COL_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionName
argument_list|,
name|key
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|key
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|val
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
comment|// Assert only one more row... the meta flushed row.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionName
argument_list|,
name|key
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tableName
argument_list|,
name|key
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HLog
operator|.
name|METAROW
argument_list|,
name|val
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|HLog
operator|.
name|METAFAMILY
argument_list|,
name|val
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|HLog
operator|.
name|COMPLETE_CACHE_FLUSH
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

