begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClusterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|TestAtomicIncrement
extends|extends
name|HBaseClusterTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAtomicIncrement
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENTS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents:"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testIncrement
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
comment|// Setup
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|CONTENTS
argument_list|,
comment|// Column name
literal|1
argument_list|,
comment|// Max versions
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
comment|// no compression
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
comment|// not in memory
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_LENGTH
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the table
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Give cache flusher and log roller a chance to run
comment|// Otherwise we'll never hit the bloom filter, just the memcache
name|Thread
operator|.
name|sleep
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// Open table
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|column
init|=
literal|"contents:1"
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
comment|// increment by 1:
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// set a weird value, then increment:
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo2"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|2
block|}
decl_stmt|;
name|BatchUpdate
name|bu
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|bu
operator|.
name|put
argument_list|(
name|column
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|bu
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2L
argument_list|,
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo3"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value2
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|bu
operator|=
operator|new
name|BatchUpdate
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|bu
operator|.
name|put
argument_list|(
name|column
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|bu
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
comment|// expected exception.
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
name|IOException
name|i
init|=
operator|(
name|IOException
operator|)
name|e
decl_stmt|;
throw|throw
name|i
throw|;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

