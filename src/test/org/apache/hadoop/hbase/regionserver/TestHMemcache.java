begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|UnexpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/** memcache test case */
end_comment

begin_class
specifier|public
class|class
name|TestHMemcache
extends|extends
name|TestCase
block|{
specifier|private
name|Memcache
name|hmemcache
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROW_COUNT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|COLUMNS_COUNT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY
init|=
literal|"column"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FIRST_ROW
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_VALS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENTS_BASIC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents:basic"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENTSTR
init|=
literal|"contentstr"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANCHORNUM
init|=
literal|"anchor:anchornum-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANCHORSTR
init|=
literal|"anchorstr"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|hmemcache
operator|=
operator|new
name|Memcache
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testGetWithDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|Memcache
name|mc
init|=
operator|new
name|Memcache
argument_list|(
name|HConstants
operator|.
name|FOREVER
argument_list|,
name|KeyValue
operator|.
name|ROOT_COMPARATOR
argument_list|)
decl_stmt|;
specifier|final
name|int
name|start
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|end
init|=
literal|5
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|start
init|;
name|k
operator|<=
name|end
condition|;
name|k
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|KeyValue
name|key
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|CONTENTS_BASIC
argument_list|,
name|now
argument_list|,
operator|(
name|CONTENTSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
name|mc
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
argument_list|,
name|now
argument_list|,
operator|(
name|ANCHORSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|mc
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|KeyValue
name|key
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|start
argument_list|)
argument_list|,
name|CONTENTS_BASIC
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keys
init|=
name|mc
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|KeyValue
name|delete
init|=
name|key
operator|.
name|cloneDelete
argument_list|()
decl_stmt|;
name|mc
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|keys
operator|=
name|mc
operator|.
name|get
argument_list|(
name|delete
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBinary
parameter_list|()
throws|throws
name|IOException
block|{
name|Memcache
name|mc
init|=
operator|new
name|Memcache
argument_list|(
name|HConstants
operator|.
name|FOREVER
argument_list|,
name|KeyValue
operator|.
name|ROOT_COMPARATOR
argument_list|)
decl_stmt|;
specifier|final
name|int
name|start
init|=
literal|43
decl_stmt|;
specifier|final
name|int
name|end
init|=
literal|46
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|start
init|;
name|k
operator|<=
name|end
condition|;
name|k
operator|++
control|)
block|{
name|byte
index|[]
name|kk
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|".META.,table,"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kk
argument_list|)
operator|+
literal|",1,"
operator|+
name|k
argument_list|)
decl_stmt|;
name|KeyValue
name|key
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|CONTENTS_BASIC
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|CONTENTSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
name|mc
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|//      key = new KeyValue(row, Bytes.toBytes(ANCHORNUM + k),
comment|//        System.currentTimeMillis(),
comment|//        (ANCHORSTR + k).getBytes(HConstants.UTF8_ENCODING));
comment|//      mc.add(key);
comment|//      System.out.println(key);
block|}
name|int
name|index
init|=
name|start
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|mc
operator|.
name|memcache
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|kv
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// Hardcoded offsets into String
name|String
name|str
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|,
literal|13
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bb
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|bbStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|bb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|bbStr
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * @throws IOException     */
specifier|public
name|void
name|testMemcache
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|k
init|=
name|FIRST_ROW
init|;
name|k
operator|<=
name|NUM_VALS
condition|;
name|k
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
decl_stmt|;
name|KeyValue
name|key
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|CONTENTS_BASIC
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|CONTENTSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
name|hmemcache
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|ANCHORSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|hmemcache
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|// this.hmemcache.dump();
comment|// Read them back
for|for
control|(
name|int
name|k
init|=
name|FIRST_ROW
init|;
name|k
operator|<=
name|NUM_VALS
condition|;
name|k
operator|++
control|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
decl_stmt|;
name|KeyValue
name|key
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|CONTENTS_BASIC
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|results
operator|=
name|hmemcache
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"no data for "
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bodystr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|teststr
init|=
name|CONTENTSTR
operator|+
name|k
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect value for key: ("
operator|+
name|key
operator|.
name|toString
argument_list|()
operator|+
literal|"), expected: '"
operator|+
name|teststr
operator|+
literal|"' got: '"
operator|+
name|bodystr
operator|+
literal|"'"
argument_list|,
name|teststr
operator|.
name|compareTo
argument_list|(
name|bodystr
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|results
operator|=
name|hmemcache
operator|.
name|get
argument_list|(
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"no data for "
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|kv
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bodystr
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|teststr
operator|=
name|ANCHORSTR
operator|+
name|k
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect value for key: ("
operator|+
name|key
operator|.
name|toString
argument_list|()
operator|+
literal|"), expected: '"
operator|+
name|teststr
operator|+
literal|"' got: '"
operator|+
name|bodystr
operator|+
literal|"'"
argument_list|,
name|teststr
operator|.
name|compareTo
argument_list|(
name|bodystr
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|getRowName
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getColumnName
parameter_list|(
specifier|final
name|int
name|rowIndex
parameter_list|,
specifier|final
name|int
name|colIndex
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_FAMILY
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|rowIndex
argument_list|)
operator|+
literal|";"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|colIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Adds {@link #ROW_COUNT} rows and {@link #COLUMNS_COUNT}    * @param hmc Instance to add rows to.    * @throws IOException     */
specifier|private
name|void
name|addRows
parameter_list|(
specifier|final
name|Memcache
name|hmc
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|COLUMNS_COUNT
condition|;
name|ii
operator|++
control|)
block|{
name|byte
index|[]
name|k
init|=
name|getColumnName
argument_list|(
name|i
argument_list|,
name|ii
argument_list|)
decl_stmt|;
name|hmc
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
name|i
argument_list|)
argument_list|,
name|k
argument_list|,
name|timestamp
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runSnapshot
parameter_list|(
specifier|final
name|Memcache
name|hmc
parameter_list|)
throws|throws
name|UnexpectedException
block|{
comment|// Save off old state.
name|int
name|oldHistorySize
init|=
name|hmc
operator|.
name|getSnapshot
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|hmc
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|KeyValue
argument_list|>
name|ss
init|=
name|hmc
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
comment|// Make some assertions about what just happened.
name|assertTrue
argument_list|(
literal|"History size has not increased"
argument_list|,
name|oldHistorySize
operator|<
name|ss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hmc
operator|.
name|clearSnapshot
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test memcache snapshots    * @throws IOException    */
specifier|public
name|void
name|testSnapshotting
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|snapshotCount
init|=
literal|5
decl_stmt|;
comment|// Add some rows, run a snapshot. Do it a few times.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|snapshotCount
condition|;
name|i
operator|++
control|)
block|{
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|runSnapshot
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|KeyValue
argument_list|>
name|ss
init|=
name|this
operator|.
name|hmemcache
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"History not being cleared"
argument_list|,
literal|0
argument_list|,
name|ss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|isExpectedRowWithoutTimestamps
parameter_list|(
specifier|final
name|int
name|rowIndex
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|String
name|expectedColname
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|getColumnName
argument_list|(
name|rowIndex
argument_list|,
name|i
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|colnameStr
init|=
name|kv
operator|.
name|getColumnString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Column name"
argument_list|,
name|colnameStr
argument_list|,
name|expectedColname
argument_list|)
expr_stmt|;
comment|// Value is column name as bytes.  Usually result is
comment|// 100 bytes in size at least. This is the default size
comment|// for BytesWriteable.  For comparison, convert bytes to
comment|// String and trim to remove trailing null bytes.
name|String
name|colvalueStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Content"
argument_list|,
name|colnameStr
argument_list|,
name|colvalueStr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test getFull from memcache    * @throws InterruptedException     */
specifier|public
name|void
name|testGetFull
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|KeyValue
argument_list|,
name|Counter
argument_list|>
name|versionCounter
init|=
operator|new
name|TreeMap
argument_list|<
name|KeyValue
argument_list|,
name|Counter
argument_list|>
argument_list|(
name|this
operator|.
name|hmemcache
operator|.
name|comparatorIgnoreTimestamp
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
name|i
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
init|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|this
operator|.
name|hmemcache
operator|.
name|getFull
argument_list|(
name|kv
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|versionCounter
argument_list|,
name|deletes
argument_list|,
name|all
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|isExpectedRowWithoutTimestamps
argument_list|(
name|i
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
comment|// Test getting two versions.
name|versionCounter
operator|=
operator|new
name|TreeMap
argument_list|<
name|KeyValue
argument_list|,
name|Counter
argument_list|>
argument_list|(
name|this
operator|.
name|hmemcache
operator|.
name|comparatorIgnoreTimestamp
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
name|i
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|deletes
init|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|this
operator|.
name|hmemcache
operator|.
name|getFull
argument_list|(
name|kv
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|versionCounter
argument_list|,
name|deletes
argument_list|,
name|all
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|previousRow
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|k
range|:
name|all
control|)
block|{
if|if
condition|(
name|previousRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|this
operator|.
name|hmemcache
operator|.
name|comparator
operator|.
name|compareRows
argument_list|(
name|k
argument_list|,
name|previousRow
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|previousRow
operator|=
name|k
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ROW_COUNT
operator|*
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test getNextRow from memcache    * @throws InterruptedException     */
specifier|public
name|void
name|testGetNextRow
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
comment|// Add more versions to make it a little more interesting.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|KeyValue
name|closestToEmpty
init|=
name|this
operator|.
name|hmemcache
operator|.
name|getNextRow
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|closestToEmpty
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|nr
init|=
name|this
operator|.
name|hmemcache
operator|.
name|getNextRow
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
name|i
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|ROW_COUNT
condition|)
block|{
name|assertEquals
argument_list|(
name|nr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|nr
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Test getClosest from memcache    * @throws InterruptedException     */
specifier|public
name|void
name|testGetClosest
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
comment|// Add more versions to make it a little more interesting.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|this
operator|.
name|hmemcache
operator|.
name|getNextRow
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|kv
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|nr
init|=
name|this
operator|.
name|hmemcache
operator|.
name|getNextRow
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
name|i
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|ROW_COUNT
condition|)
block|{
name|assertEquals
argument_list|(
name|nr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|nr
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|getRowName
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test memcache scanner    * @throws IOException    * @throws InterruptedException     */
specifier|public
name|void
name|testScanner
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|COLUMNS_COUNT
condition|;
name|ii
operator|++
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|getColumnName
argument_list|(
name|i
argument_list|,
name|ii
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|hmemcache
operator|.
name|getScanner
argument_list|(
name|timestamp
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|getRowName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Count of columns"
argument_list|,
name|COLUMNS_COUNT
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|isExpectedRowWithoutTimestamps
argument_list|(
name|i
argument_list|,
name|results
argument_list|)
expr_stmt|;
comment|// Clear out set.  Otherwise row results accumulate.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** For HBASE-528 */
specifier|public
name|void
name|testGetRowKeyAtOrBefore
parameter_list|()
block|{
comment|// set up some test data
name|byte
index|[]
name|t10
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"010"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t20
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"020"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t30
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"030"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t35
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"035"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t40
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"040"
argument_list|)
decl_stmt|;
name|hmemcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t10
argument_list|,
literal|"t10 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hmemcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t20
argument_list|,
literal|"t20 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hmemcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t30
argument_list|,
literal|"t30 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hmemcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t35
argument_list|,
literal|"t35 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// write a delete in there to see if things still work ok
name|hmemcache
operator|.
name|add
argument_list|(
name|getDeleteKV
argument_list|(
name|t35
argument_list|)
argument_list|)
expr_stmt|;
name|hmemcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t40
argument_list|,
literal|"t40 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
comment|// try finding "015"
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|hmemcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|t15
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"015"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|hmemcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
name|t15
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|results
operator|.
name|last
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|kv
argument_list|,
name|t10
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// try "020", we should get that row exactly
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|hmemcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|hmemcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|t20
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|last
argument_list|()
argument_list|,
name|t20
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// try "030", we should get that row exactly
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|hmemcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|hmemcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|t30
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|last
argument_list|()
argument_list|,
name|t30
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// try "038", should skip the deleted "035" and give "030"
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|hmemcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t38
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"038"
argument_list|)
decl_stmt|;
name|hmemcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|t38
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|last
argument_list|()
argument_list|,
name|t30
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// try "050", should get stuff from "040"
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|hmemcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t50
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"050"
argument_list|)
decl_stmt|;
name|hmemcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|t50
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|last
argument_list|()
argument_list|,
name|t40
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|KeyValue
name|getDeleteKV
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_col:"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|KeyValue
name|getKV
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_col:"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Test memcache scanner scanning cached rows, HBASE-686    * @throws IOException    */
specifier|public
name|void
name|testScanner_686
parameter_list|()
throws|throws
name|IOException
block|{
name|addRows
argument_list|(
name|this
operator|.
name|hmemcache
argument_list|)
expr_stmt|;
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|cols
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|COLUMNS_COUNT
condition|;
name|ii
operator|++
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
name|getColumnName
argument_list|(
name|i
argument_list|,
name|ii
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//starting from each row, validate results should contain the starting row
for|for
control|(
name|int
name|startRowId
init|=
literal|0
init|;
name|startRowId
operator|<
name|ROW_COUNT
condition|;
name|startRowId
operator|++
control|)
block|{
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|hmemcache
operator|.
name|getScanner
argument_list|(
name|timestamp
argument_list|,
name|cols
argument_list|,
name|getRowName
argument_list|(
name|startRowId
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|rowId
init|=
name|startRowId
operator|+
name|i
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Row name"
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|getRowName
argument_list|(
name|rowId
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Count of columns"
argument_list|,
name|COLUMNS_COUNT
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|results
control|)
block|{
name|row
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|isExpectedRowWithoutTimestamps
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|// Clear out set.  Otherwise row results accumulate.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

