begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|UnexpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/** memcache test case */
end_comment

begin_class
specifier|public
class|class
name|TestMemcache
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Memcache
name|memcache
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROW_COUNT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|QUALIFIER_COUNT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENTS_BASIC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents:basic"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENTSTR
init|=
literal|"contentstr"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|memcache
operator|=
operator|new
name|Memcache
argument_list|()
expr_stmt|;
block|}
comment|/**     * Test memcache snapshot happening while scanning.    * @throws IOException    */
specifier|public
name|void
name|testScanAcrossSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|rowCount
init|=
name|addRows
argument_list|(
name|this
operator|.
name|memcache
argument_list|)
decl_stmt|;
name|KeyValueScanner
index|[]
name|memcachescanners
init|=
name|this
operator|.
name|memcache
operator|.
name|getScanners
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|StoreScanner
name|s
init|=
operator|new
name|StoreScanner
argument_list|(
name|scan
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|this
operator|.
name|memcache
operator|.
name|comparator
argument_list|,
literal|null
argument_list|,
name|memcachescanners
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Now assert can count same number even if a snapshot mid-scan.
name|s
operator|=
operator|new
name|StoreScanner
argument_list|(
name|scan
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|this
operator|.
name|memcache
operator|.
name|comparator
argument_list|,
literal|null
argument_list|,
name|memcachescanners
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
try|try
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Assert the stuff is coming out in right order.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|count
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|memcache
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshotted"
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test memcache snapshots    * @throws IOException    */
specifier|public
name|void
name|testSnapshotting
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|snapshotCount
init|=
literal|5
decl_stmt|;
comment|// Add some rows, run a snapshot. Do it a few times.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|snapshotCount
condition|;
name|i
operator|++
control|)
block|{
name|addRows
argument_list|(
name|this
operator|.
name|memcache
argument_list|)
expr_stmt|;
name|runSnapshot
argument_list|(
name|this
operator|.
name|memcache
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|KeyValue
argument_list|,
name|?
argument_list|>
name|ss
init|=
name|this
operator|.
name|memcache
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"History not being cleared"
argument_list|,
literal|0
argument_list|,
name|ss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMultipleVersionsSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|Memcache
name|m
init|=
operator|new
name|Memcache
argument_list|(
name|HConstants
operator|.
name|FOREVER
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
name|long
index|[]
name|stamps
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
block|}
decl_stmt|;
name|KeyValue
name|key0
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf
argument_list|,
name|stamps
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|KeyValue
name|key1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf
argument_list|,
name|stamps
index|[
literal|1
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|KeyValue
name|key2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf
argument_list|,
name|stamps
index|[
literal|2
index|]
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
name|key0
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|key1
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|key2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected memcache to hold 3 values, actually has "
operator|+
name|m
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|,
name|m
operator|.
name|memcache
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBinary
parameter_list|()
throws|throws
name|IOException
block|{
name|Memcache
name|mc
init|=
operator|new
name|Memcache
argument_list|(
name|HConstants
operator|.
name|FOREVER
argument_list|,
name|KeyValue
operator|.
name|ROOT_COMPARATOR
argument_list|)
decl_stmt|;
specifier|final
name|int
name|start
init|=
literal|43
decl_stmt|;
specifier|final
name|int
name|end
init|=
literal|46
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|start
init|;
name|k
operator|<=
name|end
condition|;
name|k
operator|++
control|)
block|{
name|byte
index|[]
name|kk
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|".META.,table,"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kk
argument_list|)
operator|+
literal|",1,"
operator|+
name|k
argument_list|)
decl_stmt|;
name|KeyValue
name|key
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|CONTENTS_BASIC
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|(
name|CONTENTSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
decl_stmt|;
name|mc
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|//      key = new KeyValue(row, Bytes.toBytes(ANCHORNUM + k),
comment|//        System.currentTimeMillis(),
comment|//        (ANCHORSTR + k).getBytes(HConstants.UTF8_ENCODING));
comment|//      mc.add(key);
comment|//      System.out.println(key);
block|}
name|int
name|index
init|=
name|start
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|KeyValue
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|mc
operator|.
name|memcache
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// Hardcoded offsets into String
name|String
name|str
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|,
literal|13
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bb
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|bbStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|bb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|bbStr
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Get tests
comment|//////////////////////////////////////////////////////////////////////////////
comment|/** For HBASE-528 */
specifier|public
name|void
name|testGetRowKeyAtOrBefore
parameter_list|()
block|{
comment|// set up some test data
name|byte
index|[]
name|t10
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"010"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t20
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"020"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t30
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"030"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t35
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"035"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|t40
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"040"
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t10
argument_list|,
literal|"t10 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t20
argument_list|,
literal|"t20 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t30
argument_list|,
literal|"t30 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t35
argument_list|,
literal|"t35 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// write a delete in there to see if things still work ok
name|memcache
operator|.
name|add
argument_list|(
name|getDeleteKV
argument_list|(
name|t35
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|getKV
argument_list|(
name|t40
argument_list|,
literal|"t40 bytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
comment|// try finding "015"
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|memcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|t15
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"015"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
name|t15
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|results
operator|.
name|last
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|kv
argument_list|,
name|t10
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// try "020", we should get that row exactly
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|memcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|t20
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|last
argument_list|()
argument_list|,
name|t20
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// try "030", we should get that row exactly
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|memcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|t30
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|last
argument_list|()
argument_list|,
name|t30
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// try "038", should skip the deleted "035" and give "030"
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|memcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t38
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"038"
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|t38
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|last
argument_list|()
argument_list|,
name|t30
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// try "050", should get stuff from "040"
name|results
operator|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|this
operator|.
name|memcache
operator|.
name|comparator
operator|.
name|getComparatorIgnoringType
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|t50
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"050"
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|getRowKeyAtOrBefore
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|t50
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|last
argument_list|()
argument_list|,
name|t40
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** Test getNextRow from memcache    * @throws InterruptedException     */
specifier|public
name|void
name|testGetNextRow
parameter_list|()
throws|throws
name|Exception
block|{
name|addRows
argument_list|(
name|this
operator|.
name|memcache
argument_list|)
expr_stmt|;
comment|// Add more versions to make it a little more interesting.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|memcache
argument_list|)
expr_stmt|;
name|KeyValue
name|closestToEmpty
init|=
name|this
operator|.
name|memcache
operator|.
name|getNextRow
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|closestToEmpty
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|nr
init|=
name|this
operator|.
name|memcache
operator|.
name|getNextRow
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|ROW_COUNT
condition|)
block|{
name|assertEquals
argument_list|(
name|nr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|nr
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|//starting from each row, validate results should contain the starting row
for|for
control|(
name|int
name|startRowId
init|=
literal|0
init|;
name|startRowId
operator|<
name|ROW_COUNT
condition|;
name|startRowId
operator|++
control|)
block|{
name|InternalScanner
name|scanner
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRowId
argument_list|)
argument_list|)
argument_list|,
name|FAMILY
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|this
operator|.
name|memcache
operator|.
name|comparator
argument_list|,
literal|null
argument_list|,
operator|new
name|KeyValueScanner
index|[]
block|{
name|memcache
operator|.
name|getScanners
argument_list|()
index|[
literal|0
index|]
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|rowId
init|=
name|startRowId
operator|+
name|i
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Row name"
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowId
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Count of columns"
argument_list|,
name|QUALIFIER_COUNT
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|results
control|)
block|{
name|row
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|isExpectedRowWithoutTimestamps
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|// Clear out set.  Otherwise row results accumulate.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testGet_Basic_Found
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|//Setting up memcache
name|KeyValue
name|add1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|add2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|add3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|add1
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|add2
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|add3
argument_list|)
expr_stmt|;
comment|//test
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|qf2
argument_list|)
expr_stmt|;
name|long
name|ttl
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|QueryMatcher
name|matcher
init|=
operator|new
name|QueryMatcher
argument_list|(
name|get
argument_list|,
name|fam
argument_list|,
name|columns
argument_list|,
name|ttl
argument_list|,
name|KeyValue
operator|.
name|KEY_COMPARATOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|res
init|=
name|memcache
operator|.
name|get
argument_list|(
name|matcher
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGet_Basic_NotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|//Setting up memcache
name|KeyValue
name|add1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|add3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|add1
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|add3
argument_list|)
expr_stmt|;
comment|//test
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|qf2
argument_list|)
expr_stmt|;
name|long
name|ttl
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|QueryMatcher
name|matcher
init|=
operator|new
name|QueryMatcher
argument_list|(
name|get
argument_list|,
name|fam
argument_list|,
name|columns
argument_list|,
name|ttl
argument_list|,
name|KeyValue
operator|.
name|KEY_COMPARATOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|res
init|=
name|memcache
operator|.
name|get
argument_list|(
name|matcher
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGet_MemcacheAndSnapShot
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|//Creating get
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|qf2
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|qf4
argument_list|)
expr_stmt|;
name|long
name|ttl
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|QueryMatcher
name|matcher
init|=
operator|new
name|QueryMatcher
argument_list|(
name|get
argument_list|,
name|fam
argument_list|,
name|columns
argument_list|,
name|ttl
argument_list|,
name|KeyValue
operator|.
name|KEY_COMPARATOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//Setting up memcache
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
comment|//Creating a snapshot
name|memcache
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memcache
operator|.
name|snapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Adding value to "new" memcache
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf4
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf5
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|res
init|=
name|memcache
operator|.
name|get
argument_list|(
name|matcher
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGet_SpecificTimeStamp
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|++
decl_stmt|;
name|long
name|ts3
init|=
name|ts2
operator|++
decl_stmt|;
comment|//Creating get
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|ts2
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|qf1
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|qf2
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|qf3
argument_list|)
expr_stmt|;
name|long
name|ttl
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|QueryMatcher
name|matcher
init|=
operator|new
name|QueryMatcher
argument_list|(
name|get
argument_list|,
name|fam
argument_list|,
name|columns
argument_list|,
name|ttl
argument_list|,
name|KeyValue
operator|.
name|KEY_COMPARATOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//Setting up expected
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|ts2
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
comment|//Setting up memcache
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|ts1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|ts3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
comment|//Get
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|memcache
operator|.
name|get
argument_list|(
name|matcher
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Delete tests
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|testGetWithDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|KeyValue
name|put1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|KeyValue
name|put2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|ts3
init|=
name|ts2
operator|+
literal|1
decl_stmt|;
name|KeyValue
name|put3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|del2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|delete
argument_list|(
name|del2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|del2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|KeyValue
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|memcache
operator|.
name|memcache
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetWithDeleteColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|KeyValue
name|put1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|KeyValue
name|put2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|ts3
init|=
name|ts2
operator|+
literal|1
decl_stmt|;
name|KeyValue
name|put3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|del2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|delete
argument_list|(
name|del2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|del2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|KeyValue
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|memcache
operator|.
name|memcache
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetWithDeleteFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|KeyValue
name|put1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|put2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|put3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|put4
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|memcache
operator|.
name|add
argument_list|(
name|put4
argument_list|)
expr_stmt|;
name|KeyValue
name|del
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|KeyValue
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|memcache
operator|.
name|memcache
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testKeepDeleteInMemcache
parameter_list|()
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|memcache
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|delete
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRetainsDeleteVersion
parameter_list|()
throws|throws
name|IOException
block|{
comment|// add a put to memcache
name|memcache
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
literal|"dont-care"
argument_list|)
argument_list|)
expr_stmt|;
comment|// now process a specific delete:
name|KeyValue
name|delete
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRetainsDeleteColumn
parameter_list|()
throws|throws
name|IOException
block|{
comment|// add a put to memcache
name|memcache
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
literal|"dont-care"
argument_list|)
argument_list|)
expr_stmt|;
comment|// now process a specific delete:
name|KeyValue
name|delete
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRetainsDeleteFamily
parameter_list|()
throws|throws
name|IOException
block|{
comment|// add a put to memcache
name|memcache
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
literal|"dont-care"
argument_list|)
argument_list|)
expr_stmt|;
comment|// now process a specific delete:
name|KeyValue
name|delete
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
literal|"dont-care"
argument_list|)
decl_stmt|;
name|memcache
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|memcache
operator|.
name|memcache
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Helpers
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
name|byte
index|[]
name|makeQualifier
parameter_list|(
specifier|final
name|int
name|i1
parameter_list|,
specifier|final
name|int
name|i2
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i1
argument_list|)
operator|+
literal|";"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i2
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Adds {@link #ROW_COUNT} rows and {@link #COLUMNS_COUNT}    * @param hmc Instance to add rows to.    * @return How many rows we added.    * @throws IOException     */
specifier|private
name|int
name|addRows
parameter_list|(
specifier|final
name|Memcache
name|hmc
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|QUALIFIER_COUNT
condition|;
name|ii
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|makeQualifier
argument_list|(
name|i
argument_list|,
name|ii
argument_list|)
decl_stmt|;
name|hmc
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|FAMILY
argument_list|,
name|qf
argument_list|,
name|timestamp
argument_list|,
name|qf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ROW_COUNT
return|;
block|}
specifier|private
name|void
name|runSnapshot
parameter_list|(
specifier|final
name|Memcache
name|hmc
parameter_list|)
throws|throws
name|UnexpectedException
block|{
comment|// Save off old state.
name|int
name|oldHistorySize
init|=
name|hmc
operator|.
name|getSnapshot
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|hmc
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|KeyValue
argument_list|,
name|?
argument_list|>
name|ss
init|=
name|hmc
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
comment|// Make some assertions about what just happened.
name|assertTrue
argument_list|(
literal|"History size has not increased"
argument_list|,
name|oldHistorySize
operator|<
name|ss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hmc
operator|.
name|clearSnapshot
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|isExpectedRowWithoutTimestamps
parameter_list|(
specifier|final
name|int
name|rowIndex
parameter_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|String
name|expectedColname
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|makeQualifier
argument_list|(
name|rowIndex
argument_list|,
name|i
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|colnameStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Column name"
argument_list|,
name|colnameStr
argument_list|,
name|expectedColname
argument_list|)
expr_stmt|;
comment|// Value is column name as bytes.  Usually result is
comment|// 100 bytes in size at least. This is the default size
comment|// for BytesWriteable.  For comparison, convert bytes to
comment|// String and trim to remove trailing null bytes.
name|String
name|colvalueStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Content"
argument_list|,
name|colnameStr
argument_list|,
name|colvalueStr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|KeyValue
name|getDeleteKV
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_col:"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|KeyValue
name|getKV
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_col:"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

