begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|TestHRegionInfo
extends|extends
name|HBaseTestCase
block|{
specifier|public
name|void
name|testParse
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
name|getName
argument_list|()
decl_stmt|;
name|String
name|row
init|=
name|getName
argument_list|()
decl_stmt|;
name|long
name|id
init|=
literal|12345
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|parse
init|=
name|HRegionInfo
operator|.
name|parseMetaRegionRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
literal|","
operator|+
name|row
operator|+
literal|","
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parse
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parse
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parse
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateHRegionInfoName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"tablename"
decl_stmt|;
specifier|final
name|byte
index|[]
name|tn
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|startKey
init|=
literal|"startkey"
decl_stmt|;
specifier|final
name|byte
index|[]
name|sk
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startKey
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|"id"
decl_stmt|;
name|byte
index|[]
name|name
init|=
name|HRegionInfo
operator|.
name|createRegionName
argument_list|(
name|tn
argument_list|,
name|sk
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|String
name|nameStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nameStr
argument_list|,
name|tableName
operator|+
literal|","
operator|+
name|startKey
operator|+
literal|","
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

