begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
specifier|public
class|class
name|TestStoreScanner
extends|extends
name|TestCase
block|{
specifier|final
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
comment|/**    * Test utility for building a NavigableSet for scanners.    * @param strCols    * @return    */
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|getCols
parameter_list|(
name|String
modifier|...
name|strCols
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|cols
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|strCols
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
return|return
name|cols
return|;
block|}
comment|/**    * Test test shows exactly how the matcher's return codes confuses the StoreScanner    * and prevent it from doing the right thing.  Seeking once, then nexting twice    * should return R1, then R2, but in this case it doesnt.    * @throws IOException    */
specifier|public
name|void
name|testWontNextToNext
parameter_list|()
throws|throws
name|IOException
block|{
comment|// build the scan file:
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs
argument_list|)
block|}
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// this only uses maxVersions (default=1) and TimeRange (default=all)
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be ok...
comment|// now scan _next_ again.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteVersionSameTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs
argument_list|)
block|}
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case where there is a delete row 'in front of' the next row, the scanner    * will move to the next row.    */
specifier|public
name|void
name|testDeletedRowThenGoodRow
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|20
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs
argument_list|)
block|}
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteVersionMaskingMultiplePuts
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|kvs1
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValue
index|[]
name|kvs2
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|500
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs1
argument_list|)
block|,
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs2
argument_list|)
block|}
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
comment|// the two put at ts=now will be masked by the 1 delete, and
comment|// since the scan default returns 1 version we'll return the newest
comment|// key, which is kvs[2], now-100.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs2
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteVersionsMixedAndMultipleVersionReturn
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|kvs1
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValue
index|[]
name|kvs2
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|500
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|+
literal|500
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"z"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs1
argument_list|)
block|,
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs2
argument_list|)
block|}
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs2
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs2
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWildCardOneVersionScan
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,    }
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs
argument_list|)
block|}
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWildCardScannerUnderDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
comment|// orphaned delete column.
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// column b
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
comment|// column c
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// no
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|9
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
comment|// column d
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|9
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// no
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|8
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// no
block|}
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs
argument_list|)
block|}
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|6
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|7
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"e"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"e"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"f"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"g"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"g"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"h"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"i"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,      }
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs
argument_list|)
block|}
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
name|kvs
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|9
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|8
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|5
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs
argument_list|)
block|,     }
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSkipColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"e"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"f"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"g"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"h"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"i"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|kvs
argument_list|)
block|}
decl_stmt|;
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|scanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
name|kvs
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|KeyValue
index|[]
name|stdKvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"e"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"f"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"g"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"h"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"i"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 9...
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:2"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:2"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 12...
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:3"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:3"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:3"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 15 ...
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:4"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:4"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:4"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 18 ..
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:5"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:5"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 20...
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:6"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:6"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 22...
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:7"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:7"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 24...
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:8"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"R:8"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 26 ..
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"RA:1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 27...
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"RA:2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// 28..
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"RA:3"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,   }
decl_stmt|;
specifier|private
name|StoreScanner
name|getTestScanner
parameter_list|(
name|Scan
name|s
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|cols
parameter_list|)
block|{
name|KeyValueScanner
index|[]
name|scanners
init|=
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|stdKvs
argument_list|)
block|}
decl_stmt|;
return|return
operator|new
name|StoreScanner
argument_list|(
name|s
argument_list|,
name|CF
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|,
name|cols
argument_list|,
name|scanners
argument_list|)
return|;
block|}
comment|// Test new and old row prefix filters.
specifier|public
name|void
name|testNewRowPrefixFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|Filter
name|f
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R:"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R:7"
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|rowPrefixFilter
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOldRowPrefixFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|RowFilterInterface
name|f
init|=
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|PrefixRowFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R:"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R:7"
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setOldFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|rowPrefixFilter
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rowPrefixFilter
parameter_list|(
name|Scan
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreScanner
name|scan
init|=
name|getTestScanner
argument_list|(
name|s
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stdKvs
index|[
literal|22
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stdKvs
index|[
literal|23
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stdKvs
index|[
literal|24
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stdKvs
index|[
literal|25
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test new and old row-inclusive stop filter.
specifier|public
name|void
name|testNewRowInclusiveStopFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|Filter
name|f
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|InclusiveStopFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R:3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|rowInclusiveStopFilter
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOldRowInclusiveTopFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|RowFilterInterface
name|f
init|=
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|InclusiveStopRowFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R:3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setOldFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|rowInclusiveStopFilter
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rowInclusiveStopFilter
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreScanner
name|s
init|=
name|getTestScanner
argument_list|(
name|scan
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
comment|// read crap.
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stdKvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stdKvs
index|[
literal|9
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stdKvs
index|[
literal|12
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// without aggressive peeking, the scanner doesnt know if the next row is good or not
comment|// under the affects of a filter.
name|assertFalse
argument_list|(
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

