begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_comment
comment|/**  * Test compactions  */
end_comment

begin_class
specifier|public
class|class
name|TestCompaction
extends|extends
name|HBaseTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCompaction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HRegion
name|r
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|compactionDir
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|regionCompactionDir
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY
init|=
name|fam1
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|STARTROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY_TEXT
init|=
name|COLUMN_FAMILY
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|COMPACTION_THRESHOLD
init|=
name|MAXVERSIONS
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
comment|/** constructor */
specifier|public
name|TestCompaction
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Set cache flush size to 1MB
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.flush.size"
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.block.multiplier"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
comment|// Make the hbase rootdir match the minidfs we just span up
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|this
operator|.
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|r
operator|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|compactionDir
operator|=
name|HRegion
operator|.
name|getCompactionDir
argument_list|(
name|this
operator|.
name|r
operator|.
name|getBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionCompactionDir
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|compactionDir
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|HLog
name|hlog
init|=
name|r
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|this
operator|.
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|hlog
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cluster
operator|!=
literal|null
condition|)
block|{
name|shutdownDfs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Run compaction and flushing memstore    * Assert deletes get cleaned up.    * @throws Exception    */
specifier|public
name|void
name|testCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COMPACTION_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|// Add more content.  Now there are about 5 versions of each column.
comment|// Default is that there only 3 (MAXVERSIONS) versions allowed per column.
comment|// Assert == 3 when we ask for versions.
name|addContent
argument_list|(
operator|new
name|HRegionIncommon
argument_list|(
name|r
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// FIX!!
comment|//    Cell[] cellValues =
comment|//      Cell.createSingleCellArray(r.get(STARTROW, COLUMN_FAMILY_TEXT, -1, 100 /*Too many*/));
name|Result
name|result
init|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|STARTROW
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Assert that I can get 3 versions since it is the max I should get
name|assertEquals
argument_list|(
name|COMPACTION_THRESHOLD
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//    assertEquals(cellValues.length, 3);
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|r
operator|.
name|compactStores
argument_list|()
expr_stmt|;
comment|// check compaction dir is exists
name|assertTrue
argument_list|(
name|this
operator|.
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|this
operator|.
name|compactionDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// check Compaction Dir for this Regions is cleaned up
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|this
operator|.
name|regionCompactionDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Always 3 versions if that is what max versions is.
name|byte
index|[]
name|secondRowBytes
init|=
name|START_KEY
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
comment|// Increment the least significant character so we get to next row.
name|secondRowBytes
index|[
name|START_KEY_BYTES
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
comment|// FIX
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Assert that I can get 3 versions since it is the max I should get
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|//    cellValues = Cell.createSingleCellArray(r.get(secondRowBytes, COLUMN_FAMILY_TEXT, -1, 100/*Too many*/));
comment|//    LOG.info("Count of " + Bytes.toString(secondRowBytes) + ": " +
comment|//      cellValues.length);
comment|//    assertTrue(cellValues.length == 3);
comment|// Now add deletes to memstore and then flush it.  That will put us over
comment|// the compaction threshold of 3 store files.  Compacting these store files
comment|// should result in a compacted store file that has no references to the
comment|// deleted row.
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
block|{
name|COLUMN_FAMILY
block|,
literal|null
block|}
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|r
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Assert deleted.
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a bit of data and flush.  Start adding at 'bbb'.
name|createSmallerStoreFile
argument_list|(
name|this
operator|.
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Assert that the second row is still deleted.
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Force major compaction.
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the store files do have some 'aaa' keys in them -- exactly 3.
comment|// Also, that compacted store files do not have any secondRowBytes because
comment|// they were deleted.
name|int
name|count
init|=
literal|0
decl_stmt|;
name|boolean
name|containsStartRow
init|=
literal|false
decl_stmt|;
for|for
control|(
name|StoreFile
name|f
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|getStorefiles
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|HFileScanner
name|scanner
init|=
name|f
operator|.
name|getCompactionReader
argument_list|()
operator|.
name|getScanner
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|()
expr_stmt|;
do|do
block|{
name|byte
index|[]
name|row
init|=
name|scanner
operator|.
name|getKeyValue
argument_list|()
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|STARTROW
argument_list|)
condition|)
block|{
name|containsStartRow
operator|=
literal|true
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// After major compaction, should be none of these rows in compacted
comment|// file.
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|secondRowBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
name|assertTrue
argument_list|(
name|containsStartRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// Do a simple TTL test.
specifier|final
name|int
name|ttlInSeconds
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|store
operator|.
name|ttl
operator|=
name|ttlInSeconds
operator|*
literal|1000
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|ttlInSeconds
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|count
operator|=
name|count
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|count
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StoreFile
name|f
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|getStorefiles
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|HFileScanner
name|scanner
init|=
name|f
operator|.
name|getReader
argument_list|()
operator|.
name|getScanner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|scanner
operator|.
name|seekTo
argument_list|()
condition|)
block|{
continue|continue;
block|}
do|do
block|{
name|count
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|createStoreFile
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createSmallerStoreFile
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|,
operator|(
literal|"bbb"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

