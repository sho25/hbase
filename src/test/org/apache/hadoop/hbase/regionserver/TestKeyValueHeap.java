begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|TestKeyValueHeap
extends|extends
name|HBaseTestCase
implements|implements
name|HConstants
block|{
specifier|private
specifier|final
name|boolean
name|PRINT
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Scanner
argument_list|>
name|scanners
init|=
operator|new
name|ArrayList
argument_list|<
name|Scanner
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|row1
decl_stmt|;
specifier|private
name|byte
index|[]
name|fam1
decl_stmt|;
specifier|private
name|byte
index|[]
name|col1
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
name|byte
index|[]
name|row2
decl_stmt|;
specifier|private
name|byte
index|[]
name|fam2
decl_stmt|;
specifier|private
name|byte
index|[]
name|col2
decl_stmt|;
specifier|private
name|byte
index|[]
name|col3
decl_stmt|;
specifier|private
name|byte
index|[]
name|col4
decl_stmt|;
specifier|private
name|byte
index|[]
name|col5
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|data
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|row1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
expr_stmt|;
name|fam1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
expr_stmt|;
name|col1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|row2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
expr_stmt|;
name|fam2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
expr_stmt|;
name|col2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|col3
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
expr_stmt|;
name|col4
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4"
argument_list|)
expr_stmt|;
name|col5
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSorted
parameter_list|()
block|{
comment|//Cases that need to be checked are:
comment|//1. The "smallest" KeyValue is in the same scanners as current
comment|//2. Current scanner gets empty
name|List
argument_list|<
name|KeyValue
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col5
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|l2
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|l3
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l3
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col5
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|//Creating KeyValueHeap
name|KeyValueHeap
name|kvh
init|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
operator|.
name|toArray
argument_list|(
operator|new
name|Scanner
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|kvh
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|kvh
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PRINT
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected "
operator|+
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\nactual   "
operator|+
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Check if result is sorted according to Comparator
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actual
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ret
init|=
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSeek
parameter_list|()
block|{
comment|//Cases:
comment|//1. Seek KeyValue that is not in scanner
comment|//2. Check that smallest that is returned from a seek is correct
name|List
argument_list|<
name|KeyValue
argument_list|>
name|l1
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col5
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|l2
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l2
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|l3
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|l3
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|scanners
operator|.
name|add
argument_list|(
operator|new
name|Scanner
argument_list|(
name|l3
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|//Creating KeyValueHeap
name|KeyValueHeap
name|kvh
init|=
operator|new
name|KeyValueHeap
argument_list|(
name|scanners
operator|.
name|toArray
argument_list|(
operator|new
name|Scanner
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|KeyValue
name|seekKv
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|kvh
operator|.
name|seek
argument_list|(
name|seekKv
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|actual
operator|.
name|add
argument_list|(
name|kvh
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PRINT
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected "
operator|+
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\nactual   "
operator|+
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|Scanner
implements|implements
name|KeyValueScanner
block|{
specifier|private
name|Set
argument_list|<
name|KeyValue
argument_list|>
name|scan
init|=
operator|new
name|TreeSet
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
operator|(
name|Comparator
operator|)
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|KeyValue
argument_list|>
name|iter
decl_stmt|;
specifier|private
name|KeyValue
name|current
decl_stmt|;
specifier|public
name|Scanner
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|list
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|(
name|Comparator
operator|)
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|iter
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|KeyValue
name|peek
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|KeyValue
name|next
parameter_list|()
block|{
name|KeyValue
name|oldCurrent
init|=
name|current
decl_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|oldCurrent
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{}
specifier|public
name|boolean
name|seek
parameter_list|(
name|KeyValue
name|seekKv
parameter_list|)
block|{
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|KeyValue
name|next
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|next
argument_list|,
name|seekKv
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|>=
literal|0
condition|)
block|{
name|current
operator|=
name|next
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

