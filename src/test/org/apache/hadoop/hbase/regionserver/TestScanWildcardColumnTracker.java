begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|QueryMatcher
operator|.
name|MatchCode
import|;
end_import

begin_class
specifier|public
class|class
name|TestScanWildcardColumnTracker
extends|extends
name|HBaseTestCase
block|{
specifier|final
name|int
name|VERSIONS
init|=
literal|2
decl_stmt|;
specifier|public
name|void
name|testCheckColumn_Ok
parameter_list|()
block|{
comment|//Create a WildcardColumnTracker
name|ScanWildcardColumnTracker
name|tracker
init|=
operator|new
name|ScanWildcardColumnTracker
argument_list|(
name|VERSIONS
argument_list|)
decl_stmt|;
comment|//Create list of qualifiers
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer1"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer2"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer3"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer4"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Setting up expected result
name|List
argument_list|<
name|MatchCode
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|MatchCode
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MatchCode
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|MatchCode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|MatchCode
name|mc
init|=
name|tracker
operator|.
name|checkColumn
argument_list|(
name|qualifier
argument_list|,
literal|0
argument_list|,
name|qualifier
operator|.
name|length
argument_list|)
decl_stmt|;
name|actual
operator|.
name|add
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
comment|//Compare actual with expected
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCheckColumn_EnforceVersions
parameter_list|()
block|{
comment|//Create a WildcardColumnTracker
name|ScanWildcardColumnTracker
name|tracker
init|=
operator|new
name|ScanWildcardColumnTracker
argument_list|(
name|VERSIONS
argument_list|)
decl_stmt|;
comment|//Create list of qualifiers
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer1"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer1"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer1"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Setting up expected result
name|List
argument_list|<
name|MatchCode
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|MatchCode
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|MatchCode
operator|.
name|SKIP
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MatchCode
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|MatchCode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|MatchCode
name|mc
init|=
name|tracker
operator|.
name|checkColumn
argument_list|(
name|qualifier
argument_list|,
literal|0
argument_list|,
name|qualifier
operator|.
name|length
argument_list|)
decl_stmt|;
name|actual
operator|.
name|add
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
comment|//Compare actual with expected
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|DisabledTestCheckColumn_WrongOrder
parameter_list|()
block|{
comment|//Create a WildcardColumnTracker
name|ScanWildcardColumnTracker
name|tracker
init|=
operator|new
name|ScanWildcardColumnTracker
argument_list|(
name|VERSIONS
argument_list|)
decl_stmt|;
comment|//Create list of qualifiers
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer2"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifer1"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|MatchCode
name|mc
init|=
name|tracker
operator|.
name|checkColumn
argument_list|(
name|qualifier
argument_list|,
literal|0
argument_list|,
name|qualifier
operator|.
name|length
argument_list|)
decl_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

