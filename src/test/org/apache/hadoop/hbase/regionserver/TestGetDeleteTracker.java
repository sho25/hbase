begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|GetDeleteTracker
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|TestGetDeleteTracker
extends|extends
name|HBaseTestCase
implements|implements
name|HConstants
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|PRINT
init|=
literal|true
decl_stmt|;
specifier|private
name|byte
index|[]
name|col1
init|=
literal|null
decl_stmt|;
specifier|private
name|byte
index|[]
name|col2
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|col1Len
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|col2Len
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
index|[]
name|empty
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|ts1
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|ts2
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|ts3
init|=
literal|0L
decl_stmt|;
specifier|private
name|Delete
name|del10
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|del11
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|delQf10
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|delQf11
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|delFam10
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|del20
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|del21
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|delQf20
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|delQf21
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|delFam20
init|=
literal|null
decl_stmt|;
specifier|private
name|Delete
name|del30
init|=
literal|null
decl_stmt|;
name|GetDeleteTracker
name|dt
init|=
literal|null
decl_stmt|;
specifier|private
name|byte
name|del
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
operator|.
name|getCode
argument_list|()
decl_stmt|;
specifier|private
name|byte
name|delCol
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
decl_stmt|;
specifier|private
name|byte
name|delFam
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|dt
operator|=
operator|new
name|GetDeleteTracker
argument_list|()
expr_stmt|;
name|col1
operator|=
literal|"col"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|col2
operator|=
literal|"col2"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|col1Len
operator|=
name|col1
operator|.
name|length
expr_stmt|;
name|col2Len
operator|=
name|col2
operator|.
name|length
expr_stmt|;
name|empty
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
comment|//ts1
name|ts1
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|del10
operator|=
operator|new
name|Delete
argument_list|(
name|col1
argument_list|,
literal|0
argument_list|,
name|col1Len
argument_list|,
name|del
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|del11
operator|=
operator|new
name|Delete
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|del
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|delQf10
operator|=
operator|new
name|Delete
argument_list|(
name|col1
argument_list|,
literal|0
argument_list|,
name|col1Len
argument_list|,
name|delCol
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|delQf11
operator|=
operator|new
name|Delete
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|delCol
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|delFam10
operator|=
operator|new
name|Delete
argument_list|(
name|empty
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|delFam
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
comment|//ts2
name|ts2
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|del20
operator|=
operator|new
name|Delete
argument_list|(
name|col1
argument_list|,
literal|0
argument_list|,
name|col1Len
argument_list|,
name|del
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|del21
operator|=
operator|new
name|Delete
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|del
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|delQf20
operator|=
operator|new
name|Delete
argument_list|(
name|col1
argument_list|,
literal|0
argument_list|,
name|col1Len
argument_list|,
name|delCol
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|delQf21
operator|=
operator|new
name|Delete
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|delCol
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|delFam20
operator|=
operator|new
name|Delete
argument_list|(
name|empty
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|delFam
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
comment|//ts3
name|ts3
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|del30
operator|=
operator|new
name|Delete
argument_list|(
name|col1
argument_list|,
literal|0
argument_list|,
name|col1Len
argument_list|,
name|del
argument_list|,
name|ts3
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdate_CompareDeletes
parameter_list|()
block|{
name|GetDeleteTracker
operator|.
name|DeleteCompare
name|res
init|=
literal|null
decl_stmt|;
comment|//Testing Delete and Delete
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del10
argument_list|,
name|del10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_BOTH
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing Delete qf1 and Delete qf2 and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del10
argument_list|,
name|del11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_OLD
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del11
argument_list|,
name|del10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_NEW_NEXT_NEW
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing Delete ts1 and Delete ts2 and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del10
argument_list|,
name|del20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_NEW_NEXT_NEW
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del20
argument_list|,
name|del10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_OLD
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing DeleteColumn and DeleteColumn
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf10
argument_list|,
name|delQf10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_BOTH
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing DeleteColumn qf1 and DeleteColumn qf2 and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf10
argument_list|,
name|delQf11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_OLD
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf11
argument_list|,
name|delQf10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_NEW_NEXT_NEW
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing DeleteColumn ts1 and DeleteColumn ts2 and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf10
argument_list|,
name|delQf20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_NEW_NEXT_BOTH
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf20
argument_list|,
name|delQf10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_BOTH
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing Delete and DeleteColumn and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del10
argument_list|,
name|delQf10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|NEXT_OLD
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf10
argument_list|,
name|del10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|NEXT_NEW
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing Delete qf1 and DeleteColumn qf2 and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del10
argument_list|,
name|delQf11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_OLD
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf11
argument_list|,
name|del10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_NEW_NEXT_NEW
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing Delete qf2 and DeleteColumn qf1 and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del11
argument_list|,
name|delQf10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_NEW_NEXT_NEW
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf10
argument_list|,
name|del11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_OLD
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing Delete ts2 and DeleteColumn ts1 and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del20
argument_list|,
name|delQf10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_OLD_NEXT_OLD
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf10
argument_list|,
name|del20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|INCLUDE_NEW_NEXT_NEW
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|//Testing Delete ts1 and DeleteColumn ts2 and<==>
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|del10
argument_list|,
name|delQf20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|NEXT_OLD
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|dt
operator|.
name|compareDeletes
argument_list|(
name|delQf20
argument_list|,
name|del10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeleteTracker
operator|.
name|DeleteCompare
operator|.
name|NEXT_NEW
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdate
parameter_list|()
block|{
comment|//Building lists
name|List
argument_list|<
name|Delete
argument_list|>
name|dels1
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
name|dels1
operator|.
name|add
argument_list|(
name|delQf10
argument_list|)
expr_stmt|;
name|dels1
operator|.
name|add
argument_list|(
name|del21
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|dels2
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
name|dels2
operator|.
name|add
argument_list|(
name|delFam10
argument_list|)
expr_stmt|;
name|dels2
operator|.
name|add
argument_list|(
name|del30
argument_list|)
expr_stmt|;
name|dels2
operator|.
name|add
argument_list|(
name|delQf20
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|del30
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|delQf20
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|del21
argument_list|)
expr_stmt|;
comment|//Adding entries
for|for
control|(
name|Delete
name|del
range|:
name|dels1
control|)
block|{
name|dt
operator|.
name|add
argument_list|(
name|del
operator|.
name|buffer
argument_list|,
name|del
operator|.
name|qualifierOffset
argument_list|,
name|del
operator|.
name|qualifierLength
argument_list|,
name|del
operator|.
name|timestamp
argument_list|,
name|del
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
comment|//update()
name|dt
operator|.
name|update
argument_list|()
expr_stmt|;
comment|//Check deleteList
name|List
argument_list|<
name|Delete
argument_list|>
name|delList
init|=
name|dt
operator|.
name|deletes
decl_stmt|;
name|assertEquals
argument_list|(
name|dels1
operator|.
name|size
argument_list|()
argument_list|,
name|delList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dels1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|dels1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|buffer
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dels1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|qualifierOffset
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|qualifierOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dels1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|qualifierLength
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|qualifierLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dels1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|timestamp
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dels1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
comment|//Add more entries
for|for
control|(
name|Delete
name|del
range|:
name|dels2
control|)
block|{
name|dt
operator|.
name|add
argument_list|(
name|del
operator|.
name|buffer
argument_list|,
name|del
operator|.
name|qualifierOffset
argument_list|,
name|del
operator|.
name|qualifierLength
argument_list|,
name|del
operator|.
name|timestamp
argument_list|,
name|del
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
comment|//Update()
name|dt
operator|.
name|update
argument_list|()
expr_stmt|;
comment|//Check deleteList
name|delList
operator|=
name|dt
operator|.
name|deletes
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|buffer
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|qualifierOffset
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|qualifierOffset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|qualifierLength
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|qualifierLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|timestamp
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|,
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|PRINT
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Qf "
operator|+
operator|new
name|String
argument_list|(
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|buffer
argument_list|)
operator|+
literal|", timestamp, "
operator|+
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|timestamp
operator|+
literal|", type "
operator|+
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|delList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test if a KeyValue is in the lists of deletes already. Cases that needs to    * be tested are:    * Not deleted    * Deleted by a Delete    * Deleted by a DeleteColumn    * Deleted by a DeleteFamily    */
specifier|public
name|void
name|testIsDeleted_NotDeleted
parameter_list|()
block|{
comment|//Building lists
name|List
argument_list|<
name|Delete
argument_list|>
name|dels
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
name|dels
operator|.
name|add
argument_list|(
name|delQf10
argument_list|)
expr_stmt|;
name|dels
operator|.
name|add
argument_list|(
name|del21
argument_list|)
expr_stmt|;
comment|//Adding entries
for|for
control|(
name|Delete
name|del
range|:
name|dels
control|)
block|{
name|dt
operator|.
name|add
argument_list|(
name|del
operator|.
name|buffer
argument_list|,
name|del
operator|.
name|qualifierOffset
argument_list|,
name|del
operator|.
name|qualifierLength
argument_list|,
name|del
operator|.
name|timestamp
argument_list|,
name|del
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
comment|//update()
name|dt
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|dt
operator|.
name|isDeleted
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|ts3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|dt
operator|.
name|isDeleted
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|ts1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsDeleted_Delete
parameter_list|()
block|{
comment|//Building lists
name|List
argument_list|<
name|Delete
argument_list|>
name|dels
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
name|dels
operator|.
name|add
argument_list|(
name|del21
argument_list|)
expr_stmt|;
comment|//Adding entries
for|for
control|(
name|Delete
name|del
range|:
name|dels
control|)
block|{
name|dt
operator|.
name|add
argument_list|(
name|del
operator|.
name|buffer
argument_list|,
name|del
operator|.
name|qualifierOffset
argument_list|,
name|del
operator|.
name|qualifierLength
argument_list|,
name|del
operator|.
name|timestamp
argument_list|,
name|del
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
comment|//update()
name|dt
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|dt
operator|.
name|isDeleted
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|ts2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsDeleted_DeleteColumn
parameter_list|()
block|{
comment|//Building lists
name|List
argument_list|<
name|Delete
argument_list|>
name|dels
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
name|dels
operator|.
name|add
argument_list|(
name|delQf21
argument_list|)
expr_stmt|;
comment|//Adding entries
for|for
control|(
name|Delete
name|del
range|:
name|dels
control|)
block|{
name|dt
operator|.
name|add
argument_list|(
name|del
operator|.
name|buffer
argument_list|,
name|del
operator|.
name|qualifierOffset
argument_list|,
name|del
operator|.
name|qualifierLength
argument_list|,
name|del
operator|.
name|timestamp
argument_list|,
name|del
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
comment|//update()
name|dt
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|dt
operator|.
name|isDeleted
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|ts1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsDeleted_DeleteFamily
parameter_list|()
block|{
comment|//Building lists
name|List
argument_list|<
name|Delete
argument_list|>
name|dels
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
name|dels
operator|.
name|add
argument_list|(
name|delFam20
argument_list|)
expr_stmt|;
comment|//Adding entries
for|for
control|(
name|Delete
name|del
range|:
name|dels
control|)
block|{
name|dt
operator|.
name|add
argument_list|(
name|del
operator|.
name|buffer
argument_list|,
name|del
operator|.
name|qualifierOffset
argument_list|,
name|del
operator|.
name|qualifierLength
argument_list|,
name|del
operator|.
name|timestamp
argument_list|,
name|del
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
comment|//update()
name|dt
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|dt
operator|.
name|isDeleted
argument_list|(
name|col2
argument_list|,
literal|0
argument_list|,
name|col2Len
argument_list|,
name|ts1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

