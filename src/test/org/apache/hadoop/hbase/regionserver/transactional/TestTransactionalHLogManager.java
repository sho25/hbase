begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/** JUnit test case for HLog */
end_comment

begin_class
specifier|public
class|class
name|TestTransactionalHLogManager
extends|extends
name|HBaseTestCase
implements|implements
name|HConstants
block|{
specifier|private
name|Path
name|dir
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|regionInfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableDesc
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|val3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val3"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col:A"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
comment|// Set the hbase.rootdir to be the home directory in mini dfs.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
name|this
operator|.
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|this
operator|.
name|dir
argument_list|)
condition|)
block|{
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|shutdownDfs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws IOException    */
specifier|public
name|void
name|testSingleCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TransactionalHLogManager
name|logMangaer
init|=
operator|new
name|TransactionalHLogManager
argument_list|(
name|log
argument_list|,
name|fs
argument_list|,
name|regionInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Write columns named 1, 2, 3, etc. and then values of single byte
comment|// 1, 2, 3...
name|long
name|transactionId
init|=
literal|1
decl_stmt|;
name|logMangaer
operator|.
name|writeStartToLog
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update1
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transactionId
argument_list|,
name|update1
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update2
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transactionId
argument_list|,
name|update2
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update3
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row3
argument_list|)
decl_stmt|;
name|update3
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transactionId
argument_list|,
name|update3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeCommitToLog
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
comment|// log.completeCacheFlush(regionName, tableName, logSeqId);
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
name|log
operator|.
name|computeFilename
argument_list|(
name|log
operator|.
name|getFilenum
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|BatchUpdate
argument_list|>
argument_list|>
name|commits
init|=
name|logMangaer
operator|.
name|getCommitsFromLog
argument_list|(
name|filename
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|commits
operator|.
name|containsKey
argument_list|(
name|transactionId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|commits
operator|.
name|get
argument_list|(
name|transactionId
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BatchUpdate
argument_list|>
name|updates
init|=
name|commits
operator|.
name|get
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
name|update1
operator|=
name|updates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row1
argument_list|,
name|update1
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|val1
argument_list|,
name|update1
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|update2
operator|=
name|updates
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row2
argument_list|,
name|update2
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|val2
argument_list|,
name|update2
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|update3
operator|=
name|updates
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row3
argument_list|,
name|update3
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|val3
argument_list|,
name|update3
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws IOException    */
specifier|public
name|void
name|testSingleAbort
parameter_list|()
throws|throws
name|IOException
block|{
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TransactionalHLogManager
name|logMangaer
init|=
operator|new
name|TransactionalHLogManager
argument_list|(
name|log
argument_list|,
name|fs
argument_list|,
name|regionInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|transactionId
init|=
literal|1
decl_stmt|;
name|logMangaer
operator|.
name|writeStartToLog
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update1
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transactionId
argument_list|,
name|update1
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update2
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transactionId
argument_list|,
name|update2
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update3
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row3
argument_list|)
decl_stmt|;
name|update3
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transactionId
argument_list|,
name|update3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeAbortToLog
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
comment|// log.completeCacheFlush(regionName, tableName, logSeqId);
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
name|log
operator|.
name|computeFilename
argument_list|(
name|log
operator|.
name|getFilenum
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|BatchUpdate
argument_list|>
argument_list|>
name|commits
init|=
name|logMangaer
operator|.
name|getCommitsFromLog
argument_list|(
name|filename
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws IOException    */
specifier|public
name|void
name|testInterlievedCommits
parameter_list|()
throws|throws
name|IOException
block|{
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TransactionalHLogManager
name|logMangaer
init|=
operator|new
name|TransactionalHLogManager
argument_list|(
name|log
argument_list|,
name|fs
argument_list|,
name|regionInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|transaction1Id
init|=
literal|1
decl_stmt|;
name|long
name|transaction2Id
init|=
literal|2
decl_stmt|;
name|logMangaer
operator|.
name|writeStartToLog
argument_list|(
name|transaction1Id
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update1
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction1Id
argument_list|,
name|update1
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeStartToLog
argument_list|(
name|transaction2Id
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update2
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction2Id
argument_list|,
name|update2
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update3
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row3
argument_list|)
decl_stmt|;
name|update3
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction1Id
argument_list|,
name|update3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeCommitToLog
argument_list|(
name|transaction2Id
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeCommitToLog
argument_list|(
name|transaction1Id
argument_list|)
expr_stmt|;
comment|// log.completeCacheFlush(regionName, tableName, logSeqId);
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
name|log
operator|.
name|computeFilename
argument_list|(
name|log
operator|.
name|getFilenum
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|BatchUpdate
argument_list|>
argument_list|>
name|commits
init|=
name|logMangaer
operator|.
name|getCommitsFromLog
argument_list|(
name|filename
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|commits
operator|.
name|get
argument_list|(
name|transaction1Id
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|commits
operator|.
name|get
argument_list|(
name|transaction2Id
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws IOException    */
specifier|public
name|void
name|testInterlievedAbortCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TransactionalHLogManager
name|logMangaer
init|=
operator|new
name|TransactionalHLogManager
argument_list|(
name|log
argument_list|,
name|fs
argument_list|,
name|regionInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|transaction1Id
init|=
literal|1
decl_stmt|;
name|long
name|transaction2Id
init|=
literal|2
decl_stmt|;
name|logMangaer
operator|.
name|writeStartToLog
argument_list|(
name|transaction1Id
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update1
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction1Id
argument_list|,
name|update1
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeStartToLog
argument_list|(
name|transaction2Id
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update2
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction2Id
argument_list|,
name|update2
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeAbortToLog
argument_list|(
name|transaction2Id
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update3
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row3
argument_list|)
decl_stmt|;
name|update3
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction1Id
argument_list|,
name|update3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeCommitToLog
argument_list|(
name|transaction1Id
argument_list|)
expr_stmt|;
comment|// log.completeCacheFlush(regionName, tableName, logSeqId);
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
name|log
operator|.
name|computeFilename
argument_list|(
name|log
operator|.
name|getFilenum
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|BatchUpdate
argument_list|>
argument_list|>
name|commits
init|=
name|logMangaer
operator|.
name|getCommitsFromLog
argument_list|(
name|filename
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|commits
operator|.
name|get
argument_list|(
name|transaction1Id
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws IOException    */
specifier|public
name|void
name|testInterlievedCommitAbort
parameter_list|()
throws|throws
name|IOException
block|{
name|HLog
name|log
init|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TransactionalHLogManager
name|logMangaer
init|=
operator|new
name|TransactionalHLogManager
argument_list|(
name|log
argument_list|,
name|fs
argument_list|,
name|regionInfo
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|transaction1Id
init|=
literal|1
decl_stmt|;
name|long
name|transaction2Id
init|=
literal|2
decl_stmt|;
name|logMangaer
operator|.
name|writeStartToLog
argument_list|(
name|transaction1Id
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update1
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction1Id
argument_list|,
name|update1
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeStartToLog
argument_list|(
name|transaction2Id
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update2
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction2Id
argument_list|,
name|update2
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeCommitToLog
argument_list|(
name|transaction2Id
argument_list|)
expr_stmt|;
name|BatchUpdate
name|update3
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row3
argument_list|)
decl_stmt|;
name|update3
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeUpdateToLog
argument_list|(
name|transaction1Id
argument_list|,
name|update3
argument_list|)
expr_stmt|;
name|logMangaer
operator|.
name|writeAbortToLog
argument_list|(
name|transaction1Id
argument_list|)
expr_stmt|;
comment|// log.completeCacheFlush(regionName, tableName, logSeqId);
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
name|log
operator|.
name|computeFilename
argument_list|(
name|log
operator|.
name|getFilenum
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|BatchUpdate
argument_list|>
argument_list|>
name|commits
init|=
name|logMangaer
operator|.
name|getCommitsFromLog
argument_list|(
name|filename
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|commits
operator|.
name|get
argument_list|(
name|transaction2Id
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// FIXME Cannot do this test without a global transacton manager
comment|// public void testMissingCommit() {
comment|// fail();
comment|// }
comment|// FIXME Cannot do this test without a global transacton manager
comment|// public void testMissingAbort() {
comment|// fail();
comment|// }
block|}
end_class

end_unit

