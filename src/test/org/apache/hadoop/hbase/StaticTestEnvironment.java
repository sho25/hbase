begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|ConsoleAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_comment
comment|/**  * Initializes test environment  */
end_comment

begin_class
specifier|public
class|class
name|StaticTestEnvironment
block|{
specifier|private
name|StaticTestEnvironment
parameter_list|()
block|{}
comment|// Not instantiable
comment|/** configuration parameter name for test directory */
specifier|public
specifier|static
specifier|final
name|String
name|TEST_DIRECTORY_KEY
init|=
literal|"test.build.data"
decl_stmt|;
comment|/** set to true if "DEBUGGING" is set in the environment */
specifier|public
specifier|static
name|boolean
name|debugging
init|=
literal|false
decl_stmt|;
comment|/**    * Initializes parameters used in the test environment:    *     * Sets the configuration parameter TEST_DIRECTORY_KEY if not already set.    * Sets the boolean debugging if "DEBUGGING" is set in the environment.    * If debugging is enabled, reconfigures loggin so that the root log level is    * set to WARN and the logging level for the package is set to DEBUG.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|TEST_DIRECTORY_KEY
argument_list|,
operator|new
name|File
argument_list|(
literal|"build/contrib/hbase/test"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"DEBUGGING"
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
name|debugging
operator|=
literal|true
expr_stmt|;
block|}
name|Logger
name|rootLogger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|Level
name|logLevel
init|=
name|Level
operator|.
name|DEBUG
decl_stmt|;
name|value
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"LOGGING_LEVEL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|ALL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DEBUG"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|DEBUG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ERROR"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|ERROR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FATAL"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|FATAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"INFO"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|INFO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"OFF"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|OFF
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRACE"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|TRACE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"WARN"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|WARN
expr_stmt|;
block|}
name|ConsoleAppender
name|consoleAppender
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Appender
argument_list|>
name|e
init|=
name|rootLogger
operator|.
name|getAllAppenders
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Appender
name|a
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|ConsoleAppender
condition|)
block|{
name|consoleAppender
operator|=
operator|(
name|ConsoleAppender
operator|)
name|a
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|consoleAppender
operator|!=
literal|null
condition|)
block|{
name|Layout
name|layout
init|=
name|consoleAppender
operator|.
name|getLayout
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|instanceof
name|PatternLayout
condition|)
block|{
name|PatternLayout
name|consoleLayout
init|=
operator|(
name|PatternLayout
operator|)
name|layout
decl_stmt|;
name|consoleLayout
operator|.
name|setConversionPattern
argument_list|(
literal|"%d %-5p [%t] %l: %m%n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Logger
operator|.
name|getLogger
argument_list|(
name|HBaseTestCase
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

