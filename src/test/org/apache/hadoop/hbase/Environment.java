begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * Retrieve environment variables that control debugging and logging environment  */
end_comment

begin_class
specifier|public
class|class
name|Environment
block|{
specifier|public
specifier|static
name|boolean
name|debugging
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|Level
name|logLevel
init|=
name|Level
operator|.
name|INFO
decl_stmt|;
specifier|private
name|Environment
parameter_list|()
block|{}
empty_stmt|;
comment|// Not instantiable
specifier|public
specifier|static
name|void
name|getenv
parameter_list|()
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
name|value
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"DEBUGGING"
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRUE"
argument_list|)
condition|)
block|{
name|debugging
operator|=
literal|true
expr_stmt|;
block|}
name|value
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"LOGGING_LEVEL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|ALL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DEBUG"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|DEBUG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ERROR"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|ERROR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FATAL"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|FATAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"INFO"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|INFO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"OFF"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|OFF
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TRACE"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|TRACE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"WARN"
argument_list|)
condition|)
block|{
name|logLevel
operator|=
name|Level
operator|.
name|WARN
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

