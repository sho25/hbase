begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/** Tests per-column bloom filters */
end_comment

begin_class
specifier|public
class|class
name|TestBloomFilters
extends|extends
name|HBaseClusterTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBloomFilters
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CONTENTS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|rows
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"wmjwjzyv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"baietibz"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"guhsgxnv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mhnqycto"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xcyqafgz"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zidoamgb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tftfirzd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"okapqlrg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yccwzwsq"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qmonufqu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"wlsctews"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mksdhqri"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"wxxllokj"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eviuqpls"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bavotqmj"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yibqzhdl"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"csfqmsyr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"guxliyuh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"pzicietj"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qdwgrqwo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ujfzecmi"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dzeqfvfi"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"phoegsij"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bvudfcou"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dowzmciz"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"etvhkizp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rzurqycg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"krqfxuge"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"gflcohtd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fcrcxtps"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qrtovxdq"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aypxwrwi"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dckpyznr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mdaawnpz"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"pakdfvca"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xjglfbez"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xdsecofi"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sjlrfcab"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ebcjawxv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hkafkjmy"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"oimmwaxo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qcuzrazo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nqydfkwk"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"frybvmlb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"amxmaqws"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"gtkovkgx"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vgwxrwss"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xrhzmcep"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tafwziil"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"erjmncnv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"heyzqzrn"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sowvyhtu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"heeixgzy"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ktcahcob"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ljhbybgg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jiqfcksl"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"anjdkjhm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"uzcgcuxp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vzdhjqla"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"svhgwwzq"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zhswvhbp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ueceybwy"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"czkqykcw"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ctisayir"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hppbgciu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nhzgljfk"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vaziqllf"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"narvrrij"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"kcevbbqi"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qymuaqnp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"pwqpfhsr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"peyeicuk"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"kudlwihi"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"pkmqejlm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ylwzjftl"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rhqrlqar"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xmftvzsp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iaemtihk"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ymsbrqcu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yfnlcxto"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nluqopqh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"wmrzhtox"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qnffhqbl"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zypqpnbw"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"oiokhatd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mdraddiu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zqoatltt"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ewhulbtm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nmswpsdf"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xsjeteqe"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ufubcbma"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"phyxvrds"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vhnfldap"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zrrlycmg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"becotcjx"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"wvbubokn"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"avkgiopr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mbqqxmrv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ibplgvuu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dghvpkgc"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|testKeys
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcdefgh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ijklmnop"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qrstuvwx"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yzabcdef"
argument_list|)
block|}
decl_stmt|;
comment|/**    * Test that uses automatic bloom filter    * @throws IOException    */
specifier|public
name|void
name|testComputedParameters
parameter_list|()
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
comment|// Setup
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|CONTENTS
argument_list|,
comment|// Column name
literal|1
argument_list|,
comment|// Max versions
name|HColumnDescriptor
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|,
comment|// no compression
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
comment|// not in memory
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_LENGTH
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the table
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Open table
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store some values
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|rows
index|[
name|i
index|]
decl_stmt|;
name|String
name|value
init|=
name|row
operator|.
name|toString
argument_list|()
decl_stmt|;
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|CONTENTS
argument_list|,
name|value
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Give cache flusher and log roller a chance to run
comment|// Otherwise we'll never hit the bloom filter, just the memcache
name|Thread
operator|.
name|sleep
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|value
init|=
name|table
operator|.
name|get
argument_list|(
name|testKeys
index|[
name|i
index|]
argument_list|,
name|CONTENTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"non existant key: "
operator|+
name|testKeys
index|[
name|i
index|]
operator|+
literal|" returned value: "
operator|+
operator|new
name|String
argument_list|(
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

