begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Abstract base class for HBase cluster junit tests.  Spins up an hbase  * cluster in setup and tears it down again in tearDown.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HBaseClusterTestCase
extends|extends
name|HBaseTestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseClusterTestCase
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|MiniHBaseCluster
name|cluster
decl_stmt|;
specifier|final
name|boolean
name|miniHdfs
decl_stmt|;
name|int
name|regionServers
decl_stmt|;
comment|/**    * constructor    */
specifier|public
name|HBaseClusterTestCase
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param regionServers    */
specifier|public
name|HBaseClusterTestCase
parameter_list|(
name|int
name|regionServers
parameter_list|)
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServers
operator|=
name|regionServers
expr_stmt|;
block|}
comment|/**    * @param name    */
specifier|public
name|HBaseClusterTestCase
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param miniHdfs    */
specifier|public
name|HBaseClusterTestCase
parameter_list|(
specifier|final
name|boolean
name|miniHdfs
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|miniHdfs
operator|=
name|miniHdfs
expr_stmt|;
name|this
operator|.
name|regionServers
operator|=
literal|1
expr_stmt|;
block|}
comment|/**    * @param name    * @param miniHdfs    */
specifier|public
name|HBaseClusterTestCase
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|miniHdfs
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|miniHdfs
operator|=
name|miniHdfs
expr_stmt|;
name|this
operator|.
name|regionServers
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|cluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|regionServers
argument_list|,
name|this
operator|.
name|miniHdfs
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|HConnectionManager
operator|.
name|deleteConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cluster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closing mini dfs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ReflectionUtils.printThreadInfo(new PrintWriter(System.out),
comment|//  "Temporary end-of-test thread dump debugging HADOOP-2040: " + getName());
block|}
comment|/**    * Use this utility method debugging why cluster won't go down.  On a    * period it throws a thread dump.  Method ends when all cluster    * regionservers and master threads are no long alive.    */
specifier|public
name|void
name|threadDumpingJoin
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|cluster
operator|.
name|getRegionThreads
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Thread
name|t
range|:
name|this
operator|.
name|cluster
operator|.
name|getRegionThreads
argument_list|()
control|)
block|{
name|threadDumpingJoin
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|threadDumpingJoin
argument_list|(
name|this
operator|.
name|cluster
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|threadDumpingJoin
parameter_list|(
specifier|final
name|Thread
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Continuing..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|>
literal|60000
condition|)
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|ReflectionUtils
operator|.
name|printThreadInfo
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|,
literal|"Automatic Stack Trace every 60 seconds waiting on "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

