begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Test {@link HFileScanner#seekTo(byte[])} and its variants.  */
end_comment

begin_class
specifier|public
class|class
name|TestSeekTo
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|String
name|ROOT_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp/TestHFile"
argument_list|)
decl_stmt|;
specifier|private
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|private
name|LocalFileSystem
name|fs
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HBaseConfiguration
argument_list|()
expr_stmt|;
name|RawLocalFileSystem
name|rawLFS
init|=
operator|new
name|RawLocalFileSystem
argument_list|()
decl_stmt|;
name|rawLFS
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|new
name|LocalFileSystem
argument_list|(
name|rawLFS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FSDataOutputStream
name|createFSOutput
parameter_list|(
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|name
argument_list|)
condition|)
name|fs
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|fout
return|;
block|}
name|Path
name|makeNewFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|ncTFile
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
literal|"basic.hfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|createFSOutput
argument_list|(
name|ncTFile
argument_list|)
decl_stmt|;
name|HFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|HFile
operator|.
name|Writer
argument_list|(
name|fout
argument_list|,
literal|40
argument_list|,
literal|"none"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// 4 bytes * 3 * 2 for each key/value +
comment|// 3 for keys, 15 for values = 42 (woot)
name|writer
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
comment|// block transition
name|writer
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ncTFile
return|;
block|}
specifier|public
name|void
name|testSeekBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
name|makeNewFile
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|HFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"j"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"i"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"i"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"l"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"k"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSeekTo
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
name|makeNewFile
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|HFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|count
argument_list|)
expr_stmt|;
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|()
decl_stmt|;
comment|// lies before the start of the file.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|scanner
operator|.
name|seekTo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanner
operator|.
name|seekTo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Across a block boundary now.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanner
operator|.
name|seekTo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanner
operator|.
name|seekTo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"l"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"k"
argument_list|,
name|scanner
operator|.
name|getKeyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBlockContainingKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
name|makeNewFile
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|HFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|reader
operator|.
name|blockIndex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// falls before the start of the file.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"j"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|blockIndex
operator|.
name|blockContainingKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"l"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

