begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
operator|.
name|TestBooleanCondition
import|;
end_import

begin_comment
comment|/**  * Binding variables, substitution variables test  */
end_comment

begin_class
specifier|public
class|class
name|TestSubstitutionVariables
extends|extends
name|TestCase
block|{
specifier|private
name|String
name|TABLE_NAME
init|=
literal|"table_name"
decl_stmt|;
specifier|private
name|String
name|SUBSTITUTION_VARIABLE
init|=
literal|"A"
decl_stmt|;
specifier|static
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
specifier|public
name|void
name|testSubstitution
parameter_list|()
block|{
name|SubstituteCommand
name|substitute
init|=
operator|new
name|SubstituteCommand
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|substitute
operator|.
name|setKey
argument_list|(
name|SUBSTITUTION_VARIABLE
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|setInput
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|execute
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|VariableRef
name|ref
init|=
name|VariablesPool
operator|.
name|get
argument_list|(
name|SUBSTITUTION_VARIABLE
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ref
operator|.
name|getArgument
argument_list|()
operator|.
name|equals
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCombinedQueries
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|Writer
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|SubstituteCommand
name|substitute
init|=
operator|new
name|SubstituteCommand
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|substitute
operator|.
name|setKey
argument_list|(
name|SUBSTITUTION_VARIABLE
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|setInput
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|execute
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|substitute
operator|=
operator|new
name|SubstituteCommand
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|setKey
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|setChainKey
argument_list|(
name|SUBSTITUTION_VARIABLE
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|setOperation
argument_list|(
name|Constants
operator|.
name|RELATIONAL_SELECTION
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|setCondition
argument_list|(
name|TestBooleanCondition
operator|.
name|EXPRESSION_OR
argument_list|)
expr_stmt|;
name|substitute
operator|.
name|execute
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestSubstitutionVariables
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

