begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
operator|.
name|generated
operator|.
name|ExpressionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shell
operator|.
name|algebra
operator|.
name|generated
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Test boolean expression  */
end_comment

begin_class
specifier|public
class|class
name|TestBooleanCondition
extends|extends
name|TestCase
block|{
name|ExpressionParser
name|expression
decl_stmt|;
specifier|public
specifier|static
name|String
name|EXPRESSION_OR
init|=
literal|"key:2 = value2 OR key:3 = value1"
decl_stmt|;
specifier|public
specifier|static
name|String
name|EXPRESSION_AND
init|=
literal|"key:2 = value2 AND key:3 = value1"
decl_stmt|;
specifier|public
specifier|static
name|String
name|EXPRESSION
init|=
literal|"key:3> 1"
decl_stmt|;
specifier|public
specifier|static
name|String
name|TERM_FILTER
init|=
literal|"key:4> 100 AND key:4 !! 110|120|130|140|150"
decl_stmt|;
name|Text
index|[]
name|keys
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"key:1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"key:2"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"key:3"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"key:4"
argument_list|)
block|}
decl_stmt|;
name|ImmutableBytesWritable
index|[]
name|values
init|=
block|{
operator|new
name|ImmutableBytesWritable
argument_list|(
literal|"value1"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|ImmutableBytesWritable
argument_list|(
literal|"value2"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|ImmutableBytesWritable
argument_list|(
literal|"3"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|ImmutableBytesWritable
argument_list|(
literal|"150"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
decl_stmt|;
specifier|public
name|void
name|testCheckConstraints
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|MapWritable
name|data
init|=
operator|new
name|MapWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
operator|.
name|put
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|expression
operator|=
operator|new
name|ExpressionParser
argument_list|(
name|EXPRESSION_OR
argument_list|)
expr_stmt|;
name|expression
operator|.
name|booleanExpressionParse
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|expression
operator|.
name|checkConstraints
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|ExpressionParser
argument_list|(
name|EXPRESSION_AND
argument_list|)
expr_stmt|;
name|expression
operator|.
name|booleanExpressionParse
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expression
operator|.
name|checkConstraints
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|ExpressionParser
argument_list|(
name|EXPRESSION
argument_list|)
expr_stmt|;
name|expression
operator|.
name|booleanExpressionParse
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|expression
operator|.
name|checkConstraints
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|ExpressionParser
argument_list|(
name|TERM_FILTER
argument_list|)
expr_stmt|;
name|expression
operator|.
name|booleanExpressionParse
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|expression
operator|.
name|checkConstraints
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestBooleanCondition
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

