begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Regression test for HBASE-613  */
end_comment

begin_class
specifier|public
class|class
name|TestScanMultipleVersions
extends|extends
name|HBaseClusterTestCase
block|{
specifier|private
specifier|final
name|byte
index|[]
name|TABLE_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HRegionInfo
index|[]
name|INFOS
init|=
operator|new
name|HRegionInfo
index|[
literal|2
index|]
decl_stmt|;
specifier|private
specifier|final
name|HRegion
index|[]
name|REGIONS
init|=
operator|new
name|HRegion
index|[
literal|2
index|]
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|ROWS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_0200"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_0800"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|TIMESTAMPS
init|=
operator|new
name|long
index|[]
block|{
literal|100L
block|,
literal|1000L
block|}
decl_stmt|;
specifier|private
name|HTableDescriptor
name|desc
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|preHBaseClusterSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|testDir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create table description
name|this
operator|.
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Region 0 will contain the key range [,row_0500)
name|INFOS
index|[
literal|0
index|]
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|this
operator|.
name|desc
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_0500"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Region 1 will contain the key range [row_0500,)
name|INFOS
index|[
literal|1
index|]
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|this
operator|.
name|desc
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_0500"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
expr_stmt|;
comment|// Create root and meta regions
name|createRootAndMetaRegions
argument_list|()
expr_stmt|;
comment|// Create the regions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REGIONS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|REGIONS
index|[
name|i
index|]
operator|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|this
operator|.
name|INFOS
index|[
name|i
index|]
argument_list|,
name|this
operator|.
name|testDir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// Insert data
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|TIMESTAMPS
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|,
name|TIMESTAMPS
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|COLUMN_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TIMESTAMPS
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|REGIONS
index|[
name|i
index|]
operator|.
name|batchUpdate
argument_list|(
name|b
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Insert the region we created into the meta
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|meta
argument_list|,
name|REGIONS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Close region
name|REGIONS
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|REGIONS
index|[
name|i
index|]
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
comment|// Close root and meta regions
name|closeRootAndMeta
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws Exception    */
specifier|public
name|void
name|testScanMultipleVersions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// At this point we have created multiple regions and both HDFS and HBase
comment|// are running. There are 5 cases we have to test. Each is described below.
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|TIMESTAMPS
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Cell
index|[]
name|cells
init|=
name|t
operator|.
name|get
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|,
name|HConstants
operator|.
name|COLUMN_FAMILY
argument_list|,
name|TIMESTAMPS
index|[
name|j
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cells
operator|!=
literal|null
operator|&&
name|cells
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
operator|+
literal|", cell="
operator|+
name|cells
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Case 1: scan with LATEST_TIMESTAMP. Should get two rows
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Scanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COLUMN_FAMILY_ARRAY
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|RowResult
name|rr
init|=
literal|null
init|;
operator|(
name|rr
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of rows should be 2"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Case 2: Scan with a timestamp greater than most recent timestamp
comment|// (in this case> 1000 and< LATEST_TIMESTAMP. Should get 2 rows.
name|count
operator|=
literal|0
expr_stmt|;
name|s
operator|=
name|t
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COLUMN_FAMILY_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of rows should be 2"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Case 3: scan with timestamp equal to most recent timestamp
comment|// (in this case == 1000. Should get 2 rows.
name|count
operator|=
literal|0
expr_stmt|;
name|s
operator|=
name|t
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COLUMN_FAMILY_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of rows should be 2"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Case 4: scan with timestamp greater than first timestamp but less than
comment|// second timestamp (100< timestamp< 1000). Should get 2 rows.
name|count
operator|=
literal|0
expr_stmt|;
name|s
operator|=
name|t
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COLUMN_FAMILY_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|500L
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of rows should be 2"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Case 5: scan with timestamp equal to first timestamp (100)
comment|// Should get 2 rows.
name|count
operator|=
literal|0
expr_stmt|;
name|s
operator|=
name|t
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|COLUMN_FAMILY_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|+=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of rows should be 2"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

