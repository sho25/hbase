begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Script used evaluating HBase performance and scalability.  Runs a HBase  * client that steps through one of a set of hardcoded tests or 'experiments'  * (e.g. a random reads test, a random writes test, etc.). Pass on the  * command-line which test to run and how many clients are participating in  * this experiment. Run<code>java PerformanceEvaluation --help</code> to  * obtain usage.  *   *<p>This class sets up and runs the evaluation programs described in  * Section 7,<i>Performance Evaluation</i>, of the<a  * href="http://labs.google.com/papers/bigtable.html">Bigtable</a>  * paper, pages 8-10.  *   *<p>If number of clients> 1, we start up a MapReduce job. Each map task  * runs an individual client. Each client does about 1GB of data.  *   *<p>If client == 1, the test table is created and deleted at end of each run  * and the<code>sequentialWrite</code> test is run first if a test requires  * a populated test table: e.g. if you are running the  *<code>sequentialRead</code> test, the test table must hold data for it to  * read.  If client> 1, and we are running clients in a map task, the table  * is not deleted at the end-of-run.  Also, if running the  *<code>sequentialRead</code> or</code>randomRead</code> tests, the  *<code>sequentialWrite</code> test is not automatically run first.  */
end_comment

begin_class
specifier|public
class|class
name|PerformanceEvaluation
implements|implements
name|HConstants
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PerformanceEvaluation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROW_LENGTH
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ONE_GB
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROWS_PER_GB
init|=
name|ONE_GB
operator|/
name|ROW_LENGTH
decl_stmt|;
specifier|static
specifier|final
name|Text
name|COLUMN_NAME
init|=
operator|new
name|Text
argument_list|(
name|COLUMN_FAMILY
operator|+
literal|"data"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|HTableDescriptor
name|tableDescriptor
decl_stmt|;
static|static
block|{
name|tableDescriptor
operator|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"TestTable"
argument_list|)
expr_stmt|;
name|tableDescriptor
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|COLUMN_FAMILY
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|RANDOM_READ
init|=
literal|"randomRead"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RANDOM_READ_MEM
init|=
literal|"randomReadMem"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RANDOM_WRITE
init|=
literal|"randomWrite"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SEQUENTIAL_READ
init|=
literal|"sequentialRead"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SEQUENTIAL_WRITE
init|=
literal|"sequentialWrite"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCAN
init|=
literal|"scan"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|COMMANDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|RANDOM_READ
block|,
name|RANDOM_READ_MEM
block|,
name|RANDOM_WRITE
block|,
name|SEQUENTIAL_READ
block|,
name|SEQUENTIAL_WRITE
block|,
name|SCAN
block|}
argument_list|)
decl_stmt|;
specifier|volatile
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|private
name|boolean
name|miniCluster
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|N
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|R
init|=
name|ROWS_PER_GB
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|PERF_EVAL_DIR
init|=
operator|new
name|Path
argument_list|(
literal|"performance_evaluation"
argument_list|)
decl_stmt|;
comment|/**    * Regex to parse lines in input file passed to mapreduce task.    */
specifier|public
specifier|static
specifier|final
name|Pattern
name|LINE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"startRow=(\\d+),\\s+"
operator|+
literal|"perClientRunRows=(\\d+),\\s+totalRows=(\\d+),\\s+clients=(\\d+)"
argument_list|)
decl_stmt|;
comment|/**    * Enum for map metrics.  Keep it out here rather than inside in the Map    * inner-class so we can find associated properties.    */
specifier|protected
specifier|static
enum|enum
name|Counter
block|{
comment|/** elapsed time */
name|ELAPSED_TIME
block|,
comment|/** number of rows */
name|ROWS
block|}
comment|/**    * Constructor    * @param c Configuration object    */
specifier|public
name|PerformanceEvaluation
parameter_list|(
specifier|final
name|HBaseConfiguration
name|c
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|c
expr_stmt|;
block|}
comment|/**    * Implementations can have their status set.    */
specifier|static
interface|interface
name|Status
block|{
comment|/**      * Sets status      * @param msg status message      * @throws IOException      */
name|void
name|setStatus
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * MapReduce job that runs a performance evaluation client in each map task.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
class|class
name|EvaluationMapTask
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
block|{
comment|/** configuration parameter name that contains the command */
specifier|public
specifier|final
specifier|static
name|String
name|CMD_KEY
init|=
literal|"EvaluationMapTask.command"
decl_stmt|;
specifier|private
name|String
name|cmd
decl_stmt|;
specifier|private
name|PerformanceEvaluation
name|pe
decl_stmt|;
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|j
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|j
operator|.
name|get
argument_list|(
name|CMD_KEY
argument_list|)
expr_stmt|;
name|this
operator|.
name|pe
operator|=
operator|new
name|PerformanceEvaluation
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|map
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|WritableComparable
name|key
parameter_list|,
specifier|final
name|Writable
name|value
parameter_list|,
specifier|final
name|OutputCollector
name|output
parameter_list|,
specifier|final
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Matcher
name|m
init|=
name|LINE_PATTERN
operator|.
name|matcher
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|value
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
operator|&&
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|startRow
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|perClientRunRows
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|totalRows
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|Status
name|status
init|=
operator|new
name|Status
argument_list|()
block|{
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|long
name|elapsedTime
init|=
name|this
operator|.
name|pe
operator|.
name|runOneClient
argument_list|(
name|this
operator|.
name|cmd
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
decl_stmt|;
comment|// Collect how much time the thing took.  Report as map output and
comment|// to the ELAPSED_TIME counter.
name|reporter
operator|.
name|incrCounter
argument_list|(
name|Counter
operator|.
name|ELAPSED_TIME
argument_list|,
name|elapsedTime
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|incrCounter
argument_list|(
name|Counter
operator|.
name|ROWS
argument_list|,
name|perClientRunRows
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|startRow
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|elapsedTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * If table does not already exist, create.    * @param c Client to use checking.    * @return True if we created the table.    * @throws IOException    */
specifier|private
name|boolean
name|checkTable
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
index|[]
name|extantTables
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|boolean
name|tableExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|extantTables
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// Check to see if our table already exists.  Print warning if it does.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extantTables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|extantTables
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|tableDescriptor
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Table "
operator|+
name|tableDescriptor
operator|+
literal|" already exists"
argument_list|)
expr_stmt|;
name|tableExists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|tableExists
condition|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|tableDescriptor
operator|+
literal|" created"
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|tableExists
return|;
block|}
comment|/*    * We're to run multiple clients concurrently.  Setup a mapreduce job.  Run    * one map per client.  Then run a single reduce to sum the elapsed times.    * @param cmd Command to run.    * @throws IOException    */
specifier|private
name|void
name|runNIsMoreThanOne
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|checkTable
argument_list|(
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run a mapreduce job.  Run as many maps as asked-for clients.
comment|// Before we start up the job, write out an input file with instruction
comment|// per client regards which row they are to start on.
name|Path
name|inputDir
init|=
name|writeInputFile
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|EvaluationMapTask
operator|.
name|CMD_KEY
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|setInputPath
argument_list|(
name|inputDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"HBase Performance Evaluation"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|EvaluationMapTask
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
name|this
operator|.
name|N
operator|*
literal|10
argument_list|)
expr_stmt|;
comment|// Ten maps per client.
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputPath
argument_list|(
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"outputs"
argument_list|)
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/*    * Write input file of offsets-per-client for the mapreduce job.    * @param c Configuration    * @return Directory that contains file written.    * @throws IOException    */
specifier|private
name|Path
name|writeInputFile
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|PERF_EVAL_DIR
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|PERF_EVAL_DIR
argument_list|)
expr_stmt|;
block|}
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|PERF_EVAL_DIR
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"input.txt"
argument_list|)
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|inputFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|this
operator|.
name|N
operator|*
literal|10
operator|)
condition|;
name|i
operator|++
control|)
block|{
comment|// Write out start row, total number of rows per client run: 1/10th of
comment|// (R/N).
name|int
name|perClientRows
init|=
operator|(
name|this
operator|.
name|R
operator|/
name|this
operator|.
name|N
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"startRow="
operator|+
name|i
operator|*
name|perClientRows
operator|+
literal|", perClientRunRows="
operator|+
operator|(
name|perClientRows
operator|/
literal|10
operator|)
operator|+
literal|", totalRows="
operator|+
name|this
operator|.
name|R
operator|+
literal|", clients="
operator|+
name|this
operator|.
name|N
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|subdir
return|;
block|}
comment|/*    * A test.    * Subclass to particularize what happens per row.    */
specifier|static
specifier|abstract
class|class
name|Test
block|{
specifier|protected
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|int
name|startRow
decl_stmt|;
specifier|protected
specifier|final
name|int
name|perClientRunRows
decl_stmt|;
specifier|protected
specifier|final
name|int
name|totalRows
decl_stmt|;
specifier|private
specifier|final
name|Status
name|status
decl_stmt|;
specifier|protected
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|protected
name|HTable
name|table
decl_stmt|;
specifier|protected
specifier|volatile
name|HBaseConfiguration
name|conf
decl_stmt|;
name|Test
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|perClientRunRows
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|perClientRunRows
operator|=
name|perClientRunRows
expr_stmt|;
name|this
operator|.
name|totalRows
operator|=
name|totalRows
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|table
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/*      * @return Generated random value to insert into a table cell.      */
name|byte
index|[]
name|generateValue
parameter_list|()
block|{
name|StringBuilder
name|val
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|val
operator|.
name|length
argument_list|()
operator|<
name|ROW_LENGTH
condition|)
block|{
name|val
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|this
operator|.
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|val
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|String
name|generateStatus
parameter_list|(
specifier|final
name|int
name|sr
parameter_list|,
specifier|final
name|int
name|i
parameter_list|,
specifier|final
name|int
name|lr
parameter_list|)
block|{
return|return
name|sr
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/"
operator|+
name|lr
return|;
block|}
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
return|return
name|this
operator|.
name|perClientRunRows
operator|/
literal|10
return|;
block|}
name|void
name|testSetup
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|void
name|testTakedown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Empty
block|}
comment|/*      * Run test      * @return Elapsed time.      * @throws IOException      */
name|long
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|elapsedTime
decl_stmt|;
name|testSetup
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|lastRow
init|=
name|this
operator|.
name|startRow
operator|+
name|this
operator|.
name|perClientRunRows
decl_stmt|;
comment|// Report on completion of 1/10th of total.
for|for
control|(
name|int
name|i
init|=
name|this
operator|.
name|startRow
init|;
name|i
operator|<
name|lastRow
condition|;
name|i
operator|++
control|)
block|{
name|testRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|i
operator|>
literal|0
operator|&&
operator|(
name|i
operator|%
name|getReportingPeriod
argument_list|()
operator|)
operator|==
literal|0
condition|)
block|{
name|status
operator|.
name|setStatus
argument_list|(
name|generateStatus
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|i
argument_list|,
name|lastRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|elapsedTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
expr_stmt|;
block|}
finally|finally
block|{
name|testTakedown
argument_list|()
expr_stmt|;
block|}
return|return
name|elapsedTime
return|;
block|}
name|Text
name|getRandomRow
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|%
name|this
operator|.
name|totalRows
argument_list|)
argument_list|)
return|;
block|}
comment|/*      * Test for individual row.      * @param i Row index.      */
specifier|abstract
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*      * @return Test name.      */
specifier|abstract
name|String
name|getTestName
parameter_list|()
function_decl|;
block|}
class|class
name|RandomReadTest
extends|extends
name|Test
block|{
name|RandomReadTest
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|perClientRunRows
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|table
operator|.
name|get
argument_list|(
name|getRandomRow
argument_list|()
argument_list|,
name|COLUMN_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
comment|//
return|return
name|this
operator|.
name|perClientRunRows
operator|/
literal|100
return|;
block|}
annotation|@
name|Override
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"randomRead"
return|;
block|}
block|}
class|class
name|RandomWriteTest
extends|extends
name|Test
block|{
name|RandomWriteTest
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|perClientRunRows
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|row
init|=
name|getRandomRow
argument_list|()
decl_stmt|;
name|long
name|lockid
init|=
name|table
operator|.
name|startUpdate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|COLUMN_NAME
argument_list|,
name|generateValue
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"randomWrite"
return|;
block|}
block|}
class|class
name|ScanTest
extends|extends
name|Test
block|{
specifier|private
name|HScannerInterface
name|testScanner
decl_stmt|;
specifier|private
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ScanTest
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|perClientRunRows
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testSetup
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|testSetup
argument_list|()
expr_stmt|;
name|this
operator|.
name|testScanner
operator|=
name|table
operator|.
name|obtainScanner
argument_list|(
operator|new
name|Text
index|[]
block|{
name|COLUMN_NAME
block|}
argument_list|,
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|startRow
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testTakedown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|testScanner
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|testScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|testTakedown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|testScanner
operator|.
name|next
argument_list|(
name|this
operator|.
name|key
argument_list|,
name|this
operator|.
name|results
argument_list|)
expr_stmt|;
name|this
operator|.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"scan"
return|;
block|}
block|}
class|class
name|SequentialReadTest
extends|extends
name|Test
block|{
name|SequentialReadTest
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|perClientRunRows
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|table
operator|.
name|get
argument_list|(
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|COLUMN_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"sequentialRead"
return|;
block|}
block|}
class|class
name|SequentialWriteTest
extends|extends
name|Test
block|{
name|SequentialWriteTest
parameter_list|(
specifier|final
name|HBaseConfiguration
name|conf
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|perClientRunRows
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|lockid
init|=
name|table
operator|.
name|startUpdate
argument_list|(
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|COLUMN_NAME
argument_list|,
name|generateValue
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getTestName
parameter_list|()
block|{
return|return
literal|"sequentialWrite"
return|;
block|}
block|}
name|long
name|runOneClient
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|perClientRunRows
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Start "
operator|+
name|cmd
operator|+
literal|" at offset "
operator|+
name|startRow
operator|+
literal|" for "
operator|+
name|perClientRunRows
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|long
name|totalElapsedTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
name|RANDOM_READ
argument_list|)
condition|)
block|{
name|Test
name|t
init|=
operator|new
name|RandomReadTest
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|totalElapsedTime
operator|=
name|t
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
name|RANDOM_READ_MEM
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
name|RANDOM_WRITE
argument_list|)
condition|)
block|{
name|Test
name|t
init|=
operator|new
name|RandomWriteTest
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|totalElapsedTime
operator|=
name|t
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
name|SCAN
argument_list|)
condition|)
block|{
name|Test
name|t
init|=
operator|new
name|ScanTest
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|totalElapsedTime
operator|=
name|t
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
name|SEQUENTIAL_READ
argument_list|)
condition|)
block|{
name|Test
name|t
init|=
operator|new
name|SequentialReadTest
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|totalElapsedTime
operator|=
name|t
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
name|SEQUENTIAL_WRITE
argument_list|)
condition|)
block|{
name|Test
name|t
init|=
operator|new
name|SequentialWriteTest
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|startRow
argument_list|,
name|perClientRunRows
argument_list|,
name|totalRows
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|totalElapsedTime
operator|=
name|t
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid command value: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|setStatus
argument_list|(
literal|"Finished "
operator|+
name|cmd
operator|+
literal|" in "
operator|+
name|totalElapsedTime
operator|+
literal|"ms at offset "
operator|+
name|startRow
operator|+
literal|" for "
operator|+
name|perClientRunRows
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
return|return
name|totalElapsedTime
return|;
block|}
specifier|private
name|void
name|runNIsOne
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|Status
name|status
init|=
operator|new
name|Status
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|checkTable
argument_list|(
name|admin
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
name|RANDOM_READ
argument_list|)
operator|||
name|cmd
operator|.
name|equals
argument_list|(
name|RANDOM_READ_MEM
argument_list|)
operator|||
name|cmd
operator|.
name|equals
argument_list|(
name|SCAN
argument_list|)
operator|||
name|cmd
operator|.
name|equals
argument_list|(
name|SEQUENTIAL_READ
argument_list|)
condition|)
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Running "
operator|+
name|SEQUENTIAL_WRITE
operator|+
literal|" first so "
operator|+
name|cmd
operator|+
literal|" has data to work against"
argument_list|)
expr_stmt|;
name|runOneClient
argument_list|(
name|SEQUENTIAL_WRITE
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|R
argument_list|,
name|this
operator|.
name|R
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
name|runOneClient
argument_list|(
name|cmd
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|R
argument_list|,
name|this
operator|.
name|R
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting table "
operator|+
name|tableDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runTest
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
name|RANDOM_READ_MEM
argument_list|)
condition|)
block|{
comment|// For this one test, so all fits in memory, make R smaller (See
comment|// pg. 9 of BigTable paper).
name|R
operator|=
operator|(
name|ONE_GB
operator|/
literal|10
operator|)
operator|*
name|N
expr_stmt|;
block|}
name|MiniHBaseCluster
name|hbaseMiniCluster
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|miniCluster
condition|)
block|{
name|hbaseMiniCluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|N
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|N
operator|==
literal|1
condition|)
block|{
comment|// If there is only one client and one HRegionServer, we assume nothing
comment|// has been set up at all.
name|runNIsOne
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Else, run
name|runNIsMoreThanOne
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|this
operator|.
name|miniCluster
operator|&&
name|hbaseMiniCluster
operator|!=
literal|null
condition|)
block|{
name|hbaseMiniCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
name|printUsage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printUsage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[--master=host:port] [--miniCluster]<command><nclients>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" master          Specify host and port of HBase "
operator|+
literal|"cluster master. If not present,"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"                 address is read from configuration"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" miniCluster     Run the test on an HBaseMiniCluster"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Command:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" randomRead      Run random read test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" randomReadMem   Run random read test where table "
operator|+
literal|"is in memory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" randomWrite     Run random write test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" sequentialRead  Run sequential read test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" sequentialWrite Run sequential write test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" scan            Run scan test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Args:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" nclients        Integer. Required. Total number of "
operator|+
literal|"clients (and HRegionServers)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"                 running: 1<= value<= 500"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Examples:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" To run a single evaluation client:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" $ bin/hbase "
operator|+
literal|"org.apache.hadoop.hbase.PerformanceEvaluation sequentialWrite 1"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getArgs
parameter_list|(
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|start
operator|+
literal|1
operator|>
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"must supply the number of clients"
argument_list|)
throw|;
block|}
name|N
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|start
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|N
operator|>
literal|500
operator|||
name|N
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Number of clients must be between "
operator|+
literal|"1 and 500."
argument_list|)
throw|;
block|}
comment|// Set total number of rows to write.
name|R
operator|=
name|ROWS_PER_GB
operator|*
name|N
expr_stmt|;
block|}
specifier|private
name|int
name|doCommandLine
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// Process command-line args. TODO: Better cmd-line processing
comment|// (but hopefully something not as painful as cli options).
name|int
name|errCode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|errCode
return|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|cmd
operator|.
name|startsWith
argument_list|(
literal|"--h"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|errCode
operator|=
literal|0
expr_stmt|;
break|break;
block|}
specifier|final
name|String
name|masterArgKey
init|=
literal|"--master="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|masterArgKey
argument_list|)
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|cmd
operator|.
name|substring
argument_list|(
name|masterArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|miniClusterArgKey
init|=
literal|"--miniCluster"
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|miniClusterArgKey
argument_list|)
condition|)
block|{
name|this
operator|.
name|miniCluster
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|COMMANDS
operator|.
name|contains
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|getArgs
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|errCode
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|printUsage
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|errCode
return|;
block|}
comment|/**    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
operator|new
name|PerformanceEvaluation
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|()
argument_list|)
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

