begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|dfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StaticTestEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|TestMigrate
extends|extends
name|HBaseTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMigrate
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    *     */
specifier|public
name|TestMigrate
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    *     */
specifier|public
name|void
name|testUpgrade
parameter_list|()
block|{
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
comment|// Set the hbase.rootdir to be the home directory in mini dfs.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|,
operator|new
name|Path
argument_list|(
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
literal|"hbase"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|dfs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|root
init|=
name|dfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_DIR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|/*        * First load files from an old style HBase file structure        */
comment|// Current directory is .../project/build/test/data
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Get path for zip file
name|FSDataInputStream
name|hs
init|=
name|localfs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|CUR_DIR
argument_list|,
comment|// this path is for running test with ant
literal|"../../../src/testdata/HADOOP-2478-testdata.zip"
argument_list|)
comment|// and this path is for when you want to run inside eclipse
comment|/*"src/testdata/HADOOP-2478-testdata.zip")*/
argument_list|)
decl_stmt|;
name|ZipInputStream
name|zip
init|=
operator|new
name|ZipInputStream
argument_list|(
name|hs
argument_list|)
decl_stmt|;
name|unzip
argument_list|(
name|zip
argument_list|,
name|dfs
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs
operator|.
name|close
argument_list|()
expr_stmt|;
name|listPaths
argument_list|(
name|dfs
argument_list|,
name|root
argument_list|,
name|root
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Migrate
name|u
init|=
operator|new
name|Migrate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|u
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"check"
block|}
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|dfs
argument_list|,
name|root
argument_list|,
name|root
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|u
operator|=
operator|new
name|Migrate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|u
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"upgrade"
block|}
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|dfs
argument_list|,
name|root
argument_list|,
name|root
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Remove version file and try again
name|dfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|u
operator|=
operator|new
name|Migrate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|u
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"upgrade"
block|}
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|dfs
argument_list|,
name|root
argument_list|,
name|root
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Try again. No upgrade should be necessary
name|u
operator|=
operator|new
name|Migrate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|u
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"check"
block|}
argument_list|)
expr_stmt|;
name|u
operator|=
operator|new
name|Migrate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|u
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"upgrade"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|StaticTestEnvironment
operator|.
name|shutdownDfs
argument_list|(
name|dfsCluster
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|unzip
parameter_list|(
name|ZipInputStream
name|zip
parameter_list|,
name|FileSystem
name|dfs
parameter_list|,
name|Path
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipEntry
name|e
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|e
operator|=
name|zip
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
do|do
block|{
name|len
operator|=
name|zip
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|len
operator|>
literal|0
condition|)
do|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|zip
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|listPaths
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|int
name|rootdirlength
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"d "
operator|+
name|path
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|fs
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|rootdirlength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"f "
operator|+
name|path
operator|+
literal|" size="
operator|+
name|stats
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

