begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_comment
comment|/**  * Runs migration of filesystem from hbase 0.19 to hbase 0.20.  * Not part of general test suite because takes time.  */
end_comment

begin_class
specifier|public
class|class
name|MigrationTest
extends|extends
name|HBaseTestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MigrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Expected count of rows in migrated table.
specifier|private
specifier|static
specifier|final
name|int
name|EXPECTED_COUNT
init|=
literal|3
decl_stmt|;
comment|/**    * Test migration.    * @throws IOException     */
specifier|public
name|void
name|testMigration
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootdir
init|=
name|getUnitTestdir
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|Path
name|hbasedir
init|=
name|loadTestData
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|hbasedir
argument_list|)
argument_list|)
expr_stmt|;
name|Migrate
name|migrator
init|=
operator|new
name|Migrate
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualified
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|hbasedir
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|qualified
operator|.
name|toString
argument_list|()
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rootdir"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|migrator
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"upgrade"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*    * Load up test data.    * @param dfs    * @param rootDir    * @throws IOException    */
specifier|private
name|Path
name|loadTestData
parameter_list|(
specifier|final
name|FileSystem
name|dfs
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hbasedir
init|=
literal|"hbase-0.19-two-small-tables"
decl_stmt|;
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"data/"
operator|+
name|hbasedir
operator|+
literal|".zip"
argument_list|)
decl_stmt|;
name|ZipInputStream
name|zip
init|=
operator|new
name|ZipInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
name|unzip
argument_list|(
name|zip
argument_list|,
name|dfs
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|hbasedir
argument_list|)
return|;
block|}
comment|/*    * Verify can read the migrated table.    * @throws IOException    */
specifier|private
name|void
name|verify
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Delete any cached connections.  Need to do this because connection was
comment|// created earlier when no master was around.  The fact that there was no
comment|// master gets cached.  Need to delete so we go get master afresh.
name|HConnectionManager
operator|.
name|deleteConnectionInfo
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start a cluster against migrated FS"
argument_list|)
expr_stmt|;
comment|// Up number of retries.  Needed while cluster starts up. Its been set to 1
comment|// above.
specifier|final
name|int
name|retries
init|=
literal|5
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER_KEY
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|HBaseAdmin
name|hb
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hb
operator|.
name|isMasterRunning
argument_list|()
argument_list|)
expr_stmt|;
name|HTableDescriptor
index|[]
name|tables
init|=
name|hb
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|boolean
name|foundTable
init|=
literal|false
decl_stmt|;
comment|/*       for (int i = 0; i< tables.length; i++) {         if (Bytes.equals(Bytes.toBytes(TABLENAME), tables[i].getName())) {           foundTable = true;           break;         }       }       assertTrue(foundTable);       LOG.info(TABLENAME + " exists.  Now waiting till startcode " +         "changes before opening a scanner");       waitOnStartCodeChange(retries);       // Delete again so we go get it all fresh.       HConnectionManager.deleteConnectionInfo(conf, false);       HTable t = new HTable(this.conf, TABLENAME);       int count = 0;       LOG.info("OPENING SCANNER");       Scan scan = new Scan();       scan.addColumns(TABLENAME_COLUMNS);       ResultScanner s = t.getScanner(scan);       try {         for (Result r: s) {           if (r == null || r.size() == 0) {             break;           }           count++;           if (count % 1000 == 0&& count> 0) {             LOG.info("Iterated over " + count + " rows.");           }         }         assertEquals(EXPECTED_COUNT, count);       } finally {         s.close();       }            */
block|}
finally|finally
block|{
name|HConnectionManager
operator|.
name|deleteConnectionInfo
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Wait till the startcode changes before we put up a scanner.  Otherwise    * we tend to hang, at least on hudson and I've had it time to time on    * my laptop.  The hang is down in RPC Client doing its call.  It    * never returns though the socket has a read timeout of 60 seconds by    * default. St.Ack    * @param retries How many retries to run.    * @throws IOException    */
specifier|private
name|void
name|waitOnStartCodeChange
parameter_list|(
specifier|final
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|m
init|=
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
comment|// This is the start code that is in the old data.
name|long
name|oldStartCode
init|=
literal|1199736332062L
decl_stmt|;
comment|// This is the first row for the TestTable that is in the old data.
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestUpgrade,,1199736362468"
argument_list|)
decl_stmt|;
name|long
name|pause
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|long
name|startcode
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retries
condition|;
name|i
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
name|m
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|res
operator|.
name|raw
argument_list|()
decl_stmt|;
if|if
condition|(
name|kvs
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|byte
index|[]
name|value
init|=
name|kvs
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|startcode
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|startcode
operator|!=
name|oldStartCode
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|!=
name|retries
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
comment|// If after all attempts startcode has not changed, fail.
if|if
condition|(
operator|!
name|changed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Startcode didn't change after "
operator|+
name|retries
operator|+
literal|" attempts"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|unzip
parameter_list|(
name|ZipInputStream
name|zip
parameter_list|,
name|FileSystem
name|dfs
parameter_list|,
name|Path
name|rootDir
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipEntry
name|e
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|e
operator|=
name|zip
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
do|do
block|{
name|len
operator|=
name|zip
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|len
operator|>
literal|0
condition|)
do|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|zip
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|listPaths
parameter_list|(
name|FileSystem
name|filesystem
parameter_list|,
name|Path
name|dir
parameter_list|,
name|int
name|rootdirlength
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|filesystem
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"d "
operator|+
name|path
argument_list|)
expr_stmt|;
name|listPaths
argument_list|(
name|filesystem
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|rootdirlength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"f "
operator|+
name|path
operator|+
literal|" size="
operator|+
name|stats
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

