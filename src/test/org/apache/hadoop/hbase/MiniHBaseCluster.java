begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|dfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * This class creates a single process HBase cluster. One thread is created for  * each server.  */
end_comment

begin_class
specifier|public
class|class
name|MiniHBaseCluster
implements|implements
name|HConstants
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MiniHBaseCluster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HBaseConfiguration
name|conf
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|boolean
name|shutdownDFS
decl_stmt|;
specifier|private
name|Path
name|parentdir
decl_stmt|;
specifier|private
name|LocalHBaseCluster
name|hbaseCluster
decl_stmt|;
specifier|private
name|boolean
name|deleteOnExit
init|=
literal|true
decl_stmt|;
comment|/**    * Starts a MiniHBaseCluster on top of a new MiniDFSCluster    *    * @param conf    * @param nRegionNodes    * @throws IOException    */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|int
name|nRegionNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|nRegionNodes
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start a MiniHBaseCluster. Use the native file system unless    * miniHdfsFilesystem is set to true.    *    * @param conf    * @param nRegionNodes    * @param miniHdfsFilesystem    * @throws IOException    */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|int
name|nRegionNodes
parameter_list|,
specifier|final
name|boolean
name|miniHdfsFilesystem
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|nRegionNodes
argument_list|,
name|miniHdfsFilesystem
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts a MiniHBaseCluster on top of an existing HDFSCluster    *<pre>    ****************************************************************************    *            *  *  *  *  *  N O T E  *  *  *  *  *    *    * If you use this constructor, you should shut down the mini dfs cluster    * in your test case.    *    *            *  *  *  *  *  N O T E  *  *  *  *  *    ****************************************************************************    *</pre>    *    * @param conf    * @param nRegionNodes    * @param dfsCluster    * @param deleteOnExit    * @throws IOException    */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|int
name|nRegionNodes
parameter_list|,
name|MiniDFSCluster
name|dfsCluster
parameter_list|,
name|boolean
name|deleteOnExit
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|dfsCluster
expr_stmt|;
name|this
operator|.
name|shutdownDFS
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|deleteOnExit
operator|=
name|deleteOnExit
expr_stmt|;
name|init
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param conf    * @param nRegionNodes    * @param miniHdfsFilesystem If true, set the hbase mini    * cluster atop a mini hdfs cluster.  Otherwise, use the    * filesystem configured in<code>conf</code>.    * @param format the mini hdfs cluster    * @param deleteOnExit clean up mini hdfs files    * @throws IOException    */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|,
name|int
name|nRegionNodes
parameter_list|,
specifier|final
name|boolean
name|miniHdfsFilesystem
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|deleteOnExit
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|deleteOnExit
operator|=
name|deleteOnExit
expr_stmt|;
name|this
operator|.
name|shutdownDFS
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|miniHdfsFilesystem
condition|)
block|{
try|try
block|{
name|this
operator|.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|2
argument_list|,
name|format
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|shutdownDFS
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|StaticTestEnvironment
operator|.
name|shutdownDfs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|cluster
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
specifier|final
name|int
name|nRegionNodes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|parentdir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HBASE_DIR
argument_list|,
name|DEFAULT_HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentdir
argument_list|)
expr_stmt|;
name|this
operator|.
name|hbaseCluster
operator|=
operator|new
name|LocalHBaseCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|nRegionNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|hbaseCluster
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Starts a region server thread running    *    * @throws IOException    * @return Name of regionserver started.    */
specifier|public
name|String
name|startRegionServer
parameter_list|()
throws|throws
name|IOException
block|{
name|LocalHBaseCluster
operator|.
name|RegionServerThread
name|t
init|=
name|this
operator|.
name|hbaseCluster
operator|.
name|addRegionServer
argument_list|()
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|t
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * Get the cluster on which this HBase cluster is running    *    * @return MiniDFSCluster    */
specifier|public
name|MiniDFSCluster
name|getDFSCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
comment|/**    * @return Returns the rpc address actually used by the master server, because    * the supplied port is not necessarily the actual port used.    */
specifier|public
name|HServerAddress
name|getHMasterAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterAddress
argument_list|()
return|;
block|}
comment|/**    * @return the HMaster    */
specifier|public
name|HMaster
name|getMaster
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getMaster
argument_list|()
return|;
block|}
comment|/**    * Cause a region server to exit without cleaning up    *    * @param serverNumber  Used as index into a list.    */
specifier|public
name|void
name|abortRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
name|HRegionServer
name|server
init|=
name|this
operator|.
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
operator|.
name|get
argument_list|(
name|serverNumber
argument_list|)
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting "
operator|+
name|server
operator|.
name|serverInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shut down the specified region server cleanly    *    * @param serverNumber  Used as index into a list.    * @return the region server that was stopped    */
specifier|public
name|HRegionServer
name|stopRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
name|HRegionServer
name|server
init|=
name|this
operator|.
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
operator|.
name|get
argument_list|(
name|serverNumber
argument_list|)
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|server
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|server
return|;
block|}
comment|/**    * Wait for the specified region server to stop    * Removes this thread from list of running threads.    * @param serverNumber    * @return Name of region server that just went down.    */
specifier|public
name|String
name|waitOnRegionServer
parameter_list|(
specifier|final
name|int
name|serverNumber
parameter_list|)
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|waitOnRegionServer
argument_list|(
name|serverNumber
argument_list|)
return|;
block|}
comment|/**    * Wait for Mini HBase Cluster to shut down.    */
specifier|public
name|void
name|join
parameter_list|()
block|{
name|this
operator|.
name|hbaseCluster
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shut down the mini HBase cluster    */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|hbaseCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutdownDFS
condition|)
block|{
name|StaticTestEnvironment
operator|.
name|shutdownDfs
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
comment|// Delete all DFS files
if|if
condition|(
name|deleteOnExit
condition|)
block|{
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|StaticTestEnvironment
operator|.
name|TEST_DIRECTORY_KEY
argument_list|)
argument_list|,
literal|"dfs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteFile
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Call flushCache on all regions on all participating regionservers.    * @throws IOException    */
name|void
name|flushcache
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|LocalHBaseCluster
operator|.
name|RegionServerThread
name|t
range|:
name|this
operator|.
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
control|)
block|{
for|for
control|(
name|HRegion
name|r
range|:
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|onlineRegions
operator|.
name|values
argument_list|()
control|)
block|{
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return List of region server threads.    */
specifier|public
name|List
argument_list|<
name|LocalHBaseCluster
operator|.
name|RegionServerThread
argument_list|>
name|getRegionThreads
parameter_list|()
block|{
return|return
name|this
operator|.
name|hbaseCluster
operator|.
name|getRegionServers
argument_list|()
return|;
block|}
block|}
end_class

end_unit

