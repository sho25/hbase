begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|dfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * This class creates a single process HBase cluster for junit testing.  * One thread is created for each server.  */
end_comment

begin_class
specifier|public
class|class
name|MiniHBaseCluster
implements|implements
name|HConstants
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MiniHBaseCluster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|parentdir
decl_stmt|;
specifier|private
name|HMaster
name|master
init|=
literal|null
decl_stmt|;
specifier|private
name|Thread
name|masterThread
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|HRegionServer
argument_list|>
name|regionServers
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|regionThreads
decl_stmt|;
specifier|private
name|boolean
name|deleteOnExit
init|=
literal|true
decl_stmt|;
comment|/**    * Starts a MiniHBaseCluster on top of a new MiniDFSCluster    *     * @param conf    * @param nRegionNodes    * @throws IOException     */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|nRegionNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|nRegionNodes
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start a MiniHBaseCluster. Use the native file system unless    * miniHdfsFilesystem is set to true.    *     * @param conf    * @param nRegionNodes    * @param miniHdfsFilesystem    * @throws IOException    */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|nRegionNodes
parameter_list|,
specifier|final
name|boolean
name|miniHdfsFilesystem
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|nRegionNodes
argument_list|,
name|miniHdfsFilesystem
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts a MiniHBaseCluster on top of an existing HDFSCluster    *     * @param conf    * @param nRegionNodes    * @param dfsCluster    * @throws IOException     */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|nRegionNodes
parameter_list|,
name|MiniDFSCluster
name|dfsCluster
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|dfsCluster
expr_stmt|;
name|this
operator|.
name|regionServers
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionServer
argument_list|>
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionThreads
operator|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param conf    * @param nRegionNodes    * @param miniHdfsFilesystem If true, set the hbase mini    * cluster atop a mini hdfs cluster.  Otherwise, use the    * filesystem configured in<code>conf</code>.    * @param format the mini hdfs cluster    * @param deleteOnExit clean up mini hdfs files    * @throws IOException     */
specifier|public
name|MiniHBaseCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|nRegionNodes
parameter_list|,
specifier|final
name|boolean
name|miniHdfsFilesystem
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|deleteOnExit
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|deleteOnExit
operator|=
name|deleteOnExit
expr_stmt|;
name|this
operator|.
name|regionServers
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionServer
argument_list|>
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionThreads
operator|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|miniHdfsFilesystem
condition|)
block|{
try|try
block|{
name|this
operator|.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|2
argument_list|,
name|format
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed setup of mini dfs cluster"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|init
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|int
name|nRegionNodes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
try|try
block|{
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentdir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HBASE_DIR
argument_list|,
name|DEFAULT_HBASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentdir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed setup of FileSystem"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|MASTER_ADDRESS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|MASTER_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
comment|// Create the master
name|this
operator|.
name|master
operator|=
operator|new
name|HMaster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
operator|.
name|master
argument_list|,
literal|"HMaster"
argument_list|)
expr_stmt|;
comment|// Start up the master
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting HMaster"
argument_list|)
expr_stmt|;
name|masterThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Set the master's port for the HRegionServers
name|String
name|address
init|=
name|master
operator|.
name|getMasterAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|MASTER_ADDRESS
argument_list|,
name|address
argument_list|)
expr_stmt|;
comment|// Start the HRegionServers.  Always have regionservers come up on
comment|// port '0' so there won't be clashes over default port as unit tests
comment|// start/stop ports at different times during the life of the test.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|REGIONSERVER_ADDRESS
argument_list|,
name|DEFAULT_HOST
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting HRegionServers"
argument_list|)
expr_stmt|;
name|startRegionServers
argument_list|(
name|nRegionNodes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Get the cluster on which this HBase cluster is running    *     * @return MiniDFSCluster    */
specifier|public
name|MiniDFSCluster
name|getDFSCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
specifier|private
name|void
name|startRegionServers
parameter_list|(
specifier|final
name|int
name|nRegionNodes
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nRegionNodes
condition|;
name|i
operator|++
control|)
block|{
name|startRegionServer
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|startRegionServer
parameter_list|()
throws|throws
name|IOException
block|{
name|HRegionServer
name|hsr
init|=
operator|new
name|HRegionServer
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|regionServers
operator|.
name|add
argument_list|(
name|hsr
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|hsr
argument_list|,
literal|"HRegionServer-"
operator|+
name|this
operator|.
name|regionServers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|regionThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**     * @return Returns the rpc address actually used by the master server, because    * the supplied port is not necessarily the actual port used.    */
specifier|public
name|HServerAddress
name|getHMasterAddress
parameter_list|()
block|{
return|return
name|master
operator|.
name|getMasterAddress
argument_list|()
return|;
block|}
comment|/**    * Cause a region server to exit without cleaning up    *     * @param serverNumber    */
specifier|public
name|void
name|abortRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
name|HRegionServer
name|server
init|=
name|this
operator|.
name|regionServers
operator|.
name|remove
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|server
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shut down the specified region server cleanly    *     * @param serverNumber    */
specifier|public
name|void
name|stopRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
name|HRegionServer
name|server
init|=
name|this
operator|.
name|regionServers
operator|.
name|remove
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Wait for the specified region server to stop    *     * @param serverNumber    */
specifier|public
name|void
name|waitOnRegionServer
parameter_list|(
name|int
name|serverNumber
parameter_list|)
block|{
name|Thread
name|regionServerThread
init|=
name|this
operator|.
name|regionThreads
operator|.
name|remove
argument_list|(
name|serverNumber
argument_list|)
decl_stmt|;
try|try
block|{
name|regionServerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Shut down the HBase cluster */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the HBase Cluster"
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionServer
name|hsr
range|:
name|this
operator|.
name|regionServers
control|)
block|{
name|hsr
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|this
operator|.
name|regionThreads
control|)
block|{
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
if|if
condition|(
name|masterThread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|masterThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"HBase Cluster shutdown complete"
argument_list|)
expr_stmt|;
comment|// Close the file system.  Will complain if files open so helps w/ leaks.
try|try
block|{
name|this
operator|.
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing down dfs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down Mini DFS cluster"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Delete all DFS files
if|if
condition|(
name|deleteOnExit
condition|)
block|{
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|StaticTestEnvironment
operator|.
name|TEST_DIRECTORY_KEY
argument_list|)
argument_list|,
literal|"dfs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteFile
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

