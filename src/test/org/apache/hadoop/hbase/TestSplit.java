begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * {@Link TestHRegion} does a split but this TestCase adds testing of fast  * split and manufactures odd-ball split scenarios.  */
end_comment

begin_class
specifier|public
class|class
name|TestSplit
extends|extends
name|MultiRegionTable
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSplit
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** constructor */
specifier|public
name|TestSplit
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Make lease timeout longer, lease checks less frequent
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.lease.period"
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.lease.thread.wakefrequency"
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Increase the amount of time between client retries
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// This size should make it so we always split using the addContent
comment|// below.  After adding all data, the first region is 1.3M
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.hregion.max.filesize"
argument_list|,
literal|1024
operator|*
literal|128
argument_list|)
expr_stmt|;
block|}
comment|/**    * Splits twice and verifies getting from each of the split regions.    * @throws Exception    */
specifier|public
name|void
name|testBasicSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
name|HLog
name|hlog
init|=
operator|new
name|HLog
argument_list|(
name|this
operator|.
name|localFs
argument_list|,
name|this
operator|.
name|testDir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
literal|1
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|region
operator|=
operator|new
name|HRegion
argument_list|(
name|testDir
argument_list|,
name|hlog
argument_list|,
name|this
operator|.
name|localFs
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|hri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|basicSplit
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|hlog
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|basicSplit
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|Exception
block|{
name|addContent
argument_list|(
name|region
argument_list|,
name|COLFAMILY_NAME3
argument_list|)
expr_stmt|;
name|region
operator|.
name|internalFlushcache
argument_list|()
expr_stmt|;
name|Text
name|midkey
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|region
operator|.
name|needsSplit
argument_list|(
name|midkey
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
index|[]
name|regions
init|=
name|split
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// Assert can get rows out of new regions.  Should be able to get first
comment|// row from first region and the midkey from second region.
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[]
block|{
name|FIRST_CHAR
block|,
name|FIRST_CHAR
block|,
name|FIRST_CHAR
block|}
decl_stmt|;
name|assertGet
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|COLFAMILY_NAME3
argument_list|,
operator|new
name|Text
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|COLFAMILY_NAME3
argument_list|,
name|midkey
argument_list|)
expr_stmt|;
comment|// Test I can get scanner and that it starts at right place.
name|assertScan
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|COLFAMILY_NAME3
argument_list|,
operator|new
name|Text
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertScan
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|COLFAMILY_NAME3
argument_list|,
name|midkey
argument_list|)
expr_stmt|;
comment|// Now prove can't split regions that have references.
name|Text
index|[]
name|midkeys
init|=
operator|new
name|Text
index|[
name|regions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|midkeys
index|[
name|i
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
comment|// Even after above splits, still needs split but after splits its
comment|// unsplitable because biggest store file is reference.  References
comment|// make the store unsplittable, until something bigger comes along.
name|assertFalse
argument_list|(
name|regions
index|[
name|i
index|]
operator|.
name|needsSplit
argument_list|(
name|midkeys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add so much data to this region, we create a store file that is> than
comment|// one of our unsplitable references.
comment|// it will.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|COLFAMILY_NAME3
argument_list|)
expr_stmt|;
block|}
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|COLFAMILY_NAME2
argument_list|)
expr_stmt|;
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|COLFAMILY_NAME1
argument_list|)
expr_stmt|;
name|regions
index|[
name|i
index|]
operator|.
name|internalFlushcache
argument_list|()
expr_stmt|;
block|}
comment|// Assert that even if one store file is larger than a reference, the
comment|// region is still deemed unsplitable (Can't split region if references
comment|// presen).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|midkeys
index|[
name|i
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
comment|// Even after above splits, still needs split but after splits its
comment|// unsplitable because biggest store file is reference.  References
comment|// make the store unsplittable, until something bigger comes along.
name|assertFalse
argument_list|(
name|regions
index|[
name|i
index|]
operator|.
name|needsSplit
argument_list|(
name|midkeys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// To make regions splitable force compaction.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|regions
index|[
name|i
index|]
operator|.
name|compactStores
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
comment|// Split these two daughter regions so then I'll have 4 regions.  Will
comment|// split because added data above.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HRegion
index|[]
name|rs
init|=
name|split
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sortedMap
operator|.
name|put
argument_list|(
name|rs
index|[
name|j
index|]
operator|.
name|getRegionName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|rs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Made 4 regions"
argument_list|)
expr_stmt|;
comment|// The splits should have been even.  Test I can get some arbitrary row out
comment|// of each.
name|int
name|interval
init|=
operator|(
name|LAST_CHAR
operator|-
name|FIRST_CHAR
operator|)
operator|/
literal|3
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|sortedMap
operator|.
name|values
argument_list|()
control|)
block|{
name|assertGet
argument_list|(
name|r
argument_list|,
name|COLFAMILY_NAME3
argument_list|,
operator|new
name|Text
argument_list|(
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|b
index|[
literal|0
index|]
operator|+=
name|interval
expr_stmt|;
block|}
block|}
comment|/**    * Test that a region is cleaned up after its daughter splits release all    * references.    * @throws Exception    */
specifier|public
name|void
name|testSplitRegionIsDeleted
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Start up a hbase cluster
name|MiniHBaseCluster
name|cluster
init|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create a table.
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This builds a multi-region table by splitting.  It will assert
comment|// the parent region gets cleaned-up.
name|MultiRegionTable
operator|.
name|makeMultiRegionTable
argument_list|(
name|conf
argument_list|,
name|cluster
argument_list|,
name|this
operator|.
name|localFs
argument_list|,
name|getName
argument_list|()
argument_list|,
name|COLFAMILY_NAME3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"test failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|assertGet
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|Text
name|k
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Now I have k, get values out and assert they are as expected.
name|byte
index|[]
index|[]
name|results
init|=
name|r
operator|.
name|get
argument_list|(
name|k
argument_list|,
operator|new
name|Text
argument_list|(
name|family
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|results
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Text
name|tmp
init|=
operator|new
name|Text
argument_list|(
name|results
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|// Row should be equal to value every time.
name|assertEquals
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|tmp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Assert first value in the passed region is<code>firstValue</code>.    * @param r    * @param column    * @param firstValue    * @throws IOException    */
specifier|private
name|void
name|assertScan
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|String
name|column
parameter_list|,
specifier|final
name|Text
name|firstValue
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
index|[]
name|cols
init|=
operator|new
name|Text
index|[]
block|{
operator|new
name|Text
argument_list|(
name|column
argument_list|)
block|}
decl_stmt|;
name|HInternalScannerInterface
name|s
init|=
name|r
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|OUTER_LOOP
label|:
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Text
name|col
range|:
name|curVals
operator|.
name|keySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|val
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|Text
name|curval
init|=
operator|new
name|Text
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|assertTrue
argument_list|(
name|curval
operator|.
name|compareTo
argument_list|(
name|firstValue
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not asserting anything.  Might as well break.
break|break
name|OUTER_LOOP
break|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|HRegion
index|[]
name|split
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|midKey
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|needsSplit
argument_list|(
name|midKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert can get mid key from passed region.
name|assertGet
argument_list|(
name|r
argument_list|,
name|COLFAMILY_NAME3
argument_list|,
name|midKey
argument_list|)
expr_stmt|;
name|HRegion
index|[]
name|regions
init|=
name|r
operator|.
name|closeAndSplit
argument_list|(
name|midKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|regions
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
block|}
end_class

end_unit

