begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClusterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|TestOldAPIGetRowVersions
extends|extends
name|HBaseClusterTestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestGetRowVersions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENTS_STR
init|=
literal|"contents:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROW
init|=
literal|"row"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN
init|=
literal|"contents:contents"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TIMESTAMP
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VALUE1
init|=
literal|"value1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VALUE2
init|=
literal|"value2"
decl_stmt|;
specifier|private
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|private
name|HTable
name|table
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|CONTENTS_STR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
comment|/** @throws Exception */
specifier|public
name|void
name|testGetRowMultipleVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|ROW
argument_list|,
name|TIMESTAMP
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COLUMN
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|.
name|commit
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|/* Taking out this recycle of the mini cluster -- it don't work well      * Debug it if fails in TestGetRowVersion, not this old api version.     // Shut down and restart the HBase cluster     this.cluster.shutdown();     this.zooKeeperCluster.shutdown();     LOG.debug("HBase cluster shut down -- restarting");     this.hBaseClusterSetup();     */
comment|// Make a new connection
name|this
operator|.
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
comment|// Overwrite previous value
name|b
operator|=
operator|new
name|BatchUpdate
argument_list|(
name|ROW
argument_list|,
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COLUMN
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|.
name|commit
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// Now verify that getRow(row, column, latest) works
name|RowResult
name|r
init|=
name|table
operator|.
name|getRow
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Cell
name|c
init|=
name|r
operator|.
name|get
argument_list|(
name|COLUMN
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|compareTo
argument_list|(
name|VALUE2
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Now check getRow with multiple versions
name|r
operator|=
name|table
operator|.
name|getRow
argument_list|(
name|ROW
argument_list|,
name|HConstants
operator|.
name|ALL_VERSIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|e
range|:
name|r
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Column name
comment|//      System.err.print("  " + Bytes.toString(e.getKey()));
name|c
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
comment|// Need to iterate since there may be multiple versions
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|it
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|v
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|value
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|v
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//        System.err.println(" = " + value);
name|assertTrue
argument_list|(
name|VALUE2
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|v
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

