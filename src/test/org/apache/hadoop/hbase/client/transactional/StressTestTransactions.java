begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|transactional
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClusterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|TransactionalRegionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|transactional
operator|.
name|TransactionalRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Stress Test the transaction functionality. This requires to run an  * {@link TransactionalRegionServer}. We run many threads doing reads/writes  * which may conflict with each other. We have two types of transactions, those  * which operate on rows of a single table, and those which operate on rows  * across multiple tables. Each transaction type has a modification operation  * which changes two values while maintaining the sum. Also each transaction  * type has a consistency-check operation which sums all rows and verifies that  * the sum is as expected.  */
end_comment

begin_class
specifier|public
class|class
name|StressTestTransactions
extends|extends
name|HBaseClusterTestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StressTestTransactions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TABLES
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ST_ROWS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MT_ROWS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TRANSACTIONS_PER_THREAD
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SINGLE_TABLE_THREADS
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MULTI_TABLE_THREADS
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PRE_COMMIT_SLEEP
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family:a"
argument_list|)
decl_stmt|;
specifier|private
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|private
name|TransactionalTable
index|[]
name|tables
decl_stmt|;
specifier|private
name|TransactionManager
name|transactionManager
decl_stmt|;
comment|/** constructor */
specifier|public
name|StressTestTransactions
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_CLASS
argument_list|,
name|TransactionalRegionInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_IMPL
argument_list|,
name|TransactionalRegionServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|tables
operator|=
operator|new
name|TransactionalTable
index|[
name|NUM_TABLES
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|makeTableName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|tables
index|[
name|i
index|]
operator|=
operator|new
name|TransactionalTable
argument_list|(
name|conf
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transactionManager
operator|=
operator|new
name|TransactionManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|makeTableName
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
return|return
literal|"table"
operator|+
name|i
return|;
block|}
specifier|private
name|void
name|writeInitalValues
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|TransactionalTable
name|table
range|:
name|tables
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ST_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|makeSTRow
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SingleTableTransactionThread
operator|.
name|INITIAL_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MT_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|makeMTRow
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BatchUpdate
name|b
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|COL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MultiTableTransactionThread
operator|.
name|INITIAL_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|byte
index|[]
name|makeSTRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"st"
operator|+
name|i
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|makeMTRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mt"
operator|+
name|i
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|nextThreadNum
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|stopRequest
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|consistencyFailure
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Thread which runs transactions
specifier|abstract
class|class
name|TransactionThread
extends|extends
name|Thread
block|{
specifier|private
name|int
name|numRuns
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|numAborts
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|numUnknowns
init|=
literal|0
decl_stmt|;
specifier|public
name|TransactionThread
parameter_list|(
specifier|final
name|String
name|namePrefix
parameter_list|)
block|{
name|super
operator|.
name|setName
argument_list|(
name|namePrefix
operator|+
literal|"transaction "
operator|+
name|nextThreadNum
operator|++
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TRANSACTIONS_PER_THREAD
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stopRequest
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|numRuns
operator|++
expr_stmt|;
name|transaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTransactionException
name|e
parameter_list|)
block|{
name|numUnknowns
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CommitUnsuccessfulException
name|e
parameter_list|)
block|{
name|numAborts
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|transaction
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
function_decl|;
specifier|public
name|int
name|getNumAborts
parameter_list|()
block|{
return|return
name|numAborts
return|;
block|}
specifier|public
name|int
name|getNumUnknowns
parameter_list|()
block|{
return|return
name|numUnknowns
return|;
block|}
specifier|protected
name|void
name|preCommitSleep
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|PRE_COMMIT_SLEEP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|consistencyFailure
parameter_list|()
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Consistency failure"
argument_list|)
expr_stmt|;
name|stopRequest
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consistencyFailure
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the numRuns.      *       * @return Return the numRuns.      */
specifier|public
name|int
name|getNumRuns
parameter_list|()
block|{
return|return
name|numRuns
return|;
block|}
block|}
comment|// Atomically change the value of two rows rows while maintaining the sum.
comment|// This should preserve the global sum of the rows, which is also checked
comment|// with a transaction.
specifier|private
class|class
name|SingleTableTransactionThread
extends|extends
name|TransactionThread
block|{
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_VALUE
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TOTAL_SUM
init|=
name|INITIAL_VALUE
operator|*
name|NUM_ST_ROWS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TRANSFER_AMT
init|=
literal|100
decl_stmt|;
specifier|private
name|TransactionalTable
name|table
decl_stmt|;
name|boolean
name|doCheck
init|=
literal|false
decl_stmt|;
specifier|public
name|SingleTableTransactionThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"single table "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|transaction
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
if|if
condition|(
name|doCheck
condition|)
block|{
name|checkTotalSum
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doSingleRowChange
argument_list|()
expr_stmt|;
block|}
name|doCheck
operator|=
operator|!
name|doCheck
expr_stmt|;
block|}
specifier|private
name|void
name|doSingleRowChange
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
name|table
operator|=
name|tables
index|[
name|RAND
operator|.
name|nextInt
argument_list|(
name|NUM_TABLES
argument_list|)
index|]
expr_stmt|;
name|int
name|transferAmount
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|MAX_TRANSFER_AMT
operator|*
literal|2
argument_list|)
operator|-
name|MAX_TRANSFER_AMT
decl_stmt|;
name|int
name|row1Index
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|NUM_ST_ROWS
argument_list|)
decl_stmt|;
name|int
name|row2Index
decl_stmt|;
do|do
block|{
name|row2Index
operator|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|NUM_ST_ROWS
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|row2Index
operator|==
name|row1Index
condition|)
do|;
name|byte
index|[]
name|row1
init|=
name|makeSTRow
argument_list|(
name|row1Index
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|makeSTRow
argument_list|(
name|row2Index
argument_list|)
decl_stmt|;
name|TransactionState
name|transactionState
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|int
name|row1Amount
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|transactionState
argument_list|,
name|row1
argument_list|,
name|COL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|row2Amount
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|transactionState
argument_list|,
name|row2
argument_list|,
name|COL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|row1Amount
operator|-=
name|transferAmount
expr_stmt|;
name|row2Amount
operator|+=
name|transferAmount
expr_stmt|;
name|BatchUpdate
name|update
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|update
operator|.
name|put
argument_list|(
name|COL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row1Amount
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|transactionState
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|update
operator|=
operator|new
name|BatchUpdate
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|update
operator|.
name|put
argument_list|(
name|COL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row2Amount
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|transactionState
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|super
operator|.
name|preCommitSleep
argument_list|()
expr_stmt|;
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commited"
argument_list|)
expr_stmt|;
block|}
comment|// Check the table we last mutated
specifier|private
name|void
name|checkTotalSum
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
name|TransactionState
name|transactionState
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|int
name|totalSum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ST_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|totalSum
operator|+=
name|Bytes
operator|.
name|toInt
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|transactionState
argument_list|,
name|makeSTRow
argument_list|(
name|i
argument_list|)
argument_list|,
name|COL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
if|if
condition|(
name|TOTAL_SUM
operator|!=
name|totalSum
condition|)
block|{
name|super
operator|.
name|consistencyFailure
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Similar to SingleTable, but this time we maintain consistency across tables
comment|// rather than rows
specifier|private
class|class
name|MultiTableTransactionThread
extends|extends
name|TransactionThread
block|{
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_VALUE
init|=
literal|1000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TOTAL_SUM
init|=
name|INITIAL_VALUE
operator|*
name|NUM_TABLES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TRANSFER_AMT
init|=
literal|100
decl_stmt|;
specifier|private
name|byte
index|[]
name|row
decl_stmt|;
name|boolean
name|doCheck
init|=
literal|false
decl_stmt|;
specifier|public
name|MultiTableTransactionThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"multi table"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|transaction
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
if|if
condition|(
name|doCheck
condition|)
block|{
name|checkTotalSum
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doSingleRowChange
argument_list|()
expr_stmt|;
block|}
name|doCheck
operator|=
operator|!
name|doCheck
expr_stmt|;
block|}
specifier|private
name|void
name|doSingleRowChange
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
name|row
operator|=
name|makeMTRow
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|NUM_MT_ROWS
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|transferAmount
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|MAX_TRANSFER_AMT
operator|*
literal|2
argument_list|)
operator|-
name|MAX_TRANSFER_AMT
decl_stmt|;
name|int
name|table1Index
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|tables
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|table2Index
decl_stmt|;
do|do
block|{
name|table2Index
operator|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|table2Index
operator|==
name|table1Index
condition|)
do|;
name|TransactionalTable
name|table1
init|=
name|tables
index|[
name|table1Index
index|]
decl_stmt|;
name|TransactionalTable
name|table2
init|=
name|tables
index|[
name|table2Index
index|]
decl_stmt|;
name|TransactionState
name|transactionState
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|int
name|table1Amount
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|table1
operator|.
name|get
argument_list|(
name|transactionState
argument_list|,
name|row
argument_list|,
name|COL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|table2Amount
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|table2
operator|.
name|get
argument_list|(
name|transactionState
argument_list|,
name|row
argument_list|,
name|COL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|table1Amount
operator|-=
name|transferAmount
expr_stmt|;
name|table2Amount
operator|+=
name|transferAmount
expr_stmt|;
name|BatchUpdate
name|update
init|=
operator|new
name|BatchUpdate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|update
operator|.
name|put
argument_list|(
name|COL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table1Amount
argument_list|)
argument_list|)
expr_stmt|;
name|table1
operator|.
name|commit
argument_list|(
name|transactionState
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|update
operator|=
operator|new
name|BatchUpdate
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|update
operator|.
name|put
argument_list|(
name|COL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table2Amount
argument_list|)
argument_list|)
expr_stmt|;
name|table2
operator|.
name|commit
argument_list|(
name|transactionState
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|super
operator|.
name|preCommitSleep
argument_list|()
expr_stmt|;
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|table1Amount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|table2Amount
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTotalSum
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitUnsuccessfulException
block|{
name|TransactionState
name|transactionState
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|int
name|totalSum
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|amounts
init|=
operator|new
name|int
index|[
name|tables
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|amount
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|transactionState
argument_list|,
name|row
argument_list|,
name|COL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|amounts
index|[
name|i
index|]
operator|=
name|amount
expr_stmt|;
name|totalSum
operator|+=
name|amount
expr_stmt|;
block|}
name|transactionManager
operator|.
name|tryCommit
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|amounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|TOTAL_SUM
operator|!=
name|totalSum
condition|)
block|{
name|super
operator|.
name|consistencyFailure
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testStressTransactions
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|writeInitalValues
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TransactionThread
argument_list|>
name|transactionThreads
init|=
operator|new
name|LinkedList
argument_list|<
name|TransactionThread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SINGLE_TABLE_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|TransactionThread
name|transactionThread
init|=
operator|new
name|SingleTableTransactionThread
argument_list|()
decl_stmt|;
name|transactionThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|transactionThreads
operator|.
name|add
argument_list|(
name|transactionThread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MULTI_TABLE_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|TransactionThread
name|transactionThread
init|=
operator|new
name|MultiTableTransactionThread
argument_list|()
decl_stmt|;
name|transactionThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|transactionThreads
operator|.
name|add
argument_list|(
name|transactionThread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TransactionThread
name|transactionThread
range|:
name|transactionThreads
control|)
block|{
name|transactionThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|TransactionThread
name|transactionThread
range|:
name|transactionThreads
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|transactionThread
operator|.
name|getName
argument_list|()
operator|+
literal|" done with "
operator|+
name|transactionThread
operator|.
name|getNumAborts
argument_list|()
operator|+
literal|" aborts, and "
operator|+
name|transactionThread
operator|.
name|getNumUnknowns
argument_list|()
operator|+
literal|" unknown transactions of "
operator|+
name|transactionThread
operator|.
name|getNumRuns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doFinalConsistencyChecks
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doFinalConsistencyChecks
parameter_list|()
throws|throws
name|IOException
block|{
name|int
index|[]
name|mtSums
init|=
operator|new
name|int
index|[
name|NUM_MT_ROWS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mtSums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mtSums
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|TransactionalTable
name|table
range|:
name|tables
control|)
block|{
name|int
name|thisTableSum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ST_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|makeSTRow
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|thisTableSum
operator|+=
name|Bytes
operator|.
name|toInt
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|row
argument_list|,
name|COL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SingleTableTransactionThread
operator|.
name|TOTAL_SUM
argument_list|,
name|thisTableSum
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MT_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|makeMTRow
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|mtSums
index|[
name|i
index|]
operator|+=
name|Bytes
operator|.
name|toInt
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|row
argument_list|,
name|COL
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|mtSum
range|:
name|mtSums
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MultiTableTransactionThread
operator|.
name|TOTAL_SUM
argument_list|,
name|mtSum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

