begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|tableindexed
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClusterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PerformanceEvaluation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|tableindexed
operator|.
name|IndexedRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|TestIndexedTable
extends|extends
name|HBaseClusterTestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestIndexedTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"table1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COL_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family:a"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_COL_A_ASC
init|=
literal|"A-Acending"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ROWS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_VAL
init|=
literal|10000
decl_stmt|;
specifier|private
name|IndexedTableAdmin
name|admin
decl_stmt|;
specifier|private
name|IndexedTable
name|table
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/** constructor */
specifier|public
name|TestIndexedTable
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_IMPL
argument_list|,
name|IndexedRegionServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.info.port"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a new index that does lexicographic ordering on COL_A
name|IndexSpecification
name|colAIndex
init|=
operator|new
name|IndexSpecification
argument_list|(
name|INDEX_COL_A_ASC
argument_list|,
name|COL_A
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addIndex
argument_list|(
name|colAIndex
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|new
name|IndexedTableAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|IndexedTable
argument_list|(
name|conf
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeInitalRows
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|BatchUpdate
name|update
init|=
operator|new
name|BatchUpdate
argument_list|(
name|PerformanceEvaluation
operator|.
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|colA
init|=
name|PerformanceEvaluation
operator|.
name|format
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_VAL
argument_list|)
argument_list|)
decl_stmt|;
name|update
operator|.
name|put
argument_list|(
name|COL_A
argument_list|,
name|colA
argument_list|)
expr_stmt|;
name|table
operator|.
name|commit
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Inserted row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|update
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"] val: ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|colA
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testInitialWrites
parameter_list|()
throws|throws
name|IOException
block|{
name|writeInitalRows
argument_list|()
expr_stmt|;
name|assertRowsInOrder
argument_list|(
name|NUM_ROWS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertRowsInOrder
parameter_list|(
name|int
name|numRowsExpected
parameter_list|)
throws|throws
name|IndexNotFoundException
throws|,
name|IOException
block|{
name|Scanner
name|scanner
init|=
name|table
operator|.
name|getIndexedScanner
argument_list|(
name|INDEX_COL_A_ASC
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|numRows
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastColA
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RowResult
name|rowResult
range|:
name|scanner
control|)
block|{
name|byte
index|[]
name|colA
init|=
name|rowResult
operator|.
name|get
argument_list|(
name|COL_A
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"index scan : row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|rowResult
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"] value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|colA
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastColA
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastColA
argument_list|,
name|colA
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastColA
operator|=
name|colA
expr_stmt|;
name|numRows
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numRowsExpected
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultipleWrites
parameter_list|()
throws|throws
name|IOException
block|{
name|writeInitalRows
argument_list|()
expr_stmt|;
name|writeInitalRows
argument_list|()
expr_stmt|;
comment|// Update the rows.
name|assertRowsInOrder
argument_list|(
name|NUM_ROWS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|writeInitalRows
argument_list|()
expr_stmt|;
comment|// Delete the first row;
name|table
operator|.
name|deleteAll
argument_list|(
name|PerformanceEvaluation
operator|.
name|format
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertRowsInOrder
argument_list|(
name|NUM_ROWS
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

