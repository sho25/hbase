begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClusterTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|TestClient
extends|extends
name|HBaseClusterTestCase
block|{
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|EMPTY
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/**    * Constructor does nothing special, start cluster.    */
specifier|public
name|TestClient
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testSuperSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSuperSimple"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|TABLE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected null result"
argument_list|,
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Done."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFilters"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"col[1-5]"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|expectedIndex
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
name|expectedIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|QUALIFIERS
index|[
name|expectedIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|expectedIndex
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedIndex
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test simple table and non-existent row cases.    */
specifier|public
name|void
name|testSimpleMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSimpleMissing"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// Try to get a row on an empty table
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Insert a row
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Try to get empty rows around it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan empty rows around it
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can actually get the row
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Make sure we can scan the row
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test basic puts, gets, scans, and deletes for a single row    * in a multiple family table.    */
specifier|public
name|void
name|testSingleRowMultipleFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSingleRowMultipleFamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeN
argument_list|(
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeN
argument_list|(
name|QUALIFIER
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|Get
name|get
decl_stmt|;
name|Scan
name|scan
decl_stmt|;
name|Delete
name|delete
decl_stmt|;
name|Put
name|put
decl_stmt|;
name|Result
name|result
decl_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Insert one column to one family
comment|////////////////////////////////////////////////////////////////////////////
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get the single column
name|getVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Scan the single column
name|scanVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Get empty results around inserted column
name|getVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Scan empty results around inserted column
name|scanVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush memstore and run same tests from storefiles
comment|////////////////////////////////////////////////////////////////////////////
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// Redo get and scan tests from storefile
name|getVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Now, Test reading from memstore and storefiles at once
comment|////////////////////////////////////////////////////////////////////////////
comment|// Insert multiple columns to two other families
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|9
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get multiple columns across multiple families and get empties around it
name|singleRowGetTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|// Scan multiple columns across multiple families and scan empties around it
name|singleRowScanTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush the table again
comment|////////////////////////////////////////////////////////////////////////////
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// Redo tests again
name|singleRowGetTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
name|singleRowScanTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|// Insert more data to memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete a storefile column
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get deleted column
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get a column before it and after it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan a column before it and after it
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete a memstore column
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get deleted column
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get a column before it and after it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan a column before it and after it
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete joint storefile/memstore family
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get storefile column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get memstore column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan storefile column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan memstore column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get another family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan another family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush everything and rerun delete tests
comment|////////////////////////////////////////////////////////////////////////////
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// Try to get storefile column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get memstore column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan storefile column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan memstore column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get another family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan another family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|testNull
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testNull"
argument_list|)
decl_stmt|;
comment|// Null table name (should NOT work)
try|try
block|{
name|HTable
name|htFail
init|=
name|createTable
argument_list|(
literal|null
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Creating a table with null name passed, should have failed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// Null family (should NOT work)
try|try
block|{
name|HTable
name|htFail
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Creating a table with a null family passed, should fail"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Null row (should NOT work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Inserting a null row worked, should throw exception"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// Null qualifier (should work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Using a row with null qualifier threw exception, should "
operator|+
literal|"pass"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Use a new table
name|byte
index|[]
name|TABLE2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testNull2"
argument_list|)
decl_stmt|;
name|ht
operator|=
name|createTable
argument_list|(
name|TABLE2
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
comment|// Empty qualifier, byte[0] instead of null (should work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|EMPTY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Flush and try again
name|flushMemStore
argument_list|(
name|TABLE2
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILY
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Using a row with null qualifier threw exception, should "
operator|+
literal|"pass"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Null value
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Null values should be allowed, but threw exception"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSimpleVersions"
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert 4 versions of same column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Flush and redo
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some memstore and retest
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions of table is respected
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|,
name|VALUES
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|13
index|]
argument_list|,
name|VALUES
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|15
index|]
argument_list|,
name|VALUES
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Delete a version in the memstore and a version in a storefile
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Test that it's gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVersionLimits
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testVersionLimits"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
index|[]
name|LIMITS
init|=
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|,
name|LIMITS
argument_list|)
decl_stmt|;
comment|// Insert limit + 1 on each family
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we only get the right number out of each
comment|// Family0
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Family1
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Family2
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Try all families
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testDeletes"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeN
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test delete latest version
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Expected client behavior might be that you can re-put deleted values
comment|// But alas, this is not to be.  We can't put them back in either case.
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// The Get returns the latest value but then does not return the
comment|// oldest, which was never deleted, ts[1].
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// The Scanner returns the previous values, the expected-unexpected behavior
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test deleting an entire family from one row but not the other various ways
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test if we delete the family first in one row (HBASE-1541)
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add test of bulk deleting.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Baseline "scalability" test.    *     * Tests one hundred families, one million columns, one million versions    */
specifier|public
name|void
name|XtestMillions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 100 families
comment|// millions of columns
comment|// millions of versions
block|}
specifier|public
name|void
name|XtestMultipleRegionsAndBatchPuts
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two family table
comment|// Insert lots of rows
comment|// Insert to the same row with batched puts
comment|// Insert to multiple rows with batched puts
comment|// Split the table
comment|// Get row from first region
comment|// Get row from second region
comment|// Scan all rows
comment|// Insert to multiple regions with batched puts
comment|// Get row from first region
comment|// Get row from second region
comment|// Scan all rows
block|}
specifier|public
name|void
name|XtestMultipleRowMultipleFamily
parameter_list|()
throws|throws
name|Exception
block|{        }
comment|/**    * Explicitly test JIRAs related to HBASE-880 / Client API    */
specifier|public
name|void
name|testJIRAs
parameter_list|()
throws|throws
name|Exception
block|{
name|jiraTest867
argument_list|()
expr_stmt|;
name|jiraTest861
argument_list|()
expr_stmt|;
name|jiraTest33
argument_list|()
expr_stmt|;
name|jiraTest1014
argument_list|()
expr_stmt|;
name|jiraTest1182
argument_list|()
expr_stmt|;
name|jiraTest52
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// JIRA Testers
comment|//
comment|/**    * HBASE-867    *    If millions of columns in a column family, hbase scanner won't come up    *        *    Test will create numRows rows, each with numColsPerRow columns     *    (1 version each), and attempt to scan them all.    *        *    To test at scale, up numColsPerRow to the millions    *    (have not gotten that to work running as junit though)    */
specifier|private
name|void
name|jiraTest867
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|int
name|numColsPerRow
init|=
literal|2000
decl_stmt|;
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jiraTest867"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
name|numRows
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeN
argument_list|(
name|QUALIFIER
argument_list|,
name|numColsPerRow
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Insert rows
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numColsPerRow
condition|;
name|j
operator|++
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|j
index|]
argument_list|,
name|QUALIFIERS
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Put expected to contain "
operator|+
name|numColsPerRow
operator|+
literal|" columns but "
operator|+
literal|"only contains "
operator|+
name|put
operator|.
name|size
argument_list|()
argument_list|,
name|put
operator|.
name|size
argument_list|()
operator|==
name|numColsPerRow
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// Get a row
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|keys
init|=
name|result
operator|.
name|sorted
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Scan the rows
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|result
operator|.
name|sorted
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColsPerRow
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|rowCount
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to scan "
operator|+
name|numRows
operator|+
literal|" rows but actually scanned "
operator|+
name|rowCount
operator|+
literal|" rows"
argument_list|,
name|rowCount
operator|==
name|numRows
argument_list|)
expr_stmt|;
comment|// flush and try again
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// Get a row
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|keys
operator|=
name|result
operator|.
name|sorted
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Scan the rows
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|rowCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
name|result
operator|.
name|sorted
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColsPerRow
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|rowCount
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to scan "
operator|+
name|numRows
operator|+
literal|" rows but actually scanned "
operator|+
name|rowCount
operator|+
literal|" rows"
argument_list|,
name|rowCount
operator|==
name|numRows
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-861    *    get with timestamp will return a value if there is a version with an     *    earlier timestamp    */
specifier|private
name|void
name|jiraTest861
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jiraTest861"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert three versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get the middle value
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Try to get one version before (expect fail)
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Try to get one version after (expect fail)
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Insert two more versions surrounding others, into memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Check we can get everything we should and can't get what we shouldn't
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Try same from two storefiles
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-33    *    Add a HTable get/obtainScanner method that retrieves all versions of a     *    particular column and row between two timestamps    */
specifier|private
name|void
name|jiraTest33
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jiraTest33"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-1014    *    commit(BatchUpdate) method should return timestamp    */
specifier|private
name|void
name|jiraTest1014
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jiraTest1014"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|long
name|manualStamp
init|=
literal|12345
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
operator|-
literal|1
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-1182    *    Scan for columns> some timestamp     */
specifier|private
name|void
name|jiraTest1182
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jiraTest1182"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-52    *    Add a means of scanning over all versions    */
specifier|private
name|void
name|jiraTest52
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jiraTest52"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|getAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Bulk Testers
comment|//
specifier|private
name|void
name|getVersionRangeAndVerifyGreaterThan
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
operator|+
literal|1
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionRangeAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
index|]
argument_list|,
name|stamps
index|[
name|end
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getAllVersionsAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionRangeAndVerifyGreaterThan
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
operator|+
literal|1
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionRangeAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
index|]
argument_list|,
name|stamps
index|[
name|end
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanAllVersionsAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionAndVerifyMissing
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionAndVerify
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionAndVerifyMissing
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getTestNull
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|EMPTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|EMPTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|EMPTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanTestNull
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|EMPTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|EMPTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|EMPTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|EMPTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|singleRowGetTest
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Single column from memstore
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile, family match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// wildcard match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// explicit match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Three column, one from memstore two from storefile, different families,
comment|// wildcard match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Everything
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
literal|0
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Get around inserted columns
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|singleRowScanTest
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Single column from memstore
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile, family match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// wildcard match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// explicit match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Three column, one from memstore two from storefile, different families,
comment|// wildcard match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Everything
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
literal|0
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Scan around inserted columns
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a single column using gets.    * Expects family and qualifier arrays to be valid for at least     * the range:  idx-2< idx< idx+2    */
specifier|private
name|void
name|getVerifySingleColumn
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|,
name|int
name|VALUEIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a single column using scanners.    * Expects family and qualifier arrays to be valid for at least     * the range:  idx-2 to idx+2    * Expects row array to be valid for at least idx to idx+2     */
specifier|private
name|void
name|scanVerifySingleColumn
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|,
name|int
name|VALUEIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify we do not read any values by accident around a single column    * Same requirements as getVerifySingleColumn    */
specifier|private
name|void
name|getVerifySingleEmpty
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVerifySingleEmpty
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Verifiers
comment|//
specifier|private
name|void
name|assertKey
parameter_list|(
name|KeyValue
name|key
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNumKeys
parameter_list|(
name|Result
name|result
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|n
operator|+
literal|" keys but got "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
name|n
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
index|[]
index|[]
name|idxs
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|idxs
operator|.
name|length
operator|+
literal|" keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
name|idxs
operator|.
name|length
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|keys
init|=
name|result
operator|.
name|sorted
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|family
init|=
name|families
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|0
index|]
index|]
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|qualifiers
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|1
index|]
index|]
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|values
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|2
index|]
index|]
decl_stmt|;
name|KeyValue
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertNResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedResults
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedResults
operator|+
literal|" keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
name|expectedResults
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|keys
init|=
name|result
operator|.
name|sorted
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
name|values
index|[
name|end
operator|-
name|i
index|]
decl_stmt|;
name|long
name|ts
init|=
name|stamps
index|[
name|end
operator|-
name|i
index|]
decl_stmt|;
name|KeyValue
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|key
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|key
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ts ["
operator|+
name|ts
operator|+
literal|"] "
operator|+
literal|"Got ts ["
operator|+
name|key
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ts
operator|==
name|key
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|key
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate that result contains two specified keys, exactly.    * It is assumed key A sorts before key B.    */
specifier|private
name|void
name|assertDoubleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|familyA
parameter_list|,
name|byte
index|[]
name|qualifierA
parameter_list|,
name|byte
index|[]
name|valueA
parameter_list|,
name|byte
index|[]
name|familyB
parameter_list|,
name|byte
index|[]
name|qualifierB
parameter_list|,
name|byte
index|[]
name|valueB
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected two keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kv
init|=
name|result
operator|.
name|sorted
argument_list|()
decl_stmt|;
name|KeyValue
name|kvA
init|=
name|kv
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvA
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|familyA
argument_list|,
name|kvA
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifierA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvA
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifierA
argument_list|,
name|kvA
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valueA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvA
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|valueA
argument_list|,
name|kvA
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kvB
init|=
name|kv
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvB
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|familyB
argument_list|,
name|kvB
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifierB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvB
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifierB
argument_list|,
name|kvB
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valueB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kvB
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|valueB
argument_list|,
name|kvB
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    *     */
specifier|private
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ts ["
operator|+
name|ts
operator|+
literal|"] "
operator|+
literal|"Got ts ["
operator|+
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ts
operator|==
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmptyResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"expected an empty result but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|" keys"
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNullResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"expected null result but received a non-null result"
argument_list|,
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Helpers
comment|//
specifier|private
name|void
name|flushMemStore
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\nFlushing table ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|"]...\n"
argument_list|)
expr_stmt|;
comment|//    HBaseAdmin hba = new HBaseAdmin(conf);
comment|//    hba.flush(tableName);
name|cluster
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTable flushed.\n\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Result
name|getSingleScanResult
parameter_list|(
name|HTable
name|ht
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeNAscii
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|256
condition|)
block|{
return|return
name|makeNBig
argument_list|(
name|base
argument_list|,
name|n
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|tail
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|tail
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeN
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|256
condition|)
block|{
return|return
name|makeNBig
argument_list|(
name|base
argument_list|,
name|n
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|i
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeNBig
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|int
name|byteA
init|=
operator|(
name|i
operator|%
literal|256
operator|)
decl_stmt|;
name|int
name|byteB
init|=
operator|(
name|i
operator|>>
literal|8
operator|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|byteB
block|,
operator|(
name|byte
operator|)
name|byteA
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|long
index|[]
name|makeStamps
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|long
index|[]
name|stamps
init|=
operator|new
name|long
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
name|stamps
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|stamps
return|;
block|}
specifier|private
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
return|;
block|}
specifier|private
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|,
name|numVersions
argument_list|)
return|;
block|}
specifier|private
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|,
name|numVersions
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|HTable
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|int
index|[]
name|numVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|,
name|numVersions
index|[
name|i
index|]
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_IN_MEMORY
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_BLOCKCACHE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_TTL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|equals
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|right
operator|==
literal|null
operator|&&
name|left
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
name|void
name|XtestDuplicateVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testDuplicateVersions"
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert 4 versions of same column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Flush and redo
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some memstore and retest
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions of table is respected
name|flushMemStore
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|,
name|VALUES
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|13
index|]
argument_list|,
name|VALUES
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|15
index|]
argument_list|,
name|VALUES
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Delete a version in the memstore and a version in a storefile
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Test that it's gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

