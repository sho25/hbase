begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|dfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_comment
comment|/**  * Basic stand-alone testing of HRegion.  *   * A lot of the meta information for an HRegion now lives inside other  * HRegions or in the HBaseMaster, so only basic testing is possible.  */
end_comment

begin_class
specifier|public
class|class
name|TestHRegion
extends|extends
name|TestCase
block|{
comment|/** Constructor */
specifier|public
name|TestHRegion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** Test suite so that all tests get run */
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHRegion
argument_list|(
literal|"testSetup"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHRegion
argument_list|(
literal|"testBasic"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHRegion
argument_list|(
literal|"testScan"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHRegion
argument_list|(
literal|"testBatchWrite"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHRegion
argument_list|(
literal|"testSplitAndMerge"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHRegion
argument_list|(
literal|"testRead"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHRegion
argument_list|(
literal|"testCleanup"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|FIRST_ROW
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|N_ROWS
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_VALS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|CONTENTS_BASIC
init|=
operator|new
name|Text
argument_list|(
literal|"contents:basic"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENTSTR
init|=
literal|"contentstr"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANCHORNUM
init|=
literal|"anchor:anchornum-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANCHORSTR
init|=
literal|"anchorstr"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|CONTENTS_BODY
init|=
operator|new
name|Text
argument_list|(
literal|"contents:body"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|CONTENTS_FIRSTCOL
init|=
operator|new
name|Text
argument_list|(
literal|"contents:firstcol"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|ANCHOR_SECONDCOL
init|=
operator|new
name|Text
argument_list|(
literal|"anchor:secondcol"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|failures
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Path
name|parentdir
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Path
name|newlogdir
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Path
name|oldlogfile
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HLog
name|log
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HTableDescriptor
name|desc
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|int
name|numInserted
init|=
literal|0
decl_stmt|;
comment|// Set up environment, start mini cluster, etc.
specifier|public
name|void
name|testSetup
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|dir
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"build/contrib/hbase/test"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|Environment
operator|.
name|getenv
argument_list|()
expr_stmt|;
if|if
condition|(
name|Environment
operator|.
name|debugging
condition|)
block|{
name|Logger
name|rootLogger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|PatternLayout
name|consoleLayout
init|=
operator|(
name|PatternLayout
operator|)
name|rootLogger
operator|.
name|getAppender
argument_list|(
literal|"console"
argument_list|)
operator|.
name|getLayout
argument_list|()
decl_stmt|;
name|consoleLayout
operator|.
name|setConversionPattern
argument_list|(
literal|"%d %-5p [%t] %l: %m%n"
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Environment
operator|.
name|logLevel
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
literal|65312
argument_list|,
name|conf
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|parentdir
operator|=
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentdir
argument_list|)
expr_stmt|;
name|newlogdir
operator|=
operator|new
name|Path
argument_list|(
name|parentdir
argument_list|,
literal|"log"
argument_list|)
expr_stmt|;
name|oldlogfile
operator|=
operator|new
name|Path
argument_list|(
name|parentdir
argument_list|,
literal|"oldlogfile"
argument_list|)
expr_stmt|;
name|log
operator|=
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
name|newlogdir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"test"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|Text
argument_list|(
literal|"contents"
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|Text
argument_list|(
literal|"anchor"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|=
operator|new
name|HRegion
argument_list|(
name|parentdir
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
operator|new
name|HRegionInfo
argument_list|(
literal|1
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
name|oldlogfile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|// Test basic functionality. Writes to contents:basic and anchor:anchornum-*
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
try|try
block|{
comment|// Write out a bunch of values
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|NUM_VALS
condition|;
name|k
operator|++
control|)
block|{
name|long
name|writeid
init|=
name|region
operator|.
name|startUpdate
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
argument_list|)
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
name|writeid
argument_list|,
name|CONTENTS_BASIC
argument_list|,
operator|(
name|CONTENTSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|writeid
argument_list|,
operator|new
name|Text
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
argument_list|,
operator|(
name|ANCHORSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|writeid
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|flushcache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Read them back in
name|Text
name|collabel
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|NUM_VALS
condition|;
name|k
operator|++
control|)
block|{
name|Text
name|rowlabel
init|=
operator|new
name|Text
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
decl_stmt|;
name|byte
name|bodydata
index|[]
init|=
name|region
operator|.
name|get
argument_list|(
name|rowlabel
argument_list|,
name|CONTENTS_BASIC
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bodydata
argument_list|)
expr_stmt|;
name|String
name|bodystr
init|=
operator|new
name|String
argument_list|(
name|bodydata
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|teststr
init|=
name|CONTENTSTR
operator|+
name|k
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect value for key: ("
operator|+
name|rowlabel
operator|+
literal|","
operator|+
name|CONTENTS_BASIC
operator|+
literal|"), expected: '"
operator|+
name|teststr
operator|+
literal|"' got: '"
operator|+
name|bodystr
operator|+
literal|"'"
argument_list|,
name|bodystr
argument_list|,
name|teststr
argument_list|)
expr_stmt|;
name|collabel
operator|=
operator|new
name|Text
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
expr_stmt|;
name|bodydata
operator|=
name|region
operator|.
name|get
argument_list|(
name|rowlabel
argument_list|,
name|collabel
argument_list|)
expr_stmt|;
name|bodystr
operator|=
operator|new
name|String
argument_list|(
name|bodydata
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|teststr
operator|=
name|ANCHORSTR
operator|+
name|k
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect value for key: ("
operator|+
name|rowlabel
operator|+
literal|","
operator|+
name|collabel
operator|+
literal|"), expected: '"
operator|+
name|teststr
operator|+
literal|"' got: '"
operator|+
name|bodystr
operator|+
literal|"'"
argument_list|,
name|bodystr
argument_list|,
name|teststr
argument_list|)
expr_stmt|;
comment|/*         // Check to make sure that null values are actually null         for (int j = 0; j< Math.min(15, NUM_VALS); j++) {           if (k != j) {             collabel = new Text(ANCHORNUM + j);             byte results[] = region.get(rowlabel, collabel);             if (results != null) {               throw new IOException("Found incorrect value at [" + rowlabel + ", " + collabel + "] == " + new String(results).toString().trim());             }           }         } */
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// Test scanners. Writes contents:firstcol and anchor:secondcol
specifier|public
name|void
name|testScan
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|Text
name|cols
index|[]
init|=
operator|new
name|Text
index|[]
block|{
name|CONTENTS_FIRSTCOL
block|,
name|ANCHOR_SECONDCOL
block|}
decl_stmt|;
comment|// Test the Scanner!!!
name|String
index|[]
name|vals1
init|=
operator|new
name|String
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|vals1
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|vals1
index|[
name|k
index|]
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
comment|// 1.  Insert a bunch of values
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|vals1
operator|.
name|length
operator|/
literal|2
condition|;
name|k
operator|++
control|)
block|{
name|String
name|kLabel
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%1$03d"
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|long
name|lockid
init|=
name|region
operator|.
name|startUpdate
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row_vals1_"
operator|+
name|kLabel
argument_list|)
argument_list|)
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|cols
index|[
literal|0
index|]
argument_list|,
name|vals1
index|[
name|k
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|cols
index|[
literal|1
index|]
argument_list|,
name|vals1
index|[
name|k
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
name|numInserted
operator|+=
literal|2
expr_stmt|;
block|}
comment|// 2.  Scan
name|HScannerInterface
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numFetched
init|=
literal|0
decl_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|col
operator|.
name|compareTo
argument_list|(
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|k
argument_list|,
name|curval
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
comment|// 3.  Flush to disk
name|region
operator|.
name|flushcache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 4.  Scan
name|s
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
name|numFetched
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|col
operator|.
name|compareTo
argument_list|(
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|k
argument_list|,
name|curval
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
comment|// 5.  Insert more values
for|for
control|(
name|int
name|k
init|=
name|vals1
operator|.
name|length
operator|/
literal|2
init|;
name|k
operator|<
name|vals1
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|String
name|kLabel
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%1$03d"
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|long
name|lockid
init|=
name|region
operator|.
name|startUpdate
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row_vals1_"
operator|+
name|kLabel
argument_list|)
argument_list|)
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|cols
index|[
literal|0
index|]
argument_list|,
name|vals1
index|[
name|k
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|cols
index|[
literal|1
index|]
argument_list|,
name|vals1
index|[
name|k
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
name|numInserted
operator|+=
literal|2
expr_stmt|;
block|}
comment|// 6.  Scan
name|s
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
name|numFetched
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|col
operator|.
name|compareTo
argument_list|(
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|k
argument_list|,
name|curval
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
comment|// 7.  Flush to disk
name|region
operator|.
name|flushcache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// 8.  Scan
name|s
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
name|numFetched
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|col
operator|.
name|compareTo
argument_list|(
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
comment|// 9. Scan with a starting point
name|s
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|(
literal|"row_vals1_500"
argument_list|)
argument_list|)
expr_stmt|;
name|numFetched
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|500
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|col
operator|.
name|compareTo
argument_list|(
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have fetched "
operator|+
operator|(
name|numInserted
operator|/
literal|2
operator|)
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
operator|(
name|numInserted
operator|/
literal|2
operator|)
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
block|}
comment|// Do a large number of writes. Disabled if not debugging because it takes a
comment|// long time to run.
comment|// Creates contents:body
specifier|public
name|void
name|testBatchWrite
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
operator|||
name|failures
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|Environment
operator|.
name|debugging
condition|)
block|{
return|return;
block|}
try|try
block|{
name|long
name|totalFlush
init|=
literal|0
decl_stmt|;
name|long
name|totalCompact
init|=
literal|0
decl_stmt|;
name|long
name|totalLog
init|=
literal|0
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// 1M writes
name|int
name|valsize
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|FIRST_ROW
init|;
name|k
operator|<
name|N_ROWS
condition|;
name|k
operator|++
control|)
block|{
comment|// Come up with a random 1000-byte string
name|String
name|randstr1
init|=
literal|""
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|StringBuffer
name|buf1
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"val_"
operator|+
name|k
operator|+
literal|"__"
argument_list|)
decl_stmt|;
while|while
condition|(
name|buf1
operator|.
name|length
argument_list|()
operator|<
name|valsize
condition|)
block|{
name|buf1
operator|.
name|append
argument_list|(
name|randstr1
argument_list|)
expr_stmt|;
block|}
comment|// Write to the HRegion
name|long
name|writeid
init|=
name|region
operator|.
name|startUpdate
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
argument_list|)
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
name|writeid
argument_list|,
name|CONTENTS_BODY
argument_list|,
name|buf1
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|writeid
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|>
literal|0
operator|&&
name|k
operator|%
operator|(
name|N_ROWS
operator|/
literal|100
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing write #"
operator|+
name|k
argument_list|)
expr_stmt|;
name|long
name|flushStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|region
operator|.
name|flushcache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|flushEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|totalFlush
operator|+=
operator|(
name|flushEnd
operator|-
name|flushStart
operator|)
expr_stmt|;
if|if
condition|(
name|k
operator|%
operator|(
name|N_ROWS
operator|/
literal|10
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Rolling log..."
argument_list|)
expr_stmt|;
name|long
name|logStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|long
name|logEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|totalLog
operator|+=
operator|(
name|logEnd
operator|-
name|logStart
operator|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  elapsed time: "
operator|+
operator|(
operator|(
name|logEnd
operator|-
name|logStart
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|startCompact
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|compactStores
argument_list|()
condition|)
block|{
name|totalCompact
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startCompact
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Region compacted - elapsedTime: "
operator|+
operator|(
name|totalCompact
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No compaction required."
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|totalElapsed
init|=
operator|(
name|endTime
operator|-
name|startTime
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Batch-write complete."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote "
operator|+
name|N_ROWS
operator|+
literal|" rows, each of ~"
operator|+
name|valsize
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total flush-time: "
operator|+
operator|(
name|totalFlush
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total compact-time: "
operator|+
operator|(
name|totalCompact
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total log-time: "
operator|+
operator|(
name|totalLog
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time elapsed: "
operator|+
operator|(
name|totalElapsed
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time, rows/second: "
operator|+
operator|(
name|N_ROWS
operator|/
operator|(
name|totalElapsed
operator|/
literal|1000.0
operator|)
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adjusted time (not including flush, compact, or log): "
operator|+
operator|(
operator|(
name|totalElapsed
operator|-
name|totalFlush
operator|-
name|totalCompact
operator|-
name|totalLog
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adjusted time, rows/second: "
operator|+
operator|(
name|N_ROWS
operator|/
operator|(
operator|(
name|totalElapsed
operator|-
name|totalFlush
operator|-
name|totalCompact
operator|-
name|totalLog
operator|)
operator|/
literal|1000.0
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// NOTE: This test depends on testBatchWrite succeeding
specifier|public
name|void
name|testSplitAndMerge
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
operator|||
name|failures
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
try|try
block|{
name|Text
name|midKey
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|needsSplit
argument_list|(
name|midKey
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Needs split"
argument_list|)
expr_stmt|;
block|}
comment|// Split it anyway
name|Text
name|midkey
init|=
operator|new
name|Text
argument_list|(
literal|"row_"
operator|+
operator|(
name|Environment
operator|.
name|debugging
condition|?
operator|(
name|N_ROWS
operator|/
literal|2
operator|)
else|:
operator|(
name|NUM_VALS
operator|/
literal|2
operator|)
operator|)
argument_list|)
decl_stmt|;
name|Path
name|oldRegionPath
init|=
name|region
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|HRegion
name|subregions
index|[]
init|=
name|region
operator|.
name|closeAndSplit
argument_list|(
name|midkey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of subregions"
argument_list|,
name|subregions
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Now merge it back together
name|Path
name|oldRegion1
init|=
name|subregions
index|[
literal|0
index|]
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|Path
name|oldRegion2
init|=
name|subregions
index|[
literal|1
index|]
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|closeAndMerge
argument_list|(
name|subregions
index|[
literal|0
index|]
argument_list|,
name|subregions
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegionPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegion1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegion2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// This test verifies that everything is still there after splitting and merging
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
operator|||
name|failures
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|// First verify the data written by testBasic()
name|Text
index|[]
name|cols
init|=
operator|new
name|Text
index|[]
block|{
operator|new
name|Text
argument_list|(
name|ANCHORNUM
operator|+
literal|"[0-9]+"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
name|CONTENTS_BASIC
argument_list|)
block|}
decl_stmt|;
name|HScannerInterface
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|contentsFetched
init|=
literal|0
decl_stmt|;
name|int
name|anchorFetched
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|String
name|curval
init|=
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|col
operator|.
name|compareTo
argument_list|(
name|CONTENTS_BASIC
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should start with: "
operator|+
name|CONTENTSTR
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
operator|.
name|startsWith
argument_list|(
name|CONTENTSTR
argument_list|)
argument_list|)
expr_stmt|;
name|contentsFetched
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|col
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ANCHORNUM
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should start with: "
operator|+
name|ANCHORSTR
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
operator|.
name|startsWith
argument_list|(
name|ANCHORSTR
argument_list|)
argument_list|)
expr_stmt|;
name|anchorFetched
operator|++
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|NUM_VALS
operator|+
literal|" "
operator|+
name|CONTENTS_BASIC
operator|+
literal|" values, but fetched "
operator|+
name|contentsFetched
argument_list|,
name|NUM_VALS
argument_list|,
name|contentsFetched
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|NUM_VALS
operator|+
literal|" "
operator|+
name|ANCHORNUM
operator|+
literal|" values, but fetched "
operator|+
name|anchorFetched
argument_list|,
name|NUM_VALS
argument_list|,
name|anchorFetched
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Verify testScan data
name|cols
operator|=
operator|new
name|Text
index|[]
block|{
name|CONTENTS_FIRSTCOL
block|,
name|ANCHOR_SECONDCOL
block|}
expr_stmt|;
name|s
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|numFetched
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|int
name|curval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|col
operator|.
name|compareTo
argument_list|(
name|cols
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Value for "
operator|+
name|col
operator|+
literal|" should be: "
operator|+
name|k
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|numInserted
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|numInserted
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Verify testBatchWrite data
if|if
condition|(
name|Environment
operator|.
name|debugging
condition|)
block|{
name|s
operator|=
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Text
index|[]
block|{
name|CONTENTS_BODY
block|}
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|numFetched
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|col
operator|.
name|compareTo
argument_list|(
name|CONTENTS_BODY
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|numFetched
operator|++
expr_stmt|;
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
name|N_ROWS
operator|+
literal|" values, but fetched "
operator|+
name|numFetched
argument_list|,
name|N_ROWS
argument_list|,
name|numFetched
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test a scanner which only specifies the column family name
name|cols
operator|=
operator|new
name|Text
index|[]
block|{
operator|new
name|Text
argument_list|(
literal|"anchor:"
argument_list|)
block|}
expr_stmt|;
name|s
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|fetched
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fetched
operator|++
expr_stmt|;
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Inserted "
operator|+
operator|(
name|NUM_VALS
operator|+
name|numInserted
operator|/
literal|2
operator|)
operator|+
literal|" values, but fetched "
operator|+
name|fetched
argument_list|,
operator|(
name|NUM_VALS
operator|+
name|numInserted
operator|/
literal|2
operator|)
argument_list|,
name|fetched
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|deleteFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteFile
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|// Shut down the mini cluster
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Delete all the DFS files
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|,
literal|"dfs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

