begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|KeyedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Additional scanner tests.  * {@link TestScanner} does a custom setup/takedown not conducive  * to addition of extra scanning tests.  * @see TestScanner  */
end_comment

begin_class
specifier|public
class|class
name|TestScanner2
extends|extends
name|HBaseClusterTestCase
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Test scanning of META table around split.    * There was a problem where only one of the splits showed in a scan.    * Split deletes a row and then adds two new ones.    * @throws IOException    */
specifier|public
name|void
name|testSplitDeleteOneAddTwoRegions
parameter_list|()
throws|throws
name|IOException
block|{
comment|// First add a new table.  Its intial region will be added to META region.
name|HClient
name|client
init|=
operator|new
name|HClient
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|scan
argument_list|(
name|client
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected one region"
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HRegionInfo
name|region
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected region named for test"
argument_list|,
name|region
operator|.
name|regionName
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now do what happens at split time; remove old region and then add two
comment|// new ones in its place.
name|HRegion
operator|.
name|removeRegionFromMETA
argument_list|(
name|client
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|region
operator|.
name|regionName
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
name|region
operator|.
name|tableDesc
decl_stmt|;
name|Path
name|homedir
init|=
operator|new
name|Path
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegion
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|HRegion
operator|.
name|createHRegion
argument_list|(
operator|new
name|HRegionInfo
argument_list|(
literal|2L
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|,
operator|new
name|Text
argument_list|(
literal|"midway"
argument_list|)
argument_list|)
argument_list|,
name|homedir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|HRegion
operator|.
name|createHRegion
argument_list|(
operator|new
name|HRegionInfo
argument_list|(
literal|3L
argument_list|,
name|desc
argument_list|,
operator|new
name|Text
argument_list|(
literal|"midway"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|homedir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|newRegions
control|)
block|{
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|client
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|r
argument_list|,
name|this
operator|.
name|cluster
operator|.
name|getHMasterAddress
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
name|regions
operator|=
name|scan
argument_list|(
name|client
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be two regions only"
argument_list|,
literal|2
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|scan
parameter_list|(
specifier|final
name|HClient
name|client
parameter_list|,
specifier|final
name|Text
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|HRegionInterface
name|regionServer
init|=
literal|null
decl_stmt|;
name|long
name|scannerId
init|=
operator|-
literal|1L
decl_stmt|;
try|try
block|{
name|client
operator|.
name|openTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HClient
operator|.
name|RegionLocation
name|rl
init|=
name|client
operator|.
name|getRegionLocation
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|regionServer
operator|=
name|client
operator|.
name|getHRegionConnection
argument_list|(
name|rl
operator|.
name|serverAddress
argument_list|)
expr_stmt|;
name|scannerId
operator|=
name|regionServer
operator|.
name|openScanner
argument_list|(
name|rl
operator|.
name|regionInfo
operator|.
name|regionName
argument_list|,
name|HMaster
operator|.
name|METACOLUMNS
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|KeyedData
index|[]
name|values
init|=
name|regionServer
operator|.
name|next
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
break|break;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|put
argument_list|(
name|values
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|info
init|=
name|HRegion
operator|.
name|getRegionInfo
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|String
name|serverName
init|=
name|HRegion
operator|.
name|getServerName
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|HRegion
operator|.
name|getStartCode
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" scanner: "
operator|+
name|Long
operator|.
name|valueOf
argument_list|(
name|scannerId
argument_list|)
operator|+
literal|": regioninfo: {"
operator|+
name|info
operator|.
name|toString
argument_list|()
operator|+
literal|"}, server: "
operator|+
name|serverName
operator|+
literal|", startCode: "
operator|+
name|startCode
argument_list|)
expr_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|scannerId
operator|!=
operator|-
literal|1L
condition|)
block|{
if|if
condition|(
name|regionServer
operator|!=
literal|null
condition|)
block|{
name|regionServer
operator|.
name|close
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
block|}
end_class

end_unit

