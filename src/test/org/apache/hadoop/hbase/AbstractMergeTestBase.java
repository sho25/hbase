begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|dfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/** Abstract base class for merge tests */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMergeTestBase
extends|extends
name|HBaseTestCase
block|{
specifier|protected
specifier|static
specifier|final
name|Text
name|COLUMN_NAME
init|=
operator|new
name|Text
argument_list|(
literal|"contents:"
argument_list|)
decl_stmt|;
specifier|protected
name|Random
name|rand
decl_stmt|;
specifier|protected
name|HTableDescriptor
name|desc
decl_stmt|;
specifier|protected
name|ImmutableBytesWritable
name|value
decl_stmt|;
specifier|protected
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
name|Path
name|dir
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|COLUMN_NAME
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We will use the same value for the rows as that is not really important here
name|String
name|partialValue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|val
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|val
operator|.
name|length
argument_list|()
operator|<
literal|1024
condition|)
block|{
name|val
operator|.
name|append
argument_list|(
name|partialValue
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|value
operator|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|val
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// We create three data regions: The first is too large to merge since it
comment|// will be> 64 MB in size. The second two will be smaller and will be
comment|// selected for merging.
comment|// To ensure that the first region is larger than 64MB we need to write at
comment|// least 65536 rows. We will make certain by writing 70000
try|try
block|{
name|Text
name|row_70001
init|=
operator|new
name|Text
argument_list|(
literal|"row_70001"
argument_list|)
decl_stmt|;
name|Text
name|row_80001
init|=
operator|new
name|Text
argument_list|(
literal|"row_80001"
argument_list|)
decl_stmt|;
name|HRegion
index|[]
name|regions
init|=
block|{
name|createAregion
argument_list|(
literal|null
argument_list|,
name|row_70001
argument_list|,
literal|1
argument_list|,
literal|70000
argument_list|)
block|,
name|createAregion
argument_list|(
name|row_70001
argument_list|,
name|row_80001
argument_list|,
literal|70001
argument_list|,
literal|10000
argument_list|)
block|,
name|createAregion
argument_list|(
name|row_80001
argument_list|,
literal|null
argument_list|,
literal|80001
argument_list|,
literal|10000
argument_list|)
block|}
decl_stmt|;
comment|// Now create the root and meta regions and insert the data regions
comment|// created above into the meta
name|HRegion
name|root
init|=
name|createNewHRegion
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|,
name|HGlobals
operator|.
name|rootTableDesc
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HRegion
name|meta
init|=
name|createNewHRegion
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|,
name|HGlobals
operator|.
name|metaTableDesc
argument_list|,
literal|1L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|root
argument_list|,
name|meta
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|meta
argument_list|,
name|regions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|meta
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HRegion
name|createAregion
parameter_list|(
name|Text
name|startKey
parameter_list|,
name|Text
name|endKey
parameter_list|,
name|int
name|firstRow
parameter_list|,
name|int
name|nrows
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|,
name|desc
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"created region "
operator|+
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstRow
init|;
name|i
operator|<
name|firstRow
operator|+
name|nrows
condition|;
name|i
operator|++
control|)
block|{
name|long
name|lockid
init|=
name|region
operator|.
name|startUpdate
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row_"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%1$05d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|COLUMN_NAME
argument_list|,
name|value
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing write #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rolling log..."
argument_list|)
expr_stmt|;
name|region
operator|.
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|offLine
operator|=
literal|true
expr_stmt|;
return|return
name|region
return|;
block|}
specifier|private
name|HRegion
name|createNewHRegion
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|long
name|regionId
parameter_list|,
name|Text
name|startKey
parameter_list|,
name|Text
name|endKey
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|regionId
argument_list|,
name|desc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|HStoreFile
operator|.
name|getHRegionDir
argument_list|(
name|dir
argument_list|,
name|info
operator|.
name|regionName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|regionDir
argument_list|)
expr_stmt|;
return|return
operator|new
name|HRegion
argument_list|(
name|dir
argument_list|,
operator|new
name|HLog
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

