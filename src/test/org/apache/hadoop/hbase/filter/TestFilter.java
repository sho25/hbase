begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Test filters at the HRegion doorstep.  */
end_comment

begin_class
specifier|public
class|class
name|TestFilter
extends|extends
name|HBaseTestCase
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HRegion
name|region
decl_stmt|;
comment|//
comment|// Rows, Qualifiers, and Values are in two groups, One and Two.
comment|//
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS_ONE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS_TWO
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyOne"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyTwo"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|QUALIFIERS_ONE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|QUALIFIERS_TWO
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|VALUES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
block|}
decl_stmt|;
specifier|private
name|long
name|numRows
init|=
name|ROWS_ONE
operator|.
name|length
operator|+
name|ROWS_TWO
operator|.
name|length
decl_stmt|;
specifier|private
name|long
name|colsPerRow
init|=
name|FAMILIES
operator|.
name|length
operator|*
name|QUALIFIERS_ONE
operator|.
name|length
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|this
operator|.
name|testDir
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// Insert first half
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// Flush
name|this
operator|.
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Insert second half (reverse families)
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// Delete the second qualifier from all rows and families
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|colsPerRow
operator|-=
literal|2
expr_stmt|;
comment|// Delete the second rows from both groups, one column at a time
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROWS_ONE
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROWS_TWO
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|numRows
operator|-=
literal|2
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testNoFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No filter
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
comment|// Both families
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// One family
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPrefixFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Grab rows from group one (half of total)
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPageFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// KVs in first 6 rows
name|KeyValue
index|[]
name|expectedKVs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
comment|// Grab all 6 rows
name|long
name|expectedRows
init|=
literal|6
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs
argument_list|)
expr_stmt|;
comment|// Grab first 4 rows (6 cols per row)
name|expectedRows
operator|=
literal|4
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
comment|// Grab first 2 rows
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
comment|// Grab first row
name|expectedRows
operator|=
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInclusiveStopFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Grab rows from group one
comment|// If we just use start/stop row, we get total/2 - 1 rows
name|long
name|expectedRows
init|=
operator|(
name|this
operator|.
name|numRows
operator|/
literal|2
operator|)
operator|-
literal|1
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
argument_list|)
decl_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Now use start row with inclusive stop filter
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|InclusiveStopFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Grab rows from group two
comment|// If we just use start/stop row, we get total/2 - 1 rows
name|expectedRows
operator|=
operator|(
name|this
operator|.
name|numRows
operator|/
literal|2
operator|)
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Now use start row with inclusive stop filter
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|InclusiveStopFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQualifierFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Match two keys (one from each family) in half the rows
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
literal|2
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys less than same qualifier
comment|// Expect only two keys (one from each family) in half the rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys less than or equal
comment|// Expect four keys (two from each family) in half the rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys not equal
comment|// Expect four keys (two from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater or equal
comment|// Expect four keys (two from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater
comment|// Expect two keys (one from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys not equal to
comment|// Look across rows and fully validate the keys and ordering
comment|// Expect varied numbers of keys, 4 per row in group one, 6 per row in group two
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test across rows and groups with a regex
comment|// Filter out "test*-2"
comment|// Expect 4 keys per row across both groups
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"test.+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRowFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Match a single row, all keys
name|long
name|expectedRows
init|=
literal|1
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match a two rows, one from each group, using regex
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"testRow.+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows less than
comment|// Expect all keys in one row
name|expectedRows
operator|=
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows less than or equal
comment|// Expect all keys in two rows
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows not equal
comment|// Expect all keys in all but one row
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater or equal
comment|// Expect all keys in all but one row
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater
comment|// Expect all keys in all but two rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|-
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows not equal to testRowTwo-2
comment|// Look across rows and fully validate the keys and ordering
comment|// Should see all keys in all rows but testRowTwo-2
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test across rows and groups with a regex
comment|// Filter out everything that doesn't match "*-2"
comment|// Expect all keys in two rows
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testValueFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Match group one rows
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match group two rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match all values using regex
name|expectedRows
operator|=
name|this
operator|.
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"testValue((One)|(Two))"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than
comment|// Expect group one rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than or equal
comment|// Expect all rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than or equal
comment|// Expect group one rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values not equal
comment|// Expect half the rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values greater or equal
comment|// Expect all rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values greater
comment|// Expect half rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values not equal to testValueOne
comment|// Look across rows and fully validate the keys and ordering
comment|// Should see all keys in all group two rows
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSkipFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test for qualifier regex: "testQualifierOne-2"
comment|// Should only get rows from second group, and all keys
name|Filter
name|f
init|=
operator|new
name|SkipFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
comment|// TODO: This is important... need many more tests for ordering, etc
comment|// There are limited tests elsewhere but we need HRegion level ones here
specifier|public
name|void
name|testFilterList
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test getting a single row, single key using Row, Qualifier, and Value
comment|// regular expression and substring filters
comment|// Use must pass all
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"One"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|}
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test getting everything with a MUST_PASS_ONE filter including row, qf, val
comment|// regular expression and substring filters
name|filters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+Two.+"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"One"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|this
operator|.
name|numRows
argument_list|,
name|this
operator|.
name|colsPerRow
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScan
parameter_list|(
name|Scan
name|s
parameter_list|,
name|long
name|expectedRows
parameter_list|,
name|long
name|expectedKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|i
operator|++
control|)
block|{
name|done
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|KeyValue
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"counter="
operator|+
name|i
operator|+
literal|", "
operator|+
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Scanned too many rows! Only expected "
operator|+
name|expectedRows
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|expectedRows
operator|>
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedKeys
operator|+
literal|" keys per row but "
operator|+
literal|"returned "
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|expectedKeys
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedRows
operator|+
literal|" rows but scanned "
operator|+
name|i
operator|+
literal|" rows"
argument_list|,
name|expectedRows
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScanNoEarlyOut
parameter_list|(
name|Scan
name|s
parameter_list|,
name|long
name|expectedRows
parameter_list|,
name|long
name|expectedKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|i
operator|++
control|)
block|{
name|done
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|KeyValue
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"counter="
operator|+
name|i
operator|+
literal|", "
operator|+
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|assertTrue
argument_list|(
literal|"Scanned too many rows! Only expected "
operator|+
name|expectedRows
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|expectedRows
operator|>
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedKeys
operator|+
literal|" keys per row but "
operator|+
literal|"returned "
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|expectedKeys
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedRows
operator|+
literal|" rows but scanned "
operator|+
name|i
operator|+
literal|" rows"
argument_list|,
name|expectedRows
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScanFull
parameter_list|(
name|Scan
name|s
parameter_list|,
name|KeyValue
index|[]
name|kvs
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|row
operator|++
control|)
block|{
name|done
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|KeyValue
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Scanned too many keys! Only expected "
operator|+
name|kvs
operator|.
name|length
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|results
operator|.
name|size
argument_list|()
operator|+
name|idx
operator|)
argument_list|,
name|kvs
operator|.
name|length
operator|>=
name|idx
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|results
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"row="
operator|+
name|row
operator|+
literal|", result="
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|", match="
operator|+
name|kvs
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Row mismatch"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Family mismatch"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Qualifier mismatch"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Value mismatch"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Looked at "
operator|+
name|row
operator|+
literal|" rows with "
operator|+
name|idx
operator|+
literal|" keys"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|kvs
operator|.
name|length
operator|+
literal|" total keys but scanned "
operator|+
name|idx
argument_list|,
name|kvs
operator|.
name|length
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

