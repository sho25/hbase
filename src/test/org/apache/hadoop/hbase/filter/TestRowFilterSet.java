begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestRowFilterSet
extends|extends
name|TestCase
block|{
name|RowFilterInterface
name|filterMPALL
decl_stmt|;
name|RowFilterInterface
name|filterMPONE
decl_stmt|;
specifier|static
specifier|final
name|int
name|MAX_PAGES
init|=
literal|5
decl_stmt|;
specifier|final
name|char
name|FIRST_CHAR
init|=
literal|'a'
decl_stmt|;
specifier|final
name|char
name|LAST_CHAR
init|=
literal|'e'
decl_stmt|;
specifier|final
name|byte
index|[]
name|GOOD_BYTES
init|=
literal|"abc"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|BAD_BYTES
init|=
literal|"def"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|colvalues
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|colvalues
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
name|FIRST_CHAR
init|;
name|c
operator|<
name|LAST_CHAR
condition|;
name|c
operator|++
control|)
block|{
name|colvalues
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|c
block|}
argument_list|)
argument_list|)
argument_list|,
name|GOOD_BYTES
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|RowFilterInterface
argument_list|>
name|filters
init|=
operator|new
name|HashSet
argument_list|<
name|RowFilterInterface
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageRowFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|RegExpRowFilter
argument_list|(
literal|".*regex.*"
argument_list|,
name|colvalues
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|StopRowFilter
argument_list|(
operator|new
name|Text
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|RegExpRowFilter
argument_list|(
literal|".*match.*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filterMPALL
operator|=
operator|new
name|RowFilterSet
argument_list|(
name|RowFilterSet
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|filterMPONE
operator|=
operator|new
name|RowFilterSet
argument_list|(
name|RowFilterSet
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMPONE
parameter_list|()
throws|throws
name|Exception
block|{
name|MPONETests
argument_list|(
name|filterMPONE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMPALL
parameter_list|()
throws|throws
name|Exception
block|{
name|MPALLTests
argument_list|(
name|filterMPALL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Decompose filterMPALL to bytes.
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|filterMPALL
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|stream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Recompose filterMPALL.
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|RowFilterInterface
name|newFilter
init|=
operator|new
name|RowFilterSet
argument_list|()
decl_stmt|;
name|newFilter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Ensure the serialization preserved the filter by running a full test.
name|MPALLTests
argument_list|(
name|newFilter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|MPONETests
parameter_list|(
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
comment|// A row that shouldn't cause any filters to return true.
name|RFSAssertion
argument_list|(
name|filter
argument_list|,
literal|"regex_match"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// A row that should cause the WhileMatchRowFilter to filter all remaining.
name|RFSAssertion
argument_list|(
name|filter
argument_list|,
literal|"regex_only"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure the overall filterAllRemaining is unchanged (correct for
comment|// MUST_PASS_ONE).
name|assertFalse
argument_list|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// A row that should cause the RegExpRowFilter to fail and the
comment|// StopRowFilter to filter all remaining.
name|RFSAssertion
argument_list|(
name|filter
argument_list|,
literal|"yyy_match"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Accept several more rows such that PageRowFilter will exceed its limit.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|MAX_PAGES
operator|-
literal|3
condition|;
name|i
operator|++
control|)
name|filter
operator|.
name|rowProcessed
argument_list|(
literal|false
argument_list|,
operator|new
name|Text
argument_list|(
literal|"unimportant_key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// A row that should cause the RegExpRowFilter to filter this row, making
comment|// all the filters return true and thus the RowFilterSet as well.
name|RFSAssertion
argument_list|(
name|filter
argument_list|,
literal|"bad_column"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure the overall filterAllRemaining is unchanged (correct for
comment|// MUST_PASS_ONE).
name|assertFalse
argument_list|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|MPALLTests
parameter_list|(
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
comment|// A row that shouldn't cause any filters to return true.
name|RFSAssertion
argument_list|(
name|filter
argument_list|,
literal|"regex_match"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// A row that should cause WhileMatchRowFilter to filter all remaining.
name|RFSAssertion
argument_list|(
name|filter
argument_list|,
literal|"regex_only"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure the overall filterAllRemaining is changed (correct for
comment|// MUST_PASS_ALL).
name|RFSAssertReset
argument_list|(
name|filter
argument_list|)
expr_stmt|;
comment|// A row that should cause the RegExpRowFilter to fail and the
comment|// StopRowFilter to filter all remaining.
name|RFSAssertion
argument_list|(
name|filter
argument_list|,
literal|"yyy_match"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure the overall filterAllRemaining is changed (correct for
comment|// MUST_PASS_ALL).
name|RFSAssertReset
argument_list|(
name|filter
argument_list|)
expr_stmt|;
comment|// A row that should cause the RegExpRowFilter to fail.
name|boolean
name|filtered
init|=
name|filter
operator|.
name|filter
argument_list|(
operator|new
name|Text
argument_list|(
literal|"regex_match"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|FIRST_CHAR
block|}
argument_list|)
argument_list|)
argument_list|,
name|BAD_BYTES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Filtering on 'regex_match' and bad column data."
argument_list|,
name|filtered
argument_list|)
expr_stmt|;
name|filterMPALL
operator|.
name|rowProcessed
argument_list|(
name|filtered
argument_list|,
operator|new
name|Text
argument_list|(
literal|"regex_match"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|RFSAssertion
parameter_list|(
name|RowFilterInterface
name|filter
parameter_list|,
name|String
name|toTest
parameter_list|,
name|boolean
name|assertTrue
parameter_list|)
throws|throws
name|Exception
block|{
name|Text
name|testText
init|=
operator|new
name|Text
argument_list|(
name|toTest
argument_list|)
decl_stmt|;
name|boolean
name|filtered
init|=
name|filter
operator|.
name|filter
argument_list|(
name|testText
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Filtering on '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|assertTrue
condition|?
name|filtered
else|:
operator|!
name|filtered
argument_list|)
expr_stmt|;
name|filter
operator|.
name|rowProcessed
argument_list|(
name|filtered
argument_list|,
name|testText
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|RFSAssertReset
parameter_list|(
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset for continued testing
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

