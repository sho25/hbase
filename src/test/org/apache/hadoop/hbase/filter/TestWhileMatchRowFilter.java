begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for the while-match filter  */
end_comment

begin_class
specifier|public
class|class
name|TestWhileMatchRowFilter
extends|extends
name|TestCase
block|{
name|WhileMatchRowFilter
name|wmStopRowFilter
decl_stmt|;
name|WhileMatchRowFilter
name|wmRegExpRowFilter
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|wmStopRowFilter
operator|=
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|StopRowFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wmRegExpRowFilter
operator|=
operator|new
name|WhileMatchRowFilter
argument_list|(
operator|new
name|RegExpRowFilter
argument_list|(
literal|".*regex.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests while match stop row    * @throws Exception    */
specifier|public
name|void
name|testWhileMatchStopRow
parameter_list|()
throws|throws
name|Exception
block|{
name|whileMatchStopRowTests
argument_list|(
name|wmStopRowFilter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests while match regex    * @throws Exception    */
specifier|public
name|void
name|testWhileMatchRegExp
parameter_list|()
throws|throws
name|Exception
block|{
name|whileMatchRegExpTests
argument_list|(
name|wmRegExpRowFilter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests serialization    * @throws Exception    */
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Decompose wmRegExpRowFilter to bytes.
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|wmRegExpRowFilter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|stream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Recompose wmRegExpRowFilter.
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|WhileMatchRowFilter
name|newFilter
init|=
operator|new
name|WhileMatchRowFilter
argument_list|()
decl_stmt|;
name|newFilter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Ensure the serialization preserved the filter by running a full test.
name|whileMatchRegExpTests
argument_list|(
name|newFilter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|whileMatchStopRowTests
parameter_list|(
name|WhileMatchRowFilter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|RowFilterInterface
name|innerFilter
init|=
name|filter
operator|.
name|getInternalFilter
argument_list|()
decl_stmt|;
name|String
name|toTest
decl_stmt|;
comment|// Test cases that should pass the row
name|toTest
operator|=
literal|"apples"
expr_stmt|;
name|assertFalse
argument_list|(
literal|"filter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|filter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"innerFilter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|innerFilter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test cases that should fail the row
name|toTest
operator|=
literal|"tuna"
expr_stmt|;
name|assertTrue
argument_list|(
literal|"filter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|filter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"innerFilter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|innerFilter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The difference in switch
name|assertTrue
argument_list|(
literal|"filter: filterAllRemaining"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"innerFilter: filterAllRemaining pre-reset"
argument_list|,
name|innerFilter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test resetting
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"filter: filterAllRemaining post-reset"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test filterNotNull for functionality only (no switch-cases)
name|assertFalse
argument_list|(
literal|"filter: filterNotNull"
argument_list|,
name|filter
operator|.
name|filterRow
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|whileMatchRegExpTests
parameter_list|(
name|WhileMatchRowFilter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|RowFilterInterface
name|innerFilter
init|=
name|filter
operator|.
name|getInternalFilter
argument_list|()
decl_stmt|;
name|String
name|toTest
decl_stmt|;
comment|// Test cases that should pass the row
name|toTest
operator|=
literal|"regex_match"
expr_stmt|;
name|assertFalse
argument_list|(
literal|"filter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|filter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"innerFilter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|innerFilter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test cases that should fail the row
name|toTest
operator|=
literal|"not_a_match"
expr_stmt|;
name|assertTrue
argument_list|(
literal|"filter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|filter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"innerFilter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|innerFilter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The difference in switch
name|assertTrue
argument_list|(
literal|"filter: filterAllRemaining"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"innerFilter: filterAllRemaining pre-reset"
argument_list|,
name|innerFilter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test resetting
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"filter: filterAllRemaining post-reset"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test filter(Text, Text, byte[]) for functionality only (no switch-cases)
name|toTest
operator|=
literal|"asdf_regex_hjkl"
expr_stmt|;
name|assertFalse
argument_list|(
literal|"filter: '"
operator|+
name|toTest
operator|+
literal|"'"
argument_list|,
name|filter
operator|.
name|filterColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toTest
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

