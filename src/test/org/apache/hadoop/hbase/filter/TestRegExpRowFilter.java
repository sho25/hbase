begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HLogEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Tests for regular expression row filter  */
end_comment

begin_class
specifier|public
class|class
name|TestRegExpRowFilter
extends|extends
name|TestCase
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|colvalues
decl_stmt|;
name|RowFilterInterface
name|mainFilter
decl_stmt|;
specifier|final
name|char
name|FIRST_CHAR
init|=
literal|'a'
decl_stmt|;
specifier|final
name|char
name|LAST_CHAR
init|=
literal|'e'
decl_stmt|;
specifier|final
name|String
name|HOST_PREFIX
init|=
literal|"org.apache.site-"
decl_stmt|;
specifier|static
name|byte
index|[]
name|GOOD_BYTES
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|GOOD_BYTES
operator|=
literal|"abc"
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|colvalues
operator|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
init|=
name|FIRST_CHAR
init|;
name|c
operator|<
name|LAST_CHAR
condition|;
name|c
operator|++
control|)
block|{
name|colvalues
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|c
block|}
argument_list|)
argument_list|)
argument_list|,
name|GOOD_BYTES
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mainFilter
operator|=
operator|new
name|RegExpRowFilter
argument_list|(
name|HOST_PREFIX
operator|+
literal|".*"
argument_list|,
name|colvalues
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests filtering using a regex on the row key    * @throws Exception    */
specifier|public
name|void
name|testRegexOnRow
parameter_list|()
throws|throws
name|Exception
block|{
name|regexRowTests
argument_list|(
name|mainFilter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests filtering using a regex on row and colum    * @throws Exception    */
specifier|public
name|void
name|testRegexOnRowAndColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|regexRowColumnTests
argument_list|(
name|mainFilter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Only return values that are not null    * @throws Exception    */
specifier|public
name|void
name|testFilterNotNull
parameter_list|()
throws|throws
name|Exception
block|{
name|filterNotNullTests
argument_list|(
name|mainFilter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test serialization    * @throws Exception    */
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Decompose mainFilter to bytes.
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|mainFilter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|stream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Recompose filter.
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|RowFilterInterface
name|newFilter
init|=
operator|new
name|RegExpRowFilter
argument_list|()
decl_stmt|;
name|newFilter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Ensure the serialization preserved the filter by running all test.
name|regexRowTests
argument_list|(
name|newFilter
argument_list|)
expr_stmt|;
name|newFilter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|regexRowColumnTests
argument_list|(
name|newFilter
argument_list|)
expr_stmt|;
name|newFilter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|filterNotNullTests
argument_list|(
name|newFilter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|regexRowTests
parameter_list|(
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|char
name|c
init|=
name|FIRST_CHAR
init|;
name|c
operator|<=
name|LAST_CHAR
condition|;
name|c
operator|++
control|)
block|{
name|byte
index|[]
name|t
init|=
name|createRow
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed with characer "
operator|+
name|c
argument_list|,
name|filter
operator|.
name|filterRowKey
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|yahooSite
init|=
literal|"com.yahoo.www"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed with character "
operator|+
name|yahooSite
argument_list|,
name|filter
operator|.
name|filterRowKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|yahooSite
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|regexRowColumnTests
parameter_list|(
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
for|for
control|(
name|char
name|c
init|=
name|FIRST_CHAR
init|;
name|c
operator|<=
name|LAST_CHAR
condition|;
name|c
operator|++
control|)
block|{
name|byte
index|[]
name|t
init|=
name|createRow
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|this
operator|.
name|colvalues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
literal|"Failed on "
operator|+
name|c
argument_list|,
name|filter
operator|.
name|filterColumn
argument_list|(
name|t
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Try a row and column I know will pass.
name|char
name|c
init|=
literal|'c'
decl_stmt|;
name|byte
index|[]
name|r
init|=
name|createRow
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Failed with character "
operator|+
name|c
argument_list|,
name|filter
operator|.
name|filterColumn
argument_list|(
name|r
argument_list|,
name|col
argument_list|,
name|GOOD_BYTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do same but with bad bytes.
name|assertTrue
argument_list|(
literal|"Failed with character "
operator|+
name|c
argument_list|,
name|filter
operator|.
name|filterColumn
argument_list|(
name|r
argument_list|,
name|col
argument_list|,
literal|"badbytes"
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do with good bytes but bad column name.  Should not filter out.
name|assertFalse
argument_list|(
literal|"Failed with character "
operator|+
name|c
argument_list|,
name|filter
operator|.
name|filterColumn
argument_list|(
name|r
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"badcolumn"
argument_list|)
argument_list|,
name|GOOD_BYTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Good column, good bytes but bad row.
name|assertTrue
argument_list|(
literal|"Failed with character "
operator|+
name|c
argument_list|,
name|filter
operator|.
name|filterColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bad row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"badcolumn"
argument_list|)
argument_list|,
name|GOOD_BYTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|filterNotNullTests
parameter_list|(
name|RowFilterInterface
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Modify the filter to expect certain columns to be null:
comment|// Expecting a row WITH columnKeys: a-d, WITHOUT columnKey: e
operator|(
operator|(
name|RegExpRowFilter
operator|)
name|filter
operator|)
operator|.
name|setColumnFilter
argument_list|(
operator|new
name|byte
index|[]
block|{
name|LAST_CHAR
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|char
name|secondToLast
init|=
call|(
name|char
call|)
argument_list|(
name|LAST_CHAR
operator|-
literal|1
argument_list|)
decl_stmt|;
name|char
name|thirdToLast
init|=
call|(
name|char
call|)
argument_list|(
name|LAST_CHAR
operator|-
literal|2
argument_list|)
decl_stmt|;
comment|// Modify the row to be missing an expected columnKey (d)
name|colvalues
operator|.
name|remove
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|secondToLast
block|}
argument_list|)
expr_stmt|;
comment|// Try a row that is missing an expected columnKey.
comment|// Testing row with columnKeys: a-c
name|assertTrue
argument_list|(
literal|"Failed with last columnKey "
operator|+
name|thirdToLast
argument_list|,
name|filter
operator|.
name|filterRow
argument_list|(
name|colvalues
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try a row that has all expected columnKeys, and NO null-expected
comment|// columnKeys.
comment|// Testing row with columnKeys: a-d
name|colvalues
operator|.
name|put
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|secondToLast
block|}
argument_list|,
name|GOOD_BYTES
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed with last columnKey "
operator|+
name|secondToLast
argument_list|,
name|filter
operator|.
name|filterRow
argument_list|(
name|colvalues
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try a row that has all expected columnKeys AND a null-expected columnKey.
comment|// Testing row with columnKeys: a-e
name|colvalues
operator|.
name|put
argument_list|(
operator|new
name|byte
index|[]
block|{
name|LAST_CHAR
block|}
argument_list|,
name|GOOD_BYTES
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed with last columnKey "
operator|+
name|LAST_CHAR
argument_list|,
name|filter
operator|.
name|filterRow
argument_list|(
name|colvalues
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try a row that has all expected columnKeys and a null-expected columnKey
comment|// that maps to a null value.
comment|// Testing row with columnKeys: a-e, e maps to null
name|colvalues
operator|.
name|put
argument_list|(
operator|new
name|byte
index|[]
block|{
name|LAST_CHAR
block|}
argument_list|,
name|HLogEdit
operator|.
name|deleteBytes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed with last columnKey "
operator|+
name|LAST_CHAR
operator|+
literal|" mapping to null."
argument_list|,
name|filter
operator|.
name|filterRow
argument_list|(
name|colvalues
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|createRow
parameter_list|(
specifier|final
name|char
name|c
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HOST_PREFIX
operator|+
name|Character
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

