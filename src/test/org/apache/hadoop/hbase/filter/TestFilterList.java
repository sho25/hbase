begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests filter sets  *  */
end_comment

begin_class
specifier|public
class|class
name|TestFilterList
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|int
name|MAX_PAGES
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|char
name|FIRST_CHAR
init|=
literal|'a'
decl_stmt|;
specifier|static
specifier|final
name|char
name|LAST_CHAR
init|=
literal|'e'
decl_stmt|;
specifier|static
name|byte
index|[]
name|GOOD_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
specifier|static
name|byte
index|[]
name|BAD_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"def"
argument_list|)
decl_stmt|;
comment|/**    * Test "must pass one"    * @throws Exception    */
specifier|public
name|void
name|testMPONE
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filterMPONE
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filters
argument_list|)
decl_stmt|;
comment|/* Filter must do all below steps:      *<ul>      *<li>{@link #reset()}</li>      *<li>{@link #filterAllRemaining()} -> true indicates scan is over, false, keep going on.</li>      *<li>{@link #filterRowKey(byte[],int,int)} -> true to drop this row,      * if false, we will also call</li>      *<li>{@link #filterKeyValue(org.apache.hadoop.hbase.KeyValue)} -> true to drop this key/value</li>      *<li>{@link #filterRow()} -> last chance to drop entire row based on the sequence of      * filterValue() calls. Eg: filter a row if it doesn't contain a specified column.      *</li>      *</ul>     */
name|filterMPONE
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Will pass both */
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyyyyyyyy"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterKeyValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Only pass PageFilter */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterKeyValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
comment|/* PageFilter will fail now, but should pass because we match yyy */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterKeyValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
comment|/* We should filter any row */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterMPONE
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test "must pass all"    * @throws Exception    */
specifier|public
name|void
name|testMPALL
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filterMPALL
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
decl_stmt|;
comment|/* Filter must do all below steps:      *<ul>      *<li>{@link #reset()}</li>      *<li>{@link #filterAllRemaining()} -> true indicates scan is over, false, keep going on.</li>      *<li>{@link #filterRowKey(byte[],int,int)} -> true to drop this row,      * if false, we will also call</li>      *<li>{@link #filterKeyValue(org.apache.hadoop.hbase.KeyValue)} -> true to drop this key/value</li>      *<li>{@link #filterRow()} -> last chance to drop entire row based on the sequence of      * filterValue() calls. Eg: filter a row if it doesn't contain a specified column.      *</li>      *</ul>     */
name|filterMPALL
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPALL
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyyyyyyyy"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPALL
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPALL
operator|.
name|filterKeyValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filterMPALL
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterMPALL
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should fail here; row should be filtered out.
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|rowkey
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|NEXT_ROW
operator|==
name|filterMPALL
operator|.
name|filterKeyValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
comment|// Both filters in Set should be satisfied by now
name|assertTrue
argument_list|(
name|filterMPALL
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test list ordering    * @throws Exception    */
specifier|public
name|void
name|testOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|RegexStringComparator
name|rsc
decl_stmt|;
name|Filter
name|filterMPONE
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filters
argument_list|)
decl_stmt|;
comment|/* Filter must do all below steps:      *<ul>      *<li>{@link #reset()}</li>      *<li>{@link #filterAllRemaining()} -> true indicates scan is over, false, keep going on.</li>      *<li>{@link #filterRowKey(byte[],int,int)} -> true to drop this row,      * if false, we will also call</li>      *<li>{@link #filterKeyValue(org.apache.hadoop.hbase.KeyValue)} -> true to drop this key/value</li>      *<li>{@link #filterRow()} -> last chance to drop entire row based on the sequence of      * filterValue() calls. Eg: filter a row if it doesn't contain a specified column.      *</li>      *</ul>     */
name|filterMPONE
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|/* We should be able to fill MAX_PAGES without incrementing page counter */
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyyyyyyy"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterKeyValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* Now let's fill the page filter */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xxxxxxx"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterKeyValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* We should still be able to include even though page filter is at max */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|rowkey
argument_list|,
literal|0
argument_list|,
name|rowkey
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterKeyValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test serialization    * @throws Exception    */
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filterMPALL
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
decl_stmt|;
comment|// Decompose filterMPALL to bytes.
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|filterMPALL
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|stream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Recompose filterMPALL.
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|FilterList
name|newFilter
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
name|newFilter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// TODO: Run TESTS!!!
block|}
block|}
end_class

end_unit

