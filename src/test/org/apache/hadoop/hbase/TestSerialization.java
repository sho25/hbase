begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Test HBase Writables serializations  */
end_comment

begin_class
specifier|public
class|class
name|TestSerialization
extends|extends
name|TestCase
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test ServerInfo serialization    * @throws Exception    */
specifier|public
name|void
name|testServerInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|HServerInfo
name|hsi
init|=
operator|new
name|HServerInfo
argument_list|(
operator|new
name|HServerAddress
argument_list|(
literal|"0.0.0.0:123"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1245
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|hsi
argument_list|)
decl_stmt|;
name|HServerInfo
name|deserializedHsi
init|=
operator|(
name|HServerInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
operator|new
name|HServerInfo
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hsi
operator|.
name|equals
argument_list|(
name|deserializedHsi
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test BatchUpdate serialization    * @throws Exception    */
specifier|public
name|void
name|testBatchUpdate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Text
name|testName
init|=
operator|new
name|Text
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add row named 'testName'.
name|BatchUpdate
name|bu
init|=
operator|new
name|BatchUpdate
argument_list|(
name|testName
argument_list|)
decl_stmt|;
comment|// Add a column named same as row.
name|bu
operator|.
name|put
argument_list|(
name|testName
argument_list|,
name|testName
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|bu
argument_list|)
decl_stmt|;
name|BatchUpdate
name|bubu
init|=
operator|(
name|BatchUpdate
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
operator|new
name|BatchUpdate
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assert rows are same.
name|assertTrue
argument_list|(
name|bu
operator|.
name|getRow
argument_list|()
operator|.
name|equals
argument_list|(
name|bubu
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert has same number of BatchOperations.
name|int
name|firstCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BatchOperation
name|bo
range|:
name|bubu
control|)
block|{
name|firstCount
operator|++
expr_stmt|;
block|}
comment|// Now deserialize again into same instance to ensure we're not
comment|// accumulating BatchOperations on each deserialization.
name|BatchUpdate
name|bububu
init|=
operator|(
name|BatchUpdate
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
name|bubu
argument_list|)
decl_stmt|;
comment|// Assert rows are same again.
name|assertTrue
argument_list|(
name|bu
operator|.
name|getRow
argument_list|()
operator|.
name|equals
argument_list|(
name|bububu
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|secondCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BatchOperation
name|bo
range|:
name|bububu
control|)
block|{
name|secondCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|firstCount
argument_list|,
name|secondCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

