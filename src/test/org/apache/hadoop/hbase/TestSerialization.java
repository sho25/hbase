begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|BatchUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HbaseMapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_comment
comment|/**  * Test HBase Writables serializations  */
end_comment

begin_class
specifier|public
class|class
name|TestSerialization
extends|extends
name|HBaseTestCase
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testKeyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValue
name|original
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|KeyValue
name|newone
init|=
operator|(
name|KeyValue
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|bytes
argument_list|,
operator|new
name|KeyValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|original
argument_list|,
name|newone
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testHbaseMapWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|hmw
init|=
operator|new
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|hmw
operator|.
name|put
argument_list|(
literal|"key"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|hmw
argument_list|)
decl_stmt|;
name|hmw
operator|=
operator|(
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|bytes
argument_list|,
operator|new
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hmw
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|hmw
operator|.
name|get
argument_list|(
literal|"key"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHMsg
parameter_list|()
throws|throws
name|Exception
block|{
name|HMsg
name|m
init|=
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGIONSERVER_QUIESCE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|mb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|HMsg
name|deserializedHMsg
init|=
operator|(
name|HMsg
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|mb
argument_list|,
operator|new
name|HMsg
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|equals
argument_list|(
name|deserializedHMsg
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGIONSERVER_QUIESCE
argument_list|,
operator|new
name|HRegionInfo
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|,
literal|"Some message"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|mb
operator|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|deserializedHMsg
operator|=
operator|(
name|HMsg
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|mb
argument_list|,
operator|new
name|HMsg
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|equals
argument_list|(
name|deserializedHMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTableDescriptor
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|mb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|htd
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|deserializedHtd
init|=
operator|(
name|HTableDescriptor
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|mb
argument_list|,
operator|new
name|HTableDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|deserializedHtd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test RegionInfo serialization    * @throws Exception    */
specifier|public
name|void
name|testRowResult
parameter_list|()
throws|throws
name|Exception
block|{
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
name|m
init|=
operator|new
name|HbaseMapWritable
argument_list|<
name|byte
index|[]
argument_list|,
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|b
argument_list|,
operator|new
name|Cell
argument_list|(
name|b
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RowResult
name|rr
init|=
operator|new
name|RowResult
argument_list|(
name|b
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|byte
index|[]
name|mb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|RowResult
name|deserializedRr
init|=
operator|(
name|RowResult
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|mb
argument_list|,
operator|new
name|RowResult
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|rr
operator|.
name|getRow
argument_list|()
argument_list|,
name|deserializedRr
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|one
init|=
name|rr
operator|.
name|get
argument_list|(
name|b
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|two
init|=
name|deserializedRr
operator|.
name|get
argument_list|(
name|b
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
name|Writables
operator|.
name|copyWritable
argument_list|(
name|rr
argument_list|,
name|deserializedRr
argument_list|)
expr_stmt|;
name|one
operator|=
name|rr
operator|.
name|get
argument_list|(
name|b
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|two
operator|=
name|deserializedRr
operator|.
name|get
argument_list|(
name|b
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test RegionInfo serialization    * @throws Exception    */
specifier|public
name|void
name|testRegionInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|families
init|=
operator|new
name|String
index|[]
block|{
literal|"info:"
block|,
literal|"anchor:"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|families
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|families
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|byte
index|[]
name|hrib
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|HRegionInfo
name|deserializedHri
init|=
operator|(
name|HRegionInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|hrib
argument_list|,
operator|new
name|HRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|deserializedHri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hri
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|deserializedHri
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test ServerInfo serialization    * @throws Exception    */
specifier|public
name|void
name|testServerInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|HServerInfo
name|hsi
init|=
operator|new
name|HServerInfo
argument_list|(
operator|new
name|HServerAddress
argument_list|(
literal|"0.0.0.0:123"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1245
argument_list|,
literal|"default name"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|hsi
argument_list|)
decl_stmt|;
name|HServerInfo
name|deserializedHsi
init|=
operator|(
name|HServerInfo
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
operator|new
name|HServerInfo
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hsi
operator|.
name|equals
argument_list|(
name|deserializedHsi
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test BatchUpdate serialization    * @throws Exception    */
specifier|public
name|void
name|testBatchUpdate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add row named 'testName'.
name|BatchUpdate
name|bu
init|=
operator|new
name|BatchUpdate
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add a column named same as row.
name|bu
operator|.
name|put
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|bu
argument_list|)
decl_stmt|;
name|BatchUpdate
name|bubu
init|=
operator|(
name|BatchUpdate
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
operator|new
name|BatchUpdate
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assert rows are same.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|bu
operator|.
name|getRow
argument_list|()
argument_list|,
name|bubu
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert has same number of BatchOperations.
name|int
name|firstCount
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|BatchOperation
name|bo
range|:
name|bubu
control|)
block|{
name|firstCount
operator|++
expr_stmt|;
block|}
comment|// Now deserialize again into same instance to ensure we're not
comment|// accumulating BatchOperations on each deserialization.
name|BatchUpdate
name|bububu
init|=
operator|(
name|BatchUpdate
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
name|bubu
argument_list|)
decl_stmt|;
comment|// Assert rows are same again.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|bu
operator|.
name|getRow
argument_list|()
argument_list|,
name|bububu
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|secondCount
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|BatchOperation
name|bo
range|:
name|bububu
control|)
block|{
name|secondCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|firstCount
argument_list|,
name|secondCount
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// HBASE-880
comment|//
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|row
init|=
literal|"row"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fam
init|=
literal|"fam"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
literal|"qf1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
literal|"qf2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
literal|"qf3"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
literal|"qf4"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
literal|"qf5"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf6
init|=
literal|"qf6"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf7
init|=
literal|"qf7"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf8
init|=
literal|"qf8"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
literal|"val"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf2
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf3
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf4
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf5
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf6
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf7
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf8
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|Put
name|desPut
init|=
operator|(
name|Put
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|sb
argument_list|,
operator|new
name|Put
argument_list|()
argument_list|)
decl_stmt|;
comment|//Timing test
comment|//    long start = System.nanoTime();
comment|//    desPut = (Put)Writables.getWritable(sb, new Put());
comment|//    long stop = System.nanoTime();
comment|//    System.out.println("timer " +(stop-start));
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|,
name|desPut
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|desList
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|entry
range|:
name|put
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|desPut
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|desList
operator|=
name|desPut
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|desList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testPut2
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|row
init|=
literal|"testAbort,,1243116656250"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fam
init|=
literal|"historian"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
literal|"creation"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
literal|9223372036854775807L
decl_stmt|;
name|byte
index|[]
name|val
init|=
literal|"dont-care"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|Put
name|desPut
init|=
operator|(
name|Put
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|sb
argument_list|,
operator|new
name|Put
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|,
name|desPut
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|desList
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|entry
range|:
name|put
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|desPut
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|desList
operator|=
name|desPut
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|desList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|row
init|=
literal|"row"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fam
init|=
literal|"fam"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
literal|"qf1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|Delete
name|desDelete
init|=
operator|(
name|Delete
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|sb
argument_list|,
operator|new
name|Delete
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|delete
operator|.
name|getRow
argument_list|()
argument_list|,
name|desDelete
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|desList
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|KeyValue
argument_list|>
argument_list|>
name|entry
range|:
name|delete
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|desDelete
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|desList
operator|=
name|desDelete
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|desList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|row
init|=
literal|"row"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fam
init|=
literal|"fam"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
literal|"qf1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|maxVersions
init|=
literal|2
decl_stmt|;
name|long
name|lockid
init|=
literal|5
decl_stmt|;
name|RowLock
name|rowLock
init|=
operator|new
name|RowLock
argument_list|(
name|lockid
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|,
name|rowLock
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|ts
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Get
name|desGet
init|=
operator|(
name|Get
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|sb
argument_list|,
operator|new
name|Get
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|desGet
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|set
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|desSet
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|entry
range|:
name|get
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|desGet
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|desSet
operator|=
name|desGet
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
name|desSet
operator|.
name|contains
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|get
operator|.
name|getLockId
argument_list|()
argument_list|,
name|desGet
operator|.
name|getLockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|get
operator|.
name|getMaxVersions
argument_list|()
argument_list|,
name|desGet
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
name|TimeRange
name|tr
init|=
name|get
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|TimeRange
name|desTr
init|=
name|desGet
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tr
operator|.
name|getMax
argument_list|()
argument_list|,
name|desTr
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tr
operator|.
name|getMin
argument_list|()
argument_list|,
name|desTr
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testScan
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|startRow
init|=
literal|"startRow"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
literal|"stopRow"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fam
init|=
literal|"fam"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
literal|"qf1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|maxVersions
init|=
literal|2
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|ts
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
name|byte
index|[]
name|sb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Scan
name|desScan
init|=
operator|(
name|Scan
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|sb
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|desScan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|desScan
operator|.
name|getStopRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|set
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|desSet
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|entry
range|:
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|desScan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|desSet
operator|=
name|desScan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
name|desSet
operator|.
name|contains
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test filters are serialized properly.
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|byte
index|[]
name|prefix
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|desScan
operator|=
operator|(
name|Scan
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|sb
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
name|desScan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|instanceof
name|PrefixFilter
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|scan
operator|.
name|getMaxVersions
argument_list|()
argument_list|,
name|desScan
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
name|TimeRange
name|tr
init|=
name|scan
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|TimeRange
name|desTr
init|=
name|desScan
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tr
operator|.
name|getMax
argument_list|()
argument_list|,
name|desTr
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tr
operator|.
name|getMin
argument_list|()
argument_list|,
name|desTr
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResultEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|keys
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Result
name|deserializedR
init|=
operator|(
name|Result
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|rb
argument_list|,
operator|new
name|Result
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deserializedR
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResult
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|famA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"famA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qfA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|famB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"famB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qfB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueB"
argument_list|)
decl_stmt|;
name|KeyValue
name|kvA
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|famA
argument_list|,
name|qfA
argument_list|,
name|valueA
argument_list|)
decl_stmt|;
name|KeyValue
name|kvB
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|famB
argument_list|,
name|qfB
argument_list|,
name|valueB
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
operator|new
name|KeyValue
index|[]
block|{
name|kvA
block|,
name|kvB
block|}
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|Result
name|deResult
init|=
operator|(
name|Result
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|rb
argument_list|,
operator|new
name|Result
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"results are not equivalent, first key mismatch"
argument_list|,
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|deResult
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"results are not equivalent, second key mismatch"
argument_list|,
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|deResult
operator|.
name|sorted
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test empty Result
name|Result
name|r
init|=
operator|new
name|Result
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Result
name|deserialized
init|=
operator|(
name|Result
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
operator|new
name|Result
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|size
argument_list|()
argument_list|,
name|deserialized
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResultDynamicBuild
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|famA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"famA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qfA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|famB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"famB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qfB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueB"
argument_list|)
decl_stmt|;
name|KeyValue
name|kvA
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|famA
argument_list|,
name|qfA
argument_list|,
name|valueA
argument_list|)
decl_stmt|;
name|KeyValue
name|kvB
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|famB
argument_list|,
name|qfB
argument_list|,
name|valueB
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
operator|new
name|KeyValue
index|[]
block|{
name|kvA
block|,
name|kvB
block|}
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|result
argument_list|)
decl_stmt|;
comment|// Call getRow() first
name|Result
name|deResult
init|=
operator|(
name|Result
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|rb
argument_list|,
operator|new
name|Result
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|deResult
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|rowA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Call sorted() first
name|deResult
operator|=
operator|(
name|Result
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|rb
argument_list|,
operator|new
name|Result
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"results are not equivalent, first key mismatch"
argument_list|,
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|deResult
operator|.
name|sorted
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"results are not equivalent, second key mismatch"
argument_list|,
name|result
operator|.
name|sorted
argument_list|()
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|deResult
operator|.
name|sorted
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Call raw() first
name|deResult
operator|=
operator|(
name|Result
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|rb
argument_list|,
operator|new
name|Result
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"results are not equivalent, first key mismatch"
argument_list|,
name|result
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|deResult
operator|.
name|raw
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"results are not equivalent, second key mismatch"
argument_list|,
name|result
operator|.
name|raw
argument_list|()
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|deResult
operator|.
name|raw
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResultArray
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|famA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"famA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qfA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|famB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"famB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qfB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valueB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueB"
argument_list|)
decl_stmt|;
name|KeyValue
name|kvA
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|famA
argument_list|,
name|qfA
argument_list|,
name|valueA
argument_list|)
decl_stmt|;
name|KeyValue
name|kvB
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|famB
argument_list|,
name|qfB
argument_list|,
name|valueB
argument_list|)
decl_stmt|;
name|Result
name|result1
init|=
operator|new
name|Result
argument_list|(
operator|new
name|KeyValue
index|[]
block|{
name|kvA
block|,
name|kvB
block|}
argument_list|)
decl_stmt|;
name|Result
name|result2
init|=
operator|new
name|Result
argument_list|(
operator|new
name|KeyValue
index|[]
block|{
name|kvB
block|}
argument_list|)
decl_stmt|;
name|Result
name|result3
init|=
operator|new
name|Result
argument_list|(
operator|new
name|KeyValue
index|[]
block|{
name|kvB
block|}
argument_list|)
decl_stmt|;
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[]
block|{
name|result1
block|,
name|result2
block|,
name|result3
block|}
decl_stmt|;
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
decl_stmt|;
name|Result
operator|.
name|writeArray
argument_list|(
name|out
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rb
init|=
name|byteStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|rb
argument_list|,
literal|0
argument_list|,
name|rb
operator|.
name|length
argument_list|)
expr_stmt|;
name|Result
index|[]
name|deResults
init|=
name|Result
operator|.
name|readArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|length
operator|==
name|deResults
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
index|[]
name|keysA
init|=
name|results
index|[
name|i
index|]
operator|.
name|sorted
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|keysB
init|=
name|deResults
index|[
name|i
index|]
operator|.
name|sorted
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|keysA
operator|.
name|length
operator|==
name|keysB
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|keysA
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected equivalent keys but found:\n"
operator|+
literal|"KeyA : "
operator|+
name|keysA
index|[
name|j
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"KeyB : "
operator|+
name|keysB
index|[
name|j
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
operator|+
name|keysA
operator|.
name|length
operator|+
literal|" total keys, "
operator|+
name|i
operator|+
literal|"th so far"
argument_list|,
name|keysA
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|keysB
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testResultArrayEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|keys
argument_list|)
decl_stmt|;
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[]
block|{
name|r
block|}
decl_stmt|;
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
decl_stmt|;
name|Result
operator|.
name|writeArray
argument_list|(
name|out
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|results
operator|=
literal|null
expr_stmt|;
name|byteStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
expr_stmt|;
name|Result
operator|.
name|writeArray
argument_list|(
name|out
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rb
init|=
name|byteStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|rb
argument_list|,
literal|0
argument_list|,
name|rb
operator|.
name|length
argument_list|)
expr_stmt|;
name|Result
index|[]
name|deResults
init|=
name|Result
operator|.
name|readArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deResults
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|Result
index|[
literal|0
index|]
expr_stmt|;
name|byteStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
expr_stmt|;
name|Result
operator|.
name|writeArray
argument_list|(
name|out
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|rb
operator|=
name|byteStream
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|DataInputBuffer
argument_list|()
expr_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|rb
argument_list|,
literal|0
argument_list|,
name|rb
operator|.
name|length
argument_list|)
expr_stmt|;
name|deResults
operator|=
name|Result
operator|.
name|readArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deResults
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTimeRange
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TimeRange
name|tr
init|=
operator|new
name|TimeRange
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|mb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|TimeRange
name|deserializedTr
init|=
operator|(
name|TimeRange
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|mb
argument_list|,
operator|new
name|TimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tr
operator|.
name|getMax
argument_list|()
argument_list|,
name|deserializedTr
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tr
operator|.
name|getMin
argument_list|()
argument_list|,
name|deserializedTr
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testKeyValue2
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|row
init|=
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|fam
init|=
literal|"fam"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qf
init|=
literal|"qf"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|val
init|=
literal|"val"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|byte
index|[]
name|mb
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|KeyValue
name|deserializedKv
init|=
operator|(
name|KeyValue
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|mb
argument_list|,
operator|new
name|KeyValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|deserializedKv
operator|.
name|getBuffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv
operator|.
name|getOffset
argument_list|()
argument_list|,
name|deserializedKv
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv
operator|.
name|getLength
argument_list|()
argument_list|,
name|deserializedKv
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

