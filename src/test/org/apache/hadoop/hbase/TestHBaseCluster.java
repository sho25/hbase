begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|ConsoleAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_comment
comment|/**  * Test HBase Master and Region servers, client API   */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseCluster
extends|extends
name|TestCase
block|{
comment|/** constructor */
specifier|public
name|TestHBaseCluster
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** Test suite so that all tests get run */
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHBaseCluster
argument_list|(
literal|"testSetup"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHBaseCluster
argument_list|(
literal|"testBasic"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHBaseCluster
argument_list|(
literal|"testScanner"
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|TestHBaseCluster
argument_list|(
literal|"testCleanup"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|FIRST_ROW
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_VALS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|CONTENTS
init|=
operator|new
name|Text
argument_list|(
literal|"contents:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|CONTENTS_BASIC
init|=
operator|new
name|Text
argument_list|(
literal|"contents:basic"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENTSTR
init|=
literal|"contentstr"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|ANCHOR
init|=
operator|new
name|Text
argument_list|(
literal|"anchor:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANCHORNUM
init|=
literal|"anchor:anchornum-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANCHORSTR
init|=
literal|"anchorstr"
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|failures
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|MiniHBaseCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HTableDescriptor
name|desc
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HClient
name|client
init|=
literal|null
decl_stmt|;
comment|// Set up environment, start mini cluster, etc.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testSetup
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|dir
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"build/contrib/hbase/test"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|HBaseConfiguration
argument_list|()
expr_stmt|;
name|Environment
operator|.
name|getenv
argument_list|()
expr_stmt|;
if|if
condition|(
name|Environment
operator|.
name|debugging
condition|)
block|{
name|Logger
name|rootLogger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|ConsoleAppender
name|consoleAppender
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Appender
argument_list|>
name|e
init|=
operator|(
name|Enumeration
argument_list|<
name|Appender
argument_list|>
operator|)
name|rootLogger
operator|.
name|getAllAppenders
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Appender
name|a
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|ConsoleAppender
condition|)
block|{
name|consoleAppender
operator|=
operator|(
name|ConsoleAppender
operator|)
name|a
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|consoleAppender
operator|!=
literal|null
condition|)
block|{
name|Layout
name|layout
init|=
name|consoleAppender
operator|.
name|getLayout
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|instanceof
name|PatternLayout
condition|)
block|{
name|PatternLayout
name|consoleLayout
init|=
operator|(
name|PatternLayout
operator|)
name|layout
decl_stmt|;
name|consoleLayout
operator|.
name|setConversionPattern
argument_list|(
literal|"%d %-5p [%t] %l: %m%n"
argument_list|)
expr_stmt|;
block|}
block|}
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Environment
operator|.
name|logLevel
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"test"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|Text
argument_list|(
name|CONTENTS
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|Text
argument_list|(
name|ANCHOR
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failures
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
comment|// Test basic functionality. Writes to contents:basic and anchor:anchornum-*
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
try|try
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|client
operator|.
name|openTable
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write out a bunch of values
for|for
control|(
name|int
name|k
init|=
name|FIRST_ROW
init|;
name|k
operator|<=
name|NUM_VALS
condition|;
name|k
operator|++
control|)
block|{
name|long
name|writeid
init|=
name|client
operator|.
name|startUpdate
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|put
argument_list|(
name|writeid
argument_list|,
name|CONTENTS_BASIC
argument_list|,
operator|(
name|CONTENTSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|put
argument_list|(
name|writeid
argument_list|,
operator|new
name|Text
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
argument_list|,
operator|(
name|ANCHORSTR
operator|+
name|k
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
name|writeid
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Write "
operator|+
name|NUM_VALS
operator|+
literal|" rows. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
comment|// Read them back in
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Text
name|collabel
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|FIRST_ROW
init|;
name|k
operator|<=
name|NUM_VALS
condition|;
name|k
operator|++
control|)
block|{
name|Text
name|rowlabel
init|=
operator|new
name|Text
argument_list|(
literal|"row_"
operator|+
name|k
argument_list|)
decl_stmt|;
name|byte
name|bodydata
index|[]
init|=
name|client
operator|.
name|get
argument_list|(
name|rowlabel
argument_list|,
name|CONTENTS_BASIC
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bodydata
argument_list|)
expr_stmt|;
name|String
name|bodystr
init|=
operator|new
name|String
argument_list|(
name|bodydata
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|teststr
init|=
name|CONTENTSTR
operator|+
name|k
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect value for key: ("
operator|+
name|rowlabel
operator|+
literal|","
operator|+
name|CONTENTS_BASIC
operator|+
literal|"), expected: '"
operator|+
name|teststr
operator|+
literal|"' got: '"
operator|+
name|bodystr
operator|+
literal|"'"
argument_list|,
name|bodystr
argument_list|,
name|teststr
argument_list|)
expr_stmt|;
name|collabel
operator|=
operator|new
name|Text
argument_list|(
name|ANCHORNUM
operator|+
name|k
argument_list|)
expr_stmt|;
name|bodydata
operator|=
name|client
operator|.
name|get
argument_list|(
name|rowlabel
argument_list|,
name|collabel
argument_list|)
expr_stmt|;
name|bodystr
operator|=
operator|new
name|String
argument_list|(
name|bodydata
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|teststr
operator|=
name|ANCHORSTR
operator|+
name|k
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect value for key: ("
operator|+
name|rowlabel
operator|+
literal|","
operator|+
name|collabel
operator|+
literal|"), expected: '"
operator|+
name|teststr
operator|+
literal|"' got: '"
operator|+
name|bodystr
operator|+
literal|"'"
argument_list|,
name|bodystr
argument_list|,
name|teststr
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Read "
operator|+
name|NUM_VALS
operator|+
literal|" rows. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testScanner
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
operator|||
name|failures
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|Text
index|[]
name|cols
init|=
operator|new
name|Text
index|[]
block|{
operator|new
name|Text
argument_list|(
name|ANCHORNUM
operator|+
literal|"[0-9]+"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
name|CONTENTS_BASIC
argument_list|)
block|}
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HScannerInterface
name|s
init|=
name|client
operator|.
name|obtainScanner
argument_list|(
name|cols
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|contentsFetched
init|=
literal|0
decl_stmt|;
name|int
name|anchorFetched
init|=
literal|0
decl_stmt|;
name|HStoreKey
name|curKey
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|curVals
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curKey
argument_list|,
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Text
argument_list|>
name|it
init|=
name|curVals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Text
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|val
index|[]
init|=
name|curVals
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|String
name|curval
init|=
operator|new
name|String
argument_list|(
name|val
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|col
operator|.
name|compareTo
argument_list|(
name|CONTENTS_BASIC
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should start with: "
operator|+
name|CONTENTSTR
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
operator|.
name|startsWith
argument_list|(
name|CONTENTSTR
argument_list|)
argument_list|)
expr_stmt|;
name|contentsFetched
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|col
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ANCHORNUM
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error at:"
operator|+
name|curKey
operator|.
name|getRow
argument_list|()
operator|+
literal|"/"
operator|+
name|curKey
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|", Value for "
operator|+
name|col
operator|+
literal|" should start with: "
operator|+
name|ANCHORSTR
operator|+
literal|", but was fetched as: "
operator|+
name|curval
argument_list|,
name|curval
operator|.
name|startsWith
argument_list|(
name|ANCHORSTR
argument_list|)
argument_list|)
expr_stmt|;
name|anchorFetched
operator|++
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
name|curVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|NUM_VALS
operator|+
literal|" "
operator|+
name|CONTENTS_BASIC
operator|+
literal|" values, but fetched "
operator|+
name|contentsFetched
argument_list|,
name|NUM_VALS
argument_list|,
name|contentsFetched
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|NUM_VALS
operator|+
literal|" "
operator|+
name|ANCHORNUM
operator|+
literal|" values, but fetched "
operator|+
name|anchorFetched
argument_list|,
name|NUM_VALS
argument_list|,
name|anchorFetched
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Scanned "
operator|+
name|NUM_VALS
operator|+
literal|" rows. Elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testListTables
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
operator|||
name|failures
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|client
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|,
name|tables
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Text
argument_list|>
name|families
init|=
name|tables
index|[
literal|0
index|]
operator|.
name|families
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|families
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|families
operator|.
name|contains
argument_list|(
operator|new
name|Text
argument_list|(
name|CONTENTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|families
operator|.
name|contains
argument_list|(
operator|new
name|Text
argument_list|(
name|ANCHOR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|failures
condition|)
block|{
comment|// Delete the table we created
name|client
operator|.
name|deleteTable
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
comment|// Wait for table to be deleted
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
block|}
finally|finally
block|{
comment|// Shut down the cluster
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

