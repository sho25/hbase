begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test that individual classes can migrate themselves.  */
end_comment

begin_class
specifier|public
class|class
name|TestClassMigration
extends|extends
name|TestCase
block|{
comment|/**    * Test we can migrate a 0.1 version of HSK.    * @throws Exception    */
specifier|public
name|void
name|testMigrateHStoreKey
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|nameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|nameText
init|=
operator|new
name|Text
argument_list|(
name|nameBytes
argument_list|)
decl_stmt|;
name|HStoreKey01Branch
name|hsk
init|=
operator|new
name|HStoreKey01Branch
argument_list|(
name|nameText
argument_list|,
name|nameText
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Writables
operator|.
name|getBytes
argument_list|(
name|hsk
argument_list|)
decl_stmt|;
name|HStoreKey
name|deserializedHsk
init|=
operator|(
name|HStoreKey
operator|)
name|Writables
operator|.
name|getWritable
argument_list|(
name|b
argument_list|,
operator|new
name|HStoreKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|deserializedHsk
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|hsk
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|nameBytes
argument_list|,
name|deserializedHsk
operator|.
name|getColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|nameBytes
argument_list|,
name|deserializedHsk
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBase 0.1 branch HStoreKey.  Same in all regards except the utility    * methods have been removed.    * Used in test of HSK migration test.    */
specifier|private
specifier|static
class|class
name|HStoreKey01Branch
implements|implements
name|WritableComparable
block|{
comment|/**      * Colon character in UTF-8      */
specifier|public
specifier|static
specifier|final
name|char
name|COLUMN_FAMILY_DELIMITER
init|=
literal|':'
decl_stmt|;
specifier|private
name|Text
name|row
decl_stmt|;
specifier|private
name|Text
name|column
decl_stmt|;
specifier|private
name|long
name|timestamp
decl_stmt|;
comment|/** Default constructor used in conjunction with Writable interface */
specifier|public
name|HStoreKey01Branch
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an HStoreKey specifying only the row      * The column defaults to the empty string and the time stamp defaults to      * Long.MAX_VALUE      *       * @param row - row key      */
specifier|public
name|HStoreKey01Branch
parameter_list|(
name|Text
name|row
parameter_list|)
block|{
name|this
argument_list|(
name|row
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an HStoreKey specifying the row and timestamp      * The column name defaults to the empty string      *       * @param row row key      * @param timestamp timestamp value      */
specifier|public
name|HStoreKey01Branch
parameter_list|(
name|Text
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
argument_list|(
name|row
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an HStoreKey specifying the row and column names      * The timestamp defaults to LATEST_TIMESTAMP      *       * @param row row key      * @param column column key      */
specifier|public
name|HStoreKey01Branch
parameter_list|(
name|Text
name|row
parameter_list|,
name|Text
name|column
parameter_list|)
block|{
name|this
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an HStoreKey specifying all the fields      *       * @param row row key      * @param column column key      * @param timestamp timestamp value      */
specifier|public
name|HStoreKey01Branch
parameter_list|(
name|Text
name|row
parameter_list|,
name|Text
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
comment|// Make copies by doing 'new Text(arg)'.
name|this
operator|.
name|row
operator|=
operator|new
name|Text
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|this
operator|.
name|column
operator|=
operator|new
name|Text
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
comment|/** @return Approximate size in bytes of this key. */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|.
name|getLength
argument_list|()
operator|+
name|this
operator|.
name|column
operator|.
name|getLength
argument_list|()
operator|+
literal|8
comment|/* There is no sizeof in java. Presume long is 8 (64bit machine)*/
return|;
block|}
comment|/**      * Constructs a new HStoreKey from another      *       * @param other the source key      */
specifier|public
name|HStoreKey01Branch
parameter_list|(
name|HStoreKey01Branch
name|other
parameter_list|)
block|{
name|this
argument_list|(
name|other
operator|.
name|row
argument_list|,
name|other
operator|.
name|column
argument_list|,
name|other
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Change the value of the row key      *       * @param newrow new row key value      */
specifier|public
name|void
name|setRow
parameter_list|(
name|Text
name|newrow
parameter_list|)
block|{
name|this
operator|.
name|row
operator|.
name|set
argument_list|(
name|newrow
argument_list|)
expr_stmt|;
block|}
comment|/**      * Change the value of the column key      *       * @param newcol new column key value      */
specifier|public
name|void
name|setColumn
parameter_list|(
name|Text
name|newcol
parameter_list|)
block|{
name|this
operator|.
name|column
operator|.
name|set
argument_list|(
name|newcol
argument_list|)
expr_stmt|;
block|}
comment|/**      * Change the value of the timestamp field      *       * @param timestamp new timestamp value      */
specifier|public
name|void
name|setVersion
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
comment|/**      * Set the value of this HStoreKey from the supplied key      *       * @param k key value to copy      */
specifier|public
name|void
name|set
parameter_list|(
name|HStoreKey01Branch
name|k
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|k
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|k
operator|.
name|getColumn
argument_list|()
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|k
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
comment|/** @return value of row key */
specifier|public
name|Text
name|getRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
comment|/** @return value of column key */
specifier|public
name|Text
name|getColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
comment|/** @return value of timestamp */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|row
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|column
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|timestamp
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|this
operator|.
name|row
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|^=
name|this
operator|.
name|column
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|^=
name|this
operator|.
name|timestamp
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Comparable
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|HStoreKey01Branch
name|other
init|=
operator|(
name|HStoreKey01Branch
operator|)
name|o
decl_stmt|;
name|int
name|result
init|=
name|this
operator|.
name|row
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
name|result
operator|=
name|this
operator|.
name|column
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// The below older timestamps sorting ahead of newer timestamps looks
comment|// wrong but it is intentional. This way, newer timestamps are first
comment|// found when we iterate over a memcache and newer versions are the
comment|// first we trip over when reading from a store file.
if|if
condition|(
name|this
operator|.
name|timestamp
operator|<
name|other
operator|.
name|timestamp
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|timestamp
operator|>
name|other
operator|.
name|timestamp
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Writable
comment|/** {@inheritDoc} */
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|row
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|column
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|row
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|column
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns row and column bytes out of an HStoreKey.      * @param hsk Store key.      * @return byte array encoding of HStoreKey      * @throws UnsupportedEncodingException      */
specifier|public
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|HStoreKey
name|hsk
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|(
name|hsk
operator|.
name|getRow
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|hsk
operator|.
name|getColumn
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

