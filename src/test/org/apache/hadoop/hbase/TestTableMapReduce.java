begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|dfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|KeyedData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|KeyedDataArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
operator|.
name|TableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
operator|.
name|TableOutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
operator|.
name|IdentityTableReduce
import|;
end_import

begin_comment
comment|/**  * Test Map/Reduce job over HBase tables  */
end_comment

begin_class
specifier|public
class|class
name|TestTableMapReduce
extends|extends
name|HBaseTestCase
block|{
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"test"
decl_stmt|;
specifier|static
specifier|final
name|String
name|INPUT_COLUMN
init|=
literal|"contents:"
decl_stmt|;
specifier|static
specifier|final
name|Text
name|TEXT_INPUT_COLUMN
init|=
operator|new
name|Text
argument_list|(
name|INPUT_COLUMN
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|OUTPUT_COLUMN
init|=
literal|"text:"
decl_stmt|;
specifier|static
specifier|final
name|Text
name|TEXT_OUTPUT_COLUMN
init|=
operator|new
name|Text
argument_list|(
name|OUTPUT_COLUMN
argument_list|)
decl_stmt|;
specifier|private
name|Random
name|rand
decl_stmt|;
specifier|private
name|HTableDescriptor
name|desc
decl_stmt|;
specifier|private
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|dir
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|hCluster
init|=
literal|null
decl_stmt|;
specifier|private
name|byte
index|[]
index|[]
name|values
init|=
block|{
literal|"0123"
operator|.
name|getBytes
argument_list|()
block|,
literal|"abcd"
operator|.
name|getBytes
argument_list|()
block|,
literal|"wxyz"
operator|.
name|getBytes
argument_list|()
block|,
literal|"6789"
operator|.
name|getBytes
argument_list|()
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|INPUT_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|OUTPUT_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// create the root and meta regions and insert the data region into the meta
name|HRegion
name|root
init|=
name|createNewHRegion
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|,
name|HGlobals
operator|.
name|rootTableDesc
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HRegion
name|meta
init|=
name|createNewHRegion
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|,
name|HGlobals
operator|.
name|metaTableDesc
argument_list|,
literal|1L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|root
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|,
name|desc
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HRegion
operator|.
name|addRegionToMETA
argument_list|(
name|meta
argument_list|,
name|region
argument_list|)
expr_stmt|;
comment|// insert some data into the test table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|lockid
init|=
name|region
operator|.
name|startUpdate
argument_list|(
operator|new
name|Text
argument_list|(
literal|"row_"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%1$05d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|region
operator|.
name|put
argument_list|(
name|lockid
argument_list|,
name|TEXT_INPUT_COLUMN
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|region
operator|.
name|commit
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|meta
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|root
operator|.
name|close
argument_list|()
expr_stmt|;
name|root
operator|.
name|getLog
argument_list|()
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
comment|// Start up HBase cluster
name|hCluster
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
name|dfsCluster
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|hCluster
operator|!=
literal|null
condition|)
block|{
name|hCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Pass the given key and processed record reduce    */
specifier|public
specifier|static
class|class
name|ProcessContentsMapper
extends|extends
name|TableMap
block|{
comment|/** constructor */
specifier|public
name|ProcessContentsMapper
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Pass the key, and reversed value to reduce      *      * @see org.apache.hadoop.hbase.mapred.TableMap#map(org.apache.hadoop.hbase.HStoreKey, org.apache.hadoop.hbase.io.KeyedDataArrayWritable, org.apache.hadoop.hbase.mapred.TableOutputCollector, org.apache.hadoop.mapred.Reporter)      */
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|HStoreKey
name|key
parameter_list|,
name|KeyedDataArrayWritable
name|value
parameter_list|,
name|TableOutputCollector
name|output
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|tKey
init|=
name|key
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|KeyedData
index|[]
name|columns
init|=
name|value
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There should only be one input column"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|columns
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|getColumn
argument_list|()
operator|.
name|equals
argument_list|(
name|TEXT_INPUT_COLUMN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wrong input column. Expected: "
operator|+
name|INPUT_COLUMN
operator|+
literal|" but got: "
operator|+
name|columns
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
comment|// Get the input column key and change it to the output column key
name|HStoreKey
name|column
init|=
name|columns
index|[
literal|0
index|]
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|column
operator|.
name|setColumn
argument_list|(
name|TEXT_OUTPUT_COLUMN
argument_list|)
expr_stmt|;
comment|// Get the original value and reverse it
name|String
name|originalValue
init|=
operator|new
name|String
argument_list|(
name|columns
index|[
literal|0
index|]
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|newValue
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|originalValue
operator|.
name|length
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|newValue
operator|.
name|append
argument_list|(
name|originalValue
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now set the value to be collected
name|columns
index|[
literal|0
index|]
operator|=
operator|new
name|KeyedData
argument_list|(
name|column
argument_list|,
name|newValue
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|tKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test HBase map/reduce    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
name|void
name|testTableMapReduce
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Print table contents before map/reduce"
argument_list|)
expr_stmt|;
name|scanTable
argument_list|(
name|conf
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|MiniMRCluster
name|mrCluster
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
name|fs
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|TestTableMapReduce
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setJobName
argument_list|(
literal|"process column contents"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ProcessContentsMapper
operator|.
name|initJob
argument_list|(
name|TABLE_NAME
argument_list|,
name|INPUT_COLUMN
argument_list|,
name|ProcessContentsMapper
operator|.
name|class
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|IdentityTableReduce
operator|.
name|initJob
argument_list|(
name|TABLE_NAME
argument_list|,
name|IdentityTableReduce
operator|.
name|class
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Print table contents after map/reduce"
argument_list|)
expr_stmt|;
name|scanTable
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanTable
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HClient
name|client
init|=
operator|new
name|HClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|openTable
argument_list|(
operator|new
name|Text
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Text
index|[]
name|columns
init|=
block|{
name|TEXT_INPUT_COLUMN
block|,
name|TEXT_OUTPUT_COLUMN
block|}
decl_stmt|;
name|HScannerInterface
name|scanner
init|=
name|client
operator|.
name|obtainScanner
argument_list|(
name|columns
argument_list|,
name|HClient
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
try|try
block|{
name|HStoreKey
name|key
init|=
operator|new
name|HStoreKey
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"row: "
operator|+
name|key
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" column: "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|" value: "
operator|+
operator|new
name|String
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

