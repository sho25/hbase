begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellSetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|RowModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|ScannerModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|TableSchemaModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * HTable interface to remote tables accessed via REST gateway  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|RemoteHTable
implements|implements
name|Table
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RemoteHTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Client
name|client
decl_stmt|;
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|final
name|byte
index|[]
name|name
decl_stmt|;
specifier|final
name|int
name|maxRetries
decl_stmt|;
specifier|final
name|long
name|sleepTime
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|String
name|buildRowSpec
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|Map
name|familyMap
parameter_list|,
specifier|final
name|long
name|startTime
parameter_list|,
specifier|final
name|long
name|endTime
parameter_list|,
specifier|final
name|int
name|maxVersions
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|Set
name|families
init|=
name|familyMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|families
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|i
init|=
name|familyMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|quals
init|=
operator|(
name|Collection
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|quals
operator|==
literal|null
operator|||
name|quals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// this is an unqualified family. append the family name and NO ':'
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Iterator
name|ii
init|=
name|quals
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ii
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|ii
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Puts use byte[] but Deletes use KeyValue
if|if
condition|(
name|o
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|KeyValue
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
operator|(
name|KeyValue
operator|)
name|o
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"object type not handled"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ii
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|startTime
operator|>=
literal|0
operator|&&
name|endTime
operator|!=
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTime
operator|!=
name|endTime
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|endTime
operator|!=
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxVersions
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"?v="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|buildMultiRowSpec
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|rows
parameter_list|,
name|int
name|maxVersions
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/multiget/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|==
literal|null
operator|||
name|rows
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|rk
init|=
name|rows
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"row="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
name|rk
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"&v="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|Result
index|[]
name|buildResultFromModel
parameter_list|(
specifier|final
name|CellSetModel
name|model
parameter_list|)
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RowModel
name|row
range|:
name|model
operator|.
name|getRows
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|row
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CellModel
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
block|{
name|byte
index|[]
index|[]
name|split
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|cell
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|column
init|=
name|split
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|qualifier
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|qualifier
operator|=
name|split
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid familyAndQualifier provided."
argument_list|)
throw|;
block|}
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|,
name|column
argument_list|,
name|qualifier
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|Result
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|CellSetModel
name|buildModelFromPut
parameter_list|(
name|Put
name|put
parameter_list|)
block|{
name|RowModel
name|row
init|=
operator|new
name|RowModel
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|put
operator|.
name|getTimeStamp
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
range|:
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
name|row
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|,
name|ts
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|?
name|ts
else|:
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|CellSetModel
name|model
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
comment|/**    * Constructor    */
specifier|public
name|RemoteHTable
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|client
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    */
specifier|public
name|RemoteHTable
parameter_list|(
name|Client
name|client
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|client
argument_list|,
name|conf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    */
specifier|public
name|RemoteHTable
parameter_list|(
name|Client
name|client
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|name
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|maxRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.rest.client.max.retries"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleepTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.rest.client.sleep"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getTableName
parameter_list|()
block|{
return|return
name|name
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"schema"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|200
case|:
name|TableSchemaModel
name|schema
init|=
operator|new
name|TableSchemaModel
argument_list|()
decl_stmt|;
name|schema
operator|.
name|getObjectFromMessage
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|schema
operator|.
name|getTableDescriptor
argument_list|()
return|;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"schema request returned "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"schema request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|TimeRange
name|range
init|=
name|get
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|String
name|spec
init|=
name|buildRowSpec
argument_list|(
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|get
operator|.
name|getFamilyMap
argument_list|()
argument_list|,
name|range
operator|.
name|getMin
argument_list|()
argument_list|,
name|range
operator|.
name|getMax
argument_list|()
argument_list|,
name|get
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|get
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"filters not supported on gets"
argument_list|)
expr_stmt|;
block|}
name|Result
index|[]
name|results
init|=
name|getResults
argument_list|(
name|spec
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|results
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"too many results for get ("
operator|+
name|results
operator|.
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|results
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|Result
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|get
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|rows
init|=
operator|new
name|byte
index|[
name|gets
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|int
name|maxVersions
init|=
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Get
name|g
range|:
name|gets
control|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|maxVersions
operator|=
name|g
operator|.
name|getMaxVersions
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|g
operator|.
name|getMaxVersions
argument_list|()
operator|!=
name|maxVersions
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MaxVersions on Gets do not match, using the first in the list ("
operator|+
name|maxVersions
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"filters not supported on gets"
argument_list|)
expr_stmt|;
block|}
name|rows
index|[
name|count
index|]
operator|=
name|g
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|String
name|spec
init|=
name|buildMultiRowSpec
argument_list|(
name|rows
argument_list|,
name|maxVersions
argument_list|)
decl_stmt|;
return|return
name|getResults
argument_list|(
name|spec
argument_list|)
return|;
block|}
specifier|private
name|Result
index|[]
name|getResults
parameter_list|(
name|String
name|spec
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
name|spec
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|200
case|:
name|CellSetModel
name|model
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|getObjectFromMessage
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results
init|=
name|buildResultFromModel
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|results
return|;
block|}
comment|// fall through
case|case
literal|404
case|:
return|return
operator|new
name|Result
index|[
literal|0
index|]
return|;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"get request returned "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"get request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"exists() is really get(), just use get()"
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
operator|(
name|result
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|result
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
return|;
block|}
comment|/**    * exists(List) is really a list of get() calls. Just use get().    * @param gets list of Get to test for the existence    */
annotation|@
name|Override
specifier|public
name|boolean
index|[]
name|existsAll
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"exists(List<Get>) is really list of get() calls, just use get()"
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|results
init|=
operator|new
name|boolean
index|[
name|gets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|exists
argument_list|(
name|gets
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|Boolean
index|[]
name|exists
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
index|[]
name|results
init|=
name|existsAll
argument_list|(
name|gets
argument_list|)
decl_stmt|;
name|Boolean
index|[]
name|objectResults
init|=
operator|new
name|Boolean
index|[
name|results
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|objectResults
index|[
name|i
index|]
operator|=
name|results
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|objectResults
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|CellSetModel
name|model
init|=
name|buildModelFromPut
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|200
case|:
return|return;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"put request failed with "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"put request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
comment|// this is a trick: The gateway accepts multiple rows in a cell set and
comment|// ignores the row specification in the URI
comment|// separate puts by row
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Put
name|put
range|:
name|puts
control|)
block|{
name|byte
index|[]
name|row
init|=
name|put
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|map
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
block|{
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|row
argument_list|,
name|cells
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|List
argument_list|<
name|Cell
argument_list|>
name|l
range|:
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|cells
operator|.
name|addAll
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
comment|// build the cell set
name|CellSetModel
name|model
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RowModel
name|row
init|=
operator|new
name|RowModel
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|row
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|// build path for multiput
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/$multiput"
argument_list|)
expr_stmt|;
comment|// can be any nonexistent row
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|200
case|:
return|return;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"multiput request failed with "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"multiput request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|spec
init|=
name|buildRowSpec
argument_list|(
name|delete
operator|.
name|getRow
argument_list|()
argument_list|,
name|delete
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|,
name|delete
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
name|delete
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|delete
argument_list|(
name|spec
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|200
case|:
return|return;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"delete request failed with "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"delete request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Delete
name|delete
range|:
name|deletes
control|)
block|{
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flushCommits
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no-op
block|}
annotation|@
name|Override
specifier|public
name|TableDescriptor
name|getDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getTableDescriptor
argument_list|()
return|;
block|}
class|class
name|Scanner
implements|implements
name|ResultScanner
block|{
name|String
name|uri
decl_stmt|;
specifier|public
name|Scanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ScannerModel
name|model
decl_stmt|;
try|try
block|{
name|model
operator|=
name|ScannerModel
operator|.
name|fromScan
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"scanner"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|201
case|:
name|uri
operator|=
name|response
operator|.
name|getLocation
argument_list|()
expr_stmt|;
return|return;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"scan request failed with "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"scan request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|next
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"?n="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|200
case|:
name|CellSetModel
name|model
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|getObjectFromMessage
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buildResultFromModel
argument_list|(
name|model
argument_list|)
return|;
case|case
literal|204
case|:
case|case
literal|206
case|:
return|return
literal|null
return|;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"scanner.next request failed with "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"scanner.next request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|Result
index|[]
name|results
init|=
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|length
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|results
index|[
literal|0
index|]
return|;
block|}
class|class
name|Iter
implements|implements
name|Iterator
argument_list|<
name|Result
argument_list|>
block|{
name|Result
name|cache
decl_stmt|;
specifier|public
name|Iter
parameter_list|()
block|{
try|try
block|{
name|cache
operator|=
name|Scanner
operator|.
name|this
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|cache
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|next
parameter_list|()
block|{
name|Result
name|result
init|=
name|cache
decl_stmt|;
try|try
block|{
name|cache
operator|=
name|Scanner
operator|.
name|this
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"remove() not supported"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Result
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|client
operator|.
name|delete
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|renewLease
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"renewLease() not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ScanMetrics
name|getScanMetrics
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getScanMetrics() not supported"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Scanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
operator|new
name|Scanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
return|return
operator|new
name|Scanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAutoFlush
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
comment|// column to check-the-value
name|put
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|CellSetModel
name|model
init|=
name|buildModelFromPut
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"?check=put"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|200
case|:
return|return
literal|true
return|;
case|case
literal|304
case|:
comment|// NOT-MODIFIED
return|return
literal|false
return|;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"checkAndPut request failed with "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"checkAndPut request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOp
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"checkAndPut for non-equal comparison not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"checkAndPut for non-equal comparison not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndDelete
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setFamilyCellMap
argument_list|(
name|delete
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// column to check-the-value
name|put
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|CellSetModel
name|model
init|=
name|buildModelFromPut
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|toURLEncodedBytes
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"?check=delete"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxRetries
condition|;
name|i
operator|++
control|)
block|{
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|code
condition|)
block|{
case|case
literal|200
case|:
return|return
literal|true
return|;
case|case
literal|304
case|:
comment|// NOT-MODIFIED
return|return
literal|false
return|;
case|case
literal|509
case|:
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"checkAndDelete request failed with "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"checkAndDelete request timed out"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndDelete
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOp
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"checkAndDelete for non-equal comparison not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndDelete
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"checkAndDelete for non-equal comparison not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|increment
parameter_list|(
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Increment not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|append
parameter_list|(
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Append not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"incrementColumnValue not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"incrementColumnValue not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|batch
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
name|Object
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"batch not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|batchCallback
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
name|Object
index|[]
name|results
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"batchCallback not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CoprocessorRpcChannel
name|coprocessorService
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"coprocessorService not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|,
name|R
parameter_list|>
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|Batch
operator|.
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"coprocessorService not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|,
name|R
parameter_list|>
name|void
name|coprocessorService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|Batch
operator|.
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"coprocessorService not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRow
parameter_list|(
name|RowMutations
name|rm
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"atomicMutation not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
extends|extends
name|Message
parameter_list|>
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|batchCoprocessorService
parameter_list|(
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
name|Message
name|request
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|R
name|responsePrototype
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"batchCoprocessorService not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
extends|extends
name|Message
parameter_list|>
name|void
name|batchCoprocessorService
parameter_list|(
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
name|Message
name|request
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|R
name|responsePrototype
parameter_list|,
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"batchCoprocessorService not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndMutate
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOp
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|RowMutations
name|rm
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"checkAndMutate not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndMutate
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOperator
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|RowMutations
name|rm
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"checkAndMutate not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOperationTimeout
parameter_list|(
name|int
name|operationTimeout
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOperationTimeout
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|setRpcTimeout
parameter_list|(
name|int
name|rpcTimeout
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|int
name|getRpcTimeout
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReadRpcTimeout
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadRpcTimeout
parameter_list|(
name|int
name|readRpcTimeout
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getWriteRpcTimeout
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWriteRpcTimeout
parameter_list|(
name|int
name|writeRpcTimeout
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/*    * Only a small subset of characters are valid in URLs.    *    * Row keys, column families, and qualifiers cannot be appended to URLs without first URL    * escaping. Table names are ok because they can only contain alphanumeric, ".","_", and "-"    * which are valid characters in URLs.    */
specifier|private
specifier|static
name|String
name|toURLEncodedBytes
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
try|try
block|{
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
operator|new
name|String
argument_list|(
name|row
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"URLEncoder doesn't support UTF-8"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

