begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|JacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|InfoServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|AuthFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|GzipFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
operator|.
name|RestCsrfPreventionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|HttpServerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SslConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SecureRequestCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|jmx
operator|.
name|MBeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|server
operator|.
name|ResourceConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|servlet
operator|.
name|ServletContainer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|DispatcherType
import|;
end_import

begin_comment
comment|/**  * Main class for launching REST gateway as a servlet hosted by Jetty.  *<p>  * The following options are supported:  *<ul>  *<li>-p --port : service port</li>  *<li>-ro --readonly : server mode</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
specifier|public
class|class
name|RESTServer
implements|implements
name|Constants
block|{
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"RESTServer"
argument_list|)
decl_stmt|;
specifier|static
name|String
name|REST_CSRF_ENABLED_KEY
init|=
literal|"hbase.rest.csrf.enabled"
decl_stmt|;
specifier|static
name|boolean
name|REST_CSRF_ENABLED_DEFAULT
init|=
literal|false
decl_stmt|;
specifier|static
name|boolean
name|restCSRFEnabled
init|=
literal|false
decl_stmt|;
specifier|static
name|String
name|REST_CSRF_CUSTOM_HEADER_KEY
init|=
literal|"hbase.rest.csrf.custom.header"
decl_stmt|;
specifier|static
name|String
name|REST_CSRF_CUSTOM_HEADER_DEFAULT
init|=
literal|"X-XSRF-HEADER"
decl_stmt|;
specifier|static
name|String
name|REST_CSRF_METHODS_TO_IGNORE_KEY
init|=
literal|"hbase.rest.csrf.methods.to.ignore"
decl_stmt|;
specifier|static
name|String
name|REST_CSRF_METHODS_TO_IGNORE_DEFAULT
init|=
literal|"GET,OPTIONS,HEAD,TRACE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH_SPEC_ANY
init|=
literal|"/*"
decl_stmt|;
specifier|private
specifier|static
name|void
name|printUsageAndExit
parameter_list|(
name|Options
name|options
parameter_list|,
name|int
name|exitCode
parameter_list|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"hbase rest start"
argument_list|,
literal|""
argument_list|,
name|options
argument_list|,
literal|"\nTo run the REST server as a daemon, execute "
operator|+
literal|"hbase-daemon.sh start|stop rest [--infoport<port>] [-p<port>] [-ro]\n"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a list of strings from a comma-delimited configuration value.    *    * @param conf configuration to check    * @param name configuration property name    * @param defaultValue default value if no value found for name    * @return list of strings from comma-delimited configuration value, or an    *     empty list if not found    */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getTrimmedStringList
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|valueString
init|=
name|conf
operator|.
name|get
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|StringUtils
operator|.
name|getTrimmedStringCollection
argument_list|(
name|valueString
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|REST_CSRF_BROWSER_USERAGENTS_REGEX_KEY
init|=
literal|"hbase.rest-csrf.browser-useragents-regex"
decl_stmt|;
specifier|static
name|void
name|addCSRFFilter
parameter_list|(
name|ServletContextHandler
name|ctxHandler
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|restCSRFEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|REST_CSRF_ENABLED_KEY
argument_list|,
name|REST_CSRF_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|restCSRFEnabled
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|restCsrfParams
init|=
name|RestCsrfPreventionFilter
operator|.
name|getFilterParams
argument_list|(
name|conf
argument_list|,
literal|"hbase.rest-csrf."
argument_list|)
decl_stmt|;
name|FilterHolder
name|holder
init|=
operator|new
name|FilterHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|setName
argument_list|(
literal|"csrf"
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setClassName
argument_list|(
name|RestCsrfPreventionFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameters
argument_list|(
name|restCsrfParams
argument_list|)
expr_stmt|;
name|ctxHandler
operator|.
name|addFilter
argument_list|(
name|holder
argument_list|,
name|PATH_SPEC_ANY
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DispatcherType
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// login the server principal (if using secure Hadoop)
specifier|private
specifier|static
name|Pair
argument_list|<
name|FilterHolder
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ServletContainer
argument_list|>
argument_list|>
name|loginServerPrincipal
parameter_list|(
name|UserProvider
name|userProvider
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ServletContainer
argument_list|>
name|containerClass
init|=
name|ServletContainer
operator|.
name|class
decl_stmt|;
if|if
condition|(
name|userProvider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
operator|&&
name|userProvider
operator|.
name|isHBaseSecurityEnabled
argument_list|()
condition|)
block|{
name|String
name|machineName
init|=
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|REST_DNS_INTERFACE
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|REST_DNS_NAMESERVER
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keytabFilename
init|=
name|conf
operator|.
name|get
argument_list|(
name|REST_KEYTAB_FILE
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|keytabFilename
operator|!=
literal|null
operator|&&
operator|!
name|keytabFilename
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|REST_KEYTAB_FILE
operator|+
literal|" should be set if security is enabled"
argument_list|)
expr_stmt|;
name|String
name|principalConfig
init|=
name|conf
operator|.
name|get
argument_list|(
name|REST_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|principalConfig
operator|!=
literal|null
operator|&&
operator|!
name|principalConfig
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|REST_KERBEROS_PRINCIPAL
operator|+
literal|" should be set if security is enabled"
argument_list|)
expr_stmt|;
name|userProvider
operator|.
name|login
argument_list|(
name|REST_KEYTAB_FILE
argument_list|,
name|REST_KERBEROS_PRINCIPAL
argument_list|,
name|machineName
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|REST_AUTHENTICATION_TYPE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|containerClass
operator|=
name|RESTServletContainer
operator|.
name|class
expr_stmt|;
name|FilterHolder
name|authFilter
init|=
operator|new
name|FilterHolder
argument_list|()
decl_stmt|;
name|authFilter
operator|.
name|setClassName
argument_list|(
name|AuthFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|authFilter
operator|.
name|setName
argument_list|(
literal|"AuthenticationFilter"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|authFilter
argument_list|,
name|containerClass
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|containerClass
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|parseCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|RESTServlet
name|servlet
parameter_list|)
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"p"
argument_list|,
literal|"port"
argument_list|,
literal|true
argument_list|,
literal|"Port to bind to [default: "
operator|+
name|DEFAULT_LISTEN_PORT
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"ro"
argument_list|,
literal|"readonly"
argument_list|,
literal|false
argument_list|,
literal|"Respond only to GET HTTP "
operator|+
literal|"method requests [default: false]"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
literal|"infoport"
argument_list|,
literal|true
argument_list|,
literal|"Port for web UI"
argument_list|)
expr_stmt|;
name|CommandLine
name|commandLine
init|=
literal|null
decl_stmt|;
try|try
block|{
name|commandLine
operator|=
operator|new
name|PosixParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not parse: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// check for user-defined port setting, if so override the conf
if|if
condition|(
name|commandLine
operator|!=
literal|null
operator|&&
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"port"
argument_list|)
condition|)
block|{
name|String
name|val
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.rest.port"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"port set to "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if server should only process GET requests, if so override the conf
if|if
condition|(
name|commandLine
operator|!=
literal|null
operator|&&
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"readonly"
argument_list|)
condition|)
block|{
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"readonly set to true"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check for user-defined info server port setting, if so override the conf
if|if
condition|(
name|commandLine
operator|!=
literal|null
operator|&&
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"infoport"
argument_list|)
condition|)
block|{
name|String
name|val
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"infoport"
argument_list|)
decl_stmt|;
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.rest.info.port"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Web UI port set to "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|remainingArgs
init|=
name|commandLine
operator|!=
literal|null
condition|?
name|commandLine
operator|.
name|getArgList
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainingArgs
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|command
init|=
name|remainingArgs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"start"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
comment|// continue and start container
block|}
elseif|else
if|if
condition|(
literal|"stop"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The main method for the HBase rest server.    * @param args command-line arguments    * @throws Exception exception    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"***** STARTING service '"
operator|+
name|RESTServer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"' *****"
argument_list|)
expr_stmt|;
name|VersionInfo
operator|.
name|logVersion
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|UserProvider
name|userProvider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|FilterHolder
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ServletContainer
argument_list|>
argument_list|>
name|pair
init|=
name|loginServerPrincipal
argument_list|(
name|userProvider
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FilterHolder
name|authFilter
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|RESTServlet
name|servlet
init|=
name|RESTServlet
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
decl_stmt|;
name|parseCommandLine
argument_list|(
name|args
argument_list|,
name|servlet
argument_list|)
expr_stmt|;
comment|// set up the Jersey servlet container for Jetty
name|ResourceConfig
name|application
init|=
operator|new
name|ResourceConfig
argument_list|()
operator|.
name|packages
argument_list|(
literal|"org.apache.hadoop.hbase.rest"
argument_list|)
operator|.
name|register
argument_list|(
name|JacksonJaxbJsonProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServletHolder
name|sh
init|=
operator|new
name|ServletHolder
argument_list|(
operator|new
name|ServletContainer
argument_list|(
name|application
argument_list|)
argument_list|)
decl_stmt|;
comment|// Set the default max thread number to 100 to limit
comment|// the number of concurrent requests so that REST server doesn't OOM easily.
comment|// Jetty set the default max thread number to 250, if we don't set it.
comment|//
comment|// Our default min thread number 2 is the same as that used by Jetty.
name|int
name|maxThreads
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|REST_THREAD_POOL_THREADS_MAX
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|minThreads
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|REST_THREAD_POOL_THREADS_MIN
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Use the default queue (unbounded with Jetty 9.3) if the queue size is negative, otherwise use
comment|// bounded {@link ArrayBlockingQueue} with the given size
name|int
name|queueSize
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|REST_THREAD_POOL_TASK_QUEUE_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|idleTimeout
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|REST_THREAD_POOL_THREAD_IDLE_TIMEOUT
argument_list|,
literal|60000
argument_list|)
decl_stmt|;
name|QueuedThreadPool
name|threadPool
init|=
name|queueSize
operator|>
literal|0
condition|?
operator|new
name|QueuedThreadPool
argument_list|(
name|maxThreads
argument_list|,
name|minThreads
argument_list|,
name|idleTimeout
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|queueSize
argument_list|)
argument_list|)
else|:
operator|new
name|QueuedThreadPool
argument_list|(
name|maxThreads
argument_list|,
name|minThreads
argument_list|,
name|idleTimeout
argument_list|)
decl_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
name|threadPool
argument_list|)
decl_stmt|;
comment|// Setup JMX
name|MBeanContainer
name|mbContainer
init|=
operator|new
name|MBeanContainer
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|addEventListener
argument_list|(
name|mbContainer
argument_list|)
expr_stmt|;
name|server
operator|.
name|addBean
argument_list|(
name|mbContainer
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase.rest.host"
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|int
name|servicePort
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.rest.port"
argument_list|,
literal|8080
argument_list|)
decl_stmt|;
name|HttpConfiguration
name|httpConfig
init|=
operator|new
name|HttpConfiguration
argument_list|()
decl_stmt|;
name|httpConfig
operator|.
name|setSecureScheme
argument_list|(
literal|"https"
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setSecurePort
argument_list|(
name|servicePort
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setSendServerVersion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setSendDateHeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ServerConnector
name|serverConnector
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|REST_SSL_ENABLED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|HttpConfiguration
name|httpsConfig
init|=
operator|new
name|HttpConfiguration
argument_list|(
name|httpConfig
argument_list|)
decl_stmt|;
name|httpsConfig
operator|.
name|addCustomizer
argument_list|(
operator|new
name|SecureRequestCustomizer
argument_list|()
argument_list|)
expr_stmt|;
name|SslContextFactory
name|sslCtxFactory
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
name|String
name|keystore
init|=
name|conf
operator|.
name|get
argument_list|(
name|REST_SSL_KEYSTORE_STORE
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|HBaseConfiguration
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|REST_SSL_KEYSTORE_PASSWORD
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|keyPassword
init|=
name|HBaseConfiguration
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|REST_SSL_KEYSTORE_KEYPASSWORD
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|sslCtxFactory
operator|.
name|setKeyStorePath
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|sslCtxFactory
operator|.
name|setKeyStorePassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|sslCtxFactory
operator|.
name|setKeyManagerPassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|String
index|[]
name|excludeCiphers
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStrings
argument_list|(
name|REST_SSL_EXCLUDE_CIPHER_SUITES
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeCiphers
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sslCtxFactory
operator|.
name|setExcludeCipherSuites
argument_list|(
name|excludeCiphers
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|includeCiphers
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStrings
argument_list|(
name|REST_SSL_INCLUDE_CIPHER_SUITES
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeCiphers
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sslCtxFactory
operator|.
name|setIncludeCipherSuites
argument_list|(
name|includeCiphers
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|excludeProtocols
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStrings
argument_list|(
name|REST_SSL_EXCLUDE_PROTOCOLS
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeProtocols
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sslCtxFactory
operator|.
name|setExcludeProtocols
argument_list|(
name|excludeProtocols
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|includeProtocols
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStrings
argument_list|(
name|REST_SSL_INCLUDE_PROTOCOLS
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeProtocols
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sslCtxFactory
operator|.
name|setIncludeProtocols
argument_list|(
name|includeProtocols
argument_list|)
expr_stmt|;
block|}
name|serverConnector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
operator|new
name|SslConnectionFactory
argument_list|(
name|sslCtxFactory
argument_list|,
name|HttpVersion
operator|.
name|HTTP_1_1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|httpsConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverConnector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|httpConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|acceptQueueSize
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|REST_CONNECTOR_ACCEPT_QUEUE_SIZE
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptQueueSize
operator|>=
literal|0
condition|)
block|{
name|serverConnector
operator|.
name|setAcceptQueueSize
argument_list|(
name|acceptQueueSize
argument_list|)
expr_stmt|;
block|}
name|serverConnector
operator|.
name|setPort
argument_list|(
name|servicePort
argument_list|)
expr_stmt|;
name|serverConnector
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|server
operator|.
name|addConnector
argument_list|(
name|serverConnector
argument_list|)
expr_stmt|;
name|server
operator|.
name|setStopAtShutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// set up context
name|ServletContextHandler
name|ctxHandler
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|server
argument_list|,
literal|"/"
argument_list|,
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|ctxHandler
operator|.
name|addServlet
argument_list|(
name|sh
argument_list|,
name|PATH_SPEC_ANY
argument_list|)
expr_stmt|;
if|if
condition|(
name|authFilter
operator|!=
literal|null
condition|)
block|{
name|ctxHandler
operator|.
name|addFilter
argument_list|(
name|authFilter
argument_list|,
name|PATH_SPEC_ANY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Load filters from configuration.
name|String
index|[]
name|filterClasses
init|=
name|servlet
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStrings
argument_list|(
name|FILTER_CLASSES
argument_list|,
name|GzipFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|filter
range|:
name|filterClasses
control|)
block|{
name|filter
operator|=
name|filter
operator|.
name|trim
argument_list|()
expr_stmt|;
name|ctxHandler
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|,
name|PATH_SPEC_ANY
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addCSRFFilter
argument_list|(
name|ctxHandler
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HttpServerUtil
operator|.
name|constrainHttpMethods
argument_list|(
name|ctxHandler
argument_list|)
expr_stmt|;
comment|// Put up info server.
name|int
name|port
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.rest.info.port"
argument_list|,
literal|8085
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
literal|"startcode"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|a
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.rest.info.bindAddress"
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|InfoServer
name|infoServer
init|=
operator|new
name|InfoServer
argument_list|(
literal|"rest"
argument_list|,
name|a
argument_list|,
name|port
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|infoServer
operator|.
name|setAttribute
argument_list|(
literal|"hbase.conf"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// start server
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Failed to start server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"***** STOPPING service '"
operator|+
name|RESTServer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"' *****"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

