begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * This filter provides protection against cross site request forgery (CSRF)  * attacks for REST APIs. Enabling this filter on an endpoint results in the  * requirement of all client to send a particular (configurable) HTTP header  * with every request. In the absense of this header the filter will reject the  * attempt as a bad request.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|RestCsrfPreventionFilter
implements|implements
name|Filter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RestCsrfPreventionFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEADER_USER_AGENT
init|=
literal|"User-Agent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BROWSER_USER_AGENT_PARAM
init|=
literal|"browser-useragents-regex"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_HEADER_PARAM
init|=
literal|"custom-header"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_METHODS_TO_IGNORE_PARAM
init|=
literal|"methods-to-ignore"
decl_stmt|;
specifier|static
specifier|final
name|String
name|BROWSER_USER_AGENTS_DEFAULT
init|=
literal|"^Mozilla.*,^Opera.*"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEADER_DEFAULT
init|=
literal|"X-XSRF-HEADER"
decl_stmt|;
specifier|static
specifier|final
name|String
name|METHODS_TO_IGNORE_DEFAULT
init|=
literal|"GET,OPTIONS,HEAD,TRACE"
decl_stmt|;
specifier|private
name|String
name|headerName
init|=
name|HEADER_DEFAULT
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|methodsToIgnore
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Pattern
argument_list|>
name|browserUserAgents
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|customHeader
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|CUSTOM_HEADER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|customHeader
operator|!=
literal|null
condition|)
block|{
name|headerName
operator|=
name|customHeader
expr_stmt|;
block|}
name|String
name|customMethodsToIgnore
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|CUSTOM_METHODS_TO_IGNORE_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|customMethodsToIgnore
operator|!=
literal|null
condition|)
block|{
name|parseMethodsToIgnore
argument_list|(
name|customMethodsToIgnore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parseMethodsToIgnore
argument_list|(
name|METHODS_TO_IGNORE_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|agents
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|BROWSER_USER_AGENT_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|agents
operator|==
literal|null
condition|)
block|{
name|agents
operator|=
name|BROWSER_USER_AGENTS_DEFAULT
expr_stmt|;
block|}
name|parseBrowserUserAgents
argument_list|(
name|agents
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Adding cross-site request forgery (CSRF) protection, "
operator|+
literal|"headerName = %s, methodsToIgnore = %s, browserUserAgents = %s"
argument_list|,
name|headerName
argument_list|,
name|methodsToIgnore
argument_list|,
name|browserUserAgents
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|parseBrowserUserAgents
parameter_list|(
name|String
name|userAgents
parameter_list|)
block|{
name|String
index|[]
name|agentsArray
init|=
name|userAgents
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|browserUserAgents
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|patternString
range|:
name|agentsArray
control|)
block|{
name|browserUserAgents
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|patternString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|parseMethodsToIgnore
parameter_list|(
name|String
name|mti
parameter_list|)
block|{
name|String
index|[]
name|methods
init|=
name|mti
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|methodsToIgnore
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|methodsToIgnore
operator|.
name|add
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method interrogates the User-Agent String and returns whether it    * refers to a browser.  If its not a browser, then the requirement for the    * CSRF header will not be enforced; if it is a browser, the requirement will    * be enforced.    *<p>    * A User-Agent String is considered to be a browser if it matches    * any of the regex patterns from browser-useragent-regex; the default    * behavior is to consider everything a browser that matches the following:    * "^Mozilla.*,^Opera.*".  Subclasses can optionally override    * this method to use different behavior.    *    * @param userAgent The User-Agent String, or null if there isn't one    * @return true if the User-Agent String refers to a browser, false if not    */
specifier|protected
name|boolean
name|isBrowser
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
if|if
condition|(
name|userAgent
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Pattern
name|pattern
range|:
name|browserUserAgents
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|userAgent
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Defines the minimal API requirements for the filter to execute its    * filtering logic.  This interface exists to facilitate integration in    * components that do not run within a servlet container and therefore cannot    * rely on a servlet container to dispatch to the {@link #doFilter} method.    * Applications that do run inside a servlet container will not need to write    * code that uses this interface.  Instead, they can use typical servlet    * container configuration mechanisms to insert the filter.    */
specifier|public
interface|interface
name|HttpInteraction
block|{
comment|/**      * Returns the value of a header.      *      * @param header name of header      * @return value of header      */
name|String
name|getHeader
parameter_list|(
name|String
name|header
parameter_list|)
function_decl|;
comment|/**      * Returns the method.      *      * @return method      */
name|String
name|getMethod
parameter_list|()
function_decl|;
comment|/**      * Called by the filter after it decides that the request may proceed.      *      * @throws IOException if there is an I/O error      * @throws ServletException if the implementation relies on the servlet API      *     and a servlet API call has failed      */
name|void
name|proceed
parameter_list|()
throws|throws
name|IOException
throws|,
name|ServletException
function_decl|;
comment|/**      * Called by the filter after it decides that the request is a potential      * CSRF attack and therefore must be rejected.      *      * @param code status code to send      * @param message response message      * @throws IOException if there is an I/O error      */
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Handles an {@link HttpInteraction} by applying the filtering logic.    *    * @param httpInteraction caller's HTTP interaction    * @throws IOException if there is an I/O error    * @throws ServletException if the implementation relies on the servlet API    *     and a servlet API call has failed    */
specifier|public
name|void
name|handleHttpInteraction
parameter_list|(
name|HttpInteraction
name|httpInteraction
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
operator|!
name|isBrowser
argument_list|(
name|httpInteraction
operator|.
name|getHeader
argument_list|(
name|HEADER_USER_AGENT
argument_list|)
argument_list|)
operator|||
name|methodsToIgnore
operator|.
name|contains
argument_list|(
name|httpInteraction
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
name|httpInteraction
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|httpInteraction
operator|.
name|proceed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|httpInteraction
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Missing Required Header for CSRF Vulnerability Protection"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
specifier|final
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
specifier|final
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
specifier|final
name|HttpServletResponse
name|httpResponse
init|=
operator|(
name|HttpServletResponse
operator|)
name|response
decl_stmt|;
name|handleHttpInteraction
argument_list|(
operator|new
name|ServletFilterHttpInteraction
argument_list|(
name|httpRequest
argument_list|,
name|httpResponse
argument_list|,
name|chain
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
comment|/**    * Constructs a mapping of configuration properties to be used for filter    * initialization.  The mapping includes all properties that start with the    * specified configuration prefix.  Property names in the mapping are trimmed    * to remove the configuration prefix.    *    * @param conf configuration to read    * @param confPrefix configuration prefix    * @return mapping of configuration properties to be used for filter    *     initialization    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFilterParams
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confPrefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterConfigMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|confPrefix
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|confPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|filterConfigMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filterConfigMap
return|;
block|}
comment|/**    * {@link HttpInteraction} implementation for use in the servlet filter.    */
specifier|private
specifier|static
specifier|final
class|class
name|ServletFilterHttpInteraction
implements|implements
name|HttpInteraction
block|{
specifier|private
specifier|final
name|FilterChain
name|chain
decl_stmt|;
specifier|private
specifier|final
name|HttpServletRequest
name|httpRequest
decl_stmt|;
specifier|private
specifier|final
name|HttpServletResponse
name|httpResponse
decl_stmt|;
comment|/**      * Creates a new ServletFilterHttpInteraction.      *      * @param httpRequest request to process      * @param httpResponse response to process      * @param chain filter chain to forward to if HTTP interaction is allowed      */
specifier|public
name|ServletFilterHttpInteraction
parameter_list|(
name|HttpServletRequest
name|httpRequest
parameter_list|,
name|HttpServletResponse
name|httpResponse
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
block|{
name|this
operator|.
name|httpRequest
operator|=
name|httpRequest
expr_stmt|;
name|this
operator|.
name|httpResponse
operator|=
name|httpResponse
expr_stmt|;
name|this
operator|.
name|chain
operator|=
name|chain
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|header
parameter_list|)
block|{
return|return
name|httpRequest
operator|.
name|getHeader
argument_list|(
name|header
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|httpRequest
operator|.
name|getMethod
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|proceed
parameter_list|()
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|httpRequest
argument_list|,
name|httpResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|httpResponse
operator|.
name|sendError
argument_list|(
name|code
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

