begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellSetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|RowModel
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MultiRowResource
extends|extends
name|ResourceBase
implements|implements
name|Constants
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultiRowResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|TableResource
name|tableResource
decl_stmt|;
name|Integer
name|versions
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|columns
init|=
literal|null
decl_stmt|;
comment|/**    * Constructor    *    * @param tableResource    * @param versions    * @throws java.io.IOException    */
specifier|public
name|MultiRowResource
parameter_list|(
name|TableResource
name|tableResource
parameter_list|,
name|String
name|versions
parameter_list|,
name|String
name|columnsStr
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableResource
operator|=
name|tableResource
expr_stmt|;
if|if
condition|(
name|columnsStr
operator|!=
literal|null
operator|&&
operator|!
name|columnsStr
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|this
operator|.
name|columns
operator|=
name|columnsStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versions
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|versions
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|versions
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MIMETYPE_XML
block|,
name|MIMETYPE_JSON
block|,
name|MIMETYPE_PROTOBUF
block|,
name|MIMETYPE_PROTOBUF_IETF
block|}
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
decl_stmt|;
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|CellSetModel
name|model
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rk
range|:
name|params
operator|.
name|get
argument_list|(
name|ROW_KEYS_PARAM_NAME
argument_list|)
control|)
block|{
name|RowSpec
name|rowSpec
init|=
operator|new
name|RowSpec
argument_list|(
name|rk
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|versions
operator|!=
literal|null
condition|)
block|{
name|rowSpec
operator|.
name|setMaxVersions
argument_list|(
name|this
operator|.
name|versions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rowSpec
operator|.
name|addColumn
argument_list|(
name|this
operator|.
name|columns
index|[
name|i
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ResultGenerator
name|generator
init|=
name|ResultGenerator
operator|.
name|fromRowSpec
argument_list|(
name|this
operator|.
name|tableResource
operator|.
name|getName
argument_list|()
argument_list|,
name|rowSpec
argument_list|,
literal|null
argument_list|,
operator|!
name|params
operator|.
name|containsKey
argument_list|(
name|NOCACHE_PARAM_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|value
init|=
literal|null
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|rk
argument_list|)
decl_stmt|;
if|if
condition|(
name|generator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
while|while
condition|(
operator|(
name|value
operator|=
name|generator
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|value
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|value
argument_list|)
argument_list|,
name|value
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The row : "
operator|+
name|rk
operator|+
literal|" not found in the table."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//If no rows found.
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"No rows found."
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|model
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|processException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

