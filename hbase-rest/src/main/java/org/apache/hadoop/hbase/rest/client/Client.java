begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|CoreConnectionPNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_comment
comment|/**  * A wrapper around HttpClient which provides some useful function and  * semantics for interacting with the REST gateway.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|Client
block|{
specifier|public
specifier|static
specifier|final
name|Header
index|[]
name|EMPTY_HEADER_ARRAY
init|=
operator|new
name|Header
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Client
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HttpClient
name|httpClient
decl_stmt|;
specifier|private
name|Cluster
name|cluster
decl_stmt|;
specifier|private
name|boolean
name|sslEnabled
decl_stmt|;
specifier|private
name|HttpResponse
name|resp
decl_stmt|;
specifier|private
name|HttpGet
name|httpGet
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraHeaders
decl_stmt|;
comment|/**    * Default Constructor    */
specifier|public
name|Client
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|boolean
name|sslEnabled
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|sslEnabled
operator|=
name|sslEnabled
expr_stmt|;
name|extraHeaders
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|clspath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"classpath "
operator|+
name|clspath
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpClient
operator|=
operator|new
name|DefaultHttpClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpClient
operator|.
name|getParams
argument_list|()
operator|.
name|setIntParameter
argument_list|(
name|CoreConnectionPNames
operator|.
name|CONNECTION_TIMEOUT
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param cluster the cluster definition    */
specifier|public
name|Client
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|initialize
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param cluster the cluster definition    * @param sslEnabled enable SSL or not    */
specifier|public
name|Client
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|boolean
name|sslEnabled
parameter_list|)
block|{
name|initialize
argument_list|(
name|cluster
argument_list|,
name|sslEnabled
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shut down the client. Close any open persistent connections.    */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{   }
comment|/**    * @return the wrapped HttpClient    */
specifier|public
name|HttpClient
name|getHttpClient
parameter_list|()
block|{
return|return
name|httpClient
return|;
block|}
comment|/**    * Add extra headers.  These extra headers will be applied to all http    * methods before they are removed. If any header is not used any more,    * client needs to remove it explicitly.    */
specifier|public
name|void
name|addExtraHeader
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|extraHeaders
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get an extra header value.    */
specifier|public
name|String
name|getExtraHeader
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|extraHeaders
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Get all extra headers (read-only).    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExtraHeaders
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|extraHeaders
argument_list|)
return|;
block|}
comment|/**    * Remove an extra header.    */
specifier|public
name|void
name|removeExtraHeader
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|extraHeaders
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute a transaction method given only the path. Will select at random    * one of the members of the supplied cluster definition and iterate through    * the list until a transaction can be successfully completed. The    * definition of success here is a complete HTTP transaction, irrespective    * of result code.    * @param cluster the cluster definition    * @param method the transaction method    * @param headers HTTP header values to send    * @param path the properly urlencoded path    * @return the HTTP response code    * @throws IOException    */
specifier|public
name|HttpResponse
name|executePathOnly
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|HttpUriRequest
name|method
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|IOException
name|lastException
decl_stmt|;
if|if
condition|(
name|cluster
operator|.
name|nodes
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster is empty"
argument_list|)
throw|;
block|}
name|int
name|start
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|cluster
operator|.
name|nodes
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|*
name|Math
operator|.
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|start
decl_stmt|;
do|do
block|{
name|cluster
operator|.
name|lastHost
operator|=
name|cluster
operator|.
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
try|try
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslEnabled
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"https://"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"http://"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|cluster
operator|.
name|lastHost
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|instanceof
name|HttpPut
condition|)
block|{
name|HttpPut
name|put
init|=
operator|new
name|HttpPut
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|put
operator|.
name|setEntity
argument_list|(
operator|(
operator|(
name|HttpPut
operator|)
name|method
operator|)
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setHeaders
argument_list|(
name|method
operator|.
name|getAllHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|=
name|put
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|instanceof
name|HttpGet
condition|)
block|{
name|method
operator|=
operator|new
name|HttpGet
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|instanceof
name|HttpHead
condition|)
block|{
name|method
operator|=
operator|new
name|HttpHead
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|instanceof
name|HttpDelete
condition|)
block|{
name|method
operator|=
operator|new
name|HttpDelete
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|instanceof
name|HttpPost
condition|)
block|{
name|HttpPost
name|post
init|=
operator|new
name|HttpPost
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|post
operator|.
name|setEntity
argument_list|(
operator|(
operator|(
name|HttpPost
operator|)
name|method
operator|)
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
name|post
operator|.
name|setHeaders
argument_list|(
name|method
operator|.
name|getAllHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|=
name|post
expr_stmt|;
block|}
return|return
name|executeURI
argument_list|(
name|method
argument_list|,
name|headers
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|use
parameter_list|)
block|{
name|lastException
operator|=
operator|new
name|IOException
argument_list|(
name|use
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|++
name|i
operator|!=
name|start
operator|&&
name|i
operator|<
name|cluster
operator|.
name|nodes
operator|.
name|size
argument_list|()
condition|)
do|;
throw|throw
name|lastException
throw|;
block|}
comment|/**    * Execute a transaction method given a complete URI.    * @param method the transaction method    * @param headers HTTP header values to send    * @param uri a properly urlencoded URI    * @return the HTTP response code    * @throws IOException    */
specifier|public
name|HttpResponse
name|executeURI
parameter_list|(
name|HttpUriRequest
name|method
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
comment|// method.setURI(new URI(uri, true));
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|extraHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|method
operator|.
name|addHeader
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
name|method
operator|.
name|addHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|!=
literal|null
condition|)
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|resp
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|=
name|httpClient
operator|.
name|execute
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
operator|+
literal|" "
operator|+
name|uri
operator|+
literal|" "
operator|+
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|" "
operator|+
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
comment|/**    * Execute a transaction method. Will call either<tt>executePathOnly</tt>    * or<tt>executeURI</tt> depending on whether a path only is supplied in    * 'path', or if a complete URI is passed instead, respectively.    * @param cluster the cluster definition    * @param method the HTTP method    * @param headers HTTP header values to send    * @param path the properly urlencoded path or URI    * @return the HTTP response code    * @throws IOException    */
specifier|public
name|HttpResponse
name|execute
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|HttpUriRequest
name|method
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|executePathOnly
argument_list|(
name|cluster
argument_list|,
name|method
argument_list|,
name|headers
argument_list|,
name|path
argument_list|)
return|;
block|}
return|return
name|executeURI
argument_list|(
name|method
argument_list|,
name|headers
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * @return the cluster definition    */
specifier|public
name|Cluster
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
comment|/**    * @param cluster the cluster definition    */
specifier|public
name|void
name|setCluster
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
block|}
comment|/**    * Send a HEAD request    * @param path the path or URI    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|head
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|head
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Send a HEAD request    * @param cluster the cluster definition    * @param path the path or URI    * @param headers the HTTP headers to include in the request    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|head
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpHead
name|method
init|=
operator|new
name|HttpHead
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpResponse
name|resp
init|=
name|execute
argument_list|(
name|cluster
argument_list|,
name|method
argument_list|,
literal|null
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|new
name|Response
argument_list|(
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|resp
operator|.
name|getAllHeaders
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Send a GET request    * @param path the path or URI    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|get
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * Send a GET request    * @param cluster the cluster definition    * @param path the path or URI    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|get
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|EMPTY_HEADER_ARRAY
argument_list|)
return|;
block|}
comment|/**    * Send a GET request    * @param path the path or URI    * @param accept Accept header value    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|get
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|accept
argument_list|)
return|;
block|}
comment|/**    * Send a GET request    * @param cluster the cluster definition    * @param path the path or URI    * @param accept Accept header value    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|get
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
throws|throws
name|IOException
block|{
name|Header
index|[]
name|headers
init|=
operator|new
name|Header
index|[
literal|1
index|]
decl_stmt|;
name|headers
index|[
literal|0
index|]
operator|=
operator|new
name|BasicHeader
argument_list|(
literal|"Accept"
argument_list|,
name|accept
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**    * Send a GET request    * @param path the path or URI    * @param headers the HTTP headers to include in the request,    *<tt>Accept</tt> must be supplied    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|get
parameter_list|(
name|String
name|path
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**    * Returns the response body of the HTTPResponse, if any, as an array of bytes.    * If response body is not available or cannot be read, returns<tt>null</tt>    *    * Note: This will cause the entire response body to be buffered in memory. A    * malicious server may easily exhaust all the VM memory. It is strongly    * recommended, to use getResponseAsStream if the content length of the response    * is unknown or reasonably large.    *    * @param resp HttpResponse    * @return The response body, null if body is empty    * @throws IOException If an I/O (transport) problem occurs while obtaining the    * response body.    */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NP_LOAD_OF_KNOWN_NULL_VALUE"
argument_list|,
name|justification
operator|=
literal|"null is possible return value"
argument_list|)
specifier|public
specifier|static
name|byte
index|[]
name|getResponseBody
parameter_list|(
name|HttpResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|resp
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
init|(
name|InputStream
name|instream
init|=
name|resp
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
init|)
block|{
if|if
condition|(
name|instream
operator|!=
literal|null
condition|)
block|{
name|long
name|contentLength
init|=
name|resp
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|//guard integer cast from overflow
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Content too large to be buffered: "
operator|+
name|contentLength
operator|+
literal|" bytes"
argument_list|)
throw|;
block|}
name|ByteArrayOutputStream
name|outstream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|contentLength
operator|>
literal|0
condition|?
operator|(
name|int
operator|)
name|contentLength
else|:
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|instream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|outstream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|outstream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|outstream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Send a GET request    * @param c the cluster definition    * @param path the path or URI    * @param headers the HTTP headers to include in the request    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|get
parameter_list|(
name|Cluster
name|c
parameter_list|,
name|String
name|path
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|httpGet
operator|!=
literal|null
condition|)
block|{
name|httpGet
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
name|httpGet
operator|=
operator|new
name|HttpGet
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|HttpResponse
name|resp
init|=
name|execute
argument_list|(
name|c
argument_list|,
name|httpGet
argument_list|,
name|headers
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|new
name|Response
argument_list|(
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|resp
operator|.
name|getAllHeaders
argument_list|()
argument_list|,
name|resp
argument_list|,
name|resp
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|resp
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Send a PUT request    * @param path the path or URI    * @param contentType the content MIME type    * @param content the content bytes    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|put
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|contentType
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|put
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|contentType
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Send a PUT request    * @param path the path or URI    * @param contentType the content MIME type    * @param content the content bytes    * @param extraHdr extra Header to send    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|put
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|contentType
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|Header
name|extraHdr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|put
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|contentType
argument_list|,
name|content
argument_list|,
name|extraHdr
argument_list|)
return|;
block|}
comment|/**    * Send a PUT request    * @param cluster the cluster definition    * @param path the path or URI    * @param contentType the content MIME type    * @param content the content bytes    * @return a Response object with response detail    * @throws IOException for error    */
specifier|public
name|Response
name|put
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contentType
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|Header
index|[]
name|headers
init|=
operator|new
name|Header
index|[
literal|1
index|]
decl_stmt|;
name|headers
index|[
literal|0
index|]
operator|=
operator|new
name|BasicHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|put
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Send a PUT request    * @param cluster the cluster definition    * @param path the path or URI    * @param contentType the content MIME type    * @param content the content bytes    * @param extraHdr additional Header to send    * @return a Response object with response detail    * @throws IOException for error    */
specifier|public
name|Response
name|put
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contentType
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|Header
name|extraHdr
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|cnt
init|=
name|extraHdr
operator|==
literal|null
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|Header
index|[]
name|headers
init|=
operator|new
name|Header
index|[
name|cnt
index|]
decl_stmt|;
name|headers
index|[
literal|0
index|]
operator|=
operator|new
name|BasicHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraHdr
operator|!=
literal|null
condition|)
block|{
name|headers
index|[
literal|1
index|]
operator|=
name|extraHdr
expr_stmt|;
block|}
return|return
name|put
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Send a PUT request    * @param path the path or URI    * @param headers the HTTP headers to include,<tt>Content-Type</tt> must be    * supplied    * @param content the content bytes    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|put
parameter_list|(
name|String
name|path
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|put
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Send a PUT request    * @param cluster the cluster definition    * @param path the path or URI    * @param headers the HTTP headers to include,<tt>Content-Type</tt> must be    * supplied    * @param content the content bytes    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|put
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpPut
name|method
init|=
operator|new
name|HttpPut
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|method
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
argument_list|,
name|content
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|HttpResponse
name|resp
init|=
name|execute
argument_list|(
name|cluster
argument_list|,
name|method
argument_list|,
name|headers
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|headers
operator|=
name|resp
operator|.
name|getAllHeaders
argument_list|()
expr_stmt|;
name|content
operator|=
name|getResponseBody
argument_list|(
name|resp
argument_list|)
expr_stmt|;
return|return
operator|new
name|Response
argument_list|(
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
finally|finally
block|{
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Send a POST request    * @param path the path or URI    * @param contentType the content MIME type    * @param content the content bytes    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|post
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|contentType
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|post
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|contentType
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Send a POST request    * @param path the path or URI    * @param contentType the content MIME type    * @param content the content bytes    * @param extraHdr additional Header to send    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|post
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|contentType
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|Header
name|extraHdr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|post
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|contentType
argument_list|,
name|content
argument_list|,
name|extraHdr
argument_list|)
return|;
block|}
comment|/**    * Send a POST request    * @param cluster the cluster definition    * @param path the path or URI    * @param contentType the content MIME type    * @param content the content bytes    * @return a Response object with response detail    * @throws IOException for error    */
specifier|public
name|Response
name|post
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contentType
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|Header
index|[]
name|headers
init|=
operator|new
name|Header
index|[
literal|1
index|]
decl_stmt|;
name|headers
index|[
literal|0
index|]
operator|=
operator|new
name|BasicHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|post
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Send a POST request    * @param cluster the cluster definition    * @param path the path or URI    * @param contentType the content MIME type    * @param content the content bytes    * @param extraHdr additional Header to send    * @return a Response object with response detail    * @throws IOException for error    */
specifier|public
name|Response
name|post
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|contentType
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|Header
name|extraHdr
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|cnt
init|=
name|extraHdr
operator|==
literal|null
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|Header
index|[]
name|headers
init|=
operator|new
name|Header
index|[
name|cnt
index|]
decl_stmt|;
name|headers
index|[
literal|0
index|]
operator|=
operator|new
name|BasicHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraHdr
operator|!=
literal|null
condition|)
block|{
name|headers
index|[
literal|1
index|]
operator|=
name|extraHdr
expr_stmt|;
block|}
return|return
name|post
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Send a POST request    * @param path the path or URI    * @param headers the HTTP headers to include,<tt>Content-Type</tt> must be    * supplied    * @param content the content bytes    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|post
parameter_list|(
name|String
name|path
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|post
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
comment|/**    * Send a POST request    * @param cluster the cluster definition    * @param path the path or URI    * @param headers the HTTP headers to include,<tt>Content-Type</tt> must be    * supplied    * @param content the content bytes    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|post
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpPost
name|method
init|=
operator|new
name|HttpPost
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|method
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
argument_list|,
name|content
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|HttpResponse
name|resp
init|=
name|execute
argument_list|(
name|cluster
argument_list|,
name|method
argument_list|,
name|headers
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|headers
operator|=
name|resp
operator|.
name|getAllHeaders
argument_list|()
expr_stmt|;
name|content
operator|=
name|getResponseBody
argument_list|(
name|resp
argument_list|)
expr_stmt|;
return|return
operator|new
name|Response
argument_list|(
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
finally|finally
block|{
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Send a DELETE request    * @param path the path or URI    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|delete
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * Send a DELETE request    * @param path the path or URI    * @param extraHdr additional Header to send    * @return a Response object with response detail    * @throws IOException    */
specifier|public
name|Response
name|delete
parameter_list|(
name|String
name|path
parameter_list|,
name|Header
name|extraHdr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
name|extraHdr
argument_list|)
return|;
block|}
comment|/**    * Send a DELETE request    * @param cluster the cluster definition    * @param path the path or URI    * @return a Response object with response detail    * @throws IOException for error    */
specifier|public
name|Response
name|delete
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpDelete
name|method
init|=
operator|new
name|HttpDelete
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpResponse
name|resp
init|=
name|execute
argument_list|(
name|cluster
argument_list|,
name|method
argument_list|,
literal|null
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|Header
index|[]
name|headers
init|=
name|resp
operator|.
name|getAllHeaders
argument_list|()
decl_stmt|;
name|byte
index|[]
name|content
init|=
name|getResponseBody
argument_list|(
name|resp
argument_list|)
decl_stmt|;
return|return
operator|new
name|Response
argument_list|(
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
finally|finally
block|{
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Send a DELETE request    * @param cluster the cluster definition    * @param path the path or URI    * @return a Response object with response detail    * @throws IOException for error    */
specifier|public
name|Response
name|delete
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|String
name|path
parameter_list|,
name|Header
name|extraHdr
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpDelete
name|method
init|=
operator|new
name|HttpDelete
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|Header
index|[]
name|headers
init|=
block|{
name|extraHdr
block|}
decl_stmt|;
name|HttpResponse
name|resp
init|=
name|execute
argument_list|(
name|cluster
argument_list|,
name|method
argument_list|,
name|headers
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|headers
operator|=
name|resp
operator|.
name|getAllHeaders
argument_list|()
expr_stmt|;
name|byte
index|[]
name|content
init|=
name|getResponseBody
argument_list|(
name|resp
argument_list|)
decl_stmt|;
return|return
operator|new
name|Response
argument_list|(
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|headers
argument_list|,
name|content
argument_list|)
return|;
block|}
finally|finally
block|{
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

