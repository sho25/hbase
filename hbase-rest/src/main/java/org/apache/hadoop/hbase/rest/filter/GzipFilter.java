begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
class|class
name|GzipFilter
implements|implements
name|Filter
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|mimeTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|s
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"mimeTypes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|s
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|mimeTypes
operator|.
name|add
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|req
parameter_list|,
name|ServletResponse
name|rsp
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|req
decl_stmt|;
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|rsp
decl_stmt|;
name|String
name|contentEncoding
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"content-encoding"
argument_list|)
decl_stmt|;
name|String
name|acceptEncoding
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"accept-encoding"
argument_list|)
decl_stmt|;
name|String
name|contentType
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|contentEncoding
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|contentEncoding
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"gzip"
argument_list|)
operator|>
operator|-
literal|1
operator|)
condition|)
block|{
name|request
operator|=
operator|new
name|GZIPRequestWrapper
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|acceptEncoding
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|acceptEncoding
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"gzip"
argument_list|)
operator|>
operator|-
literal|1
operator|)
operator|)
operator|||
operator|(
operator|(
name|contentType
operator|!=
literal|null
operator|)
operator|&&
name|mimeTypes
operator|.
name|contains
argument_list|(
name|contentType
argument_list|)
operator|)
condition|)
block|{
name|response
operator|=
operator|new
name|GZIPResponseWrapper
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|GZIPResponseWrapper
condition|)
block|{
name|OutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|os
operator|instanceof
name|GZIPResponseStream
condition|)
block|{
operator|(
operator|(
name|GZIPResponseStream
operator|)
name|os
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

