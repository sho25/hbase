begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellSetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|RowModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ProtobufStreamingOutput
implements|implements
name|StreamingOutput
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProtobufStreamingOutput
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|contentType
decl_stmt|;
specifier|private
name|ResultScanner
name|resultScanner
decl_stmt|;
specifier|private
name|int
name|limit
decl_stmt|;
specifier|private
name|int
name|fetchSize
decl_stmt|;
specifier|protected
name|ProtobufStreamingOutput
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|fetchSize
parameter_list|)
block|{
name|this
operator|.
name|resultScanner
operator|=
name|scanner
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|fetchSize
operator|=
name|fetchSize
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Created StreamingOutput with content type = "
operator|+
name|this
operator|.
name|contentType
operator|+
literal|" user limit : "
operator|+
name|this
operator|.
name|limit
operator|+
literal|" scan fetch size : "
operator|+
name|this
operator|.
name|fetchSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|outStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|Result
index|[]
name|rowsToSend
decl_stmt|;
if|if
condition|(
name|limit
operator|<
name|fetchSize
condition|)
block|{
name|rowsToSend
operator|=
name|this
operator|.
name|resultScanner
operator|.
name|next
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|writeToStream
argument_list|(
name|createModelFromResults
argument_list|(
name|rowsToSend
argument_list|)
argument_list|,
name|this
operator|.
name|contentType
argument_list|,
name|outStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|count
init|=
name|limit
decl_stmt|;
while|while
condition|(
name|count
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|<
name|fetchSize
condition|)
block|{
name|rowsToSend
operator|=
name|this
operator|.
name|resultScanner
operator|.
name|next
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowsToSend
operator|=
name|this
operator|.
name|resultScanner
operator|.
name|next
argument_list|(
name|this
operator|.
name|fetchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rowsToSend
operator|.
name|length
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|count
operator|=
name|count
operator|-
name|rowsToSend
operator|.
name|length
expr_stmt|;
name|writeToStream
argument_list|(
name|createModelFromResults
argument_list|(
name|rowsToSend
argument_list|)
argument_list|,
name|this
operator|.
name|contentType
argument_list|,
name|outStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeToStream
parameter_list|(
name|CellSetModel
name|model
parameter_list|,
name|String
name|contentType
parameter_list|,
name|OutputStream
name|outStream
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|objectBytes
init|=
name|model
operator|.
name|createProtobufOutput
argument_list|()
decl_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
name|objectBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|objectBytes
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Wrote "
operator|+
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" rows to stream successfully."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|CellSetModel
name|createModelFromResults
parameter_list|(
name|Result
index|[]
name|results
parameter_list|)
block|{
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|rs
range|:
name|results
control|)
block|{
name|byte
index|[]
name|rowKey
init|=
name|rs
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|RowModel
name|rModel
init|=
operator|new
name|RowModel
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
name|rs
operator|.
name|listCells
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|kvs
control|)
block|{
name|rModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rModel
argument_list|)
expr_stmt|;
block|}
return|return
name|cellSetModel
return|;
block|}
block|}
end_class

end_unit

