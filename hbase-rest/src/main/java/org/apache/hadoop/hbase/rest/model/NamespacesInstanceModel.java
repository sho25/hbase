begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessOrder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorOrder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|ProtobufMessageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|NamespacePropertiesMessage
operator|.
name|NamespaceProperties
import|;
end_import

begin_comment
comment|/**  * List a HBase namespace's key/value properties.  *<ul>  *<li>NamespaceProperties: outer element</li>  *<li>properties: sequence property elements</li>  *<li>entry</li>  *<li>key: property key</li>  *<li>value: property value</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"NamespaceProperties"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
annotation|@
name|XmlAccessorOrder
argument_list|(
name|XmlAccessOrder
operator|.
name|ALPHABETICAL
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NamespacesInstanceModel
implements|implements
name|Serializable
implements|,
name|ProtobufMessageHandler
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|// JAX-RS automatically converts Map to XMLAnyElement.
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
literal|null
decl_stmt|;
annotation|@
name|XmlTransient
specifier|private
name|String
name|namespaceName
decl_stmt|;
comment|/**    * Default constructor. Do not use.    */
specifier|public
name|NamespacesInstanceModel
parameter_list|()
block|{}
comment|/**    * Constructor to use if namespace does not exist in HBASE.    * @param namespaceName the namespace name.    * @throws IOException    */
specifier|public
name|NamespacesInstanceModel
parameter_list|(
name|String
name|namespaceName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|namespaceName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param admin the administrative API    * @param namespaceName the namespace name.    * @throws IOException    */
specifier|public
name|NamespacesInstanceModel
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|namespaceName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|namespaceName
operator|=
name|namespaceName
expr_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|NamespaceDescriptor
name|nd
init|=
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|namespaceName
argument_list|)
decl_stmt|;
comment|// For properly formed JSON, if no properties, field has to be null (not just no elements).
if|if
condition|(
name|nd
operator|.
name|getConfiguration
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|nd
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add property to the namespace.    * @param key attribute name    * @param value attribute value    */
specifier|public
name|void
name|addProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return The map of uncategorized namespace properties.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|public
name|String
name|getNamespaceName
parameter_list|()
block|{
return|return
name|namespaceName
return|;
block|}
comment|/* (non-Javadoc)    * @see java.lang.Object#toString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{NAME => \'"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|namespaceName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" => '"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\'"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|createProtobufOutput
parameter_list|()
block|{
name|NamespaceProperties
operator|.
name|Builder
name|builder
init|=
name|NamespaceProperties
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|NamespaceProperties
operator|.
name|Property
operator|.
name|Builder
name|property
init|=
name|NamespaceProperties
operator|.
name|Property
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|property
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|property
operator|.
name|setValue
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addProps
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProtobufMessageHandler
name|getObjectFromMessage
parameter_list|(
name|byte
index|[]
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|NamespaceProperties
operator|.
name|Builder
name|builder
init|=
name|NamespaceProperties
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NamespaceProperties
operator|.
name|Property
argument_list|>
name|properties
init|=
name|builder
operator|.
name|getPropsList
argument_list|()
decl_stmt|;
for|for
control|(
name|NamespaceProperties
operator|.
name|Property
name|property
range|:
name|properties
control|)
block|{
name|addProperty
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|,
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

