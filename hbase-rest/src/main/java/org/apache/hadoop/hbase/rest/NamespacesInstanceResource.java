begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|NamespacesInstanceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|TableListModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|TableModel
import|;
end_import

begin_comment
comment|/**  * Implements the following REST end points:  *<p>  *<tt>/namespaces/{namespace} GET: get namespace properties.</tt>  *<tt>/namespaces/{namespace} POST: create namespace.</tt>  *<tt>/namespaces/{namespace} PUT: alter namespace.</tt>  *<tt>/namespaces/{namespace} DELETE: drop namespace.</tt>  *<tt>/namespaces/{namespace}/tables GET: list namespace's tables.</tt>  *<p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NamespacesInstanceResource
extends|extends
name|ResourceBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NamespacesInstanceResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|namespace
decl_stmt|;
name|boolean
name|queryTables
init|=
literal|false
decl_stmt|;
comment|/**    * Constructor for standard NamespaceInstanceResource.    * @throws IOException    */
specifier|public
name|NamespacesInstanceResource
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|namespace
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor for querying namespace table list via NamespaceInstanceResource.    * @throws IOException    */
specifier|public
name|NamespacesInstanceResource
parameter_list|(
name|String
name|namespace
parameter_list|,
name|boolean
name|queryTables
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|queryTables
operator|=
name|queryTables
expr_stmt|;
block|}
comment|/**    * Build a response for GET namespace description or GET list of namespace tables.    * @param context servlet context    * @param uriInfo (JAX-RS context variable) request URL    * @return A response containing NamespacesInstanceModel for a namespace descriptions and    * TableListModel for a list of namespace tables.    */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MIMETYPE_TEXT
block|,
name|MIMETYPE_XML
block|,
name|MIMETYPE_JSON
block|,
name|MIMETYPE_PROTOBUF
block|,
name|MIMETYPE_PROTOBUF_IETF
block|}
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
specifier|final
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"GET "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Respond to list of namespace tables requests.
if|if
condition|(
name|queryTables
condition|)
block|{
name|TableListModel
name|tableModel
init|=
operator|new
name|TableListModel
argument_list|()
decl_stmt|;
try|try
block|{
name|HTableDescriptor
index|[]
name|tables
init|=
name|servlet
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableModel
operator|.
name|add
argument_list|(
operator|new
name|TableModel
argument_list|(
name|tables
index|[
name|i
index|]
operator|.
name|getTableName
argument_list|()
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|tableModel
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot retrieve table list for '"
operator|+
name|namespace
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
comment|// Respond to namespace description requests.
try|try
block|{
name|NamespacesInstanceModel
name|rowModel
init|=
operator|new
name|NamespacesInstanceModel
argument_list|(
name|servlet
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|rowModel
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedGetRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot retrieve info for '"
operator|+
name|namespace
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Build a response for PUT alter namespace with properties specified.    * @param model properties used for alter.    * @param uriInfo (JAX-RS context variable) request URL    * @return response code.    */
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
block|{
name|MIMETYPE_XML
block|,
name|MIMETYPE_JSON
block|,
name|MIMETYPE_PROTOBUF
block|,
name|MIMETYPE_PROTOBUF_IETF
block|}
argument_list|)
specifier|public
name|Response
name|put
parameter_list|(
specifier|final
name|NamespacesInstanceModel
name|model
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"PUT "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|processUpdate
argument_list|(
name|model
argument_list|,
literal|true
argument_list|,
name|uriInfo
argument_list|)
return|;
block|}
comment|/**    * Build a response for PUT alter namespace with no properties specified.    * @param message value not used.    * @param headers value not used.    * @return response code.    */
annotation|@
name|PUT
specifier|public
name|Response
name|putNoBody
parameter_list|(
specifier|final
name|byte
index|[]
name|message
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
specifier|final
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"PUT "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|NamespacesInstanceModel
name|model
init|=
operator|new
name|NamespacesInstanceModel
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
return|return
name|processUpdate
argument_list|(
name|model
argument_list|,
literal|true
argument_list|,
name|uriInfo
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot retrieve info for '"
operator|+
name|namespace
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Build a response for POST create namespace with properties specified.    * @param model properties used for create.    * @param uriInfo (JAX-RS context variable) request URL    * @return response code.    */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MIMETYPE_XML
block|,
name|MIMETYPE_JSON
block|,
name|MIMETYPE_PROTOBUF
block|,
name|MIMETYPE_PROTOBUF_IETF
block|}
argument_list|)
specifier|public
name|Response
name|post
parameter_list|(
specifier|final
name|NamespacesInstanceModel
name|model
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"POST "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|processUpdate
argument_list|(
name|model
argument_list|,
literal|false
argument_list|,
name|uriInfo
argument_list|)
return|;
block|}
comment|/**    * Build a response for POST create namespace with no properties specified.    * @param message value not used.    * @param headers value not used.    * @return response code.    */
annotation|@
name|POST
specifier|public
name|Response
name|postNoBody
parameter_list|(
specifier|final
name|byte
index|[]
name|message
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
specifier|final
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"POST "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|NamespacesInstanceModel
name|model
init|=
operator|new
name|NamespacesInstanceModel
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
return|return
name|processUpdate
argument_list|(
name|model
argument_list|,
literal|false
argument_list|,
name|uriInfo
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot retrieve info for '"
operator|+
name|namespace
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
comment|// Check that POST or PUT is valid and then update namespace.
specifier|private
name|Response
name|processUpdate
parameter_list|(
specifier|final
name|NamespacesInstanceModel
name|model
parameter_list|,
specifier|final
name|boolean
name|updateExisting
parameter_list|,
specifier|final
name|UriInfo
name|uriInfo
parameter_list|)
block|{
if|if
condition|(
name|servlet
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Forbidden"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Admin
name|admin
init|=
literal|null
decl_stmt|;
name|boolean
name|namespaceExists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|admin
operator|=
name|servlet
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|namespaceExists
operator|=
name|doesNamespaceExist
argument_list|(
name|admin
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|processException
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|// Do not allow creation if namespace already exists.
if|if
condition|(
operator|!
name|updateExisting
operator|&&
name|namespaceExists
condition|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Namespace '"
operator|+
name|namespace
operator|+
literal|"' already exists.  Use REST PUT "
operator|+
literal|"to alter the existing namespace."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Do not allow altering if namespace does not exist.
if|if
condition|(
name|updateExisting
operator|&&
operator|!
name|namespaceExists
condition|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Namespace '"
operator|+
name|namespace
operator|+
literal|"' does not exist. Use "
operator|+
literal|"REST POST to create the namespace."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|createOrUpdate
argument_list|(
name|model
argument_list|,
name|uriInfo
argument_list|,
name|admin
argument_list|,
name|updateExisting
argument_list|)
return|;
block|}
comment|// Do the actual namespace create or alter.
specifier|private
name|Response
name|createOrUpdate
parameter_list|(
specifier|final
name|NamespacesInstanceModel
name|model
parameter_list|,
specifier|final
name|UriInfo
name|uriInfo
parameter_list|,
specifier|final
name|Admin
name|admin
parameter_list|,
specifier|final
name|boolean
name|updateExisting
parameter_list|)
block|{
name|NamespaceDescriptor
operator|.
name|Builder
name|builder
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addConfiguration
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addConfiguration
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NamespaceDescriptor
name|nsd
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|updateExisting
condition|)
block|{
name|admin
operator|.
name|modifyNamespace
argument_list|(
name|nsd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|nsd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|processException
argument_list|(
name|e
argument_list|)
return|;
block|}
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulPutRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|doesNamespaceExist
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|namespaceName
parameter_list|)
throws|throws
name|IOException
block|{
name|NamespaceDescriptor
index|[]
name|nd
init|=
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nd
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nd
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Build a response for DELETE delete namespace.    * @param message value not used.    * @param headers value not used.    * @return response code.    */
annotation|@
name|DELETE
specifier|public
name|Response
name|deleteNoBody
parameter_list|(
specifier|final
name|byte
index|[]
name|message
parameter_list|,
specifier|final
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
specifier|final
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"DELETE "
operator|+
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|servlet
operator|.
name|isReadOnly
argument_list|()
condition|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedDeleteRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Forbidden"
operator|+
name|CRLF
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
try|try
block|{
name|Admin
name|admin
init|=
name|servlet
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doesNamespaceExist
argument_list|(
name|admin
argument_list|,
name|namespace
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|type
argument_list|(
name|MIMETYPE_TEXT
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Namespace '"
operator|+
name|namespace
operator|+
literal|"' does not exists.  Cannot "
operator|+
literal|"drop namespace."
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementSucessfulDeleteRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|servlet
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrementFailedDeleteRequests
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|processException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**    * Dispatch to NamespaceInstanceResource for getting list of tables.    */
annotation|@
name|Path
argument_list|(
literal|"tables"
argument_list|)
specifier|public
name|NamespacesInstanceResource
name|getNamespaceInstanceResource
parameter_list|(
specifier|final
annotation|@
name|PathParam
argument_list|(
literal|"tables"
argument_list|)
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|NamespacesInstanceResource
argument_list|(
name|this
operator|.
name|namespace
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

