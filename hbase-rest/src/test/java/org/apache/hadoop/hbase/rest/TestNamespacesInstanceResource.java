begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|NamespacesInstanceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|TableListModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|TableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|TestNamespacesInstanceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|provider
operator|.
name|JacksonProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RestTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RestTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestNamespacesInstanceResource
block|{
specifier|private
specifier|static
name|String
name|NAMESPACE1
init|=
literal|"TestNamespacesInstanceResource1"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|NAMESPACE1_PROPS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|NAMESPACE2
init|=
literal|"TestNamespacesInstanceResource2"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|NAMESPACE2_PROPS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|NAMESPACE3
init|=
literal|"TestNamespacesInstanceResource3"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|NAMESPACE3_PROPS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|NAMESPACE4
init|=
literal|"TestNamespacesInstanceResource4"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|NAMESPACE4_PROPS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseRESTTestingUtility
name|REST_TEST_UTIL
init|=
operator|new
name|HBaseRESTTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Client
name|client
decl_stmt|;
specifier|private
specifier|static
name|JAXBContext
name|context
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|TestNamespacesInstanceModel
name|testNamespacesInstanceModel
decl_stmt|;
specifier|protected
specifier|static
name|ObjectMapper
name|jsonMapper
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|REST_TEST_UTIL
operator|.
name|startServletContainer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|Client
argument_list|(
operator|new
name|Cluster
argument_list|()
operator|.
name|add
argument_list|(
literal|"localhost"
argument_list|,
name|REST_TEST_UTIL
operator|.
name|getServletPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testNamespacesInstanceModel
operator|=
operator|new
name|TestNamespacesInstanceModel
argument_list|()
expr_stmt|;
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|NamespacesInstanceModel
operator|.
name|class
argument_list|,
name|TableListModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|jsonMapper
operator|=
operator|new
name|JacksonProvider
argument_list|()
operator|.
name|locateMapper
argument_list|(
name|NamespacesInstanceModel
operator|.
name|class
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
expr_stmt|;
name|NAMESPACE1_PROPS
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|NAMESPACE2_PROPS
operator|.
name|put
argument_list|(
literal|"key2a"
argument_list|,
literal|"value2a"
argument_list|)
expr_stmt|;
name|NAMESPACE2_PROPS
operator|.
name|put
argument_list|(
literal|"key2b"
argument_list|,
literal|"value2b"
argument_list|)
expr_stmt|;
name|NAMESPACE3_PROPS
operator|.
name|put
argument_list|(
literal|"key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|NAMESPACE4_PROPS
operator|.
name|put
argument_list|(
literal|"key4a"
argument_list|,
literal|"value4a"
argument_list|)
expr_stmt|;
name|NAMESPACE4_PROPS
operator|.
name|put
argument_list|(
literal|"key4b"
argument_list|,
literal|"value4b"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|REST_TEST_UTIL
operator|.
name|shutdownServletContainer
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|toXML
parameter_list|(
name|NamespacesInstanceModel
name|model
parameter_list|)
throws|throws
name|JAXBException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|context
operator|.
name|createMarshaller
argument_list|()
operator|.
name|marshal
argument_list|(
name|model
argument_list|,
name|writer
argument_list|)
expr_stmt|;
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|fromXML
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|JAXBException
block|{
return|return
operator|(
name|T
operator|)
name|context
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|NamespaceDescriptor
name|findNamespace
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|namespaceName
parameter_list|)
throws|throws
name|IOException
block|{
name|NamespaceDescriptor
index|[]
name|nd
init|=
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nd
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nd
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceName
argument_list|)
condition|)
block|{
return|return
name|nd
index|[
name|i
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkNamespaceProperties
parameter_list|(
name|NamespaceDescriptor
name|nd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testProps
parameter_list|)
block|{
name|checkNamespaceProperties
argument_list|(
name|nd
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|testProps
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNamespaceProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceProps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testProps
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|namespaceProps
operator|.
name|size
argument_list|()
operator|==
name|testProps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|testProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|testProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|namespaceProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkNamespaceTables
parameter_list|(
name|List
argument_list|<
name|TableModel
argument_list|>
name|namespaceTables
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|testTables
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|namespaceTables
operator|.
name|size
argument_list|()
argument_list|,
name|testTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namespaceTables
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|tableName
init|=
operator|(
operator|(
name|TableModel
operator|)
name|namespaceTables
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testTables
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCannotDeleteDefaultAndHbaseNamespaces
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|defaultPath
init|=
literal|"/namespaces/default"
decl_stmt|;
name|String
name|hbasePath
init|=
literal|"/namespaces/hbase"
decl_stmt|;
name|Response
name|response
decl_stmt|;
comment|// Check that doesn't exist via non-REST call.
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
literal|"hbase"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try (but fail) to delete namespaces via REST.
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|defaultPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|503
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|hbasePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|503
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
literal|"hbase"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamespaceTablesAndCannotDeleteNamespace
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|String
name|nsName
init|=
literal|"TestNamespacesInstanceResource5"
decl_stmt|;
name|Response
name|response
decl_stmt|;
comment|// Create namespace via admin.
name|NamespaceDescriptor
operator|.
name|Builder
name|nsBuilder
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsName
argument_list|)
decl_stmt|;
name|NamespaceDescriptor
name|nsd
init|=
name|nsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|nsd
operator|.
name|setConfiguration
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nsd
argument_list|)
expr_stmt|;
comment|// Create two tables via admin.
name|HColumnDescriptor
name|colDesc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|TableName
name|tn1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsName
operator|+
literal|":table1"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|table
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tn1
argument_list|)
decl_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|TableName
name|tn2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsName
operator|+
literal|":table2"
argument_list|)
decl_stmt|;
name|table
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|tn2
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nsProperties
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nsTables
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"table1"
argument_list|,
literal|"table2"
argument_list|)
decl_stmt|;
comment|// Check get namespace properties as XML, JSON and Protobuf.
name|String
name|namespacePath
init|=
literal|"/namespaces/"
operator|+
name|nsName
decl_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|namespacePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|namespacePath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|NamespacesInstanceModel
name|model
init|=
name|fromXML
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
name|checkNamespaceProperties
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|,
name|nsProperties
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|namespacePath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|=
name|jsonMapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|,
name|NamespacesInstanceModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkNamespaceProperties
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|,
name|nsProperties
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|namespacePath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|getObjectFromMessage
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|checkNamespaceProperties
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|,
name|nsProperties
argument_list|)
expr_stmt|;
comment|// Check get namespace tables as XML, JSON and Protobuf.
name|namespacePath
operator|=
literal|"/namespaces/"
operator|+
name|nsName
operator|+
literal|"/tables"
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|namespacePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|namespacePath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|TableListModel
name|tablemodel
init|=
name|fromXML
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
name|checkNamespaceTables
argument_list|(
name|tablemodel
operator|.
name|getTables
argument_list|()
argument_list|,
name|nsTables
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|namespacePath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|tablemodel
operator|=
name|jsonMapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|,
name|TableListModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkNamespaceTables
argument_list|(
name|tablemodel
operator|.
name|getTables
argument_list|()
argument_list|,
name|nsTables
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|namespacePath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|tablemodel
operator|.
name|setTables
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|TableModel
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tablemodel
operator|.
name|getObjectFromMessage
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|checkNamespaceTables
argument_list|(
name|tablemodel
operator|.
name|getTables
argument_list|()
argument_list|,
name|nsTables
argument_list|)
expr_stmt|;
comment|// Check cannot delete namespace via REST because it contains tables.
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath
argument_list|)
expr_stmt|;
name|namespacePath
operator|=
literal|"/namespaces/"
operator|+
name|nsName
expr_stmt|;
name|assertEquals
argument_list|(
literal|503
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidNamespacePostsAndPuts
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|namespacePath1
init|=
literal|"/namespaces/"
operator|+
name|NAMESPACE1
decl_stmt|;
name|String
name|namespacePath2
init|=
literal|"/namespaces/"
operator|+
name|NAMESPACE2
decl_stmt|;
name|String
name|namespacePath3
init|=
literal|"/namespaces/"
operator|+
name|NAMESPACE3
decl_stmt|;
name|NamespacesInstanceModel
name|model1
decl_stmt|;
name|NamespacesInstanceModel
name|model2
decl_stmt|;
name|NamespacesInstanceModel
name|model3
decl_stmt|;
name|Response
name|response
decl_stmt|;
comment|// Check that namespaces don't exist via non-REST call.
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE3
argument_list|)
argument_list|)
expr_stmt|;
name|model1
operator|=
name|testNamespacesInstanceModel
operator|.
name|buildTestModel
argument_list|(
name|NAMESPACE1
argument_list|,
name|NAMESPACE1_PROPS
argument_list|)
expr_stmt|;
name|testNamespacesInstanceModel
operator|.
name|checkModel
argument_list|(
name|model1
argument_list|,
name|NAMESPACE1
argument_list|,
name|NAMESPACE1_PROPS
argument_list|)
expr_stmt|;
name|model2
operator|=
name|testNamespacesInstanceModel
operator|.
name|buildTestModel
argument_list|(
name|NAMESPACE2
argument_list|,
name|NAMESPACE2_PROPS
argument_list|)
expr_stmt|;
name|testNamespacesInstanceModel
operator|.
name|checkModel
argument_list|(
name|model2
argument_list|,
name|NAMESPACE2
argument_list|,
name|NAMESPACE2_PROPS
argument_list|)
expr_stmt|;
name|model3
operator|=
name|testNamespacesInstanceModel
operator|.
name|buildTestModel
argument_list|(
name|NAMESPACE3
argument_list|,
name|NAMESPACE3_PROPS
argument_list|)
expr_stmt|;
name|testNamespacesInstanceModel
operator|.
name|checkModel
argument_list|(
name|model3
argument_list|,
name|NAMESPACE3
argument_list|,
name|NAMESPACE3_PROPS
argument_list|)
expr_stmt|;
comment|// Try REST post and puts with invalid content.
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath1
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|toXML
argument_list|(
name|model1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jsonString
init|=
name|jsonMapper
operator|.
name|writeValueAsString
argument_list|(
name|model2
argument_list|)
decl_stmt|;
name|response
operator|=
name|client
operator|.
name|put
argument_list|(
name|namespacePath2
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|jsonString
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath3
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|toXML
argument_list|(
name|model1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|NamespaceDescriptor
name|nd1
init|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE1
argument_list|)
decl_stmt|;
name|NamespaceDescriptor
name|nd2
init|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE2
argument_list|)
decl_stmt|;
name|NamespaceDescriptor
name|nd3
init|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE3
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nd1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceCreateAndDeleteXMLAndJSON
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|namespacePath1
init|=
literal|"/namespaces/"
operator|+
name|NAMESPACE1
decl_stmt|;
name|String
name|namespacePath2
init|=
literal|"/namespaces/"
operator|+
name|NAMESPACE2
decl_stmt|;
name|NamespacesInstanceModel
name|model1
decl_stmt|;
name|NamespacesInstanceModel
name|model2
decl_stmt|;
name|Response
name|response
decl_stmt|;
comment|// Check that namespaces don't exist via non-REST call.
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE2
argument_list|)
argument_list|)
expr_stmt|;
name|model1
operator|=
name|testNamespacesInstanceModel
operator|.
name|buildTestModel
argument_list|(
name|NAMESPACE1
argument_list|,
name|NAMESPACE1_PROPS
argument_list|)
expr_stmt|;
name|testNamespacesInstanceModel
operator|.
name|checkModel
argument_list|(
name|model1
argument_list|,
name|NAMESPACE1
argument_list|,
name|NAMESPACE1_PROPS
argument_list|)
expr_stmt|;
name|model2
operator|=
name|testNamespacesInstanceModel
operator|.
name|buildTestModel
argument_list|(
name|NAMESPACE2
argument_list|,
name|NAMESPACE2_PROPS
argument_list|)
expr_stmt|;
name|testNamespacesInstanceModel
operator|.
name|checkModel
argument_list|(
name|model2
argument_list|,
name|NAMESPACE2
argument_list|,
name|NAMESPACE2_PROPS
argument_list|)
expr_stmt|;
comment|// Test cannot PUT (alter) non-existent namespace.
name|response
operator|=
name|client
operator|.
name|put
argument_list|(
name|namespacePath1
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|toXML
argument_list|(
name|model1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jsonString
init|=
name|jsonMapper
operator|.
name|writeValueAsString
argument_list|(
name|model2
argument_list|)
decl_stmt|;
name|response
operator|=
name|client
operator|.
name|put
argument_list|(
name|namespacePath2
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|jsonString
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test cannot create tables when in read only mode.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath1
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|toXML
argument_list|(
name|model1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|jsonString
operator|=
name|jsonMapper
operator|.
name|writeValueAsString
argument_list|(
name|model2
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath2
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|jsonString
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|NamespaceDescriptor
name|nd1
init|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE1
argument_list|)
decl_stmt|;
name|NamespaceDescriptor
name|nd2
init|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE2
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nd1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// Create namespace via XML and JSON.
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath1
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|toXML
argument_list|(
name|model1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|jsonString
operator|=
name|jsonMapper
operator|.
name|writeValueAsString
argument_list|(
name|model2
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath2
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|jsonString
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that created namespaces correctly.
name|nd1
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE1
argument_list|)
expr_stmt|;
name|nd2
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd2
argument_list|)
expr_stmt|;
name|checkNamespaceProperties
argument_list|(
name|nd1
argument_list|,
name|NAMESPACE1_PROPS
argument_list|)
expr_stmt|;
name|checkNamespaceProperties
argument_list|(
name|nd1
argument_list|,
name|NAMESPACE1_PROPS
argument_list|)
expr_stmt|;
comment|// Test cannot delete tables when in read only mode.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|nd1
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE1
argument_list|)
expr_stmt|;
name|nd2
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// Delete namespaces via XML and JSON.
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|nd1
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE1
argument_list|)
expr_stmt|;
name|nd2
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceCreateAndDeletePBAndNoBody
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|namespacePath3
init|=
literal|"/namespaces/"
operator|+
name|NAMESPACE3
decl_stmt|;
name|String
name|namespacePath4
init|=
literal|"/namespaces/"
operator|+
name|NAMESPACE4
decl_stmt|;
name|NamespacesInstanceModel
name|model3
decl_stmt|;
name|NamespacesInstanceModel
name|model4
decl_stmt|;
name|Response
name|response
decl_stmt|;
comment|// Check that namespaces don't exist via non-REST call.
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE4
argument_list|)
argument_list|)
expr_stmt|;
name|model3
operator|=
name|testNamespacesInstanceModel
operator|.
name|buildTestModel
argument_list|(
name|NAMESPACE3
argument_list|,
name|NAMESPACE3_PROPS
argument_list|)
expr_stmt|;
name|testNamespacesInstanceModel
operator|.
name|checkModel
argument_list|(
name|model3
argument_list|,
name|NAMESPACE3
argument_list|,
name|NAMESPACE3_PROPS
argument_list|)
expr_stmt|;
name|model4
operator|=
name|testNamespacesInstanceModel
operator|.
name|buildTestModel
argument_list|(
name|NAMESPACE4
argument_list|,
name|NAMESPACE4_PROPS
argument_list|)
expr_stmt|;
name|testNamespacesInstanceModel
operator|.
name|checkModel
argument_list|(
name|model4
argument_list|,
name|NAMESPACE4
argument_list|,
name|NAMESPACE4_PROPS
argument_list|)
expr_stmt|;
comment|// Test cannot PUT (alter) non-existent namespace.
name|response
operator|=
name|client
operator|.
name|put
argument_list|(
name|namespacePath3
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|put
argument_list|(
name|namespacePath4
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model4
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test cannot create tables when in read only mode.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath3
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|put
argument_list|(
name|namespacePath4
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model4
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|NamespaceDescriptor
name|nd3
init|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE3
argument_list|)
decl_stmt|;
name|NamespaceDescriptor
name|nd4
init|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE4
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nd3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// Create namespace via no body and protobuf.
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath3
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath4
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model4
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that created namespaces correctly.
name|nd3
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE3
argument_list|)
expr_stmt|;
name|nd4
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE4
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd3
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd4
argument_list|)
expr_stmt|;
name|checkNamespaceProperties
argument_list|(
name|nd3
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|checkNamespaceProperties
argument_list|(
name|nd4
argument_list|,
name|NAMESPACE4_PROPS
argument_list|)
expr_stmt|;
comment|// Check cannot post tables that already exist.
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath3
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|post
argument_list|(
name|namespacePath4
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|model4
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check cannot post tables when in read only mode.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|403
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|nd3
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE3
argument_list|)
expr_stmt|;
name|nd4
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE4
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd3
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// Delete namespaces via XML and JSON.
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|namespacePath4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|nd3
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE3
argument_list|)
expr_stmt|;
name|nd4
operator|=
name|findNamespace
argument_list|(
name|admin
argument_list|,
name|NAMESPACE4
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nd4
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

