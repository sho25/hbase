begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilityFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellSetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|RowModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
operator|.
name|MetricsAssertHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RestTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RestTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestGetAndPutResource
extends|extends
name|RowResourceBase
block|{
specifier|private
specifier|static
specifier|final
name|MetricsAssertHelper
name|METRICS_ASSERT
init|=
name|CompatibilityFactory
operator|.
name|getInstance
argument_list|(
name|MetricsAssertHelper
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testForbidden
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndPutValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndPutValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteValue
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndDeletePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|403
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rest.readonly"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndPutValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndPutValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteValue
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleCellGetPutXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Response
name|response
init|=
name|getValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndPutValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndDeleteXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleCellGetPutPB
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Response
name|response
init|=
name|getValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndPutValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndPutValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|,
name|VALUE_4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_4
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleCellCheckPutPB
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Response
name|response
init|=
name|getValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// Add 2 Columns to setup the test
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherCells
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|otherCells
operator|.
name|put
argument_list|(
name|COLUMN_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
comment|// On Success update both the cells
name|response
operator|=
name|checkAndPutValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|,
name|VALUE_3
argument_list|,
name|otherCells
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
comment|// On Failure, we dont update any cells
name|response
operator|=
name|checkAndPutValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|,
name|VALUE_4
argument_list|,
name|otherCells
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|304
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleCellCheckPutXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Response
name|response
init|=
name|getValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// Add 2 Columns to setup the test
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherCells
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|otherCells
operator|.
name|put
argument_list|(
name|COLUMN_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
comment|// On Success update both the cells
name|response
operator|=
name|checkAndPutValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|,
name|VALUE_3
argument_list|,
name|otherCells
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
comment|// On Failure, we dont update any cells
name|response
operator|=
name|checkAndPutValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|,
name|VALUE_4
argument_list|,
name|otherCells
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|304
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleCellCheckDeletePB
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Response
name|response
init|=
name|getValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// Add 3 Columns to setup the test
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_3
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_3
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
comment|// Deletes the following columns based on Column1 check
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cellsToDelete
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cellsToDelete
operator|.
name|put
argument_list|(
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
comment|// Value does not matter
name|cellsToDelete
operator|.
name|put
argument_list|(
name|COLUMN_3
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
comment|// Value does not matter
comment|// On Success update both the cells
name|response
operator|=
name|checkAndDeletePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|,
name|cellsToDelete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|response
operator|=
name|getValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
name|response
operator|=
name|getValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_3
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_3
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
comment|// On Failure, we dont update any cells
name|response
operator|=
name|checkAndDeletePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|,
name|cellsToDelete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|304
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_3
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleCellGetPutBinary
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_3
operator|+
literal|"/"
operator|+
name|COLUMN_1
decl_stmt|;
specifier|final
name|byte
index|[]
name|body
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_3
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|,
name|body
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|foundTimestampHeader
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|response
operator|.
name|getHeaders
argument_list|()
control|)
block|{
if|if
condition|(
name|header
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"X-Timestamp"
argument_list|)
condition|)
block|{
name|foundTimestampHeader
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|foundTimestampHeader
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleCellGetJSON
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
specifier|final
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_4
operator|+
literal|"/"
operator|+
name|COLUMN_1
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_4
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLatestCellGetJSON
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
specifier|final
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_4
operator|+
literal|"/"
operator|+
name|COLUMN_1
decl_stmt|;
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_4
argument_list|)
decl_stmt|;
name|CellModel
name|cellOne
init|=
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
decl_stmt|;
name|CellModel
name|cellTwo
init|=
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_2
argument_list|)
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
name|cellOne
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
name|cellTwo
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|String
name|jsonString
init|=
name|jsonMapper
operator|.
name|writeValueAsString
argument_list|(
name|cellSetModel
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|jsonString
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|CellSetModel
name|cellSet
init|=
name|jsonMapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|,
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|CellModel
name|cell
init|=
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|VALUE_2
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testURLEncodedKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|urlKey
init|=
literal|"http://example.com/foo"
decl_stmt|;
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|path
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|urlKey
argument_list|,
name|HConstants
operator|.
name|UTF8_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|Response
name|response
decl_stmt|;
name|response
operator|=
name|putValueXML
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|TABLE
argument_list|,
name|urlKey
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|TABLE
argument_list|,
name|urlKey
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoSuchCF
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
specifier|final
name|String
name|goodPath
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_1
operator|+
literal|"/"
operator|+
name|CFA
operator|+
literal|":"
decl_stmt|;
specifier|final
name|String
name|badPath
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_1
operator|+
literal|"/"
operator|+
literal|"BAD"
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|post
argument_list|(
name|goodPath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|get
argument_list|(
name|goodPath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|get
argument_list|(
name|badPath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|get
argument_list|(
name|goodPath
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiCellGetPutXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/fakerow"
decl_stmt|;
comment|// deliberate nonexistent row
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|rowModel
operator|=
operator|new
name|RowModel
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xmlMarshaller
operator|.
name|marshal
argument_list|(
name|cellSetModel
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// make sure the fake row was not actually created
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// check that all of the values were created
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_4
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiCellGetPutPB
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/fakerow"
decl_stmt|;
comment|// deliberate nonexistent row
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|rowModel
operator|=
operator|new
name|RowModel
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|cellSetModel
operator|.
name|createProtobufOutput
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// make sure the fake row was not actually created
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// check that all of the values were created
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|checkValuePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_4
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartEndRowGetPutXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
index|[]
name|rows
init|=
block|{
name|ROW_1
block|,
name|ROW_2
block|,
name|ROW_3
block|}
decl_stmt|;
name|String
index|[]
name|values
init|=
block|{
name|VALUE_1
block|,
name|VALUE_2
block|,
name|VALUE_3
block|}
decl_stmt|;
name|Response
name|response
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|rows
index|[
name|i
index|]
argument_list|,
name|COLUMN_1
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|rows
index|[
name|i
index|]
argument_list|,
name|COLUMN_1
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|getValueXML
argument_list|(
name|TABLE
argument_list|,
name|rows
index|[
literal|0
index|]
argument_list|,
name|rows
index|[
literal|2
index|]
argument_list|,
name|COLUMN_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|CellSetModel
name|cellSet
init|=
operator|(
name|CellSetModel
operator|)
name|xmlUnmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|RowModel
name|rowModel
init|=
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|CellModel
name|cell
range|:
name|rowModel
operator|.
name|getCells
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|COLUMN_1
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|row
range|:
name|rows
control|)
block|{
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidCheckParam
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xmlMarshaller
operator|.
name|marshal
argument_list|(
name|cellSetModel
argument_list|,
name|writer
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_1
operator|+
literal|"/"
operator|+
name|COLUMN_1
operator|+
literal|"?check=blah"
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidColumnPut
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|dummyColumn
init|=
literal|"doesnot:exist"
decl_stmt|;
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|dummyColumn
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xmlMarshaller
operator|.
name|marshal
argument_list|(
name|cellSetModel
argument_list|,
name|writer
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_1
operator|+
literal|"/"
operator|+
name|dummyColumn
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiCellGetJson
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/fakerow"
decl_stmt|;
comment|// deliberate nonexistent row
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|rowModel
operator|=
operator|new
name|RowModel
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|String
name|jsonString
init|=
name|jsonMapper
operator|.
name|writeValueAsString
argument_list|(
name|cellSetModel
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|jsonString
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// make sure the fake row was not actually created
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// check that all of the values were created
name|checkValueJSON
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|checkValueJSON
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|checkValueJSON
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_3
argument_list|)
expr_stmt|;
name|checkValueJSON
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_4
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetrics
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
specifier|final
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_4
operator|+
literal|"/"
operator|+
name|COLUMN_1
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_BINARY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_4
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|UserProvider
name|userProvider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|METRICS_ASSERT
operator|.
name|assertCounterGt
argument_list|(
literal|"requests"
argument_list|,
literal|2l
argument_list|,
name|RESTServlet
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|METRICS_ASSERT
operator|.
name|assertCounterGt
argument_list|(
literal|"successfulGet"
argument_list|,
literal|0l
argument_list|,
name|RESTServlet
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|METRICS_ASSERT
operator|.
name|assertCounterGt
argument_list|(
literal|"successfulPut"
argument_list|,
literal|0l
argument_list|,
name|RESTServlet
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|METRICS_ASSERT
operator|.
name|assertCounterGt
argument_list|(
literal|"successfulDelete"
argument_list|,
literal|0l
argument_list|,
name|RESTServlet
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiColumnGetXML
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/fakerow"
decl_stmt|;
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_3
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xmlMarshaller
operator|.
name|marshal
argument_list|(
name|cellSetModel
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// make sure the fake row was not actually created
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// Try getting all the column values at once.
name|path
operator|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/"
operator|+
name|ROW_1
operator|+
literal|"/"
operator|+
name|COLUMN_1
operator|+
literal|","
operator|+
name|COLUMN_2
operator|+
literal|","
operator|+
name|COLUMN_3
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|CellSetModel
name|cellSet
init|=
operator|(
name|CellSetModel
operator|)
name|xmlUnmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CellModel
argument_list|>
name|cells
init|=
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|containsCellModel
argument_list|(
name|cells
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containsCellModel
argument_list|(
name|cells
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containsCellModel
argument_list|(
name|cells
argument_list|,
name|COLUMN_3
argument_list|,
name|VALUE_2
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|containsCellModel
parameter_list|(
name|List
argument_list|<
name|CellModel
argument_list|>
name|cells
parameter_list|,
name|String
name|column
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CellModel
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|column
argument_list|)
operator|&&
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
return|return
name|contains
return|;
block|}
block|}
return|return
name|contains
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuffixGlobbingXMLWithNewScanner
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/fakerow"
decl_stmt|;
comment|// deliberate nonexistent row
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|rowModel
operator|=
operator|new
name|RowModel
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xmlMarshaller
operator|.
name|marshal
argument_list|(
name|cellSetModel
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// make sure the fake row was not actually created
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// check that all of the values were created
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"testrow*"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|CellSetModel
name|cellSet
init|=
operator|(
name|CellSetModel
operator|)
name|xmlUnmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuffixGlobbingXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/fakerow"
decl_stmt|;
comment|// deliberate nonexistent row
name|CellSetModel
name|cellSetModel
init|=
operator|new
name|CellSetModel
argument_list|()
decl_stmt|;
name|RowModel
name|rowModel
init|=
operator|new
name|RowModel
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|rowModel
operator|=
operator|new
name|RowModel
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowModel
operator|.
name|addCell
argument_list|(
operator|new
name|CellModel
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VALUE_4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cellSetModel
operator|.
name|addRow
argument_list|(
name|rowModel
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|xmlMarshaller
operator|.
name|marshal
argument_list|(
name|cellSetModel
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// make sure the fake row was not actually created
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|// check that all of the values were created
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"testrow*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|CellSetModel
name|cellSet
init|=
operator|(
name|CellSetModel
operator|)
name|xmlUnmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RowModel
argument_list|>
name|rows
init|=
name|cellSet
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rows
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|RowModel
name|row
range|:
name|rows
control|)
block|{
name|assertTrue
argument_list|(
name|row
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COLUMN_1
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|row
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

