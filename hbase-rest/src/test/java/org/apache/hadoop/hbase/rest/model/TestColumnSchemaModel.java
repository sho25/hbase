begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RestTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RestTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestColumnSchemaModel
extends|extends
name|TestModelBase
argument_list|<
name|ColumnSchemaModel
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|COLUMN_NAME
init|=
literal|"testcolumn"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|BLOCKCACHE
init|=
literal|true
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|16384
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|BLOOMFILTER
init|=
literal|"NONE"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|COMPRESSION
init|=
literal|"GZ"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|IN_MEMORY
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|TTL
init|=
literal|86400
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|VERSIONS
init|=
literal|1
decl_stmt|;
specifier|public
name|TestColumnSchemaModel
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|ColumnSchemaModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|AS_XML
operator|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><ColumnSchema "
operator|+
literal|"name=\"testcolumn\" BLOCKSIZE=\"16384\" BLOOMFILTER=\"NONE\" BLOCKCACHE=\"true\" "
operator|+
literal|"COMPRESSION=\"GZ\" VERSIONS=\"1\" TTL=\"86400\" IN_MEMORY=\"false\"/>"
expr_stmt|;
name|AS_JSON
operator|=
literal|"{\"name\":\"testcolumn\",\"BLOCKSIZE\":\"16384\",\"BLOOMFILTER\":\"NONE\","
operator|+
literal|"\"BLOCKCACHE\":\"true\",\"COMPRESSION\":\"GZ\",\"VERSIONS\":\"1\","
operator|+
literal|"\"TTL\":\"86400\",\"IN_MEMORY\":\"false\"}"
expr_stmt|;
block|}
specifier|protected
name|ColumnSchemaModel
name|buildTestModel
parameter_list|()
block|{
name|ColumnSchemaModel
name|model
init|=
operator|new
name|ColumnSchemaModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|COLUMN_NAME
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setBlocksize
argument_list|(
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setBloomfilter
argument_list|(
name|BLOOMFILTER
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setBlockcache
argument_list|(
name|BLOCKCACHE
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setCompression
argument_list|(
name|COMPRESSION
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setVersions
argument_list|(
name|VERSIONS
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setTTL
argument_list|(
name|TTL
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setInMemory
argument_list|(
name|IN_MEMORY
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|protected
name|void
name|checkModel
parameter_list|(
name|ColumnSchemaModel
name|model
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|COLUMN_NAME
argument_list|,
name|model
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"block cache"
argument_list|,
name|BLOCKCACHE
argument_list|,
name|model
operator|.
name|__getBlockcache
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"block size"
argument_list|,
name|BLOCKSIZE
argument_list|,
name|model
operator|.
name|__getBlocksize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bloomfilter"
argument_list|,
name|BLOOMFILTER
argument_list|,
name|model
operator|.
name|__getBloomfilter
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"compression"
argument_list|,
name|model
operator|.
name|__getCompression
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|COMPRESSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in memory"
argument_list|,
name|IN_MEMORY
argument_list|,
name|model
operator|.
name|__getInMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ttl"
argument_list|,
name|TTL
argument_list|,
name|model
operator|.
name|__getTTL
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"versions"
argument_list|,
name|VERSIONS
argument_list|,
name|model
operator|.
name|__getVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromPB
parameter_list|()
throws|throws
name|Exception
block|{   }
block|}
end_class

end_unit

