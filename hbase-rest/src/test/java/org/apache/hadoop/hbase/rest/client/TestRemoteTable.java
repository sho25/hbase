begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|HBaseRESTTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RestTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RestTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRemoteTable
block|{
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestRemoteTable"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow4"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testvalue1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testvalue2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ONE_HOUR
init|=
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TS_2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TS_1
init|=
name|TS_2
operator|-
name|ONE_HOUR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseRESTTestingUtility
name|REST_TEST_UTIL
init|=
operator|new
name|HBaseRESTTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|RemoteHTable
name|remoteTable
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|REST_TEST_UTIL
operator|.
name|startServletContainer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|TABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|TABLE
argument_list|)
condition|)
name|admin
operator|.
name|disableTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|COLUMN_1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|COLUMN_2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|COLUMN_3
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|TS_2
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|TS_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|TS_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|,
name|TS_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|remoteTable
operator|=
operator|new
name|RemoteHTable
argument_list|(
operator|new
name|Client
argument_list|(
operator|new
name|Cluster
argument_list|()
operator|.
name|add
argument_list|(
literal|"localhost"
argument_list|,
name|REST_TEST_UTIL
operator|.
name|getServletPort
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|remoteTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|REST_TEST_UTIL
operator|.
name|shutdownServletContainer
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|local
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|remoteTable
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|table
condition|)
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_3
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_2
name|assertNotNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_2
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_2
name|assertNotNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test timestamp
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|TS_1
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_1
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
comment|// test timerange
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|TS_1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_1
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
comment|// test maxVersions
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|listCells
argument_list|()
control|)
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|kv
argument_list|,
name|COLUMN_1
argument_list|)
operator|&&
name|TS_1
operator|==
name|kv
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|VALUE_1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_1
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|kv
argument_list|,
name|COLUMN_1
argument_list|)
operator|&&
name|TS_2
operator|==
name|kv
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|VALUE_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_2
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiGet
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results
init|=
name|remoteTable
operator|.
name|get
argument_list|(
name|gets
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test Versions
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|g
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//404
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"RESALLYREALLYNOTTHERE"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"RESALLYREALLYNOTTHERE"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// multiput
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestRemoteTable"
argument_list|)
argument_list|,
name|remoteTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setTimestamp
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|COLUMN_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test RemoteHTable.Scanner     */
annotation|@
name|Test
specifier|public
name|void
name|testScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|remoteTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|Result
index|[]
name|results
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_2
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_3
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_4
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|remoteTable
operator|.
name|getScanner
argument_list|(
name|COLUMN_1
argument_list|)
expr_stmt|;
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_2
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_3
argument_list|,
name|results
index|[
literal|2
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_4
argument_list|,
name|results
index|[
literal|3
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|remoteTable
operator|.
name|getScanner
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_2
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_3
argument_list|,
name|results
index|[
literal|2
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_4
argument_list|,
name|results
index|[
literal|3
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|remoteTable
operator|.
name|isAutoFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|remoteTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|result
operator|.
name|getValue
argument_list|(
name|COLUMN_2
argument_list|,
name|QUALIFIER_2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|remoteTable
operator|.
name|exists
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remoteTable
operator|.
name|existsAll
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|get
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|remoteTable
operator|.
name|checkAndDelete
argument_list|(
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|remoteTable
operator|.
name|exists
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|remoteTable
operator|.
name|checkAndPut
argument_list|(
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|,
name|put
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|remoteTable
operator|.
name|checkAndPut
argument_list|(
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_2
argument_list|,
name|put
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test RemoteHable.Scanner.iterator method      */
annotation|@
name|Test
specifier|public
name|void
name|testIteratorScaner
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|COLUMN_1
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|remoteTable
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|remoteTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|iterator
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a some methods of class Response.    */
annotation|@
name|Test
specifier|public
name|void
name|testResponse
parameter_list|()
block|{
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|Header
index|[]
name|headers
init|=
operator|new
name|Header
index|[
literal|2
index|]
decl_stmt|;
name|headers
index|[
literal|0
index|]
operator|=
operator|new
name|Header
argument_list|(
literal|"header1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|headers
index|[
literal|1
index|]
operator|=
operator|new
name|Header
argument_list|(
literal|"header2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|Response
argument_list|(
literal|200
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"header1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|hasBody
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCode
argument_list|(
literal|404
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|404
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|=
operator|new
name|Header
index|[
literal|2
index|]
expr_stmt|;
name|headers
index|[
literal|0
index|]
operator|=
operator|new
name|Header
argument_list|(
literal|"header1"
argument_list|,
literal|"value1.1"
argument_list|)
expr_stmt|;
name|headers
index|[
literal|1
index|]
operator|=
operator|new
name|Header
argument_list|(
literal|"header2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1.1"
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"header1"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setBody
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|hasBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

