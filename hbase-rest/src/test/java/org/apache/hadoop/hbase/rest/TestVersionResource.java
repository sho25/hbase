begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|StorageClusterVersionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|VersionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RestTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|servlet
operator|.
name|ServletContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|JacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RestTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestVersionResource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestVersionResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseRESTTestingUtility
name|REST_TEST_UTIL
init|=
operator|new
name|HBaseRESTTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Client
name|client
decl_stmt|;
specifier|private
specifier|static
name|JAXBContext
name|context
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|REST_TEST_UTIL
operator|.
name|startServletContainer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|Client
argument_list|(
operator|new
name|Cluster
argument_list|()
operator|.
name|add
argument_list|(
literal|"localhost"
argument_list|,
name|REST_TEST_UTIL
operator|.
name|getServletPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|VersionModel
operator|.
name|class
argument_list|,
name|StorageClusterVersionModel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|REST_TEST_UTIL
operator|.
name|shutdownServletContainer
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|validate
parameter_list|(
name|VersionModel
name|model
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|model
operator|.
name|getRESTVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|getRESTVersion
argument_list|()
argument_list|,
name|RESTServlet
operator|.
name|VERSION_STRING
argument_list|)
expr_stmt|;
name|String
name|osVersion
init|=
name|model
operator|.
name|getOSVersion
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|osVersion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|osVersion
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|osVersion
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|osVersion
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|jvmVersion
init|=
name|model
operator|.
name|getJVMVersion
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|jvmVersion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jvmVersion
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vm.vendor"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jvmVersion
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jvmVersion
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vm.version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|model
operator|.
name|getServerVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jerseyVersion
init|=
name|model
operator|.
name|getJerseyVersion
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|jerseyVersion
argument_list|)
expr_stmt|;
comment|// TODO: fix when we actually get a jersey version
comment|// assertEquals(jerseyVersion, ServletContainer.class.getPackage().getImplementationVersion());
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStargateVersionText
parameter_list|()
throws|throws
name|IOException
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/version"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_TEXT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_TEXT
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|RESTServlet
operator|.
name|VERSION_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vm.vendor"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vm.version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|contains
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: fix when we actually get a jersey version
comment|// assertTrue(body.contains(ServletContainer.class.getPackage().getImplementationVersion()));
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStargateVersionXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/version"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|VersionModel
name|model
init|=
operator|(
name|VersionModel
operator|)
name|context
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"success retrieving Stargate version as XML"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStargateVersionJSON
parameter_list|()
throws|throws
name|IOException
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/version"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|JacksonJaxbJsonProvider
argument_list|()
operator|.
name|locateMapper
argument_list|(
name|VersionModel
operator|.
name|class
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|VersionModel
name|model
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|,
name|VersionModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"success retrieving Stargate version as JSON"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStargateVersionPB
parameter_list|()
throws|throws
name|IOException
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/version"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|VersionModel
name|model
init|=
operator|new
name|VersionModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|getObjectFromMessage
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/version"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF_IETF
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_PROTOBUF_IETF
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|=
operator|new
name|VersionModel
argument_list|()
expr_stmt|;
name|model
operator|.
name|getObjectFromMessage
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStorageClusterVersionText
parameter_list|()
throws|throws
name|IOException
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/version/cluster"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_TEXT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_TEXT
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStorageClusterVersionXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/version/cluster"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|StorageClusterVersionModel
name|clusterVersionModel
init|=
operator|(
name|StorageClusterVersionModel
operator|)
name|context
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clusterVersionModel
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clusterVersionModel
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"success retrieving storage cluster version as XML"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStorageClusterVersionJSON
parameter_list|()
throws|throws
name|IOException
block|{
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/version/cluster"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|JacksonJaxbJsonProvider
argument_list|()
operator|.
name|locateMapper
argument_list|(
name|StorageClusterVersionModel
operator|.
name|class
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|StorageClusterVersionModel
name|clusterVersionModel
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|,
name|StorageClusterVersionModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clusterVersionModel
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clusterVersionModel
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"success retrieving storage cluster version as JSON"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

