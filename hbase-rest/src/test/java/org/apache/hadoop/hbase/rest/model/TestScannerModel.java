begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RestTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RestTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestScannerModel
extends|extends
name|TestModelBase
argument_list|<
name|ScannerModel
argument_list|>
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestScannerModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE
init|=
literal|"private"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUBLIC
init|=
literal|"public"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|START_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abracadabra"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|END_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzyzx"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column2:foo"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|START_TIME
init|=
literal|1245219839331L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|END_TIME
init|=
literal|1245393318192L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CACHING
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BATCH
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|CACHE_BLOCKS
init|=
literal|false
decl_stmt|;
specifier|public
name|TestScannerModel
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|ScannerModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|AS_XML
operator|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
operator|+
literal|"<Scanner batch=\"100\" cacheBlocks=\"false\" caching=\"1000\" endRow=\"enp5eng=\" "
operator|+
literal|"endTime=\"1245393318192\" maxVersions=\"2147483647\" startRow=\"YWJyYWNhZGFicmE=\" "
operator|+
literal|"startTime=\"1245219839331\">"
operator|+
literal|"<column>Y29sdW1uMQ==</column><column>Y29sdW1uMjpmb28=</column>"
operator|+
literal|"<labels>private</labels><labels>public</labels>"
operator|+
literal|"</Scanner>"
expr_stmt|;
name|AS_JSON
operator|=
literal|"{\"batch\":100,\"caching\":1000,\"cacheBlocks\":false,\"endRow\":\"enp5eng=\","
operator|+
literal|"\"endTime\":1245393318192,\"maxVersions\":2147483647,\"startRow\":\"YWJyYWNhZGFicmE=\","
operator|+
literal|"\"startTime\":1245219839331,\"column\":[\"Y29sdW1uMQ==\",\"Y29sdW1uMjpmb28=\"],"
operator|+
literal|"\"labels\":[\"private\",\"public\"]"
operator|+
literal|"}"
expr_stmt|;
name|AS_PB
operator|=
literal|"CgthYnJhY2FkYWJyYRIFenp5engaB2NvbHVtbjEaC2NvbHVtbjI6Zm9vIGQo47qL554kMLDi57mf"
operator|+
literal|"JDj/////B0joB1IHcHJpdmF0ZVIGcHVibGljWAA="
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ScannerModel
name|buildTestModel
parameter_list|()
block|{
name|ScannerModel
name|model
init|=
operator|new
name|ScannerModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setStartRow
argument_list|(
name|START_ROW
argument_list|)
expr_stmt|;
name|model
operator|.
name|setEndRow
argument_list|(
name|END_ROW
argument_list|)
expr_stmt|;
name|model
operator|.
name|addColumn
argument_list|(
name|COLUMN1
argument_list|)
expr_stmt|;
name|model
operator|.
name|addColumn
argument_list|(
name|COLUMN2
argument_list|)
expr_stmt|;
name|model
operator|.
name|setStartTime
argument_list|(
name|START_TIME
argument_list|)
expr_stmt|;
name|model
operator|.
name|setEndTime
argument_list|(
name|END_TIME
argument_list|)
expr_stmt|;
name|model
operator|.
name|setBatch
argument_list|(
name|BATCH
argument_list|)
expr_stmt|;
name|model
operator|.
name|setCaching
argument_list|(
name|CACHING
argument_list|)
expr_stmt|;
name|model
operator|.
name|addLabel
argument_list|(
name|PRIVATE
argument_list|)
expr_stmt|;
name|model
operator|.
name|addLabel
argument_list|(
name|PUBLIC
argument_list|)
expr_stmt|;
name|model
operator|.
name|setCacheBlocks
argument_list|(
name|CACHE_BLOCKS
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkModel
parameter_list|(
name|ScannerModel
name|model
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|START_ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getEndRow
argument_list|()
argument_list|,
name|END_ROW
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|foundCol1
init|=
literal|false
decl_stmt|,
name|foundCol2
init|=
literal|false
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|model
operator|.
name|getColumns
argument_list|()
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|column
argument_list|,
name|COLUMN1
argument_list|)
condition|)
block|{
name|foundCol1
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|column
argument_list|,
name|COLUMN2
argument_list|)
condition|)
block|{
name|foundCol2
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundCol1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundCol2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|START_TIME
argument_list|,
name|model
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|END_TIME
argument_list|,
name|model
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BATCH
argument_list|,
name|model
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CACHING
argument_list|,
name|model
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CACHE_BLOCKS
argument_list|,
name|model
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundLabel1
init|=
literal|false
decl_stmt|;
name|boolean
name|foundLabel2
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getLabels
argument_list|()
operator|!=
literal|null
operator|&&
name|model
operator|.
name|getLabels
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|label
range|:
name|model
operator|.
name|getLabels
argument_list|()
control|)
block|{
if|if
condition|(
name|label
operator|.
name|equals
argument_list|(
name|PRIVATE
argument_list|)
condition|)
block|{
name|foundLabel1
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|label
operator|.
name|equals
argument_list|(
name|PUBLIC
argument_list|)
condition|)
block|{
name|foundLabel2
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundLabel1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundLabel2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

