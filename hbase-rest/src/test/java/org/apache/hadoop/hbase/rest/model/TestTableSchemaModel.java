begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RestTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RestTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestTableSchemaModel
extends|extends
name|TestModelBase
argument_list|<
name|TableSchemaModel
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTableSchemaModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"testTable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|IS_META
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|IS_ROOT
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|READONLY
init|=
literal|false
decl_stmt|;
name|TestColumnSchemaModel
name|testColumnSchemaModel
decl_stmt|;
specifier|private
name|JAXBContext
name|context
decl_stmt|;
specifier|public
name|TestTableSchemaModel
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|TableSchemaModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|testColumnSchemaModel
operator|=
operator|new
name|TestColumnSchemaModel
argument_list|()
expr_stmt|;
name|AS_XML
operator|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
operator|+
literal|"<TableSchema name=\"testTable\" IS_META=\"false\" IS_ROOT=\"false\" READONLY=\"false\">"
operator|+
literal|"<ColumnSchema name=\"testcolumn\" BLOCKSIZE=\"16384\" BLOOMFILTER=\"NONE\" "
operator|+
literal|"BLOCKCACHE=\"true\" COMPRESSION=\"GZ\" VERSIONS=\"1\" TTL=\"86400\" IN_MEMORY=\"false\"/>"
operator|+
literal|"</TableSchema>"
expr_stmt|;
name|AS_PB
operator|=
literal|"Cgl0ZXN0VGFibGUSEAoHSVNfTUVUQRIFZmFsc2USEAoHSVNfUk9PVBIFZmFsc2USEQoIUkVBRE9O"
operator|+
literal|"TFkSBWZhbHNlGpcBCgp0ZXN0Y29sdW1uEhIKCUJMT0NLU0laRRIFMTYzODQSEwoLQkxPT01GSUxU"
operator|+
literal|"RVISBE5PTkUSEgoKQkxPQ0tDQUNIRRIEdHJ1ZRIRCgtDT01QUkVTU0lPThICR1oSDQoIVkVSU0lP"
operator|+
literal|"TlMSATESDAoDVFRMEgU4NjQwMBISCglJTl9NRU1PUlkSBWZhbHNlGICjBSABKgJHWigA"
expr_stmt|;
name|AS_JSON
operator|=
literal|"{\"name\":\"testTable\",\"IS_META\":\"false\",\"IS_ROOT\":\"false\","
operator|+
literal|"\"READONLY\":\"false\",\"ColumnSchema\":[{\"name\":\"testcolumn\","
operator|+
literal|"\"BLOCKSIZE\":\"16384\",\"BLOOMFILTER\":\"NONE\",\"BLOCKCACHE\":\"true\","
operator|+
literal|"\"COMPRESSION\":\"GZ\",\"VERSIONS\":\"1\",\"TTL\":\"86400\",\"IN_MEMORY\":\"false\"}]}"
expr_stmt|;
block|}
specifier|protected
name|TableSchemaModel
name|buildTestModel
parameter_list|()
block|{
return|return
name|buildTestModel
argument_list|(
name|TABLE_NAME
argument_list|)
return|;
block|}
specifier|public
name|TableSchemaModel
name|buildTestModel
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|TableSchemaModel
name|model
init|=
operator|new
name|TableSchemaModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setIsMeta
argument_list|(
name|IS_META
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setIsRoot
argument_list|(
name|IS_ROOT
argument_list|)
expr_stmt|;
name|model
operator|.
name|__setReadOnly
argument_list|(
name|READONLY
argument_list|)
expr_stmt|;
name|model
operator|.
name|addColumnFamily
argument_list|(
name|testColumnSchemaModel
operator|.
name|buildTestModel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
specifier|protected
name|void
name|checkModel
parameter_list|(
name|TableSchemaModel
name|model
parameter_list|)
block|{
name|checkModel
argument_list|(
name|model
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkModel
parameter_list|(
name|TableSchemaModel
name|model
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getIsMeta
argument_list|()
argument_list|,
name|IS_META
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getIsRoot
argument_list|()
argument_list|,
name|IS_ROOT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|model
operator|.
name|__getReadOnly
argument_list|()
argument_list|,
name|READONLY
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ColumnSchemaModel
argument_list|>
name|families
init|=
name|model
operator|.
name|getColumns
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|families
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnSchemaModel
name|family
init|=
name|families
operator|.
name|next
argument_list|()
decl_stmt|;
name|testColumnSchemaModel
operator|.
name|checkModel
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|families
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildModel
parameter_list|()
throws|throws
name|Exception
block|{
name|checkModel
argument_list|(
name|buildTestModel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromXML
parameter_list|()
throws|throws
name|Exception
block|{
name|checkModel
argument_list|(
name|fromXML
argument_list|(
name|AS_XML
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromPB
parameter_list|()
throws|throws
name|Exception
block|{
name|checkModel
argument_list|(
name|fromPB
argument_list|(
name|AS_PB
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

