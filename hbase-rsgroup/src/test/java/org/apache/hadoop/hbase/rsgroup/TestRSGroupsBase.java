begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoRequest
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|TestRSGroupsBase
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRSGroupsBase
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|//shared
specifier|protected
specifier|final
specifier|static
name|String
name|groupPrefix
init|=
literal|"Group"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|tablePrefix
init|=
literal|"Group"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|SecureRandom
name|rand
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
comment|//shared, cluster type specific
specifier|protected
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|protected
specifier|static
name|Admin
name|admin
decl_stmt|;
specifier|protected
specifier|static
name|HBaseCluster
name|cluster
decl_stmt|;
specifier|protected
specifier|static
name|RSGroupAdmin
name|rsGroupAdmin
decl_stmt|;
specifier|protected
specifier|static
name|HMaster
name|master
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|WAIT_TIMEOUT
init|=
literal|60000
operator|*
literal|5
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|NUM_SLAVES_BASE
init|=
literal|4
decl_stmt|;
comment|//number of slaves for the smallest cluster
specifier|public
specifier|static
name|int
name|NUM_DEAD_SERVERS
init|=
literal|0
decl_stmt|;
comment|// Per test variables
name|TableName
name|tableName
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
literal|"_"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RSGroupInfo
name|addGroup
parameter_list|(
name|String
name|groupName
parameter_list|,
name|int
name|serverCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|RSGroupInfo
name|defaultInfo
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|defaultInfo
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|defaultInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|serverCount
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Address
name|server
range|:
name|defaultInfo
operator|.
name|getServers
argument_list|()
control|)
block|{
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
name|serverCount
condition|)
block|{
break|break;
block|}
name|set
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|set
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|result
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|serverCount
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|void
name|removeGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|RSGroupInfo
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|RSGroupInfo
operator|.
name|getTables
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|RSGroupInfo
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deleteTableIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|HTableDescriptor
name|desc
range|:
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTables
argument_list|(
name|tablePrefix
operator|+
literal|".*"
argument_list|)
control|)
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|deleteNamespaceIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|NamespaceDescriptor
name|desc
range|:
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|listNamespaceDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|desc
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|tablePrefix
argument_list|)
condition|)
block|{
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|deleteGroups
parameter_list|()
throws|throws
name|IOException
block|{
name|RSGroupAdmin
name|groupAdmin
init|=
operator|new
name|RSGroupAdminClient
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|group
range|:
name|groupAdmin
operator|.
name|listRSGroups
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|groupAdmin
operator|.
name|moveTables
argument_list|(
name|group
operator|.
name|getTables
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|groupAdmin
operator|.
name|moveServers
argument_list|(
name|group
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|groupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getTableRegionMap
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tableServerRegionMap
init|=
name|getTableServerRegionMap
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableServerRegionMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|subset
range|:
name|tableServerRegionMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|addAll
argument_list|(
name|subset
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getTableServerRegionMap
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|ClusterMetrics
name|status
init|=
name|TEST_UTIL
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|getClusterMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|entry
range|:
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|serverName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionMetrics
name|rl
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRegionMetrics
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableName
operator|=
name|RegionInfo
operator|.
name|getTable
argument_list|(
name|rl
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse a table name from regionname="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|rl
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|TreeMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|map
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|containsKey
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|map
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
operator|.
name|add
argument_list|(
name|rl
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBogusArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"nonexistent"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rsGroupAdmin
operator|.
name|getRSGroupOfServer
argument_list|(
name|Address
operator|.
name|fromParts
argument_list|(
literal|"bogus"
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
literal|"bogus"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected removing bogus group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"bogustable"
argument_list|)
argument_list|)
argument_list|,
literal|"bogus"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move with bogus group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Address
operator|.
name|fromParts
argument_list|(
literal|"bogus"
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|,
literal|"bogus"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move with bogus group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
try|try
block|{
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|balanceRSGroup
argument_list|(
literal|"bogus"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move with bogus group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateMultiRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|end
init|=
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|9
block|}
decl_stmt|;
name|byte
index|[]
name|start
init|=
block|{
literal|0
block|,
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|8
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|f
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|}
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|f
argument_list|,
literal|1
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateAndDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for created table to be assigned
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleRegionServerMove
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|initNumGroups
init|=
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|RSGroupInfo
name|appInfo
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|adminInfo
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|dInfo
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initNumGroups
operator|+
literal|2
argument_list|,
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|adminInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumServers
argument_list|()
operator|-
literal|2
argument_list|,
name|dInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|appInfo
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|appInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|adminInfo
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|adminInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initNumGroups
argument_list|)
expr_stmt|;
block|}
comment|// return the real number of region servers, excluding the master embedded region server in 2.0+
specifier|public
name|int
name|getNumServers
parameter_list|()
throws|throws
name|IOException
block|{
name|ClusterMetrics
name|status
init|=
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|MASTER
argument_list|,
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
decl_stmt|;
name|ServerName
name|masterName
init|=
name|status
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|sn
operator|.
name|equals
argument_list|(
name|masterName
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveServers
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create groups and assign servers
name|addGroup
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|barGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|fooGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|barGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//test fail bogus server move
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Address
operator|.
name|fromString
argument_list|(
literal|"foo:9999"
argument_list|)
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Bogus servers shouldn't have been successfully moved."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Source RSGroup for server foo:9999 does not exist."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//test success case
name|LOG
operator|.
name|info
argument_list|(
literal|"moving servers "
operator|+
name|barGroup
operator|.
name|getServers
argument_list|()
operator|+
literal|" to group foo"
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|barGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|barGroup
operator|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fooGroup
operator|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|barGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"moving servers "
operator|+
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|+
literal|" to group default"
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|fooGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getNumServers
argument_list|()
operator|==
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fooGroup
operator|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//test group removal
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove group "
operator|+
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove group "
operator|+
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableMoveTruncateAndDrop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|String
name|newGroupName
init|=
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|newGroupName
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|5
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|tableGrp
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableGrp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|//change table's group
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving table "
operator|+
name|tableName
operator|+
literal|" to "
operator|+
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify group change
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|serverMap
init|=
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|serverMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServerName
name|rs
range|:
name|serverMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|newGroup
operator|.
name|containsServer
argument_list|(
name|rs
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|count
operator|+=
name|serverMap
operator|.
name|get
argument_list|(
name|rs
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
operator|==
literal|5
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//test truncate
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify removed table is removed from group
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newGroupName
init|=
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|newGroupName
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
literal|"_ns"
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|,
name|newGroupName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|final
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzzzz"
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|regions
operator|.
name|size
argument_list|()
operator|>=
literal|6
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//make assignment uneven, move all regions to one server
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|assignMap
init|=
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|first
init|=
name|assignMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|assignMap
operator|.
name|get
argument_list|(
name|first
argument_list|)
operator|.
name|contains
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
condition|)
block|{
name|admin
operator|.
name|move
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|first
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|map
operator|.
name|get
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|regions
operator|.
name|size
argument_list|()
operator|>=
literal|6
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//balance the other group and make sure it doesn't affect the new group
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|balanceRSGroup
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
name|first
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//disable balance, balancer will not be run and return false
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rsGroupAdmin
operator|.
name|balanceRSGroup
argument_list|(
name|newGroupName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
name|first
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//enable balance
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|balanceRSGroup
argument_list|(
name|newGroupName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|regions
range|:
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
literal|2
operator|!=
name|regions
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionMove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
comment|// All the regions created below will be assigned to the default group.
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|6
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//get target region to move
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|assignMap
init|=
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|targetRegion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|assignMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|targetRegion
operator|=
name|assignMap
operator|.
name|get
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|assignMap
operator|.
name|get
argument_list|(
name|server
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|targetRegion
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
comment|//get server which is not a member of new group
name|ServerName
name|targetServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|newGroup
operator|.
name|containsServer
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|targetServer
operator|=
name|server
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|targetRS
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getAdmin
argument_list|(
name|targetServer
argument_list|)
decl_stmt|;
comment|//move target server to group
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|targetRS
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Lets move this region to the new group.
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|targetRegion
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|targetServer
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
operator|&&
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|&&
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|REGIONS_IN_TRANSITION
argument_list|)
argument_list|)
operator|.
name|getRegionStatesInTransition
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//verify that targetServer didn't open it
for|for
control|(
name|RegionInfo
name|region
range|:
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|targetRS
argument_list|)
control|)
block|{
if|if
condition|(
name|targetRegion
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Target server opened region"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailRemoveGroup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|initNumGroups
init|=
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|addGroup
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|barGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
comment|//group is not empty therefore it should fail
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected remove group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
comment|//group cannot lose all it's servers therefore it should fail
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|barGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move servers to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|barGroup
operator|.
name|getTables
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move servers to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|barGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initNumGroups
argument_list|,
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKillRS
parameter_list|()
throws|throws
name|Exception
block|{
name|RSGroupInfo
name|appInfo
init|=
name|addGroup
argument_list|(
literal|"appInfo"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
literal|"_ns"
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|,
name|appInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|//wait for created table to be assigned
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ServerName
name|targetServer
init|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|appInfo
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|targetRS
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getAdmin
argument_list|(
name|targetServer
argument_list|)
decl_stmt|;
name|RegionInfo
name|targetRegion
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|targetRS
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|targetRS
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|//stopping may cause an exception
comment|//due to the connection loss
name|targetRS
operator|.
name|stopServer
argument_list|(
literal|null
argument_list|,
name|AdminProtos
operator|.
name|StopServerRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReason
argument_list|(
literal|"Die"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|containsKey
argument_list|(
name|targetServer
argument_list|)
argument_list|)
expr_stmt|;
comment|//wait for created table to be assigned
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getRegionStatesInTransition
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|newServers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|newServers
operator|.
name|add
argument_list|(
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|newServers
argument_list|,
name|appInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Make sure all the table's regions get reassigned
comment|//disabling the table guarantees no conflicting assign/unassign (ie SSH) happens
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|//wait for region to be assigned
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getRegionStatesInTransition
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|targetServer
operator|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|newServers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|targetRS
operator|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getAdmin
argument_list|(
name|targetServer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|targetRS
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|targetRS
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidGroupNames
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|badNames
init|=
block|{
literal|"foo*"
block|,
literal|"foo@"
block|,
literal|"-"
block|}
decl_stmt|;
name|String
index|[]
name|goodNames
init|=
block|{
literal|"foo_123"
block|}
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|badNames
control|)
block|{
try|try
block|{
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a constraint exception for: "
operator|+
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
for|for
control|(
name|String
name|entry
range|:
name|goodNames
control|)
block|{
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getGroupName
parameter_list|(
name|String
name|baseName
parameter_list|)
block|{
return|return
name|groupPrefix
operator|+
literal|"_"
operator|+
name|baseName
operator|+
literal|"_"
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiTableMove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableNameA
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"A"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableNameB
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"B"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|String
name|newGroupName
init|=
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|newGroupName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableNameA
argument_list|,
name|familyNameBytes
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableNameB
argument_list|,
name|familyNameBytes
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regionsA
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableNameA
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsA
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|regionsB
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableNameB
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsB
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableNameA
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|1
operator|&&
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableNameB
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|tableGrpA
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableNameA
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableGrpA
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|tableGrpB
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableNameB
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableGrpB
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|//change table's group
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving table ["
operator|+
name|tableNameA
operator|+
literal|","
operator|+
name|tableNameB
operator|+
literal|"] to "
operator|+
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableNameA
argument_list|,
name|tableNameB
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify group change
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableNameA
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableNameB
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify tables' not exist in old group
name|Set
argument_list|<
name|TableName
argument_list|>
name|DefaultTables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|DefaultTables
operator|.
name|contains
argument_list|(
name|tableNameA
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DefaultTables
operator|.
name|contains
argument_list|(
name|tableNameB
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify tables' exist in new group
name|Set
argument_list|<
name|TableName
argument_list|>
name|newGroupTables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroupName
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newGroupTables
operator|.
name|contains
argument_list|(
name|tableNameA
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroupTables
operator|.
name|contains
argument_list|(
name|tableNameB
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisabledTableMove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|String
name|newGroupName
init|=
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|newGroupName
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|5
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|tableGrp
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableGrp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|//test disable table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|//change table's group
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving table "
operator|+
name|tableName
operator|+
literal|" to "
operator|+
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify group change
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveServersAndTables
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testMoveServersAndTables"
argument_list|)
expr_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//create table
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|5
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//get server which is not a member of new group
name|ServerName
name|targetServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|newGroup
operator|.
name|containsServer
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"master"
argument_list|)
operator|.
name|containsServer
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|targetServer
operator|=
name|server
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Print group info : "
operator|+
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|oldDefaultGroupServerSize
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|oldDefaultGroupTableSize
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//test fail bogus server move
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Address
operator|.
name|fromString
argument_list|(
literal|"foo:9999"
argument_list|)
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Bogus servers shouldn't have been successfully moved."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Source RSGroup for server foo:9999 does not exist."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//test fail server move
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"servers shouldn't have been successfully moved."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Target RSGroup "
operator|+
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|+
literal|" is same as source "
operator|+
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|+
literal|" RSGroup."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//verify default group info
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDefaultGroupServerSize
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDefaultGroupTableSize
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify new group info
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//get all region to move targetServer
name|List
argument_list|<
name|String
argument_list|>
name|regionList
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regionList
control|)
block|{
comment|// Lets move this region to the targetServer
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|region
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|targetServer
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
operator|&&
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|&&
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|REGIONS_IN_TRANSITION
argument_list|)
argument_list|)
operator|.
name|getRegionStatesInTransition
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//verify that all region move to targetServer
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
name|targetServer
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//move targetServer and table to newGroup
name|LOG
operator|.
name|info
argument_list|(
literal|"moving server and table to newGroup"
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify group change
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//verify servers' not exist in old group
name|Set
argument_list|<
name|Address
argument_list|>
name|defaultServers
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|defaultServers
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify servers' exist in new group
name|Set
argument_list|<
name|Address
argument_list|>
name|newGroupServers
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newGroupServers
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify tables' not exist in old group
name|Set
argument_list|<
name|TableName
argument_list|>
name|defaultTables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|defaultTables
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify tables' exist in new group
name|Set
argument_list|<
name|TableName
argument_list|>
name|newGroupTables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newGroupTables
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify that all region still assgin on targetServer
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
name|targetServer
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClearDeadServers
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testClearDeadServers"
argument_list|)
expr_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|NUM_DEAD_SERVERS
operator|=
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getDeadServerNames
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|ServerName
name|targetServer
init|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|targetRS
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getAdmin
argument_list|(
name|targetServer
argument_list|)
decl_stmt|;
try|try
block|{
name|targetServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|targetRS
operator|.
name|getServerInfo
argument_list|(
literal|null
argument_list|,
name|GetServerInfoRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getServerInfo
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|//stopping may cause an exception
comment|//due to the connection loss
name|targetRS
operator|.
name|stopServer
argument_list|(
literal|null
argument_list|,
name|AdminProtos
operator|.
name|StopServerRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReason
argument_list|(
literal|"Die"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|NUM_DEAD_SERVERS
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|//wait for stopped regionserver to dead server list
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|areDeadServersInProgress
argument_list|()
operator|&&
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getDeadServerNames
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|NUM_DEAD_SERVERS
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|containsKey
argument_list|(
name|targetServer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getDeadServerNames
argument_list|()
operator|.
name|contains
argument_list|(
name|targetServer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//clear dead servers list
name|List
argument_list|<
name|ServerName
argument_list|>
name|notClearedServers
init|=
name|admin
operator|.
name|clearDeadServers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|targetServer
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|notClearedServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|newGroupServers
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|newGroupServers
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newGroupServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveServers
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testRemoveServers"
argument_list|)
expr_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Address
argument_list|>
name|iterator
init|=
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ServerName
name|targetServer
init|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove online servers
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Online servers shouldn't have been successfully removed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Server "
operator|+
name|targetServer
operator|.
name|getAddress
argument_list|()
operator|+
literal|" is an online server, not allowed to remove."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove dead servers
name|NUM_DEAD_SERVERS
operator|=
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getDeadServerNames
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|targetRS
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getAdmin
argument_list|(
name|targetServer
argument_list|)
decl_stmt|;
try|try
block|{
name|targetServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|targetRS
operator|.
name|getServerInfo
argument_list|(
literal|null
argument_list|,
name|GetServerInfoRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getServerInfo
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|//stopping may cause an exception
comment|//due to the connection loss
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping server "
operator|+
name|targetServer
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
name|targetRS
operator|.
name|stopServer
argument_list|(
literal|null
argument_list|,
name|AdminProtos
operator|.
name|StopServerRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReason
argument_list|(
literal|"Die"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|NUM_DEAD_SERVERS
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|//wait for stopped regionserver to dead server list
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|areDeadServersInProgress
argument_list|()
operator|&&
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getDeadServerNames
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|NUM_DEAD_SERVERS
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Dead servers shouldn't have been successfully removed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Server "
operator|+
name|targetServer
operator|.
name|getAddress
argument_list|()
operator|+
literal|" is on the dead servers list,"
operator|+
literal|" Maybe it will come back again, not allowed to remove."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove decommissioned servers
name|List
argument_list|<
name|ServerName
argument_list|>
name|serversToDecommission
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|targetServer
operator|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|targetRS
operator|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getAdmin
argument_list|(
name|targetServer
argument_list|)
expr_stmt|;
name|targetServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|targetRS
operator|.
name|getServerInfo
argument_list|(
literal|null
argument_list|,
name|GetServerInfoRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getServerInfo
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|containsKey
argument_list|(
name|targetServer
argument_list|)
argument_list|)
expr_stmt|;
name|serversToDecommission
operator|.
name|add
argument_list|(
name|targetServer
argument_list|)
expr_stmt|;
name|admin
operator|.
name|decommissionRegionServers
argument_list|(
name|serversToDecommission
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|admin
operator|.
name|listDecommissionedRegionServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|newGroupServers
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|newGroupServers
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newGroupServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

