begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|compaction
operator|.
name|TestMajorCompactorTTL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestRSGroupMajorCompactionTTL
extends|extends
name|TestMajorCompactorTTL
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRSGroupMajorCompactionTTL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|NUM_SLAVES_BASE
init|=
literal|6
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|utility
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|utility
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|RSGroupBasedLoadBalancer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|RSGroupAdminEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|NUM_SLAVES_BASE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hfile.compaction.discharger.interval"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|utility
operator|.
name|startMiniCluster
argument_list|(
name|NUM_SLAVES_BASE
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|utility
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
specifier|final
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
comment|//wait for balancer to come online
name|utility
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
block|{
return|return
name|master
operator|.
name|isInitialized
argument_list|()
operator|&&
operator|(
operator|(
name|RSGroupBasedLoadBalancer
operator|)
name|master
operator|.
name|getLoadBalancer
argument_list|()
operator|)
operator|.
name|isOnline
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|admin
operator|=
name|utility
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|utility
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactingTables
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|createTable
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"___"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Delay a bit, so we can set the table TTL to 5 seconds
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
name|int
name|numberOfRegions
init|=
name|admin
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numHFiles
init|=
name|utility
operator|.
name|getNumHFiles
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// we should have a table with more store files than we would before we major compacted.
name|assertTrue
argument_list|(
name|numberOfRegions
operator|<
name|numHFiles
argument_list|)
expr_stmt|;
name|modifyTTL
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|RSGroupMajorCompactionTTL
name|compactor
init|=
operator|new
name|RSGroupMajorCompactionTTL
argument_list|()
decl_stmt|;
name|compactor
operator|.
name|compactTTLRegionsOnGroup
argument_list|(
name|utility
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
name|int
name|numberOfRegions
init|=
name|admin
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numHFiles
init|=
name|utility
operator|.
name|getNumHFiles
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numberOfRegions
argument_list|,
name|numHFiles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

