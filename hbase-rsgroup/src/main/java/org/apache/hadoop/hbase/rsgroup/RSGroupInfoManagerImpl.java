begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
operator|.
name|DefaultVisitorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|CreateTableProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ProcedurePrepareLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufMagic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DisabledRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ModifyRegionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * This is an implementation of {@link RSGroupInfoManager}. Which makes  * use of an HBase table as the persistence store for the group information.  * It also makes use of zookeeper to store group information needed  * for bootstrapping during offline mode.  */
end_comment

begin_class
specifier|public
class|class
name|RSGroupInfoManagerImpl
implements|implements
name|RSGroupInfoManager
implements|,
name|ServerListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RSGroupInfoManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Table descriptor for<code>hbase:rsgroup</code> catalog table */
specifier|private
specifier|final
specifier|static
name|HTableDescriptor
name|RSGROUP_TABLE_DESC
decl_stmt|;
static|static
block|{
name|RSGROUP_TABLE_DESC
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|RSGROUP_TABLE_NAME_BYTES
argument_list|)
expr_stmt|;
name|RSGROUP_TABLE_DESC
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|META_FAMILY_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|RSGROUP_TABLE_DESC
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|DisabledRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|RSGROUP_TABLE_DESC
operator|.
name|addCoprocessor
argument_list|(
name|MultiRowMutationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_SYSTEM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|rsGroupMap
decl_stmt|;
specifier|private
specifier|volatile
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|tableMap
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
specifier|private
name|Table
name|rsGroupTable
decl_stmt|;
specifier|private
name|ClusterConnection
name|conn
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|private
name|RSGroupStartupWorker
name|rsGroupStartupWorker
decl_stmt|;
comment|// contains list of groups that were last flushed to persistent store
specifier|private
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|prevRSGroups
decl_stmt|;
specifier|private
name|RSGroupSerDe
name|rsGroupSerDe
decl_stmt|;
specifier|private
name|DefaultServerUpdater
name|defaultServerUpdater
decl_stmt|;
specifier|public
name|RSGroupInfoManagerImpl
parameter_list|(
name|MasterServices
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|rsGroupMap
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
name|this
operator|.
name|tableMap
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
name|rsGroupSerDe
operator|=
operator|new
name|RSGroupSerDe
argument_list|()
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|master
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|master
operator|.
name|getClusterConnection
argument_list|()
expr_stmt|;
name|rsGroupStartupWorker
operator|=
operator|new
name|RSGroupStartupWorker
argument_list|(
name|this
argument_list|,
name|master
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|prevRSGroups
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|rsGroupStartupWorker
operator|.
name|start
argument_list|()
expr_stmt|;
name|defaultServerUpdater
operator|=
operator|new
name|DefaultServerUpdater
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|defaultServerUpdater
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Adds the group.    *    * @param rsGroupInfo the group name    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addRSGroup
parameter_list|(
name|RSGroupInfo
name|rsGroupInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|checkGroupName
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsGroupMap
operator|.
name|get
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
operator|||
name|rsGroupInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|rsGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Group already exists: "
operator|+
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupInfo
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|moveServers
parameter_list|(
name|Set
argument_list|<
name|HostAndPort
argument_list|>
name|hostPorts
parameter_list|,
name|String
name|srcGroup
parameter_list|,
name|String
name|dstGroup
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rsGroupMap
operator|.
name|containsKey
argument_list|(
name|srcGroup
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Group "
operator|+
name|srcGroup
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rsGroupMap
operator|.
name|containsKey
argument_list|(
name|dstGroup
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Group "
operator|+
name|dstGroup
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|RSGroupInfo
name|src
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|getRSGroup
argument_list|(
name|srcGroup
argument_list|)
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|dst
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|getRSGroup
argument_list|(
name|dstGroup
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|foundOne
init|=
literal|false
decl_stmt|;
for|for
control|(
name|HostAndPort
name|el
range|:
name|hostPorts
control|)
block|{
name|foundOne
operator|=
name|src
operator|.
name|removeServer
argument_list|(
name|el
argument_list|)
operator|||
name|foundOne
expr_stmt|;
name|dst
operator|.
name|addServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
return|return
name|foundOne
return|;
block|}
comment|/**    * Gets the group info of server.    *    * @param hostPort the server    * @return An instance of GroupInfo.    */
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupOfServer
parameter_list|(
name|HostAndPort
name|hostPort
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|RSGroupInfo
name|info
range|:
name|rsGroupMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|containsServer
argument_list|(
name|hostPort
argument_list|)
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Gets the group information.    *    * @param groupName    *          the group name    * @return An instance of GroupInfo    */
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|RSGroupInfo
init|=
name|rsGroupMap
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
return|return
name|RSGroupInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRSGroupOfTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tableMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|moveTables
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tableNames
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|groupName
operator|!=
literal|null
operator|&&
operator|!
name|rsGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Group "
operator|+
name|groupName
operator|+
literal|" does not exist or is a special group"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
if|if
condition|(
name|tableMap
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|RSGroupInfo
name|src
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|newGroupMap
operator|.
name|get
argument_list|(
name|tableMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|src
operator|.
name|removeTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|RSGroupInfo
name|dst
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|newGroupMap
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
name|dst
operator|.
name|addTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete a region server group.    *    * @param groupName the group name    * @throws java.io.IOException Signals that an I/O exception has occurred.    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rsGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
operator|||
name|groupName
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Group "
operator|+
name|groupName
operator|+
literal|" does not exist or is a reserved group"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|remove
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|listRSGroups
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|rsGroupMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOnline
parameter_list|()
block|{
return|return
name|rsGroupStartupWorker
operator|.
name|isOnline
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|refresh
parameter_list|(
name|boolean
name|forceOnline
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|groupList
init|=
operator|new
name|LinkedList
argument_list|<
name|RSGroupInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// overwrite anything read from zk, group table is source of truth
comment|// if online read from GROUP table
if|if
condition|(
name|forceOnline
operator|||
name|isOnline
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refreshing in Online mode."
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsGroupTable
operator|==
literal|null
condition|)
block|{
name|rsGroupTable
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
name|groupList
operator|.
name|addAll
argument_list|(
name|rsGroupSerDe
operator|.
name|retrieveGroupList
argument_list|(
name|rsGroupTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refershing in Offline mode."
argument_list|)
expr_stmt|;
name|String
name|groupBasePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|baseZNode
argument_list|,
name|rsGroupZNode
argument_list|)
decl_stmt|;
name|groupList
operator|.
name|addAll
argument_list|(
name|rsGroupSerDe
operator|.
name|retrieveGroupList
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// refresh default group, prune
name|NavigableSet
argument_list|<
name|TableName
argument_list|>
name|orphanTables
init|=
operator|new
name|TreeSet
argument_list|<
name|TableName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|master
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|orphanTables
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|specialTables
decl_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|specialTables
operator|=
operator|new
name|ArrayList
argument_list|<
name|TableName
argument_list|>
argument_list|()
expr_stmt|;
name|specialTables
operator|.
name|add
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
name|specialTables
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|specialTables
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
expr_stmt|;
name|specialTables
operator|.
name|add
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|specialTables
operator|=
name|master
operator|.
name|listTableNamesByNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TableName
name|table
range|:
name|specialTables
control|)
block|{
name|orphanTables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RSGroupInfo
name|group
range|:
name|groupList
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|orphanTables
operator|.
name|removeAll
argument_list|(
name|group
operator|.
name|getTables
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This is added to the last of the list
comment|// so it overwrites the default group loaded
comment|// from region group table or zk
name|groupList
operator|.
name|add
argument_list|(
operator|new
name|RSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|getDefaultServers
argument_list|()
argument_list|)
argument_list|,
name|orphanTables
argument_list|)
argument_list|)
expr_stmt|;
comment|// populate the data
name|HashMap
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|newTableMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|group
range|:
name|groupList
control|)
block|{
name|newGroupMap
operator|.
name|put
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|group
operator|.
name|getTables
argument_list|()
control|)
block|{
name|newTableMap
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rsGroupMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
name|tableMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newTableMap
argument_list|)
expr_stmt|;
name|prevRSGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prevRSGroups
operator|.
name|addAll
argument_list|(
name|rsGroupMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|flushConfigTable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|newTableMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// populate deletes
for|for
control|(
name|String
name|groupName
range|:
name|prevRSGroups
control|)
block|{
if|if
condition|(
operator|!
name|newGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
comment|// populate puts
for|for
control|(
name|RSGroupInfo
name|RSGroupInfo
range|:
name|newGroupMap
operator|.
name|values
argument_list|()
control|)
block|{
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|RSGroupInfo
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RSGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|META_FAMILY_BYTES
argument_list|,
name|META_QUALIFIER_BYTES
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|entry
range|:
name|RSGroupInfo
operator|.
name|getTables
argument_list|()
control|)
block|{
name|newTableMap
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|RSGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mutations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|multiMutate
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
block|}
return|return
name|newTableMap
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|flushConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|newTableMap
decl_stmt|;
comment|// For offline mode persistence is still unavailable
comment|// We're refreshing in-memory state but only for default servers
if|if
condition|(
operator|!
name|isOnline
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|m
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|oldDefaultGroup
init|=
name|m
operator|.
name|remove
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|newDefaultGroup
init|=
name|newGroupMap
operator|.
name|remove
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|equals
argument_list|(
name|newGroupMap
argument_list|)
operator|||
operator|!
name|oldDefaultGroup
operator|.
name|getTables
argument_list|()
operator|.
name|equals
argument_list|(
name|newDefaultGroup
operator|.
name|getTables
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Only default servers can be updated during offline mode"
argument_list|)
throw|;
block|}
name|newGroupMap
operator|.
name|put
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
name|newDefaultGroup
argument_list|)
expr_stmt|;
name|rsGroupMap
operator|=
name|newGroupMap
expr_stmt|;
return|return;
block|}
name|newTableMap
operator|=
name|flushConfigTable
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
comment|// make changes visible since it has been
comment|// persisted in the source of truth
name|rsGroupMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
name|tableMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newTableMap
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|groupBasePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|baseZNode
argument_list|,
name|rsGroupZNode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|,
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZKUtil
operator|.
name|ZKUtilOp
argument_list|>
name|zkOps
init|=
operator|new
name|ArrayList
argument_list|<
name|ZKUtil
operator|.
name|ZKUtilOp
argument_list|>
argument_list|(
name|newGroupMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|prevRSGroups
control|)
block|{
if|if
condition|(
operator|!
name|newGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|znode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RSGroupInfo
name|RSGroupInfo
range|:
name|newGroupMap
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|RSGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|RSGroupInfo
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating znode: "
operator|+
name|znode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|watcher
argument_list|,
name|znode
argument_list|)
expr_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|znode
argument_list|)
argument_list|)
expr_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|znode
argument_list|,
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing ZK GroupInfo count: "
operator|+
name|zkOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|watcher
argument_list|,
name|zkOps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|master
operator|.
name|abort
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|prevRSGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prevRSGroups
operator|.
name|addAll
argument_list|(
name|newGroupMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|getOnlineRS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|master
operator|!=
literal|null
condition|)
block|{
return|return
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
return|;
block|}
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reading online RS from zookeeper"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|LinkedList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|el
range|:
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|rsZNode
argument_list|)
control|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|el
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to retrieve server list from zookeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|getDefaultServers
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|defaultServers
init|=
operator|new
name|LinkedList
argument_list|<
name|HostAndPort
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|getOnlineRS
argument_list|()
control|)
block|{
name|HostAndPort
name|hostPort
init|=
name|HostAndPort
operator|.
name|fromParts
argument_list|(
name|server
operator|.
name|getHostname
argument_list|()
argument_list|,
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|RSGroupInfo
range|:
name|rsGroupMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|RSGroupInfo
operator|.
name|containsServer
argument_list|(
name|hostPort
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|defaultServers
operator|.
name|add
argument_list|(
name|hostPort
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defaultServers
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|updateDefaultServers
parameter_list|(
name|Set
argument_list|<
name|HostAndPort
argument_list|>
name|hostPort
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|info
init|=
name|rsGroupMap
operator|.
name|get
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|newInfo
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|hostPort
argument_list|,
name|info
operator|.
name|getTables
argument_list|()
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|newInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|newInfo
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serverAdded
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|defaultServerUpdater
operator|.
name|serverChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serverRemoved
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|defaultServerUpdater
operator|.
name|serverChanged
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|DefaultServerUpdater
extends|extends
name|Thread
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultServerUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RSGroupInfoManagerImpl
name|mgr
decl_stmt|;
specifier|private
name|boolean
name|hasChanged
init|=
literal|false
decl_stmt|;
specifier|public
name|DefaultServerUpdater
parameter_list|(
name|RSGroupInfoManagerImpl
name|mgr
parameter_list|)
block|{
name|this
operator|.
name|mgr
operator|=
name|mgr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|prevDefaultServers
init|=
operator|new
name|LinkedList
argument_list|<
name|HostAndPort
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|mgr
operator|.
name|master
operator|.
name|isAborted
argument_list|()
operator|||
operator|!
name|mgr
operator|.
name|master
operator|.
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating default servers."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HostAndPort
argument_list|>
name|servers
init|=
name|mgr
operator|.
name|getDefaultServers
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|servers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|HostAndPort
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HostAndPort
name|o1
parameter_list|,
name|HostAndPort
name|o2
parameter_list|)
block|{
name|int
name|diff
init|=
name|o1
operator|.
name|getHostText
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getHostText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
return|return
name|o1
operator|.
name|getPort
argument_list|()
operator|-
name|o2
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|servers
operator|.
name|equals
argument_list|(
name|prevDefaultServers
argument_list|)
condition|)
block|{
name|mgr
operator|.
name|updateDefaultServers
argument_list|(
name|Sets
operator|.
expr|<
name|HostAndPort
operator|>
name|newHashSet
argument_list|(
name|servers
argument_list|)
argument_list|)
expr_stmt|;
name|prevDefaultServers
operator|=
name|servers
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated with servers: "
operator|+
name|servers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|hasChanged
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
name|hasChanged
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{           }
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update default servers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|serverChanged
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|hasChanged
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|RSGroupStartupWorker
extends|extends
name|Thread
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RSGroupStartupWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|isOnline
init|=
literal|false
decl_stmt|;
specifier|private
name|MasterServices
name|masterServices
decl_stmt|;
specifier|private
name|RSGroupInfoManagerImpl
name|groupInfoManager
decl_stmt|;
specifier|private
name|ClusterConnection
name|conn
decl_stmt|;
specifier|public
name|RSGroupStartupWorker
parameter_list|(
name|RSGroupInfoManagerImpl
name|groupInfoManager
parameter_list|,
name|MasterServices
name|masterServices
parameter_list|,
name|ClusterConnection
name|conn
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|masterServices
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
name|this
operator|.
name|groupInfoManager
operator|=
name|groupInfoManager
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|setName
argument_list|(
name|RSGroupStartupWorker
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|masterServices
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|waitForGroupTableOnline
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GroupBasedLoadBalancer is now online"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|waitForGroupTableOnline
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|foundRegions
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|assignedRegions
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|found
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TableStateManager
name|tsm
init|=
name|masterServices
operator|.
name|getTableStateManager
argument_list|()
decl_stmt|;
name|boolean
name|createSent
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|.
name|get
argument_list|()
operator|&&
name|isMasterRunning
argument_list|()
condition|)
block|{
name|foundRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assignedRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|found
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Table
name|nsTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Table
name|groupTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
decl_stmt|;
name|boolean
name|rootMetaFound
init|=
name|masterServices
operator|.
name|getMetaTableLocator
argument_list|()
operator|.
name|verifyMetaRegionLocation
argument_list|(
name|conn
argument_list|,
name|masterServices
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|nsFound
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootMetaFound
condition|)
block|{
name|MetaTableAccessor
operator|.
name|Visitor
name|visitor
init|=
operator|new
name|DefaultVisitorBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visitInternal
parameter_list|(
name|Result
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|MetaTableAccessor
operator|.
name|getHRegionInfo
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|Cell
name|serverCell
init|=
name|row
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|RSGROUP_TABLE_NAME
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTable
argument_list|()
argument_list|)
operator|&&
name|serverCell
operator|!=
literal|null
condition|)
block|{
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|serverCell
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
condition|)
block|{
name|found
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tsm
operator|.
name|isTableState
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
try|try
block|{
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|rs
init|=
name|conn
operator|.
name|getClient
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRequest
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|Get
argument_list|(
name|ROW_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|rs
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assignedRegions
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception while verifying group region"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|foundRegions
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|Cell
name|cell
init|=
name|row
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
name|ServerName
name|sn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
name|sn
operator|=
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tsm
operator|.
name|isTableState
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
try|try
block|{
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|rs
init|=
name|conn
operator|.
name|getClient
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRequest
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|Get
argument_list|(
name|ROW_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|rs
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|nsFound
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception while verifying group region"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaTableAccessor
operator|.
name|fullScanRegions
argument_list|(
name|conn
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
comment|// if no regions in meta then we have to create the table
if|if
condition|(
name|foundRegions
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|&&
name|rootMetaFound
operator|&&
operator|!
name|createSent
operator|&&
name|nsFound
operator|.
name|get
argument_list|()
condition|)
block|{
name|groupInfoManager
operator|.
name|createGroupTable
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
name|createSent
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Group table: "
operator|+
name|RSGROUP_TABLE_NAME
operator|+
literal|" isOnline: "
operator|+
name|found
operator|.
name|get
argument_list|()
operator|+
literal|", regionCount: "
operator|+
name|foundRegions
operator|.
name|size
argument_list|()
operator|+
literal|", assignCount: "
operator|+
name|assignedRegions
operator|.
name|size
argument_list|()
operator|+
literal|", rootMetaFound: "
operator|+
name|rootMetaFound
argument_list|)
expr_stmt|;
name|found
operator|.
name|set
argument_list|(
name|found
operator|.
name|get
argument_list|()
operator|&&
name|assignedRegions
operator|.
name|size
argument_list|()
operator|==
name|foundRegions
operator|.
name|size
argument_list|()
operator|&&
name|foundRegions
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for catalog tables to come online"
argument_list|)
expr_stmt|;
name|found
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"With group table online, refreshing cached information."
argument_list|)
expr_stmt|;
name|groupInfoManager
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|isOnline
operator|=
literal|true
expr_stmt|;
comment|//flush any inconsistencies between ZK and HTable
name|groupInfoManager
operator|.
name|flushConfig
argument_list|(
name|groupInfoManager
operator|.
name|rsGroupMap
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|found
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to perform check"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|found
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isOnline
parameter_list|()
block|{
return|return
name|isOnline
return|;
block|}
specifier|private
name|boolean
name|isMasterRunning
parameter_list|()
block|{
return|return
operator|!
name|masterServices
operator|.
name|isAborted
argument_list|()
operator|&&
operator|!
name|masterServices
operator|.
name|isStopped
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|createGroupTable
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
index|[]
name|newRegions
init|=
name|ModifyRegionUtils
operator|.
name|createHRegionInfos
argument_list|(
name|RSGROUP_TABLE_DESC
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ProcedurePrepareLatch
name|latch
init|=
name|ProcedurePrepareLatch
operator|.
name|createLatch
argument_list|()
decl_stmt|;
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
operator|new
name|CreateTableProcedure
argument_list|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|RSGROUP_TABLE_DESC
argument_list|,
name|newRegions
argument_list|,
name|latch
argument_list|)
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait for region to be online
name|int
name|tries
init|=
literal|600
decl_stmt|;
while|while
condition|(
name|masterServices
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|newRegions
index|[
literal|0
index|]
argument_list|)
operator|==
literal|null
operator|&&
name|tries
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wait interrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|tries
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create group table."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|multiMutate
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
name|CoprocessorRpcChannel
name|channel
init|=
name|rsGroupTable
operator|.
name|coprocessorService
argument_list|(
name|ROW_KEY
argument_list|)
decl_stmt|;
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
operator|.
name|Builder
name|mmrBuilder
init|=
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|mutation
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|mutation
operator|instanceof
name|Put
condition|)
block|{
name|mmrBuilder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mutation
operator|instanceof
name|Delete
condition|)
block|{
name|mmrBuilder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"multiMutate doesn't support "
operator|+
name|mutation
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
operator|.
name|BlockingInterface
name|service
init|=
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|mutateRows
argument_list|(
literal|null
argument_list|,
name|mmrBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|ex
parameter_list|)
block|{
name|ProtobufUtil
operator|.
name|toIOException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkGroupName
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|ConstraintException
block|{
if|if
condition|(
operator|!
name|groupName
operator|.
name|matches
argument_list|(
literal|"[a-zA-Z0-9_]+"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Group name should only contain alphanumeric characters"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

