begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
operator|.
name|DefaultVisitorBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufMagic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DisabledRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * This is an implementation of {@link RSGroupInfoManager} which makes  * use of an HBase table as the persistence store for the group information.  * It also makes use of zookeeper to store group information needed  * for bootstrapping during offline mode.  *  *<h2>Concurrency</h2>  * RSGroup state is kept locally in Maps. There is a rsgroup name to cached  * RSGroupInfo Map at {@link #rsGroupMap} and a Map of tables to the name of the  * rsgroup they belong too (in {@link #tableMap}). These Maps are persisted to the  * hbase:rsgroup table (and cached in zk) on each modification.  *  *<p>Mutations on state are synchronized but reads can continue without having  * to wait on an instance monitor, mutations do wholesale replace of the Maps on  * update -- Copy-On-Write; the local Maps of state are read-only, just-in-case  * (see flushConfig).  *  *<p>Reads must not block else there is a danger we'll deadlock.  *  *<p>Clients of this class, the {@link RSGroupAdminEndpoint} for example, want to query and  * then act on the results of the query modifying cache in zookeeper without another thread  * making intermediate modifications. These clients synchronize on the 'this' instance so  * no other has access concurrently. Reads must be able to continue concurrently.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|RSGroupInfoManagerImpl
implements|implements
name|RSGroupInfoManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RSGroupInfoManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Table descriptor for<code>hbase:rsgroup</code> catalog table */
specifier|private
specifier|final
specifier|static
name|HTableDescriptor
name|RSGROUP_TABLE_DESC
decl_stmt|;
static|static
block|{
name|RSGROUP_TABLE_DESC
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
expr_stmt|;
name|RSGROUP_TABLE_DESC
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|META_FAMILY_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|RSGROUP_TABLE_DESC
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|DisabledRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|RSGROUP_TABLE_DESC
operator|.
name|addCoprocessor
argument_list|(
name|MultiRowMutationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_SYSTEM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// There two Maps are immutable and wholesale replaced on each modification
comment|// so are safe to access concurrently. See class comment.
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|rsGroupMap
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|tableMap
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MasterServices
name|masterServices
decl_stmt|;
specifier|private
name|Table
name|rsGroupTable
decl_stmt|;
specifier|private
specifier|final
name|ClusterConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|private
specifier|final
name|RSGroupStartupWorker
name|rsGroupStartupWorker
init|=
operator|new
name|RSGroupStartupWorker
argument_list|()
decl_stmt|;
comment|// contains list of groups that were last flushed to persistent store
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|prevRSGroups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ServerEventsListenerThread
name|serverEventsListenerThread
init|=
operator|new
name|ServerEventsListenerThread
argument_list|()
decl_stmt|;
specifier|private
name|RSGroupInfoManagerImpl
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|masterServices
operator|=
name|masterServices
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|masterServices
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|masterServices
operator|.
name|getClusterConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|refresh
argument_list|()
expr_stmt|;
name|rsGroupStartupWorker
operator|.
name|start
argument_list|()
expr_stmt|;
name|serverEventsListenerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|registerListener
argument_list|(
name|serverEventsListenerThread
argument_list|)
expr_stmt|;
block|}
specifier|static
name|RSGroupInfoManager
name|getInstance
parameter_list|(
name|MasterServices
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfoManagerImpl
name|instance
init|=
operator|new
name|RSGroupInfoManagerImpl
argument_list|(
name|master
argument_list|)
decl_stmt|;
name|instance
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addRSGroup
parameter_list|(
name|RSGroupInfo
name|rsGroupInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|checkGroupName
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsGroupMap
operator|.
name|get
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
operator|||
name|rsGroupInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Group already exists: "
operator|+
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|rsGroupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupInfo
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RSGroupInfo
name|getRSGroupInfo
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|RSGroupInfo
name|rsGroupInfo
init|=
name|getRSGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"RSGroup "
operator|+
name|groupName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
return|return
name|rsGroupInfo
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|Address
argument_list|>
name|moveServers
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|srcGroup
parameter_list|,
name|String
name|dstGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|src
init|=
name|getRSGroupInfo
argument_list|(
name|srcGroup
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|dst
init|=
name|getRSGroupInfo
argument_list|(
name|dstGroup
argument_list|)
decl_stmt|;
comment|// If destination is 'default' rsgroup, only add servers that are online. If not online, drop
comment|// it. If not 'default' group, add server to 'dst' rsgroup EVEN IF IT IS NOT online (could be a
comment|// rsgroup of dead servers that are to come back later).
name|Set
argument_list|<
name|Address
argument_list|>
name|onlineServers
init|=
name|dst
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|?
name|Utility
operator|.
name|getOnlineServers
argument_list|(
name|this
operator|.
name|masterServices
argument_list|)
else|:
literal|null
decl_stmt|;
for|for
control|(
name|Address
name|el
range|:
name|servers
control|)
block|{
name|src
operator|.
name|removeServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlineServers
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|onlineServers
operator|.
name|contains
argument_list|(
name|el
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropping "
operator|+
name|el
operator|+
literal|" during move-to-default rsgroup because not online"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
name|dst
operator|.
name|addServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
return|return
name|dst
operator|.
name|getServers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupOfServer
parameter_list|(
name|Address
name|serverHostPort
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|RSGroupInfo
name|info
range|:
name|rsGroupMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|containsServer
argument_list|(
name|serverHostPort
argument_list|)
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
return|return
name|rsGroupMap
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRSGroupOfTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|tableMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|moveTables
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tableNames
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|groupName
operator|!=
literal|null
operator|&&
operator|!
name|rsGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Group "
operator|+
name|groupName
operator|+
literal|" does not exist or is a special group"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
if|if
condition|(
name|tableMap
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|RSGroupInfo
name|src
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|newGroupMap
operator|.
name|get
argument_list|(
name|tableMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|src
operator|.
name|removeTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|RSGroupInfo
name|dst
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|newGroupMap
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
name|dst
operator|.
name|addTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rsGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
operator|||
name|groupName
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Group "
operator|+
name|groupName
operator|+
literal|" does not exist or is a reserved "
operator|+
literal|"group"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|remove
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|listRSGroups
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|rsGroupMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOnline
parameter_list|()
block|{
return|return
name|rsGroupStartupWorker
operator|.
name|isOnline
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveServersAndTables
parameter_list|(
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|srcGroup
parameter_list|,
name|String
name|dstGroup
parameter_list|)
throws|throws
name|IOException
block|{
comment|//get server's group
name|RSGroupInfo
name|srcGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|srcGroup
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|dstGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|dstGroup
argument_list|)
decl_stmt|;
comment|//move servers
for|for
control|(
name|Address
name|el
range|:
name|servers
control|)
block|{
name|srcGroupInfo
operator|.
name|removeServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|dstGroupInfo
operator|.
name|addServer
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
comment|//move tables
for|for
control|(
name|TableName
name|tableName
range|:
name|tables
control|)
block|{
name|srcGroupInfo
operator|.
name|removeTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|dstGroupInfo
operator|.
name|addTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|//flush changed groupinfo
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|srcGroupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|srcGroupInfo
argument_list|)
expr_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|dstGroupInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|dstGroupInfo
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|retrieveGroupListFromGroupTable
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|rsGroupInfoList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rsGroupTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
control|)
block|{
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|RSGroupProtos
operator|.
name|RSGroupInfo
operator|.
name|parseFrom
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|META_FAMILY_BYTES
argument_list|,
name|META_QUALIFIER_BYTES
argument_list|)
argument_list|)
decl_stmt|;
name|rsGroupInfoList
operator|.
name|add
argument_list|(
name|RSGroupProtobufUtil
operator|.
name|toGroupInfo
argument_list|(
name|proto
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rsGroupInfoList
return|;
block|}
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|retrieveGroupListFromZookeeper
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|groupBasePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
name|rsGroupZNode
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|RSGroupInfoList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|//Overwrite any info stored by table, this takes precedence
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|String
name|znode
range|:
name|ZKUtil
operator|.
name|listChildrenAndWatchForNewChildren
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|)
control|)
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|watcher
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|znode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|,
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|RSGroupInfoList
operator|.
name|add
argument_list|(
name|RSGroupProtobufUtil
operator|.
name|toGroupInfo
argument_list|(
name|RSGroupProtos
operator|.
name|RSGroupInfo
operator|.
name|parseFrom
argument_list|(
name|bis
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read ZK GroupInfo count:"
operator|+
name|RSGroupInfoList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|DeserializationException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read rsGroupZNode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|RSGroupInfoList
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read rsgroup info from the source of truth, the hbase:rsgroup table.    * Update zk cache. Called on startup of the manager.    */
specifier|private
specifier|synchronized
name|void
name|refresh
parameter_list|(
name|boolean
name|forceOnline
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|groupList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Overwrite anything read from zk, group table is source of truth
comment|// if online read from GROUP table
if|if
condition|(
name|forceOnline
operator|||
name|isOnline
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refreshing in Online mode."
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsGroupTable
operator|==
literal|null
condition|)
block|{
name|rsGroupTable
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
name|groupList
operator|.
name|addAll
argument_list|(
name|retrieveGroupListFromGroupTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refreshing in Offline mode."
argument_list|)
expr_stmt|;
name|groupList
operator|.
name|addAll
argument_list|(
name|retrieveGroupListFromZookeeper
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// refresh default group, prune
name|NavigableSet
argument_list|<
name|TableName
argument_list|>
name|orphanTables
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|masterServices
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|getAll
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|orphanTables
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|TableName
argument_list|>
name|specialTables
decl_stmt|;
if|if
condition|(
operator|!
name|masterServices
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|specialTables
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|,
name|RSGROUP_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|specialTables
operator|=
name|masterServices
operator|.
name|listTableNamesByNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TableName
name|table
range|:
name|specialTables
control|)
block|{
name|orphanTables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RSGroupInfo
name|group
range|:
name|groupList
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|orphanTables
operator|.
name|removeAll
argument_list|(
name|group
operator|.
name|getTables
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This is added to the last of the list so it overwrites the 'default' rsgroup loaded
comment|// from region group table or zk
name|groupList
operator|.
name|add
argument_list|(
operator|new
name|RSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
name|getDefaultServers
argument_list|()
argument_list|,
name|orphanTables
argument_list|)
argument_list|)
expr_stmt|;
comment|// populate the data
name|HashMap
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|newTableMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|group
range|:
name|groupList
control|)
block|{
name|newGroupMap
operator|.
name|put
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|group
operator|.
name|getTables
argument_list|()
control|)
block|{
name|newTableMap
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|resetRSGroupAndTableMaps
argument_list|(
name|newGroupMap
argument_list|,
name|newTableMap
argument_list|)
expr_stmt|;
name|updateCacheOfRSGroups
argument_list|(
name|rsGroupMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|flushConfigTable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|groupMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|newTableMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// populate deletes
for|for
control|(
name|String
name|groupName
range|:
name|prevRSGroups
control|)
block|{
if|if
condition|(
operator|!
name|groupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
comment|// populate puts
for|for
control|(
name|RSGroupInfo
name|RSGroupInfo
range|:
name|groupMap
operator|.
name|values
argument_list|()
control|)
block|{
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|RSGroupProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|RSGroupInfo
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RSGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|META_FAMILY_BYTES
argument_list|,
name|META_QUALIFIER_BYTES
argument_list|,
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|entry
range|:
name|RSGroupInfo
operator|.
name|getTables
argument_list|()
control|)
block|{
name|newTableMap
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|RSGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mutations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|multiMutate
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
block|}
return|return
name|newTableMap
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|flushConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|flushConfig
argument_list|(
name|this
operator|.
name|rsGroupMap
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|flushConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|newTableMap
decl_stmt|;
comment|// For offline mode persistence is still unavailable
comment|// We're refreshing in-memory state but only for default servers
if|if
condition|(
operator|!
name|isOnline
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|m
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|oldDefaultGroup
init|=
name|m
operator|.
name|remove
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|newDefaultGroup
init|=
name|newGroupMap
operator|.
name|remove
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|equals
argument_list|(
name|newGroupMap
argument_list|)
operator|||
operator|!
name|oldDefaultGroup
operator|.
name|getTables
argument_list|()
operator|.
name|equals
argument_list|(
name|newDefaultGroup
operator|.
name|getTables
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Only default servers can be updated during offline mode"
argument_list|)
throw|;
block|}
name|newGroupMap
operator|.
name|put
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|,
name|newDefaultGroup
argument_list|)
expr_stmt|;
name|rsGroupMap
operator|=
name|newGroupMap
expr_stmt|;
return|return;
block|}
name|newTableMap
operator|=
name|flushConfigTable
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
comment|// Make changes visible after having been persisted to the source of truth
name|resetRSGroupAndTableMaps
argument_list|(
name|newGroupMap
argument_list|,
name|newTableMap
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|groupBasePath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
name|rsGroupZNode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|,
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZKUtil
operator|.
name|ZKUtilOp
argument_list|>
name|zkOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|newGroupMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|prevRSGroups
control|)
block|{
if|if
condition|(
operator|!
name|newGroupMap
operator|.
name|containsKey
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|znode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RSGroupInfo
name|RSGroupInfo
range|:
name|newGroupMap
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|RSGroupInfo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|RSGroupProtobufUtil
operator|.
name|toProtoGroupInfo
argument_list|(
name|RSGroupInfo
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating znode: "
operator|+
name|znode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|watcher
argument_list|,
name|znode
argument_list|)
expr_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|znode
argument_list|)
argument_list|)
expr_stmt|;
name|zkOps
operator|.
name|add
argument_list|(
name|ZKUtil
operator|.
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|znode
argument_list|,
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing ZK GroupInfo count: "
operator|+
name|zkOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|watcher
argument_list|,
name|zkOps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|masterServices
operator|.
name|abort
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to write to rsGroupZNode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|updateCacheOfRSGroups
argument_list|(
name|newGroupMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make changes visible.    * Caller must be synchronized on 'this'.    */
specifier|private
name|void
name|resetRSGroupAndTableMaps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newRSGroupMap
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|newTableMap
parameter_list|)
block|{
comment|// Make maps Immutable.
name|this
operator|.
name|rsGroupMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newRSGroupMap
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newTableMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update cache of rsgroups.    * Caller must be synchronized on 'this'.    * @param currentGroups Current list of Groups.    */
specifier|private
name|void
name|updateCacheOfRSGroups
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|currentGroups
parameter_list|)
block|{
name|this
operator|.
name|prevRSGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|prevRSGroups
operator|.
name|addAll
argument_list|(
name|currentGroups
argument_list|)
expr_stmt|;
block|}
comment|// Called by getDefaultServers. Presume it has lock in place.
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|getOnlineRS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|masterServices
operator|!=
literal|null
condition|)
block|{
return|return
name|masterServices
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reading online RS from zookeeper"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|el
range|:
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|znodePaths
operator|.
name|rsZNode
argument_list|)
control|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|el
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to retrieve server list from zookeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|servers
return|;
block|}
comment|// Called by ServerEventsListenerThread. Presume it has lock on this manager when it runs.
specifier|private
name|SortedSet
argument_list|<
name|Address
argument_list|>
name|getDefaultServers
parameter_list|()
throws|throws
name|IOException
block|{
name|SortedSet
argument_list|<
name|Address
argument_list|>
name|defaultServers
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|getOnlineRS
argument_list|()
control|)
block|{
name|Address
name|server
init|=
name|Address
operator|.
name|fromParts
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|,
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|rsgi
range|:
name|listRSGroups
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|.
name|equals
argument_list|(
name|rsgi
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|rsgi
operator|.
name|containsServer
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|defaultServers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defaultServers
return|;
block|}
comment|// Called by ServerEventsListenerThread. Synchronize on this because redoing
comment|// the rsGroupMap then writing it out.
specifier|private
specifier|synchronized
name|void
name|updateDefaultServers
parameter_list|(
name|SortedSet
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|info
init|=
name|rsGroupMap
operator|.
name|get
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|newInfo
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|servers
argument_list|,
name|info
operator|.
name|getTables
argument_list|()
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|newGroupMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|rsGroupMap
argument_list|)
decl_stmt|;
name|newGroupMap
operator|.
name|put
argument_list|(
name|newInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|newInfo
argument_list|)
expr_stmt|;
name|flushConfig
argument_list|(
name|newGroupMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calls {@link RSGroupInfoManagerImpl#updateDefaultServers(SortedSet)} to update list of known    * servers. Notifications about server changes are received by registering {@link ServerListener}.    * As a listener, we need to return immediately, so the real work of updating the servers is    * done asynchronously in this thread.    */
specifier|private
class|class
name|ServerEventsListenerThread
extends|extends
name|Thread
implements|implements
name|ServerListener
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ServerEventsListenerThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|ServerEventsListenerThread
parameter_list|()
block|{
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serverAdded
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|serverChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serverRemoved
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|serverChanged
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|serverChanged
parameter_list|()
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|setName
argument_list|(
name|ServerEventsListenerThread
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|masterServices
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|Address
argument_list|>
name|prevDefaultServers
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|isMasterRunning
argument_list|(
name|masterServices
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating default servers."
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|Address
argument_list|>
name|servers
init|=
name|RSGroupInfoManagerImpl
operator|.
name|this
operator|.
name|getDefaultServers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|servers
operator|.
name|equals
argument_list|(
name|prevDefaultServers
argument_list|)
condition|)
block|{
name|RSGroupInfoManagerImpl
operator|.
name|this
operator|.
name|updateDefaultServers
argument_list|(
name|servers
argument_list|)
expr_stmt|;
name|prevDefaultServers
operator|=
name|servers
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated with servers: "
operator|+
name|servers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|changed
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
name|changed
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update default servers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|RSGroupStartupWorker
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RSGroupStartupWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|online
init|=
literal|false
decl_stmt|;
name|RSGroupStartupWorker
parameter_list|()
block|{
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|setName
argument_list|(
name|RSGroupStartupWorker
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|masterServices
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitForGroupTableOnline
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GroupBasedLoadBalancer is now online"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|waitForGroupTableOnline
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|foundRegions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|assignedRegions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|found
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|TableStateManager
name|tsm
init|=
name|masterServices
operator|.
name|getTableStateManager
argument_list|()
decl_stmt|;
name|boolean
name|createSent
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|.
name|get
argument_list|()
operator|&&
name|isMasterRunning
argument_list|(
name|masterServices
argument_list|)
condition|)
block|{
name|foundRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assignedRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|found
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
expr_stmt|;
name|conn
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
expr_stmt|;
name|boolean
name|rootMetaFound
init|=
name|masterServices
operator|.
name|getMetaTableLocator
argument_list|()
operator|.
name|verifyMetaRegionLocation
argument_list|(
name|conn
argument_list|,
name|masterServices
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|nsFound
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootMetaFound
condition|)
block|{
name|MetaTableAccessor
operator|.
name|Visitor
name|visitor
init|=
operator|new
name|DefaultVisitorBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visitInternal
parameter_list|(
name|Result
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|MetaTableAccessor
operator|.
name|getHRegionInfo
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|Cell
name|serverCell
init|=
name|row
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|RSGROUP_TABLE_NAME
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTable
argument_list|()
argument_list|)
operator|&&
name|serverCell
operator|!=
literal|null
condition|)
block|{
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|serverCell
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
condition|)
block|{
name|found
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tsm
operator|.
name|isTableState
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
try|try
block|{
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|rs
init|=
name|conn
operator|.
name|getClient
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRequest
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|Get
argument_list|(
name|ROW_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|rs
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assignedRegions
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception while verifying group region"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|foundRegions
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|Cell
name|cell
init|=
name|row
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
name|ServerName
name|sn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
name|sn
operator|=
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tsm
operator|.
name|isTableState
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
condition|)
block|{
try|try
block|{
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|rs
init|=
name|conn
operator|.
name|getClient
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRequest
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|Get
argument_list|(
name|ROW_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|rs
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|nsFound
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception while verifying group region"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MetaTableAccessor
operator|.
name|fullScanRegions
argument_list|(
name|conn
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
comment|// if no regions in meta then we have to create the table
if|if
condition|(
name|foundRegions
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|&&
name|rootMetaFound
operator|&&
operator|!
name|createSent
operator|&&
name|nsFound
operator|.
name|get
argument_list|()
condition|)
block|{
name|createRSGroupTable
argument_list|()
expr_stmt|;
name|createSent
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"RSGroup table="
operator|+
name|RSGROUP_TABLE_NAME
operator|+
literal|" isOnline="
operator|+
name|found
operator|.
name|get
argument_list|()
operator|+
literal|", regionCount="
operator|+
name|foundRegions
operator|.
name|size
argument_list|()
operator|+
literal|", assignCount="
operator|+
name|assignedRegions
operator|.
name|size
argument_list|()
operator|+
literal|", rootMetaFound="
operator|+
name|rootMetaFound
argument_list|)
expr_stmt|;
name|found
operator|.
name|set
argument_list|(
name|found
operator|.
name|get
argument_list|()
operator|&&
name|assignedRegions
operator|.
name|size
argument_list|()
operator|==
name|foundRegions
operator|.
name|size
argument_list|()
operator|&&
name|foundRegions
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for catalog tables to come online"
argument_list|)
expr_stmt|;
name|found
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"With group table online, refreshing cached information."
argument_list|)
expr_stmt|;
name|RSGroupInfoManagerImpl
operator|.
name|this
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|online
operator|=
literal|true
expr_stmt|;
comment|//flush any inconsistencies between ZK and HTable
name|RSGroupInfoManagerImpl
operator|.
name|this
operator|.
name|flushConfig
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|found
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to perform check"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|found
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|void
name|createRSGroupTable
parameter_list|()
throws|throws
name|IOException
block|{
name|Long
name|procId
init|=
name|masterServices
operator|.
name|createSystemTable
argument_list|(
name|RSGROUP_TABLE_DESC
argument_list|)
decl_stmt|;
comment|// wait for region to be online
name|int
name|tries
init|=
literal|600
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|isFinished
argument_list|(
name|procId
argument_list|)
operator|)
operator|&&
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|isRunning
argument_list|()
operator|&&
name|tries
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wait interrupted "
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|tries
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create group table in a given time."
argument_list|)
throw|;
block|}
else|else
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|isFailed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create group table. "
operator|+
name|result
operator|.
name|getException
argument_list|()
operator|.
name|unwrapRemoteIOException
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isOnline
parameter_list|()
block|{
return|return
name|online
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isMasterRunning
parameter_list|(
name|MasterServices
name|masterServices
parameter_list|)
block|{
return|return
operator|!
name|masterServices
operator|.
name|isAborted
argument_list|()
operator|&&
operator|!
name|masterServices
operator|.
name|isStopped
argument_list|()
return|;
block|}
specifier|private
name|void
name|multiMutate
parameter_list|(
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
name|CoprocessorRpcChannel
name|channel
init|=
name|rsGroupTable
operator|.
name|coprocessorService
argument_list|(
name|ROW_KEY
argument_list|)
decl_stmt|;
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
operator|.
name|Builder
name|mmrBuilder
init|=
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|mutation
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|mutation
operator|instanceof
name|Put
condition|)
block|{
name|mmrBuilder
operator|.
name|addMutationRequest
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mutation
operator|instanceof
name|Delete
condition|)
block|{
name|mmrBuilder
operator|.
name|addMutationRequest
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"multiMutate doesn't support "
operator|+
name|mutation
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
operator|.
name|BlockingInterface
name|service
init|=
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|mutateRows
argument_list|(
literal|null
argument_list|,
name|mmrBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|ex
parameter_list|)
block|{
name|ProtobufUtil
operator|.
name|toIOException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkGroupName
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|ConstraintException
block|{
if|if
condition|(
operator|!
name|groupName
operator|.
name|matches
argument_list|(
literal|"[a-zA-Z0-9_]+"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup name should only contain alphanumeric characters"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

