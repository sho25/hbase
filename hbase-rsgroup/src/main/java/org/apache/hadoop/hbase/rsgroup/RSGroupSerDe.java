begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|//TODO do better encapsulation of SerDe logic from GroupInfoManager and GroupTracker
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RSGroupSerDe
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RSGroupSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|RSGroupSerDe
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|retrieveGroupList
parameter_list|(
name|Table
name|groupTable
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|RSGroupInfoList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|groupTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
control|)
block|{
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|RSGroupProtos
operator|.
name|RSGroupInfo
operator|.
name|parseFrom
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|RSGroupInfoManager
operator|.
name|META_FAMILY_BYTES
argument_list|,
name|RSGroupInfoManager
operator|.
name|META_QUALIFIER_BYTES
argument_list|)
argument_list|)
decl_stmt|;
name|RSGroupInfoList
operator|.
name|add
argument_list|(
name|toGroupInfo
argument_list|(
name|proto
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|RSGroupInfoList
return|;
block|}
specifier|public
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|retrieveGroupList
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|String
name|groupBasePath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|RSGroupInfoList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|//Overwrite any info stored by table, this takes precedence
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|String
name|znode
range|:
name|ZKUtil
operator|.
name|listChildrenAndWatchForNewChildren
argument_list|(
name|watcher
argument_list|,
name|groupBasePath
argument_list|)
control|)
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|watcher
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|groupBasePath
argument_list|,
name|znode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|,
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|RSGroupInfoList
operator|.
name|add
argument_list|(
name|toGroupInfo
argument_list|(
name|RSGroupProtos
operator|.
name|RSGroupInfo
operator|.
name|parseFrom
argument_list|(
name|bis
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read ZK GroupInfo count:"
operator|+
name|RSGroupInfoList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read rsGroupZNode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read rsGroupZNode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read rsGroupZNode"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|RSGroupInfoList
return|;
block|}
specifier|public
specifier|static
name|RSGroupInfo
name|toGroupInfo
parameter_list|(
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
parameter_list|)
block|{
name|RSGroupInfo
name|RSGroupInfo
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|proto
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|el
range|:
name|proto
operator|.
name|getServersList
argument_list|()
control|)
block|{
name|RSGroupInfo
operator|.
name|addServer
argument_list|(
name|HostAndPort
operator|.
name|fromParts
argument_list|(
name|el
operator|.
name|getHostName
argument_list|()
argument_list|,
name|el
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HBaseProtos
operator|.
name|TableName
name|pTableName
range|:
name|proto
operator|.
name|getTablesList
argument_list|()
control|)
block|{
name|RSGroupInfo
operator|.
name|addTable
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|pTableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|RSGroupInfo
return|;
block|}
specifier|public
specifier|static
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|toProtoGroupInfo
parameter_list|(
name|RSGroupInfo
name|pojo
parameter_list|)
block|{
name|List
argument_list|<
name|HBaseProtos
operator|.
name|TableName
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|HBaseProtos
operator|.
name|TableName
argument_list|>
argument_list|(
name|pojo
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|arg
range|:
name|pojo
operator|.
name|getTables
argument_list|()
control|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HBaseProtos
operator|.
name|ServerName
argument_list|>
name|hostports
init|=
operator|new
name|ArrayList
argument_list|<
name|HBaseProtos
operator|.
name|ServerName
argument_list|>
argument_list|(
name|pojo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HostAndPort
name|el
range|:
name|pojo
operator|.
name|getServers
argument_list|()
control|)
block|{
name|hostports
operator|.
name|add
argument_list|(
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHostName
argument_list|(
name|el
operator|.
name|getHostText
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|el
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|RSGroupProtos
operator|.
name|RSGroupInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|pojo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addAllServers
argument_list|(
name|hostports
argument_list|)
operator|.
name|addAllTables
argument_list|(
name|tables
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

