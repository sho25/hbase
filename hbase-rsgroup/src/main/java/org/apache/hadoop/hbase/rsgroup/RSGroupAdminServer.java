begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|Utility
operator|.
name|getOnlineServers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|locking
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|locking
operator|.
name|LockProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_comment
comment|/**  * Service to support Region Server Grouping (HBase-6721)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RSGroupAdminServer
extends|extends
name|RSGroupAdmin
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RSGroupAdminServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MasterServices
name|master
decl_stmt|;
comment|// List of servers that are being moved from one group to another
comment|// Key=host:port,Value=targetGroup
specifier|private
name|NavigableMap
argument_list|<
name|HostAndPort
argument_list|,
name|String
argument_list|>
name|serversInTransition
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|HostAndPort
argument_list|,
name|String
argument_list|>
argument_list|(
operator|new
name|Addressing
operator|.
name|HostAndPortComparable
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|RSGroupInfoManager
name|rsgroupInfoManager
decl_stmt|;
specifier|public
name|RSGroupAdminServer
parameter_list|(
name|MasterServices
name|master
parameter_list|,
name|RSGroupInfoManager
name|RSGroupInfoManager
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|rsgroupInfoManager
operator|=
name|RSGroupInfoManager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupInfo
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRSGroupInfoManager
argument_list|()
operator|.
name|getRSGroup
argument_list|(
name|groupName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupInfoOfTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|groupName
init|=
name|getRSGroupInfoManager
argument_list|()
operator|.
name|getRSGroupOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|groupName
operator|==
literal|null
condition|?
literal|null
else|:
name|getRSGroupInfoManager
argument_list|()
operator|.
name|getRSGroup
argument_list|(
name|groupName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveServers
parameter_list|(
name|Set
argument_list|<
name|HostAndPort
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroupName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|servers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The list of servers to move cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|targetGroupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The target rsgroup cannot be null."
argument_list|)
throw|;
block|}
name|RSGroupInfo
name|targetGrp
init|=
name|getRSGroupInfo
argument_list|(
name|targetGroupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetGrp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|targetGroupName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|RSGroupInfoManager
name|manager
init|=
name|getRSGroupInfoManager
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|manager
init|)
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preMoveServers
argument_list|(
name|servers
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
block|}
name|HostAndPort
name|firstServer
init|=
name|servers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// We only allow a move from a single source group so this should be ok
name|RSGroupInfo
name|srcGrp
init|=
name|manager
operator|.
name|getRSGroupOfServer
argument_list|(
name|firstServer
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcGrp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Server "
operator|+
name|firstServer
operator|+
literal|" does not have a rsgroup."
argument_list|)
throw|;
block|}
if|if
condition|(
name|srcGrp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|targetGroupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Target rsgroup "
operator|+
name|targetGroupName
operator|+
literal|" is same as source "
operator|+
name|srcGrp
operator|+
literal|" rsgroup."
argument_list|)
throw|;
block|}
comment|// Only move online servers (from default) or servers from other groups.
comment|// This prevents bogus servers from entering groups
if|if
condition|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
operator|.
name|equals
argument_list|(
name|srcGrp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|HostAndPort
argument_list|>
name|onlineServers
init|=
name|getOnlineServers
argument_list|(
name|this
operator|.
name|master
argument_list|)
decl_stmt|;
for|for
control|(
name|HostAndPort
name|el
range|:
name|servers
control|)
block|{
if|if
condition|(
operator|!
name|onlineServers
operator|.
name|contains
argument_list|(
name|el
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Server "
operator|+
name|el
operator|+
literal|" is not an online server in 'default' rsgroup."
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|srcGrp
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|servers
operator|.
name|size
argument_list|()
operator|&&
name|srcGrp
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Cannot leave a rsgroup "
operator|+
name|srcGrp
operator|.
name|getName
argument_list|()
operator|+
literal|" that contains tables without servers to host them."
argument_list|)
throw|;
block|}
name|String
name|sourceGroupName
init|=
name|manager
operator|.
name|getRSGroupOfServer
argument_list|(
name|srcGrp
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|getRSGroupInfo
argument_list|(
name|targetGroupName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Target "
operator|+
name|targetGroupName
operator|+
literal|" rsgroup does not exist."
argument_list|)
throw|;
block|}
for|for
control|(
name|HostAndPort
name|server
range|:
name|servers
control|)
block|{
if|if
condition|(
name|serversInTransition
operator|.
name|containsKey
argument_list|(
name|server
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Server list contains a server "
operator|+
name|server
operator|+
literal|" that is already being moved."
argument_list|)
throw|;
block|}
name|String
name|tmpGroup
init|=
name|manager
operator|.
name|getRSGroupOfServer
argument_list|(
name|server
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceGroupName
operator|!=
literal|null
operator|&&
operator|!
name|tmpGroup
operator|.
name|equals
argument_list|(
name|sourceGroupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Move server request should only come from one source rsgroup. "
operator|+
literal|"Expecting only "
operator|+
name|sourceGroupName
operator|+
literal|" but contains "
operator|+
name|tmpGroup
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sourceGroupName
operator|.
name|equals
argument_list|(
name|targetGroupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Target rsgroup "
operator|+
name|sourceGroupName
operator|+
literal|" is same as source rsgroup."
argument_list|)
throw|;
block|}
try|try
block|{
comment|//update the servers as in transition
for|for
control|(
name|HostAndPort
name|server
range|:
name|servers
control|)
block|{
name|serversInTransition
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|HostAndPort
argument_list|>
name|movedServers
init|=
name|manager
operator|.
name|moveServers
argument_list|(
name|servers
argument_list|,
name|sourceGroupName
argument_list|,
name|targetGroupName
argument_list|)
decl_stmt|;
name|boolean
name|found
decl_stmt|;
do|do
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|HostAndPort
argument_list|>
name|iter
init|=
name|movedServers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|HostAndPort
name|rs
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//get online regions
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|el
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionAssignments
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|el
operator|.
name|getValue
argument_list|()
operator|.
name|getHostPort
argument_list|()
operator|.
name|equals
argument_list|(
name|rs
argument_list|)
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|el
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RegionState
name|state
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
control|)
block|{
if|if
condition|(
name|state
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostPort
argument_list|()
operator|.
name|equals
argument_list|(
name|rs
argument_list|)
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|state
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//unassign regions for a server
name|LOG
operator|.
name|info
argument_list|(
literal|"Unassigning "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions from server "
operator|+
name|rs
operator|+
literal|" for move to "
operator|+
name|targetGroupName
argument_list|)
expr_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//TODO bulk unassign or throttled unassign?
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
comment|//regions might get assigned from tables of target group
comment|//so we need to filter
if|if
condition|(
operator|!
name|targetGrp
operator|.
name|containsTable
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|unassign
argument_list|(
name|region
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|region
argument_list|)
operator|.
name|isFailedOpen
argument_list|()
condition|)
block|{
comment|// If region is in FAILED_OPEN state, it won't recover, not without
comment|// operator intervention... in hbase-2.0.0 at least. Continue rather
comment|// than mark region as 'found'.
continue|continue;
block|}
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|manager
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Sleep interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|found
condition|)
do|;
block|}
finally|finally
block|{
comment|//remove from transition
for|for
control|(
name|HostAndPort
name|server
range|:
name|servers
control|)
block|{
name|serversInTransition
operator|.
name|remove
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postMoveServers
argument_list|(
name|servers
argument_list|,
name|targetGroupName
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Move server done: "
operator|+
name|sourceGroupName
operator|+
literal|"->"
operator|+
name|targetGroupName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|moveTables
parameter_list|(
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"The list of servers cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|tables
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"moveTables() passed an empty set. Ignoring."
argument_list|)
expr_stmt|;
return|return;
block|}
name|RSGroupInfoManager
name|manager
init|=
name|getRSGroupInfoManager
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|manager
init|)
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preMoveTables
argument_list|(
name|tables
argument_list|,
name|targetGroup
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetGroup
operator|!=
literal|null
condition|)
block|{
name|RSGroupInfo
name|destGroup
init|=
name|manager
operator|.
name|getRSGroup
argument_list|(
name|targetGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|destGroup
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Target "
operator|+
name|targetGroup
operator|+
literal|" rsgroup does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|destGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Target rsgroup must have at least one server."
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|String
name|srcGroup
init|=
name|manager
operator|.
name|getRSGroupOfTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcGroup
operator|!=
literal|null
operator|&&
name|srcGroup
operator|.
name|equals
argument_list|(
name|targetGroup
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"Source rsgroup "
operator|+
name|srcGroup
operator|+
literal|" is same as target "
operator|+
name|targetGroup
operator|+
literal|" rsgroup for table "
operator|+
name|table
argument_list|)
throw|;
block|}
block|}
name|manager
operator|.
name|moveTables
argument_list|(
name|tables
argument_list|,
name|targetGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postMoveTables
argument_list|(
name|tables
argument_list|,
name|targetGroup
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|LockManager
operator|.
name|MasterLock
name|lock
init|=
name|master
operator|.
name|getLockManager
argument_list|()
operator|.
name|createMasterLock
argument_list|(
name|table
argument_list|,
name|LockProcedure
operator|.
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": RSGroup: table move"
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted when waiting for table lock"
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|HRegionInfo
name|region
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|table
argument_list|)
control|)
block|{
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|unassign
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRSGroup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preAddRSGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|getRSGroupInfoManager
argument_list|()
operator|.
name|addRSGroup
argument_list|(
operator|new
name|RSGroupInfo
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postAddRSGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRSGroup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfoManager
name|manager
init|=
name|getRSGroupInfoManager
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|manager
init|)
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preRemoveRSGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|RSGroupInfo
name|RSGroupInfo
init|=
name|getRSGroupInfoManager
argument_list|()
operator|.
name|getRSGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|RSGroupInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|name
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|int
name|tableCount
init|=
name|RSGroupInfo
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableCount
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|name
operator|+
literal|" has "
operator|+
name|tableCount
operator|+
literal|" tables; you must remove these tables from the rsgroup before "
operator|+
literal|"the rsgroup can be removed."
argument_list|)
throw|;
block|}
name|int
name|serverCount
init|=
name|RSGroupInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverCount
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|name
operator|+
literal|" has "
operator|+
name|serverCount
operator|+
literal|" servers; you must remove these servers from the rsgroup before"
operator|+
literal|"the rsgroup can be removed."
argument_list|)
throw|;
block|}
for|for
control|(
name|NamespaceDescriptor
name|ns
range|:
name|master
operator|.
name|getClusterSchema
argument_list|()
operator|.
name|getNamespaces
argument_list|()
control|)
block|{
name|String
name|nsGroup
init|=
name|ns
operator|.
name|getConfigurationValue
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACEDESC_PROP_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsGroup
operator|!=
literal|null
operator|&&
name|nsGroup
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|name
operator|+
literal|" is referenced by namespace: "
operator|+
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|manager
operator|.
name|removeRSGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postRemoveRSGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|balanceRSGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerManager
name|serverManager
init|=
name|master
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
name|AssignmentManager
name|assignmentManager
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|LoadBalancer
name|balancer
init|=
name|master
operator|.
name|getLoadBalancer
argument_list|()
decl_stmt|;
name|boolean
name|balancerRan
decl_stmt|;
synchronized|synchronized
init|(
name|balancer
init|)
block|{
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|preBalanceRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup does not exist: "
operator|+
name|groupName
argument_list|)
throw|;
block|}
comment|// Only allow one balance run at at time.
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|groupRIT
init|=
name|rsGroupGetRegionsInTransition
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupRIT
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because "
operator|+
name|groupRIT
operator|.
name|size
argument_list|()
operator|+
literal|" region(s) in transition: "
operator|+
name|StringUtils
operator|.
name|abbreviate
argument_list|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|serverManager
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not running balancer because processing dead regionserver(s): "
operator|+
name|serverManager
operator|.
name|getDeadServers
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//We balance per group instead of per table
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionPlan
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|tableMap
range|:
name|getRSGroupAssignmentsByTable
argument_list|(
name|groupName
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating partial plan for table "
operator|+
name|tableMap
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|tableMap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|partialPlans
init|=
name|balancer
operator|.
name|balanceCluster
argument_list|(
name|tableMap
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Partial plan for table "
operator|+
name|tableMap
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|partialPlans
argument_list|)
expr_stmt|;
if|if
condition|(
name|partialPlans
operator|!=
literal|null
condition|)
block|{
name|plans
operator|.
name|addAll
argument_list|(
name|partialPlans
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|balancerRan
operator|=
name|plans
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|plans
operator|!=
literal|null
operator|&&
operator|!
name|plans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RSGroup balance "
operator|+
name|groupName
operator|+
literal|" starting with plan count: "
operator|+
name|plans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionPlan
name|plan
range|:
name|plans
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"balance "
operator|+
name|plan
argument_list|)
expr_stmt|;
name|assignmentManager
operator|.
name|balance
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"RSGroup balance "
operator|+
name|groupName
operator|+
literal|" completed after "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|postBalanceRSGroup
argument_list|(
name|groupName
argument_list|,
name|balancerRan
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|balancerRan
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|listRSGroups
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getRSGroupInfoManager
argument_list|()
operator|.
name|listRSGroups
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|getRSGroupOfServer
parameter_list|(
name|HostAndPort
name|hostPort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRSGroupInfoManager
argument_list|()
operator|.
name|getRSGroupOfServer
argument_list|(
name|hostPort
argument_list|)
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|RSGroupInfoManager
name|getRSGroupInfoManager
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rsgroupInfoManager
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|rsGroupGetRegionsInTransition
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|rit
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RSGroupInfo
name|RSGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|RSGroupInfo
operator|.
name|getTables
argument_list|()
control|)
block|{
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|tableName
argument_list|)
control|)
block|{
name|RegionState
name|state
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionTransitionState
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|rit
operator|.
name|put
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rit
return|;
block|}
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|getRSGroupAssignmentsByTable
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|RSGroupInfo
name|RSGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|>
name|assignments
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|entry
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionAssignments
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TableName
name|currTable
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|ServerName
name|currServer
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|HRegionInfo
name|currRegion
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|RSGroupInfo
operator|.
name|getTables
argument_list|()
operator|.
name|contains
argument_list|(
name|currTable
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|assignments
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|assignments
operator|.
name|put
argument_list|(
name|currTable
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assignments
operator|.
name|get
argument_list|(
name|currTable
argument_list|)
operator|.
name|containsKey
argument_list|(
name|currServer
argument_list|)
condition|)
block|{
name|assignments
operator|.
name|get
argument_list|(
name|currTable
argument_list|)
operator|.
name|put
argument_list|(
name|currServer
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|get
argument_list|(
name|currTable
argument_list|)
operator|.
name|get
argument_list|(
name|currServer
argument_list|)
operator|.
name|add
argument_list|(
name|currRegion
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serverMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|RSGroupInfo
operator|.
name|getServers
argument_list|()
operator|.
name|contains
argument_list|(
name|serverName
operator|.
name|getHostPort
argument_list|()
argument_list|)
condition|)
block|{
name|serverMap
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
block|}
block|}
comment|//add all tables that are members of the group
for|for
control|(
name|TableName
name|tableName
range|:
name|RSGroupInfo
operator|.
name|getTables
argument_list|()
control|)
block|{
if|if
condition|(
name|assignments
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|putAll
argument_list|(
name|serverMap
argument_list|)
expr_stmt|;
name|result
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|putAll
argument_list|(
name|assignments
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding assignments for "
operator|+
name|tableName
operator|+
literal|": "
operator|+
name|assignments
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|prepareRSGroupForTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|groupName
init|=
name|master
operator|.
name|getClusterSchema
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|getConfigurationValue
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACEDESC_PROP_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupName
operator|==
literal|null
condition|)
block|{
name|groupName
operator|=
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
expr_stmt|;
block|}
name|RSGroupInfo
name|RSGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|RSGroupInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConstraintException
argument_list|(
literal|"RSGroup "
operator|+
name|groupName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|RSGroupInfo
operator|.
name|containsTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pre-moving table "
operator|+
name|desc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" to rsgroup "
operator|+
name|groupName
argument_list|)
expr_stmt|;
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|cleanupRSGroupForTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|RSGroupInfo
name|group
init|=
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing deleted table from table rsgroup "
operator|+
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to perform rsgroup information cleanup for table: "
operator|+
name|tableName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to perform rsgroup information cleanup for table: "
operator|+
name|tableName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
block|}
end_class

end_unit

