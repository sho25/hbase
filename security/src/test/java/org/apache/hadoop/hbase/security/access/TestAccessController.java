begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedWithDetailsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Performs authorization checks for common operations, according to different  * levels of authorized users.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAccessController
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAccessController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
comment|// user with all permissions
specifier|private
specifier|static
name|User
name|SUPERUSER
decl_stmt|;
comment|// table owner user
specifier|private
specifier|static
name|User
name|USER_OWNER
decl_stmt|;
comment|// user with rw permissions
specifier|private
specifier|static
name|User
name|USER_RW
decl_stmt|;
comment|// user with read-only permissions
specifier|private
specifier|static
name|User
name|USER_RO
decl_stmt|;
comment|// user with no permissions
specifier|private
specifier|static
name|User
name|USER_NONE
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MasterCoprocessorEnvironment
name|CP_ENV
decl_stmt|;
specifier|private
specifier|static
name|AccessController
name|ACCESS_CONTROLLER
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup configuration
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|SecureTestUtil
operator|.
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getCoprocessorHost
argument_list|()
decl_stmt|;
name|cpHost
operator|.
name|load
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|=
operator|(
name|AccessController
operator|)
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CP_ENV
operator|=
name|cpHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// create a set of test users
name|SUPERUSER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
expr_stmt|;
name|USER_OWNER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"owner"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_RW
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"rwuser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_RO
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"rouser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NONE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"nouser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwnerString
argument_list|(
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// initilize access control
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
name|AccessControllerProtocol
name|protocol
init|=
name|meta
operator|.
name|coprocessorProxy
argument_list|(
name|AccessControllerProtocol
operator|.
name|class
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|USER_RW
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|USER_RO
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|verifyAllowed
parameter_list|(
name|User
name|user
parameter_list|,
name|PrivilegedExceptionAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|user
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|ade
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected action to pass for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"' but was denied"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|verifyAllowed
parameter_list|(
name|PrivilegedExceptionAction
name|action
parameter_list|,
name|User
modifier|...
name|users
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|verifyDenied
parameter_list|(
name|User
name|user
parameter_list|,
name|PrivilegedExceptionAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|user
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected AccessDeniedException for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|e
parameter_list|)
block|{
comment|// in case of batch operations, and put, the client assembles a
comment|// RetriesExhaustedWithDetailsException instead of throwing an
comment|// AccessDeniedException
name|boolean
name|isAccessDeniedException
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Throwable
name|ex
range|:
name|e
operator|.
name|getCauses
argument_list|()
control|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|AccessDeniedException
condition|)
block|{
name|isAccessDeniedException
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isAccessDeniedException
condition|)
block|{
name|fail
argument_list|(
literal|"Not receiving AccessDeniedException for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|ade
parameter_list|)
block|{
comment|// expected result
block|}
block|}
specifier|public
name|void
name|verifyDenied
parameter_list|(
name|PrivilegedExceptionAction
name|action
parameter_list|,
name|User
modifier|...
name|users
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|createTable
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"testnewtable"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preCreateTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|createTable
argument_list|)
expr_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|createTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|createTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|createTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|createTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableModify
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|disableTable
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam_"
operator|+
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preModifyTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|disableTable
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam_new"
argument_list|)
decl_stmt|;
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preAddColumn
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preModifyColumn
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteColumn
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|disableTable
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDisableTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|disableTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableEnable
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|enableTable
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preEnableTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|enableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|enableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|enableTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|enableTable
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|enableTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMove
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|table
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|firstRegion
init|=
name|regions
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ServerName
name|server
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preMove
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|firstRegion
operator|.
name|getKey
argument_list|()
argument_list|,
name|server
argument_list|,
name|server
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssign
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|table
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|firstRegion
init|=
name|regions
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preAssign
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|firstRegion
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnassign
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|regions
init|=
name|table
operator|.
name|getRegionsInfo
argument_list|()
decl_stmt|;
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|HServerAddress
argument_list|>
name|firstRegion
init|=
name|regions
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preUnassign
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|firstRegion
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preBalance
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBalanceSwitch
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preBalanceSwitch
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preShutdown
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preStopMaster
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyWrite
parameter_list|(
name|PrivilegedExceptionAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
comment|// should be denied
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// should be allowed
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRead
parameter_list|(
name|PrivilegedExceptionAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
comment|// should be denied
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// should be allowed
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get action
name|PrivilegedExceptionAction
name|getAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyRead
argument_list|(
name|getAction
argument_list|)
expr_stmt|;
comment|// action for scanning
name|PrivilegedExceptionAction
name|scanAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Result
name|r
init|=
name|scanner
operator|.
name|next
argument_list|()
init|;
name|r
operator|!=
literal|null
condition|;
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
control|)
block|{
comment|// do nothing
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyRead
argument_list|(
name|scanAction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// test put, delete, increment
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// put action
name|PrivilegedExceptionAction
name|putAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Qualifier"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyWrite
argument_list|(
name|putAction
argument_list|)
expr_stmt|;
comment|// delete action
name|PrivilegedExceptionAction
name|deleteAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyWrite
argument_list|(
name|deleteAction
argument_list|)
expr_stmt|;
comment|// increment action
name|PrivilegedExceptionAction
name|incrementAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Qualifier"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|t
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyWrite
argument_list|(
name|incrementAction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantRevoke
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TempTable"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
comment|// create table
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwnerString
argument_list|(
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// create temp users
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"user"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// perms only stored against the first region
name|HTable
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
name|AccessControllerProtocol
name|protocol
init|=
name|acl
operator|.
name|coprocessorProxy
argument_list|(
name|AccessControllerProtocol
operator|.
name|class
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// prepare actions:
name|PrivilegedExceptionAction
name|putActionAll
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family2
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|putAction1
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|putAction2
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family2
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|getActionAll
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|getAction1
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|getAction2
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|deleteActionAll
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|deleteAction1
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|deleteAction2
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// initial check:
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// grant table read permission
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// check
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getActionAll
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// grant table write permission
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|putActionAll
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|putAction1
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|deleteActionAll
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|deleteAction1
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// revoke table permission
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// grant column family read permission
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getActionAll
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// grant column family write permission
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family2
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getActionAll
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction1
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction1
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// revoke column family permission
name|protocol
operator|.
name|revoke
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getActionAll
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteActionAll
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// delete table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasFoundUserPermission
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|,
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
parameter_list|)
block|{
return|return
name|perms
operator|.
name|contains
argument_list|(
name|userPermission
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantRevokeAtQualifierLevel
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testGrantRevokeAtQualifierLevel"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
comment|// create table
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwnerString
argument_list|(
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// create temp users
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"user"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|HTable
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
name|AccessControllerProtocol
name|protocol
init|=
name|acl
operator|.
name|coprocessorProxy
argument_list|(
name|AccessControllerProtocol
operator|.
name|class
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|PrivilegedExceptionAction
name|getQualifierAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|putQualifierAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
name|deleteQualifierAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"random_row"
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
comment|//d.deleteFamily(family1);
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
comment|// only grant write permission
comment|// TODO: comment this portion after HBASE-3583
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
comment|// grant both read and write permission.
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
comment|// revoke family level permission won't impact column level.
name|protocol
operator|.
name|revoke
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
comment|// delete table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermissionList
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testPermissionList"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|user
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
comment|// create table
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwnerString
argument_list|(
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|HTable
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
name|AccessControllerProtocol
name|protocol
init|=
name|acl
operator|.
name|coprocessorProxy
argument_list|(
name|AccessControllerProtocol
operator|.
name|class
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|UserPermission
name|up
init|=
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"User should not be granted permission: "
operator|+
name|up
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|up
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
comment|// grant read permission
name|UserPermission
name|upToSet
init|=
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
name|user
argument_list|,
name|upToSet
argument_list|)
expr_stmt|;
name|perms
operator|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|UserPermission
name|upToVerify
init|=
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User should be granted permission: "
operator|+
name|upToVerify
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|upToVerify
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
name|upToVerify
operator|=
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"User should not be granted permission: "
operator|+
name|upToVerify
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|upToVerify
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
comment|// grant read+write
name|upToSet
operator|=
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
name|user
argument_list|,
name|upToSet
argument_list|)
expr_stmt|;
name|perms
operator|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|upToVerify
operator|=
operator|new
name|UserPermission
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"User should be granted permission: "
operator|+
name|upToVerify
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|upToVerify
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
name|user
argument_list|,
name|upToSet
argument_list|)
expr_stmt|;
name|perms
operator|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"User should not be granted permission: "
operator|+
name|upToVerify
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|upToVerify
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/** global operations*/
specifier|private
name|void
name|verifyGlobal
parameter_list|(
name|PrivilegedExceptionAction
argument_list|<
name|?
argument_list|>
name|action
parameter_list|)
throws|throws
name|Exception
block|{
comment|// should be allowed
name|verifyAllowed
argument_list|(
name|SUPERUSER
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// should be denied
name|verifyDenied
argument_list|(
name|USER_OWNER
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RW
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NONE
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_RO
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkGlobalPerms
parameter_list|(
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
name|AccessControllerProtocol
name|protocol
init|=
name|acl
operator|.
name|coprocessorProxy
argument_list|(
name|AccessControllerProtocol
operator|.
name|class
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Permission
index|[]
name|perms
init|=
operator|new
name|Permission
index|[
name|actions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|perms
index|[
name|i
index|]
operator|=
operator|new
name|Permission
argument_list|(
name|actions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|protocol
operator|.
name|checkPermissions
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkTablePerms
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
index|[]
name|perms
init|=
operator|new
name|Permission
index|[
name|actions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|perms
index|[
name|i
index|]
operator|=
operator|new
name|TablePermission
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|column
argument_list|,
name|actions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|checkTablePerms
argument_list|(
name|table
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkTablePerms
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|Permission
modifier|...
name|perms
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|AccessControllerProtocol
name|protocol
init|=
name|acl
operator|.
name|coprocessorProxy
argument_list|(
name|AccessControllerProtocol
operator|.
name|class
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|checkPermissions
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|grant
parameter_list|(
name|AccessControllerProtocol
name|protocol
parameter_list|,
name|User
name|user
parameter_list|,
name|byte
index|[]
name|t
parameter_list|,
name|byte
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|q
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
name|protocol
operator|.
name|grant
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|t
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckPermissions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HTable
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|AccessControllerProtocol
name|protocol
init|=
name|acl
operator|.
name|coprocessorProxy
argument_list|(
name|AccessControllerProtocol
operator|.
name|class
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
comment|//--------------------------------------
comment|//test global permissions
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|globalAdmin
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkGlobalPerms
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|//verify that only superuser can admin
name|verifyGlobal
argument_list|(
name|globalAdmin
argument_list|)
expr_stmt|;
comment|//--------------------------------------
comment|//test multiple permissions
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|globalReadWrite
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkGlobalPerms
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyGlobal
argument_list|(
name|globalReadWrite
argument_list|)
expr_stmt|;
comment|//--------------------------------------
comment|//table/column/qualifier level permissions
specifier|final
name|byte
index|[]
name|TEST_Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
name|User
name|userTable
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_check_perms_table"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|userColumn
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_check_perms_family"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|userQualifier
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_check_perms_q"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|grant
argument_list|(
name|protocol
argument_list|,
name|userTable
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|protocol
argument_list|,
name|userColumn
argument_list|,
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|protocol
argument_list|,
name|userQualifier
argument_list|,
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|tableRead
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|columnRead
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|qualifierRead
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|multiQualifierRead
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
argument_list|,
operator|new
name|Permission
index|[]
block|{
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q2
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|globalAndTableRead
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
argument_list|,
operator|new
name|Permission
index|[]
block|{
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|noCheck
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
argument_list|,
operator|new
name|Permission
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|tableRead
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tableRead
argument_list|,
name|userColumn
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|columnRead
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|columnRead
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|qualifierRead
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|multiQualifierRead
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|multiQualifierRead
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|globalAndTableRead
argument_list|,
name|SUPERUSER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|globalAndTableRead
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|noCheck
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
comment|//--------------------------------------
comment|//test family level multiple permissions
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|familyReadWrite
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// should be allowed
name|verifyAllowed
argument_list|(
name|familyReadWrite
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|)
expr_stmt|;
comment|// should be denied
name|verifyDenied
argument_list|(
name|familyReadWrite
argument_list|,
name|USER_NONE
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
comment|//--------------------------------------
comment|//check for wrong table region
try|try
block|{
comment|//but ask for TablePermissions for TEST_TABLE
name|protocol
operator|.
name|checkPermissions
argument_list|(
operator|new
name|Permission
index|[]
block|{
operator|(
name|Permission
operator|)
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"this should have thrown CoprocessorException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CoprocessorException
name|ex
parameter_list|)
block|{
comment|//expected
block|}
block|}
block|}
end_class

end_unit

