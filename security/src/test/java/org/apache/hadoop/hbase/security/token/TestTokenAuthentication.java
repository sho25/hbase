begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseEndpointCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|SecureRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|SecureServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for authentication token creation and usage  */
end_comment

begin_class
specifier|public
class|class
name|TestTokenAuthentication
block|{
specifier|public
specifier|static
interface|interface
name|IdentityProtocol
extends|extends
name|CoprocessorProtocol
block|{
specifier|public
name|String
name|whoami
parameter_list|()
function_decl|;
specifier|public
name|String
name|getAuthMethod
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|IdentityCoprocessor
extends|extends
name|BaseEndpointCoprocessor
implements|implements
name|IdentityProtocol
block|{
specifier|public
name|String
name|whoami
parameter_list|()
block|{
return|return
name|RequestContext
operator|.
name|getRequestUserName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAuthMethod
parameter_list|()
block|{
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
name|User
name|user
init|=
name|RequestContext
operator|.
name|getRequestUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|ugi
operator|=
name|user
operator|.
name|getUGI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ugi
operator|!=
literal|null
condition|)
block|{
return|return
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
specifier|static
name|AuthenticationTokenSecretManager
name|secretManager
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HBaseRPC
operator|.
name|RPC_ENGINE_PROP
argument_list|,
name|SecureRpcEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.region.classes"
argument_list|,
name|IdentityCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RpcServer
name|server
init|=
name|rs
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|server
operator|instanceof
name|SecureServer
argument_list|)
expr_stmt|;
name|SecretManager
name|mgr
init|=
operator|(
operator|(
name|SecureServer
operator|)
name|server
operator|)
operator|.
name|getSecretManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mgr
operator|instanceof
name|AuthenticationTokenSecretManager
argument_list|)
expr_stmt|;
name|secretManager
operator|=
operator|(
name|AuthenticationTokenSecretManager
operator|)
name|mgr
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|generateToken
argument_list|(
literal|"testuser"
argument_list|)
decl_stmt|;
name|AuthenticationTokenIdentifier
name|ident
init|=
operator|new
name|AuthenticationTokenIdentifier
argument_list|()
decl_stmt|;
name|Writables
operator|.
name|getWritable
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|ident
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Token username should match"
argument_list|,
literal|"testuser"
argument_list|,
name|ident
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|passwd
init|=
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|ident
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Token password and password from secret manager should match"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|passwd
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// @Test - Disable due to kerberos requirement
specifier|public
name|void
name|testTokenAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|testuser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"testuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"testgroup"
block|}
argument_list|)
decl_stmt|;
name|testuser
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"randomkey"
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testuser
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|generateToken
argument_list|(
literal|"testuser"
argument_list|)
decl_stmt|;
name|testuser
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// verify the server authenticates us as this token user
name|testuser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
literal|".META."
argument_list|)
decl_stmt|;
name|IdentityProtocol
name|prot
init|=
name|table
operator|.
name|coprocessorProxy
argument_list|(
name|IdentityProtocol
operator|.
name|class
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|String
name|myname
init|=
name|prot
operator|.
name|whoami
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testuser"
argument_list|,
name|myname
argument_list|)
expr_stmt|;
name|String
name|authMethod
init|=
name|prot
operator|.
name|getAuthMethod
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TOKEN"
argument_list|,
name|authMethod
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

