begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|BaseSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|BaseSourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  A helper class that will allow tests to get into hadoop1's metrics2 values.  */
end_comment

begin_class
specifier|public
class|class
name|MetricsAssertHelperImpl
implements|implements
name|MetricsAssertHelper
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tags
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
name|gauges
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|counters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
class|class
name|MockMetricsBuilder
implements|implements
name|MetricsBuilder
block|{
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addRecord
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|MockRecordBuilder
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|MockRecordBuilder
extends|extends
name|MetricsRecordBuilder
block|{
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|tag
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
name|tags
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|s
argument_list|)
argument_list|,
name|s2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|add
parameter_list|(
name|MetricsTag
name|metricsTag
parameter_list|)
block|{
name|tags
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|metricsTag
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|metricsTag
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|setContext
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addCounter
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|counters
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|s
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addCounter
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|long
name|l
parameter_list|)
block|{
name|counters
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|s
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|gauges
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|s
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|long
name|l
parameter_list|)
block|{
name|gauges
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|s
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|float
name|v
parameter_list|)
block|{
name|gauges
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|s
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|,
name|double
name|v
parameter_list|)
block|{
name|gauges
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|s
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|add
parameter_list|(
name|Metric
name|metric
parameter_list|)
block|{
name|gauges
operator|.
name|put
argument_list|(
name|canonicalizeMetricName
argument_list|(
name|metric
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|metric
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
comment|// In hadoop 1 there's no minicluster mode so there's nothing to do here.
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertTag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|getMetrics
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|String
name|cName
init|=
name|canonicalizeMetricName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tags should be equal"
argument_list|,
name|expected
argument_list|,
name|tags
operator|.
name|get
argument_list|(
name|cName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|long
name|found
init|=
name|getGaugeLong
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Metrics Should be equal"
argument_list|,
operator|(
name|long
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertGaugeGt
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|double
name|found
init|=
name|getGaugeDouble
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|name
operator|+
literal|" ("
operator|+
name|found
operator|+
literal|") should be greater than "
operator|+
name|expected
argument_list|,
name|found
operator|>
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertGaugeLt
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|double
name|found
init|=
name|getGaugeDouble
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|name
operator|+
literal|"("
operator|+
name|found
operator|+
literal|") should be less than "
operator|+
name|expected
argument_list|,
name|found
operator|<
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|double
name|found
init|=
name|getGaugeDouble
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Metrics Should be equal"
argument_list|,
operator|(
name|double
operator|)
name|Double
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
argument_list|,
name|found
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertGaugeGt
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|double
name|found
init|=
name|getGaugeDouble
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|name
operator|+
literal|"("
operator|+
name|found
operator|+
literal|") should be greater than "
operator|+
name|expected
argument_list|,
name|found
operator|>
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertGaugeLt
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|double
name|found
init|=
name|getGaugeDouble
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|name
operator|+
literal|"("
operator|+
name|found
operator|+
literal|") should be less than "
operator|+
name|expected
argument_list|,
name|found
operator|<
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|long
name|found
init|=
name|getCounter
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Metrics Counters should be equal"
argument_list|,
operator|(
name|long
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertCounterGt
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|long
name|found
init|=
name|getCounter
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|name
operator|+
literal|" ("
operator|+
name|found
operator|+
literal|") should be greater than "
operator|+
name|expected
argument_list|,
name|found
operator|>
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertCounterLt
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|long
name|found
init|=
name|getCounter
argument_list|(
name|name
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|name
operator|+
literal|"("
operator|+
name|found
operator|+
literal|") should be less than "
operator|+
name|expected
argument_list|,
name|found
operator|<
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|getMetrics
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|String
name|cName
init|=
name|canonicalizeMetricName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get counter "
operator|+
name|cName
operator|+
literal|" but did not"
argument_list|,
name|counters
operator|.
name|get
argument_list|(
name|cName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|counters
operator|.
name|get
argument_list|(
name|cName
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getGaugeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|getMetrics
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|String
name|cName
init|=
name|canonicalizeMetricName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get gauge "
operator|+
name|cName
operator|+
literal|" but did not"
argument_list|,
name|gauges
operator|.
name|get
argument_list|(
name|cName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|gauges
operator|.
name|get
argument_list|(
name|cName
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getGaugeLong
parameter_list|(
name|String
name|name
parameter_list|,
name|BaseSource
name|source
parameter_list|)
block|{
name|getMetrics
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|String
name|cName
init|=
name|canonicalizeMetricName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get gauge "
operator|+
name|cName
operator|+
literal|" but did not"
argument_list|,
name|gauges
operator|.
name|get
argument_list|(
name|cName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|gauges
operator|.
name|get
argument_list|(
name|cName
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|tags
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gauges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|counters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|getMetrics
parameter_list|(
name|BaseSource
name|source
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|source
operator|instanceof
name|MetricsSource
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"The Source passed must be a MetricsSource"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|MetricsSource
name|impl
init|=
operator|(
name|MetricsSource
operator|)
name|source
decl_stmt|;
name|impl
operator|.
name|getMetrics
argument_list|(
operator|new
name|MockMetricsBuilder
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|canonicalizeMetricName
parameter_list|(
name|String
name|in
parameter_list|)
block|{
return|return
name|in
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[^A-Za-z0-9 ]"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

