begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_comment
comment|/**  * An optional metrics registry class for creating and maintaining a  * collection of MetricsMutables, making writing metrics source easier.  * NOTE: this is a copy of org.apache.hadoop.metrics2.lib.MetricsRegistry with added one  *       feature: metrics can be removed. When HADOOP-8313 is fixed, usages of this class  *       should be substituted with org.apache.hadoop.metrics2.lib.MetricsRegistry.  *       This implementation also provides handy methods for creating metrics dynamically.  *       Another difference is that metricsMap& tagsMap implementation is substituted with  *       concurrent map, as we allow dynamic metrics additions/removals.  */
end_comment

begin_class
specifier|public
class|class
name|DynamicMetricsRegistry
block|{
comment|/** key for the context tag */
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_KEY
init|=
literal|"context"
decl_stmt|;
comment|/** description for the context tag */
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_DESC
init|=
literal|"Metrics context"
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MetricMutable
argument_list|>
name|metricsMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MetricMutable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MetricsTag
argument_list|>
name|tagsMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MetricsTag
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|MetricMutableFactory
name|mf
decl_stmt|;
comment|/**    * Construct the registry with a record name    * @param name  of the record of the metrics    */
specifier|public
name|DynamicMetricsRegistry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|mf
operator|=
operator|new
name|MetricMutableFactory
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct the registry with a name and a metric factory    * @param name  of the record of the metrics    * @param factory for creating new mutable metrics    */
specifier|public
name|DynamicMetricsRegistry
parameter_list|(
name|String
name|name
parameter_list|,
name|MetricMutableFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|mf
operator|=
name|factory
expr_stmt|;
block|}
comment|/**    * @return  the name of the metrics registry    */
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Get a metric by name    * @param name  of the metric    * @return  the metric object    */
specifier|public
name|MetricMutable
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metricsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Create a mutable integer counter    * @param name  of the metric    * @param description of the metric    * @param initValue of the metric    * @return  a new counter object    */
specifier|public
name|MetricMutableCounterInt
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|int
name|initValue
parameter_list|)
block|{
name|MetricMutableCounterInt
name|ret
init|=
name|mf
operator|.
name|newCounter
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|initValue
argument_list|)
decl_stmt|;
return|return
name|addNewMetricIfAbsent
argument_list|(
name|name
argument_list|,
name|ret
argument_list|,
name|MetricMutableCounterInt
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Create a mutable long integer counter    * @param name  of the metric    * @param description of the metric    * @param initValue of the metric    * @return  a new counter object    */
specifier|public
name|MetricMutableCounterLong
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|long
name|initValue
parameter_list|)
block|{
name|MetricMutableCounterLong
name|ret
init|=
name|mf
operator|.
name|newCounter
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|initValue
argument_list|)
decl_stmt|;
return|return
name|addNewMetricIfAbsent
argument_list|(
name|name
argument_list|,
name|ret
argument_list|,
name|MetricMutableCounterLong
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Create a mutable integer gauge    * @param name  of the metric    * @param description of the metric    * @param initValue of the metric    * @return  a new gauge object    */
specifier|public
name|MetricMutableGaugeInt
name|newGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|int
name|initValue
parameter_list|)
block|{
name|MetricMutableGaugeInt
name|ret
init|=
name|mf
operator|.
name|newGauge
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|initValue
argument_list|)
decl_stmt|;
return|return
name|addNewMetricIfAbsent
argument_list|(
name|name
argument_list|,
name|ret
argument_list|,
name|MetricMutableGaugeInt
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Create a mutable long integer gauge    * @param name  of the metric    * @param description of the metric    * @param initValue of the metric    * @return  a new gauge object    */
specifier|public
name|MetricMutableGaugeLong
name|newGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|long
name|initValue
parameter_list|)
block|{
name|MetricMutableGaugeLong
name|ret
init|=
name|mf
operator|.
name|newGauge
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|initValue
argument_list|)
decl_stmt|;
return|return
name|addNewMetricIfAbsent
argument_list|(
name|name
argument_list|,
name|ret
argument_list|,
name|MetricMutableGaugeLong
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Create a mutable metric with stats    * @param name  of the metric    * @param description of the metric    * @param sampleName  of the metric (e.g., "ops")    * @param valueName   of the metric (e.g., "time" or "latency")    * @param extended    produce extended stat (stdev, min/max etc.) if true.    * @return  a new metric object    */
specifier|public
name|MetricMutableStat
name|newStat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|sampleName
parameter_list|,
name|String
name|valueName
parameter_list|,
name|boolean
name|extended
parameter_list|)
block|{
name|MetricMutableStat
name|ret
init|=
name|mf
operator|.
name|newStat
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|sampleName
argument_list|,
name|valueName
argument_list|,
name|extended
argument_list|)
decl_stmt|;
return|return
name|addNewMetricIfAbsent
argument_list|(
name|name
argument_list|,
name|ret
argument_list|,
name|MetricMutableStat
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Create a mutable metric with stats    * @param name  of the metric    * @param description of the metric    * @param sampleName  of the metric (e.g., "ops")    * @param valueName   of the metric (e.g., "time" or "latency")    * @return  a new metric object    */
specifier|public
name|MetricMutableStat
name|newStat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|sampleName
parameter_list|,
name|String
name|valueName
parameter_list|)
block|{
return|return
name|newStat
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|sampleName
argument_list|,
name|valueName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a mutable metric with stats using the name only    * @param name  of the metric    * @return a new metric object    */
specifier|public
name|MetricMutableStat
name|newStat
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|newStat
argument_list|(
name|name
argument_list|,
literal|""
argument_list|,
literal|"ops"
argument_list|,
literal|"time"
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set the metrics context tag    * @param name of the context    * @return the registry itself as a convenience    */
specifier|public
name|DynamicMetricsRegistry
name|setContext
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tag
argument_list|(
name|CONTEXT_KEY
argument_list|,
name|CONTEXT_DESC
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Add a tag to the metrics    * @param name  of the tag    * @param description of the tag    * @param value of the tag    * @return  the registry (for keep adding tags)    */
specifier|public
name|DynamicMetricsRegistry
name|tag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|tag
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Add a tag to the metrics    * @param name  of the tag    * @param description of the tag    * @param value of the tag    * @param override  existing tag if true    * @return  the registry (for keep adding tags)    */
specifier|public
name|DynamicMetricsRegistry
name|tag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|override
parameter_list|)
block|{
name|MetricsTag
name|tag
init|=
operator|new
name|MetricsTag
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|override
condition|)
block|{
name|MetricsTag
name|existing
init|=
name|tagsMap
operator|.
name|putIfAbsent
argument_list|(
name|name
argument_list|,
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Tag "
operator|+
name|name
operator|+
literal|" already exists!"
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
name|tagsMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|tag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Get the tags    * @return  the tags set    */
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|MetricsTag
argument_list|>
argument_list|>
name|tags
parameter_list|()
block|{
return|return
name|tagsMap
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/**    * Get the metrics    * @return  the metrics set    */
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|MetricMutable
argument_list|>
argument_list|>
name|metrics
parameter_list|()
block|{
return|return
name|metricsMap
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/**    * Sample all the mutable metrics and put the snapshot in the builder    * @param builder to contain the metrics snapshot    * @param all get all the metrics even if the values are not changed.    */
specifier|public
name|void
name|snapshot
parameter_list|(
name|MetricsRecordBuilder
name|builder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|MetricsTag
argument_list|>
name|entry
range|:
name|tags
argument_list|()
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|MetricMutable
argument_list|>
name|entry
range|:
name|metrics
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|snapshot
argument_list|(
name|builder
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Removes metric by name    * @param name name of the metric to remove    */
specifier|public
name|void
name|removeMetric
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|metricsMap
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a MetricMutableGaugeLong from the storage.  If it is not there    * atomically put it.    *    * @param gaugeName              name of the gauge to create or get.    * @param potentialStartingValue value of the new counter if we have to create it.    * @return a metric object    */
specifier|public
name|MetricMutableGaugeLong
name|getLongGauge
parameter_list|(
name|String
name|gaugeName
parameter_list|,
name|long
name|potentialStartingValue
parameter_list|)
block|{
comment|//Try and get the guage.
name|MetricMutable
name|metric
init|=
name|metricsMap
operator|.
name|get
argument_list|(
name|gaugeName
argument_list|)
decl_stmt|;
comment|//If it's not there then try and put a new one in the storage.
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
comment|//Create the potential new gauge.
name|MetricMutableGaugeLong
name|newGauge
init|=
operator|new
name|MetricMutableGaugeLong
argument_list|(
name|gaugeName
argument_list|,
literal|""
argument_list|,
name|potentialStartingValue
argument_list|)
decl_stmt|;
comment|// Try and put the gauge in.  This is atomic.
name|metric
operator|=
name|metricsMap
operator|.
name|putIfAbsent
argument_list|(
name|gaugeName
argument_list|,
name|newGauge
argument_list|)
expr_stmt|;
comment|//If the value we get back is null then the put was successful and we will
comment|// return that. Otherwise gaugeLong should contain the thing that was in
comment|// before the put could be completed.
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
return|return
name|newGauge
return|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|metric
operator|instanceof
name|MetricMutableGaugeLong
operator|)
condition|)
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Metric already exists in registry for metric name: "
operator|+
name|name
operator|+
literal|" and not of type MetricMutableGaugeLong"
argument_list|)
throw|;
block|}
return|return
operator|(
name|MetricMutableGaugeLong
operator|)
name|metric
return|;
block|}
comment|/**    * Get a MetricMutableCounterLong from the storage.  If it is not there    * atomically put it.    *    * @param counterName            Name of the counter to get    * @param potentialStartingValue starting value if we have to create a new counter    * @return a metric object    */
specifier|public
name|MetricMutableCounterLong
name|getLongCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|long
name|potentialStartingValue
parameter_list|)
block|{
comment|//See getLongGauge for description on how this works.
name|MetricMutable
name|counter
init|=
name|metricsMap
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
name|MetricMutableCounterLong
name|newCounter
init|=
operator|new
name|MetricMutableCounterLong
argument_list|(
name|counterName
argument_list|,
literal|""
argument_list|,
name|potentialStartingValue
argument_list|)
decl_stmt|;
name|counter
operator|=
name|metricsMap
operator|.
name|putIfAbsent
argument_list|(
name|counterName
argument_list|,
name|newCounter
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
return|return
name|newCounter
return|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|counter
operator|instanceof
name|MetricMutableCounterLong
operator|)
condition|)
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Metric already exists in registry for metric name: "
operator|+
name|name
operator|+
literal|"and not of type MetricMutableCounterLong"
argument_list|)
throw|;
block|}
return|return
operator|(
name|MetricMutableCounterLong
operator|)
name|counter
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|MetricMutable
parameter_list|>
name|T
name|addNewMetricIfAbsent
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|ret
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|metricClass
parameter_list|)
block|{
comment|//If the value we get back is null then the put was successful and we will
comment|// return that. Otherwise metric should contain the thing that was in
comment|// before the put could be completed.
name|MetricMutable
name|metric
init|=
name|metricsMap
operator|.
name|putIfAbsent
argument_list|(
name|name
argument_list|,
name|ret
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
return|return
name|returnExistingWithCast
argument_list|(
name|metric
argument_list|,
name|metricClass
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|returnExistingWithCast
parameter_list|(
name|MetricMutable
name|metric
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|metricClass
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|metricClass
operator|.
name|isAssignableFrom
argument_list|(
name|metric
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Metric already exists in registry for metric name: "
operator|+
name|name
operator|+
literal|" and not of type "
operator|+
name|metricClass
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|metric
return|;
block|}
specifier|public
name|void
name|clearMetrics
parameter_list|()
block|{
name|metricsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

