begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|ExponentiallyDecayingSample
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Sample
import|;
end_import

begin_import
import|import
name|com
operator|.
name|yammer
operator|.
name|metrics
operator|.
name|stats
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricMutable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  *  A histogram implementation that runs in constant space, and exports to hadoop's metrics2 system.  */
end_comment

begin_class
specifier|public
class|class
name|MetricMutableHistogram
extends|extends
name|MetricMutable
implements|implements
name|MetricHistogram
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SAMPLE_SIZE
init|=
literal|2046
decl_stmt|;
comment|// the bias towards sampling from more recent data.
comment|// Per Cormode et al. an alpha of 0.015 strongly biases to the last 5 minutes
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_ALPHA
init|=
literal|0.015
decl_stmt|;
specifier|private
specifier|final
name|Sample
name|sample
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|min
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|max
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|sum
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|count
decl_stmt|;
specifier|public
name|MetricMutableHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|sample
operator|=
operator|new
name|ExponentiallyDecayingSample
argument_list|(
name|DEFAULT_SAMPLE_SIZE
argument_list|,
name|DEFAULT_ALPHA
argument_list|)
expr_stmt|;
name|count
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|min
operator|=
operator|new
name|AtomicLong
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|max
operator|=
operator|new
name|AtomicLong
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|sum
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
name|setChanged
argument_list|()
expr_stmt|;
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|sample
operator|.
name|update
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|setMax
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|setMin
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|sum
operator|.
name|getAndAdd
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setMax
parameter_list|(
specifier|final
name|long
name|potentialMax
parameter_list|)
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
specifier|final
name|long
name|currentMax
init|=
name|max
operator|.
name|get
argument_list|()
decl_stmt|;
name|done
operator|=
name|currentMax
operator|>=
name|potentialMax
operator|||
name|max
operator|.
name|compareAndSet
argument_list|(
name|currentMax
argument_list|,
name|potentialMax
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setMin
parameter_list|(
name|long
name|potentialMin
parameter_list|)
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
specifier|final
name|long
name|currentMin
init|=
name|min
operator|.
name|get
argument_list|()
decl_stmt|;
name|done
operator|=
name|currentMin
operator|<=
name|potentialMin
operator|||
name|min
operator|.
name|compareAndSet
argument_list|(
name|currentMin
argument_list|,
name|potentialMin
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getMax
parameter_list|()
block|{
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|max
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|0L
return|;
block|}
specifier|public
name|long
name|getMin
parameter_list|()
block|{
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|min
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|0L
return|;
block|}
specifier|public
name|double
name|getMean
parameter_list|()
block|{
name|long
name|cCount
init|=
name|count
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|cCount
operator|>
literal|0
condition|)
block|{
return|return
name|sum
operator|.
name|get
argument_list|()
operator|/
operator|(
name|double
operator|)
name|cCount
return|;
block|}
return|return
literal|0.0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
name|MetricsRecordBuilder
name|metricsRecordBuilder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
name|all
operator|||
name|changed
argument_list|()
condition|)
block|{
name|clearChanged
argument_list|()
expr_stmt|;
specifier|final
name|Snapshot
name|s
init|=
name|sample
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|metricsRecordBuilder
operator|.
name|addCounter
argument_list|(
name|name
operator|+
name|NUM_OPS_METRIC_NAME
argument_list|,
literal|""
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecordBuilder
operator|.
name|addGauge
argument_list|(
name|name
operator|+
name|MIN_METRIC_NAME
argument_list|,
literal|""
argument_list|,
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecordBuilder
operator|.
name|addGauge
argument_list|(
name|name
operator|+
name|MAX_METRIC_NAME
argument_list|,
literal|""
argument_list|,
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecordBuilder
operator|.
name|addGauge
argument_list|(
name|name
operator|+
name|MEAN_METRIC_NAME
argument_list|,
literal|""
argument_list|,
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecordBuilder
operator|.
name|addGauge
argument_list|(
name|name
operator|+
name|MEDIAN_METRIC_NAME
argument_list|,
literal|""
argument_list|,
name|s
operator|.
name|getMedian
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecordBuilder
operator|.
name|addGauge
argument_list|(
name|name
operator|+
name|SEVENTY_FIFTH_PERCENTILE_METRIC_NAME
argument_list|,
literal|""
argument_list|,
name|s
operator|.
name|get75thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecordBuilder
operator|.
name|addGauge
argument_list|(
name|name
operator|+
name|NINETY_FIFTH_PERCENTILE_METRIC_NAME
argument_list|,
literal|""
argument_list|,
name|s
operator|.
name|get95thPercentile
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecordBuilder
operator|.
name|addGauge
argument_list|(
name|name
operator|+
name|NINETY_NINETH_PERCENTILE_METRIC_NAME
argument_list|,
literal|""
argument_list|,
name|s
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

