begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DynamicMetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricMutable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricMutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricMutableGaugeLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|source
operator|.
name|JvmMetricsSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_comment
comment|/**  * Hadoop 1 implementation of BaseMetricsSource (using metrics2 framework)  */
end_comment

begin_class
specifier|public
class|class
name|BaseMetricsSourceImpl
implements|implements
name|BaseMetricsSource
implements|,
name|MetricsSource
block|{
specifier|private
specifier|static
name|boolean
name|defaultMetricsSystemInited
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_METRICS_SYSTEM_NAME
init|=
literal|"hbase"
decl_stmt|;
specifier|final
name|DynamicMetricsRegistry
name|metricsRegistry
decl_stmt|;
specifier|private
name|JvmMetricsSource
name|jvmMetricsSource
decl_stmt|;
specifier|public
name|BaseMetricsSourceImpl
parameter_list|(
name|String
name|metricsName
parameter_list|,
name|String
name|metricsDescription
parameter_list|,
name|String
name|metricsContext
parameter_list|)
block|{
name|metricsRegistry
operator|=
operator|new
name|DynamicMetricsRegistry
argument_list|(
name|metricsName
argument_list|)
operator|.
name|setContext
argument_list|(
name|metricsContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|defaultMetricsSystemInited
condition|)
block|{
comment|//Not too worried about mutli-threaded here as all it does is spam the logs.
name|defaultMetricsSystemInited
operator|=
literal|true
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
name|HBASE_METRICS_SYSTEM_NAME
argument_list|)
expr_stmt|;
comment|//If this is the first time through register a jvm source.
name|jvmMetricsSource
operator|=
name|JvmMetricsSource
operator|.
name|create
argument_list|(
name|metricsName
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|//Register this instance.
name|DefaultMetricsSystem
operator|.
name|INSTANCE
operator|.
name|registerSource
argument_list|(
name|metricsContext
argument_list|,
name|metricsDescription
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a MetricMutableGaugeLong from the storage.  If it is not there atomically put it.    *    * @param gaugeName              name of the gauge to create or get.    * @param potentialStartingValue value of the new gauge if we have to create it.    * @return a metric object    */
specifier|protected
name|MetricMutableGaugeLong
name|getLongGauge
parameter_list|(
name|String
name|gaugeName
parameter_list|,
name|long
name|potentialStartingValue
parameter_list|)
block|{
return|return
name|metricsRegistry
operator|.
name|getLongGauge
argument_list|(
name|gaugeName
argument_list|,
name|potentialStartingValue
argument_list|)
return|;
block|}
comment|/**    * Get a MetricMutableCounterLong from the storage.  If it is not there atomically put it.    *    * @param counterName            Name of the counter to get    * @param potentialStartingValue starting value if we have to create a new counter    * @return a metric object    */
specifier|protected
name|MetricMutableCounterLong
name|getLongCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|long
name|potentialStartingValue
parameter_list|)
block|{
return|return
name|metricsRegistry
operator|.
name|getLongCounter
argument_list|(
name|counterName
argument_list|,
name|potentialStartingValue
argument_list|)
return|;
block|}
comment|/**    * Set a single gauge to a value.    *    * @param gaugeName gauge name    * @param value     the new value of the gauge.    */
specifier|public
name|void
name|setGauge
parameter_list|(
name|String
name|gaugeName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|MetricMutableGaugeLong
name|gaugeInt
init|=
name|metricsRegistry
operator|.
name|getLongGauge
argument_list|(
name|gaugeName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|gaugeInt
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add some amount to a gauge.    *    * @param gaugeName The name of the gauge to increment.    * @param delta     The amount to increment the gauge by.    */
specifier|public
name|void
name|incGauge
parameter_list|(
name|String
name|gaugeName
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|MetricMutableGaugeLong
name|gaugeInt
init|=
name|metricsRegistry
operator|.
name|getLongGauge
argument_list|(
name|gaugeName
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
name|gaugeInt
operator|.
name|incr
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
comment|/**    * Decrease the value of a named gauge.    *    * @param gaugeName The name of the gauge.    * @param delta     the ammount to subtract from a gauge value.    */
specifier|public
name|void
name|decGauge
parameter_list|(
name|String
name|gaugeName
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|MetricMutableGaugeLong
name|gaugeInt
init|=
name|metricsRegistry
operator|.
name|getLongGauge
argument_list|(
name|gaugeName
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
name|gaugeInt
operator|.
name|decr
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increment a named counter by some value.    *    * @param key   the name of the counter    * @param delta the ammount to increment    */
specifier|public
name|void
name|incCounters
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|MetricMutableCounterLong
name|counter
init|=
name|metricsRegistry
operator|.
name|getLongCounter
argument_list|(
name|key
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
name|counter
operator|.
name|incr
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a named gauge.    *    * @param key    */
specifier|public
name|void
name|removeGauge
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|metricsRegistry
operator|.
name|removeMetric
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a named counter.    *    * @param key    */
specifier|public
name|void
name|removeCounter
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|metricsRegistry
operator|.
name|removeMetric
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method to export all the metrics.    *    * @param metricsBuilder Builder to accept metrics    * @param all            push all or only changed?    */
annotation|@
name|Override
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsBuilder
name|metricsBuilder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|metricsRegistry
operator|.
name|snapshot
argument_list|(
name|metricsBuilder
operator|.
name|addRecord
argument_list|(
name|metricsRegistry
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

