begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|OneofDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|EnumLite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A partial implementation of the {@link Message} interface which implements  * as many methods of that interface as possible in terms of other methods.  *  * @author kenton@google.com Kenton Varda  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMessage
comment|// TODO(dweis): Update GeneratedMessage to parameterize with MessageType and BuilderType.
extends|extends
name|AbstractMessageLite
implements|implements
name|Message
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|MessageReflection
operator|.
name|isInitialized
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Interface for the parent of a Builder that allows the builder to    * communicate invalidations back to the parent for use when using nested    * builders.    */
specifier|protected
interface|interface
name|BuilderParent
block|{
comment|/**      * A builder becomes dirty whenever a field is modified -- including fields      * in nested builders -- and becomes clean when build() is called.  Thus,      * when a builder becomes dirty, all its parents become dirty as well, and      * when it becomes clean, all its children become clean.  The dirtiness      * state is used to invalidate certain cached values.      *<br>      * To this end, a builder calls markDirty() on its parent whenever it      * transitions from clean to dirty.  The parent must propagate this call to      * its own parent, unless it was already dirty, in which case the      * grandparent must necessarily already be dirty as well.  The parent can      * only transition back to "clean" after calling build() on all children.      */
name|void
name|markDirty
parameter_list|()
function_decl|;
block|}
comment|/** Create a nested builder. */
specifier|protected
name|Message
operator|.
name|Builder
name|newBuilderForType
parameter_list|(
name|BuilderParent
name|parent
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Nested builder is not supported for this type."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findInitializationErrors
parameter_list|()
block|{
return|return
name|MessageReflection
operator|.
name|findMissingFields
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getInitializationErrorString
parameter_list|()
block|{
return|return
name|MessageReflection
operator|.
name|delimitWithCommas
argument_list|(
name|findInitializationErrors
argument_list|()
argument_list|)
return|;
block|}
comment|/** TODO(jieluo): Clear it when all subclasses have implemented this method. */
annotation|@
name|Override
specifier|public
name|boolean
name|hasOneof
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"hasOneof() is not implemented."
argument_list|)
throw|;
block|}
comment|/** TODO(jieluo): Clear it when all subclasses have implemented this method. */
annotation|@
name|Override
specifier|public
name|FieldDescriptor
name|getOneofFieldDescriptor
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getOneofFieldDescriptor() is not implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|TextFormat
operator|.
name|printToString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageReflection
operator|.
name|writeMessageTo
argument_list|(
name|this
argument_list|,
name|getAllFields
argument_list|()
argument_list|,
name|output
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|memoizedSize
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|size
return|;
block|}
name|memoizedSize
operator|=
name|MessageReflection
operator|.
name|getSerializedSize
argument_list|(
name|this
argument_list|,
name|getAllFields
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|memoizedSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|Message
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Message
name|otherMessage
init|=
operator|(
name|Message
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|getDescriptorForType
argument_list|()
operator|!=
name|otherMessage
operator|.
name|getDescriptorForType
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareFields
argument_list|(
name|getAllFields
argument_list|()
argument_list|,
name|otherMessage
operator|.
name|getAllFields
argument_list|()
argument_list|)
operator|&&
name|getUnknownFields
argument_list|()
operator|.
name|equals
argument_list|(
name|otherMessage
operator|.
name|getUnknownFields
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|memoizedHashCode
decl_stmt|;
if|if
condition|(
name|hash
operator|==
literal|0
condition|)
block|{
name|hash
operator|=
literal|41
expr_stmt|;
name|hash
operator|=
operator|(
literal|19
operator|*
name|hash
operator|)
operator|+
name|getDescriptorForType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
name|hashFields
argument_list|(
name|hash
argument_list|,
name|getAllFields
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|=
operator|(
literal|29
operator|*
name|hash
operator|)
operator|+
name|getUnknownFields
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|memoizedHashCode
operator|=
name|hash
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
specifier|private
specifier|static
name|ByteString
name|toByteString
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|ByteString
operator|.
name|copyFrom
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|ByteString
operator|)
name|value
return|;
block|}
block|}
comment|/**    * Compares two bytes fields. The parameters must be either a byte array or a    * ByteString object. They can be of different type though.    */
specifier|private
specifier|static
name|boolean
name|compareBytes
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|byte
index|[]
operator|&&
name|b
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|a
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|b
argument_list|)
return|;
block|}
return|return
name|toByteString
argument_list|(
name|a
argument_list|)
operator|.
name|equals
argument_list|(
name|toByteString
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Converts a list of MapEntry messages into a Map used for equals() and    * hashCode().    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
specifier|static
name|Map
name|convertMapEntryListToMap
parameter_list|(
name|List
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
name|result
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Message
name|entry
init|=
operator|(
name|Message
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Descriptors
operator|.
name|Descriptor
name|descriptor
init|=
name|entry
operator|.
name|getDescriptorForType
argument_list|()
decl_stmt|;
name|Descriptors
operator|.
name|FieldDescriptor
name|key
init|=
name|descriptor
operator|.
name|findFieldByName
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
name|Descriptors
operator|.
name|FieldDescriptor
name|value
init|=
name|descriptor
operator|.
name|findFieldByName
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Object
name|fieldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|instanceof
name|EnumValueDescriptor
condition|)
block|{
name|fieldValue
operator|=
operator|(
operator|(
name|EnumValueDescriptor
operator|)
name|fieldValue
operator|)
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|key
argument_list|)
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|entry
operator|=
operator|(
name|Message
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|fieldValue
operator|=
name|entry
operator|.
name|getField
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldValue
operator|instanceof
name|EnumValueDescriptor
condition|)
block|{
name|fieldValue
operator|=
operator|(
operator|(
name|EnumValueDescriptor
operator|)
name|fieldValue
operator|)
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|key
argument_list|)
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Compares two map fields. The parameters must be a list of MapEntry    * messages.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
specifier|static
name|boolean
name|compareMapField
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
name|Map
name|ma
init|=
name|convertMapEntryListToMap
argument_list|(
operator|(
name|List
operator|)
name|a
argument_list|)
decl_stmt|;
name|Map
name|mb
init|=
name|convertMapEntryListToMap
argument_list|(
operator|(
name|List
operator|)
name|b
argument_list|)
decl_stmt|;
return|return
name|MapFieldLite
operator|.
name|equals
argument_list|(
name|ma
argument_list|,
name|mb
argument_list|)
return|;
block|}
comment|/**    * Compares two set of fields.    * This method is used to implement {@link AbstractMessage#equals(Object)}    * and {@link AbstractMutableMessage#equals(Object)}. It takes special care    * of bytes fields because immutable messages and mutable messages use    * different Java type to reprensent a bytes field and this method should be    * able to compare immutable messages, mutable messages and also an immutable    * message to a mutable message.    */
specifier|static
name|boolean
name|compareFields
parameter_list|(
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|a
parameter_list|,
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|!=
name|b
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|FieldDescriptor
name|descriptor
range|:
name|a
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|b
operator|.
name|containsKey
argument_list|(
name|descriptor
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|value1
init|=
name|a
operator|.
name|get
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
name|Object
name|value2
init|=
name|b
operator|.
name|get
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|.
name|getType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|Type
operator|.
name|BYTES
condition|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
name|List
name|list1
init|=
operator|(
name|List
operator|)
name|value1
decl_stmt|;
name|List
name|list2
init|=
operator|(
name|List
operator|)
name|value2
decl_stmt|;
if|if
condition|(
name|list1
operator|.
name|size
argument_list|()
operator|!=
name|list2
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|compareBytes
argument_list|(
name|list1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
comment|// Compares a singular bytes field.
if|if
condition|(
operator|!
name|compareBytes
argument_list|(
name|value1
argument_list|,
name|value2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|descriptor
operator|.
name|isMapField
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|compareMapField
argument_list|(
name|value1
argument_list|,
name|value2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// Compare non-bytes fields.
if|if
condition|(
operator|!
name|value1
operator|.
name|equals
argument_list|(
name|value2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Calculates the hash code of a map field. {@code value} must be a list of    * MapEntry messages.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|int
name|hashMapField
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|MapFieldLite
operator|.
name|calculateHashCodeForMap
argument_list|(
name|convertMapEntryListToMap
argument_list|(
operator|(
name|List
operator|)
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/** Get a hash code for given fields and values, using the given seed. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
specifier|static
name|int
name|hashFields
parameter_list|(
name|int
name|hash
parameter_list|,
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FieldDescriptor
name|field
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|field
operator|.
name|getNumber
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isMapField
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|hashMapField
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|!=
name|FieldDescriptor
operator|.
name|Type
operator|.
name|ENUM
condition|)
block|{
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|value
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|EnumLite
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
extends|extends
name|EnumLite
argument_list|>
operator|)
name|value
decl_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|Internal
operator|.
name|hashEnumList
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|Internal
operator|.
name|hashEnum
argument_list|(
operator|(
name|EnumLite
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hash
return|;
block|}
comment|/**    * Package private helper method for AbstractParser to create    * UninitializedMessageException with missing field information.    */
annotation|@
name|Override
name|UninitializedMessageException
name|newUninitializedMessageException
parameter_list|()
block|{
return|return
name|Builder
operator|.
name|newUninitializedMessageException
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|// =================================================================
comment|/**    * A partial implementation of the {@link Message.Builder} interface which    * implements as many methods of that interface as possible in terms of    * other methods.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
specifier|abstract
class|class
name|Builder
parameter_list|<
name|BuilderType
extends|extends
name|Builder
parameter_list|<
name|BuilderType
parameter_list|>
parameter_list|>
extends|extends
name|AbstractMessageLite
operator|.
name|Builder
implements|implements
name|Message
operator|.
name|Builder
block|{
comment|// The compiler produces an error if this is not declared explicitly.
annotation|@
name|Override
specifier|public
specifier|abstract
name|BuilderType
name|clone
parameter_list|()
function_decl|;
comment|/** TODO(jieluo): Clear it when all subclasses have implemented this method. */
annotation|@
name|Override
specifier|public
name|boolean
name|hasOneof
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"hasOneof() is not implemented."
argument_list|)
throw|;
block|}
comment|/** TODO(jieluo): Clear it when all subclasses have implemented this method. */
annotation|@
name|Override
specifier|public
name|FieldDescriptor
name|getOneofFieldDescriptor
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getOneofFieldDescriptor() is not implemented."
argument_list|)
throw|;
block|}
comment|/** TODO(jieluo): Clear it when all subclasses have implemented this method. */
annotation|@
name|Override
specifier|public
name|BuilderType
name|clearOneof
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"clearOneof() is not implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|clear
parameter_list|()
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|getAllFields
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|clearField
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findInitializationErrors
parameter_list|()
block|{
return|return
name|MessageReflection
operator|.
name|findMissingFields
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getInitializationErrorString
parameter_list|()
block|{
return|return
name|MessageReflection
operator|.
name|delimitWithCommas
argument_list|(
name|findInitializationErrors
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BuilderType
name|internalMergeFrom
parameter_list|(
name|AbstractMessageLite
name|other
parameter_list|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|Message
operator|)
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|getDescriptorForType
argument_list|()
operator|!=
name|getDescriptorForType
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mergeFrom(Message) can only merge messages of the same type."
argument_list|)
throw|;
block|}
comment|// Note:  We don't attempt to verify that other's fields have valid
comment|//   types.  Doing so would be a losing battle.  We'd have to verify
comment|//   all sub-messages as well, and we'd have to make copies of all of
comment|//   them to insure that they don't change after verification (since
comment|//   the Message interface itself cannot enforce immutability of
comment|//   implementations).
comment|// TODO(kenton):  Provide a function somewhere called makeDeepCopy()
comment|//   which allows people to make secure deep copies of messages.
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|other
operator|.
name|getAllFields
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|FieldDescriptor
name|field
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Object
name|element
range|:
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|addRepeatedField
argument_list|(
name|field
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getJavaType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
specifier|final
name|Message
name|existingValue
init|=
operator|(
name|Message
operator|)
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingValue
operator|==
name|existingValue
operator|.
name|getDefaultInstanceForType
argument_list|()
condition|)
block|{
name|setField
argument_list|(
name|field
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setField
argument_list|(
name|field
argument_list|,
name|existingValue
operator|.
name|newBuilderForType
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|existingValue
argument_list|)
operator|.
name|mergeFrom
argument_list|(
operator|(
name|Message
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setField
argument_list|(
name|field
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|getUnknownFields
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergeFrom
argument_list|(
name|input
argument_list|,
name|ExtensionRegistry
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|CodedInputStream
name|input
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|(
name|getUnknownFields
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|MessageReflection
operator|.
name|BuilderAdapter
name|builderAdapter
init|=
operator|new
name|MessageReflection
operator|.
name|BuilderAdapter
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|MessageReflection
operator|.
name|mergeFieldFrom
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|getDescriptorForType
argument_list|()
argument_list|,
name|builderAdapter
argument_list|,
name|tag
argument_list|)
condition|)
block|{
comment|// end group tag
break|break;
block|}
block|}
name|setUnknownFields
argument_list|(
name|unknownFields
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeUnknownFields
parameter_list|(
specifier|final
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
name|setUnknownFields
argument_list|(
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|(
name|getUnknownFields
argument_list|()
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|unknownFields
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
operator|.
name|Builder
name|getFieldBuilder
parameter_list|(
specifier|final
name|FieldDescriptor
name|field
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getFieldBuilder() called on an unsupported message type."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Message
operator|.
name|Builder
name|getRepeatedFieldBuilder
parameter_list|(
specifier|final
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getRepeatedFieldBuilder() called on an unsupported message type."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|TextFormat
operator|.
name|printToString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Construct an UninitializedMessageException reporting missing fields in      * the given message.      */
specifier|protected
specifier|static
name|UninitializedMessageException
name|newUninitializedMessageException
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|new
name|UninitializedMessageException
argument_list|(
name|MessageReflection
operator|.
name|findMissingFields
argument_list|(
name|message
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Used to support nested builders and called to mark this builder as clean.      * Clean builders will propagate the {@link BuilderParent#markDirty()} event      * to their parent builders, while dirty builders will not, as their parents      * should be dirty already.      *      * NOTE: Implementations that don't support nested builders don't need to      * override this method.      */
name|void
name|markClean
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should be overridden by subclasses."
argument_list|)
throw|;
block|}
comment|/**      * Used to support nested builders and called when this nested builder is      * no longer used by its parent builder and should release the reference      * to its parent builder.      *      * NOTE: Implementations that don't support nested builders don't need to      * override this method.      */
name|void
name|dispose
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should be overridden by subclasses."
argument_list|)
throw|;
block|}
comment|// ===============================================================
comment|// The following definitions seem to be required in order to make javac
comment|// not produce weird errors like:
comment|//
comment|// java/org.apache.hadoop.hbase.shaded.com.google.protobuf/DynamicMessage.java:203: types
comment|//   org.apache.hadoop.hbase.shaded.com.google.protobuf.AbstractMessage.Builder<
comment|//     org.apache.hadoop.hbase.shaded.com.google.protobuf.DynamicMessage.Builder> and
comment|//   org.apache.hadoop.hbase.shaded.com.google.protobuf.AbstractMessage.Builder<
comment|//     org.apache.hadoop.hbase.shaded.com.google.protobuf.DynamicMessage.Builder> are incompatible; both
comment|//   define mergeFrom(org.apache.hadoop.hbase.shaded.com.google.protobuf.ByteString), but with unrelated
comment|//   return types.
comment|//
comment|// Strangely, these lines are only needed if javac is invoked separately
comment|// on AbstractMessage.java and AbstractMessageLite.java.  If javac is
comment|// invoked on both simultaneously, it works.  (Or maybe the important
comment|// point is whether or not DynamicMessage.java is compiled together with
comment|// AbstractMessageLite.java -- not sure.)  I suspect this is a compiler
comment|// bug.
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|ByteString
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|(
name|BuilderType
operator|)
name|super
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|ByteString
name|data
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|(
name|BuilderType
operator|)
name|super
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|(
name|BuilderType
operator|)
name|super
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|(
name|BuilderType
operator|)
name|super
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|(
name|BuilderType
operator|)
name|super
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|(
name|BuilderType
operator|)
name|super
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|BuilderType
operator|)
name|super
operator|.
name|mergeFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|BuilderType
operator|)
name|super
operator|.
name|mergeFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mergeDelimitedFrom
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|mergeDelimitedFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mergeDelimitedFrom
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|mergeDelimitedFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
comment|/**    * @deprecated from v3.0.0-beta-3+, for compatibility with v2.5.0 and v2.6.1    * generated code.    */
annotation|@
name|Deprecated
specifier|protected
specifier|static
name|int
name|hashLong
parameter_list|(
name|long
name|n
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|n
operator|^
operator|(
name|n
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
comment|//
comment|/**    * @deprecated from v3.0.0-beta-3+, for compatibility with v2.5.0 and v2.6.1    * generated code.    */
annotation|@
name|Deprecated
specifier|protected
specifier|static
name|int
name|hashBoolean
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
name|b
condition|?
literal|1231
else|:
literal|1237
return|;
block|}
comment|//
comment|/**    * @deprecated from v3.0.0-beta-3+, for compatibility with v2.5.0 and v2.6.1    * generated code.    */
annotation|@
name|Deprecated
specifier|protected
specifier|static
name|int
name|hashEnum
parameter_list|(
name|EnumLite
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getNumber
argument_list|()
return|;
block|}
comment|//
comment|/**    * @deprecated from v3.0.0-beta-3+, for compatibility with v2.5.0 and v2.6.1    * generated code.    */
annotation|@
name|Deprecated
specifier|protected
specifier|static
name|int
name|hashEnumList
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|EnumLite
argument_list|>
name|list
parameter_list|)
block|{
name|int
name|hash
init|=
literal|1
decl_stmt|;
for|for
control|(
name|EnumLite
name|e
range|:
name|list
control|)
block|{
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|hashEnum
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
block|}
end_class

end_unit

