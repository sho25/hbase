begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|EnumLite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Internal representation of map fields in generated lite-runtime messages.  *  * This class is a protobuf implementation detail. Users shouldn't use this  * class directly.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MapFieldLite
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
name|boolean
name|isMutable
decl_stmt|;
specifier|private
name|MapFieldLite
parameter_list|()
block|{
name|this
operator|.
name|isMutable
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|MapFieldLite
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapData
parameter_list|)
block|{
name|super
argument_list|(
name|mapData
argument_list|)
expr_stmt|;
name|this
operator|.
name|isMutable
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
specifier|static
specifier|final
name|MapFieldLite
name|EMPTY_MAP_FIELD
init|=
operator|new
name|MapFieldLite
argument_list|()
decl_stmt|;
static|static
block|{
name|EMPTY_MAP_FIELD
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
block|}
comment|/** Returns an singleton immutable empty MapFieldLite instance. */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"cast"
block|}
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|emptyMapField
parameter_list|()
block|{
return|return
operator|(
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|EMPTY_MAP_FIELD
return|;
block|}
specifier|public
name|void
name|mergeFrom
parameter_list|(
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
name|ensureMutable
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|putAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"cast"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
expr|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|>
name|emptySet
argument_list|()
else|:
name|super
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|ensureMutable
argument_list|()
expr_stmt|;
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|V
name|put
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|m
parameter_list|)
block|{
name|ensureMutable
argument_list|()
expr_stmt|;
name|super
operator|.
name|putAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|byte
index|[]
operator|&&
name|b
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|a
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|b
argument_list|)
return|;
block|}
return|return
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**    * Checks whether two {@link Map}s are equal. We don't use the default equals    * method of {@link Map} because it compares by identity not by content for    * byte arrays.    */
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|boolean
name|equals
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|a
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|!=
name|b
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|a
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|b
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|b
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Checks whether two map fields are equal.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
operator|(
name|object
operator|instanceof
name|Map
operator|)
operator|&&
name|equals
argument_list|(
name|this
argument_list|,
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|object
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|calculateHashCodeForObject
parameter_list|(
name|Object
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|Internal
operator|.
name|hashCode
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|a
argument_list|)
return|;
block|}
comment|// Enums should be stored as integers internally.
if|if
condition|(
name|a
operator|instanceof
name|EnumLite
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
return|return
name|a
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Calculates the hash code for a {@link Map}. We don't use the default hash    * code method of {@link Map} because for byte arrays and protobuf enums it    * use {@link Object#hashCode()}.    */
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|calculateHashCodeForMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|a
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|a
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|+=
name|calculateHashCodeForObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|^
name|calculateHashCodeForObject
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|calculateHashCodeForMap
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|copy
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|object
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
return|return
name|object
return|;
block|}
comment|/**    * Makes a deep copy of a {@link Map}. Immutable objects in the map will be    * shared (e.g., integers, strings, immutable messages) and mutable ones will    * have a copy (e.g., byte arrays, mutable messages).    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copy
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|V
operator|)
name|copy
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** Returns a deep copy of this map field. */
specifier|public
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mutableCopy
parameter_list|()
block|{
return|return
name|isEmpty
argument_list|()
condition|?
operator|new
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
else|:
operator|new
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Makes this field immutable. All subsequent modifications will throw an    * {@link UnsupportedOperationException}.    */
specifier|public
name|void
name|makeImmutable
parameter_list|()
block|{
name|isMutable
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Returns whether this field can be modified.    */
specifier|public
name|boolean
name|isMutable
parameter_list|()
block|{
return|return
name|isMutable
return|;
block|}
specifier|private
name|void
name|ensureMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMutable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

