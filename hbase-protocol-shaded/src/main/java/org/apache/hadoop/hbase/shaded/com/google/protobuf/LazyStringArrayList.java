begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|RandomAccess
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link LazyStringList} that wraps an ArrayList. Each  * element is one of String, ByteString, or byte[]. It caches the last one  * requested which is most likely the one needed next. This minimizes memory  * usage while satisfying the most common use cases.  *<p>  *<strong>Note that this implementation is not synchronized.</strong>  * If multiple threads access an<tt>ArrayList</tt> instance concurrently,  * and at least one of the threads modifies the list structurally, it  *<i>must</i> be synchronized externally.  (A structural modification is  * any operation that adds or deletes one or more elements, or explicitly  * resizes the backing array; merely setting the value of an element is not  * a structural modification.)  This is typically accomplished by  * synchronizing on some object that naturally encapsulates the list.  *<p>  * If the implementation is accessed via concurrent reads, this is thread safe.  * Conversions are done in a thread safe manner. It's possible that the  * conversion may happen more than once if two threads attempt to access the  * same element and the modifications were not visible to each other, but this  * will not result in any corruption of the list or change in behavior other  * than performance.  *  * @author jonp@google.com (Jon Perlow)  */
end_comment

begin_class
specifier|public
class|class
name|LazyStringArrayList
extends|extends
name|AbstractProtobufList
argument_list|<
name|String
argument_list|>
implements|implements
name|LazyStringList
implements|,
name|RandomAccess
block|{
specifier|private
specifier|static
specifier|final
name|LazyStringArrayList
name|EMPTY_LIST
init|=
operator|new
name|LazyStringArrayList
argument_list|()
decl_stmt|;
static|static
block|{
name|EMPTY_LIST
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
block|}
specifier|static
name|LazyStringArrayList
name|emptyList
parameter_list|()
block|{
return|return
name|EMPTY_LIST
return|;
block|}
comment|// For compatibility with older runtimes.
specifier|public
specifier|static
specifier|final
name|LazyStringList
name|EMPTY
init|=
name|EMPTY_LIST
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
decl_stmt|;
specifier|public
name|LazyStringArrayList
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_CAPACITY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LazyStringArrayList
parameter_list|(
name|int
name|intialCapacity
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|intialCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LazyStringArrayList
parameter_list|(
name|LazyStringList
name|from
parameter_list|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|from
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LazyStringArrayList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|from
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LazyStringArrayList
parameter_list|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LazyStringArrayList
name|mutableCopyWithCapacity
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
if|if
condition|(
name|capacity
operator|<
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
name|newList
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
operator|new
name|LazyStringArrayList
argument_list|(
name|newList
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Object
name|o
init|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|o
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|ByteString
condition|)
block|{
name|ByteString
name|bs
init|=
operator|(
name|ByteString
operator|)
name|o
decl_stmt|;
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
else|else
block|{
name|byte
index|[]
name|ba
init|=
operator|(
name|byte
index|[]
operator|)
name|o
decl_stmt|;
name|String
name|s
init|=
name|Internal
operator|.
name|toStringUtf8
argument_list|(
name|ba
argument_list|)
decl_stmt|;
if|if
condition|(
name|Internal
operator|.
name|isValidUtf8
argument_list|(
name|ba
argument_list|)
condition|)
block|{
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
decl_stmt|;
return|return
name|asString
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|element
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
specifier|private
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|ByteString
name|element
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
specifier|private
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
index|[]
name|element
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|c
parameter_list|)
block|{
comment|// The default implementation of AbstractCollection.addAll(Collection)
comment|// delegates to add(Object). This implementation instead delegates to
comment|// addAll(int, Collection), which makes a special case for Collections
comment|// which are instances of LazyStringList.
return|return
name|addAll
argument_list|(
name|size
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|c
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
comment|// When copying from another LazyStringList, directly copy the underlying
comment|// elements rather than forcing each element to be decoded to a String.
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
name|c
operator|instanceof
name|LazyStringList
condition|?
operator|(
operator|(
name|LazyStringList
operator|)
name|c
operator|)
operator|.
name|getUnderlyingElements
argument_list|()
else|:
name|c
decl_stmt|;
name|boolean
name|ret
init|=
name|list
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAllByteString
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|ByteString
argument_list|>
name|values
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|boolean
name|ret
init|=
name|list
operator|.
name|addAll
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAllByteArray
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|c
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|boolean
name|ret
init|=
name|list
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|list
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|asString
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|ByteString
name|element
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|element
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getRaw
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteString
name|getByteString
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Object
name|o
init|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ByteString
name|b
init|=
name|asByteString
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
name|o
condition|)
block|{
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getByteArray
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Object
name|o
init|=
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|asByteArray
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
name|o
condition|)
block|{
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|ByteString
name|s
parameter_list|)
block|{
name|setAndReturn
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|setAndReturn
parameter_list|(
name|int
name|index
parameter_list|,
name|ByteString
name|s
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
return|return
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
index|[]
name|s
parameter_list|)
block|{
name|setAndReturn
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|setAndReturn
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
index|[]
name|s
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
return|return
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|asString
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|o
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|ByteString
condition|)
block|{
return|return
operator|(
operator|(
name|ByteString
operator|)
name|o
operator|)
operator|.
name|toStringUtf8
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Internal
operator|.
name|toStringUtf8
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|o
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|ByteString
name|asByteString
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|ByteString
condition|)
block|{
return|return
operator|(
name|ByteString
operator|)
name|o
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ByteString
operator|.
name|copyFrom
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|o
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|asByteArray
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|o
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|Internal
operator|.
name|toByteArray
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|ByteString
operator|)
name|o
operator|)
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getUnderlyingElements
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|list
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mergeFrom
parameter_list|(
name|LazyStringList
name|other
parameter_list|)
block|{
name|ensureIsMutable
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|other
operator|.
name|getUnderlyingElements
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|b
init|=
operator|(
name|byte
index|[]
operator|)
name|o
decl_stmt|;
comment|// Byte array's content is mutable so they should be copied rather than
comment|// shared when merging from one message to another.
name|list
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|b
argument_list|,
name|b
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ByteArrayListView
extends|extends
name|AbstractList
argument_list|<
name|byte
index|[]
argument_list|>
implements|implements
name|RandomAccess
block|{
specifier|private
specifier|final
name|LazyStringArrayList
name|list
decl_stmt|;
name|ByteArrayListView
parameter_list|(
name|LazyStringArrayList
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|list
operator|.
name|getByteArray
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
index|[]
name|s
parameter_list|)
block|{
name|Object
name|o
init|=
name|list
operator|.
name|setAndReturn
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|asByteArray
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
index|[]
name|s
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Object
name|o
init|=
name|list
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|asByteArray
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|asByteArrayList
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayListView
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ByteStringListView
extends|extends
name|AbstractList
argument_list|<
name|ByteString
argument_list|>
implements|implements
name|RandomAccess
block|{
specifier|private
specifier|final
name|LazyStringArrayList
name|list
decl_stmt|;
name|ByteStringListView
parameter_list|(
name|LazyStringArrayList
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteString
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|list
operator|.
name|getByteString
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteString
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|ByteString
name|s
parameter_list|)
block|{
name|Object
name|o
init|=
name|list
operator|.
name|setAndReturn
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|asByteString
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|ByteString
name|s
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|modCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteString
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Object
name|o
init|=
name|list
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|modCount
operator|++
expr_stmt|;
return|return
name|asByteString
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ByteString
argument_list|>
name|asByteStringList
parameter_list|()
block|{
return|return
operator|new
name|ByteStringListView
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LazyStringList
name|getUnmodifiableView
parameter_list|()
block|{
if|if
condition|(
name|isModifiable
argument_list|()
condition|)
block|{
return|return
operator|new
name|UnmodifiableLazyStringList
argument_list|(
name|this
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

