begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Data structure which is populated with the locations of each field value parsed from the text.  *  *<p>The locations of primary fields values are retrieved by {@code getLocation} or  * {@code getLocations}.  The locations of sub message values are within nested  * {@code TextFormatParseInfoTree}s and are retrieve by {@code getNestedTree} or  * {@code getNestedTrees}.  *  *<p>The {@code TextFormatParseInfoTree} is created by a Builder.  */
end_comment

begin_class
specifier|public
class|class
name|TextFormatParseInfoTree
block|{
comment|// Defines a mapping between each field's descriptor to the list of locations where
comment|// its value(s) were was encountered.
specifier|private
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
argument_list|>
name|locationsFromField
decl_stmt|;
comment|// Defines a mapping between a field's descriptor to a list of TextFormatParseInfoTrees for
comment|// sub message location information.
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseInfoTree
argument_list|>
argument_list|>
name|subtreesFromField
decl_stmt|;
comment|/**    * Construct a {@code TextFormatParseInfoTree}.    *    * @param locationsFromField a map of fields to location in the source code    * @param subtreeBuildersFromField a map of fields to parse tree location information builders    */
specifier|private
name|TextFormatParseInfoTree
parameter_list|(
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
argument_list|>
name|locationsFromField
parameter_list|,
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseInfoTree
operator|.
name|Builder
argument_list|>
argument_list|>
name|subtreeBuildersFromField
parameter_list|)
block|{
comment|// The maps are unmodifiable.  The values in the maps are unmodifiable.
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
argument_list|>
name|locs
init|=
operator|new
name|HashMap
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
argument_list|>
name|kv
range|:
name|locationsFromField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|locs
operator|.
name|put
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|locationsFromField
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|locs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseInfoTree
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|HashMap
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseInfoTree
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|Builder
argument_list|>
argument_list|>
name|kv
range|:
name|subtreeBuildersFromField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|TextFormatParseInfoTree
argument_list|>
name|submessagesOfField
init|=
operator|new
name|ArrayList
argument_list|<
name|TextFormatParseInfoTree
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Builder
name|subBuilder
range|:
name|kv
operator|.
name|getValue
argument_list|()
control|)
block|{
name|submessagesOfField
operator|.
name|add
argument_list|(
name|subBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|put
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|submessagesOfField
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|subtreesFromField
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|subs
argument_list|)
expr_stmt|;
block|}
comment|/**   * Retrieve all the locations of a field.   *   * @param fieldDescriptor the the @{link FieldDescriptor} of the desired field   * @return a list of the locations of values of the field.  If there are not values   *         or the field doesn't exist, an empty list is returned.   */
specifier|public
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
name|getLocations
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|)
block|{
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
name|result
init|=
name|locationsFromField
operator|.
name|get
argument_list|(
name|fieldDescriptor
argument_list|)
decl_stmt|;
return|return
operator|(
name|result
operator|==
literal|null
operator|)
condition|?
name|Collections
operator|.
expr|<
name|TextFormatParseLocation
operator|>
name|emptyList
argument_list|()
else|:
name|result
return|;
block|}
comment|/**    * Get the location in the source of a field's value.    *    *<p>Returns the {@link TextFormatParseLocation} for index-th value of the field in the parsed    * text.    *    * @param fieldDescriptor the @{link FieldDescriptor} of the desired field    * @param index the index of the value.    * @return the {@link TextFormatParseLocation} of the value    * @throws IllegalArgumentException index is out of range    */
specifier|public
name|TextFormatParseLocation
name|getLocation
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|getFromList
argument_list|(
name|getLocations
argument_list|(
name|fieldDescriptor
argument_list|)
argument_list|,
name|index
argument_list|,
name|fieldDescriptor
argument_list|)
return|;
block|}
comment|/**    * Retrieve a list of all the location information trees for a sub message field.    *    * @param fieldDescriptor the @{link FieldDescriptor} of the desired field    * @return A list of {@link TextFormatParseInfoTree}    */
specifier|public
name|List
argument_list|<
name|TextFormatParseInfoTree
argument_list|>
name|getNestedTrees
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|)
block|{
name|List
argument_list|<
name|TextFormatParseInfoTree
argument_list|>
name|result
init|=
name|subtreesFromField
operator|.
name|get
argument_list|(
name|fieldDescriptor
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|TextFormatParseInfoTree
operator|>
name|emptyList
argument_list|()
else|:
name|result
return|;
block|}
comment|/**    * Returns the parse info tree for the given field, which must be a message type.    *    * @param fieldDescriptor the @{link FieldDescriptor} of the desired sub message    * @param index the index of message value.    * @return the {@code ParseInfoTree} of the message value. {@code null} is returned if the field    *         doesn't exist or the index is out of range.    * @throws IllegalArgumentException if index is out of range    */
specifier|public
name|TextFormatParseInfoTree
name|getNestedTree
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|getFromList
argument_list|(
name|getNestedTrees
argument_list|(
name|fieldDescriptor
argument_list|)
argument_list|,
name|index
argument_list|,
name|fieldDescriptor
argument_list|)
return|;
block|}
comment|/**    * Create a builder for a {@code ParseInfoTree}.    *    * @return the builder    */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getFromList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|int
name|index
parameter_list|,
name|FieldDescriptor
name|fieldDescriptor
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|list
operator|.
name|size
argument_list|()
operator|||
name|index
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Illegal index field: %s, index %d"
argument_list|,
name|fieldDescriptor
operator|==
literal|null
condition|?
literal|"<null>"
else|:
name|fieldDescriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|index
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**    * Builder for a {@link TextFormatParseInfoTree}.    */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
argument_list|>
name|locationsFromField
decl_stmt|;
comment|// Defines a mapping between a field's descriptor to a list of ParseInfoTrees builders for
comment|// sub message location information.
specifier|private
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|Builder
argument_list|>
argument_list|>
name|subtreeBuildersFromField
decl_stmt|;
comment|/**      * Create a root level {@ParseInfoTree} builder.      */
specifier|private
name|Builder
parameter_list|()
block|{
name|locationsFromField
operator|=
operator|new
name|HashMap
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|subtreeBuildersFromField
operator|=
operator|new
name|HashMap
argument_list|<
name|FieldDescriptor
argument_list|,
name|List
argument_list|<
name|Builder
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Record the starting location of a single value for a field.      *      * @param fieldDescriptor the field      * @param location source code location information      */
specifier|public
name|Builder
name|setLocation
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|,
name|TextFormatParseLocation
name|location
parameter_list|)
block|{
name|List
argument_list|<
name|TextFormatParseLocation
argument_list|>
name|fieldLocations
init|=
name|locationsFromField
operator|.
name|get
argument_list|(
name|fieldDescriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldLocations
operator|==
literal|null
condition|)
block|{
name|fieldLocations
operator|=
operator|new
name|ArrayList
argument_list|<
name|TextFormatParseLocation
argument_list|>
argument_list|()
expr_stmt|;
name|locationsFromField
operator|.
name|put
argument_list|(
name|fieldDescriptor
argument_list|,
name|fieldLocations
argument_list|)
expr_stmt|;
block|}
name|fieldLocations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set for a sub message.      *      *<p>A new builder is created for a sub message. The builder that is returned is a new builder.      * The return is<em>not</em> the invoked {@code builder.getBuilderForSubMessageField}.      *      * @param fieldDescriptor the field whose value is the submessage      * @return a new Builder for the sub message      */
specifier|public
name|Builder
name|getBuilderForSubMessageField
parameter_list|(
specifier|final
name|FieldDescriptor
name|fieldDescriptor
parameter_list|)
block|{
name|List
argument_list|<
name|Builder
argument_list|>
name|submessageBuilders
init|=
name|subtreeBuildersFromField
operator|.
name|get
argument_list|(
name|fieldDescriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|submessageBuilders
operator|==
literal|null
condition|)
block|{
name|submessageBuilders
operator|=
operator|new
name|ArrayList
argument_list|<
name|Builder
argument_list|>
argument_list|()
expr_stmt|;
name|subtreeBuildersFromField
operator|.
name|put
argument_list|(
name|fieldDescriptor
argument_list|,
name|submessageBuilders
argument_list|)
expr_stmt|;
block|}
name|Builder
name|subtreeBuilder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|submessageBuilders
operator|.
name|add
argument_list|(
name|subtreeBuilder
argument_list|)
expr_stmt|;
return|return
name|subtreeBuilder
return|;
block|}
comment|/**      * Build the {@code TextFormatParseInfoTree}.      *      * @return the {@code TextFormatParseInfoTree}      */
specifier|public
name|TextFormatParseInfoTree
name|build
parameter_list|()
block|{
return|return
operator|new
name|TextFormatParseInfoTree
argument_list|(
name|locationsFromField
argument_list|,
name|subtreeBuildersFromField
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

