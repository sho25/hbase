begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * {@code RepeatedFieldBuilderV3} implements a structure that a protocol  * message uses to hold a repeated field of other protocol messages. It supports  * the classical use case of adding immutable {@link Message}'s to the  * repeated field and is highly optimized around this (no extra memory  * allocations and sharing of immutable arrays).  *<br>  * It also supports the additional use case of adding a {@link Message.Builder}  * to the repeated field and deferring conversion of that {@code Builder}  * to an immutable {@code Message}. In this way, it's possible to maintain  * a tree of {@code Builder}'s that acts as a fully read/write data  * structure.  *<br>  * Logically, one can think of a tree of builders as converting the entire tree  * to messages when build is called on the root or when any method is called  * that desires a Message instead of a Builder. In terms of the implementation,  * the {@code SingleFieldBuilderV3} and {@code RepeatedFieldBuilderV3}  * classes cache messages that were created so that messages only need to be  * created when some change occurred in its builder or a builder for one of its  * descendants.  *  * @param<MType> the type of message for the field  * @param<BType> the type of builder for the field  * @param<IType> the common interface for the message and the builder  *  * @author jonp@google.com (Jon Perlow)  */
end_comment

begin_class
specifier|public
class|class
name|RepeatedFieldBuilderV3
parameter_list|<
name|MType
extends|extends
name|AbstractMessage
parameter_list|,
name|BType
extends|extends
name|AbstractMessage
operator|.
name|Builder
parameter_list|,
name|IType
extends|extends
name|MessageOrBuilder
parameter_list|>
implements|implements
name|AbstractMessage
operator|.
name|BuilderParent
block|{
comment|// Parent to send changes to.
specifier|private
name|AbstractMessage
operator|.
name|BuilderParent
name|parent
decl_stmt|;
comment|// List of messages. Never null. It may be immutable, in which case
comment|// isMessagesListMutable will be false. See note below.
specifier|private
name|List
argument_list|<
name|MType
argument_list|>
name|messages
decl_stmt|;
comment|// Whether messages is an mutable array that can be modified.
specifier|private
name|boolean
name|isMessagesListMutable
decl_stmt|;
comment|// List of builders. May be null, in which case, no nested builders were
comment|// created. If not null, entries represent the builder for that index.
specifier|private
name|List
argument_list|<
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
argument_list|>
name|builders
decl_stmt|;
comment|// Here are the invariants for messages and builders:
comment|// 1. messages is never null and its count corresponds to the number of items
comment|//    in the repeated field.
comment|// 2. If builders is non-null, messages and builders MUST always
comment|//    contain the same number of items.
comment|// 3. Entries in either array can be null, but for any index, there MUST be
comment|//    either a Message in messages or a builder in builders.
comment|// 4. If the builder at an index is non-null, the builder is
comment|//    authoritative. This is the case where a Builder was set on the index.
comment|//    Any message in the messages array MUST be ignored.
comment|// t. If the builder at an index is null, the message in the messages
comment|//    list is authoritative. This is the case where a Message (not a Builder)
comment|//    was set directly for an index.
comment|// Indicates that we've built a message and so we are now obligated
comment|// to dispatch dirty invalidations. See AbstractMessage.BuilderListener.
specifier|private
name|boolean
name|isClean
decl_stmt|;
comment|// A view of this builder that exposes a List interface of messages. This is
comment|// initialized on demand. This is fully backed by this object and all changes
comment|// are reflected in it. Access to any item converts it to a message if it
comment|// was a builder.
specifier|private
name|MessageExternalList
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|externalMessageList
decl_stmt|;
comment|// A view of this builder that exposes a List interface of builders. This is
comment|// initialized on demand. This is fully backed by this object and all changes
comment|// are reflected in it. Access to any item converts it to a builder if it
comment|// was a message.
specifier|private
name|BuilderExternalList
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|externalBuilderList
decl_stmt|;
comment|// A view of this builder that exposes a List interface of the interface
comment|// implemented by messages and builders. This is initialized on demand. This
comment|// is fully backed by this object and all changes are reflected in it.
comment|// Access to any item returns either a builder or message depending on
comment|// what is most efficient.
specifier|private
name|MessageOrBuilderExternalList
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|externalMessageOrBuilderList
decl_stmt|;
comment|/**    * Constructs a new builder with an empty list of messages.    *    * @param messages the current list of messages    * @param isMessagesListMutable Whether the messages list is mutable    * @param parent a listener to notify of changes    * @param isClean whether the builder is initially marked clean    */
specifier|public
name|RepeatedFieldBuilderV3
parameter_list|(
name|List
argument_list|<
name|MType
argument_list|>
name|messages
parameter_list|,
name|boolean
name|isMessagesListMutable
parameter_list|,
name|AbstractMessage
operator|.
name|BuilderParent
name|parent
parameter_list|,
name|boolean
name|isClean
parameter_list|)
block|{
name|this
operator|.
name|messages
operator|=
name|messages
expr_stmt|;
name|this
operator|.
name|isMessagesListMutable
operator|=
name|isMessagesListMutable
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|isClean
operator|=
name|isClean
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
comment|// Null out parent so we stop sending it invalidations.
name|parent
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Ensures that the list of messages is mutable so it can be updated. If it's    * immutable, a copy is made.    */
specifier|private
name|void
name|ensureMutableMessageList
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMessagesListMutable
condition|)
block|{
name|messages
operator|=
operator|new
name|ArrayList
argument_list|<
name|MType
argument_list|>
argument_list|(
name|messages
argument_list|)
expr_stmt|;
name|isMessagesListMutable
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Ensures that the list of builders is not null. If it's null, the list is    * created and initialized to be the same size as the messages list with    * null entries.    */
specifier|private
name|void
name|ensureBuilders
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|builders
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|builders
operator|=
operator|new
name|ArrayList
argument_list|<
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
argument_list|>
argument_list|(
name|messages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets the count of items in the list.    *    * @return the count of items in the list.    */
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|messages
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Gets whether the list is empty.    *    * @return whether the list is empty    */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|messages
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Get the message at the specified index. If the message is currently stored    * as a {@code Builder}, it is converted to a {@code Message} by    * calling {@link Message.Builder#buildPartial} on it.    *    * @param index the index of the message to get    * @return the message for the specified index    */
specifier|public
name|MType
name|getMessage
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getMessage
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get the message at the specified index. If the message is currently stored    * as a {@code Builder}, it is converted to a {@code Message} by    * calling {@link Message.Builder#buildPartial} on it.    *    * @param index the index of the message to get    * @param forBuild this is being called for build so we want to make sure    *     we SingleFieldBuilderV3.build to send dirty invalidations    * @return the message for the specified index    */
specifier|private
name|MType
name|getMessage
parameter_list|(
name|int
name|index
parameter_list|,
name|boolean
name|forBuild
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|builders
operator|==
literal|null
condition|)
block|{
comment|// We don't have any builders -- return the current Message.
comment|// This is the case where no builder was created, so we MUST have a
comment|// Message.
return|return
name|messages
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
init|=
name|builders
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
comment|// We don't have a builder -- return the current message.
comment|// This is the case where no builder was created for the entry at index,
comment|// so we MUST have a message.
return|return
name|messages
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|forBuild
condition|?
name|builder
operator|.
name|build
argument_list|()
else|:
name|builder
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
comment|/**    * Gets a builder for the specified index. If no builder has been created for    * that index, a builder is created on demand by calling    * {@link Message#toBuilder}.    *    * @param index the index of the message to get    * @return The builder for that index    */
specifier|public
name|BType
name|getBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|ensureBuilders
argument_list|()
expr_stmt|;
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
init|=
name|builders
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|MType
name|message
init|=
name|messages
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|builder
operator|=
operator|new
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
argument_list|(
name|message
argument_list|,
name|this
argument_list|,
name|isClean
argument_list|)
expr_stmt|;
name|builders
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|getBuilder
argument_list|()
return|;
block|}
comment|/**    * Gets the base class interface for the specified index. This may either be    * a builder or a message. It will return whatever is more efficient.    *    * @param index the index of the message to get    * @return the message or builder for the index as the base class interface    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|IType
name|getMessageOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|builders
operator|==
literal|null
condition|)
block|{
comment|// We don't have any builders -- return the current Message.
comment|// This is the case where no builder was created, so we MUST have a
comment|// Message.
return|return
operator|(
name|IType
operator|)
name|messages
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
init|=
name|builders
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
comment|// We don't have a builder -- return the current message.
comment|// This is the case where no builder was created for the entry at index,
comment|// so we MUST have a message.
return|return
operator|(
name|IType
operator|)
name|messages
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|builder
operator|.
name|getMessageOrBuilder
argument_list|()
return|;
block|}
block|}
comment|/**    * Sets a  message at the specified index replacing the existing item at    * that index.    *    * @param index the index to set.    * @param message the message to set    * @return the builder    */
specifier|public
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|setMessage
parameter_list|(
name|int
name|index
parameter_list|,
name|MType
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMutableMessageList
argument_list|()
expr_stmt|;
name|messages
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|builders
operator|!=
literal|null
condition|)
block|{
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|entry
init|=
name|builders
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
name|onChanged
argument_list|()
expr_stmt|;
name|incrementModCounts
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Appends the specified element to the end of this list.    *    * @param message the message to add    * @return the builder    */
specifier|public
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|addMessage
parameter_list|(
name|MType
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMutableMessageList
argument_list|()
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|builders
operator|!=
literal|null
condition|)
block|{
name|builders
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
name|incrementModCounts
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Inserts the specified message at the specified position in this list.    * Shifts the element currently at that position (if any) and any subsequent    * elements to the right (adds one to their indices).    *    * @param index the index at which to insert the message    * @param message the message to add    * @return the builder    */
specifier|public
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|addMessage
parameter_list|(
name|int
name|index
parameter_list|,
name|MType
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMutableMessageList
argument_list|()
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|builders
operator|!=
literal|null
condition|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
name|incrementModCounts
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Appends all of the messages in the specified collection to the end of    * this list, in the order that they are returned by the specified    * collection's iterator.    *    * @param values the messages to add    * @return the builder    */
specifier|public
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|addAllMessages
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|MType
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
specifier|final
name|MType
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
block|}
comment|// If we can inspect the size, we can more efficiently add messages.
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|values
operator|instanceof
name|Collection
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Collection
argument_list|<
name|MType
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|MType
argument_list|>
operator|)
name|values
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
name|size
operator|=
name|collection
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|ensureMutableMessageList
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>=
literal|0
operator|&&
name|messages
operator|instanceof
name|ArrayList
condition|)
block|{
operator|(
operator|(
name|ArrayList
argument_list|<
name|MType
argument_list|>
operator|)
name|messages
operator|)
operator|.
name|ensureCapacity
argument_list|(
name|messages
operator|.
name|size
argument_list|()
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MType
name|value
range|:
name|values
control|)
block|{
name|addMessage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
name|incrementModCounts
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Appends a new builder to the end of this list and returns the builder.    *    * @param message the message to add which is the basis of the builder    * @return the new builder    */
specifier|public
name|BType
name|addBuilder
parameter_list|(
name|MType
name|message
parameter_list|)
block|{
name|ensureMutableMessageList
argument_list|()
expr_stmt|;
name|ensureBuilders
argument_list|()
expr_stmt|;
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
init|=
operator|new
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
argument_list|(
name|message
argument_list|,
name|this
argument_list|,
name|isClean
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
name|incrementModCounts
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|getBuilder
argument_list|()
return|;
block|}
comment|/**    * Inserts a new builder at the specified position in this list.    * Shifts the element currently at that position (if any) and any subsequent    * elements to the right (adds one to their indices).    *    * @param index the index at which to insert the builder    * @param message the message to add which is the basis of the builder    * @return the builder    */
specifier|public
name|BType
name|addBuilder
parameter_list|(
name|int
name|index
parameter_list|,
name|MType
name|message
parameter_list|)
block|{
name|ensureMutableMessageList
argument_list|()
expr_stmt|;
name|ensureBuilders
argument_list|()
expr_stmt|;
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
init|=
operator|new
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
argument_list|(
name|message
argument_list|,
name|this
argument_list|,
name|isClean
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
name|incrementModCounts
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|getBuilder
argument_list|()
return|;
block|}
comment|/**    * Removes the element at the specified position in this list. Shifts any    * subsequent elements to the left (subtracts one from their indices).    * Returns the element that was removed from the list.    *    * @param index the index at which to remove the message    */
specifier|public
name|void
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|ensureMutableMessageList
argument_list|()
expr_stmt|;
name|messages
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|builders
operator|!=
literal|null
condition|)
block|{
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|entry
init|=
name|builders
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
name|onChanged
argument_list|()
expr_stmt|;
name|incrementModCounts
argument_list|()
expr_stmt|;
block|}
comment|/**    * Removes all of the elements from this list.    * The list will be empty after this call returns.    */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|messages
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|isMessagesListMutable
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|builders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|entry
range|:
name|builders
control|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
name|builders
operator|=
literal|null
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
name|incrementModCounts
argument_list|()
expr_stmt|;
block|}
comment|/**    * Builds the list of messages from the builder and returns them.    *    * @return an immutable list of messages    */
specifier|public
name|List
argument_list|<
name|MType
argument_list|>
name|build
parameter_list|()
block|{
comment|// Now that build has been called, we are required to dispatch
comment|// invalidations.
name|isClean
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|isMessagesListMutable
operator|&&
name|builders
operator|==
literal|null
condition|)
block|{
comment|// We still have an immutable list and we never created a builder.
return|return
name|messages
return|;
block|}
name|boolean
name|allMessagesInSync
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|isMessagesListMutable
condition|)
block|{
comment|// We still have an immutable list. Let's see if any of them are out
comment|// of sync with their builders.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SingleFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
init|=
name|builders
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|build
argument_list|()
operator|!=
name|message
condition|)
block|{
name|allMessagesInSync
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|allMessagesInSync
condition|)
block|{
comment|// Immutable list is still in sync.
return|return
name|messages
return|;
block|}
block|}
comment|// Need to make sure messages is up to date
name|ensureMutableMessageList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|messages
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|getMessage
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We're going to return our list as immutable so we mark that we can
comment|// no longer update it.
name|messages
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|messages
argument_list|)
expr_stmt|;
name|isMessagesListMutable
operator|=
literal|false
expr_stmt|;
return|return
name|messages
return|;
block|}
comment|/**    * Gets a view of the builder as a list of messages. The returned list is live    * and will reflect any changes to the underlying builder.    *    * @return the messages in the list    */
specifier|public
name|List
argument_list|<
name|MType
argument_list|>
name|getMessageList
parameter_list|()
block|{
if|if
condition|(
name|externalMessageList
operator|==
literal|null
condition|)
block|{
name|externalMessageList
operator|=
operator|new
name|MessageExternalList
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|externalMessageList
return|;
block|}
comment|/**    * Gets a view of the builder as a list of builders. This returned list is    * live and will reflect any changes to the underlying builder.    *    * @return the builders in the list    */
specifier|public
name|List
argument_list|<
name|BType
argument_list|>
name|getBuilderList
parameter_list|()
block|{
if|if
condition|(
name|externalBuilderList
operator|==
literal|null
condition|)
block|{
name|externalBuilderList
operator|=
operator|new
name|BuilderExternalList
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|externalBuilderList
return|;
block|}
comment|/**    * Gets a view of the builder as a list of MessageOrBuilders. This returned    * list is live and will reflect any changes to the underlying builder.    *    * @return the builders in the list    */
specifier|public
name|List
argument_list|<
name|IType
argument_list|>
name|getMessageOrBuilderList
parameter_list|()
block|{
if|if
condition|(
name|externalMessageOrBuilderList
operator|==
literal|null
condition|)
block|{
name|externalMessageOrBuilderList
operator|=
operator|new
name|MessageOrBuilderExternalList
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|externalMessageOrBuilderList
return|;
block|}
comment|/**    * Called when a the builder or one of its nested children has changed    * and any parent should be notified of its invalidation.    */
specifier|private
name|void
name|onChanged
parameter_list|()
block|{
if|if
condition|(
name|isClean
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|markDirty
argument_list|()
expr_stmt|;
comment|// Don't keep dispatching invalidations until build is called again.
name|isClean
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|markDirty
parameter_list|()
block|{
name|onChanged
argument_list|()
expr_stmt|;
block|}
comment|/**    * Increments the mod counts so that an ConcurrentModificationException can    * be thrown if calling code tries to modify the builder while its iterating    * the list.    */
specifier|private
name|void
name|incrementModCounts
parameter_list|()
block|{
if|if
condition|(
name|externalMessageList
operator|!=
literal|null
condition|)
block|{
name|externalMessageList
operator|.
name|incrementModCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|externalBuilderList
operator|!=
literal|null
condition|)
block|{
name|externalBuilderList
operator|.
name|incrementModCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|externalMessageOrBuilderList
operator|!=
literal|null
condition|)
block|{
name|externalMessageOrBuilderList
operator|.
name|incrementModCount
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Provides a live view of the builder as a list of messages.    *    * @param<MType> the type of message for the field    * @param<BType> the type of builder for the field    * @param<IType> the common interface for the message and the builder    */
specifier|private
specifier|static
class|class
name|MessageExternalList
parameter_list|<
name|MType
extends|extends
name|AbstractMessage
parameter_list|,
name|BType
extends|extends
name|AbstractMessage
operator|.
name|Builder
parameter_list|,
name|IType
extends|extends
name|MessageOrBuilder
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|MType
argument_list|>
implements|implements
name|List
argument_list|<
name|MType
argument_list|>
block|{
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
decl_stmt|;
name|MessageExternalList
parameter_list|(
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|builder
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MType
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getMessage
argument_list|(
name|index
argument_list|)
return|;
block|}
name|void
name|incrementModCount
parameter_list|()
block|{
name|modCount
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Provides a live view of the builder as a list of builders.    *    * @param<MType> the type of message for the field    * @param<BType> the type of builder for the field    * @param<IType> the common interface for the message and the builder    */
specifier|private
specifier|static
class|class
name|BuilderExternalList
parameter_list|<
name|MType
extends|extends
name|AbstractMessage
parameter_list|,
name|BType
extends|extends
name|AbstractMessage
operator|.
name|Builder
parameter_list|,
name|IType
extends|extends
name|MessageOrBuilder
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|BType
argument_list|>
implements|implements
name|List
argument_list|<
name|BType
argument_list|>
block|{
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
decl_stmt|;
name|BuilderExternalList
parameter_list|(
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|builder
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BType
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
name|void
name|incrementModCount
parameter_list|()
block|{
name|modCount
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Provides a live view of the builder as a list of builders.    *    * @param<MType> the type of message for the field    * @param<BType> the type of builder for the field    * @param<IType> the common interface for the message and the builder    */
specifier|private
specifier|static
class|class
name|MessageOrBuilderExternalList
parameter_list|<
name|MType
extends|extends
name|AbstractMessage
parameter_list|,
name|BType
extends|extends
name|AbstractMessage
operator|.
name|Builder
parameter_list|,
name|IType
extends|extends
name|MessageOrBuilder
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|IType
argument_list|>
implements|implements
name|List
argument_list|<
name|IType
argument_list|>
block|{
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
decl_stmt|;
name|MessageOrBuilderExternalList
parameter_list|(
name|RepeatedFieldBuilderV3
argument_list|<
name|MType
argument_list|,
name|BType
argument_list|,
name|IType
argument_list|>
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|builder
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|IType
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getMessageOrBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
name|void
name|incrementModCount
parameter_list|()
block|{
name|modCount
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

