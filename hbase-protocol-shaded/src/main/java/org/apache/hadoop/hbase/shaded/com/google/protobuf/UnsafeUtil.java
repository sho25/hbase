begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Unsafe
import|;
end_import

begin_comment
comment|/** Utility class for working with unsafe operations. */
end_comment

begin_comment
comment|// TODO(nathanmittler): Add support for Android Memory/MemoryBlock
end_comment

begin_class
specifier|final
class|class
name|UnsafeUtil
block|{
specifier|private
specifier|static
specifier|final
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|UNSAFE
init|=
name|getUnsafe
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|HAS_UNSAFE_BYTEBUFFER_OPERATIONS
init|=
name|supportsUnsafeByteBufferOperations
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|HAS_UNSAFE_ARRAY_OPERATIONS
init|=
name|supportsUnsafeArrayOperations
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ARRAY_BASE_OFFSET
init|=
name|byteArrayBaseOffset
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|BUFFER_ADDRESS_OFFSET
init|=
name|fieldOffset
argument_list|(
name|field
argument_list|(
name|Buffer
operator|.
name|class
argument_list|,
literal|"address"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|UnsafeUtil
parameter_list|()
block|{}
specifier|static
name|boolean
name|hasUnsafeArrayOperations
parameter_list|()
block|{
return|return
name|HAS_UNSAFE_ARRAY_OPERATIONS
return|;
block|}
specifier|static
name|boolean
name|hasUnsafeByteBufferOperations
parameter_list|()
block|{
return|return
name|HAS_UNSAFE_BYTEBUFFER_OPERATIONS
return|;
block|}
specifier|static
name|Object
name|allocateInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
return|return
name|UNSAFE
operator|.
name|allocateInstance
argument_list|(
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|long
name|objectFieldOffset
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|objectFieldOffset
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|static
name|long
name|getArrayBaseOffset
parameter_list|()
block|{
return|return
name|ARRAY_BASE_OFFSET
return|;
block|}
specifier|static
name|byte
name|getByte
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getByte
argument_list|(
name|target
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|static
name|void
name|putByte
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putByte
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|int
name|getInt
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getInt
argument_list|(
name|target
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|static
name|void
name|putInt
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putInt
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|long
name|getLong
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getLong
argument_list|(
name|target
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|static
name|void
name|putLong
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putLong
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|boolean
name|getBoolean
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getBoolean
argument_list|(
name|target
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|static
name|void
name|putBoolean
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putBoolean
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|float
name|getFloat
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getFloat
argument_list|(
name|target
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|static
name|void
name|putFloat
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putFloat
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|double
name|getDouble
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getDouble
argument_list|(
name|target
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|static
name|void
name|putDouble
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putDouble
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Object
name|getObject
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getObject
argument_list|(
name|target
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|static
name|void
name|putObject
parameter_list|(
name|Object
name|target
parameter_list|,
name|long
name|offset
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putObject
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|copyMemory
parameter_list|(
name|Object
name|src
parameter_list|,
name|long
name|srcOffset
parameter_list|,
name|Object
name|target
parameter_list|,
name|long
name|targetOffset
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|UNSAFE
operator|.
name|copyMemory
argument_list|(
name|src
argument_list|,
name|srcOffset
argument_list|,
name|target
argument_list|,
name|targetOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|static
name|byte
name|getByte
parameter_list|(
name|long
name|address
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getByte
argument_list|(
name|address
argument_list|)
return|;
block|}
specifier|static
name|void
name|putByte
parameter_list|(
name|long
name|address
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putByte
argument_list|(
name|address
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|int
name|getInt
parameter_list|(
name|long
name|address
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getInt
argument_list|(
name|address
argument_list|)
return|;
block|}
specifier|static
name|void
name|putInt
parameter_list|(
name|long
name|address
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putInt
argument_list|(
name|address
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|long
name|getLong
parameter_list|(
name|long
name|address
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getLong
argument_list|(
name|address
argument_list|)
return|;
block|}
specifier|static
name|void
name|putLong
parameter_list|(
name|long
name|address
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|putLong
argument_list|(
name|address
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|copyMemory
parameter_list|(
name|long
name|srcAddress
parameter_list|,
name|long
name|targetAddress
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|UNSAFE
operator|.
name|copyMemory
argument_list|(
name|srcAddress
argument_list|,
name|targetAddress
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|setMemory
parameter_list|(
name|long
name|address
parameter_list|,
name|long
name|numBytes
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
name|UNSAFE
operator|.
name|setMemory
argument_list|(
name|address
argument_list|,
name|numBytes
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the offset of the {@code address} field of the given direct {@link ByteBuffer}.    */
specifier|static
name|long
name|addressOffset
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
return|return
name|UNSAFE
operator|.
name|getLong
argument_list|(
name|buffer
argument_list|,
name|BUFFER_ADDRESS_OFFSET
argument_list|)
return|;
block|}
comment|/**    * Gets the {@code sun.misc.Unsafe} instance, or {@code null} if not available on this platform.    */
specifier|private
specifier|static
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|getUnsafe
parameter_list|()
block|{
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|unsafe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|unsafe
operator|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Unsafe
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|sun
operator|.
name|misc
operator|.
name|Unsafe
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|sun
operator|.
name|misc
operator|.
name|Unsafe
argument_list|>
name|k
init|=
name|sun
operator|.
name|misc
operator|.
name|Unsafe
operator|.
name|class
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|k
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|x
init|=
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|isInstance
argument_list|(
name|x
argument_list|)
condition|)
block|{
return|return
name|k
operator|.
name|cast
argument_list|(
name|x
argument_list|)
return|;
block|}
block|}
comment|// The sun.misc.Unsafe field does not exist.
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catching Throwable here due to the fact that Google AppEngine raises NoClassDefFoundError
comment|// for Unsafe.
block|}
return|return
name|unsafe
return|;
block|}
comment|/** Indicates whether or not unsafe array operations are supported on this platform. */
specifier|private
specifier|static
name|boolean
name|supportsUnsafeArrayOperations
parameter_list|()
block|{
name|boolean
name|supported
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|UNSAFE
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|UNSAFE
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"objectFieldOffset"
argument_list|,
name|Field
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"allocateInstance"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"arrayBaseOffset"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getByte"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putByte"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getBoolean"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putBoolean"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getInt"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putInt"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getLong"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putLong"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getFloat"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putFloat"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getDouble"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putDouble"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getObject"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putObject"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"copyMemory"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|supported
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Do nothing.
block|}
block|}
return|return
name|supported
return|;
block|}
specifier|private
specifier|static
name|boolean
name|supportsUnsafeByteBufferOperations
parameter_list|()
block|{
name|boolean
name|supported
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|UNSAFE
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|UNSAFE
operator|.
name|getClass
argument_list|()
decl_stmt|;
comment|// Methods for getting direct buffer address.
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"objectFieldOffset"
argument_list|,
name|Field
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getLong"
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getByte"
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putByte"
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getInt"
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putInt"
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getLong"
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"putLong"
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"setMemory"
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"copyMemory"
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|supported
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Do nothing.
block|}
block|}
return|return
name|supported
return|;
block|}
comment|/**    * Get the base offset for byte arrays, or {@code -1} if {@code sun.misc.Unsafe} is not available.    */
specifier|private
specifier|static
name|int
name|byteArrayBaseOffset
parameter_list|()
block|{
return|return
name|HAS_UNSAFE_ARRAY_OPERATIONS
condition|?
name|UNSAFE
operator|.
name|arrayBaseOffset
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
comment|/**    * Returns the offset of the provided field, or {@code -1} if {@code sun.misc.Unsafe} is not    * available.    */
specifier|private
specifier|static
name|long
name|fieldOffset
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
return|return
name|field
operator|==
literal|null
operator|||
name|UNSAFE
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|UNSAFE
operator|.
name|objectFieldOffset
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/**    * Gets the field with the given name within the class, or {@code null} if not found. If found,    * the field is made accessible.    */
specifier|private
specifier|static
name|Field
name|field
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|Field
name|field
decl_stmt|;
try|try
block|{
name|field
operator|=
name|clazz
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Failed to access the fields.
name|field
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|field
return|;
block|}
block|}
end_class

end_unit

