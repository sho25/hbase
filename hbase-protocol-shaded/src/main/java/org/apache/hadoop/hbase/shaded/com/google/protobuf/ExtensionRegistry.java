begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A table of known extensions, searchable by name or field number.  When  * parsing a protocol message that might have extensions, you must provide  * an {@code ExtensionRegistry} in which you have registered any extensions  * that you want to be able to parse.  Otherwise, those extensions will just  * be treated like unknown fields.  *  *<p>For example, if you had the {@code .proto} file:  *  *<pre>  * option java_class = "MyProto";  *  * message Foo {  *   extensions 1000 to max;  * }  *  * extend Foo {  *   optional int32 bar;  * }  *</pre>  *  * Then you might write code like:  *  *<pre>  * ExtensionRegistry registry = ExtensionRegistry.newInstance();  * registry.add(MyProto.bar);  * MyProto.Foo message = MyProto.Foo.parseFrom(input, registry);  *</pre>  *  *<p>Background:  *  *<p>You might wonder why this is necessary.  Two alternatives might come to  * mind.  First, you might imagine a system where generated extensions are  * automatically registered when their containing classes are loaded.  This  * is a popular technique, but is bad design; among other things, it creates a  * situation where behavior can change depending on what classes happen to be  * loaded.  It also introduces a security vulnerability, because an  * unprivileged class could cause its code to be called unexpectedly from a  * privileged class by registering itself as an extension of the right type.  *  *<p>Another option you might consider is lazy parsing: do not parse an  * extension until it is first requested, at which point the caller must  * provide a type to use.  This introduces a different set of problems.  First,  * it would require a mutex lock any time an extension was accessed, which  * would be slow.  Second, corrupt data would not be detected until first  * access, at which point it would be much harder to deal with it.  Third, it  * could violate the expectation that message objects are immutable, since the  * type provided could be any arbitrary message class.  An unprivileged user  * could take advantage of this to inject a mutable object into a message  * belonging to privileged code and create mischief.  *  * @author kenton@google.com Kenton Varda  */
end_comment

begin_class
specifier|public
class|class
name|ExtensionRegistry
extends|extends
name|ExtensionRegistryLite
block|{
comment|/** Construct a new, empty instance. */
specifier|public
specifier|static
name|ExtensionRegistry
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ExtensionRegistry
argument_list|()
return|;
block|}
comment|/** Get the unmodifiable singleton empty instance. */
specifier|public
specifier|static
name|ExtensionRegistry
name|getEmptyRegistry
parameter_list|()
block|{
return|return
name|EMPTY_REGISTRY
return|;
block|}
comment|/** Returns an unmodifiable view of the registry. */
annotation|@
name|Override
specifier|public
name|ExtensionRegistry
name|getUnmodifiable
parameter_list|()
block|{
return|return
operator|new
name|ExtensionRegistry
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** A (Descriptor, Message) pair, returned by lookup methods. */
specifier|public
specifier|static
specifier|final
class|class
name|ExtensionInfo
block|{
comment|/** The extension's descriptor. */
specifier|public
specifier|final
name|FieldDescriptor
name|descriptor
decl_stmt|;
comment|/**      * A default instance of the extension's type, if it has a message type.      * Otherwise, {@code null}.      */
specifier|public
specifier|final
name|Message
name|defaultInstance
decl_stmt|;
specifier|private
name|ExtensionInfo
parameter_list|(
specifier|final
name|FieldDescriptor
name|descriptor
parameter_list|)
block|{
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
name|defaultInstance
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|ExtensionInfo
parameter_list|(
specifier|final
name|FieldDescriptor
name|descriptor
parameter_list|,
specifier|final
name|Message
name|defaultInstance
parameter_list|)
block|{
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|defaultInstance
operator|=
name|defaultInstance
expr_stmt|;
block|}
block|}
comment|/**    * Deprecated. Use {@link #findImmutableExtensionByName(String)} instead.    */
specifier|public
name|ExtensionInfo
name|findExtensionByName
parameter_list|(
specifier|final
name|String
name|fullName
parameter_list|)
block|{
return|return
name|findImmutableExtensionByName
argument_list|(
name|fullName
argument_list|)
return|;
block|}
comment|/**    * Find an extension for immutable APIs by fully-qualified field name,    * in the proto namespace. i.e. {@code result.descriptor.fullName()} will    * match {@code fullName} if a match is found.    *    * @return Information about the extension if found, or {@code null}    *         otherwise.    */
specifier|public
name|ExtensionInfo
name|findImmutableExtensionByName
parameter_list|(
specifier|final
name|String
name|fullName
parameter_list|)
block|{
return|return
name|immutableExtensionsByName
operator|.
name|get
argument_list|(
name|fullName
argument_list|)
return|;
block|}
comment|/**    * Find an extension for mutable APIs by fully-qualified field name,    * in the proto namespace. i.e. {@code result.descriptor.fullName()} will    * match {@code fullName} if a match is found.    *    * @return Information about the extension if found, or {@code null}    *         otherwise.    */
specifier|public
name|ExtensionInfo
name|findMutableExtensionByName
parameter_list|(
specifier|final
name|String
name|fullName
parameter_list|)
block|{
return|return
name|mutableExtensionsByName
operator|.
name|get
argument_list|(
name|fullName
argument_list|)
return|;
block|}
comment|/**    * Deprecated. Use {@link #findImmutableExtensionByNumber(    * Descriptors.Descriptor, int)}    */
specifier|public
name|ExtensionInfo
name|findExtensionByNumber
parameter_list|(
specifier|final
name|Descriptor
name|containingType
parameter_list|,
specifier|final
name|int
name|fieldNumber
parameter_list|)
block|{
return|return
name|findImmutableExtensionByNumber
argument_list|(
name|containingType
argument_list|,
name|fieldNumber
argument_list|)
return|;
block|}
comment|/**    * Find an extension by containing type and field number for immutable APIs.    *    * @return Information about the extension if found, or {@code null}    *         otherwise.    */
specifier|public
name|ExtensionInfo
name|findImmutableExtensionByNumber
parameter_list|(
specifier|final
name|Descriptor
name|containingType
parameter_list|,
specifier|final
name|int
name|fieldNumber
parameter_list|)
block|{
return|return
name|immutableExtensionsByNumber
operator|.
name|get
argument_list|(
operator|new
name|DescriptorIntPair
argument_list|(
name|containingType
argument_list|,
name|fieldNumber
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Find an extension by containing type and field number for mutable APIs.    *    * @return Information about the extension if found, or {@code null}    *         otherwise.    */
specifier|public
name|ExtensionInfo
name|findMutableExtensionByNumber
parameter_list|(
specifier|final
name|Descriptor
name|containingType
parameter_list|,
specifier|final
name|int
name|fieldNumber
parameter_list|)
block|{
return|return
name|mutableExtensionsByNumber
operator|.
name|get
argument_list|(
operator|new
name|DescriptorIntPair
argument_list|(
name|containingType
argument_list|,
name|fieldNumber
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Find all extensions for mutable APIs by fully-qualified name of    * extended class. Note that this method is more computationally expensive    * than getting a single extension by name or number.    *    * @return Information about the extensions found, or {@code null} if there    *     are none.    */
specifier|public
name|Set
argument_list|<
name|ExtensionInfo
argument_list|>
name|getAllMutableExtensionsByExtendedType
parameter_list|(
specifier|final
name|String
name|fullName
parameter_list|)
block|{
name|HashSet
argument_list|<
name|ExtensionInfo
argument_list|>
name|extensions
init|=
operator|new
name|HashSet
argument_list|<
name|ExtensionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DescriptorIntPair
name|pair
range|:
name|mutableExtensionsByNumber
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|descriptor
operator|.
name|getFullName
argument_list|()
operator|.
name|equals
argument_list|(
name|fullName
argument_list|)
condition|)
block|{
name|extensions
operator|.
name|add
argument_list|(
name|mutableExtensionsByNumber
operator|.
name|get
argument_list|(
name|pair
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extensions
return|;
block|}
comment|/**    * Find all extensions for immutable APIs by fully-qualified name of    * extended class. Note that this method is more computationally expensive    * than getting a single extension by name or number.    *    * @return Information about the extensions found, or {@code null} if there    *     are none.    */
specifier|public
name|Set
argument_list|<
name|ExtensionInfo
argument_list|>
name|getAllImmutableExtensionsByExtendedType
parameter_list|(
specifier|final
name|String
name|fullName
parameter_list|)
block|{
name|HashSet
argument_list|<
name|ExtensionInfo
argument_list|>
name|extensions
init|=
operator|new
name|HashSet
argument_list|<
name|ExtensionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DescriptorIntPair
name|pair
range|:
name|immutableExtensionsByNumber
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|descriptor
operator|.
name|getFullName
argument_list|()
operator|.
name|equals
argument_list|(
name|fullName
argument_list|)
condition|)
block|{
name|extensions
operator|.
name|add
argument_list|(
name|immutableExtensionsByNumber
operator|.
name|get
argument_list|(
name|pair
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extensions
return|;
block|}
comment|/** Add an extension from a generated file to the registry. */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Extension
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|)
block|{
if|if
condition|(
name|extension
operator|.
name|getExtensionType
argument_list|()
operator|!=
name|Extension
operator|.
name|ExtensionType
operator|.
name|IMMUTABLE
operator|&&
name|extension
operator|.
name|getExtensionType
argument_list|()
operator|!=
name|Extension
operator|.
name|ExtensionType
operator|.
name|MUTABLE
condition|)
block|{
comment|// do not support other extension types. ignore
return|return;
block|}
name|add
argument_list|(
name|newExtensionInfo
argument_list|(
name|extension
argument_list|)
argument_list|,
name|extension
operator|.
name|getExtensionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Add an extension from a generated file to the registry. */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|GeneratedMessage
operator|.
name|GeneratedExtension
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|)
block|{
name|add
argument_list|(
operator|(
name|Extension
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|extension
argument_list|)
expr_stmt|;
block|}
specifier|static
name|ExtensionInfo
name|newExtensionInfo
parameter_list|(
specifier|final
name|Extension
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|)
block|{
if|if
condition|(
name|extension
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getJavaType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
if|if
condition|(
name|extension
operator|.
name|getMessageDefaultInstance
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Registered message-type extension had null default instance: "
operator|+
name|extension
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|ExtensionInfo
argument_list|(
name|extension
operator|.
name|getDescriptor
argument_list|()
argument_list|,
operator|(
name|Message
operator|)
name|extension
operator|.
name|getMessageDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ExtensionInfo
argument_list|(
name|extension
operator|.
name|getDescriptor
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/** Add a non-message-type extension to the registry by descriptor. */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|FieldDescriptor
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getJavaType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ExtensionRegistry.add() must be provided a default instance when "
operator|+
literal|"adding an embedded message extension."
argument_list|)
throw|;
block|}
name|ExtensionInfo
name|info
init|=
operator|new
name|ExtensionInfo
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|info
argument_list|,
name|Extension
operator|.
name|ExtensionType
operator|.
name|IMMUTABLE
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|info
argument_list|,
name|Extension
operator|.
name|ExtensionType
operator|.
name|MUTABLE
argument_list|)
expr_stmt|;
block|}
comment|/** Add a message-type extension to the registry by descriptor. */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|FieldDescriptor
name|type
parameter_list|,
specifier|final
name|Message
name|defaultInstance
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getJavaType
argument_list|()
operator|!=
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ExtensionRegistry.add() provided a default instance for a "
operator|+
literal|"non-message extension."
argument_list|)
throw|;
block|}
name|add
argument_list|(
operator|new
name|ExtensionInfo
argument_list|(
name|type
argument_list|,
name|defaultInstance
argument_list|)
argument_list|,
name|Extension
operator|.
name|ExtensionType
operator|.
name|IMMUTABLE
argument_list|)
expr_stmt|;
block|}
comment|// =================================================================
comment|// Private stuff.
specifier|private
name|ExtensionRegistry
parameter_list|()
block|{
name|this
operator|.
name|immutableExtensionsByName
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExtensionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|mutableExtensionsByName
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExtensionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|immutableExtensionsByNumber
operator|=
operator|new
name|HashMap
argument_list|<
name|DescriptorIntPair
argument_list|,
name|ExtensionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|mutableExtensionsByNumber
operator|=
operator|new
name|HashMap
argument_list|<
name|DescriptorIntPair
argument_list|,
name|ExtensionInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ExtensionRegistry
parameter_list|(
name|ExtensionRegistry
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|immutableExtensionsByName
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|other
operator|.
name|immutableExtensionsByName
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutableExtensionsByName
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|other
operator|.
name|mutableExtensionsByName
argument_list|)
expr_stmt|;
name|this
operator|.
name|immutableExtensionsByNumber
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|other
operator|.
name|immutableExtensionsByNumber
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutableExtensionsByNumber
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|other
operator|.
name|mutableExtensionsByNumber
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExtensionInfo
argument_list|>
name|immutableExtensionsByName
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ExtensionInfo
argument_list|>
name|mutableExtensionsByName
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|DescriptorIntPair
argument_list|,
name|ExtensionInfo
argument_list|>
name|immutableExtensionsByNumber
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|DescriptorIntPair
argument_list|,
name|ExtensionInfo
argument_list|>
name|mutableExtensionsByNumber
decl_stmt|;
name|ExtensionRegistry
parameter_list|(
name|boolean
name|empty
parameter_list|)
block|{
name|super
argument_list|(
name|EMPTY_REGISTRY_LITE
argument_list|)
expr_stmt|;
name|this
operator|.
name|immutableExtensionsByName
operator|=
name|Collections
operator|.
expr|<
name|String
operator|,
name|ExtensionInfo
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|mutableExtensionsByName
operator|=
name|Collections
operator|.
expr|<
name|String
operator|,
name|ExtensionInfo
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|immutableExtensionsByNumber
operator|=
name|Collections
operator|.
expr|<
name|DescriptorIntPair
operator|,
name|ExtensionInfo
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|mutableExtensionsByNumber
operator|=
name|Collections
operator|.
expr|<
name|DescriptorIntPair
operator|,
name|ExtensionInfo
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
block|}
specifier|static
specifier|final
name|ExtensionRegistry
name|EMPTY_REGISTRY
init|=
operator|new
name|ExtensionRegistry
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|void
name|add
parameter_list|(
specifier|final
name|ExtensionInfo
name|extension
parameter_list|,
specifier|final
name|Extension
operator|.
name|ExtensionType
name|extensionType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|extension
operator|.
name|descriptor
operator|.
name|isExtension
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ExtensionRegistry.add() was given a FieldDescriptor for a regular "
operator|+
literal|"(non-extension) field."
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ExtensionInfo
argument_list|>
name|extensionsByName
decl_stmt|;
name|Map
argument_list|<
name|DescriptorIntPair
argument_list|,
name|ExtensionInfo
argument_list|>
name|extensionsByNumber
decl_stmt|;
switch|switch
condition|(
name|extensionType
condition|)
block|{
case|case
name|IMMUTABLE
case|:
name|extensionsByName
operator|=
name|immutableExtensionsByName
expr_stmt|;
name|extensionsByNumber
operator|=
name|immutableExtensionsByNumber
expr_stmt|;
break|break;
case|case
name|MUTABLE
case|:
name|extensionsByName
operator|=
name|mutableExtensionsByName
expr_stmt|;
name|extensionsByNumber
operator|=
name|mutableExtensionsByNumber
expr_stmt|;
break|break;
default|default:
comment|// Ignore the unknown supported type.
return|return;
block|}
name|extensionsByName
operator|.
name|put
argument_list|(
name|extension
operator|.
name|descriptor
operator|.
name|getFullName
argument_list|()
argument_list|,
name|extension
argument_list|)
expr_stmt|;
name|extensionsByNumber
operator|.
name|put
argument_list|(
operator|new
name|DescriptorIntPair
argument_list|(
name|extension
operator|.
name|descriptor
operator|.
name|getContainingType
argument_list|()
argument_list|,
name|extension
operator|.
name|descriptor
operator|.
name|getNumber
argument_list|()
argument_list|)
argument_list|,
name|extension
argument_list|)
expr_stmt|;
specifier|final
name|FieldDescriptor
name|field
init|=
name|extension
operator|.
name|descriptor
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getContainingType
argument_list|()
operator|.
name|getOptions
argument_list|()
operator|.
name|getMessageSetWireFormat
argument_list|()
operator|&&
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|Type
operator|.
name|MESSAGE
operator|&&
name|field
operator|.
name|isOptional
argument_list|()
operator|&&
name|field
operator|.
name|getExtensionScope
argument_list|()
operator|==
name|field
operator|.
name|getMessageType
argument_list|()
condition|)
block|{
comment|// This is an extension of a MessageSet type defined within the extension
comment|// type's own scope.  For backwards-compatibility, allow it to be looked
comment|// up by type name.
name|extensionsByName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getMessageType
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|,
name|extension
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A (GenericDescriptor, int) pair, used as a map key. */
specifier|private
specifier|static
specifier|final
class|class
name|DescriptorIntPair
block|{
specifier|private
specifier|final
name|Descriptor
name|descriptor
decl_stmt|;
specifier|private
specifier|final
name|int
name|number
decl_stmt|;
name|DescriptorIntPair
parameter_list|(
specifier|final
name|Descriptor
name|descriptor
parameter_list|,
specifier|final
name|int
name|number
parameter_list|)
block|{
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|descriptor
operator|.
name|hashCode
argument_list|()
operator|*
operator|(
operator|(
literal|1
operator|<<
literal|16
operator|)
operator|-
literal|1
operator|)
operator|+
name|number
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|DescriptorIntPair
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|DescriptorIntPair
name|other
init|=
operator|(
name|DescriptorIntPair
operator|)
name|obj
decl_stmt|;
return|return
name|descriptor
operator|==
name|other
operator|.
name|descriptor
operator|&&
name|number
operator|==
name|other
operator|.
name|number
return|;
block|}
block|}
block|}
end_class

end_unit

