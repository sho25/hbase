begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Implements MapEntry messages.  *  * In reflection API, map fields will be treated as repeated message fields and  * each map entry is accessed as a message. This MapEntry class is used to  * represent these map entry messages in reflection API.  *  * Protobuf internal. Users shouldn't use this class.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MapEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMessage
block|{
specifier|private
specifier|static
specifier|final
class|class
name|Metadata
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|MapEntryLite
operator|.
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|public
specifier|final
name|Descriptor
name|descriptor
decl_stmt|;
specifier|public
specifier|final
name|Parser
argument_list|<
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|parser
decl_stmt|;
specifier|public
name|Metadata
parameter_list|(
name|Descriptor
name|descriptor
parameter_list|,
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|defaultInstance
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|keyType
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|valueType
parameter_list|)
block|{
name|super
argument_list|(
name|keyType
argument_list|,
name|defaultInstance
operator|.
name|key
argument_list|,
name|valueType
argument_list|,
name|defaultInstance
operator|.
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|new
name|AbstractParser
argument_list|<
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|parsePartialFrom
parameter_list|(
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|Metadata
operator|.
name|this
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|K
name|key
decl_stmt|;
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
specifier|private
specifier|final
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
decl_stmt|;
comment|/** Create a default MapEntry instance. */
specifier|private
name|MapEntry
parameter_list|(
name|Descriptor
name|descriptor
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|keyType
parameter_list|,
name|K
name|defaultKey
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|valueType
parameter_list|,
name|V
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|defaultKey
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|defaultValue
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
operator|new
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|descriptor
argument_list|,
name|this
argument_list|,
name|keyType
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
block|}
comment|/** Create a MapEntry with the provided key and value. */
specifier|private
name|MapEntry
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
comment|/** Parsing constructor. */
specifier|private
name|MapEntry
parameter_list|(
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
parameter_list|,
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
try|try
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|MapEntryLite
operator|.
name|parseEntry
argument_list|(
name|input
argument_list|,
name|metadata
argument_list|,
name|extensionRegistry
argument_list|)
decl_stmt|;
name|this
operator|.
name|key
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidProtocolBufferException
argument_list|(
name|e
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a default MapEntry instance. A default MapEntry instance should be    * created only once for each map entry message type. Generated code should    * store the created default instance and use it later to create new MapEntry    * messages of the same type.    */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newDefaultInstance
parameter_list|(
name|Descriptor
name|descriptor
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|keyType
parameter_list|,
name|K
name|defaultKey
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|valueType
parameter_list|,
name|V
name|defaultValue
parameter_list|)
block|{
return|return
operator|new
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|descriptor
argument_list|,
name|keyType
argument_list|,
name|defaultKey
argument_list|,
name|valueType
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|private
specifier|volatile
name|int
name|cachedSerializedSize
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
if|if
condition|(
name|cachedSerializedSize
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|cachedSerializedSize
return|;
block|}
name|int
name|size
init|=
name|MapEntryLite
operator|.
name|computeSerializedSize
argument_list|(
name|metadata
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|cachedSerializedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|MapEntryLite
operator|.
name|writeTo
argument_list|(
name|output
argument_list|,
name|metadata
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|isInitialized
argument_list|(
name|metadata
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Parser
argument_list|<
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|parser
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newBuilderForType
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|metadata
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|toBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|metadata
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
operator|new
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|metadata
argument_list|,
name|metadata
operator|.
name|defaultKey
argument_list|,
name|metadata
operator|.
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|descriptor
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|getAllFields
parameter_list|()
block|{
name|TreeMap
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|TreeMap
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|FieldDescriptor
name|field
range|:
name|metadata
operator|.
name|descriptor
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|hasField
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkFieldDescriptor
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getContainingType
argument_list|()
operator|!=
name|metadata
operator|.
name|descriptor
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Wrong FieldDescriptor \""
operator|+
name|field
operator|.
name|getFullName
argument_list|()
operator|+
literal|"\" used in message \""
operator|+
name|metadata
operator|.
name|descriptor
operator|.
name|getFullName
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|checkFieldDescriptor
argument_list|(
name|field
argument_list|)
expr_stmt|;
empty_stmt|;
comment|// A MapEntry always contains two fields.
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|checkFieldDescriptor
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|field
operator|.
name|getNumber
argument_list|()
operator|==
literal|1
condition|?
name|getKey
argument_list|()
else|:
name|getValue
argument_list|()
decl_stmt|;
comment|// Convert enums to EnumValueDescriptor.
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|Type
operator|.
name|ENUM
condition|)
block|{
name|result
operator|=
name|field
operator|.
name|getEnumType
argument_list|()
operator|.
name|findValueByNumberCreatingIfUnknown
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRepeatedFieldCount
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"There is no repeated field in a map entry message."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getRepeatedField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"There is no repeated field in a map entry message."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
comment|/**    * Builder to create {@link MapEntry} messages.    */
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMessage
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
decl_stmt|;
specifier|private
name|K
name|key
decl_stmt|;
specifier|private
name|V
name|value
decl_stmt|;
specifier|private
name|Builder
parameter_list|(
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
argument_list|(
name|metadata
argument_list|,
name|metadata
operator|.
name|defaultKey
argument_list|,
name|metadata
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|setKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|clearKey
parameter_list|()
block|{
name|this
operator|.
name|key
operator|=
name|metadata
operator|.
name|defaultKey
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|clearValue
parameter_list|()
block|{
name|this
operator|.
name|value
operator|=
name|metadata
operator|.
name|defaultValue
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|build
parameter_list|()
block|{
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|buildPartial
parameter_list|()
block|{
return|return
operator|new
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|metadata
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|descriptor
return|;
block|}
specifier|private
name|void
name|checkFieldDescriptor
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getContainingType
argument_list|()
operator|!=
name|metadata
operator|.
name|descriptor
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Wrong FieldDescriptor \""
operator|+
name|field
operator|.
name|getFullName
argument_list|()
operator|+
literal|"\" used in message \""
operator|+
name|metadata
operator|.
name|descriptor
operator|.
name|getFullName
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Message
operator|.
name|Builder
name|newBuilderForField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|checkFieldDescriptor
argument_list|(
name|field
argument_list|)
expr_stmt|;
empty_stmt|;
comment|// This method should be called for message fields and in a MapEntry
comment|// message only the value field can possibly be a message field.
if|if
condition|(
name|field
operator|.
name|getNumber
argument_list|()
operator|!=
literal|2
operator|||
name|field
operator|.
name|getJavaType
argument_list|()
operator|!=
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"\""
operator|+
name|field
operator|.
name|getFullName
argument_list|()
operator|+
literal|"\" is not a message value field."
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Message
operator|)
name|value
operator|)
operator|.
name|newBuilderForType
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|setField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|checkFieldDescriptor
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getNumber
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setKey
argument_list|(
operator|(
name|K
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|Type
operator|.
name|ENUM
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|EnumValueDescriptor
operator|)
name|value
operator|)
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|Type
operator|.
name|MESSAGE
condition|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|metadata
operator|.
name|defaultValue
operator|.
name|getClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|value
argument_list|)
condition|)
block|{
comment|// The value is not the exact right message type.  However, if it
comment|// is an alternative implementation of the same type -- e.g. a
comment|// DynamicMessage -- we should accept it.  In this case we can make
comment|// a copy of the message.
name|value
operator|=
operator|(
operator|(
name|Message
operator|)
name|metadata
operator|.
name|defaultValue
operator|)
operator|.
name|toBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
operator|(
name|Message
operator|)
name|value
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
name|setValue
argument_list|(
operator|(
name|V
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|clearField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|checkFieldDescriptor
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getNumber
argument_list|()
operator|==
literal|1
condition|)
block|{
name|clearKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|clearValue
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|setRepeatedField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"There is no repeated field in a map entry message."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|addRepeatedField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"There is no repeated field in a map entry message."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|setUnknownFields
parameter_list|(
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
comment|// Unknown fields are discarded for MapEntry message.
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
operator|new
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|metadata
argument_list|,
name|metadata
operator|.
name|defaultKey
argument_list|,
name|metadata
operator|.
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|MapEntry
operator|.
name|isInitialized
argument_list|(
name|metadata
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|getAllFields
parameter_list|()
block|{
specifier|final
name|TreeMap
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|TreeMap
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|FieldDescriptor
name|field
range|:
name|metadata
operator|.
name|descriptor
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|hasField
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|checkFieldDescriptor
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|checkFieldDescriptor
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|field
operator|.
name|getNumber
argument_list|()
operator|==
literal|1
condition|?
name|getKey
argument_list|()
else|:
name|getValue
argument_list|()
decl_stmt|;
comment|// Convert enums to EnumValueDescriptor.
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|Type
operator|.
name|ENUM
condition|)
block|{
name|result
operator|=
name|field
operator|.
name|getEnumType
argument_list|()
operator|.
name|findValueByNumberCreatingIfUnknown
argument_list|(
operator|(
name|Integer
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRepeatedFieldCount
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"There is no repeated field in a map entry message."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getRepeatedField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"There is no repeated field in a map entry message."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|clone
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|(
name|metadata
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|V
parameter_list|>
name|boolean
name|isInitialized
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|.
name|valueType
operator|.
name|getJavaType
argument_list|()
operator|==
name|WireFormat
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
return|return
operator|(
operator|(
name|MessageLite
operator|)
name|value
operator|)
operator|.
name|isInitialized
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

