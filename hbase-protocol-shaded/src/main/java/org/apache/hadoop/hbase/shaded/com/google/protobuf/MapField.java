begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Internal representation of map fields in generated messages.  *  * This class supports accessing the map field as a {@link Map} to be used in  * generated API and also supports accessing the field as a {@link List} to be  * used in reflection API. It keeps track of where the data is currently stored  * and do necessary conversions between map and list.  *  * This class is a protobuf implementation detail. Users shouldn't use this  * class directly.  *  * THREAD-SAFETY NOTE: Read-only access is thread-safe. Users can call getMap()  * and getList() concurrently in multiple threads. If write-access is needed,  * all access must be synchronized.  */
end_comment

begin_class
specifier|public
class|class
name|MapField
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|MutabilityOracle
block|{
comment|/**    * Indicates where the data of this map field is currently stored.    *    * MAP: Data is stored in mapData.    * LIST: Data is stored in listData.    * BOTH: mapData and listData have the same data.    *    * When the map field is accessed (through generated API or reflection API),    * it will shift between these 3 modes:    *    *          getMap()   getList()   getMutableMap()   getMutableList()    *   MAP      MAP        BOTH          MAP               LIST    *   LIST     BOTH       LIST          MAP               LIST    *   BOTH     BOTH       BOTH          MAP               LIST    *    * As the map field changes its mode, the list/map reference returned in a    * previous method call may be invalidated.    */
specifier|private
enum|enum
name|StorageMode
block|{
name|MAP
block|,
name|LIST
block|,
name|BOTH
block|}
specifier|private
specifier|volatile
name|boolean
name|isMutable
decl_stmt|;
specifier|private
specifier|volatile
name|StorageMode
name|mode
decl_stmt|;
specifier|private
name|MutatabilityAwareMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapData
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Message
argument_list|>
name|listData
decl_stmt|;
comment|// Convert between a map entry Message and a key-value pair.
specifier|private
specifier|static
interface|interface
name|Converter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
name|Message
name|convertKeyAndValueToMessage
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
function_decl|;
name|void
name|convertMessageToKeyAndValue
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
function_decl|;
name|Message
name|getMessageDefaultInstance
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|ImmutableMessageConverter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Converter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|defaultEntry
decl_stmt|;
specifier|public
name|ImmutableMessageConverter
parameter_list|(
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|defaultEntry
parameter_list|)
block|{
name|this
operator|.
name|defaultEntry
operator|=
name|defaultEntry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|convertKeyAndValueToMessage
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|defaultEntry
operator|.
name|newBuilderForType
argument_list|()
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|buildPartial
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|convertMessageToKeyAndValue
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
operator|(
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|message
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|getMessageDefaultInstance
parameter_list|()
block|{
return|return
name|defaultEntry
return|;
block|}
block|}
specifier|private
specifier|final
name|Converter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|converter
decl_stmt|;
specifier|private
name|MapField
parameter_list|(
name|Converter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|converter
parameter_list|,
name|StorageMode
name|mode
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapData
parameter_list|)
block|{
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
name|this
operator|.
name|isMutable
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|mapData
operator|=
operator|new
name|MutatabilityAwareMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|,
name|mapData
argument_list|)
expr_stmt|;
name|this
operator|.
name|listData
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|MapField
parameter_list|(
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|defaultEntry
parameter_list|,
name|StorageMode
name|mode
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapData
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ImmutableMessageConverter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|defaultEntry
argument_list|)
argument_list|,
name|mode
argument_list|,
name|mapData
argument_list|)
expr_stmt|;
block|}
comment|/** Returns an immutable empty MapField. */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|emptyMapField
parameter_list|(
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|defaultEntry
parameter_list|)
block|{
return|return
operator|new
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|defaultEntry
argument_list|,
name|StorageMode
operator|.
name|MAP
argument_list|,
name|Collections
operator|.
expr|<
name|K
argument_list|,
name|V
operator|>
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
comment|/** Creates a new mutable empty MapField. */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newMapField
parameter_list|(
name|MapEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|defaultEntry
parameter_list|)
block|{
return|return
operator|new
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|defaultEntry
argument_list|,
name|StorageMode
operator|.
name|MAP
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Message
name|convertKeyAndValueToMessage
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|converter
operator|.
name|convertKeyAndValueToMessage
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|convertMessageToKeyAndValue
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|converter
operator|.
name|convertMessageToKeyAndValue
argument_list|(
name|message
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Message
argument_list|>
name|convertMapToList
parameter_list|(
name|MutatabilityAwareMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapData
parameter_list|)
block|{
name|List
argument_list|<
name|Message
argument_list|>
name|listData
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|mapData
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|listData
operator|.
name|add
argument_list|(
name|convertKeyAndValueToMessage
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|listData
return|;
block|}
specifier|private
name|MutatabilityAwareMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|convertListToMap
parameter_list|(
name|List
argument_list|<
name|Message
argument_list|>
name|listData
parameter_list|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mapData
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Message
name|item
range|:
name|listData
control|)
block|{
name|convertMessageToKeyAndValue
argument_list|(
name|item
argument_list|,
name|mapData
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MutatabilityAwareMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|,
name|mapData
argument_list|)
return|;
block|}
comment|/** Returns the content of this MapField as a read-only Map. */
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getMap
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|==
name|StorageMode
operator|.
name|LIST
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|mode
operator|==
name|StorageMode
operator|.
name|LIST
condition|)
block|{
name|mapData
operator|=
name|convertListToMap
argument_list|(
name|listData
argument_list|)
expr_stmt|;
name|mode
operator|=
name|StorageMode
operator|.
name|BOTH
expr_stmt|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|mapData
argument_list|)
return|;
block|}
comment|/** Gets a mutable Map view of this MapField. */
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getMutableMap
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|!=
name|StorageMode
operator|.
name|MAP
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|StorageMode
operator|.
name|LIST
condition|)
block|{
name|mapData
operator|=
name|convertListToMap
argument_list|(
name|listData
argument_list|)
expr_stmt|;
block|}
name|listData
operator|=
literal|null
expr_stmt|;
name|mode
operator|=
name|StorageMode
operator|.
name|MAP
expr_stmt|;
block|}
return|return
name|mapData
return|;
block|}
specifier|public
name|void
name|mergeFrom
parameter_list|(
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
name|getMutableMap
argument_list|()
operator|.
name|putAll
argument_list|(
name|MapFieldLite
operator|.
name|copy
argument_list|(
name|other
operator|.
name|getMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|mapData
operator|=
operator|new
name|MutatabilityAwareMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|mode
operator|=
name|StorageMode
operator|.
name|MAP
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|MapField
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
init|=
operator|(
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|MapFieldLite
operator|.
expr|<
name|K
operator|,
name|V
operator|>
name|equals
argument_list|(
name|getMap
argument_list|()
argument_list|,
name|other
operator|.
name|getMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|MapFieldLite
operator|.
expr|<
name|K
operator|,
name|V
operator|>
name|calculateHashCodeForMap
argument_list|(
name|getMap
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns a deep copy of this MapField. */
specifier|public
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copy
parameter_list|()
block|{
return|return
operator|new
name|MapField
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|converter
argument_list|,
name|StorageMode
operator|.
name|MAP
argument_list|,
name|MapFieldLite
operator|.
name|copy
argument_list|(
name|getMap
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Gets the content of this MapField as a read-only List. */
name|List
argument_list|<
name|Message
argument_list|>
name|getList
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|==
name|StorageMode
operator|.
name|MAP
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|mode
operator|==
name|StorageMode
operator|.
name|MAP
condition|)
block|{
name|listData
operator|=
name|convertMapToList
argument_list|(
name|mapData
argument_list|)
expr_stmt|;
name|mode
operator|=
name|StorageMode
operator|.
name|BOTH
expr_stmt|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|listData
argument_list|)
return|;
block|}
comment|/** Gets a mutable List view of this MapField. */
name|List
argument_list|<
name|Message
argument_list|>
name|getMutableList
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|!=
name|StorageMode
operator|.
name|LIST
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|StorageMode
operator|.
name|MAP
condition|)
block|{
name|listData
operator|=
name|convertMapToList
argument_list|(
name|mapData
argument_list|)
expr_stmt|;
block|}
name|mapData
operator|=
literal|null
expr_stmt|;
name|mode
operator|=
name|StorageMode
operator|.
name|LIST
expr_stmt|;
block|}
return|return
name|listData
return|;
block|}
comment|/**    * Gets the default instance of the message stored in the list view of this    * map field.    */
name|Message
name|getMapEntryMessageDefaultInstance
parameter_list|()
block|{
return|return
name|converter
operator|.
name|getMessageDefaultInstance
argument_list|()
return|;
block|}
comment|/**    * Makes this list immutable. All subsequent modifications will throw an    * {@link UnsupportedOperationException}.    */
specifier|public
name|void
name|makeImmutable
parameter_list|()
block|{
name|isMutable
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Returns whether this field can be modified.    */
specifier|public
name|boolean
name|isMutable
parameter_list|()
block|{
return|return
name|isMutable
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.hbase.shaded.com.google.protobuf.MutabilityOracle#ensureMutable()    */
annotation|@
name|Override
specifier|public
name|void
name|ensureMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMutable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**    * An internal map that checks for mutability before delegating.    */
specifier|private
specifier|static
class|class
name|MutatabilityAwareMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|MutabilityOracle
name|mutabilityOracle
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
decl_stmt|;
name|MutatabilityAwareMap
parameter_list|(
name|MutabilityOracle
name|mutabilityOracle
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|mutabilityOracle
operator|=
name|mutabilityOracle
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|m
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|putAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
operator|new
name|MutatabilityAwareSet
argument_list|<
name|K
argument_list|>
argument_list|(
name|mutabilityOracle
argument_list|,
name|delegate
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
operator|new
name|MutatabilityAwareCollection
argument_list|<
name|V
argument_list|>
argument_list|(
name|mutabilityOracle
argument_list|,
name|delegate
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|MutatabilityAwareSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|(
name|mutabilityOracle
argument_list|,
name|delegate
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * An internal collection that checks for mutability before delegating.      */
specifier|private
specifier|static
class|class
name|MutatabilityAwareCollection
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Collection
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|MutabilityOracle
name|mutabilityOracle
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|E
argument_list|>
name|delegate
decl_stmt|;
name|MutatabilityAwareCollection
parameter_list|(
name|MutabilityOracle
name|mutabilityOracle
parameter_list|,
name|Collection
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|mutabilityOracle
operator|=
name|mutabilityOracle
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|MutatabilityAwareIterator
argument_list|<
name|E
argument_list|>
argument_list|(
name|mutabilityOracle
argument_list|,
name|delegate
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
comment|// Unsupported operation in the delegate.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
comment|// Unsupported operation in the delegate.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * An internal set that checks for mutability before delegating.      */
specifier|private
specifier|static
class|class
name|MutatabilityAwareSet
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Set
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|MutabilityOracle
name|mutabilityOracle
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|E
argument_list|>
name|delegate
decl_stmt|;
name|MutatabilityAwareSet
parameter_list|(
name|MutabilityOracle
name|mutabilityOracle
parameter_list|,
name|Set
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|mutabilityOracle
operator|=
name|mutabilityOracle
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|MutatabilityAwareIterator
argument_list|<
name|E
argument_list|>
argument_list|(
name|mutabilityOracle
argument_list|,
name|delegate
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * An internal iterator that checks for mutability before delegating.      */
specifier|private
specifier|static
class|class
name|MutatabilityAwareIterator
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|MutabilityOracle
name|mutabilityOracle
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|E
argument_list|>
name|delegate
decl_stmt|;
name|MutatabilityAwareIterator
parameter_list|(
name|MutabilityOracle
name|mutabilityOracle
parameter_list|,
name|Iterator
argument_list|<
name|E
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|mutabilityOracle
operator|=
name|mutabilityOracle
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|next
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|mutabilityOracle
operator|.
name|ensureMutable
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

