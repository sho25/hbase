begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A custom map implementation from FieldDescriptor to Object optimized to  * minimize the number of memory allocations for instances with a small number  * of mappings. The implementation stores the first {@code k} mappings in an  * array for a configurable value of {@code k}, allowing direct access to the  * corresponding {@code Entry}s without the need to create an Iterator. The  * remaining entries are stored in an overflow map. Iteration over the entries  * in the map should be done as follows:  *  *<pre>   {@code  * for (int i = 0; i< fieldMap.getNumArrayEntries(); i++) {  *   process(fieldMap.getArrayEntryAt(i));  * }  * for (Map.Entry<K, V> entry : fieldMap.getOverflowEntries()) {  *   process(entry);  * }  * }</pre>  *  * The resulting iteration is in order of ascending field tag number. The  * object returned by {@link #entrySet()} adheres to the same contract but is  * less efficient as it necessarily involves creating an object for iteration.  *<p>  * The tradeoff for this memory efficiency is that the worst case running time  * of the {@code put()} operation is {@code O(k + lg n)}, which happens when  * entries are added in descending order. {@code k} should be chosen such that  * it covers enough common cases without adversely affecting larger maps. In  * practice, the worst case scenario does not happen for extensions because  * extension fields are serialized and deserialized in order of ascending tag  * number, but the worst case scenario can happen for DynamicMessages.  *<p>  * The running time for all other operations is similar to that of  * {@code TreeMap}.  *<p>  * Instances are not thread-safe until {@link #makeImmutable()} is called,  * after which any modifying operation will result in an  * {@link UnsupportedOperationException}.  *  * @author darick@google.com Darick Tong  */
end_comment

begin_comment
comment|// This class is final for all intents and purposes because the constructor is
end_comment

begin_comment
comment|// private. However, the FieldDescriptor-specific logic is encapsulated in
end_comment

begin_comment
comment|// a subclass to aid testability of the core logic.
end_comment

begin_class
class|class
name|SmallSortedMap
parameter_list|<
name|K
extends|extends
name|Comparable
parameter_list|<
name|K
parameter_list|>
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * Creates a new instance for mapping FieldDescriptors to their values.    * The {@link #makeImmutable()} implementation will convert the List values    * of any repeated fields to unmodifiable lists.    *    * @param arraySize The size of the entry array containing the    *        lexicographically smallest mappings.    */
specifier|static
parameter_list|<
name|FieldDescriptorType
extends|extends
name|FieldSet
operator|.
name|FieldDescriptorLite
argument_list|<
name|FieldDescriptorType
argument_list|>
parameter_list|>
name|SmallSortedMap
argument_list|<
name|FieldDescriptorType
argument_list|,
name|Object
argument_list|>
name|newFieldMap
parameter_list|(
name|int
name|arraySize
parameter_list|)
block|{
return|return
operator|new
name|SmallSortedMap
argument_list|<
name|FieldDescriptorType
argument_list|,
name|Object
argument_list|>
argument_list|(
name|arraySize
argument_list|)
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|makeImmutable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isImmutable
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNumArrayEntries
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|FieldDescriptorType
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|getArrayEntryAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
specifier|final
name|List
name|value
init|=
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FieldDescriptorType
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|getOverflowEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
specifier|final
name|List
name|value
init|=
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setValue
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Creates a new instance for testing.    *    * @param arraySize The size of the entry array containing the    *        lexicographically smallest mappings.    */
specifier|static
parameter_list|<
name|K
extends|extends
name|Comparable
argument_list|<
name|K
argument_list|>
parameter_list|,
name|V
parameter_list|>
name|SmallSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newInstanceForTest
parameter_list|(
name|int
name|arraySize
parameter_list|)
block|{
return|return
operator|new
name|SmallSortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|arraySize
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|maxArraySize
decl_stmt|;
comment|// The "entry array" is actually a List because generic arrays are not
comment|// allowed. ArrayList also nicely handles the entry shifting on inserts and
comment|// removes.
specifier|private
name|List
argument_list|<
name|Entry
argument_list|>
name|entryList
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|overflowEntries
decl_stmt|;
specifier|private
name|boolean
name|isImmutable
decl_stmt|;
comment|// The EntrySet is a stateless view of the Map. It's initialized the first
comment|// time it is requested and reused henceforth.
specifier|private
specifier|volatile
name|EntrySet
name|lazyEntrySet
decl_stmt|;
comment|/**    * @code arraySize Size of the array in which the lexicographically smallest    *       mappings are stored. (i.e. the {@code k} referred to in the class    *       documentation).    */
specifier|private
name|SmallSortedMap
parameter_list|(
name|int
name|arraySize
parameter_list|)
block|{
name|this
operator|.
name|maxArraySize
operator|=
name|arraySize
expr_stmt|;
name|this
operator|.
name|entryList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|overflowEntries
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
comment|/** Make this map immutable from this point forward. */
specifier|public
name|void
name|makeImmutable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isImmutable
condition|)
block|{
comment|// Note: There's no need to wrap the entryList in an unmodifiableList
comment|// because none of the list's accessors are exposed. The iterator() of
comment|// overflowEntries, on the other hand, is exposed so it must be made
comment|// unmodifiable.
name|overflowEntries
operator|=
name|overflowEntries
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
expr|<
name|K
operator|,
name|V
operator|>
name|emptyMap
argument_list|()
operator|:
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|overflowEntries
argument_list|)
expr_stmt|;
name|isImmutable
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** @return Whether {@link #makeImmutable()} has been called. */
specifier|public
name|boolean
name|isImmutable
parameter_list|()
block|{
return|return
name|isImmutable
return|;
block|}
comment|/** @return The number of entries in the entry array. */
specifier|public
name|int
name|getNumArrayEntries
parameter_list|()
block|{
return|return
name|entryList
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** @return The array entry at the given {@code index}. */
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getArrayEntryAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|entryList
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/** @return There number of overflow entries. */
specifier|public
name|int
name|getNumOverflowEntries
parameter_list|()
block|{
return|return
name|overflowEntries
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** @return An iterable over the overflow entries. */
specifier|public
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getOverflowEntries
parameter_list|()
block|{
return|return
name|overflowEntries
operator|.
name|isEmpty
argument_list|()
condition|?
name|EmptySet
operator|.
expr|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|>
name|iterable
argument_list|()
else|:
name|overflowEntries
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|entryList
operator|.
name|size
argument_list|()
operator|+
name|overflowEntries
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * The implementation throws a {@code ClassCastException} if o is not an    * object of type {@code K}.    *    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|K
name|key
init|=
operator|(
name|K
operator|)
name|o
decl_stmt|;
return|return
name|binarySearchInArray
argument_list|(
name|key
argument_list|)
operator|>=
literal|0
operator|||
name|overflowEntries
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * The implementation throws a {@code ClassCastException} if o is not an    * object of type {@code K}.    *    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|K
name|key
init|=
operator|(
name|K
operator|)
name|o
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|binarySearchInArray
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|entryList
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
name|overflowEntries
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|checkMutable
argument_list|()
expr_stmt|;
specifier|final
name|int
name|index
init|=
name|binarySearchInArray
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
comment|// Replace existing array entry.
return|return
name|entryList
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
return|;
block|}
name|ensureEntryArrayMutable
argument_list|()
expr_stmt|;
specifier|final
name|int
name|insertionPoint
init|=
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|insertionPoint
operator|>=
name|maxArraySize
condition|)
block|{
comment|// Put directly in overflow.
return|return
name|getOverflowEntriesMutable
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|// Insert new Entry in array.
if|if
condition|(
name|entryList
operator|.
name|size
argument_list|()
operator|==
name|maxArraySize
condition|)
block|{
comment|// Shift the last array entry into overflow.
specifier|final
name|Entry
name|lastEntryInArray
init|=
name|entryList
operator|.
name|remove
argument_list|(
name|maxArraySize
operator|-
literal|1
argument_list|)
decl_stmt|;
name|getOverflowEntriesMutable
argument_list|()
operator|.
name|put
argument_list|(
name|lastEntryInArray
operator|.
name|getKey
argument_list|()
argument_list|,
name|lastEntryInArray
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entryList
operator|.
name|add
argument_list|(
name|insertionPoint
argument_list|,
operator|new
name|Entry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|checkMutable
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|entryList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|entryList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|overflowEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|overflowEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The implementation throws a {@code ClassCastException} if o is not an    * object of type {@code K}.    *    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|checkMutable
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|K
name|key
init|=
operator|(
name|K
operator|)
name|o
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|binarySearchInArray
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|removeArrayEntryAt
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// overflowEntries might be Collections.unmodifiableMap(), so only
comment|// call remove() if it is non-empty.
if|if
condition|(
name|overflowEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|overflowEntries
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
specifier|private
name|V
name|removeArrayEntryAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|checkMutable
argument_list|()
expr_stmt|;
specifier|final
name|V
name|removed
init|=
name|entryList
operator|.
name|remove
argument_list|(
name|index
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|overflowEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Shift the first entry in the overflow to be the last entry in the
comment|// array.
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
init|=
name|getOverflowEntriesMutable
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|entryList
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
comment|/**    * @param key The key to find in the entry array.    * @return The returned integer position follows the same semantics as the    *     value returned by {@link java.util.Arrays#binarySearch()}.    */
specifier|private
name|int
name|binarySearchInArray
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|int
name|left
init|=
literal|0
decl_stmt|;
name|int
name|right
init|=
name|entryList
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// Optimization: For the common case in which entries are added in
comment|// ascending tag order, check the largest element in the array before
comment|// doing a full binary search.
if|if
condition|(
name|right
operator|>=
literal|0
condition|)
block|{
name|int
name|cmp
init|=
name|key
operator|.
name|compareTo
argument_list|(
name|entryList
operator|.
name|get
argument_list|(
name|right
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
return|return
operator|-
operator|(
name|right
operator|+
literal|2
operator|)
return|;
comment|// Insert point is after "right".
block|}
elseif|else
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|right
return|;
block|}
block|}
while|while
condition|(
name|left
operator|<=
name|right
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|left
operator|+
name|right
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|cmp
init|=
name|key
operator|.
name|compareTo
argument_list|(
name|entryList
operator|.
name|get
argument_list|(
name|mid
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|right
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|left
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
name|mid
return|;
block|}
block|}
return|return
operator|-
operator|(
name|left
operator|+
literal|1
operator|)
return|;
block|}
comment|/**    * Similar to the AbstractMap implementation of {@code keySet()} and    * {@code values()}, the entry set is created the first time this method is    * called, and returned in response to all subsequent calls.    *    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
if|if
condition|(
name|lazyEntrySet
operator|==
literal|null
condition|)
block|{
name|lazyEntrySet
operator|=
operator|new
name|EntrySet
argument_list|()
expr_stmt|;
block|}
return|return
name|lazyEntrySet
return|;
block|}
comment|/**    * @throws UnsupportedOperationException if {@link #makeImmutable()} has    *         has been called.    */
specifier|private
name|void
name|checkMutable
parameter_list|()
block|{
if|if
condition|(
name|isImmutable
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**    * @return a {@link SortedMap} to which overflow entries mappings can be    *         added or removed.    * @throws UnsupportedOperationException if {@link #makeImmutable()} has been    *         called.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getOverflowEntriesMutable
parameter_list|()
block|{
name|checkMutable
argument_list|()
expr_stmt|;
if|if
condition|(
name|overflowEntries
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|overflowEntries
operator|instanceof
name|TreeMap
operator|)
condition|)
block|{
name|overflowEntries
operator|=
operator|new
name|TreeMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|SortedMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|overflowEntries
return|;
block|}
comment|/**    * Lazily creates the entry list. Any code that adds to the list must first    * call this method.    */
specifier|private
name|void
name|ensureEntryArrayMutable
parameter_list|()
block|{
name|checkMutable
argument_list|()
expr_stmt|;
if|if
condition|(
name|entryList
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|entryList
operator|instanceof
name|ArrayList
operator|)
condition|)
block|{
name|entryList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|(
name|maxArraySize
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Entry implementation that implements Comparable in order to support    * binary search within the entry array. Also checks mutability in    * {@link #setValue()}.    */
specifier|private
class|class
name|Entry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Comparable
argument_list|<
name|Entry
argument_list|>
block|{
specifier|private
specifier|final
name|K
name|key
decl_stmt|;
specifier|private
name|V
name|value
decl_stmt|;
name|Entry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|copy
parameter_list|)
block|{
name|this
argument_list|(
name|copy
operator|.
name|getKey
argument_list|()
argument_list|,
name|copy
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Entry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Entry
name|other
parameter_list|)
block|{
return|return
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|newValue
parameter_list|)
block|{
name|checkMutable
argument_list|()
expr_stmt|;
specifier|final
name|V
name|oldValue
init|=
name|this
operator|.
name|value
decl_stmt|;
name|this
operator|.
name|value
operator|=
name|newValue
expr_stmt|;
return|return
name|oldValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|.
name|Entry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|other
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|equals
argument_list|(
name|key
argument_list|,
name|other
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|value
argument_list|,
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|key
operator|==
literal|null
condition|?
literal|0
else|:
name|key
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
operator|(
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|value
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|key
operator|+
literal|"="
operator|+
name|value
return|;
block|}
comment|/** equals() that handles null values. */
specifier|private
name|boolean
name|equals
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|==
literal|null
condition|?
name|o2
operator|==
literal|null
else|:
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
comment|/**    * Stateless view of the entries in the field map.    */
specifier|private
class|class
name|EntrySet
extends|extends
name|AbstractSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntryIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|SmallSortedMap
operator|.
name|this
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Throws a {@link ClassCastException} if o is not of the expected type.      *      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|o
decl_stmt|;
specifier|final
name|V
name|existing
init|=
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|existing
operator|==
name|value
operator|||
operator|(
name|existing
operator|!=
literal|null
operator|&&
name|existing
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
parameter_list|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Throws a {@link ClassCastException} if o is not of the expected type.      *      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|SmallSortedMap
operator|.
name|this
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|SmallSortedMap
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Iterator implementation that switches from the entry array to the overflow    * entries appropriately.    */
specifier|private
class|class
name|EntryIterator
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
specifier|private
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|nextCalledBeforeRemove
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|lazyOverflowIterator
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|pos
operator|+
literal|1
operator|)
operator|<
name|entryList
operator|.
name|size
argument_list|()
operator|||
name|getOverflowIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
name|nextCalledBeforeRemove
operator|=
literal|true
expr_stmt|;
comment|// Always increment pos so that we know whether the last returned value
comment|// was from the array or from overflow.
if|if
condition|(
operator|++
name|pos
operator|<
name|entryList
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|entryList
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
return|return
name|getOverflowIterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nextCalledBeforeRemove
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"remove() was called before next()"
argument_list|)
throw|;
block|}
name|nextCalledBeforeRemove
operator|=
literal|false
expr_stmt|;
name|checkMutable
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|<
name|entryList
operator|.
name|size
argument_list|()
condition|)
block|{
name|removeArrayEntryAt
argument_list|(
name|pos
operator|--
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getOverflowIterator
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * It is important to create the overflow iterator only after the array      * entries have been iterated over because the overflow entry set changes      * when the client calls remove() on the array entries, which invalidates      * any existing iterators.      */
specifier|private
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getOverflowIterator
parameter_list|()
block|{
if|if
condition|(
name|lazyOverflowIterator
operator|==
literal|null
condition|)
block|{
name|lazyOverflowIterator
operator|=
name|overflowEntries
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|lazyOverflowIterator
return|;
block|}
block|}
comment|/**    * Helper class that holds immutable instances of an Iterable/Iterator that    * we return when the overflow entries is empty. This eliminates the creation    * of an Iterator object when there is nothing to iterate over.    */
specifier|private
specifier|static
class|class
name|EmptySet
block|{
specifier|private
specifier|static
specifier|final
name|Iterator
argument_list|<
name|Object
argument_list|>
name|ITERATOR
init|=
operator|new
name|Iterator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Iterable
argument_list|<
name|Object
argument_list|>
name|ITERABLE
init|=
operator|new
name|Iterable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|ITERATOR
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|iterable
parameter_list|()
block|{
return|return
operator|(
name|Iterable
argument_list|<
name|T
argument_list|>
operator|)
name|ITERABLE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SmallSortedMap
operator|)
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
name|SmallSortedMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|other
init|=
operator|(
name|SmallSortedMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|other
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Best effort try to avoid allocating an entry set.
specifier|final
name|int
name|numArrayEntries
init|=
name|getNumArrayEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|numArrayEntries
operator|!=
name|other
operator|.
name|getNumArrayEntries
argument_list|()
condition|)
block|{
return|return
name|entrySet
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numArrayEntries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|getArrayEntryAt
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getArrayEntryAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|numArrayEntries
operator|!=
name|size
condition|)
block|{
return|return
name|overflowEntries
operator|.
name|equals
argument_list|(
name|other
operator|.
name|overflowEntries
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|listSize
init|=
name|getNumArrayEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|+=
name|entryList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
comment|// Avoid the iterator allocation if possible.
if|if
condition|(
name|getNumOverflowEntries
argument_list|()
operator|>
literal|0
condition|)
block|{
name|h
operator|+=
name|overflowEntries
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
block|}
end_class

end_unit

