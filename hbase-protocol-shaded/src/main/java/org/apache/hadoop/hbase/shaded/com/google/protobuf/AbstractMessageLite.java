begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * A partial implementation of the {@link MessageLite} interface which  * implements as many methods of that interface as possible in terms of other  * methods.  *  * @author kenton@google.com Kenton Varda  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMessageLite
parameter_list|<
name|MessageType
extends|extends
name|AbstractMessageLite
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|,
name|BuilderType
extends|extends
name|AbstractMessageLite
operator|.
name|Builder
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|>
implements|implements
name|MessageLite
block|{
specifier|protected
name|int
name|memoizedHashCode
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ByteString
name|toByteString
parameter_list|()
block|{
try|try
block|{
specifier|final
name|ByteString
operator|.
name|CodedBuilder
name|out
init|=
name|ByteString
operator|.
name|newCodedBuilder
argument_list|(
name|getSerializedSize
argument_list|()
argument_list|)
decl_stmt|;
name|writeTo
argument_list|(
name|out
operator|.
name|getCodedOutput
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getSerializingExceptionMessage
argument_list|(
literal|"ByteString"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
try|try
block|{
specifier|final
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|getSerializedSize
argument_list|()
index|]
decl_stmt|;
specifier|final
name|CodedOutputStream
name|output
init|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|checkNoSpaceLeft
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getSerializingExceptionMessage
argument_list|(
literal|"byte array"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|bufferSize
init|=
name|CodedOutputStream
operator|.
name|computePreferredBufferSize
argument_list|(
name|getSerializedSize
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CodedOutputStream
name|codedOutput
init|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|output
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|writeTo
argument_list|(
name|codedOutput
argument_list|)
expr_stmt|;
name|codedOutput
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeDelimitedTo
parameter_list|(
specifier|final
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|serialized
init|=
name|getSerializedSize
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bufferSize
init|=
name|CodedOutputStream
operator|.
name|computePreferredBufferSize
argument_list|(
name|CodedOutputStream
operator|.
name|computeRawVarint32Size
argument_list|(
name|serialized
argument_list|)
operator|+
name|serialized
argument_list|)
decl_stmt|;
specifier|final
name|CodedOutputStream
name|codedOutput
init|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|output
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|codedOutput
operator|.
name|writeRawVarint32
argument_list|(
name|serialized
argument_list|)
expr_stmt|;
name|writeTo
argument_list|(
name|codedOutput
argument_list|)
expr_stmt|;
name|codedOutput
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Package private helper method for AbstractParser to create    * UninitializedMessageException.    */
name|UninitializedMessageException
name|newUninitializedMessageException
parameter_list|()
block|{
return|return
operator|new
name|UninitializedMessageException
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSerializingExceptionMessage
parameter_list|(
name|String
name|target
parameter_list|)
block|{
return|return
literal|"Serializing "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to a "
operator|+
name|target
operator|+
literal|" threw an IOException (should never happen)."
return|;
block|}
specifier|protected
specifier|static
name|void
name|checkByteStringIsUtf8
parameter_list|(
name|ByteString
name|byteString
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|byteString
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Byte string is not UTF-8."
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addAll
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|T
argument_list|>
name|values
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|?
super|super
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|Builder
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**    * A partial implementation of the {@link Message.Builder} interface which    * implements as many methods of that interface as possible in terms of    * other methods.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|abstract
specifier|static
class|class
name|Builder
parameter_list|<
name|MessageType
extends|extends
name|AbstractMessageLite
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|,
name|BuilderType
extends|extends
name|Builder
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|>
implements|implements
name|MessageLite
operator|.
name|Builder
block|{
comment|// The compiler produces an error if this is not declared explicitly.
annotation|@
name|Override
specifier|public
specifier|abstract
name|BuilderType
name|clone
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergeFrom
argument_list|(
name|input
argument_list|,
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
return|;
block|}
comment|// Re-defined here for return type covariance.
annotation|@
name|Override
specifier|public
specifier|abstract
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|CodedInputStream
name|input
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|ByteString
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
try|try
block|{
specifier|final
name|CodedInputStream
name|input
init|=
name|data
operator|.
name|newCodedInput
argument_list|()
decl_stmt|;
name|mergeFrom
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getReadingExceptionMessage
argument_list|(
literal|"ByteString"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|ByteString
name|data
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
try|try
block|{
specifier|final
name|CodedInputStream
name|input
init|=
name|data
operator|.
name|newCodedInput
argument_list|()
decl_stmt|;
name|mergeFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getReadingExceptionMessage
argument_list|(
literal|"ByteString"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|mergeFrom
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
try|try
block|{
specifier|final
name|CodedInputStream
name|input
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|mergeFrom
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getReadingExceptionMessage
argument_list|(
literal|"byte array"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|mergeFrom
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
try|try
block|{
specifier|final
name|CodedInputStream
name|input
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|mergeFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getReadingExceptionMessage
argument_list|(
literal|"byte array"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|mergeFrom
argument_list|(
name|codedInput
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
comment|/**      * An InputStream implementations which reads from some other InputStream      * but is limited to a particular number of bytes.  Used by      * mergeDelimitedFrom().  This is intentionally package-private so that      * UnknownFieldSet can share it.      */
specifier|static
specifier|final
class|class
name|LimitedInputStream
extends|extends
name|FilterInputStream
block|{
specifier|private
name|int
name|limit
decl_stmt|;
name|LimitedInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|super
operator|.
name|available
argument_list|()
argument_list|,
name|limit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|limit
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|result
init|=
name|super
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|>=
literal|0
condition|)
block|{
operator|--
name|limit
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|limit
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|limit
argument_list|)
expr_stmt|;
specifier|final
name|int
name|result
init|=
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>=
literal|0
condition|)
block|{
name|limit
operator|-=
name|result
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
specifier|final
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|result
init|=
name|super
operator|.
name|skip
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|limit
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>=
literal|0
condition|)
block|{
name|limit
operator|-=
name|result
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mergeDelimitedFrom
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|,
specifier|final
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|firstByte
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstByte
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|size
init|=
name|CodedInputStream
operator|.
name|readRawVarint32
argument_list|(
name|firstByte
argument_list|,
name|input
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|limitedInput
init|=
operator|new
name|LimitedInputStream
argument_list|(
name|input
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|mergeFrom
argument_list|(
name|limitedInput
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mergeDelimitedFrom
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergeDelimitedFrom
argument_list|(
name|input
argument_list|,
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// isInstance takes care of this
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
specifier|final
name|MessageLite
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getDefaultInstanceForType
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mergeFrom(MessageLite) can only merge messages of the same type."
argument_list|)
throw|;
block|}
return|return
name|internalMergeFrom
argument_list|(
operator|(
name|MessageType
operator|)
name|other
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|BuilderType
name|internalMergeFrom
parameter_list|(
name|MessageType
name|message
parameter_list|)
function_decl|;
specifier|private
name|String
name|getReadingExceptionMessage
parameter_list|(
name|String
name|target
parameter_list|)
block|{
return|return
literal|"Reading "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" from a "
operator|+
name|target
operator|+
literal|" threw an IOException (should never happen)."
return|;
block|}
comment|/**      * Construct an UninitializedMessageException reporting missing fields in      * the given message.      */
specifier|protected
specifier|static
name|UninitializedMessageException
name|newUninitializedMessageException
parameter_list|(
name|MessageLite
name|message
parameter_list|)
block|{
return|return
operator|new
name|UninitializedMessageException
argument_list|(
name|message
argument_list|)
return|;
block|}
comment|/**      * Adds the {@code values} to the {@code list}.  This is a helper method      * used by generated code.  Users should ignore it.      *      * @throws NullPointerException if {@code values} or any of the elements of      * {@code values} is null. When that happens, some elements of      * {@code values} may have already been added to the result {@code list}.      */
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addAll
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|T
argument_list|>
name|values
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|?
super|super
name|T
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|values
operator|instanceof
name|LazyStringList
condition|)
block|{
comment|// For StringOrByteStringLists, check the underlying elements to avoid
comment|// forcing conversions of ByteStrings to Strings.
name|checkForNullValues
argument_list|(
operator|(
operator|(
name|LazyStringList
operator|)
name|values
operator|)
operator|.
name|getUnderlyingElements
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|T
argument_list|>
operator|)
name|values
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|instanceof
name|Collection
condition|)
block|{
name|checkForNullValues
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|T
argument_list|>
operator|)
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
specifier|final
name|T
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkForNullValues
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

