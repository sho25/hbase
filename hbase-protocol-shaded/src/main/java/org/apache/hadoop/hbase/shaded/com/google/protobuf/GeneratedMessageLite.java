begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractMessageLite
operator|.
name|Builder
operator|.
name|LimitedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageLite
operator|.
name|EqualsVisitor
operator|.
name|NotEqualsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|BooleanList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|DoubleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|FloatList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|IntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|LongList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|ProtobufList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|WireFormat
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Lite version of {@link GeneratedMessage}.  *  * @author kenton@google.com Kenton Varda  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GeneratedMessageLite
parameter_list|<
name|MessageType
extends|extends
name|GeneratedMessageLite
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|,
name|BuilderType
extends|extends
name|GeneratedMessageLite
operator|.
name|Builder
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|>
extends|extends
name|AbstractMessageLite
argument_list|<
name|MessageType
argument_list|,
name|BuilderType
argument_list|>
block|{
comment|/** For use by generated code only. Lazily initialized to reduce allocations. */
specifier|protected
name|UnknownFieldSetLite
name|unknownFields
init|=
name|UnknownFieldSetLite
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
comment|/** For use by generated code only.  */
specifier|protected
name|int
name|memoizedSerializedSize
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by runtime.
specifier|public
specifier|final
name|Parser
argument_list|<
name|MessageType
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
operator|(
name|Parser
argument_list|<
name|MessageType
argument_list|>
operator|)
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|GET_PARSER
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by runtime.
specifier|public
specifier|final
name|MessageType
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
operator|(
name|MessageType
operator|)
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|GET_DEFAULT_INSTANCE
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by runtime.
specifier|public
specifier|final
name|BuilderType
name|newBuilderForType
parameter_list|()
block|{
return|return
operator|(
name|BuilderType
operator|)
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|NEW_BUILDER
argument_list|)
return|;
block|}
comment|/**    * A reflective toString function. This is primarily intended as a developer aid, while keeping    * binary size down. The first line of the {@code toString()} representation includes a commented    * version of {@code super.toString()} to act as an indicator that this should not be relied on    * for comparisons.    *<p>    * NOTE: This method relies on the field getter methods not being stripped or renamed by proguard.    * If they are, the fields will not be included in the returned string representation.    *<p>    * NOTE: This implementation is liable to change in the future, and should not be relied on in    * code.    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MessageLiteToString
operator|.
name|toString
argument_list|(
name|this
argument_list|,
name|super
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by runtime
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|memoizedHashCode
operator|==
literal|0
condition|)
block|{
name|HashCodeVisitor
name|visitor
init|=
operator|new
name|HashCodeVisitor
argument_list|()
decl_stmt|;
name|visit
argument_list|(
name|visitor
argument_list|,
operator|(
name|MessageType
operator|)
name|this
argument_list|)
expr_stmt|;
name|memoizedHashCode
operator|=
name|visitor
operator|.
name|hashCode
expr_stmt|;
block|}
return|return
name|memoizedHashCode
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by runtime
name|int
name|hashCode
parameter_list|(
name|HashCodeVisitor
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|memoizedHashCode
operator|==
literal|0
condition|)
block|{
name|int
name|inProgressHashCode
init|=
name|visitor
operator|.
name|hashCode
decl_stmt|;
name|visitor
operator|.
name|hashCode
operator|=
literal|0
expr_stmt|;
name|visit
argument_list|(
name|visitor
argument_list|,
operator|(
name|MessageType
operator|)
name|this
argument_list|)
expr_stmt|;
name|memoizedHashCode
operator|=
name|visitor
operator|.
name|hashCode
expr_stmt|;
name|visitor
operator|.
name|hashCode
operator|=
name|inProgressHashCode
expr_stmt|;
block|}
return|return
name|memoizedHashCode
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by isInstance + runtime
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|getDefaultInstanceForType
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|visit
argument_list|(
name|EqualsVisitor
operator|.
name|INSTANCE
argument_list|,
operator|(
name|MessageType
operator|)
name|other
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotEqualsException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Same as {@link #equals(Object)} but throws {@code NotEqualsException}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by isInstance + runtime
name|boolean
name|equals
parameter_list|(
name|EqualsVisitor
name|visitor
parameter_list|,
name|MessageLite
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|getDefaultInstanceForType
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|visit
argument_list|(
name|visitor
argument_list|,
operator|(
name|MessageType
operator|)
name|other
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// The general strategy for unknown fields is to use an UnknownFieldSetLite that is treated as
comment|// mutable during the parsing constructor and immutable after. This allows us to avoid
comment|// any unnecessary intermediary allocations while reducing the generated code size.
comment|/**    * Lazily initializes unknown fields.    */
specifier|private
specifier|final
name|void
name|ensureUnknownFieldsInitialized
parameter_list|()
block|{
if|if
condition|(
name|unknownFields
operator|==
name|UnknownFieldSetLite
operator|.
name|getDefaultInstance
argument_list|()
condition|)
block|{
name|unknownFields
operator|=
name|UnknownFieldSetLite
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Called by subclasses to parse an unknown field. For use by generated code only.    *    * @return {@code true} unless the tag is an end-group tag.    */
specifier|protected
name|boolean
name|parseUnknownField
parameter_list|(
name|int
name|tag
parameter_list|,
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This will avoid the allocation of unknown fields when a group tag is encountered.
if|if
condition|(
name|WireFormat
operator|.
name|getTagWireType
argument_list|(
name|tag
argument_list|)
operator|==
name|WireFormat
operator|.
name|WIRETYPE_END_GROUP
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ensureUnknownFieldsInitialized
argument_list|()
expr_stmt|;
return|return
name|unknownFields
operator|.
name|mergeFieldFrom
argument_list|(
name|tag
argument_list|,
name|input
argument_list|)
return|;
block|}
comment|/**    * Called by subclasses to parse an unknown field. For use by generated code only.    */
specifier|protected
name|void
name|mergeVarintField
parameter_list|(
name|int
name|tag
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|ensureUnknownFieldsInitialized
argument_list|()
expr_stmt|;
name|unknownFields
operator|.
name|mergeVarintField
argument_list|(
name|tag
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called by subclasses to parse an unknown field. For use by generated code only.    */
specifier|protected
name|void
name|mergeLengthDelimitedField
parameter_list|(
name|int
name|fieldNumber
parameter_list|,
name|ByteString
name|value
parameter_list|)
block|{
name|ensureUnknownFieldsInitialized
argument_list|()
expr_stmt|;
name|unknownFields
operator|.
name|mergeLengthDelimitedField
argument_list|(
name|fieldNumber
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called by subclasses to complete parsing. For use by generated code only.    */
specifier|protected
name|void
name|makeImmutable
parameter_list|()
block|{
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|MAKE_IMMUTABLE
argument_list|)
expr_stmt|;
name|unknownFields
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|IS_INITIALIZED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|BuilderType
name|toBuilder
parameter_list|()
block|{
name|BuilderType
name|builder
init|=
operator|(
name|BuilderType
operator|)
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|NEW_BUILDER
argument_list|)
decl_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
operator|(
name|MessageType
operator|)
name|this
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**    * Defines which method path to invoke in {@link GeneratedMessageLite    * #dynamicMethod(MethodToInvoke, Object...)}.    *<p>    * For use by generated code only.    */
specifier|public
specifier|static
enum|enum
name|MethodToInvoke
block|{
comment|// Rely on/modify instance state
name|IS_INITIALIZED
block|,
name|VISIT
block|,
name|MERGE_FROM_STREAM
block|,
name|MAKE_IMMUTABLE
block|,
comment|// Rely on static state
name|NEW_MUTABLE_INSTANCE
block|,
name|NEW_BUILDER
block|,
name|GET_DEFAULT_INSTANCE
block|,
name|GET_PARSER
block|;   }
comment|/**    * A method that implements different types of operations described in {@link MethodToInvoke}.    * Theses different kinds of operations are required to implement message-level operations for    * builders in the runtime. This method bundles those operations to reduce the generated methods    * count.    *<ul>    *<li>{@code MERGE_FROM_STREAM} is parameterized with an {@link CodedInputStream} and    * {@link ExtensionRegistryLite}. It consumes the input stream, parsing the contents into the    * returned protocol buffer. If parsing throws an {@link InvalidProtocolBufferException}, the    * implementation wraps it in a RuntimeException.    *<li>{@code NEW_INSTANCE} returns a new instance of the protocol buffer that has not yet been    * made immutable. See {@code MAKE_IMMUTABLE}.    *<li>{@code IS_INITIALIZED} is parameterized with a {@code Boolean} detailing whether to    * memoize. It returns {@code null} for false and the default instance for true. We optionally    * memoize to support the Builder case, where memoization is not desired.    *<li>{@code NEW_BUILDER} returns a {@code BuilderType} instance.    *<li>{@code VISIT} is parameterized with a {@code Visitor} and a {@code MessageType} and    * recursively iterates through the fields side by side between this and the instance.    *<li>{@code MAKE_IMMUTABLE} sets all internal fields to an immutable state.    *</ul>    * This method, plus the implementation of the Builder, enables the Builder class to be proguarded    * away entirely on Android.    *<p>    * For use by generated code only.    */
specifier|protected
specifier|abstract
name|Object
name|dynamicMethod
parameter_list|(
name|MethodToInvoke
name|method
parameter_list|,
name|Object
name|arg0
parameter_list|,
name|Object
name|arg1
parameter_list|)
function_decl|;
comment|/**    * Same as {@link #dynamicMethod(MethodToInvoke, Object, Object)} with {@code null} padding.    */
specifier|protected
name|Object
name|dynamicMethod
parameter_list|(
name|MethodToInvoke
name|method
parameter_list|,
name|Object
name|arg0
parameter_list|)
block|{
return|return
name|dynamicMethod
argument_list|(
name|method
argument_list|,
name|arg0
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Same as {@link #dynamicMethod(MethodToInvoke, Object, Object)} with {@code null} padding.    */
specifier|protected
name|Object
name|dynamicMethod
parameter_list|(
name|MethodToInvoke
name|method
parameter_list|)
block|{
return|return
name|dynamicMethod
argument_list|(
name|method
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|void
name|visit
parameter_list|(
name|Visitor
name|visitor
parameter_list|,
name|MessageType
name|other
parameter_list|)
block|{
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|VISIT
argument_list|,
name|visitor
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|unknownFields
operator|=
name|visitor
operator|.
name|visitUnknownFields
argument_list|(
name|unknownFields
argument_list|,
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge some unknown fields into the {@link UnknownFieldSetLite} for this    * message.    *    *<p>For use by generated code only.    */
specifier|protected
specifier|final
name|void
name|mergeUnknownFields
parameter_list|(
name|UnknownFieldSetLite
name|unknownFields
parameter_list|)
block|{
name|this
operator|.
name|unknownFields
operator|=
name|UnknownFieldSetLite
operator|.
name|mutableCopyOf
argument_list|(
name|this
operator|.
name|unknownFields
argument_list|,
name|unknownFields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|abstract
specifier|static
class|class
name|Builder
parameter_list|<
name|MessageType
extends|extends
name|GeneratedMessageLite
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|,
name|BuilderType
extends|extends
name|Builder
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|>
extends|extends
name|AbstractMessageLite
operator|.
name|Builder
argument_list|<
name|MessageType
argument_list|,
name|BuilderType
argument_list|>
block|{
specifier|private
specifier|final
name|MessageType
name|defaultInstance
decl_stmt|;
specifier|protected
name|MessageType
name|instance
decl_stmt|;
specifier|protected
name|boolean
name|isBuilt
decl_stmt|;
specifier|protected
name|Builder
parameter_list|(
name|MessageType
name|defaultInstance
parameter_list|)
block|{
name|this
operator|.
name|defaultInstance
operator|=
name|defaultInstance
expr_stmt|;
name|this
operator|.
name|instance
operator|=
operator|(
name|MessageType
operator|)
name|defaultInstance
operator|.
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|NEW_MUTABLE_INSTANCE
argument_list|)
expr_stmt|;
name|isBuilt
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Called before any method that would mutate the builder to ensure that it correctly copies      * any state before the write happens to preserve immutability guarantees.      */
specifier|protected
name|void
name|copyOnWrite
parameter_list|()
block|{
if|if
condition|(
name|isBuilt
condition|)
block|{
name|MessageType
name|newInstance
init|=
operator|(
name|MessageType
operator|)
name|instance
operator|.
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|NEW_MUTABLE_INSTANCE
argument_list|)
decl_stmt|;
name|newInstance
operator|.
name|visit
argument_list|(
name|MergeFromVisitor
operator|.
name|INSTANCE
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|instance
operator|=
name|newInstance
expr_stmt|;
name|isBuilt
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|GeneratedMessageLite
operator|.
name|isInitialized
argument_list|(
name|instance
argument_list|,
literal|false
comment|/* shouldMemoize */
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|BuilderType
name|clear
parameter_list|()
block|{
comment|// No need to copy on write since we're dropping the instance anyways.
name|instance
operator|=
operator|(
name|MessageType
operator|)
name|instance
operator|.
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|NEW_MUTABLE_INSTANCE
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|clone
parameter_list|()
block|{
name|BuilderType
name|builder
init|=
operator|(
name|BuilderType
operator|)
name|getDefaultInstanceForType
argument_list|()
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|buildPartial
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|buildPartial
parameter_list|()
block|{
if|if
condition|(
name|isBuilt
condition|)
block|{
return|return
name|instance
return|;
block|}
name|instance
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
name|isBuilt
operator|=
literal|true
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|MessageType
name|build
parameter_list|()
block|{
name|MessageType
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BuilderType
name|internalMergeFrom
parameter_list|(
name|MessageType
name|message
parameter_list|)
block|{
return|return
name|mergeFrom
argument_list|(
name|message
argument_list|)
return|;
block|}
comment|/** All subclasses implement this. */
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
name|MessageType
name|message
parameter_list|)
block|{
name|copyOnWrite
argument_list|()
expr_stmt|;
name|instance
operator|.
name|visit
argument_list|(
name|MergeFromVisitor
operator|.
name|INSTANCE
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
annotation|@
name|Override
specifier|public
name|BuilderType
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
name|copyOnWrite
argument_list|()
expr_stmt|;
try|try
block|{
name|instance
operator|.
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|MERGE_FROM_STREAM
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
block|}
comment|// =================================================================
comment|// Extensions-related stuff
comment|/**    * Lite equivalent of {@link org.apache.hadoop.hbase.shaded.com.google.protobuf.GeneratedMessage.ExtendableMessageOrBuilder}.    */
specifier|public
interface|interface
name|ExtendableMessageOrBuilder
parameter_list|<
name|MessageType
extends|extends
name|ExtendableMessage
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|,
name|BuilderType
extends|extends
name|ExtendableBuilder
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|>
extends|extends
name|MessageLiteOrBuilder
block|{
comment|/** Check if a singular extension is present. */
parameter_list|<
name|Type
parameter_list|>
name|boolean
name|hasExtension
parameter_list|(
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extension
parameter_list|)
function_decl|;
comment|/** Get the number of elements in a repeated extension. */
parameter_list|<
name|Type
parameter_list|>
name|int
name|getExtensionCount
parameter_list|(
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extension
parameter_list|)
function_decl|;
comment|/** Get the value of an extension. */
parameter_list|<
name|Type
parameter_list|>
name|Type
name|getExtension
parameter_list|(
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extension
parameter_list|)
function_decl|;
comment|/** Get one element of a repeated extension. */
parameter_list|<
name|Type
parameter_list|>
name|Type
name|getExtension
parameter_list|(
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extension
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
block|}
comment|/**    * Lite equivalent of {@link GeneratedMessage.ExtendableMessage}.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|ExtendableMessage
parameter_list|<
name|MessageType
extends|extends
name|ExtendableMessage
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|,
name|BuilderType
extends|extends
name|ExtendableBuilder
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|>
extends|extends
name|GeneratedMessageLite
argument_list|<
name|MessageType
argument_list|,
name|BuilderType
argument_list|>
implements|implements
name|ExtendableMessageOrBuilder
argument_list|<
name|MessageType
argument_list|,
name|BuilderType
argument_list|>
block|{
comment|/**      * Represents the set of extensions on this message. For use by generated      * code only.      */
specifier|protected
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|extensions
init|=
name|FieldSet
operator|.
name|newFieldSet
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|void
name|mergeExtensionFields
parameter_list|(
specifier|final
name|MessageType
name|other
parameter_list|)
block|{
if|if
condition|(
name|extensions
operator|.
name|isImmutable
argument_list|()
condition|)
block|{
name|extensions
operator|=
name|extensions
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|extensions
operator|.
name|mergeFrom
argument_list|(
operator|(
operator|(
name|ExtendableMessage
operator|)
name|other
operator|)
operator|.
name|extensions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|final
name|void
name|visit
parameter_list|(
name|Visitor
name|visitor
parameter_list|,
name|MessageType
name|other
parameter_list|)
block|{
name|super
operator|.
name|visit
argument_list|(
name|visitor
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|extensions
operator|=
name|visitor
operator|.
name|visitExtensions
argument_list|(
name|extensions
argument_list|,
name|other
operator|.
name|extensions
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse an unknown field or an extension. For use by generated code only.      *      *<p>For use by generated code only.      *      * @return {@code true} unless the tag is an end-group tag.      */
specifier|protected
parameter_list|<
name|MessageType
extends|extends
name|MessageLite
parameter_list|>
name|boolean
name|parseUnknownField
parameter_list|(
name|MessageType
name|defaultInstance
parameter_list|,
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|fieldNumber
init|=
name|WireFormat
operator|.
name|getTagFieldNumber
argument_list|(
name|tag
argument_list|)
decl_stmt|;
comment|// TODO(dweis): How much bytecode would be saved by not requiring the generated code to
comment|//     provide the default instance?
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|?
argument_list|>
name|extension
init|=
name|extensionRegistry
operator|.
name|findLiteExtensionByNumber
argument_list|(
name|defaultInstance
argument_list|,
name|fieldNumber
argument_list|)
decl_stmt|;
return|return
name|parseExtension
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|,
name|extension
argument_list|,
name|tag
argument_list|,
name|fieldNumber
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|parseExtension
parameter_list|(
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|,
name|GeneratedExtension
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|fieldNumber
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|wireType
init|=
name|WireFormat
operator|.
name|getTagWireType
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|boolean
name|unknown
init|=
literal|false
decl_stmt|;
name|boolean
name|packed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|extension
operator|==
literal|null
condition|)
block|{
name|unknown
operator|=
literal|true
expr_stmt|;
comment|// Unknown field.
block|}
elseif|else
if|if
condition|(
name|wireType
operator|==
name|FieldSet
operator|.
name|getWireFormatForFieldType
argument_list|(
name|extension
operator|.
name|descriptor
operator|.
name|getLiteType
argument_list|()
argument_list|,
literal|false
comment|/* isPacked */
argument_list|)
condition|)
block|{
name|packed
operator|=
literal|false
expr_stmt|;
comment|// Normal, unpacked value.
block|}
elseif|else
if|if
condition|(
name|extension
operator|.
name|descriptor
operator|.
name|isRepeated
operator|&&
name|extension
operator|.
name|descriptor
operator|.
name|type
operator|.
name|isPackable
argument_list|()
operator|&&
name|wireType
operator|==
name|FieldSet
operator|.
name|getWireFormatForFieldType
argument_list|(
name|extension
operator|.
name|descriptor
operator|.
name|getLiteType
argument_list|()
argument_list|,
literal|true
comment|/* isPacked */
argument_list|)
condition|)
block|{
name|packed
operator|=
literal|true
expr_stmt|;
comment|// Packed value.
block|}
else|else
block|{
name|unknown
operator|=
literal|true
expr_stmt|;
comment|// Wrong wire type.
block|}
if|if
condition|(
name|unknown
condition|)
block|{
comment|// Unknown field or wrong wire type.  Skip.
return|return
name|parseUnknownField
argument_list|(
name|tag
argument_list|,
name|input
argument_list|)
return|;
block|}
if|if
condition|(
name|packed
condition|)
block|{
name|int
name|length
init|=
name|input
operator|.
name|readRawVarint32
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|input
operator|.
name|pushLimit
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|extension
operator|.
name|descriptor
operator|.
name|getLiteType
argument_list|()
operator|==
name|WireFormat
operator|.
name|FieldType
operator|.
name|ENUM
condition|)
block|{
while|while
condition|(
name|input
operator|.
name|getBytesUntilLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|rawValue
init|=
name|input
operator|.
name|readEnum
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|extension
operator|.
name|descriptor
operator|.
name|getEnumType
argument_list|()
operator|.
name|findValueByNumber
argument_list|(
name|rawValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// If the number isn't recognized as a valid value for this
comment|// enum, drop it (don't even add it to unknownFields).
return|return
literal|true
return|;
block|}
name|extensions
operator|.
name|addRepeatedField
argument_list|(
name|extension
operator|.
name|descriptor
argument_list|,
name|extension
operator|.
name|singularToFieldSetType
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|input
operator|.
name|getBytesUntilLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Object
name|value
init|=
name|FieldSet
operator|.
name|readPrimitiveField
argument_list|(
name|input
argument_list|,
name|extension
operator|.
name|descriptor
operator|.
name|getLiteType
argument_list|()
argument_list|,
comment|/*checkUtf8=*/
literal|false
argument_list|)
decl_stmt|;
name|extensions
operator|.
name|addRepeatedField
argument_list|(
name|extension
operator|.
name|descriptor
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|input
operator|.
name|popLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
decl_stmt|;
switch|switch
condition|(
name|extension
operator|.
name|descriptor
operator|.
name|getLiteJavaType
argument_list|()
condition|)
block|{
case|case
name|MESSAGE
case|:
block|{
name|MessageLite
operator|.
name|Builder
name|subBuilder
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|extension
operator|.
name|descriptor
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
name|MessageLite
name|existingValue
init|=
operator|(
name|MessageLite
operator|)
name|extensions
operator|.
name|getField
argument_list|(
name|extension
operator|.
name|descriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingValue
operator|!=
literal|null
condition|)
block|{
name|subBuilder
operator|=
name|existingValue
operator|.
name|toBuilder
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|subBuilder
operator|==
literal|null
condition|)
block|{
name|subBuilder
operator|=
name|extension
operator|.
name|getMessageDefaultInstance
argument_list|()
operator|.
name|newBuilderForType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|extension
operator|.
name|descriptor
operator|.
name|getLiteType
argument_list|()
operator|==
name|WireFormat
operator|.
name|FieldType
operator|.
name|GROUP
condition|)
block|{
name|input
operator|.
name|readGroup
argument_list|(
name|extension
operator|.
name|getNumber
argument_list|()
argument_list|,
name|subBuilder
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|.
name|readMessage
argument_list|(
name|subBuilder
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|subBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ENUM
case|:
name|int
name|rawValue
init|=
name|input
operator|.
name|readEnum
argument_list|()
decl_stmt|;
name|value
operator|=
name|extension
operator|.
name|descriptor
operator|.
name|getEnumType
argument_list|()
operator|.
name|findValueByNumber
argument_list|(
name|rawValue
argument_list|)
expr_stmt|;
comment|// If the number isn't recognized as a valid value for this enum,
comment|// write it to unknown fields object.
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|mergeVarintField
argument_list|(
name|fieldNumber
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
default|default:
name|value
operator|=
name|FieldSet
operator|.
name|readPrimitiveField
argument_list|(
name|input
argument_list|,
name|extension
operator|.
name|descriptor
operator|.
name|getLiteType
argument_list|()
argument_list|,
comment|/*checkUtf8=*/
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|extension
operator|.
name|descriptor
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
name|extensions
operator|.
name|addRepeatedField
argument_list|(
name|extension
operator|.
name|descriptor
argument_list|,
name|extension
operator|.
name|singularToFieldSetType
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extensions
operator|.
name|setField
argument_list|(
name|extension
operator|.
name|descriptor
argument_list|,
name|extension
operator|.
name|singularToFieldSetType
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Parse an unknown field or an extension. For use by generated code only.      *      *<p>For use by generated code only.      *      * @return {@code true} unless the tag is an end-group tag.      */
specifier|protected
parameter_list|<
name|MessageType
extends|extends
name|MessageLite
parameter_list|>
name|boolean
name|parseUnknownFieldAsMessageSet
parameter_list|(
name|MessageType
name|defaultInstance
parameter_list|,
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tag
operator|==
name|WireFormat
operator|.
name|MESSAGE_SET_ITEM_TAG
condition|)
block|{
name|mergeMessageSetExtensionFromCodedStream
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// TODO(dweis): Do we really want to support non message set wire format in message sets?
comment|// Full runtime does... So we do for now.
name|int
name|wireType
init|=
name|WireFormat
operator|.
name|getTagWireType
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|wireType
operator|==
name|WireFormat
operator|.
name|WIRETYPE_LENGTH_DELIMITED
condition|)
block|{
return|return
name|parseUnknownField
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO(dweis): Should we throw on invalid input? Full runtime does not...
return|return
name|input
operator|.
name|skipField
argument_list|(
name|tag
argument_list|)
return|;
block|}
block|}
comment|/**      * Merges the message set from the input stream; requires message set wire format.      *       * @param defaultInstance the default instance of the containing message we are parsing in      * @param input the stream to parse from      * @param extensionRegistry the registry to use when parsing      */
specifier|private
parameter_list|<
name|MessageType
extends|extends
name|MessageLite
parameter_list|>
name|void
name|mergeMessageSetExtensionFromCodedStream
parameter_list|(
name|MessageType
name|defaultInstance
parameter_list|,
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The wire format for MessageSet is:
comment|//   message MessageSet {
comment|//     repeated group Item = 1 {
comment|//       required int32 typeId = 2;
comment|//       required bytes message = 3;
comment|//     }
comment|//   }
comment|// "typeId" is the extension's field number.  The extension can only be
comment|// a message type, where "message" contains the encoded bytes of that
comment|// message.
comment|//
comment|// In practice, we will probably never see a MessageSet item in which
comment|// the message appears before the type ID, or where either field does not
comment|// appear exactly once.  However, in theory such cases are valid, so we
comment|// should be prepared to accept them.
name|int
name|typeId
init|=
literal|0
decl_stmt|;
name|ByteString
name|rawBytes
init|=
literal|null
decl_stmt|;
comment|// If we encounter "message" before "typeId"
name|GeneratedExtension
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|extension
init|=
literal|null
decl_stmt|;
comment|// Read bytes from input, if we get it's type first then parse it eagerly,
comment|// otherwise we store the raw bytes in a local variable.
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|tag
operator|==
name|WireFormat
operator|.
name|MESSAGE_SET_TYPE_ID_TAG
condition|)
block|{
name|typeId
operator|=
name|input
operator|.
name|readUInt32
argument_list|()
expr_stmt|;
if|if
condition|(
name|typeId
operator|!=
literal|0
condition|)
block|{
name|extension
operator|=
name|extensionRegistry
operator|.
name|findLiteExtensionByNumber
argument_list|(
name|defaultInstance
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|WireFormat
operator|.
name|MESSAGE_SET_MESSAGE_TAG
condition|)
block|{
if|if
condition|(
name|typeId
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|extension
operator|!=
literal|null
condition|)
block|{
comment|// We already know the type, so we can parse directly from the
comment|// input with no copying.  Hooray!
name|eagerlyMergeMessageSetExtension
argument_list|(
name|input
argument_list|,
name|extension
argument_list|,
name|extensionRegistry
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
name|rawBytes
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
block|}
comment|// We haven't seen a type ID yet or we want parse message lazily.
name|rawBytes
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Unknown tag. Skip it.
if|if
condition|(
operator|!
name|input
operator|.
name|skipField
argument_list|(
name|tag
argument_list|)
condition|)
block|{
break|break;
comment|// End of group
block|}
block|}
block|}
name|input
operator|.
name|checkLastTagWas
argument_list|(
name|WireFormat
operator|.
name|MESSAGE_SET_ITEM_END_TAG
argument_list|)
expr_stmt|;
comment|// Process the raw bytes.
if|if
condition|(
name|rawBytes
operator|!=
literal|null
operator|&&
name|typeId
operator|!=
literal|0
condition|)
block|{
comment|// Zero is not a valid type ID.
if|if
condition|(
name|extension
operator|!=
literal|null
condition|)
block|{
comment|// We known the type
name|mergeMessageSetExtensionFromBytes
argument_list|(
name|rawBytes
argument_list|,
name|extensionRegistry
argument_list|,
name|extension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We don't know how to parse this. Ignore it.
if|if
condition|(
name|rawBytes
operator|!=
literal|null
condition|)
block|{
name|mergeLengthDelimitedField
argument_list|(
name|typeId
argument_list|,
name|rawBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|eagerlyMergeMessageSetExtension
parameter_list|(
name|CodedInputStream
name|input
parameter_list|,
name|GeneratedExtension
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|,
name|int
name|typeId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|fieldNumber
init|=
name|typeId
decl_stmt|;
name|int
name|tag
init|=
name|WireFormat
operator|.
name|makeTag
argument_list|(
name|typeId
argument_list|,
name|WireFormat
operator|.
name|WIRETYPE_LENGTH_DELIMITED
argument_list|)
decl_stmt|;
name|parseExtension
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|,
name|extension
argument_list|,
name|tag
argument_list|,
name|fieldNumber
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mergeMessageSetExtensionFromBytes
parameter_list|(
name|ByteString
name|rawBytes
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|,
name|GeneratedExtension
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageLite
operator|.
name|Builder
name|subBuilder
init|=
literal|null
decl_stmt|;
name|MessageLite
name|existingValue
init|=
operator|(
name|MessageLite
operator|)
name|extensions
operator|.
name|getField
argument_list|(
name|extension
operator|.
name|descriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingValue
operator|!=
literal|null
condition|)
block|{
name|subBuilder
operator|=
name|existingValue
operator|.
name|toBuilder
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subBuilder
operator|==
literal|null
condition|)
block|{
name|subBuilder
operator|=
name|extension
operator|.
name|getMessageDefaultInstance
argument_list|()
operator|.
name|newBuilderForType
argument_list|()
expr_stmt|;
block|}
name|rawBytes
operator|.
name|newCodedInput
argument_list|()
operator|.
name|readMessage
argument_list|(
name|subBuilder
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
name|MessageLite
name|value
init|=
name|subBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|extensions
operator|.
name|setField
argument_list|(
name|extension
operator|.
name|descriptor
argument_list|,
name|extension
operator|.
name|singularToFieldSetType
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyExtensionContainingType
parameter_list|(
specifier|final
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|)
block|{
if|if
condition|(
name|extension
operator|.
name|getContainingTypeDefaultInstance
argument_list|()
operator|!=
name|getDefaultInstanceForType
argument_list|()
condition|)
block|{
comment|// This can only happen if someone uses unchecked operations.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This extension is for a different message type.  Please make "
operator|+
literal|"sure that you are not suppressing any generics type warnings."
argument_list|)
throw|;
block|}
block|}
comment|/** Check if a singular extension is present. */
annotation|@
name|Override
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|boolean
name|hasExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extension
parameter_list|)
block|{
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extensionLite
init|=
name|checkIsLite
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|verifyExtensionContainingType
argument_list|(
name|extensionLite
argument_list|)
expr_stmt|;
return|return
name|extensions
operator|.
name|hasField
argument_list|(
name|extensionLite
operator|.
name|descriptor
argument_list|)
return|;
block|}
comment|/** Get the number of elements in a repeated extension. */
annotation|@
name|Override
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|int
name|getExtensionCount
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extension
parameter_list|)
block|{
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extensionLite
init|=
name|checkIsLite
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|verifyExtensionContainingType
argument_list|(
name|extensionLite
argument_list|)
expr_stmt|;
return|return
name|extensions
operator|.
name|getRepeatedFieldCount
argument_list|(
name|extensionLite
operator|.
name|descriptor
argument_list|)
return|;
block|}
comment|/** Get the value of an extension. */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|Type
name|getExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extension
parameter_list|)
block|{
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extensionLite
init|=
name|checkIsLite
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|verifyExtensionContainingType
argument_list|(
name|extensionLite
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|value
init|=
name|extensions
operator|.
name|getField
argument_list|(
name|extensionLite
operator|.
name|descriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|extensionLite
operator|.
name|defaultValue
return|;
block|}
else|else
block|{
return|return
operator|(
name|Type
operator|)
name|extensionLite
operator|.
name|fromFieldSetType
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|/** Get one element of a repeated extension. */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|Type
name|getExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extension
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extensionLite
init|=
name|checkIsLite
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|verifyExtensionContainingType
argument_list|(
name|extensionLite
argument_list|)
expr_stmt|;
return|return
operator|(
name|Type
operator|)
name|extensionLite
operator|.
name|singularFromFieldSetType
argument_list|(
name|extensions
operator|.
name|getRepeatedField
argument_list|(
name|extensionLite
operator|.
name|descriptor
argument_list|,
name|index
argument_list|)
argument_list|)
return|;
block|}
comment|/** Called by subclasses to check if all extensions are initialized. */
specifier|protected
name|boolean
name|extensionsAreInitialized
parameter_list|()
block|{
return|return
name|extensions
operator|.
name|isInitialized
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|final
name|void
name|makeImmutable
parameter_list|()
block|{
name|super
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
name|extensions
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
block|}
comment|/**      * Used by subclasses to serialize extensions.  Extension ranges may be      * interleaved with field numbers, but we must write them in canonical      * (sorted by field number) order.  ExtensionWriter helps us write      * individual ranges of extensions at once.      */
specifier|protected
class|class
name|ExtensionWriter
block|{
comment|// Imagine how much simpler this code would be if Java iterators had
comment|// a way to get the next element without advancing the iterator.
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ExtensionDescriptor
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|extensions
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|ExtensionDescriptor
argument_list|,
name|Object
argument_list|>
name|next
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|messageSetWireFormat
decl_stmt|;
specifier|private
name|ExtensionWriter
parameter_list|(
name|boolean
name|messageSetWireFormat
parameter_list|)
block|{
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|next
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|messageSetWireFormat
operator|=
name|messageSetWireFormat
expr_stmt|;
block|}
specifier|public
name|void
name|writeUntil
parameter_list|(
specifier|final
name|int
name|end
parameter_list|,
specifier|final
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|getKey
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|<
name|end
condition|)
block|{
name|ExtensionDescriptor
name|extension
init|=
name|next
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageSetWireFormat
operator|&&
name|extension
operator|.
name|getLiteJavaType
argument_list|()
operator|==
name|WireFormat
operator|.
name|JavaType
operator|.
name|MESSAGE
operator|&&
operator|!
name|extension
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
name|output
operator|.
name|writeMessageSetExtension
argument_list|(
name|extension
operator|.
name|getNumber
argument_list|()
argument_list|,
operator|(
name|MessageLite
operator|)
name|next
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FieldSet
operator|.
name|writeField
argument_list|(
name|extension
argument_list|,
name|next
operator|.
name|getValue
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|next
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|ExtensionWriter
name|newExtensionWriter
parameter_list|()
block|{
return|return
operator|new
name|ExtensionWriter
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|ExtensionWriter
name|newMessageSetExtensionWriter
parameter_list|()
block|{
return|return
operator|new
name|ExtensionWriter
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/** Called by subclasses to compute the size of extensions. */
specifier|protected
name|int
name|extensionsSerializedSize
parameter_list|()
block|{
return|return
name|extensions
operator|.
name|getSerializedSize
argument_list|()
return|;
block|}
specifier|protected
name|int
name|extensionsSerializedSizeAsMessageSet
parameter_list|()
block|{
return|return
name|extensions
operator|.
name|getMessageSetSerializedSize
argument_list|()
return|;
block|}
block|}
comment|/**    * Lite equivalent of {@link GeneratedMessage.ExtendableBuilder}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|abstract
specifier|static
class|class
name|ExtendableBuilder
parameter_list|<
name|MessageType
extends|extends
name|ExtendableMessage
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|,
name|BuilderType
extends|extends
name|ExtendableBuilder
parameter_list|<
name|MessageType
parameter_list|,
name|BuilderType
parameter_list|>
parameter_list|>
extends|extends
name|Builder
argument_list|<
name|MessageType
argument_list|,
name|BuilderType
argument_list|>
implements|implements
name|ExtendableMessageOrBuilder
argument_list|<
name|MessageType
argument_list|,
name|BuilderType
argument_list|>
block|{
specifier|protected
name|ExtendableBuilder
parameter_list|(
name|MessageType
name|defaultInstance
parameter_list|)
block|{
name|super
argument_list|(
name|defaultInstance
argument_list|)
expr_stmt|;
comment|// TODO(dweis): This is kind of an unnecessary clone since we construct a
comment|//     new instance in the parent constructor which makes the extensions
comment|//     immutable. This extra allocation shouldn't matter in practice
comment|//     though.
name|instance
operator|.
name|extensions
operator|=
name|instance
operator|.
name|extensions
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
comment|// For immutable message conversion.
name|void
name|internalSetExtensionSet
parameter_list|(
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|extensions
parameter_list|)
block|{
name|copyOnWrite
argument_list|()
expr_stmt|;
name|instance
operator|.
name|extensions
operator|=
name|extensions
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|copyOnWrite
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isBuilt
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|copyOnWrite
argument_list|()
expr_stmt|;
name|instance
operator|.
name|extensions
operator|=
name|instance
operator|.
name|extensions
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|MessageType
name|buildPartial
parameter_list|()
block|{
if|if
condition|(
name|isBuilt
condition|)
block|{
return|return
name|instance
return|;
block|}
name|instance
operator|.
name|extensions
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|buildPartial
argument_list|()
return|;
block|}
specifier|private
name|void
name|verifyExtensionContainingType
parameter_list|(
specifier|final
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|)
block|{
if|if
condition|(
name|extension
operator|.
name|getContainingTypeDefaultInstance
argument_list|()
operator|!=
name|getDefaultInstanceForType
argument_list|()
condition|)
block|{
comment|// This can only happen if someone uses unchecked operations.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This extension is for a different message type.  Please make "
operator|+
literal|"sure that you are not suppressing any generics type warnings."
argument_list|)
throw|;
block|}
block|}
comment|/** Check if a singular extension is present. */
annotation|@
name|Override
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|boolean
name|hasExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extension
parameter_list|)
block|{
return|return
name|instance
operator|.
name|hasExtension
argument_list|(
name|extension
argument_list|)
return|;
block|}
comment|/** Get the number of elements in a repeated extension. */
annotation|@
name|Override
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|int
name|getExtensionCount
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extension
parameter_list|)
block|{
return|return
name|instance
operator|.
name|getExtensionCount
argument_list|(
name|extension
argument_list|)
return|;
block|}
comment|/** Get the value of an extension. */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|Type
name|getExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extension
parameter_list|)
block|{
return|return
name|instance
operator|.
name|getExtension
argument_list|(
name|extension
argument_list|)
return|;
block|}
comment|/** Get one element of a repeated extension. */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|Type
name|getExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extension
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|instance
operator|.
name|getExtension
argument_list|(
name|extension
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/** Set the value of an extension. */
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|BuilderType
name|setExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extension
parameter_list|,
specifier|final
name|Type
name|value
parameter_list|)
block|{
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|Type
argument_list|>
name|extensionLite
init|=
name|checkIsLite
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|verifyExtensionContainingType
argument_list|(
name|extensionLite
argument_list|)
expr_stmt|;
name|copyOnWrite
argument_list|()
expr_stmt|;
name|instance
operator|.
name|extensions
operator|.
name|setField
argument_list|(
name|extensionLite
operator|.
name|descriptor
argument_list|,
name|extensionLite
operator|.
name|toFieldSetType
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
comment|/** Set the value of one element of a repeated extension. */
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|BuilderType
name|setExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extension
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|Type
name|value
parameter_list|)
block|{
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extensionLite
init|=
name|checkIsLite
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|verifyExtensionContainingType
argument_list|(
name|extensionLite
argument_list|)
expr_stmt|;
name|copyOnWrite
argument_list|()
expr_stmt|;
name|instance
operator|.
name|extensions
operator|.
name|setRepeatedField
argument_list|(
name|extensionLite
operator|.
name|descriptor
argument_list|,
name|index
argument_list|,
name|extensionLite
operator|.
name|singularToFieldSetType
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
comment|/** Append a value to a repeated extension. */
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|BuilderType
name|addExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extension
parameter_list|,
specifier|final
name|Type
name|value
parameter_list|)
block|{
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|List
argument_list|<
name|Type
argument_list|>
argument_list|>
name|extensionLite
init|=
name|checkIsLite
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|verifyExtensionContainingType
argument_list|(
name|extensionLite
argument_list|)
expr_stmt|;
name|copyOnWrite
argument_list|()
expr_stmt|;
name|instance
operator|.
name|extensions
operator|.
name|addRepeatedField
argument_list|(
name|extensionLite
operator|.
name|descriptor
argument_list|,
name|extensionLite
operator|.
name|singularToFieldSetType
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
comment|/** Clear an extension. */
specifier|public
specifier|final
parameter_list|<
name|Type
parameter_list|>
name|BuilderType
name|clearExtension
parameter_list|(
specifier|final
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|?
argument_list|>
name|extension
parameter_list|)
block|{
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|?
argument_list|>
name|extensionLite
init|=
name|checkIsLite
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|verifyExtensionContainingType
argument_list|(
name|extensionLite
argument_list|)
expr_stmt|;
name|copyOnWrite
argument_list|()
expr_stmt|;
name|instance
operator|.
name|extensions
operator|.
name|clearField
argument_list|(
name|extensionLite
operator|.
name|descriptor
argument_list|)
expr_stmt|;
return|return
operator|(
name|BuilderType
operator|)
name|this
return|;
block|}
block|}
comment|// -----------------------------------------------------------------
comment|/** For use by generated code only. */
specifier|public
specifier|static
parameter_list|<
name|ContainingType
extends|extends
name|MessageLite
parameter_list|,
name|Type
parameter_list|>
name|GeneratedExtension
argument_list|<
name|ContainingType
argument_list|,
name|Type
argument_list|>
name|newSingularGeneratedExtension
parameter_list|(
specifier|final
name|ContainingType
name|containingTypeDefaultInstance
parameter_list|,
specifier|final
name|Type
name|defaultValue
parameter_list|,
specifier|final
name|MessageLite
name|messageDefaultInstance
parameter_list|,
specifier|final
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|?
argument_list|>
name|enumTypeMap
parameter_list|,
specifier|final
name|int
name|number
parameter_list|,
specifier|final
name|WireFormat
operator|.
name|FieldType
name|type
parameter_list|,
specifier|final
name|Class
name|singularType
parameter_list|)
block|{
return|return
operator|new
name|GeneratedExtension
argument_list|<
name|ContainingType
argument_list|,
name|Type
argument_list|>
argument_list|(
name|containingTypeDefaultInstance
argument_list|,
name|defaultValue
argument_list|,
name|messageDefaultInstance
argument_list|,
operator|new
name|ExtensionDescriptor
argument_list|(
name|enumTypeMap
argument_list|,
name|number
argument_list|,
name|type
argument_list|,
literal|false
comment|/* isRepeated */
argument_list|,
literal|false
comment|/* isPacked */
argument_list|)
argument_list|,
name|singularType
argument_list|)
return|;
block|}
comment|/** For use by generated code only. */
specifier|public
specifier|static
parameter_list|<
name|ContainingType
extends|extends
name|MessageLite
parameter_list|,
name|Type
parameter_list|>
name|GeneratedExtension
argument_list|<
name|ContainingType
argument_list|,
name|Type
argument_list|>
name|newRepeatedGeneratedExtension
parameter_list|(
specifier|final
name|ContainingType
name|containingTypeDefaultInstance
parameter_list|,
specifier|final
name|MessageLite
name|messageDefaultInstance
parameter_list|,
specifier|final
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|?
argument_list|>
name|enumTypeMap
parameter_list|,
specifier|final
name|int
name|number
parameter_list|,
specifier|final
name|WireFormat
operator|.
name|FieldType
name|type
parameter_list|,
specifier|final
name|boolean
name|isPacked
parameter_list|,
specifier|final
name|Class
name|singularType
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Subclasses ensure Type is a List
name|Type
name|emptyList
init|=
operator|(
name|Type
operator|)
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
return|return
operator|new
name|GeneratedExtension
argument_list|<
name|ContainingType
argument_list|,
name|Type
argument_list|>
argument_list|(
name|containingTypeDefaultInstance
argument_list|,
name|emptyList
argument_list|,
name|messageDefaultInstance
argument_list|,
operator|new
name|ExtensionDescriptor
argument_list|(
name|enumTypeMap
argument_list|,
name|number
argument_list|,
name|type
argument_list|,
literal|true
comment|/* isRepeated */
argument_list|,
name|isPacked
argument_list|)
argument_list|,
name|singularType
argument_list|)
return|;
block|}
specifier|static
specifier|final
class|class
name|ExtensionDescriptor
implements|implements
name|FieldSet
operator|.
name|FieldDescriptorLite
argument_list|<
name|ExtensionDescriptor
argument_list|>
block|{
name|ExtensionDescriptor
parameter_list|(
specifier|final
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|?
argument_list|>
name|enumTypeMap
parameter_list|,
specifier|final
name|int
name|number
parameter_list|,
specifier|final
name|WireFormat
operator|.
name|FieldType
name|type
parameter_list|,
specifier|final
name|boolean
name|isRepeated
parameter_list|,
specifier|final
name|boolean
name|isPacked
parameter_list|)
block|{
name|this
operator|.
name|enumTypeMap
operator|=
name|enumTypeMap
expr_stmt|;
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|isRepeated
operator|=
name|isRepeated
expr_stmt|;
name|this
operator|.
name|isPacked
operator|=
name|isPacked
expr_stmt|;
block|}
specifier|final
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|?
argument_list|>
name|enumTypeMap
decl_stmt|;
specifier|final
name|int
name|number
decl_stmt|;
specifier|final
name|WireFormat
operator|.
name|FieldType
name|type
decl_stmt|;
specifier|final
name|boolean
name|isRepeated
decl_stmt|;
specifier|final
name|boolean
name|isPacked
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|number
return|;
block|}
annotation|@
name|Override
specifier|public
name|WireFormat
operator|.
name|FieldType
name|getLiteType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|WireFormat
operator|.
name|JavaType
name|getLiteJavaType
parameter_list|()
block|{
return|return
name|type
operator|.
name|getJavaType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepeated
parameter_list|()
block|{
return|return
name|isRepeated
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPacked
parameter_list|()
block|{
return|return
name|isPacked
return|;
block|}
annotation|@
name|Override
specifier|public
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|?
argument_list|>
name|getEnumType
parameter_list|()
block|{
return|return
name|enumTypeMap
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|MessageLite
operator|.
name|Builder
name|internalMergeFrom
parameter_list|(
name|MessageLite
operator|.
name|Builder
name|to
parameter_list|,
name|MessageLite
name|from
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Builder
operator|)
name|to
operator|)
operator|.
name|mergeFrom
argument_list|(
operator|(
name|GeneratedMessageLite
operator|)
name|from
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExtensionDescriptor
name|other
parameter_list|)
block|{
return|return
name|number
operator|-
name|other
operator|.
name|number
return|;
block|}
block|}
comment|// =================================================================
comment|/** Calls Class.getMethod and throws a RuntimeException if it fails. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
name|Method
name|getMethodOrDie
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
modifier|...
name|params
parameter_list|)
block|{
try|try
block|{
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Generated message class \""
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"\" missing method \""
operator|+
name|name
operator|+
literal|"\"."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Calls invoke and throws a RuntimeException if it fails. */
specifier|static
name|Object
name|invokeOrDie
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|object
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't use Java reflection to implement protocol message "
operator|+
literal|"reflection."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
specifier|final
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected exception thrown by generated accessor method."
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Lite equivalent to {@link GeneratedMessage.GeneratedExtension}.    *    * Users should ignore the contents of this class and only use objects of    * this type as parameters to extension accessors and ExtensionRegistry.add().    */
specifier|public
specifier|static
class|class
name|GeneratedExtension
parameter_list|<
name|ContainingType
extends|extends
name|MessageLite
parameter_list|,
name|Type
parameter_list|>
extends|extends
name|ExtensionLite
argument_list|<
name|ContainingType
argument_list|,
name|Type
argument_list|>
block|{
comment|/**      * Create a new instance with the given parameters.      *      * The last parameter {@code singularType} is only needed for enum types.      * We store integer values for enum types in a {@link ExtendableMessage}      * and use Java reflection to convert an integer value back into a concrete      * enum object.      */
name|GeneratedExtension
parameter_list|(
specifier|final
name|ContainingType
name|containingTypeDefaultInstance
parameter_list|,
specifier|final
name|Type
name|defaultValue
parameter_list|,
specifier|final
name|MessageLite
name|messageDefaultInstance
parameter_list|,
specifier|final
name|ExtensionDescriptor
name|descriptor
parameter_list|,
specifier|final
name|Class
name|singularType
parameter_list|)
block|{
comment|// Defensive checks to verify the correct initialization order of
comment|// GeneratedExtensions and their related GeneratedMessages.
if|if
condition|(
name|containingTypeDefaultInstance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null containingTypeDefaultInstance"
argument_list|)
throw|;
block|}
if|if
condition|(
name|descriptor
operator|.
name|getLiteType
argument_list|()
operator|==
name|WireFormat
operator|.
name|FieldType
operator|.
name|MESSAGE
operator|&&
name|messageDefaultInstance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null messageDefaultInstance"
argument_list|)
throw|;
block|}
name|this
operator|.
name|containingTypeDefaultInstance
operator|=
name|containingTypeDefaultInstance
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
name|this
operator|.
name|messageDefaultInstance
operator|=
name|messageDefaultInstance
expr_stmt|;
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
block|}
specifier|final
name|ContainingType
name|containingTypeDefaultInstance
decl_stmt|;
specifier|final
name|Type
name|defaultValue
decl_stmt|;
specifier|final
name|MessageLite
name|messageDefaultInstance
decl_stmt|;
specifier|final
name|ExtensionDescriptor
name|descriptor
decl_stmt|;
comment|/**      * Default instance of the type being extended, used to identify that type.      */
specifier|public
name|ContainingType
name|getContainingTypeDefaultInstance
parameter_list|()
block|{
return|return
name|containingTypeDefaultInstance
return|;
block|}
comment|/** Get the field number. */
annotation|@
name|Override
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|descriptor
operator|.
name|getNumber
argument_list|()
return|;
block|}
comment|/**      * If the extension is an embedded message or group, returns the default      * instance of the message.      */
annotation|@
name|Override
specifier|public
name|MessageLite
name|getMessageDefaultInstance
parameter_list|()
block|{
return|return
name|messageDefaultInstance
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Object
name|fromFieldSetType
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|getLiteJavaType
argument_list|()
operator|==
name|WireFormat
operator|.
name|JavaType
operator|.
name|ENUM
condition|)
block|{
specifier|final
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|element
range|:
operator|(
name|List
operator|)
name|value
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|singularFromFieldSetType
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
else|else
block|{
return|return
name|singularFromFieldSetType
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
name|Object
name|singularFromFieldSetType
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|getLiteJavaType
argument_list|()
operator|==
name|WireFormat
operator|.
name|JavaType
operator|.
name|ENUM
condition|)
block|{
return|return
name|descriptor
operator|.
name|enumTypeMap
operator|.
name|findValueByNumber
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Object
name|toFieldSetType
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|getLiteJavaType
argument_list|()
operator|==
name|WireFormat
operator|.
name|JavaType
operator|.
name|ENUM
condition|)
block|{
specifier|final
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|element
range|:
operator|(
name|List
operator|)
name|value
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|singularToFieldSetType
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
else|else
block|{
return|return
name|singularToFieldSetType
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
name|Object
name|singularToFieldSetType
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|getLiteJavaType
argument_list|()
operator|==
name|WireFormat
operator|.
name|JavaType
operator|.
name|ENUM
condition|)
block|{
return|return
operator|(
operator|(
name|Internal
operator|.
name|EnumLite
operator|)
name|value
operator|)
operator|.
name|getNumber
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FieldType
name|getLiteType
parameter_list|()
block|{
return|return
name|descriptor
operator|.
name|getLiteType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepeated
parameter_list|()
block|{
return|return
name|descriptor
operator|.
name|isRepeated
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
block|}
comment|/**    * A serialized (serializable) form of the generated message.  Stores the    * message as a class name and a byte array.    */
specifier|protected
specifier|static
specifier|final
class|class
name|SerializedForm
implements|implements
name|Serializable
block|{
specifier|public
specifier|static
name|SerializedForm
name|of
parameter_list|(
name|MessageLite
name|message
parameter_list|)
block|{
return|return
operator|new
name|SerializedForm
argument_list|(
name|message
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
specifier|private
specifier|final
name|String
name|messageClassName
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|asBytes
decl_stmt|;
comment|/**      * Creates the serialized form by calling {@link org.apache.hadoop.hbase.shaded.com.google.protobuf.MessageLite#toByteArray}.      * @param regularForm the message to serialize      */
name|SerializedForm
parameter_list|(
name|MessageLite
name|regularForm
parameter_list|)
block|{
name|messageClassName
operator|=
name|regularForm
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|asBytes
operator|=
name|regularForm
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
comment|/**      * When read from an ObjectInputStream, this method converts this object      * back to the regular form.  Part of Java's serialization magic.      * @return a GeneratedMessage of the type that was serialized      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Object
name|readResolve
parameter_list|()
throws|throws
name|ObjectStreamException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|messageClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|messageClassName
argument_list|)
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|defaultInstanceField
init|=
name|messageClass
operator|.
name|getDeclaredField
argument_list|(
literal|"DEFAULT_INSTANCE"
argument_list|)
decl_stmt|;
name|defaultInstanceField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MessageLite
name|defaultInstance
init|=
operator|(
name|MessageLite
operator|)
name|defaultInstanceField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|defaultInstance
operator|.
name|newBuilderForType
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|asBytes
argument_list|)
operator|.
name|buildPartial
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find proto buffer class: "
operator|+
name|messageClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
name|readResolveFallback
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to call DEFAULT_INSTANCE in "
operator|+
name|messageClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to call parsePartialFrom"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to understand proto buffer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @deprecated from v3.0.0-beta-3+, for compatibility with v2.5.0 and v2.6.1 generated code.      */
annotation|@
name|Deprecated
specifier|private
name|Object
name|readResolveFallback
parameter_list|()
throws|throws
name|ObjectStreamException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|messageClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|messageClassName
argument_list|)
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
name|defaultInstanceField
init|=
name|messageClass
operator|.
name|getDeclaredField
argument_list|(
literal|"defaultInstance"
argument_list|)
decl_stmt|;
name|defaultInstanceField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MessageLite
name|defaultInstance
init|=
operator|(
name|MessageLite
operator|)
name|defaultInstanceField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|defaultInstance
operator|.
name|newBuilderForType
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|asBytes
argument_list|)
operator|.
name|buildPartial
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find proto buffer class: "
operator|+
name|messageClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find defaultInstance in "
operator|+
name|messageClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to call defaultInstance in "
operator|+
name|messageClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to call parsePartialFrom"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to understand proto buffer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Checks that the {@link Extension} is Lite and returns it as a    * {@link GeneratedExtension}.    */
specifier|private
specifier|static
parameter_list|<
name|MessageType
extends|extends
name|ExtendableMessage
argument_list|<
name|MessageType
argument_list|,
name|BuilderType
argument_list|>
parameter_list|,
name|BuilderType
extends|extends
name|ExtendableBuilder
argument_list|<
name|MessageType
argument_list|,
name|BuilderType
argument_list|>
parameter_list|,
name|T
parameter_list|>
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|T
argument_list|>
name|checkIsLite
parameter_list|(
name|ExtensionLite
argument_list|<
name|MessageType
argument_list|,
name|T
argument_list|>
name|extension
parameter_list|)
block|{
if|if
condition|(
operator|!
name|extension
operator|.
name|isLite
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected a lite extension."
argument_list|)
throw|;
block|}
return|return
operator|(
name|GeneratedExtension
argument_list|<
name|MessageType
argument_list|,
name|T
argument_list|>
operator|)
name|extension
return|;
block|}
comment|/**    * A static helper method for checking if a message is initialized, optionally memoizing.    *<p>    * For use by generated code only.    */
specifier|protected
specifier|static
specifier|final
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|boolean
name|isInitialized
parameter_list|(
name|T
name|message
parameter_list|,
name|boolean
name|shouldMemoize
parameter_list|)
block|{
return|return
name|message
operator|.
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|IS_INITIALIZED
argument_list|,
name|shouldMemoize
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|protected
specifier|static
specifier|final
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|void
name|makeImmutable
parameter_list|(
name|T
name|message
parameter_list|)
block|{
name|message
operator|.
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|MAKE_IMMUTABLE
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|IntList
name|emptyIntList
parameter_list|()
block|{
return|return
name|IntArrayList
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|IntList
name|mutableCopy
parameter_list|(
name|IntList
name|list
parameter_list|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|==
literal|0
condition|?
name|AbstractProtobufList
operator|.
name|DEFAULT_CAPACITY
else|:
name|size
operator|*
literal|2
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|LongList
name|emptyLongList
parameter_list|()
block|{
return|return
name|LongArrayList
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|LongList
name|mutableCopy
parameter_list|(
name|LongList
name|list
parameter_list|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|==
literal|0
condition|?
name|AbstractProtobufList
operator|.
name|DEFAULT_CAPACITY
else|:
name|size
operator|*
literal|2
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|FloatList
name|emptyFloatList
parameter_list|()
block|{
return|return
name|FloatArrayList
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|FloatList
name|mutableCopy
parameter_list|(
name|FloatList
name|list
parameter_list|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|==
literal|0
condition|?
name|AbstractProtobufList
operator|.
name|DEFAULT_CAPACITY
else|:
name|size
operator|*
literal|2
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|DoubleList
name|emptyDoubleList
parameter_list|()
block|{
return|return
name|DoubleArrayList
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|DoubleList
name|mutableCopy
parameter_list|(
name|DoubleList
name|list
parameter_list|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|==
literal|0
condition|?
name|AbstractProtobufList
operator|.
name|DEFAULT_CAPACITY
else|:
name|size
operator|*
literal|2
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|BooleanList
name|emptyBooleanList
parameter_list|()
block|{
return|return
name|BooleanArrayList
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|BooleanList
name|mutableCopy
parameter_list|(
name|BooleanList
name|list
parameter_list|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|==
literal|0
condition|?
name|AbstractProtobufList
operator|.
name|DEFAULT_CAPACITY
else|:
name|size
operator|*
literal|2
argument_list|)
return|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ProtobufList
argument_list|<
name|E
argument_list|>
name|emptyProtobufList
parameter_list|()
block|{
return|return
name|ProtobufArrayList
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ProtobufList
argument_list|<
name|E
argument_list|>
name|mutableCopy
parameter_list|(
name|ProtobufList
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|==
literal|0
condition|?
name|AbstractProtobufList
operator|.
name|DEFAULT_CAPACITY
else|:
name|size
operator|*
literal|2
argument_list|)
return|;
block|}
comment|/**    * A {@link Parser} implementation that delegates to the default instance.    *<p>    * For use by generated code only.    */
specifier|protected
specifier|static
class|class
name|DefaultInstanceBasedParser
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
parameter_list|<
name|T
parameter_list|,
name|?
parameter_list|>
parameter_list|>
extends|extends
name|AbstractParser
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|T
name|defaultInstance
decl_stmt|;
specifier|public
name|DefaultInstanceBasedParser
parameter_list|(
name|T
name|defaultInstance
parameter_list|)
block|{
name|this
operator|.
name|defaultInstance
operator|=
name|defaultInstance
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|parsePartialFrom
parameter_list|(
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|GeneratedMessageLite
operator|.
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
comment|/**    * A static helper method for parsing a partial from input using the extension registry and the    * instance.    */
comment|// TODO(dweis): Should this verify that the last tag was 0?
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parsePartialFrom
parameter_list|(
name|T
name|instance
parameter_list|,
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by protoc
name|T
name|result
init|=
operator|(
name|T
operator|)
name|instance
operator|.
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|NEW_MUTABLE_INSTANCE
argument_list|)
decl_stmt|;
try|try
block|{
name|result
operator|.
name|dynamicMethod
argument_list|(
name|MethodToInvoke
operator|.
name|MERGE_FROM_STREAM
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
name|result
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidProtocolBufferException
condition|)
block|{
throw|throw
operator|(
name|InvalidProtocolBufferException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parsePartialFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Helper method to check if message is initialized.    *    * @throws InvalidProtocolBufferException if it is not initialized.    * @return The message to check.    */
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|checkMessageInitialized
parameter_list|(
name|T
name|message
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|message
operator|.
name|newUninitializedMessageException
argument_list|()
operator|.
name|asInvalidProtocolBufferException
argument_list|()
operator|.
name|setUnfinishedMessage
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
comment|// Validates last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|ByteString
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parseFrom
argument_list|(
name|defaultInstance
argument_list|,
name|data
argument_list|,
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// Validates last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|ByteString
name|data
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|data
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
comment|// This is a special case since we want to verify that the last tag is 0. We assume we exhaust the
comment|// ByteString.
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parsePartialFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|ByteString
name|data
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|T
name|message
decl_stmt|;
try|try
block|{
name|CodedInputStream
name|input
init|=
name|data
operator|.
name|newCodedInput
argument_list|()
decl_stmt|;
name|message
operator|=
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
try|try
block|{
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|// This is a special case since we want to verify that the last tag is 0. We assume we exhaust the
comment|// ByteString.
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parsePartialFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|T
name|message
decl_stmt|;
try|try
block|{
name|CodedInputStream
name|input
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|message
operator|=
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
try|try
block|{
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|// Validates last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|data
argument_list|,
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// Validates last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|data
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
comment|// Does not validate last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|InputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|input
argument_list|)
argument_list|,
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// Does not validate last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|InputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|input
argument_list|)
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
comment|// Does not validate last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parseFrom
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
return|;
block|}
comment|// Does not validate last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
comment|// Validates last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseDelimitedFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|InputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialDelimitedFrom
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// Validates last tag.
specifier|protected
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parseDelimitedFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|InputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialDelimitedFrom
argument_list|(
name|defaultInstance
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|GeneratedMessageLite
argument_list|<
name|T
argument_list|,
name|?
argument_list|>
parameter_list|>
name|T
name|parsePartialDelimitedFrom
parameter_list|(
name|T
name|defaultInstance
parameter_list|,
name|InputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|int
name|size
decl_stmt|;
try|try
block|{
name|int
name|firstByte
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstByte
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|size
operator|=
name|CodedInputStream
operator|.
name|readRawVarint32
argument_list|(
name|firstByte
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidProtocolBufferException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|InputStream
name|limitedInput
init|=
operator|new
name|LimitedInputStream
argument_list|(
name|input
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|limitedInput
argument_list|)
decl_stmt|;
name|T
name|message
init|=
name|parsePartialFrom
argument_list|(
name|defaultInstance
argument_list|,
name|codedInput
argument_list|,
name|extensionRegistry
argument_list|)
decl_stmt|;
try|try
block|{
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
comment|/**    * An abstract visitor that the generated code calls into that we use to implement various    * features. Fields that are not members of oneofs are always visited. Members of a oneof are only    * visited when they are the set oneof case value on the "other" proto. The visitOneofNotSet    * method is invoked if other's oneof case is not set.    */
specifier|protected
interface|interface
name|Visitor
block|{
name|boolean
name|visitBoolean
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|boolean
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|boolean
name|other
parameter_list|)
function_decl|;
name|int
name|visitInt
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|int
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|int
name|other
parameter_list|)
function_decl|;
name|double
name|visitDouble
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|double
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|double
name|other
parameter_list|)
function_decl|;
name|float
name|visitFloat
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|float
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|float
name|other
parameter_list|)
function_decl|;
name|long
name|visitLong
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|long
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|long
name|other
parameter_list|)
function_decl|;
name|String
name|visitString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|String
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|String
name|other
parameter_list|)
function_decl|;
name|ByteString
name|visitByteString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|ByteString
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|ByteString
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofBoolean
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofInt
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofDouble
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofFloat
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofLong
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofByteString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofLazyMessage
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|Object
name|visitOneofMessage
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
function_decl|;
name|void
name|visitOneofNotSet
parameter_list|(
name|boolean
name|minePresent
parameter_list|)
function_decl|;
comment|/**      * Message fields use null sentinals.      */
parameter_list|<
name|T
extends|extends
name|MessageLite
parameter_list|>
name|T
name|visitMessage
parameter_list|(
name|T
name|mine
parameter_list|,
name|T
name|other
parameter_list|)
function_decl|;
name|LazyFieldLite
name|visitLazyMessage
parameter_list|(
name|LazyFieldLite
name|mine
parameter_list|,
name|LazyFieldLite
name|other
parameter_list|)
function_decl|;
parameter_list|<
name|T
parameter_list|>
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|visitList
parameter_list|(
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|mine
parameter_list|,
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|other
parameter_list|)
function_decl|;
name|BooleanList
name|visitBooleanList
parameter_list|(
name|BooleanList
name|mine
parameter_list|,
name|BooleanList
name|other
parameter_list|)
function_decl|;
name|IntList
name|visitIntList
parameter_list|(
name|IntList
name|mine
parameter_list|,
name|IntList
name|other
parameter_list|)
function_decl|;
name|DoubleList
name|visitDoubleList
parameter_list|(
name|DoubleList
name|mine
parameter_list|,
name|DoubleList
name|other
parameter_list|)
function_decl|;
name|FloatList
name|visitFloatList
parameter_list|(
name|FloatList
name|mine
parameter_list|,
name|FloatList
name|other
parameter_list|)
function_decl|;
name|LongList
name|visitLongList
parameter_list|(
name|LongList
name|mine
parameter_list|,
name|LongList
name|other
parameter_list|)
function_decl|;
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|visitExtensions
parameter_list|(
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|mine
parameter_list|,
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|other
parameter_list|)
function_decl|;
name|UnknownFieldSetLite
name|visitUnknownFields
parameter_list|(
name|UnknownFieldSetLite
name|mine
parameter_list|,
name|UnknownFieldSetLite
name|other
parameter_list|)
function_decl|;
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|visitMap
parameter_list|(
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mine
parameter_list|,
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
function_decl|;
block|}
comment|/**    * Implements equals. Throws a {@link NotEqualsException} when not equal.    */
specifier|static
class|class
name|EqualsVisitor
implements|implements
name|Visitor
block|{
specifier|static
specifier|final
class|class
name|NotEqualsException
extends|extends
name|RuntimeException
block|{}
specifier|static
specifier|final
name|EqualsVisitor
name|INSTANCE
init|=
operator|new
name|EqualsVisitor
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|NotEqualsException
name|NOT_EQUALS
init|=
operator|new
name|NotEqualsException
argument_list|()
decl_stmt|;
specifier|private
name|EqualsVisitor
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|visitBoolean
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|boolean
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|boolean
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|!=
name|otherPresent
operator|||
name|mine
operator|!=
name|other
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|visitInt
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|int
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|int
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|!=
name|otherPresent
operator|||
name|mine
operator|!=
name|other
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|visitDouble
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|double
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|double
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|!=
name|otherPresent
operator|||
name|mine
operator|!=
name|other
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|visitFloat
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|float
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|float
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|!=
name|otherPresent
operator|||
name|mine
operator|!=
name|other
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|visitLong
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|long
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|long
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|!=
name|otherPresent
operator|||
name|mine
operator|!=
name|other
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|String
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|String
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|!=
name|otherPresent
operator|||
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteString
name|visitByteString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|ByteString
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|ByteString
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|!=
name|otherPresent
operator|||
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofBoolean
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofInt
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofDouble
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofFloat
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofLong
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofByteString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofLazyMessage
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofMessage
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
operator|&&
operator|(
operator|(
name|GeneratedMessageLite
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|mine
operator|)
operator|.
name|equals
argument_list|(
name|this
argument_list|,
operator|(
name|MessageLite
operator|)
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitOneofNotSet
parameter_list|(
name|boolean
name|minePresent
parameter_list|)
block|{
if|if
condition|(
name|minePresent
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|MessageLite
parameter_list|>
name|T
name|visitMessage
parameter_list|(
name|T
name|mine
parameter_list|,
name|T
name|other
parameter_list|)
block|{
if|if
condition|(
name|mine
operator|==
literal|null
operator|&&
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|mine
operator|==
literal|null
operator|||
name|other
operator|==
literal|null
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
operator|(
operator|(
name|GeneratedMessageLite
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|mine
operator|)
operator|.
name|equals
argument_list|(
name|this
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|LazyFieldLite
name|visitLazyMessage
parameter_list|(
name|LazyFieldLite
name|mine
parameter_list|,
name|LazyFieldLite
name|other
parameter_list|)
block|{
if|if
condition|(
name|mine
operator|==
literal|null
operator|&&
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|mine
operator|==
literal|null
operator|||
name|other
operator|==
literal|null
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
if|if
condition|(
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
return|return
name|mine
return|;
block|}
throw|throw
name|NOT_EQUALS
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|visitList
parameter_list|(
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|mine
parameter_list|,
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|BooleanList
name|visitBooleanList
parameter_list|(
name|BooleanList
name|mine
parameter_list|,
name|BooleanList
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|IntList
name|visitIntList
parameter_list|(
name|IntList
name|mine
parameter_list|,
name|IntList
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|DoubleList
name|visitDoubleList
parameter_list|(
name|DoubleList
name|mine
parameter_list|,
name|DoubleList
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|FloatList
name|visitFloatList
parameter_list|(
name|FloatList
name|mine
parameter_list|,
name|FloatList
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|LongList
name|visitLongList
parameter_list|(
name|LongList
name|mine
parameter_list|,
name|LongList
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|visitExtensions
parameter_list|(
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|mine
parameter_list|,
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnknownFieldSetLite
name|visitUnknownFields
parameter_list|(
name|UnknownFieldSetLite
name|mine
parameter_list|,
name|UnknownFieldSetLite
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|visitMap
parameter_list|(
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mine
parameter_list|,
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
throw|throw
name|NOT_EQUALS
throw|;
block|}
return|return
name|mine
return|;
block|}
block|}
comment|/**    * Implements hashCode by accumulating state.    */
specifier|private
specifier|static
class|class
name|HashCodeVisitor
implements|implements
name|Visitor
block|{
comment|// The caller must ensure that the visitor is invoked parameterized with this and this such that
comment|// other is this. This is required due to how oneof cases are handled. See the class comment
comment|// on Visitor for more information.
specifier|private
name|int
name|hashCode
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visitBoolean
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|boolean
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|boolean
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|Internal
operator|.
name|hashBoolean
argument_list|(
name|mine
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|visitInt
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|int
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|int
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|visitDouble
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|double
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|double
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|Internal
operator|.
name|hashLong
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|mine
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|visitFloat
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|float
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|float
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|mine
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|visitLong
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|long
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|long
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|Internal
operator|.
name|hashLong
argument_list|(
name|mine
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|String
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|String
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteString
name|visitByteString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|ByteString
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|ByteString
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofBoolean
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|Internal
operator|.
name|hashBoolean
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|mine
operator|)
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofInt
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
operator|(
name|Integer
operator|)
name|mine
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofDouble
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|Internal
operator|.
name|hashLong
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
operator|(
name|Double
operator|)
name|mine
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofFloat
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|Float
operator|.
name|floatToIntBits
argument_list|(
operator|(
name|Float
operator|)
name|mine
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofLong
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|Internal
operator|.
name|hashLong
argument_list|(
operator|(
name|Long
operator|)
name|mine
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofByteString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofLazyMessage
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofMessage
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|visitMessage
argument_list|(
operator|(
name|MessageLite
operator|)
name|mine
argument_list|,
operator|(
name|MessageLite
operator|)
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitOneofNotSet
parameter_list|(
name|boolean
name|minePresent
parameter_list|)
block|{
if|if
condition|(
name|minePresent
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
comment|// Can't happen if other == this.
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|MessageLite
parameter_list|>
name|T
name|visitMessage
parameter_list|(
name|T
name|mine
parameter_list|,
name|T
name|other
parameter_list|)
block|{
specifier|final
name|int
name|protoHash
decl_stmt|;
if|if
condition|(
name|mine
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mine
operator|instanceof
name|GeneratedMessageLite
condition|)
block|{
name|protoHash
operator|=
operator|(
operator|(
name|GeneratedMessageLite
operator|)
name|mine
operator|)
operator|.
name|hashCode
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|protoHash
operator|=
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|protoHash
operator|=
literal|37
expr_stmt|;
block|}
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|protoHash
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|LazyFieldLite
name|visitLazyMessage
parameter_list|(
name|LazyFieldLite
name|mine
parameter_list|,
name|LazyFieldLite
name|other
parameter_list|)
block|{
specifier|final
name|int
name|protoHash
decl_stmt|;
if|if
condition|(
name|mine
operator|!=
literal|null
condition|)
block|{
name|protoHash
operator|=
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoHash
operator|=
literal|37
expr_stmt|;
block|}
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|protoHash
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|visitList
parameter_list|(
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|mine
parameter_list|,
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|BooleanList
name|visitBooleanList
parameter_list|(
name|BooleanList
name|mine
parameter_list|,
name|BooleanList
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|IntList
name|visitIntList
parameter_list|(
name|IntList
name|mine
parameter_list|,
name|IntList
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|DoubleList
name|visitDoubleList
parameter_list|(
name|DoubleList
name|mine
parameter_list|,
name|DoubleList
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|FloatList
name|visitFloatList
parameter_list|(
name|FloatList
name|mine
parameter_list|,
name|FloatList
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|LongList
name|visitLongList
parameter_list|(
name|LongList
name|mine
parameter_list|,
name|LongList
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|visitExtensions
parameter_list|(
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|mine
parameter_list|,
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnknownFieldSetLite
name|visitUnknownFields
parameter_list|(
name|UnknownFieldSetLite
name|mine
parameter_list|,
name|UnknownFieldSetLite
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|visitMap
parameter_list|(
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mine
parameter_list|,
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
name|hashCode
operator|=
operator|(
literal|53
operator|*
name|hashCode
operator|)
operator|+
name|mine
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|mine
return|;
block|}
block|}
comment|/**    * Implements field merging semantics over the visitor interface.    */
specifier|protected
specifier|static
class|class
name|MergeFromVisitor
implements|implements
name|Visitor
block|{
specifier|public
specifier|static
specifier|final
name|MergeFromVisitor
name|INSTANCE
init|=
operator|new
name|MergeFromVisitor
argument_list|()
decl_stmt|;
specifier|private
name|MergeFromVisitor
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|boolean
name|visitBoolean
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|boolean
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|boolean
name|other
parameter_list|)
block|{
return|return
name|otherPresent
condition|?
name|other
else|:
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|visitInt
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|int
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|int
name|other
parameter_list|)
block|{
return|return
name|otherPresent
condition|?
name|other
else|:
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|visitDouble
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|double
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|double
name|other
parameter_list|)
block|{
return|return
name|otherPresent
condition|?
name|other
else|:
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|visitFloat
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|float
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|float
name|other
parameter_list|)
block|{
return|return
name|otherPresent
condition|?
name|other
else|:
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|visitLong
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|long
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|long
name|other
parameter_list|)
block|{
return|return
name|otherPresent
condition|?
name|other
else|:
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|String
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|String
name|other
parameter_list|)
block|{
return|return
name|otherPresent
condition|?
name|other
else|:
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteString
name|visitByteString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|ByteString
name|mine
parameter_list|,
name|boolean
name|otherPresent
parameter_list|,
name|ByteString
name|other
parameter_list|)
block|{
return|return
name|otherPresent
condition|?
name|other
else|:
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofBoolean
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofInt
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofDouble
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofFloat
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofLong
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofByteString
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofLazyMessage
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
name|LazyFieldLite
name|lazy
init|=
name|minePresent
condition|?
operator|(
name|LazyFieldLite
operator|)
name|mine
else|:
operator|new
name|LazyFieldLite
argument_list|()
decl_stmt|;
name|lazy
operator|.
name|merge
argument_list|(
operator|(
name|LazyFieldLite
operator|)
name|other
argument_list|)
expr_stmt|;
return|return
name|lazy
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|visitOneofMessage
parameter_list|(
name|boolean
name|minePresent
parameter_list|,
name|Object
name|mine
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|minePresent
condition|)
block|{
return|return
name|visitMessage
argument_list|(
operator|(
name|MessageLite
operator|)
name|mine
argument_list|,
operator|(
name|MessageLite
operator|)
name|other
argument_list|)
return|;
block|}
return|return
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitOneofNotSet
parameter_list|(
name|boolean
name|minePresent
parameter_list|)
block|{
return|return;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Guaranteed by runtime.
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|MessageLite
parameter_list|>
name|T
name|visitMessage
parameter_list|(
name|T
name|mine
parameter_list|,
name|T
name|other
parameter_list|)
block|{
if|if
condition|(
name|mine
operator|!=
literal|null
operator|&&
name|other
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|mine
operator|.
name|toBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|mine
operator|!=
literal|null
condition|?
name|mine
else|:
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|LazyFieldLite
name|visitLazyMessage
parameter_list|(
name|LazyFieldLite
name|mine
parameter_list|,
name|LazyFieldLite
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mine
operator|==
literal|null
condition|)
block|{
name|mine
operator|=
operator|new
name|LazyFieldLite
argument_list|()
expr_stmt|;
block|}
name|mine
operator|.
name|merge
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|visitList
parameter_list|(
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|mine
parameter_list|,
name|ProtobufList
argument_list|<
name|T
argument_list|>
name|other
parameter_list|)
block|{
name|int
name|size
init|=
name|mine
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|otherSize
init|=
name|other
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|otherSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|isModifiable
argument_list|()
condition|)
block|{
name|mine
operator|=
name|mine
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|+
name|otherSize
argument_list|)
expr_stmt|;
block|}
name|mine
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|size
operator|>
literal|0
condition|?
name|mine
else|:
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|BooleanList
name|visitBooleanList
parameter_list|(
name|BooleanList
name|mine
parameter_list|,
name|BooleanList
name|other
parameter_list|)
block|{
name|int
name|size
init|=
name|mine
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|otherSize
init|=
name|other
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|otherSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|isModifiable
argument_list|()
condition|)
block|{
name|mine
operator|=
name|mine
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|+
name|otherSize
argument_list|)
expr_stmt|;
block|}
name|mine
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|size
operator|>
literal|0
condition|?
name|mine
else|:
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|IntList
name|visitIntList
parameter_list|(
name|IntList
name|mine
parameter_list|,
name|IntList
name|other
parameter_list|)
block|{
name|int
name|size
init|=
name|mine
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|otherSize
init|=
name|other
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|otherSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|isModifiable
argument_list|()
condition|)
block|{
name|mine
operator|=
name|mine
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|+
name|otherSize
argument_list|)
expr_stmt|;
block|}
name|mine
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|size
operator|>
literal|0
condition|?
name|mine
else|:
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|DoubleList
name|visitDoubleList
parameter_list|(
name|DoubleList
name|mine
parameter_list|,
name|DoubleList
name|other
parameter_list|)
block|{
name|int
name|size
init|=
name|mine
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|otherSize
init|=
name|other
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|otherSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|isModifiable
argument_list|()
condition|)
block|{
name|mine
operator|=
name|mine
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|+
name|otherSize
argument_list|)
expr_stmt|;
block|}
name|mine
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|size
operator|>
literal|0
condition|?
name|mine
else|:
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|FloatList
name|visitFloatList
parameter_list|(
name|FloatList
name|mine
parameter_list|,
name|FloatList
name|other
parameter_list|)
block|{
name|int
name|size
init|=
name|mine
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|otherSize
init|=
name|other
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|otherSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|isModifiable
argument_list|()
condition|)
block|{
name|mine
operator|=
name|mine
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|+
name|otherSize
argument_list|)
expr_stmt|;
block|}
name|mine
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|size
operator|>
literal|0
condition|?
name|mine
else|:
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|LongList
name|visitLongList
parameter_list|(
name|LongList
name|mine
parameter_list|,
name|LongList
name|other
parameter_list|)
block|{
name|int
name|size
init|=
name|mine
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|otherSize
init|=
name|other
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
operator|&&
name|otherSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|isModifiable
argument_list|()
condition|)
block|{
name|mine
operator|=
name|mine
operator|.
name|mutableCopyWithCapacity
argument_list|(
name|size
operator|+
name|otherSize
argument_list|)
expr_stmt|;
block|}
name|mine
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|size
operator|>
literal|0
condition|?
name|mine
else|:
name|other
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|visitExtensions
parameter_list|(
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|mine
parameter_list|,
name|FieldSet
argument_list|<
name|ExtensionDescriptor
argument_list|>
name|other
parameter_list|)
block|{
if|if
condition|(
name|mine
operator|.
name|isImmutable
argument_list|()
condition|)
block|{
name|mine
operator|=
name|mine
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|mine
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|mine
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnknownFieldSetLite
name|visitUnknownFields
parameter_list|(
name|UnknownFieldSetLite
name|mine
parameter_list|,
name|UnknownFieldSetLite
name|other
parameter_list|)
block|{
return|return
name|other
operator|==
name|UnknownFieldSetLite
operator|.
name|getDefaultInstance
argument_list|()
condition|?
name|mine
else|:
name|UnknownFieldSetLite
operator|.
name|mutableCopyOf
argument_list|(
name|mine
argument_list|,
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|visitMap
parameter_list|(
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mine
parameter_list|,
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mine
operator|.
name|isMutable
argument_list|()
condition|)
block|{
name|mine
operator|=
name|mine
operator|.
name|mutableCopy
argument_list|()
expr_stmt|;
block|}
name|mine
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|mine
return|;
block|}
block|}
block|}
end_class

end_unit

