begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implements the lite version of map entry messages.  *  * This class serves as an utility class to help do serialization/parsing of  * map entries. It's used in generated code and also in the full version  * MapEntry message.  *  * Protobuf internal. Users shouldn't use.  */
end_comment

begin_class
specifier|public
class|class
name|MapEntryLite
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
specifier|static
class|class
name|Metadata
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
specifier|public
specifier|final
name|WireFormat
operator|.
name|FieldType
name|keyType
decl_stmt|;
specifier|public
specifier|final
name|K
name|defaultKey
decl_stmt|;
specifier|public
specifier|final
name|WireFormat
operator|.
name|FieldType
name|valueType
decl_stmt|;
specifier|public
specifier|final
name|V
name|defaultValue
decl_stmt|;
specifier|public
name|Metadata
parameter_list|(
name|WireFormat
operator|.
name|FieldType
name|keyType
parameter_list|,
name|K
name|defaultKey
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|valueType
parameter_list|,
name|V
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
name|this
operator|.
name|defaultKey
operator|=
name|defaultKey
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|KEY_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VALUE_FIELD_NUMBER
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|K
name|key
decl_stmt|;
specifier|private
specifier|final
name|V
name|value
decl_stmt|;
comment|/** Creates a default MapEntryLite message instance. */
specifier|private
name|MapEntryLite
parameter_list|(
name|WireFormat
operator|.
name|FieldType
name|keyType
parameter_list|,
name|K
name|defaultKey
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|valueType
parameter_list|,
name|V
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
operator|new
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|keyType
argument_list|,
name|defaultKey
argument_list|,
name|valueType
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|defaultKey
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
comment|/** Creates a new MapEntryLite message. */
specifier|private
name|MapEntryLite
parameter_list|(
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**    * Creates a default MapEntryLite message instance.    *    * This method is used by generated code to create the default instance for    * a map entry message. The created default instance should be used to create    * new map entry messages of the same type. For each map entry message, only    * one default instance should be created.    */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|MapEntryLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newDefaultInstance
parameter_list|(
name|WireFormat
operator|.
name|FieldType
name|keyType
parameter_list|,
name|K
name|defaultKey
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|valueType
parameter_list|,
name|V
name|defaultValue
parameter_list|)
block|{
return|return
operator|new
name|MapEntryLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|keyType
argument_list|,
name|defaultKey
argument_list|,
name|valueType
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|writeTo
parameter_list|(
name|CodedOutputStream
name|output
parameter_list|,
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldSet
operator|.
name|writeElement
argument_list|(
name|output
argument_list|,
name|metadata
operator|.
name|keyType
argument_list|,
name|KEY_FIELD_NUMBER
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|FieldSet
operator|.
name|writeElement
argument_list|(
name|output
argument_list|,
name|metadata
operator|.
name|valueType
argument_list|,
name|VALUE_FIELD_NUMBER
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|int
name|computeSerializedSize
parameter_list|(
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|FieldSet
operator|.
name|computeElementSize
argument_list|(
name|metadata
operator|.
name|keyType
argument_list|,
name|KEY_FIELD_NUMBER
argument_list|,
name|key
argument_list|)
operator|+
name|FieldSet
operator|.
name|computeElementSize
argument_list|(
name|metadata
operator|.
name|valueType
argument_list|,
name|VALUE_FIELD_NUMBER
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|parseField
parameter_list|(
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|,
name|WireFormat
operator|.
name|FieldType
name|type
parameter_list|,
name|T
name|value
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|MESSAGE
case|:
name|MessageLite
operator|.
name|Builder
name|subBuilder
init|=
operator|(
operator|(
name|MessageLite
operator|)
name|value
operator|)
operator|.
name|toBuilder
argument_list|()
decl_stmt|;
name|input
operator|.
name|readMessage
argument_list|(
name|subBuilder
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|subBuilder
operator|.
name|buildPartial
argument_list|()
return|;
case|case
name|ENUM
case|:
return|return
call|(
name|T
call|)
argument_list|(
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|)
name|input
operator|.
name|readEnum
argument_list|()
return|;
case|case
name|GROUP
case|:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Groups are not allowed in maps."
argument_list|)
throw|;
default|default:
return|return
operator|(
name|T
operator|)
name|FieldSet
operator|.
name|readPrimitiveField
argument_list|(
name|input
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
comment|/**    * Serializes the provided key and value as though they were wrapped by a {@link MapEntryLite}    * to the output stream. This helper method avoids allocation of a {@link MapEntryLite}    * built with a key and value and is called from generated code directly.    */
specifier|public
name|void
name|serializeTo
parameter_list|(
name|CodedOutputStream
name|output
parameter_list|,
name|int
name|fieldNumber
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|writeTag
argument_list|(
name|fieldNumber
argument_list|,
name|WireFormat
operator|.
name|WIRETYPE_LENGTH_DELIMITED
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeUInt32NoTag
argument_list|(
name|computeSerializedSize
argument_list|(
name|metadata
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writeTo
argument_list|(
name|output
argument_list|,
name|metadata
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Computes the message size for the provided key and value as though they were wrapped    * by a {@link MapEntryLite}. This helper method avoids allocation of a {@link MapEntryLite}    * built with a key and value and is called from generated code directly.    */
specifier|public
name|int
name|computeMessageSize
parameter_list|(
name|int
name|fieldNumber
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|CodedOutputStream
operator|.
name|computeTagSize
argument_list|(
name|fieldNumber
argument_list|)
operator|+
name|CodedOutputStream
operator|.
name|computeLengthDelimitedFieldSize
argument_list|(
name|computeSerializedSize
argument_list|(
name|metadata
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Parses an entry off of the input as a {@link Map.Entry}. This helper requires an allocation    * so using {@link #parseInto} is preferred if possible.    */
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|parseEntry
parameter_list|(
name|ByteString
name|bytes
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parseEntry
argument_list|(
name|bytes
operator|.
name|newCodedInput
argument_list|()
argument_list|,
name|metadata
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|parseEntry
parameter_list|(
name|CodedInputStream
name|input
parameter_list|,
name|Metadata
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|metadata
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
name|K
name|key
init|=
name|metadata
operator|.
name|defaultKey
decl_stmt|;
name|V
name|value
init|=
name|metadata
operator|.
name|defaultValue
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|tag
operator|==
name|WireFormat
operator|.
name|makeTag
argument_list|(
name|KEY_FIELD_NUMBER
argument_list|,
name|metadata
operator|.
name|keyType
operator|.
name|getWireType
argument_list|()
argument_list|)
condition|)
block|{
name|key
operator|=
name|parseField
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|,
name|metadata
operator|.
name|keyType
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|WireFormat
operator|.
name|makeTag
argument_list|(
name|VALUE_FIELD_NUMBER
argument_list|,
name|metadata
operator|.
name|valueType
operator|.
name|getWireType
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|=
name|parseField
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|,
name|metadata
operator|.
name|valueType
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|skipField
argument_list|(
name|tag
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Parses an entry off of the input into the map. This helper avoids allocaton of a    * {@link MapEntryLite} by parsing directly into the provided {@link MapFieldLite}.    */
specifier|public
name|void
name|parseInto
parameter_list|(
name|MapFieldLite
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|input
operator|.
name|readRawVarint32
argument_list|()
decl_stmt|;
specifier|final
name|int
name|oldLimit
init|=
name|input
operator|.
name|pushLimit
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|K
name|key
init|=
name|metadata
operator|.
name|defaultKey
decl_stmt|;
name|V
name|value
init|=
name|metadata
operator|.
name|defaultValue
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|tag
operator|==
name|WireFormat
operator|.
name|makeTag
argument_list|(
name|KEY_FIELD_NUMBER
argument_list|,
name|metadata
operator|.
name|keyType
operator|.
name|getWireType
argument_list|()
argument_list|)
condition|)
block|{
name|key
operator|=
name|parseField
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|,
name|metadata
operator|.
name|keyType
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
name|WireFormat
operator|.
name|makeTag
argument_list|(
name|VALUE_FIELD_NUMBER
argument_list|,
name|metadata
operator|.
name|valueType
operator|.
name|getWireType
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|=
name|parseField
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|,
name|metadata
operator|.
name|valueType
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|skipField
argument_list|(
name|tag
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|input
operator|.
name|popLimit
argument_list|(
name|oldLimit
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

