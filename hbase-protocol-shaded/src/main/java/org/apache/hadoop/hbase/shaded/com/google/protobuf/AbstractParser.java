begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractMessageLite
operator|.
name|Builder
operator|.
name|LimitedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * A partial implementation of the {@link Parser} interface which implements  * as many methods of that interface as possible in terms of other methods.  *  * Note: This class implements all the convenience methods in the  * {@link Parser} interface. See {@link Parser} for related javadocs.  * Subclasses need to implement  * {@link Parser#parsePartialFrom(CodedInputStream, ExtensionRegistryLite)}  *  * @author liujisi@google.com (Pherl Liu)  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractParser
parameter_list|<
name|MessageType
extends|extends
name|MessageLite
parameter_list|>
implements|implements
name|Parser
argument_list|<
name|MessageType
argument_list|>
block|{
comment|/**    * Creates an UninitializedMessageException for MessageType.    */
specifier|private
name|UninitializedMessageException
name|newUninitializedMessageException
parameter_list|(
name|MessageType
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|instanceof
name|AbstractMessageLite
condition|)
block|{
return|return
operator|(
operator|(
name|AbstractMessageLite
operator|)
name|message
operator|)
operator|.
name|newUninitializedMessageException
argument_list|()
return|;
block|}
return|return
operator|new
name|UninitializedMessageException
argument_list|(
name|message
argument_list|)
return|;
block|}
comment|/**    * Helper method to check if message is initialized.    *    * @throws InvalidProtocolBufferException if it is not initialized.    * @return The message to check.    */
specifier|private
name|MessageType
name|checkMessageInitialized
parameter_list|(
name|MessageType
name|message
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|message
argument_list|)
operator|.
name|asInvalidProtocolBufferException
argument_list|()
operator|.
name|setUnfinishedMessage
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
specifier|private
specifier|static
specifier|final
name|ExtensionRegistryLite
name|EMPTY_REGISTRY
init|=
name|ExtensionRegistryLite
operator|.
name|getEmptyRegistry
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parseFrom
argument_list|(
name|input
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|ByteString
name|data
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|MessageType
name|message
decl_stmt|;
try|try
block|{
name|CodedInputStream
name|input
init|=
name|data
operator|.
name|newCodedInput
argument_list|()
decl_stmt|;
name|message
operator|=
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
try|try
block|{
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|ByteString
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parsePartialFrom
argument_list|(
name|data
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|ByteString
name|data
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|ByteString
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parseFrom
argument_list|(
name|data
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
try|try
block|{
name|CodedInputStream
name|input
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|MessageType
name|message
init|=
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
decl_stmt|;
try|try
block|{
name|input
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parsePartialFrom
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parsePartialFrom
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parsePartialFrom
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parseFrom
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parseFrom
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parseFrom
argument_list|(
name|data
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|MessageType
name|message
init|=
name|parsePartialFrom
argument_list|(
name|codedInput
argument_list|,
name|extensionRegistry
argument_list|)
decl_stmt|;
try|try
block|{
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialFrom
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseFrom
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parseFrom
argument_list|(
name|input
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialDelimitedFrom
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|int
name|size
decl_stmt|;
try|try
block|{
name|int
name|firstByte
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstByte
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|size
operator|=
name|CodedInputStream
operator|.
name|readRawVarint32
argument_list|(
name|firstByte
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidProtocolBufferException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|InputStream
name|limitedInput
init|=
operator|new
name|LimitedInputStream
argument_list|(
name|input
argument_list|,
name|size
argument_list|)
decl_stmt|;
return|return
name|parsePartialFrom
argument_list|(
name|limitedInput
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parsePartialDelimitedFrom
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parsePartialDelimitedFrom
argument_list|(
name|input
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseDelimitedFrom
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|checkMessageInitialized
argument_list|(
name|parsePartialDelimitedFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageType
name|parseDelimitedFrom
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|parseDelimitedFrom
argument_list|(
name|input
argument_list|,
name|EMPTY_REGISTRY
argument_list|)
return|;
block|}
block|}
end_class

end_unit

