begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * {@code UnknownFieldSetLite} is used to keep track of fields which were seen  * when parsing a protocol message but whose field numbers or types are  * unrecognized. This most frequently occurs when new fields are added to a  * message type and then messages containing those fields are read by old  * software that was compiled before the new types were added.  *  *<p>For use by generated code only.  *  * @author dweis@google.com (Daniel Weis)  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|UnknownFieldSetLite
block|{
comment|// Arbitrarily chosen.
comment|// TODO(dweis): Tune this number?
specifier|private
specifier|static
specifier|final
name|int
name|MIN_CAPACITY
init|=
literal|8
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UnknownFieldSetLite
name|DEFAULT_INSTANCE
init|=
operator|new
name|UnknownFieldSetLite
argument_list|(
literal|0
argument_list|,
operator|new
name|int
index|[
literal|0
index|]
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
literal|false
comment|/* isMutable */
argument_list|)
decl_stmt|;
comment|/**    * Get an empty {@code UnknownFieldSetLite}.    *    *<p>For use by generated code only.    */
specifier|public
specifier|static
name|UnknownFieldSetLite
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
comment|/**    * Returns a new mutable instance.    */
specifier|static
name|UnknownFieldSetLite
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|UnknownFieldSetLite
argument_list|()
return|;
block|}
comment|/**    * Returns a mutable {@code UnknownFieldSetLite} that is the composite of {@code first} and    * {@code second}.    */
specifier|static
name|UnknownFieldSetLite
name|mutableCopyOf
parameter_list|(
name|UnknownFieldSetLite
name|first
parameter_list|,
name|UnknownFieldSetLite
name|second
parameter_list|)
block|{
name|int
name|count
init|=
name|first
operator|.
name|count
operator|+
name|second
operator|.
name|count
decl_stmt|;
name|int
index|[]
name|tags
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|first
operator|.
name|tags
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|second
operator|.
name|tags
argument_list|,
literal|0
argument_list|,
name|tags
argument_list|,
name|first
operator|.
name|count
argument_list|,
name|second
operator|.
name|count
argument_list|)
expr_stmt|;
name|Object
index|[]
name|objects
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|first
operator|.
name|objects
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|second
operator|.
name|objects
argument_list|,
literal|0
argument_list|,
name|objects
argument_list|,
name|first
operator|.
name|count
argument_list|,
name|second
operator|.
name|count
argument_list|)
expr_stmt|;
return|return
operator|new
name|UnknownFieldSetLite
argument_list|(
name|count
argument_list|,
name|tags
argument_list|,
name|objects
argument_list|,
literal|true
comment|/* isMutable */
argument_list|)
return|;
block|}
comment|/**    * The number of elements in the set.    */
specifier|private
name|int
name|count
decl_stmt|;
comment|/**    * The tag numbers for the elements in the set.    */
specifier|private
name|int
index|[]
name|tags
decl_stmt|;
comment|/**    * The boxed values of the elements in the set.    */
specifier|private
name|Object
index|[]
name|objects
decl_stmt|;
comment|/**    * The lazily computed serialized size of the set.    */
specifier|private
name|int
name|memoizedSerializedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Indicates that this object is mutable.     */
specifier|private
name|boolean
name|isMutable
decl_stmt|;
comment|/**    * Constructs a mutable {@code UnknownFieldSetLite}.    */
specifier|private
name|UnknownFieldSetLite
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
operator|new
name|int
index|[
name|MIN_CAPACITY
index|]
argument_list|,
operator|new
name|Object
index|[
name|MIN_CAPACITY
index|]
argument_list|,
literal|true
comment|/* isMutable */
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs the {@code UnknownFieldSetLite}.    */
specifier|private
name|UnknownFieldSetLite
parameter_list|(
name|int
name|count
parameter_list|,
name|int
index|[]
name|tags
parameter_list|,
name|Object
index|[]
name|objects
parameter_list|,
name|boolean
name|isMutable
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
name|this
operator|.
name|objects
operator|=
name|objects
expr_stmt|;
name|this
operator|.
name|isMutable
operator|=
name|isMutable
expr_stmt|;
block|}
comment|/**    * Marks this object as immutable.    *     *<p>Future calls to methods that attempt to modify this object will throw.    */
specifier|public
name|void
name|makeImmutable
parameter_list|()
block|{
name|this
operator|.
name|isMutable
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Throws an {@link UnsupportedOperationException} if immutable.    */
name|void
name|checkMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMutable
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Serializes the set and writes it to {@code output}.    *    *<p>For use by generated code only.    */
specifier|public
name|void
name|writeTo
parameter_list|(
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|tag
init|=
name|tags
index|[
name|i
index|]
decl_stmt|;
name|int
name|fieldNumber
init|=
name|WireFormat
operator|.
name|getTagFieldNumber
argument_list|(
name|tag
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|WireFormat
operator|.
name|getTagWireType
argument_list|(
name|tag
argument_list|)
condition|)
block|{
case|case
name|WireFormat
operator|.
name|WIRETYPE_VARINT
case|:
name|output
operator|.
name|writeUInt64
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|Long
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|WireFormat
operator|.
name|WIRETYPE_FIXED32
case|:
name|output
operator|.
name|writeFixed32
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|Integer
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|WireFormat
operator|.
name|WIRETYPE_FIXED64
case|:
name|output
operator|.
name|writeFixed64
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|Long
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|WireFormat
operator|.
name|WIRETYPE_LENGTH_DELIMITED
case|:
name|output
operator|.
name|writeBytes
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|ByteString
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|WireFormat
operator|.
name|WIRETYPE_START_GROUP
case|:
name|output
operator|.
name|writeTag
argument_list|(
name|fieldNumber
argument_list|,
name|WireFormat
operator|.
name|WIRETYPE_START_GROUP
argument_list|)
expr_stmt|;
operator|(
operator|(
name|UnknownFieldSetLite
operator|)
name|objects
index|[
name|i
index|]
operator|)
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeTag
argument_list|(
name|fieldNumber
argument_list|,
name|WireFormat
operator|.
name|WIRETYPE_END_GROUP
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|InvalidProtocolBufferException
operator|.
name|invalidWireType
argument_list|()
throw|;
block|}
block|}
block|}
comment|/**    * Serializes the set and writes it to {@code output} using {@code MessageSet} wire format.    *    *<p>For use by generated code only.    */
specifier|public
name|void
name|writeAsMessageSetTo
parameter_list|(
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fieldNumber
init|=
name|WireFormat
operator|.
name|getTagFieldNumber
argument_list|(
name|tags
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeRawMessageSetExtension
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|ByteString
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the number of bytes required to encode this field, including field number, using {@code    * MessageSet} wire format.    */
specifier|public
name|int
name|getSerializedSizeAsMessageSet
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSerializedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|size
return|;
block|}
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|tag
init|=
name|tags
index|[
name|i
index|]
decl_stmt|;
name|int
name|fieldNumber
init|=
name|WireFormat
operator|.
name|getTagFieldNumber
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|size
operator|+=
name|CodedOutputStream
operator|.
name|computeRawMessageSetExtensionSize
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|ByteString
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|memoizedSerializedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
comment|/**    * Get the number of bytes required to encode this set.    *    *<p>For use by generated code only.    */
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSerializedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|size
return|;
block|}
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|tag
init|=
name|tags
index|[
name|i
index|]
decl_stmt|;
name|int
name|fieldNumber
init|=
name|WireFormat
operator|.
name|getTagFieldNumber
argument_list|(
name|tag
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|WireFormat
operator|.
name|getTagWireType
argument_list|(
name|tag
argument_list|)
condition|)
block|{
case|case
name|WireFormat
operator|.
name|WIRETYPE_VARINT
case|:
name|size
operator|+=
name|CodedOutputStream
operator|.
name|computeUInt64Size
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|Long
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|WireFormat
operator|.
name|WIRETYPE_FIXED32
case|:
name|size
operator|+=
name|CodedOutputStream
operator|.
name|computeFixed32Size
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|Integer
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|WireFormat
operator|.
name|WIRETYPE_FIXED64
case|:
name|size
operator|+=
name|CodedOutputStream
operator|.
name|computeFixed64Size
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|Long
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|WireFormat
operator|.
name|WIRETYPE_LENGTH_DELIMITED
case|:
name|size
operator|+=
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
name|fieldNumber
argument_list|,
operator|(
name|ByteString
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|WireFormat
operator|.
name|WIRETYPE_START_GROUP
case|:
name|size
operator|+=
name|CodedOutputStream
operator|.
name|computeTagSize
argument_list|(
name|fieldNumber
argument_list|)
operator|*
literal|2
operator|+
operator|(
operator|(
name|UnknownFieldSetLite
operator|)
name|objects
index|[
name|i
index|]
operator|)
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|InvalidProtocolBufferException
operator|.
name|invalidWireType
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|memoizedSerializedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|int
index|[]
name|tags1
parameter_list|,
name|int
index|[]
name|tags2
parameter_list|,
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|tags1
index|[
name|i
index|]
operator|!=
name|tags2
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|Object
index|[]
name|objects1
parameter_list|,
name|Object
index|[]
name|objects2
parameter_list|,
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|objects1
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|objects2
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|UnknownFieldSetLite
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|UnknownFieldSetLite
name|other
init|=
operator|(
name|UnknownFieldSetLite
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|count
operator|!=
name|other
operator|.
name|count
operator|||
operator|!
name|equals
argument_list|(
name|tags
argument_list|,
name|other
operator|.
name|tags
argument_list|,
name|count
argument_list|)
operator|||
operator|!
name|equals
argument_list|(
name|objects
argument_list|,
name|other
operator|.
name|objects
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|17
decl_stmt|;
name|hashCode
operator|=
literal|31
operator|*
name|hashCode
operator|+
name|count
expr_stmt|;
name|hashCode
operator|=
literal|31
operator|*
name|hashCode
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|tags
argument_list|)
expr_stmt|;
name|hashCode
operator|=
literal|31
operator|*
name|hashCode
operator|+
name|Arrays
operator|.
name|deepHashCode
argument_list|(
name|objects
argument_list|)
expr_stmt|;
return|return
name|hashCode
return|;
block|}
comment|/**    * Prints a String representation of the unknown field set.    *    *<p>For use by generated code only.    *    * @param buffer the buffer to write to    * @param indent the number of spaces the fields should be indented by    */
specifier|final
name|void
name|printWithIndent
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|fieldNumber
init|=
name|WireFormat
operator|.
name|getTagFieldNumber
argument_list|(
name|tags
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|MessageLiteToString
operator|.
name|printField
argument_list|(
name|buffer
argument_list|,
name|indent
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|fieldNumber
argument_list|)
argument_list|,
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Package private for unsafe experimental runtime.
name|void
name|storeField
parameter_list|(
name|int
name|tag
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|ensureCapacity
argument_list|()
expr_stmt|;
name|tags
index|[
name|count
index|]
operator|=
name|tag
expr_stmt|;
name|objects
index|[
name|count
index|]
operator|=
name|value
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|/**    * Ensures that our arrays are long enough to store more metadata.    */
specifier|private
name|void
name|ensureCapacity
parameter_list|()
block|{
if|if
condition|(
name|count
operator|==
name|tags
operator|.
name|length
condition|)
block|{
name|int
name|increment
init|=
name|count
operator|<
operator|(
name|MIN_CAPACITY
operator|/
literal|2
operator|)
condition|?
name|MIN_CAPACITY
else|:
name|count
operator|>>
literal|1
decl_stmt|;
name|int
name|newLength
init|=
name|count
operator|+
name|increment
decl_stmt|;
name|tags
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|tags
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|objects
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|objects
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Parse a single field from {@code input} and merge it into this set.    *    *<p>For use by generated code only.    *    * @param tag The field's tag number, which was already parsed.    * @return {@code false} if the tag is an end group tag.    */
name|boolean
name|mergeFieldFrom
parameter_list|(
specifier|final
name|int
name|tag
parameter_list|,
specifier|final
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|checkMutable
argument_list|()
expr_stmt|;
specifier|final
name|int
name|fieldNumber
init|=
name|WireFormat
operator|.
name|getTagFieldNumber
argument_list|(
name|tag
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|WireFormat
operator|.
name|getTagWireType
argument_list|(
name|tag
argument_list|)
condition|)
block|{
case|case
name|WireFormat
operator|.
name|WIRETYPE_VARINT
case|:
name|storeField
argument_list|(
name|tag
argument_list|,
name|input
operator|.
name|readInt64
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|WireFormat
operator|.
name|WIRETYPE_FIXED32
case|:
name|storeField
argument_list|(
name|tag
argument_list|,
name|input
operator|.
name|readFixed32
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|WireFormat
operator|.
name|WIRETYPE_FIXED64
case|:
name|storeField
argument_list|(
name|tag
argument_list|,
name|input
operator|.
name|readFixed64
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|WireFormat
operator|.
name|WIRETYPE_LENGTH_DELIMITED
case|:
name|storeField
argument_list|(
name|tag
argument_list|,
name|input
operator|.
name|readBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|WireFormat
operator|.
name|WIRETYPE_START_GROUP
case|:
specifier|final
name|UnknownFieldSetLite
name|subFieldSet
init|=
operator|new
name|UnknownFieldSetLite
argument_list|()
decl_stmt|;
name|subFieldSet
operator|.
name|mergeFrom
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|input
operator|.
name|checkLastTagWas
argument_list|(
name|WireFormat
operator|.
name|makeTag
argument_list|(
name|fieldNumber
argument_list|,
name|WireFormat
operator|.
name|WIRETYPE_END_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|storeField
argument_list|(
name|tag
argument_list|,
name|subFieldSet
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|WireFormat
operator|.
name|WIRETYPE_END_GROUP
case|:
return|return
literal|false
return|;
default|default:
throw|throw
name|InvalidProtocolBufferException
operator|.
name|invalidWireType
argument_list|()
throw|;
block|}
block|}
comment|/**    * Convenience method for merging a new field containing a single varint    * value. This is used in particular when an unknown enum value is    * encountered.    *    *<p>For use by generated code only.    */
name|UnknownFieldSetLite
name|mergeVarintField
parameter_list|(
name|int
name|fieldNumber
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|checkMutable
argument_list|()
expr_stmt|;
if|if
condition|(
name|fieldNumber
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Zero is not a valid field number."
argument_list|)
throw|;
block|}
name|storeField
argument_list|(
name|WireFormat
operator|.
name|makeTag
argument_list|(
name|fieldNumber
argument_list|,
name|WireFormat
operator|.
name|WIRETYPE_VARINT
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Convenience method for merging a length-delimited field.    *    *<p>For use by generated code only.    */
name|UnknownFieldSetLite
name|mergeLengthDelimitedField
parameter_list|(
specifier|final
name|int
name|fieldNumber
parameter_list|,
specifier|final
name|ByteString
name|value
parameter_list|)
block|{
name|checkMutable
argument_list|()
expr_stmt|;
if|if
condition|(
name|fieldNumber
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Zero is not a valid field number."
argument_list|)
throw|;
block|}
name|storeField
argument_list|(
name|WireFormat
operator|.
name|makeTag
argument_list|(
name|fieldNumber
argument_list|,
name|WireFormat
operator|.
name|WIRETYPE_LENGTH_DELIMITED
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Parse an entire message from {@code input} and merge its fields into    * this set.    */
specifier|private
name|UnknownFieldSetLite
name|mergeFrom
parameter_list|(
specifier|final
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ensures initialization in mergeFieldFrom.
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|0
operator|||
operator|!
name|mergeFieldFrom
argument_list|(
name|tag
argument_list|,
name|input
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

