begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Protocol Buffers - Google's data interchange format
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.  All rights reserved.
end_comment

begin_comment
comment|// https://developers.google.com/protocol-buffers/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|OneofDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link Message} that can represent arbitrary types,  * given a {@link Descriptors.Descriptor}.  *  * @author kenton@google.com Kenton Varda  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DynamicMessage
extends|extends
name|AbstractMessage
block|{
specifier|private
specifier|final
name|Descriptor
name|type
decl_stmt|;
specifier|private
specifier|final
name|FieldSet
argument_list|<
name|FieldDescriptor
argument_list|>
name|fields
decl_stmt|;
specifier|private
specifier|final
name|FieldDescriptor
index|[]
name|oneofCases
decl_stmt|;
specifier|private
specifier|final
name|UnknownFieldSet
name|unknownFields
decl_stmt|;
specifier|private
name|int
name|memoizedSize
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Construct a {@code DynamicMessage} using the given {@code FieldSet}.    * oneofCases stores the FieldDescriptor for each oneof to indicate    * which field is set. Caller should make sure the array is immutable.    *    * This constructor is package private and will be used in    * {@code DynamicMutableMessage} to convert a mutable message to an immutable    * message.    */
name|DynamicMessage
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|FieldSet
argument_list|<
name|FieldDescriptor
argument_list|>
name|fields
parameter_list|,
name|FieldDescriptor
index|[]
name|oneofCases
parameter_list|,
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|oneofCases
operator|=
name|oneofCases
expr_stmt|;
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
expr_stmt|;
block|}
comment|/**    * Get a {@code DynamicMessage} representing the default instance of the    * given type.    */
specifier|public
specifier|static
name|DynamicMessage
name|getDefaultInstance
parameter_list|(
name|Descriptor
name|type
parameter_list|)
block|{
name|int
name|oneofDeclCount
init|=
name|type
operator|.
name|toProto
argument_list|()
operator|.
name|getOneofDeclCount
argument_list|()
decl_stmt|;
name|FieldDescriptor
index|[]
name|oneofCases
init|=
operator|new
name|FieldDescriptor
index|[
name|oneofDeclCount
index|]
decl_stmt|;
return|return
operator|new
name|DynamicMessage
argument_list|(
name|type
argument_list|,
name|FieldSet
operator|.
expr|<
name|FieldDescriptor
operator|>
name|emptySet
argument_list|()
argument_list|,
name|oneofCases
argument_list|,
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/** Parse a message of the given type from the given input stream. */
specifier|public
specifier|static
name|DynamicMessage
name|parseFrom
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newBuilder
argument_list|(
name|type
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|input
argument_list|)
operator|.
name|buildParsed
argument_list|()
return|;
block|}
comment|/** Parse a message of the given type from the given input stream. */
specifier|public
specifier|static
name|DynamicMessage
name|parseFrom
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistry
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newBuilder
argument_list|(
name|type
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
operator|.
name|buildParsed
argument_list|()
return|;
block|}
comment|/** Parse {@code data} as a message of the given type and return it. */
specifier|public
specifier|static
name|DynamicMessage
name|parseFrom
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|ByteString
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|newBuilder
argument_list|(
name|type
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|)
operator|.
name|buildParsed
argument_list|()
return|;
block|}
comment|/** Parse {@code data} as a message of the given type and return it. */
specifier|public
specifier|static
name|DynamicMessage
name|parseFrom
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|ByteString
name|data
parameter_list|,
name|ExtensionRegistry
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|newBuilder
argument_list|(
name|type
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
operator|.
name|buildParsed
argument_list|()
return|;
block|}
comment|/** Parse {@code data} as a message of the given type and return it. */
specifier|public
specifier|static
name|DynamicMessage
name|parseFrom
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|newBuilder
argument_list|(
name|type
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|)
operator|.
name|buildParsed
argument_list|()
return|;
block|}
comment|/** Parse {@code data} as a message of the given type and return it. */
specifier|public
specifier|static
name|DynamicMessage
name|parseFrom
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|ExtensionRegistry
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|newBuilder
argument_list|(
name|type
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
operator|.
name|buildParsed
argument_list|()
return|;
block|}
comment|/** Parse a message of the given type from {@code input} and return it. */
specifier|public
specifier|static
name|DynamicMessage
name|parseFrom
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newBuilder
argument_list|(
name|type
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|input
argument_list|)
operator|.
name|buildParsed
argument_list|()
return|;
block|}
comment|/** Parse a message of the given type from {@code input} and return it. */
specifier|public
specifier|static
name|DynamicMessage
name|parseFrom
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|InputStream
name|input
parameter_list|,
name|ExtensionRegistry
name|extensionRegistry
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newBuilder
argument_list|(
name|type
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
operator|.
name|buildParsed
argument_list|()
return|;
block|}
comment|/** Construct a {@link Message.Builder} for the given type. */
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|Descriptor
name|type
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Construct a {@link Message.Builder} for a message of the same type as    * {@code prototype}, and initialize it with {@code prototype}'s contents.    */
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|Message
name|prototype
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|prototype
operator|.
name|getDescriptorForType
argument_list|()
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
comment|// -----------------------------------------------------------------
comment|// Implementation of Message interface.
annotation|@
name|Override
specifier|public
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|DynamicMessage
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|getDefaultInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|getAllFields
parameter_list|()
block|{
return|return
name|fields
operator|.
name|getAllFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOneof
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
name|verifyOneofContainingType
argument_list|(
name|oneof
argument_list|)
expr_stmt|;
name|FieldDescriptor
name|field
init|=
name|oneofCases
index|[
name|oneof
operator|.
name|getIndex
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldDescriptor
name|getOneofFieldDescriptor
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
name|verifyOneofContainingType
argument_list|(
name|oneof
argument_list|)
expr_stmt|;
return|return
name|oneofCases
index|[
name|oneof
operator|.
name|getIndex
argument_list|()
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|fields
operator|.
name|hasField
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|fields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
name|result
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getJavaType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
name|result
operator|=
name|getDefaultInstance
argument_list|(
name|field
operator|.
name|getMessageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|field
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRepeatedFieldCount
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|fields
operator|.
name|getRepeatedFieldCount
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getRepeatedField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|fields
operator|.
name|getRepeatedField
argument_list|(
name|field
argument_list|,
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|unknownFields
return|;
block|}
specifier|static
name|boolean
name|isInitialized
parameter_list|(
name|Descriptor
name|type
parameter_list|,
name|FieldSet
argument_list|<
name|FieldDescriptor
argument_list|>
name|fields
parameter_list|)
block|{
comment|// Check that all required fields are present.
for|for
control|(
specifier|final
name|FieldDescriptor
name|field
range|:
name|type
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isRequired
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|fields
operator|.
name|hasField
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// Check that embedded messages are initialized.
return|return
name|fields
operator|.
name|isInitialized
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|isInitialized
argument_list|(
name|type
argument_list|,
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|.
name|getOptions
argument_list|()
operator|.
name|getMessageSetWireFormat
argument_list|()
condition|)
block|{
name|fields
operator|.
name|writeMessageSetTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|unknownFields
operator|.
name|writeAsMessageSetTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|unknownFields
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
if|if
condition|(
name|type
operator|.
name|getOptions
argument_list|()
operator|.
name|getMessageSetWireFormat
argument_list|()
condition|)
block|{
name|size
operator|=
name|fields
operator|.
name|getMessageSetSerializedSize
argument_list|()
expr_stmt|;
name|size
operator|+=
name|unknownFields
operator|.
name|getSerializedSizeAsMessageSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
name|fields
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|size
operator|+=
name|unknownFields
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
block|}
name|memoizedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|newBuilderForType
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Parser
argument_list|<
name|DynamicMessage
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
operator|new
name|AbstractParser
argument_list|<
name|DynamicMessage
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DynamicMessage
name|parsePartialFrom
parameter_list|(
name|CodedInputStream
name|input
parameter_list|,
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|Builder
name|builder
init|=
name|newBuilder
argument_list|(
name|type
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|mergeFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|builder
operator|.
name|buildPartial
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidProtocolBufferException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|builder
operator|.
name|buildPartial
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|builder
operator|.
name|buildPartial
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/** Verifies that the field is a field of this message. */
specifier|private
name|void
name|verifyContainingType
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getContainingType
argument_list|()
operator|!=
name|type
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FieldDescriptor does not match message type."
argument_list|)
throw|;
block|}
block|}
comment|/** Verifies that the oneof is an oneof of this message. */
specifier|private
name|void
name|verifyOneofContainingType
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
if|if
condition|(
name|oneof
operator|.
name|getContainingType
argument_list|()
operator|!=
name|type
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OneofDescriptor does not match message type."
argument_list|)
throw|;
block|}
block|}
comment|// =================================================================
comment|/**    * Builder for {@link DynamicMessage}s.    */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|AbstractMessage
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
block|{
specifier|private
specifier|final
name|Descriptor
name|type
decl_stmt|;
specifier|private
name|FieldSet
argument_list|<
name|FieldDescriptor
argument_list|>
name|fields
decl_stmt|;
specifier|private
specifier|final
name|FieldDescriptor
index|[]
name|oneofCases
decl_stmt|;
specifier|private
name|UnknownFieldSet
name|unknownFields
decl_stmt|;
comment|/** Construct a {@code Builder} for the given type. */
specifier|private
name|Builder
parameter_list|(
name|Descriptor
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|FieldSet
operator|.
name|newFieldSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|unknownFields
operator|=
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|oneofCases
operator|=
operator|new
name|FieldDescriptor
index|[
name|type
operator|.
name|toProto
argument_list|()
operator|.
name|getOneofDeclCount
argument_list|()
index|]
expr_stmt|;
block|}
comment|// ---------------------------------------------------------------
comment|// Implementation of Message.Builder interface.
annotation|@
name|Override
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
if|if
condition|(
name|fields
operator|.
name|isImmutable
argument_list|()
condition|)
block|{
name|fields
operator|=
name|FieldSet
operator|.
name|newFieldSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|unknownFields
operator|=
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|DynamicMessage
condition|)
block|{
comment|// This should be somewhat faster than calling super.mergeFrom().
name|DynamicMessage
name|otherDynamicMessage
init|=
operator|(
name|DynamicMessage
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|otherDynamicMessage
operator|.
name|type
operator|!=
name|type
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mergeFrom(Message) can only merge messages of the same type."
argument_list|)
throw|;
block|}
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|fields
operator|.
name|mergeFrom
argument_list|(
name|otherDynamicMessage
operator|.
name|fields
argument_list|)
expr_stmt|;
name|mergeUnknownFields
argument_list|(
name|otherDynamicMessage
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oneofCases
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oneofCases
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|oneofCases
index|[
name|i
index|]
operator|=
name|otherDynamicMessage
operator|.
name|oneofCases
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|otherDynamicMessage
operator|.
name|oneofCases
index|[
name|i
index|]
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|oneofCases
index|[
name|i
index|]
operator|!=
name|otherDynamicMessage
operator|.
name|oneofCases
index|[
name|i
index|]
operator|)
condition|)
block|{
name|fields
operator|.
name|clearField
argument_list|(
name|oneofCases
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|oneofCases
index|[
name|i
index|]
operator|=
name|otherDynamicMessage
operator|.
name|oneofCases
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DynamicMessage
name|build
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
operator|new
name|DynamicMessage
argument_list|(
name|type
argument_list|,
name|fields
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|copyOf
argument_list|(
name|oneofCases
argument_list|,
name|oneofCases
operator|.
name|length
argument_list|)
argument_list|,
name|unknownFields
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|buildPartial
argument_list|()
return|;
block|}
comment|/**      * Helper for DynamicMessage.parseFrom() methods to call.  Throws      * {@link InvalidProtocolBufferException} instead of      * {@link UninitializedMessageException}.      */
specifier|private
name|DynamicMessage
name|buildParsed
parameter_list|()
throws|throws
name|InvalidProtocolBufferException
block|{
if|if
condition|(
operator|!
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
operator|new
name|DynamicMessage
argument_list|(
name|type
argument_list|,
name|fields
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|copyOf
argument_list|(
name|oneofCases
argument_list|,
name|oneofCases
operator|.
name|length
argument_list|)
argument_list|,
name|unknownFields
argument_list|)
argument_list|)
operator|.
name|asInvalidProtocolBufferException
argument_list|()
throw|;
block|}
return|return
name|buildPartial
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DynamicMessage
name|buildPartial
parameter_list|()
block|{
name|fields
operator|.
name|makeImmutable
argument_list|()
expr_stmt|;
name|DynamicMessage
name|result
init|=
operator|new
name|DynamicMessage
argument_list|(
name|type
argument_list|,
name|fields
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|copyOf
argument_list|(
name|oneofCases
argument_list|,
name|oneofCases
operator|.
name|length
argument_list|)
argument_list|,
name|unknownFields
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
name|Builder
name|result
init|=
operator|new
name|Builder
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|result
operator|.
name|fields
operator|.
name|mergeFrom
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|result
operator|.
name|mergeUnknownFields
argument_list|(
name|unknownFields
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oneofCases
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|oneofCases
argument_list|,
literal|0
argument_list|,
name|oneofCases
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|DynamicMessage
operator|.
name|isInitialized
argument_list|(
name|type
argument_list|,
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|DynamicMessage
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|getDefaultInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|FieldDescriptor
argument_list|,
name|Object
argument_list|>
name|getAllFields
parameter_list|()
block|{
return|return
name|fields
operator|.
name|getAllFields
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|newBuilderForField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getJavaType
argument_list|()
operator|!=
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"newBuilderForField is only valid for fields with message type."
argument_list|)
throw|;
block|}
return|return
operator|new
name|Builder
argument_list|(
name|field
operator|.
name|getMessageType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOneof
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
name|verifyOneofContainingType
argument_list|(
name|oneof
argument_list|)
expr_stmt|;
name|FieldDescriptor
name|field
init|=
name|oneofCases
index|[
name|oneof
operator|.
name|getIndex
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldDescriptor
name|getOneofFieldDescriptor
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
name|verifyOneofContainingType
argument_list|(
name|oneof
argument_list|)
expr_stmt|;
return|return
name|oneofCases
index|[
name|oneof
operator|.
name|getIndex
argument_list|()
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|clearOneof
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
name|verifyOneofContainingType
argument_list|(
name|oneof
argument_list|)
expr_stmt|;
name|FieldDescriptor
name|field
init|=
name|oneofCases
index|[
name|oneof
operator|.
name|getIndex
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|fields
operator|.
name|hasField
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|fields
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
name|result
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getJavaType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
condition|)
block|{
name|result
operator|=
name|getDefaultInstance
argument_list|(
name|field
operator|.
name|getMessageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|field
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|setField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|ensureIsMutable
argument_list|()
expr_stmt|;
comment|// TODO(xiaofeng): This check should really be put in FieldSet.setField()
comment|// where all other such checks are done. However, currently
comment|// FieldSet.setField() permits Integer value for enum fields probably
comment|// because of some internal features we support. Should figure it out
comment|// and move this check to a more appropriate place.
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldDescriptor
operator|.
name|Type
operator|.
name|ENUM
condition|)
block|{
name|ensureEnumValueDescriptor
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|OneofDescriptor
name|oneofDescriptor
init|=
name|field
operator|.
name|getContainingOneof
argument_list|()
decl_stmt|;
if|if
condition|(
name|oneofDescriptor
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|oneofDescriptor
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|FieldDescriptor
name|oldField
init|=
name|oneofCases
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|oldField
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|oldField
operator|!=
name|field
operator|)
condition|)
block|{
name|fields
operator|.
name|clearField
argument_list|(
name|oldField
argument_list|)
expr_stmt|;
block|}
name|oneofCases
index|[
name|index
index|]
operator|=
name|field
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getFile
argument_list|()
operator|.
name|getSyntax
argument_list|()
operator|==
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|Syntax
operator|.
name|PROTO3
condition|)
block|{
if|if
condition|(
operator|!
name|field
operator|.
name|isRepeated
argument_list|()
operator|&&
name|field
operator|.
name|getJavaType
argument_list|()
operator|!=
name|FieldDescriptor
operator|.
name|JavaType
operator|.
name|MESSAGE
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
comment|// In proto3, setting a field to its default value is equivalent to clearing the field.
name|fields
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
name|fields
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|clearField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|OneofDescriptor
name|oneofDescriptor
init|=
name|field
operator|.
name|getContainingOneof
argument_list|()
decl_stmt|;
if|if
condition|(
name|oneofDescriptor
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|oneofDescriptor
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|oneofCases
index|[
name|index
index|]
operator|==
name|field
condition|)
block|{
name|oneofCases
index|[
name|index
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRepeatedFieldCount
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|fields
operator|.
name|getRepeatedFieldCount
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getRepeatedField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|fields
operator|.
name|getRepeatedField
argument_list|(
name|field
argument_list|,
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|setRepeatedField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|fields
operator|.
name|setRepeatedField
argument_list|(
name|field
argument_list|,
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|addRepeatedField
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|verifyContainingType
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|ensureIsMutable
argument_list|()
expr_stmt|;
name|fields
operator|.
name|addRepeatedField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|unknownFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|setUnknownFields
parameter_list|(
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
if|if
condition|(
name|getDescriptorForType
argument_list|()
operator|.
name|getFile
argument_list|()
operator|.
name|getSyntax
argument_list|()
operator|==
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|Syntax
operator|.
name|PROTO3
condition|)
block|{
comment|// Proto3 discards unknown fields.
return|return
name|this
return|;
block|}
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|mergeUnknownFields
parameter_list|(
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
if|if
condition|(
name|getDescriptorForType
argument_list|()
operator|.
name|getFile
argument_list|()
operator|.
name|getSyntax
argument_list|()
operator|==
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|Syntax
operator|.
name|PROTO3
condition|)
block|{
comment|// Proto3 discards unknown fields.
return|return
name|this
return|;
block|}
name|this
operator|.
name|unknownFields
operator|=
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|(
name|this
operator|.
name|unknownFields
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|unknownFields
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Verifies that the field is a field of this message. */
specifier|private
name|void
name|verifyContainingType
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getContainingType
argument_list|()
operator|!=
name|type
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FieldDescriptor does not match message type."
argument_list|)
throw|;
block|}
block|}
comment|/** Verifies that the oneof is an oneof of this message. */
specifier|private
name|void
name|verifyOneofContainingType
parameter_list|(
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
if|if
condition|(
name|oneof
operator|.
name|getContainingType
argument_list|()
operator|!=
name|type
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OneofDescriptor does not match message type."
argument_list|)
throw|;
block|}
block|}
comment|/** Verifies that the value is EnumValueDescriptor and matches Enum Type. */
specifier|private
name|void
name|ensureSingularEnumValueDescriptor
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|EnumValueDescriptor
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"DynamicMessage should use EnumValueDescriptor to set Enum Value."
argument_list|)
throw|;
block|}
comment|// TODO(xiaofeng): Re-enable this check after Orgstore is fixed to not
comment|// set incorrect EnumValueDescriptors.
comment|// EnumDescriptor fieldType = field.getEnumType();
comment|// EnumDescriptor fieldValueType = ((EnumValueDescriptor) value).getType();
comment|// if (fieldType != fieldValueType) {
comment|//  throw new IllegalArgumentException(String.format(
comment|//      "EnumDescriptor %s of field doesn't match EnumDescriptor %s of field value",
comment|//      fieldType.getFullName(), fieldValueType.getFullName()));
comment|// }
block|}
comment|/** Verifies the value for an enum field. */
specifier|private
name|void
name|ensureEnumValueDescriptor
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|isRepeated
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|item
range|:
operator|(
name|List
operator|)
name|value
control|)
block|{
name|ensureSingularEnumValueDescriptor
argument_list|(
name|field
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ensureSingularEnumValueDescriptor
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|ensureIsMutable
parameter_list|()
block|{
if|if
condition|(
name|fields
operator|.
name|isImmutable
argument_list|()
condition|)
block|{
name|fields
operator|=
name|fields
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|Builder
name|getFieldBuilder
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|)
block|{
comment|// TODO(xiangl): need implementation for dynamic message
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getFieldBuilder() called on a dynamic message type."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|Builder
name|getRepeatedFieldBuilder
parameter_list|(
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getRepeatedFieldBuilder() called on a dynamic message type."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

