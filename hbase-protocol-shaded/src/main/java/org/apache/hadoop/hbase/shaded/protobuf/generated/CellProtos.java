begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Generated by the protocol buffer compiler.  DO NOT EDIT!
end_comment

begin_comment
comment|// source: Cell.proto
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
package|;
end_package

begin_class
specifier|public
specifier|final
class|class
name|CellProtos
block|{
specifier|private
name|CellProtos
parameter_list|()
block|{}
specifier|public
specifier|static
name|void
name|registerAllExtensions
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|registry
parameter_list|)
block|{   }
specifier|public
specifier|static
name|void
name|registerAllExtensions
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistry
name|registry
parameter_list|)
block|{
name|registerAllExtensions
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
operator|)
name|registry
argument_list|)
expr_stmt|;
block|}
comment|/**    *<pre>    **    * The type of the key in a Cell    *</pre>    *    * Protobuf enum {@code hbase.pb.CellType}    */
specifier|public
enum|enum
name|CellType
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ProtocolMessageEnum
block|{
comment|/**      *<code>MINIMUM = 0;</code>      */
name|MINIMUM
argument_list|(
literal|0
argument_list|)
block|,
comment|/**      *<code>PUT = 4;</code>      */
name|PUT
argument_list|(
literal|4
argument_list|)
block|,
comment|/**      *<code>DELETE = 8;</code>      */
name|DELETE
argument_list|(
literal|8
argument_list|)
block|,
comment|/**      *<code>DELETE_COLUMN = 12;</code>      */
name|DELETE_COLUMN
argument_list|(
literal|12
argument_list|)
block|,
comment|/**      *<code>DELETE_FAMILY = 14;</code>      */
name|DELETE_FAMILY
argument_list|(
literal|14
argument_list|)
block|,
comment|/**      *<pre>      * MAXIMUM is used when searching; you look from maximum on down.      *</pre>      *      *<code>MAXIMUM = 255;</code>      */
name|MAXIMUM
argument_list|(
literal|255
argument_list|)
block|,     ;
comment|/**      *<code>MINIMUM = 0;</code>      */
specifier|public
specifier|static
specifier|final
name|int
name|MINIMUM_VALUE
init|=
literal|0
decl_stmt|;
comment|/**      *<code>PUT = 4;</code>      */
specifier|public
specifier|static
specifier|final
name|int
name|PUT_VALUE
init|=
literal|4
decl_stmt|;
comment|/**      *<code>DELETE = 8;</code>      */
specifier|public
specifier|static
specifier|final
name|int
name|DELETE_VALUE
init|=
literal|8
decl_stmt|;
comment|/**      *<code>DELETE_COLUMN = 12;</code>      */
specifier|public
specifier|static
specifier|final
name|int
name|DELETE_COLUMN_VALUE
init|=
literal|12
decl_stmt|;
comment|/**      *<code>DELETE_FAMILY = 14;</code>      */
specifier|public
specifier|static
specifier|final
name|int
name|DELETE_FAMILY_VALUE
init|=
literal|14
decl_stmt|;
comment|/**      *<pre>      * MAXIMUM is used when searching; you look from maximum on down.      *</pre>      *      *<code>MAXIMUM = 255;</code>      */
specifier|public
specifier|static
specifier|final
name|int
name|MAXIMUM_VALUE
init|=
literal|255
decl_stmt|;
specifier|public
specifier|final
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * @deprecated Use {@link #forNumber(int)} instead.      */
annotation|@
name|java
operator|.
name|lang
operator|.
name|Deprecated
specifier|public
specifier|static
name|CellType
name|valueOf
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|forNumber
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CellType
name|forNumber
parameter_list|(
name|int
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|0
case|:
return|return
name|MINIMUM
return|;
case|case
literal|4
case|:
return|return
name|PUT
return|;
case|case
literal|8
case|:
return|return
name|DELETE
return|;
case|case
literal|12
case|:
return|return
name|DELETE_COLUMN
return|;
case|case
literal|14
case|:
return|return
name|DELETE_FAMILY
return|;
case|case
literal|255
case|:
return|return
name|MAXIMUM
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|CellType
argument_list|>
name|internalGetValueMap
parameter_list|()
block|{
return|return
name|internalValueMap
return|;
block|}
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|CellType
argument_list|>
name|internalValueMap
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|CellType
argument_list|>
argument_list|()
block|{
specifier|public
name|CellType
name|findValueByNumber
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
name|CellType
operator|.
name|forNumber
argument_list|(
name|number
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
name|getValueDescriptor
parameter_list|()
block|{
return|return
name|getDescriptor
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|ordinal
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumDescriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|getDescriptor
argument_list|()
return|;
block|}
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumDescriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getEnumTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|CellType
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|CellType
name|valueOf
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|.
name|getType
argument_list|()
operator|!=
name|getDescriptor
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"EnumValueDescriptor is not for this type."
argument_list|)
throw|;
block|}
return|return
name|VALUES
index|[
name|desc
operator|.
name|getIndex
argument_list|()
index|]
return|;
block|}
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
specifier|private
name|CellType
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|// @@protoc_insertion_point(enum_scope:hbase.pb.CellType)
block|}
specifier|public
interface|interface
name|CellOrBuilder
extends|extends
comment|// @@protoc_insertion_point(interface_extends:hbase.pb.Cell)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
block|{
comment|/**      *<code>optional bytes row = 1;</code>      */
name|boolean
name|hasRow
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes row = 1;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getRow
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes family = 2;</code>      */
name|boolean
name|hasFamily
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes family = 2;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFamily
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes qualifier = 3;</code>      */
name|boolean
name|hasQualifier
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes qualifier = 3;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getQualifier
parameter_list|()
function_decl|;
comment|/**      *<code>optional uint64 timestamp = 4;</code>      */
name|boolean
name|hasTimestamp
parameter_list|()
function_decl|;
comment|/**      *<code>optional uint64 timestamp = 4;</code>      */
name|long
name|getTimestamp
parameter_list|()
function_decl|;
comment|/**      *<code>optional .hbase.pb.CellType cell_type = 5;</code>      */
name|boolean
name|hasCellType
parameter_list|()
function_decl|;
comment|/**      *<code>optional .hbase.pb.CellType cell_type = 5;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|getCellType
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes value = 6;</code>      */
name|boolean
name|hasValue
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes value = 6;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValue
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes tags = 7;</code>      */
name|boolean
name|hasTags
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes tags = 7;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getTags
parameter_list|()
function_decl|;
block|}
comment|/**    *<pre>    **    * Protocol buffer version of Cell.    *</pre>    *    * Protobuf type {@code hbase.pb.Cell}    */
specifier|public
specifier|static
specifier|final
class|class
name|Cell
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
implements|implements
comment|// @@protoc_insertion_point(message_implements:hbase.pb.Cell)
name|CellOrBuilder
block|{
comment|// Use Cell.newBuilder() to construct.
specifier|private
name|Cell
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Cell
parameter_list|()
block|{
name|row_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|family_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|qualifier_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|timestamp_
operator|=
literal|0L
expr_stmt|;
name|cellType_
operator|=
literal|0
expr_stmt|;
name|value_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|tags_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|unknownFields
return|;
block|}
specifier|private
name|Cell
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
name|this
argument_list|()
expr_stmt|;
name|int
name|mutable_bitField0_
init|=
literal|0
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tag
condition|)
block|{
case|case
literal|0
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
if|if
condition|(
operator|!
name|parseUnknownField
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|10
case|:
block|{
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|row_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|18
case|:
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|family_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|26
case|:
block|{
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|qualifier_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|32
case|:
block|{
name|bitField0_
operator||=
literal|0x00000008
expr_stmt|;
name|timestamp_
operator|=
name|input
operator|.
name|readUInt64
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|40
case|:
block|{
name|int
name|rawValue
init|=
name|input
operator|.
name|readEnum
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|value
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|rawValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unknownFields
operator|.
name|mergeVarintField
argument_list|(
literal|5
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bitField0_
operator||=
literal|0x00000010
expr_stmt|;
name|cellType_
operator|=
name|rawValue
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|50
case|:
block|{
name|bitField0_
operator||=
literal|0x00000020
expr_stmt|;
name|value_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|58
case|:
block|{
name|bitField0_
operator||=
literal|0x00000040
expr_stmt|;
name|tags_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
argument_list|(
name|e
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
operator|.
name|build
argument_list|()
expr_stmt|;
name|makeExtensionsImmutable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_Cell_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_Cell_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ROW_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|row_
decl_stmt|;
comment|/**      *<code>optional bytes row = 1;</code>      */
specifier|public
name|boolean
name|hasRow
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**      *<code>optional bytes row = 1;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getRow
parameter_list|()
block|{
return|return
name|row_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|FAMILY_FIELD_NUMBER
init|=
literal|2
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|family_
decl_stmt|;
comment|/**      *<code>optional bytes family = 2;</code>      */
specifier|public
name|boolean
name|hasFamily
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**      *<code>optional bytes family = 2;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFamily
parameter_list|()
block|{
return|return
name|family_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|QUALIFIER_FIELD_NUMBER
init|=
literal|3
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|qualifier_
decl_stmt|;
comment|/**      *<code>optional bytes qualifier = 3;</code>      */
specifier|public
name|boolean
name|hasQualifier
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
return|;
block|}
comment|/**      *<code>optional bytes qualifier = 3;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|TIMESTAMP_FIELD_NUMBER
init|=
literal|4
decl_stmt|;
specifier|private
name|long
name|timestamp_
decl_stmt|;
comment|/**      *<code>optional uint64 timestamp = 4;</code>      */
specifier|public
name|boolean
name|hasTimestamp
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
return|;
block|}
comment|/**      *<code>optional uint64 timestamp = 4;</code>      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|CELL_TYPE_FIELD_NUMBER
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|cellType_
decl_stmt|;
comment|/**      *<code>optional .hbase.pb.CellType cell_type = 5;</code>      */
specifier|public
name|boolean
name|hasCellType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
return|;
block|}
comment|/**      *<code>optional .hbase.pb.CellType cell_type = 5;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|getCellType
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|result
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|cellType_
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|MINIMUM
else|:
name|result
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|VALUE_FIELD_NUMBER
init|=
literal|6
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value_
decl_stmt|;
comment|/**      *<code>optional bytes value = 6;</code>      */
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
return|;
block|}
comment|/**      *<code>optional bytes value = 6;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValue
parameter_list|()
block|{
return|return
name|value_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|TAGS_FIELD_NUMBER
init|=
literal|7
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|tags_
decl_stmt|;
comment|/**      *<code>optional bytes tags = 7;</code>      */
specifier|public
name|boolean
name|hasTags
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
return|;
block|}
comment|/**      *<code>optional bytes tags = 7;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getTags
parameter_list|()
block|{
return|return
name|tags_
return|;
block|}
specifier|private
name|byte
name|memoizedIsInitialized
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
name|byte
name|isInitialized
init|=
name|memoizedIsInitialized
decl_stmt|;
if|if
condition|(
name|isInitialized
operator|==
literal|1
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|isInitialized
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|memoizedIsInitialized
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|1
argument_list|,
name|row_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|2
argument_list|,
name|family_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|3
argument_list|,
name|qualifier_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|output
operator|.
name|writeUInt64
argument_list|(
literal|4
argument_list|,
name|timestamp_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|output
operator|.
name|writeEnum
argument_list|(
literal|5
argument_list|,
name|cellType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|6
argument_list|,
name|value_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|7
argument_list|,
name|tags_
argument_list|)
expr_stmt|;
block|}
name|unknownFields
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|1
argument_list|,
name|row_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|2
argument_list|,
name|family_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|3
argument_list|,
name|qualifier_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeUInt64Size
argument_list|(
literal|4
argument_list|,
name|timestamp_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeEnumSize
argument_list|(
literal|5
argument_list|,
name|cellType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|6
argument_list|,
name|value_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|7
argument_list|,
name|tags_
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|unknownFields
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|memoizedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|java
operator|.
name|lang
operator|.
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|)
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|other
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|)
name|obj
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|=
name|result
operator|&&
operator|(
name|hasRow
argument_list|()
operator|==
name|other
operator|.
name|hasRow
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasRow
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getRow
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasFamily
argument_list|()
operator|==
name|other
operator|.
name|hasFamily
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasFamily
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getFamily
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasQualifier
argument_list|()
operator|==
name|other
operator|.
name|hasQualifier
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasQualifier
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasTimestamp
argument_list|()
operator|==
name|other
operator|.
name|hasTimestamp
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasTimestamp
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
operator|(
name|getTimestamp
argument_list|()
operator|==
name|other
operator|.
name|getTimestamp
argument_list|()
operator|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasCellType
argument_list|()
operator|==
name|other
operator|.
name|hasCellType
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasCellType
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|cellType_
operator|==
name|other
operator|.
name|cellType_
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasValue
argument_list|()
operator|==
name|other
operator|.
name|hasValue
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasValue
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasTags
argument_list|()
operator|==
name|other
operator|.
name|hasTags
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasTags
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getTags
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
name|unknownFields
operator|.
name|equals
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|memoizedHashCode
operator|!=
literal|0
condition|)
block|{
return|return
name|memoizedHashCode
return|;
block|}
name|int
name|hash
init|=
literal|41
decl_stmt|;
name|hash
operator|=
operator|(
literal|19
operator|*
name|hash
operator|)
operator|+
name|getDescriptorForType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasRow
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|ROW_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getRow
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasFamily
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|FAMILY_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getFamily
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasQualifier
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|QUALIFIER_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getQualifier
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasTimestamp
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|TIMESTAMP_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|hashLong
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasCellType
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|CELL_TYPE_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|cellType_
expr_stmt|;
block|}
if|if
condition|(
name|hasValue
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|VALUE_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getValue
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasTags
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|TAGS_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getTags
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|hash
operator|=
operator|(
literal|29
operator|*
name|hash
operator|)
operator|+
name|unknownFields
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|memoizedHashCode
operator|=
name|hash
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|prototype
parameter_list|)
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|this
operator|==
name|DEFAULT_INSTANCE
condition|?
operator|new
name|Builder
argument_list|()
else|:
operator|new
name|Builder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|Builder
name|newBuilderForType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      *<pre>      **      * Protocol buffer version of Cell.      *</pre>      *      * Protobuf type {@code hbase.pb.Cell}      */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
implements|implements
comment|// @@protoc_insertion_point(builder_implements:hbase.pb.Cell)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellOrBuilder
block|{
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_Cell_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_Cell_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Construct using org.apache.hadoop.hbase.shaded.protobuf.generated.CellProtos.Cell.newBuilder()
specifier|private
name|Builder
parameter_list|()
block|{
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeForceBuilderInitialization
parameter_list|()
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|alwaysUseFieldBuilders
condition|)
block|{         }
block|}
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|row_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|family_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|qualifier_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|timestamp_
operator|=
literal|0L
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000008
operator|)
expr_stmt|;
name|cellType_
operator|=
literal|0
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000010
operator|)
expr_stmt|;
name|value_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000020
operator|)
expr_stmt|;
name|tags_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000040
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_Cell_descriptor
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|build
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|buildPartial
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|from_bitField0_
init|=
name|bitField0_
decl_stmt|;
name|int
name|to_bitField0_
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|result
operator|.
name|row_
operator|=
name|row_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000002
expr_stmt|;
block|}
name|result
operator|.
name|family_
operator|=
name|family_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
name|result
operator|.
name|qualifier_
operator|=
name|qualifier_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000008
expr_stmt|;
block|}
name|result
operator|.
name|timestamp_
operator|=
name|timestamp_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000010
expr_stmt|;
block|}
name|result
operator|.
name|cellType_
operator|=
name|cellType_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000020
expr_stmt|;
block|}
name|result
operator|.
name|value_
operator|=
name|value_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000040
expr_stmt|;
block|}
name|result
operator|.
name|tags_
operator|=
name|tags_
expr_stmt|;
name|result
operator|.
name|bitField0_
operator|=
name|to_bitField0_
expr_stmt|;
name|onBuilt
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|setField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearOneof
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearOneof
argument_list|(
name|oneof
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|setRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setRepeatedField
argument_list|(
name|field
argument_list|,
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|addRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|addRepeatedField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
condition|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|.
name|getDefaultInstance
argument_list|()
condition|)
return|return
name|this
return|;
if|if
condition|(
name|other
operator|.
name|hasRow
argument_list|()
condition|)
block|{
name|setRow
argument_list|(
name|other
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|setFamily
argument_list|(
name|other
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|setQualifier
argument_list|(
name|other
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|setTimestamp
argument_list|(
name|other
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasCellType
argument_list|()
condition|)
block|{
name|setCellType
argument_list|(
name|other
operator|.
name|getCellType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|setTags
argument_list|(
name|other
operator|.
name|getTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|parsedMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedMessage
operator|=
name|PARSER
operator|.
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|parsedMessage
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
operator|)
name|e
operator|.
name|getUnfinishedMessage
argument_list|()
expr_stmt|;
throw|throw
name|e
operator|.
name|unwrapIOException
argument_list|()
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parsedMessage
operator|!=
literal|null
condition|)
block|{
name|mergeFrom
argument_list|(
name|parsedMessage
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|row_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>optional bytes row = 1;</code>        */
specifier|public
name|boolean
name|hasRow
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**        *<code>optional bytes row = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getRow
parameter_list|()
block|{
return|return
name|row_
return|;
block|}
comment|/**        *<code>optional bytes row = 1;</code>        */
specifier|public
name|Builder
name|setRow
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|row_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bytes row = 1;</code>        */
specifier|public
name|Builder
name|clearRow
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|row_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|family_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>optional bytes family = 2;</code>        */
specifier|public
name|boolean
name|hasFamily
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**        *<code>optional bytes family = 2;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFamily
parameter_list|()
block|{
return|return
name|family_
return|;
block|}
comment|/**        *<code>optional bytes family = 2;</code>        */
specifier|public
name|Builder
name|setFamily
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|family_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bytes family = 2;</code>        */
specifier|public
name|Builder
name|clearFamily
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|family_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getFamily
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|qualifier_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>optional bytes qualifier = 3;</code>        */
specifier|public
name|boolean
name|hasQualifier
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
return|;
block|}
comment|/**        *<code>optional bytes qualifier = 3;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier_
return|;
block|}
comment|/**        *<code>optional bytes qualifier = 3;</code>        */
specifier|public
name|Builder
name|setQualifier
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|qualifier_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bytes qualifier = 3;</code>        */
specifier|public
name|Builder
name|clearQualifier
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|qualifier_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getQualifier
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|long
name|timestamp_
decl_stmt|;
comment|/**        *<code>optional uint64 timestamp = 4;</code>        */
specifier|public
name|boolean
name|hasTimestamp
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
return|;
block|}
comment|/**        *<code>optional uint64 timestamp = 4;</code>        */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp_
return|;
block|}
comment|/**        *<code>optional uint64 timestamp = 4;</code>        */
specifier|public
name|Builder
name|setTimestamp
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000008
expr_stmt|;
name|timestamp_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional uint64 timestamp = 4;</code>        */
specifier|public
name|Builder
name|clearTimestamp
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000008
operator|)
expr_stmt|;
name|timestamp_
operator|=
literal|0L
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|int
name|cellType_
init|=
literal|0
decl_stmt|;
comment|/**        *<code>optional .hbase.pb.CellType cell_type = 5;</code>        */
specifier|public
name|boolean
name|hasCellType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
return|;
block|}
comment|/**        *<code>optional .hbase.pb.CellType cell_type = 5;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|getCellType
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|result
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|cellType_
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|MINIMUM
else|:
name|result
return|;
block|}
comment|/**        *<code>optional .hbase.pb.CellType cell_type = 5;</code>        */
specifier|public
name|Builder
name|setCellType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000010
expr_stmt|;
name|cellType_
operator|=
name|value
operator|.
name|getNumber
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .hbase.pb.CellType cell_type = 5;</code>        */
specifier|public
name|Builder
name|clearCellType
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000010
operator|)
expr_stmt|;
name|cellType_
operator|=
literal|0
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>optional bytes value = 6;</code>        */
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
return|;
block|}
comment|/**        *<code>optional bytes value = 6;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValue
parameter_list|()
block|{
return|return
name|value_
return|;
block|}
comment|/**        *<code>optional bytes value = 6;</code>        */
specifier|public
name|Builder
name|setValue
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000020
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bytes value = 6;</code>        */
specifier|public
name|Builder
name|clearValue
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000020
operator|)
expr_stmt|;
name|value_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|tags_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>optional bytes tags = 7;</code>        */
specifier|public
name|boolean
name|hasTags
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
return|;
block|}
comment|/**        *<code>optional bytes tags = 7;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getTags
parameter_list|()
block|{
return|return
name|tags_
return|;
block|}
comment|/**        *<code>optional bytes tags = 7;</code>        */
specifier|public
name|Builder
name|setTags
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000040
expr_stmt|;
name|tags_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bytes tags = 7;</code>        */
specifier|public
name|Builder
name|clearTags
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000040
operator|)
expr_stmt|;
name|tags_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getTags
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|Builder
name|setUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|setUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|Builder
name|mergeUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|mergeUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
comment|// @@protoc_insertion_point(builder_scope:hbase.pb.Cell)
block|}
comment|// @@protoc_insertion_point(class_scope:hbase.pb.Cell)
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|DEFAULT_INSTANCE
decl_stmt|;
static|static
block|{
name|DEFAULT_INSTANCE
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Deprecated
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|Cell
argument_list|>
name|PARSER
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractParser
argument_list|<
name|Cell
argument_list|>
argument_list|()
block|{
specifier|public
name|Cell
name|parsePartialFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|Cell
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|Cell
argument_list|>
name|parser
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|Cell
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|Cell
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
block|}
specifier|public
interface|interface
name|KeyValueOrBuilder
extends|extends
comment|// @@protoc_insertion_point(interface_extends:hbase.pb.KeyValue)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
block|{
comment|/**      *<code>required bytes row = 1;</code>      */
name|boolean
name|hasRow
parameter_list|()
function_decl|;
comment|/**      *<code>required bytes row = 1;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getRow
parameter_list|()
function_decl|;
comment|/**      *<code>required bytes family = 2;</code>      */
name|boolean
name|hasFamily
parameter_list|()
function_decl|;
comment|/**      *<code>required bytes family = 2;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFamily
parameter_list|()
function_decl|;
comment|/**      *<code>required bytes qualifier = 3;</code>      */
name|boolean
name|hasQualifier
parameter_list|()
function_decl|;
comment|/**      *<code>required bytes qualifier = 3;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getQualifier
parameter_list|()
function_decl|;
comment|/**      *<code>optional uint64 timestamp = 4;</code>      */
name|boolean
name|hasTimestamp
parameter_list|()
function_decl|;
comment|/**      *<code>optional uint64 timestamp = 4;</code>      */
name|long
name|getTimestamp
parameter_list|()
function_decl|;
comment|/**      *<code>optional .hbase.pb.CellType key_type = 5;</code>      */
name|boolean
name|hasKeyType
parameter_list|()
function_decl|;
comment|/**      *<code>optional .hbase.pb.CellType key_type = 5;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|getKeyType
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes value = 6;</code>      */
name|boolean
name|hasValue
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes value = 6;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValue
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes tags = 7;</code>      */
name|boolean
name|hasTags
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes tags = 7;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getTags
parameter_list|()
function_decl|;
block|}
comment|/**    *<pre>    **    * Protocol buffer version of KeyValue.    * It doesn't have those transient parameters    *</pre>    *    * Protobuf type {@code hbase.pb.KeyValue}    */
specifier|public
specifier|static
specifier|final
class|class
name|KeyValue
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
implements|implements
comment|// @@protoc_insertion_point(message_implements:hbase.pb.KeyValue)
name|KeyValueOrBuilder
block|{
comment|// Use KeyValue.newBuilder() to construct.
specifier|private
name|KeyValue
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|KeyValue
parameter_list|()
block|{
name|row_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|family_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|qualifier_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|timestamp_
operator|=
literal|0L
expr_stmt|;
name|keyType_
operator|=
literal|0
expr_stmt|;
name|value_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|tags_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|unknownFields
return|;
block|}
specifier|private
name|KeyValue
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
name|this
argument_list|()
expr_stmt|;
name|int
name|mutable_bitField0_
init|=
literal|0
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tag
condition|)
block|{
case|case
literal|0
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
if|if
condition|(
operator|!
name|parseUnknownField
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|10
case|:
block|{
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|row_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|18
case|:
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|family_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|26
case|:
block|{
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|qualifier_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|32
case|:
block|{
name|bitField0_
operator||=
literal|0x00000008
expr_stmt|;
name|timestamp_
operator|=
name|input
operator|.
name|readUInt64
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|40
case|:
block|{
name|int
name|rawValue
init|=
name|input
operator|.
name|readEnum
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|value
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|rawValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unknownFields
operator|.
name|mergeVarintField
argument_list|(
literal|5
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bitField0_
operator||=
literal|0x00000010
expr_stmt|;
name|keyType_
operator|=
name|rawValue
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|50
case|:
block|{
name|bitField0_
operator||=
literal|0x00000020
expr_stmt|;
name|value_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|58
case|:
block|{
name|bitField0_
operator||=
literal|0x00000040
expr_stmt|;
name|tags_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
argument_list|(
name|e
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
operator|.
name|build
argument_list|()
expr_stmt|;
name|makeExtensionsImmutable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_KeyValue_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_KeyValue_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ROW_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|row_
decl_stmt|;
comment|/**      *<code>required bytes row = 1;</code>      */
specifier|public
name|boolean
name|hasRow
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**      *<code>required bytes row = 1;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getRow
parameter_list|()
block|{
return|return
name|row_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|FAMILY_FIELD_NUMBER
init|=
literal|2
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|family_
decl_stmt|;
comment|/**      *<code>required bytes family = 2;</code>      */
specifier|public
name|boolean
name|hasFamily
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**      *<code>required bytes family = 2;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFamily
parameter_list|()
block|{
return|return
name|family_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|QUALIFIER_FIELD_NUMBER
init|=
literal|3
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|qualifier_
decl_stmt|;
comment|/**      *<code>required bytes qualifier = 3;</code>      */
specifier|public
name|boolean
name|hasQualifier
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
return|;
block|}
comment|/**      *<code>required bytes qualifier = 3;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|TIMESTAMP_FIELD_NUMBER
init|=
literal|4
decl_stmt|;
specifier|private
name|long
name|timestamp_
decl_stmt|;
comment|/**      *<code>optional uint64 timestamp = 4;</code>      */
specifier|public
name|boolean
name|hasTimestamp
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
return|;
block|}
comment|/**      *<code>optional uint64 timestamp = 4;</code>      */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|KEY_TYPE_FIELD_NUMBER
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|keyType_
decl_stmt|;
comment|/**      *<code>optional .hbase.pb.CellType key_type = 5;</code>      */
specifier|public
name|boolean
name|hasKeyType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
return|;
block|}
comment|/**      *<code>optional .hbase.pb.CellType key_type = 5;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|getKeyType
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|result
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|keyType_
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|MINIMUM
else|:
name|result
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|VALUE_FIELD_NUMBER
init|=
literal|6
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value_
decl_stmt|;
comment|/**      *<code>optional bytes value = 6;</code>      */
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
return|;
block|}
comment|/**      *<code>optional bytes value = 6;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValue
parameter_list|()
block|{
return|return
name|value_
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|TAGS_FIELD_NUMBER
init|=
literal|7
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|tags_
decl_stmt|;
comment|/**      *<code>optional bytes tags = 7;</code>      */
specifier|public
name|boolean
name|hasTags
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
return|;
block|}
comment|/**      *<code>optional bytes tags = 7;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getTags
parameter_list|()
block|{
return|return
name|tags_
return|;
block|}
specifier|private
name|byte
name|memoizedIsInitialized
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
name|byte
name|isInitialized
init|=
name|memoizedIsInitialized
decl_stmt|;
if|if
condition|(
name|isInitialized
operator|==
literal|1
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|isInitialized
operator|==
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|hasRow
argument_list|()
condition|)
block|{
name|memoizedIsInitialized
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|hasFamily
argument_list|()
condition|)
block|{
name|memoizedIsInitialized
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|hasQualifier
argument_list|()
condition|)
block|{
name|memoizedIsInitialized
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|memoizedIsInitialized
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|1
argument_list|,
name|row_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|2
argument_list|,
name|family_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|3
argument_list|,
name|qualifier_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|output
operator|.
name|writeUInt64
argument_list|(
literal|4
argument_list|,
name|timestamp_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|output
operator|.
name|writeEnum
argument_list|(
literal|5
argument_list|,
name|keyType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|6
argument_list|,
name|value_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|7
argument_list|,
name|tags_
argument_list|)
expr_stmt|;
block|}
name|unknownFields
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|1
argument_list|,
name|row_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|2
argument_list|,
name|family_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|3
argument_list|,
name|qualifier_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeUInt64Size
argument_list|(
literal|4
argument_list|,
name|timestamp_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeEnumSize
argument_list|(
literal|5
argument_list|,
name|keyType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|6
argument_list|,
name|value_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|7
argument_list|,
name|tags_
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|unknownFields
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|memoizedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|java
operator|.
name|lang
operator|.
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|)
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|other
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|)
name|obj
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|=
name|result
operator|&&
operator|(
name|hasRow
argument_list|()
operator|==
name|other
operator|.
name|hasRow
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasRow
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getRow
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasFamily
argument_list|()
operator|==
name|other
operator|.
name|hasFamily
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasFamily
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getFamily
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasQualifier
argument_list|()
operator|==
name|other
operator|.
name|hasQualifier
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasQualifier
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasTimestamp
argument_list|()
operator|==
name|other
operator|.
name|hasTimestamp
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasTimestamp
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
operator|(
name|getTimestamp
argument_list|()
operator|==
name|other
operator|.
name|getTimestamp
argument_list|()
operator|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasKeyType
argument_list|()
operator|==
name|other
operator|.
name|hasKeyType
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasKeyType
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|keyType_
operator|==
name|other
operator|.
name|keyType_
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasValue
argument_list|()
operator|==
name|other
operator|.
name|hasValue
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasValue
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasTags
argument_list|()
operator|==
name|other
operator|.
name|hasTags
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasTags
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getTags
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
name|unknownFields
operator|.
name|equals
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|memoizedHashCode
operator|!=
literal|0
condition|)
block|{
return|return
name|memoizedHashCode
return|;
block|}
name|int
name|hash
init|=
literal|41
decl_stmt|;
name|hash
operator|=
operator|(
literal|19
operator|*
name|hash
operator|)
operator|+
name|getDescriptorForType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasRow
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|ROW_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getRow
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasFamily
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|FAMILY_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getFamily
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasQualifier
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|QUALIFIER_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getQualifier
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasTimestamp
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|TIMESTAMP_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|hashLong
argument_list|(
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasKeyType
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|KEY_TYPE_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|keyType_
expr_stmt|;
block|}
if|if
condition|(
name|hasValue
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|VALUE_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getValue
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasTags
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|TAGS_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getTags
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|hash
operator|=
operator|(
literal|29
operator|*
name|hash
operator|)
operator|+
name|unknownFields
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|memoizedHashCode
operator|=
name|hash
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|prototype
parameter_list|)
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|this
operator|==
name|DEFAULT_INSTANCE
condition|?
operator|new
name|Builder
argument_list|()
else|:
operator|new
name|Builder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|Builder
name|newBuilderForType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      *<pre>      **      * Protocol buffer version of KeyValue.      * It doesn't have those transient parameters      *</pre>      *      * Protobuf type {@code hbase.pb.KeyValue}      */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
implements|implements
comment|// @@protoc_insertion_point(builder_implements:hbase.pb.KeyValue)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValueOrBuilder
block|{
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_KeyValue_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_KeyValue_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Construct using org.apache.hadoop.hbase.shaded.protobuf.generated.CellProtos.KeyValue.newBuilder()
specifier|private
name|Builder
parameter_list|()
block|{
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeForceBuilderInitialization
parameter_list|()
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|alwaysUseFieldBuilders
condition|)
block|{         }
block|}
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|row_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|family_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|qualifier_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|timestamp_
operator|=
literal|0L
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000008
operator|)
expr_stmt|;
name|keyType_
operator|=
literal|0
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000010
operator|)
expr_stmt|;
name|value_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000020
operator|)
expr_stmt|;
name|tags_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000040
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|internal_static_hbase_pb_KeyValue_descriptor
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|build
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|buildPartial
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|from_bitField0_
init|=
name|bitField0_
decl_stmt|;
name|int
name|to_bitField0_
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|result
operator|.
name|row_
operator|=
name|row_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000002
expr_stmt|;
block|}
name|result
operator|.
name|family_
operator|=
name|family_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
name|result
operator|.
name|qualifier_
operator|=
name|qualifier_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000008
expr_stmt|;
block|}
name|result
operator|.
name|timestamp_
operator|=
name|timestamp_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000010
expr_stmt|;
block|}
name|result
operator|.
name|keyType_
operator|=
name|keyType_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000020
expr_stmt|;
block|}
name|result
operator|.
name|value_
operator|=
name|value_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000040
expr_stmt|;
block|}
name|result
operator|.
name|tags_
operator|=
name|tags_
expr_stmt|;
name|result
operator|.
name|bitField0_
operator|=
name|to_bitField0_
expr_stmt|;
name|onBuilt
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|setField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearOneof
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearOneof
argument_list|(
name|oneof
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|setRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setRepeatedField
argument_list|(
name|field
argument_list|,
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|addRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|addRepeatedField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
condition|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|.
name|getDefaultInstance
argument_list|()
condition|)
return|return
name|this
return|;
if|if
condition|(
name|other
operator|.
name|hasRow
argument_list|()
condition|)
block|{
name|setRow
argument_list|(
name|other
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|setFamily
argument_list|(
name|other
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|setQualifier
argument_list|(
name|other
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|setTimestamp
argument_list|(
name|other
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasKeyType
argument_list|()
condition|)
block|{
name|setKeyType
argument_list|(
name|other
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|setTags
argument_list|(
name|other
operator|.
name|getTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasRow
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|hasFamily
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|hasQualifier
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|parsedMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedMessage
operator|=
name|PARSER
operator|.
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|parsedMessage
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
operator|)
name|e
operator|.
name|getUnfinishedMessage
argument_list|()
expr_stmt|;
throw|throw
name|e
operator|.
name|unwrapIOException
argument_list|()
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parsedMessage
operator|!=
literal|null
condition|)
block|{
name|mergeFrom
argument_list|(
name|parsedMessage
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|row_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>required bytes row = 1;</code>        */
specifier|public
name|boolean
name|hasRow
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**        *<code>required bytes row = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getRow
parameter_list|()
block|{
return|return
name|row_
return|;
block|}
comment|/**        *<code>required bytes row = 1;</code>        */
specifier|public
name|Builder
name|setRow
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|row_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>required bytes row = 1;</code>        */
specifier|public
name|Builder
name|clearRow
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|row_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|family_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>required bytes family = 2;</code>        */
specifier|public
name|boolean
name|hasFamily
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**        *<code>required bytes family = 2;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFamily
parameter_list|()
block|{
return|return
name|family_
return|;
block|}
comment|/**        *<code>required bytes family = 2;</code>        */
specifier|public
name|Builder
name|setFamily
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|family_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>required bytes family = 2;</code>        */
specifier|public
name|Builder
name|clearFamily
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|family_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getFamily
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|qualifier_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>required bytes qualifier = 3;</code>        */
specifier|public
name|boolean
name|hasQualifier
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
return|;
block|}
comment|/**        *<code>required bytes qualifier = 3;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier_
return|;
block|}
comment|/**        *<code>required bytes qualifier = 3;</code>        */
specifier|public
name|Builder
name|setQualifier
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|qualifier_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>required bytes qualifier = 3;</code>        */
specifier|public
name|Builder
name|clearQualifier
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|qualifier_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getQualifier
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|long
name|timestamp_
decl_stmt|;
comment|/**        *<code>optional uint64 timestamp = 4;</code>        */
specifier|public
name|boolean
name|hasTimestamp
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
return|;
block|}
comment|/**        *<code>optional uint64 timestamp = 4;</code>        */
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp_
return|;
block|}
comment|/**        *<code>optional uint64 timestamp = 4;</code>        */
specifier|public
name|Builder
name|setTimestamp
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000008
expr_stmt|;
name|timestamp_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional uint64 timestamp = 4;</code>        */
specifier|public
name|Builder
name|clearTimestamp
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000008
operator|)
expr_stmt|;
name|timestamp_
operator|=
literal|0L
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|int
name|keyType_
init|=
literal|0
decl_stmt|;
comment|/**        *<code>optional .hbase.pb.CellType key_type = 5;</code>        */
specifier|public
name|boolean
name|hasKeyType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
return|;
block|}
comment|/**        *<code>optional .hbase.pb.CellType key_type = 5;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|getKeyType
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|result
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|keyType_
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
operator|.
name|MINIMUM
else|:
name|result
return|;
block|}
comment|/**        *<code>optional .hbase.pb.CellType key_type = 5;</code>        */
specifier|public
name|Builder
name|setKeyType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|CellType
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000010
expr_stmt|;
name|keyType_
operator|=
name|value
operator|.
name|getNumber
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .hbase.pb.CellType key_type = 5;</code>        */
specifier|public
name|Builder
name|clearKeyType
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000010
operator|)
expr_stmt|;
name|keyType_
operator|=
literal|0
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>optional bytes value = 6;</code>        */
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
return|;
block|}
comment|/**        *<code>optional bytes value = 6;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValue
parameter_list|()
block|{
return|return
name|value_
return|;
block|}
comment|/**        *<code>optional bytes value = 6;</code>        */
specifier|public
name|Builder
name|setValue
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000020
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bytes value = 6;</code>        */
specifier|public
name|Builder
name|clearValue
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000020
operator|)
expr_stmt|;
name|value_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|tags_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>optional bytes tags = 7;</code>        */
specifier|public
name|boolean
name|hasTags
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
return|;
block|}
comment|/**        *<code>optional bytes tags = 7;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getTags
parameter_list|()
block|{
return|return
name|tags_
return|;
block|}
comment|/**        *<code>optional bytes tags = 7;</code>        */
specifier|public
name|Builder
name|setTags
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000040
expr_stmt|;
name|tags_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bytes tags = 7;</code>        */
specifier|public
name|Builder
name|clearTags
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000040
operator|)
expr_stmt|;
name|tags_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getTags
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|Builder
name|setUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|setUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|Builder
name|mergeUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|mergeUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
comment|// @@protoc_insertion_point(builder_scope:hbase.pb.KeyValue)
block|}
comment|// @@protoc_insertion_point(class_scope:hbase.pb.KeyValue)
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|DEFAULT_INSTANCE
decl_stmt|;
static|static
block|{
name|DEFAULT_INSTANCE
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Deprecated
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|KeyValue
argument_list|>
name|PARSER
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractParser
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
block|{
specifier|public
name|KeyValue
name|parsePartialFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|KeyValue
argument_list|>
name|parser
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|KeyValue
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
operator|.
name|KeyValue
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|internal_static_hbase_pb_Cell_descriptor
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internal_static_hbase_pb_Cell_fieldAccessorTable
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|internal_static_hbase_pb_KeyValue_descriptor
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internal_static_hbase_pb_KeyValue_fieldAccessorTable
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|descriptor
return|;
block|}
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|descriptor
decl_stmt|;
static|static
block|{
name|java
operator|.
name|lang
operator|.
name|String
index|[]
name|descriptorData
init|=
block|{
literal|"\n\nCell.proto\022\010hbase.pb\"\215\001\n\004Cell\022\013\n\003row\030\001"
operator|+
literal|" \001(\014\022\016\n\006family\030\002 \001(\014\022\021\n\tqualifier\030\003 \001(\014\022"
operator|+
literal|"\021\n\ttimestamp\030\004 \001(\004\022%\n\tcell_type\030\005 \001(\0162\022."
operator|+
literal|"hbase.pb.CellType\022\r\n\005value\030\006 \001(\014\022\014\n\004tags"
operator|+
literal|"\030\007 \001(\014\"\220\001\n\010KeyValue\022\013\n\003row\030\001 \002(\014\022\016\n\006fami"
operator|+
literal|"ly\030\002 \002(\014\022\021\n\tqualifier\030\003 \002(\014\022\021\n\ttimestamp"
operator|+
literal|"\030\004 \001(\004\022$\n\010key_type\030\005 \001(\0162\022.hbase.pb.Cell"
operator|+
literal|"Type\022\r\n\005value\030\006 \001(\014\022\014\n\004tags\030\007 \001(\014*`\n\010Cel"
operator|+
literal|"lType\022\013\n\007MINIMUM\020\000\022\007\n\003PUT\020\004\022\n\n\006DELETE\020\010\022"
operator|+
literal|"\021\n\rDELETE_COLUMN\020\014\022\021\n\rDELETE_FAMILY\020\016\022\014\n"
block|,
literal|"\007MAXIMUM\020\377\001BD\n1org.apache.hadoop.hbase.s"
operator|+
literal|"haded.protobuf.generatedB\nCellProtosH\001\240\001"
operator|+
literal|"\001"
block|}
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|InternalDescriptorAssigner
name|assigner
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|InternalDescriptorAssigner
argument_list|()
block|{
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistry
name|assignDescriptors
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|root
parameter_list|)
block|{
name|descriptor
operator|=
name|root
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|internalBuildGeneratedFileFrom
argument_list|(
name|descriptorData
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
index|[]
block|{         }
argument_list|,
name|assigner
argument_list|)
expr_stmt|;
name|internal_static_hbase_pb_Cell_descriptor
operator|=
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|internal_static_hbase_pb_Cell_fieldAccessorTable
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
argument_list|(
name|internal_static_hbase_pb_Cell_descriptor
argument_list|,
operator|new
name|java
operator|.
name|lang
operator|.
name|String
index|[]
block|{
literal|"Row"
block|,
literal|"Family"
block|,
literal|"Qualifier"
block|,
literal|"Timestamp"
block|,
literal|"CellType"
block|,
literal|"Value"
block|,
literal|"Tags"
block|, }
argument_list|)
expr_stmt|;
name|internal_static_hbase_pb_KeyValue_descriptor
operator|=
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|internal_static_hbase_pb_KeyValue_fieldAccessorTable
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
argument_list|(
name|internal_static_hbase_pb_KeyValue_descriptor
argument_list|,
operator|new
name|java
operator|.
name|lang
operator|.
name|String
index|[]
block|{
literal|"Row"
block|,
literal|"Family"
block|,
literal|"Qualifier"
block|,
literal|"Timestamp"
block|,
literal|"KeyType"
block|,
literal|"Value"
block|,
literal|"Tags"
block|, }
argument_list|)
expr_stmt|;
block|}
comment|// @@protoc_insertion_point(outer_class_scope)
block|}
end_class

end_unit

