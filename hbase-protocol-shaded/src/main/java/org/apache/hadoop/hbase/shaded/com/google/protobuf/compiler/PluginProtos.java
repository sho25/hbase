begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Generated by the protocol buffer compiler.  DO NOT EDIT!
end_comment

begin_comment
comment|// source: google/protobuf/compiler/plugin.proto
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
package|;
end_package

begin_class
specifier|public
specifier|final
class|class
name|PluginProtos
block|{
specifier|private
name|PluginProtos
parameter_list|()
block|{}
specifier|public
specifier|static
name|void
name|registerAllExtensions
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|registry
parameter_list|)
block|{   }
specifier|public
specifier|static
name|void
name|registerAllExtensions
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistry
name|registry
parameter_list|)
block|{
name|registerAllExtensions
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
operator|)
name|registry
argument_list|)
expr_stmt|;
block|}
specifier|public
interface|interface
name|CodeGeneratorRequestOrBuilder
extends|extends
comment|// @@protoc_insertion_point(interface_extends:google.protobuf.compiler.CodeGeneratorRequest)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
block|{
comment|/**      *<pre>      * The .proto files that were explicitly listed on the command-line.  The      * code generator should generate code only for these files.  Each file's      * descriptor will be included in proto_file, below.      *</pre>      *      *<code>repeated string file_to_generate = 1;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getFileToGenerateList
parameter_list|()
function_decl|;
comment|/**      *<pre>      * The .proto files that were explicitly listed on the command-line.  The      * code generator should generate code only for these files.  Each file's      * descriptor will be included in proto_file, below.      *</pre>      *      *<code>repeated string file_to_generate = 1;</code>      */
name|int
name|getFileToGenerateCount
parameter_list|()
function_decl|;
comment|/**      *<pre>      * The .proto files that were explicitly listed on the command-line.  The      * code generator should generate code only for these files.  Each file's      * descriptor will be included in proto_file, below.      *</pre>      *      *<code>repeated string file_to_generate = 1;</code>      */
name|java
operator|.
name|lang
operator|.
name|String
name|getFileToGenerate
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      *<pre>      * The .proto files that were explicitly listed on the command-line.  The      * code generator should generate code only for these files.  Each file's      * descriptor will be included in proto_file, below.      *</pre>      *      *<code>repeated string file_to_generate = 1;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFileToGenerateBytes
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      *<pre>      * The generator parameter passed on the command-line.      *</pre>      *      *<code>optional string parameter = 2;</code>      */
name|boolean
name|hasParameter
parameter_list|()
function_decl|;
comment|/**      *<pre>      * The generator parameter passed on the command-line.      *</pre>      *      *<code>optional string parameter = 2;</code>      */
name|java
operator|.
name|lang
operator|.
name|String
name|getParameter
parameter_list|()
function_decl|;
comment|/**      *<pre>      * The generator parameter passed on the command-line.      *</pre>      *      *<code>optional string parameter = 2;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getParameterBytes
parameter_list|()
function_decl|;
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|>
name|getProtoFileList
parameter_list|()
function_decl|;
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
name|getProtoFile
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
name|int
name|getProtoFileCount
parameter_list|()
function_decl|;
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
argument_list|>
name|getProtoFileOrBuilderList
parameter_list|()
function_decl|;
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
name|getProtoFileOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
block|}
comment|/**    *<pre>    * An encoded CodeGeneratorRequest is written to the plugin's stdin.    *</pre>    *    * Protobuf type {@code google.protobuf.compiler.CodeGeneratorRequest}    */
specifier|public
specifier|static
specifier|final
class|class
name|CodeGeneratorRequest
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
implements|implements
comment|// @@protoc_insertion_point(message_implements:google.protobuf.compiler.CodeGeneratorRequest)
name|CodeGeneratorRequestOrBuilder
block|{
comment|// Use CodeGeneratorRequest.newBuilder() to construct.
specifier|private
name|CodeGeneratorRequest
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CodeGeneratorRequest
parameter_list|()
block|{
name|fileToGenerate_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
operator|.
name|EMPTY
expr_stmt|;
name|parameter_
operator|=
literal|""
expr_stmt|;
name|protoFile_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|unknownFields
return|;
block|}
specifier|private
name|CodeGeneratorRequest
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
name|this
argument_list|()
expr_stmt|;
name|int
name|mutable_bitField0_
init|=
literal|0
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tag
condition|)
block|{
case|case
literal|0
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
if|if
condition|(
operator|!
name|parseUnknownField
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|10
case|:
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
name|input
operator|.
name|readBytes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|fileToGenerate_
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|fileToGenerate_
operator|.
name|add
argument_list|(
name|bs
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|18
case|:
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
name|input
operator|.
name|readBytes
argument_list|()
decl_stmt|;
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|parameter_
operator|=
name|bs
expr_stmt|;
break|break;
block|}
case|case
literal|122
case|:
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|protoFile_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|>
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
name|protoFile_
operator|.
name|add
argument_list|(
name|input
operator|.
name|readMessage
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|PARSER
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
argument_list|(
name|e
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|fileToGenerate_
operator|=
name|fileToGenerate_
operator|.
name|getUnmodifiableView
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|protoFile_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|protoFile_
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
operator|.
name|build
argument_list|()
expr_stmt|;
name|makeExtensionsImmutable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|FILE_TO_GENERATE_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringList
name|fileToGenerate_
decl_stmt|;
comment|/**      *<pre>      * The .proto files that were explicitly listed on the command-line.  The      * code generator should generate code only for these files.  Each file's      * descriptor will be included in proto_file, below.      *</pre>      *      *<code>repeated string file_to_generate = 1;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ProtocolStringList
name|getFileToGenerateList
parameter_list|()
block|{
return|return
name|fileToGenerate_
return|;
block|}
comment|/**      *<pre>      * The .proto files that were explicitly listed on the command-line.  The      * code generator should generate code only for these files.  Each file's      * descriptor will be included in proto_file, below.      *</pre>      *      *<code>repeated string file_to_generate = 1;</code>      */
specifier|public
name|int
name|getFileToGenerateCount
parameter_list|()
block|{
return|return
name|fileToGenerate_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<pre>      * The .proto files that were explicitly listed on the command-line.  The      * code generator should generate code only for these files.  Each file's      * descriptor will be included in proto_file, below.      *</pre>      *      *<code>repeated string file_to_generate = 1;</code>      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFileToGenerate
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|fileToGenerate_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      *<pre>      * The .proto files that were explicitly listed on the command-line.  The      * code generator should generate code only for these files.  Each file's      * descriptor will be included in proto_file, below.      *</pre>      *      *<code>repeated string file_to_generate = 1;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFileToGenerateBytes
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|fileToGenerate_
operator|.
name|getByteString
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|PARAMETER_FIELD_NUMBER
init|=
literal|2
decl_stmt|;
specifier|private
specifier|volatile
name|java
operator|.
name|lang
operator|.
name|Object
name|parameter_
decl_stmt|;
comment|/**      *<pre>      * The generator parameter passed on the command-line.      *</pre>      *      *<code>optional string parameter = 2;</code>      */
specifier|public
name|boolean
name|hasParameter
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**      *<pre>      * The generator parameter passed on the command-line.      *</pre>      *      *<code>optional string parameter = 2;</code>      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getParameter
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|parameter_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|parameter_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
comment|/**      *<pre>      * The generator parameter passed on the command-line.      *</pre>      *      *<code>optional string parameter = 2;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getParameterBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|parameter_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|parameter_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|int
name|PROTO_FILE_FIELD_NUMBER
init|=
literal|15
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|>
name|protoFile_
decl_stmt|;
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|>
name|getProtoFileList
parameter_list|()
block|{
return|return
name|protoFile_
return|;
block|}
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
argument_list|>
name|getProtoFileOrBuilderList
parameter_list|()
block|{
return|return
name|protoFile_
return|;
block|}
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
specifier|public
name|int
name|getProtoFileCount
parameter_list|()
block|{
return|return
name|protoFile_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
name|getProtoFile
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|protoFile_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      *<pre>      * FileDescriptorProtos for all files in files_to_generate and everything      * they import.  The files will appear in topological order, so each file      * appears before any file that imports it.      * protoc guarantees that all proto_files will be written after      * the fields above, even though this is not technically guaranteed by the      * protobuf wire format.  This theoretically could allow a plugin to stream      * in the FileDescriptorProtos and handle them one by one rather than read      * the entire set into memory at once.  However, as of this writing, this      * is not similarly optimized on protoc's end -- it will store all fields in      * memory at once before sending them to the plugin.      *</pre>      *      *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
name|getProtoFileOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|protoFile_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|private
name|byte
name|memoizedIsInitialized
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
name|byte
name|isInitialized
init|=
name|memoizedIsInitialized
decl_stmt|;
if|if
condition|(
name|isInitialized
operator|==
literal|1
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|isInitialized
operator|==
literal|0
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getProtoFileCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|getProtoFile
argument_list|(
name|i
argument_list|)
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|memoizedIsInitialized
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|memoizedIsInitialized
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileToGenerate_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|writeString
argument_list|(
name|output
argument_list|,
literal|1
argument_list|,
name|fileToGenerate_
operator|.
name|getRaw
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|writeString
argument_list|(
name|output
argument_list|,
literal|2
argument_list|,
name|parameter_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|protoFile_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeMessage
argument_list|(
literal|15
argument_list|,
name|protoFile_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unknownFields
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
name|size
operator|=
literal|0
expr_stmt|;
block|{
name|int
name|dataSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileToGenerate_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|dataSize
operator|+=
name|computeStringSizeNoTag
argument_list|(
name|fileToGenerate_
operator|.
name|getRaw
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|dataSize
expr_stmt|;
name|size
operator|+=
literal|1
operator|*
name|getFileToGenerateList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|computeStringSize
argument_list|(
literal|2
argument_list|,
name|parameter_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|protoFile_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeMessageSize
argument_list|(
literal|15
argument_list|,
name|protoFile_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|unknownFields
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|memoizedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|java
operator|.
name|lang
operator|.
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|)
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|other
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|)
name|obj
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|=
name|result
operator|&&
name|getFileToGenerateList
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getFileToGenerateList
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|&&
operator|(
name|hasParameter
argument_list|()
operator|==
name|other
operator|.
name|hasParameter
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasParameter
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getParameter
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getParameter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
name|getProtoFileList
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getProtoFileList
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|&&
name|unknownFields
operator|.
name|equals
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|memoizedHashCode
operator|!=
literal|0
condition|)
block|{
return|return
name|memoizedHashCode
return|;
block|}
name|int
name|hash
init|=
literal|41
decl_stmt|;
name|hash
operator|=
operator|(
literal|19
operator|*
name|hash
operator|)
operator|+
name|getDescriptorForType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|getFileToGenerateCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|FILE_TO_GENERATE_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getFileToGenerateList
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasParameter
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|PARAMETER_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getParameter
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getProtoFileCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|PROTO_FILE_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getProtoFileList
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|hash
operator|=
operator|(
literal|29
operator|*
name|hash
operator|)
operator|+
name|unknownFields
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|memoizedHashCode
operator|=
name|hash
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|prototype
parameter_list|)
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|this
operator|==
name|DEFAULT_INSTANCE
condition|?
operator|new
name|Builder
argument_list|()
else|:
operator|new
name|Builder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|Builder
name|newBuilderForType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      *<pre>      * An encoded CodeGeneratorRequest is written to the plugin's stdin.      *</pre>      *      * Protobuf type {@code google.protobuf.compiler.CodeGeneratorRequest}      */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
implements|implements
comment|// @@protoc_insertion_point(builder_implements:google.protobuf.compiler.CodeGeneratorRequest)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequestOrBuilder
block|{
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Construct using org.apache.hadoop.hbase.shaded.com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest.newBuilder()
specifier|private
name|Builder
parameter_list|()
block|{
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeForceBuilderInitialization
parameter_list|()
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|alwaysUseFieldBuilders
condition|)
block|{
name|getProtoFileFieldBuilder
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fileToGenerate_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|parameter_
operator|=
literal|""
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
name|protoFile_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_descriptor
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|build
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|buildPartial
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|from_bitField0_
init|=
name|bitField0_
decl_stmt|;
name|int
name|to_bitField0_
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|fileToGenerate_
operator|=
name|fileToGenerate_
operator|.
name|getUnmodifiableView
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|fileToGenerate_
operator|=
name|fileToGenerate_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|result
operator|.
name|parameter_
operator|=
name|parameter_
expr_stmt|;
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|protoFile_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|protoFile_
argument_list|)
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|protoFile_
operator|=
name|protoFile_
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|protoFile_
operator|=
name|protoFileBuilder_
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|bitField0_
operator|=
name|to_bitField0_
expr_stmt|;
name|onBuilt
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|setField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearOneof
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearOneof
argument_list|(
name|oneof
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|setRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setRepeatedField
argument_list|(
name|field
argument_list|,
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|addRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|addRepeatedField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
condition|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|.
name|getDefaultInstance
argument_list|()
condition|)
return|return
name|this
return|;
if|if
condition|(
operator|!
name|other
operator|.
name|fileToGenerate_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|fileToGenerate_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fileToGenerate_
operator|=
name|other
operator|.
name|fileToGenerate_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ensureFileToGenerateIsMutable
argument_list|()
expr_stmt|;
name|fileToGenerate_
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|fileToGenerate_
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasParameter
argument_list|()
condition|)
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|parameter_
operator|=
name|other
operator|.
name|parameter_
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|protoFile_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|protoFile_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|protoFile_
operator|=
name|other
operator|.
name|protoFile_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|protoFile_
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|protoFile_
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|protoFile_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|protoFileBuilder_
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|protoFileBuilder_
operator|=
literal|null
expr_stmt|;
name|protoFile_
operator|=
name|other
operator|.
name|protoFile_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|protoFileBuilder_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|alwaysUseFieldBuilders
condition|?
name|getProtoFileFieldBuilder
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|addAllMessages
argument_list|(
name|other
operator|.
name|protoFile_
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getProtoFileCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|getProtoFile
argument_list|(
name|i
argument_list|)
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|parsedMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedMessage
operator|=
name|PARSER
operator|.
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|parsedMessage
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
operator|)
name|e
operator|.
name|getUnfinishedMessage
argument_list|()
expr_stmt|;
throw|throw
name|e
operator|.
name|unwrapIOException
argument_list|()
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parsedMessage
operator|!=
literal|null
condition|)
block|{
name|mergeFrom
argument_list|(
name|parsedMessage
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringList
name|fileToGenerate_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
operator|.
name|EMPTY
decl_stmt|;
specifier|private
name|void
name|ensureFileToGenerateIsMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|fileToGenerate_
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
argument_list|(
name|fileToGenerate_
argument_list|)
expr_stmt|;
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ProtocolStringList
name|getFileToGenerateList
parameter_list|()
block|{
return|return
name|fileToGenerate_
operator|.
name|getUnmodifiableView
argument_list|()
return|;
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|int
name|getFileToGenerateCount
parameter_list|()
block|{
return|return
name|fileToGenerate_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFileToGenerate
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|fileToGenerate_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getFileToGenerateBytes
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|fileToGenerate_
operator|.
name|getByteString
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|Builder
name|setFileToGenerate
parameter_list|(
name|int
name|index
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureFileToGenerateIsMutable
argument_list|()
expr_stmt|;
name|fileToGenerate_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|Builder
name|addFileToGenerate
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureFileToGenerateIsMutable
argument_list|()
expr_stmt|;
name|fileToGenerate_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|Builder
name|addAllFileToGenerate
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|ensureFileToGenerateIsMutable
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractMessageLite
operator|.
name|Builder
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|fileToGenerate_
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|Builder
name|clearFileToGenerate
parameter_list|()
block|{
name|fileToGenerate_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * The .proto files that were explicitly listed on the command-line.  The        * code generator should generate code only for these files.  Each file's        * descriptor will be included in proto_file, below.        *</pre>        *        *<code>repeated string file_to_generate = 1;</code>        */
specifier|public
name|Builder
name|addFileToGenerateBytes
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureFileToGenerateIsMutable
argument_list|()
expr_stmt|;
name|fileToGenerate_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|parameter_
init|=
literal|""
decl_stmt|;
comment|/**        *<pre>        * The generator parameter passed on the command-line.        *</pre>        *        *<code>optional string parameter = 2;</code>        */
specifier|public
name|boolean
name|hasParameter
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**        *<pre>        * The generator parameter passed on the command-line.        *</pre>        *        *<code>optional string parameter = 2;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getParameter
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|parameter_
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|parameter_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<pre>        * The generator parameter passed on the command-line.        *</pre>        *        *<code>optional string parameter = 2;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getParameterBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|parameter_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|parameter_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<pre>        * The generator parameter passed on the command-line.        *</pre>        *        *<code>optional string parameter = 2;</code>        */
specifier|public
name|Builder
name|setParameter
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|parameter_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * The generator parameter passed on the command-line.        *</pre>        *        *<code>optional string parameter = 2;</code>        */
specifier|public
name|Builder
name|clearParameter
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|parameter_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getParameter
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * The generator parameter passed on the command-line.        *</pre>        *        *<code>optional string parameter = 2;</code>        */
specifier|public
name|Builder
name|setParameterBytes
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|parameter_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|>
name|protoFile_
init|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|void
name|ensureProtoFileIsMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|protoFile_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|>
argument_list|(
name|protoFile_
argument_list|)
expr_stmt|;
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilderV3
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
argument_list|>
name|protoFileBuilder_
decl_stmt|;
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|>
name|getProtoFileList
parameter_list|()
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|protoFile_
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|protoFileBuilder_
operator|.
name|getMessageList
argument_list|()
return|;
block|}
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|int
name|getProtoFileCount
parameter_list|()
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|protoFile_
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|protoFileBuilder_
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
name|getProtoFile
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|protoFile_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|protoFileBuilder_
operator|.
name|getMessage
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|setProtoFile
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
name|value
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|protoFile_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|setProtoFile
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|protoFile_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|addProtoFile
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
name|value
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|protoFile_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|addMessage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|addProtoFile
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
name|value
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|protoFile_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|addProtoFile
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|protoFile_
operator|.
name|add
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|addMessage
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|addProtoFile
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|protoFile_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|addAllProtoFile
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractMessageLite
operator|.
name|Builder
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|protoFile_
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|addAllMessages
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|clearProtoFile
parameter_list|()
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
name|protoFile_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|Builder
name|removeProtoFile
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureProtoFileIsMutable
argument_list|()
expr_stmt|;
name|protoFile_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protoFileBuilder_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
name|getProtoFileBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getProtoFileFieldBuilder
argument_list|()
operator|.
name|getBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
name|getProtoFileOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|protoFile_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|protoFileBuilder_
operator|.
name|getMessageOrBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
argument_list|>
name|getProtoFileOrBuilderList
parameter_list|()
block|{
if|if
condition|(
name|protoFileBuilder_
operator|!=
literal|null
condition|)
block|{
return|return
name|protoFileBuilder_
operator|.
name|getMessageOrBuilderList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|protoFile_
argument_list|)
return|;
block|}
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
name|addProtoFileBuilder
parameter_list|()
block|{
return|return
name|getProtoFileFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
name|addProtoFileBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getProtoFileFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|index
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<pre>        * FileDescriptorProtos for all files in files_to_generate and everything        * they import.  The files will appear in topological order, so each file        * appears before any file that imports it.        * protoc guarantees that all proto_files will be written after        * the fields above, even though this is not technically guaranteed by the        * protobuf wire format.  This theoretically could allow a plugin to stream        * in the FileDescriptorProtos and handle them one by one rather than read        * the entire set into memory at once.  However, as of this writing, this        * is not similarly optimized on protoc's end -- it will store all fields in        * memory at once before sending them to the plugin.        *</pre>        *        *<code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
argument_list|>
name|getProtoFileBuilderList
parameter_list|()
block|{
return|return
name|getProtoFileFieldBuilder
argument_list|()
operator|.
name|getBuilderList
argument_list|()
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilderV3
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
argument_list|>
name|getProtoFileFieldBuilder
parameter_list|()
block|{
if|if
condition|(
name|protoFileBuilder_
operator|==
literal|null
condition|)
block|{
name|protoFileBuilder_
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilderV3
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProto
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|FileDescriptorProtoOrBuilder
argument_list|>
argument_list|(
name|protoFile_
argument_list|,
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
argument_list|,
name|getParentForChildren
argument_list|()
argument_list|,
name|isClean
argument_list|()
argument_list|)
expr_stmt|;
name|protoFile_
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|protoFileBuilder_
return|;
block|}
specifier|public
specifier|final
name|Builder
name|setUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|setUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|Builder
name|mergeUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|mergeUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
comment|// @@protoc_insertion_point(builder_scope:google.protobuf.compiler.CodeGeneratorRequest)
block|}
comment|// @@protoc_insertion_point(class_scope:google.protobuf.compiler.CodeGeneratorRequest)
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|DEFAULT_INSTANCE
decl_stmt|;
static|static
block|{
name|DEFAULT_INSTANCE
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Deprecated
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|CodeGeneratorRequest
argument_list|>
name|PARSER
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractParser
argument_list|<
name|CodeGeneratorRequest
argument_list|>
argument_list|()
block|{
specifier|public
name|CodeGeneratorRequest
name|parsePartialFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|CodeGeneratorRequest
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|CodeGeneratorRequest
argument_list|>
name|parser
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|CodeGeneratorRequest
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorRequest
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
block|}
specifier|public
interface|interface
name|CodeGeneratorResponseOrBuilder
extends|extends
comment|// @@protoc_insertion_point(interface_extends:google.protobuf.compiler.CodeGeneratorResponse)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
block|{
comment|/**      *<pre>      * Error message.  If non-empty, code generation failed.  The plugin process      * should exit with status code zero even if it reports an error in this way.      * This should be used to indicate errors in .proto files which prevent the      * code generator from generating correct code.  Errors which indicate a      * problem in protoc itself -- such as the input CodeGeneratorRequest being      * unparseable -- should be reported by writing a message to stderr and      * exiting with a non-zero status code.      *</pre>      *      *<code>optional string error = 1;</code>      */
name|boolean
name|hasError
parameter_list|()
function_decl|;
comment|/**      *<pre>      * Error message.  If non-empty, code generation failed.  The plugin process      * should exit with status code zero even if it reports an error in this way.      * This should be used to indicate errors in .proto files which prevent the      * code generator from generating correct code.  Errors which indicate a      * problem in protoc itself -- such as the input CodeGeneratorRequest being      * unparseable -- should be reported by writing a message to stderr and      * exiting with a non-zero status code.      *</pre>      *      *<code>optional string error = 1;</code>      */
name|java
operator|.
name|lang
operator|.
name|String
name|getError
parameter_list|()
function_decl|;
comment|/**      *<pre>      * Error message.  If non-empty, code generation failed.  The plugin process      * should exit with status code zero even if it reports an error in this way.      * This should be used to indicate errors in .proto files which prevent the      * code generator from generating correct code.  Errors which indicate a      * problem in protoc itself -- such as the input CodeGeneratorRequest being      * unparseable -- should be reported by writing a message to stderr and      * exiting with a non-zero status code.      *</pre>      *      *<code>optional string error = 1;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getErrorBytes
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|>
name|getFileList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|getFile
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
name|int
name|getFileCount
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
argument_list|>
name|getFileOrBuilderList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
name|getFileOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
block|}
comment|/**    *<pre>    * The plugin writes an encoded CodeGeneratorResponse to stdout.    *</pre>    *    * Protobuf type {@code google.protobuf.compiler.CodeGeneratorResponse}    */
specifier|public
specifier|static
specifier|final
class|class
name|CodeGeneratorResponse
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
implements|implements
comment|// @@protoc_insertion_point(message_implements:google.protobuf.compiler.CodeGeneratorResponse)
name|CodeGeneratorResponseOrBuilder
block|{
comment|// Use CodeGeneratorResponse.newBuilder() to construct.
specifier|private
name|CodeGeneratorResponse
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CodeGeneratorResponse
parameter_list|()
block|{
name|error_
operator|=
literal|""
expr_stmt|;
name|file_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|unknownFields
return|;
block|}
specifier|private
name|CodeGeneratorResponse
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
name|this
argument_list|()
expr_stmt|;
name|int
name|mutable_bitField0_
init|=
literal|0
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tag
condition|)
block|{
case|case
literal|0
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
if|if
condition|(
operator|!
name|parseUnknownField
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|10
case|:
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
name|input
operator|.
name|readBytes
argument_list|()
decl_stmt|;
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|error_
operator|=
name|bs
expr_stmt|;
break|break;
block|}
case|case
literal|122
case|:
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|file_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|>
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00000002
expr_stmt|;
block|}
name|file_
operator|.
name|add
argument_list|(
name|input
operator|.
name|readMessage
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|PARSER
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
argument_list|(
name|e
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|file_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|file_
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
operator|.
name|build
argument_list|()
expr_stmt|;
name|makeExtensionsImmutable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
interface|interface
name|FileOrBuilder
extends|extends
comment|// @@protoc_insertion_point(interface_extends:google.protobuf.compiler.CodeGeneratorResponse.File)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
block|{
comment|/**        *<pre>        * The file name, relative to the output directory.  The name must not        * contain "." or ".." components and must be relative, not be absolute (so,        * the file cannot lie outside the output directory).  "/" must be used as        * the path separator, not "&#92;".        * If the name is omitted, the content will be appended to the previous        * file.  This allows the generator to break large files into small chunks,        * and allows the generated text to be streamed back to protoc so that large        * files need not reside completely in memory at one time.  Note that as of        * this writing protoc does not optimize for this -- it will read the entire        * CodeGeneratorResponse before writing files to disk.        *</pre>        *        *<code>optional string name = 1;</code>        */
name|boolean
name|hasName
parameter_list|()
function_decl|;
comment|/**        *<pre>        * The file name, relative to the output directory.  The name must not        * contain "." or ".." components and must be relative, not be absolute (so,        * the file cannot lie outside the output directory).  "/" must be used as        * the path separator, not "&#92;".        * If the name is omitted, the content will be appended to the previous        * file.  This allows the generator to break large files into small chunks,        * and allows the generated text to be streamed back to protoc so that large        * files need not reside completely in memory at one time.  Note that as of        * this writing protoc does not optimize for this -- it will read the entire        * CodeGeneratorResponse before writing files to disk.        *</pre>        *        *<code>optional string name = 1;</code>        */
name|java
operator|.
name|lang
operator|.
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**        *<pre>        * The file name, relative to the output directory.  The name must not        * contain "." or ".." components and must be relative, not be absolute (so,        * the file cannot lie outside the output directory).  "/" must be used as        * the path separator, not "&#92;".        * If the name is omitted, the content will be appended to the previous        * file.  This allows the generator to break large files into small chunks,        * and allows the generated text to be streamed back to protoc so that large        * files need not reside completely in memory at one time.  Note that as of        * this writing protoc does not optimize for this -- it will read the entire        * CodeGeneratorResponse before writing files to disk.        *</pre>        *        *<code>optional string name = 1;</code>        */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getNameBytes
parameter_list|()
function_decl|;
comment|/**        *<pre>        * If non-empty, indicates that the named file should already exist, and the        * content here is to be inserted into that file at a defined insertion        * point.  This feature allows a code generator to extend the output        * produced by another code generator.  The original generator may provide        * insertion points by placing special annotations in the file that look        * like:        *&#64;&#64;protoc_insertion_point(NAME)        * The annotation can have arbitrary text before and after it on the line,        * which allows it to be placed in a comment.  NAME should be replaced with        * an identifier naming the point -- this is what other generators will use        * as the insertion_point.  Code inserted at this point will be placed        * immediately above the line containing the insertion point (thus multiple        * insertions to the same point will come out in the order they were added).        * The double-&#64; is intended to make it unlikely that the generated code        * could contain things that look like insertion points by accident.        * For example, the C++ code generator places the following line in the        * .pb.h files that it generates:        *   //&#64;&#64;protoc_insertion_point(namespace_scope)        * This line appears within the scope of the file's package namespace, but        * outside of any particular class.  Another plugin can then specify the        * insertion_point "namespace_scope" to generate additional classes or        * other declarations that should be placed in this scope.        * Note that if the line containing the insertion point begins with        * whitespace, the same whitespace will be added to every line of the        * inserted text.  This is useful for languages like Python, where        * indentation matters.  In these languages, the insertion point comment        * should be indented the same amount as any inserted code will need to be        * in order to work correctly in that context.        * The code generator that generates the initial file and the one which        * inserts into it must both run as part of a single invocation of protoc.        * Code generators are executed in the order in which they appear on the        * command line.        * If |insertion_point| is present, |name| must also be present.        *</pre>        *        *<code>optional string insertion_point = 2;</code>        */
name|boolean
name|hasInsertionPoint
parameter_list|()
function_decl|;
comment|/**        *<pre>        * If non-empty, indicates that the named file should already exist, and the        * content here is to be inserted into that file at a defined insertion        * point.  This feature allows a code generator to extend the output        * produced by another code generator.  The original generator may provide        * insertion points by placing special annotations in the file that look        * like:        *&#64;&#64;protoc_insertion_point(NAME)        * The annotation can have arbitrary text before and after it on the line,        * which allows it to be placed in a comment.  NAME should be replaced with        * an identifier naming the point -- this is what other generators will use        * as the insertion_point.  Code inserted at this point will be placed        * immediately above the line containing the insertion point (thus multiple        * insertions to the same point will come out in the order they were added).        * The double-&#64; is intended to make it unlikely that the generated code        * could contain things that look like insertion points by accident.        * For example, the C++ code generator places the following line in the        * .pb.h files that it generates:        *   //&#64;&#64;protoc_insertion_point(namespace_scope)        * This line appears within the scope of the file's package namespace, but        * outside of any particular class.  Another plugin can then specify the        * insertion_point "namespace_scope" to generate additional classes or        * other declarations that should be placed in this scope.        * Note that if the line containing the insertion point begins with        * whitespace, the same whitespace will be added to every line of the        * inserted text.  This is useful for languages like Python, where        * indentation matters.  In these languages, the insertion point comment        * should be indented the same amount as any inserted code will need to be        * in order to work correctly in that context.        * The code generator that generates the initial file and the one which        * inserts into it must both run as part of a single invocation of protoc.        * Code generators are executed in the order in which they appear on the        * command line.        * If |insertion_point| is present, |name| must also be present.        *</pre>        *        *<code>optional string insertion_point = 2;</code>        */
name|java
operator|.
name|lang
operator|.
name|String
name|getInsertionPoint
parameter_list|()
function_decl|;
comment|/**        *<pre>        * If non-empty, indicates that the named file should already exist, and the        * content here is to be inserted into that file at a defined insertion        * point.  This feature allows a code generator to extend the output        * produced by another code generator.  The original generator may provide        * insertion points by placing special annotations in the file that look        * like:        *&#64;&#64;protoc_insertion_point(NAME)        * The annotation can have arbitrary text before and after it on the line,        * which allows it to be placed in a comment.  NAME should be replaced with        * an identifier naming the point -- this is what other generators will use        * as the insertion_point.  Code inserted at this point will be placed        * immediately above the line containing the insertion point (thus multiple        * insertions to the same point will come out in the order they were added).        * The double-&#64; is intended to make it unlikely that the generated code        * could contain things that look like insertion points by accident.        * For example, the C++ code generator places the following line in the        * .pb.h files that it generates:        *   //&#64;&#64;protoc_insertion_point(namespace_scope)        * This line appears within the scope of the file's package namespace, but        * outside of any particular class.  Another plugin can then specify the        * insertion_point "namespace_scope" to generate additional classes or        * other declarations that should be placed in this scope.        * Note that if the line containing the insertion point begins with        * whitespace, the same whitespace will be added to every line of the        * inserted text.  This is useful for languages like Python, where        * indentation matters.  In these languages, the insertion point comment        * should be indented the same amount as any inserted code will need to be        * in order to work correctly in that context.        * The code generator that generates the initial file and the one which        * inserts into it must both run as part of a single invocation of protoc.        * Code generators are executed in the order in which they appear on the        * command line.        * If |insertion_point| is present, |name| must also be present.        *</pre>        *        *<code>optional string insertion_point = 2;</code>        */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getInsertionPointBytes
parameter_list|()
function_decl|;
comment|/**        *<pre>        * The file contents.        *</pre>        *        *<code>optional string content = 15;</code>        */
name|boolean
name|hasContent
parameter_list|()
function_decl|;
comment|/**        *<pre>        * The file contents.        *</pre>        *        *<code>optional string content = 15;</code>        */
name|java
operator|.
name|lang
operator|.
name|String
name|getContent
parameter_list|()
function_decl|;
comment|/**        *<pre>        * The file contents.        *</pre>        *        *<code>optional string content = 15;</code>        */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getContentBytes
parameter_list|()
function_decl|;
block|}
comment|/**      *<pre>      * Represents a single generated file.      *</pre>      *      * Protobuf type {@code google.protobuf.compiler.CodeGeneratorResponse.File}      */
specifier|public
specifier|static
specifier|final
class|class
name|File
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
implements|implements
comment|// @@protoc_insertion_point(message_implements:google.protobuf.compiler.CodeGeneratorResponse.File)
name|FileOrBuilder
block|{
comment|// Use File.newBuilder() to construct.
specifier|private
name|File
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
parameter_list|()
block|{
name|name_
operator|=
literal|""
expr_stmt|;
name|insertionPoint_
operator|=
literal|""
expr_stmt|;
name|content_
operator|=
literal|""
expr_stmt|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|unknownFields
return|;
block|}
specifier|private
name|File
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
name|this
argument_list|()
expr_stmt|;
name|int
name|mutable_bitField0_
init|=
literal|0
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tag
condition|)
block|{
case|case
literal|0
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
if|if
condition|(
operator|!
name|parseUnknownField
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|10
case|:
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
name|input
operator|.
name|readBytes
argument_list|()
decl_stmt|;
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|name_
operator|=
name|bs
expr_stmt|;
break|break;
block|}
case|case
literal|18
case|:
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
name|input
operator|.
name|readBytes
argument_list|()
decl_stmt|;
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|insertionPoint_
operator|=
name|bs
expr_stmt|;
break|break;
block|}
case|case
literal|122
case|:
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
name|input
operator|.
name|readBytes
argument_list|()
decl_stmt|;
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|content_
operator|=
name|bs
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
argument_list|(
name|e
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
operator|.
name|build
argument_list|()
expr_stmt|;
name|makeExtensionsImmutable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NAME_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
specifier|volatile
name|java
operator|.
name|lang
operator|.
name|Object
name|name_
decl_stmt|;
comment|/**        *<pre>        * The file name, relative to the output directory.  The name must not        * contain "." or ".." components and must be relative, not be absolute (so,        * the file cannot lie outside the output directory).  "/" must be used as        * the path separator, not "&#92;".        * If the name is omitted, the content will be appended to the previous        * file.  This allows the generator to break large files into small chunks,        * and allows the generated text to be streamed back to protoc so that large        * files need not reside completely in memory at one time.  Note that as of        * this writing protoc does not optimize for this -- it will read the entire        * CodeGeneratorResponse before writing files to disk.        *</pre>        *        *<code>optional string name = 1;</code>        */
specifier|public
name|boolean
name|hasName
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**        *<pre>        * The file name, relative to the output directory.  The name must not        * contain "." or ".." components and must be relative, not be absolute (so,        * the file cannot lie outside the output directory).  "/" must be used as        * the path separator, not "&#92;".        * If the name is omitted, the content will be appended to the previous        * file.  This allows the generator to break large files into small chunks,        * and allows the generated text to be streamed back to protoc so that large        * files need not reside completely in memory at one time.  Note that as of        * this writing protoc does not optimize for this -- it will read the entire        * CodeGeneratorResponse before writing files to disk.        *</pre>        *        *<code>optional string name = 1;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getName
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|name_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|name_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
comment|/**        *<pre>        * The file name, relative to the output directory.  The name must not        * contain "." or ".." components and must be relative, not be absolute (so,        * the file cannot lie outside the output directory).  "/" must be used as        * the path separator, not "&#92;".        * If the name is omitted, the content will be appended to the previous        * file.  This allows the generator to break large files into small chunks,        * and allows the generated text to be streamed back to protoc so that large        * files need not reside completely in memory at one time.  Note that as of        * this writing protoc does not optimize for this -- it will read the entire        * CodeGeneratorResponse before writing files to disk.        *</pre>        *        *<code>optional string name = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getNameBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|name_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|name_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|int
name|INSERTION_POINT_FIELD_NUMBER
init|=
literal|2
decl_stmt|;
specifier|private
specifier|volatile
name|java
operator|.
name|lang
operator|.
name|Object
name|insertionPoint_
decl_stmt|;
comment|/**        *<pre>        * If non-empty, indicates that the named file should already exist, and the        * content here is to be inserted into that file at a defined insertion        * point.  This feature allows a code generator to extend the output        * produced by another code generator.  The original generator may provide        * insertion points by placing special annotations in the file that look        * like:        *&#64;&#64;protoc_insertion_point(NAME)        * The annotation can have arbitrary text before and after it on the line,        * which allows it to be placed in a comment.  NAME should be replaced with        * an identifier naming the point -- this is what other generators will use        * as the insertion_point.  Code inserted at this point will be placed        * immediately above the line containing the insertion point (thus multiple        * insertions to the same point will come out in the order they were added).        * The double-&#64; is intended to make it unlikely that the generated code        * could contain things that look like insertion points by accident.        * For example, the C++ code generator places the following line in the        * .pb.h files that it generates:        *   //&#64;&#64;protoc_insertion_point(namespace_scope)        * This line appears within the scope of the file's package namespace, but        * outside of any particular class.  Another plugin can then specify the        * insertion_point "namespace_scope" to generate additional classes or        * other declarations that should be placed in this scope.        * Note that if the line containing the insertion point begins with        * whitespace, the same whitespace will be added to every line of the        * inserted text.  This is useful for languages like Python, where        * indentation matters.  In these languages, the insertion point comment        * should be indented the same amount as any inserted code will need to be        * in order to work correctly in that context.        * The code generator that generates the initial file and the one which        * inserts into it must both run as part of a single invocation of protoc.        * Code generators are executed in the order in which they appear on the        * command line.        * If |insertion_point| is present, |name| must also be present.        *</pre>        *        *<code>optional string insertion_point = 2;</code>        */
specifier|public
name|boolean
name|hasInsertionPoint
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**        *<pre>        * If non-empty, indicates that the named file should already exist, and the        * content here is to be inserted into that file at a defined insertion        * point.  This feature allows a code generator to extend the output        * produced by another code generator.  The original generator may provide        * insertion points by placing special annotations in the file that look        * like:        *&#64;&#64;protoc_insertion_point(NAME)        * The annotation can have arbitrary text before and after it on the line,        * which allows it to be placed in a comment.  NAME should be replaced with        * an identifier naming the point -- this is what other generators will use        * as the insertion_point.  Code inserted at this point will be placed        * immediately above the line containing the insertion point (thus multiple        * insertions to the same point will come out in the order they were added).        * The double-&#64; is intended to make it unlikely that the generated code        * could contain things that look like insertion points by accident.        * For example, the C++ code generator places the following line in the        * .pb.h files that it generates:        *   //&#64;&#64;protoc_insertion_point(namespace_scope)        * This line appears within the scope of the file's package namespace, but        * outside of any particular class.  Another plugin can then specify the        * insertion_point "namespace_scope" to generate additional classes or        * other declarations that should be placed in this scope.        * Note that if the line containing the insertion point begins with        * whitespace, the same whitespace will be added to every line of the        * inserted text.  This is useful for languages like Python, where        * indentation matters.  In these languages, the insertion point comment        * should be indented the same amount as any inserted code will need to be        * in order to work correctly in that context.        * The code generator that generates the initial file and the one which        * inserts into it must both run as part of a single invocation of protoc.        * Code generators are executed in the order in which they appear on the        * command line.        * If |insertion_point| is present, |name| must also be present.        *</pre>        *        *<code>optional string insertion_point = 2;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getInsertionPoint
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|insertionPoint_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|insertionPoint_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
comment|/**        *<pre>        * If non-empty, indicates that the named file should already exist, and the        * content here is to be inserted into that file at a defined insertion        * point.  This feature allows a code generator to extend the output        * produced by another code generator.  The original generator may provide        * insertion points by placing special annotations in the file that look        * like:        *&#64;&#64;protoc_insertion_point(NAME)        * The annotation can have arbitrary text before and after it on the line,        * which allows it to be placed in a comment.  NAME should be replaced with        * an identifier naming the point -- this is what other generators will use        * as the insertion_point.  Code inserted at this point will be placed        * immediately above the line containing the insertion point (thus multiple        * insertions to the same point will come out in the order they were added).        * The double-&#64; is intended to make it unlikely that the generated code        * could contain things that look like insertion points by accident.        * For example, the C++ code generator places the following line in the        * .pb.h files that it generates:        *   //&#64;&#64;protoc_insertion_point(namespace_scope)        * This line appears within the scope of the file's package namespace, but        * outside of any particular class.  Another plugin can then specify the        * insertion_point "namespace_scope" to generate additional classes or        * other declarations that should be placed in this scope.        * Note that if the line containing the insertion point begins with        * whitespace, the same whitespace will be added to every line of the        * inserted text.  This is useful for languages like Python, where        * indentation matters.  In these languages, the insertion point comment        * should be indented the same amount as any inserted code will need to be        * in order to work correctly in that context.        * The code generator that generates the initial file and the one which        * inserts into it must both run as part of a single invocation of protoc.        * Code generators are executed in the order in which they appear on the        * command line.        * If |insertion_point| is present, |name| must also be present.        *</pre>        *        *<code>optional string insertion_point = 2;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getInsertionPointBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|insertionPoint_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|insertionPoint_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|int
name|CONTENT_FIELD_NUMBER
init|=
literal|15
decl_stmt|;
specifier|private
specifier|volatile
name|java
operator|.
name|lang
operator|.
name|Object
name|content_
decl_stmt|;
comment|/**        *<pre>        * The file contents.        *</pre>        *        *<code>optional string content = 15;</code>        */
specifier|public
name|boolean
name|hasContent
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
return|;
block|}
comment|/**        *<pre>        * The file contents.        *</pre>        *        *<code>optional string content = 15;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getContent
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|content_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|content_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
comment|/**        *<pre>        * The file contents.        *</pre>        *        *<code>optional string content = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getContentBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|content_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|content_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
specifier|private
name|byte
name|memoizedIsInitialized
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
name|byte
name|isInitialized
init|=
name|memoizedIsInitialized
decl_stmt|;
if|if
condition|(
name|isInitialized
operator|==
literal|1
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|isInitialized
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|memoizedIsInitialized
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|writeString
argument_list|(
name|output
argument_list|,
literal|1
argument_list|,
name|name_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|writeString
argument_list|(
name|output
argument_list|,
literal|2
argument_list|,
name|insertionPoint_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|writeString
argument_list|(
name|output
argument_list|,
literal|15
argument_list|,
name|content_
argument_list|)
expr_stmt|;
block|}
name|unknownFields
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|computeStringSize
argument_list|(
literal|1
argument_list|,
name|name_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|computeStringSize
argument_list|(
literal|2
argument_list|,
name|insertionPoint_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|computeStringSize
argument_list|(
literal|15
argument_list|,
name|content_
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|unknownFields
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|memoizedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|java
operator|.
name|lang
operator|.
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|)
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|other
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|)
name|obj
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|=
name|result
operator|&&
operator|(
name|hasName
argument_list|()
operator|==
name|other
operator|.
name|hasName
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasName
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasInsertionPoint
argument_list|()
operator|==
name|other
operator|.
name|hasInsertionPoint
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasInsertionPoint
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getInsertionPoint
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getInsertionPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
operator|(
name|hasContent
argument_list|()
operator|==
name|other
operator|.
name|hasContent
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasContent
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getContent
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
name|unknownFields
operator|.
name|equals
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|memoizedHashCode
operator|!=
literal|0
condition|)
block|{
return|return
name|memoizedHashCode
return|;
block|}
name|int
name|hash
init|=
literal|41
decl_stmt|;
name|hash
operator|=
operator|(
literal|19
operator|*
name|hash
operator|)
operator|+
name|getDescriptorForType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasName
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|NAME_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasInsertionPoint
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|INSERTION_POINT_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getInsertionPoint
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasContent
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|CONTENT_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getContent
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|hash
operator|=
operator|(
literal|29
operator|*
name|hash
operator|)
operator|+
name|unknownFields
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|memoizedHashCode
operator|=
name|hash
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|prototype
parameter_list|)
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|this
operator|==
name|DEFAULT_INSTANCE
condition|?
operator|new
name|Builder
argument_list|()
else|:
operator|new
name|Builder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|Builder
name|newBuilderForType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|/**        *<pre>        * Represents a single generated file.        *</pre>        *        * Protobuf type {@code google.protobuf.compiler.CodeGeneratorResponse.File}        */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
implements|implements
comment|// @@protoc_insertion_point(builder_implements:google.protobuf.compiler.CodeGeneratorResponse.File)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
block|{
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Construct using org.apache.hadoop.hbase.shaded.com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File.newBuilder()
specifier|private
name|Builder
parameter_list|()
block|{
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeForceBuilderInitialization
parameter_list|()
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|alwaysUseFieldBuilders
condition|)
block|{           }
block|}
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|name_
operator|=
literal|""
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|insertionPoint_
operator|=
literal|""
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|content_
operator|=
literal|""
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_descriptor
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|build
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|buildPartial
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|from_bitField0_
init|=
name|bitField0_
decl_stmt|;
name|int
name|to_bitField0_
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|result
operator|.
name|name_
operator|=
name|name_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000002
expr_stmt|;
block|}
name|result
operator|.
name|insertionPoint_
operator|=
name|insertionPoint_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
name|result
operator|.
name|content_
operator|=
name|content_
expr_stmt|;
name|result
operator|.
name|bitField0_
operator|=
name|to_bitField0_
expr_stmt|;
name|onBuilt
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|setField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearOneof
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearOneof
argument_list|(
name|oneof
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|setRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setRepeatedField
argument_list|(
name|field
argument_list|,
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|addRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|addRepeatedField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
condition|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|getDefaultInstance
argument_list|()
condition|)
return|return
name|this
return|;
if|if
condition|(
name|other
operator|.
name|hasName
argument_list|()
condition|)
block|{
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|name_
operator|=
name|other
operator|.
name|name_
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasInsertionPoint
argument_list|()
condition|)
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|insertionPoint_
operator|=
name|other
operator|.
name|insertionPoint_
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasContent
argument_list|()
condition|)
block|{
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|content_
operator|=
name|other
operator|.
name|content_
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|parsedMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedMessage
operator|=
name|PARSER
operator|.
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|parsedMessage
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|)
name|e
operator|.
name|getUnfinishedMessage
argument_list|()
expr_stmt|;
throw|throw
name|e
operator|.
name|unwrapIOException
argument_list|()
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parsedMessage
operator|!=
literal|null
condition|)
block|{
name|mergeFrom
argument_list|(
name|parsedMessage
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|name_
init|=
literal|""
decl_stmt|;
comment|/**          *<pre>          * The file name, relative to the output directory.  The name must not          * contain "." or ".." components and must be relative, not be absolute (so,          * the file cannot lie outside the output directory).  "/" must be used as          * the path separator, not "&#92;".          * If the name is omitted, the content will be appended to the previous          * file.  This allows the generator to break large files into small chunks,          * and allows the generated text to be streamed back to protoc so that large          * files need not reside completely in memory at one time.  Note that as of          * this writing protoc does not optimize for this -- it will read the entire          * CodeGeneratorResponse before writing files to disk.          *</pre>          *          *<code>optional string name = 1;</code>          */
specifier|public
name|boolean
name|hasName
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**          *<pre>          * The file name, relative to the output directory.  The name must not          * contain "." or ".." components and must be relative, not be absolute (so,          * the file cannot lie outside the output directory).  "/" must be used as          * the path separator, not "&#92;".          * If the name is omitted, the content will be appended to the previous          * file.  This allows the generator to break large files into small chunks,          * and allows the generated text to be streamed back to protoc so that large          * files need not reside completely in memory at one time.  Note that as of          * this writing protoc does not optimize for this -- it will read the entire          * CodeGeneratorResponse before writing files to disk.          *</pre>          *          *<code>optional string name = 1;</code>          */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getName
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|name_
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|name_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
block|}
comment|/**          *<pre>          * The file name, relative to the output directory.  The name must not          * contain "." or ".." components and must be relative, not be absolute (so,          * the file cannot lie outside the output directory).  "/" must be used as          * the path separator, not "&#92;".          * If the name is omitted, the content will be appended to the previous          * file.  This allows the generator to break large files into small chunks,          * and allows the generated text to be streamed back to protoc so that large          * files need not reside completely in memory at one time.  Note that as of          * this writing protoc does not optimize for this -- it will read the entire          * CodeGeneratorResponse before writing files to disk.          *</pre>          *          *<code>optional string name = 1;</code>          */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getNameBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|name_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|name_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|/**          *<pre>          * The file name, relative to the output directory.  The name must not          * contain "." or ".." components and must be relative, not be absolute (so,          * the file cannot lie outside the output directory).  "/" must be used as          * the path separator, not "&#92;".          * If the name is omitted, the content will be appended to the previous          * file.  This allows the generator to break large files into small chunks,          * and allows the generated text to be streamed back to protoc so that large          * files need not reside completely in memory at one time.  Note that as of          * this writing protoc does not optimize for this -- it will read the entire          * CodeGeneratorResponse before writing files to disk.          *</pre>          *          *<code>optional string name = 1;</code>          */
specifier|public
name|Builder
name|setName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|name_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          *<pre>          * The file name, relative to the output directory.  The name must not          * contain "." or ".." components and must be relative, not be absolute (so,          * the file cannot lie outside the output directory).  "/" must be used as          * the path separator, not "&#92;".          * If the name is omitted, the content will be appended to the previous          * file.  This allows the generator to break large files into small chunks,          * and allows the generated text to be streamed back to protoc so that large          * files need not reside completely in memory at one time.  Note that as of          * this writing protoc does not optimize for this -- it will read the entire          * CodeGeneratorResponse before writing files to disk.          *</pre>          *          *<code>optional string name = 1;</code>          */
specifier|public
name|Builder
name|clearName
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|name_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          *<pre>          * The file name, relative to the output directory.  The name must not          * contain "." or ".." components and must be relative, not be absolute (so,          * the file cannot lie outside the output directory).  "/" must be used as          * the path separator, not "&#92;".          * If the name is omitted, the content will be appended to the previous          * file.  This allows the generator to break large files into small chunks,          * and allows the generated text to be streamed back to protoc so that large          * files need not reside completely in memory at one time.  Note that as of          * this writing protoc does not optimize for this -- it will read the entire          * CodeGeneratorResponse before writing files to disk.          *</pre>          *          *<code>optional string name = 1;</code>          */
specifier|public
name|Builder
name|setNameBytes
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|name_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|insertionPoint_
init|=
literal|""
decl_stmt|;
comment|/**          *<pre>          * If non-empty, indicates that the named file should already exist, and the          * content here is to be inserted into that file at a defined insertion          * point.  This feature allows a code generator to extend the output          * produced by another code generator.  The original generator may provide          * insertion points by placing special annotations in the file that look          * like:          *&#64;&#64;protoc_insertion_point(NAME)          * The annotation can have arbitrary text before and after it on the line,          * which allows it to be placed in a comment.  NAME should be replaced with          * an identifier naming the point -- this is what other generators will use          * as the insertion_point.  Code inserted at this point will be placed          * immediately above the line containing the insertion point (thus multiple          * insertions to the same point will come out in the order they were added).          * The double-&#64; is intended to make it unlikely that the generated code          * could contain things that look like insertion points by accident.          * For example, the C++ code generator places the following line in the          * .pb.h files that it generates:          *   //&#64;&#64;protoc_insertion_point(namespace_scope)          * This line appears within the scope of the file's package namespace, but          * outside of any particular class.  Another plugin can then specify the          * insertion_point "namespace_scope" to generate additional classes or          * other declarations that should be placed in this scope.          * Note that if the line containing the insertion point begins with          * whitespace, the same whitespace will be added to every line of the          * inserted text.  This is useful for languages like Python, where          * indentation matters.  In these languages, the insertion point comment          * should be indented the same amount as any inserted code will need to be          * in order to work correctly in that context.          * The code generator that generates the initial file and the one which          * inserts into it must both run as part of a single invocation of protoc.          * Code generators are executed in the order in which they appear on the          * command line.          * If |insertion_point| is present, |name| must also be present.          *</pre>          *          *<code>optional string insertion_point = 2;</code>          */
specifier|public
name|boolean
name|hasInsertionPoint
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**          *<pre>          * If non-empty, indicates that the named file should already exist, and the          * content here is to be inserted into that file at a defined insertion          * point.  This feature allows a code generator to extend the output          * produced by another code generator.  The original generator may provide          * insertion points by placing special annotations in the file that look          * like:          *&#64;&#64;protoc_insertion_point(NAME)          * The annotation can have arbitrary text before and after it on the line,          * which allows it to be placed in a comment.  NAME should be replaced with          * an identifier naming the point -- this is what other generators will use          * as the insertion_point.  Code inserted at this point will be placed          * immediately above the line containing the insertion point (thus multiple          * insertions to the same point will come out in the order they were added).          * The double-&#64; is intended to make it unlikely that the generated code          * could contain things that look like insertion points by accident.          * For example, the C++ code generator places the following line in the          * .pb.h files that it generates:          *   //&#64;&#64;protoc_insertion_point(namespace_scope)          * This line appears within the scope of the file's package namespace, but          * outside of any particular class.  Another plugin can then specify the          * insertion_point "namespace_scope" to generate additional classes or          * other declarations that should be placed in this scope.          * Note that if the line containing the insertion point begins with          * whitespace, the same whitespace will be added to every line of the          * inserted text.  This is useful for languages like Python, where          * indentation matters.  In these languages, the insertion point comment          * should be indented the same amount as any inserted code will need to be          * in order to work correctly in that context.          * The code generator that generates the initial file and the one which          * inserts into it must both run as part of a single invocation of protoc.          * Code generators are executed in the order in which they appear on the          * command line.          * If |insertion_point| is present, |name| must also be present.          *</pre>          *          *<code>optional string insertion_point = 2;</code>          */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getInsertionPoint
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|insertionPoint_
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|insertionPoint_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
block|}
comment|/**          *<pre>          * If non-empty, indicates that the named file should already exist, and the          * content here is to be inserted into that file at a defined insertion          * point.  This feature allows a code generator to extend the output          * produced by another code generator.  The original generator may provide          * insertion points by placing special annotations in the file that look          * like:          *&#64;&#64;protoc_insertion_point(NAME)          * The annotation can have arbitrary text before and after it on the line,          * which allows it to be placed in a comment.  NAME should be replaced with          * an identifier naming the point -- this is what other generators will use          * as the insertion_point.  Code inserted at this point will be placed          * immediately above the line containing the insertion point (thus multiple          * insertions to the same point will come out in the order they were added).          * The double-&#64; is intended to make it unlikely that the generated code          * could contain things that look like insertion points by accident.          * For example, the C++ code generator places the following line in the          * .pb.h files that it generates:          *   //&#64;&#64;protoc_insertion_point(namespace_scope)          * This line appears within the scope of the file's package namespace, but          * outside of any particular class.  Another plugin can then specify the          * insertion_point "namespace_scope" to generate additional classes or          * other declarations that should be placed in this scope.          * Note that if the line containing the insertion point begins with          * whitespace, the same whitespace will be added to every line of the          * inserted text.  This is useful for languages like Python, where          * indentation matters.  In these languages, the insertion point comment          * should be indented the same amount as any inserted code will need to be          * in order to work correctly in that context.          * The code generator that generates the initial file and the one which          * inserts into it must both run as part of a single invocation of protoc.          * Code generators are executed in the order in which they appear on the          * command line.          * If |insertion_point| is present, |name| must also be present.          *</pre>          *          *<code>optional string insertion_point = 2;</code>          */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getInsertionPointBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|insertionPoint_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|insertionPoint_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|/**          *<pre>          * If non-empty, indicates that the named file should already exist, and the          * content here is to be inserted into that file at a defined insertion          * point.  This feature allows a code generator to extend the output          * produced by another code generator.  The original generator may provide          * insertion points by placing special annotations in the file that look          * like:          *&#64;&#64;protoc_insertion_point(NAME)          * The annotation can have arbitrary text before and after it on the line,          * which allows it to be placed in a comment.  NAME should be replaced with          * an identifier naming the point -- this is what other generators will use          * as the insertion_point.  Code inserted at this point will be placed          * immediately above the line containing the insertion point (thus multiple          * insertions to the same point will come out in the order they were added).          * The double-&#64; is intended to make it unlikely that the generated code          * could contain things that look like insertion points by accident.          * For example, the C++ code generator places the following line in the          * .pb.h files that it generates:          *   //&#64;&#64;protoc_insertion_point(namespace_scope)          * This line appears within the scope of the file's package namespace, but          * outside of any particular class.  Another plugin can then specify the          * insertion_point "namespace_scope" to generate additional classes or          * other declarations that should be placed in this scope.          * Note that if the line containing the insertion point begins with          * whitespace, the same whitespace will be added to every line of the          * inserted text.  This is useful for languages like Python, where          * indentation matters.  In these languages, the insertion point comment          * should be indented the same amount as any inserted code will need to be          * in order to work correctly in that context.          * The code generator that generates the initial file and the one which          * inserts into it must both run as part of a single invocation of protoc.          * Code generators are executed in the order in which they appear on the          * command line.          * If |insertion_point| is present, |name| must also be present.          *</pre>          *          *<code>optional string insertion_point = 2;</code>          */
specifier|public
name|Builder
name|setInsertionPoint
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|insertionPoint_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          *<pre>          * If non-empty, indicates that the named file should already exist, and the          * content here is to be inserted into that file at a defined insertion          * point.  This feature allows a code generator to extend the output          * produced by another code generator.  The original generator may provide          * insertion points by placing special annotations in the file that look          * like:          *&#64;&#64;protoc_insertion_point(NAME)          * The annotation can have arbitrary text before and after it on the line,          * which allows it to be placed in a comment.  NAME should be replaced with          * an identifier naming the point -- this is what other generators will use          * as the insertion_point.  Code inserted at this point will be placed          * immediately above the line containing the insertion point (thus multiple          * insertions to the same point will come out in the order they were added).          * The double-&#64; is intended to make it unlikely that the generated code          * could contain things that look like insertion points by accident.          * For example, the C++ code generator places the following line in the          * .pb.h files that it generates:          *   //&#64;&#64;protoc_insertion_point(namespace_scope)          * This line appears within the scope of the file's package namespace, but          * outside of any particular class.  Another plugin can then specify the          * insertion_point "namespace_scope" to generate additional classes or          * other declarations that should be placed in this scope.          * Note that if the line containing the insertion point begins with          * whitespace, the same whitespace will be added to every line of the          * inserted text.  This is useful for languages like Python, where          * indentation matters.  In these languages, the insertion point comment          * should be indented the same amount as any inserted code will need to be          * in order to work correctly in that context.          * The code generator that generates the initial file and the one which          * inserts into it must both run as part of a single invocation of protoc.          * Code generators are executed in the order in which they appear on the          * command line.          * If |insertion_point| is present, |name| must also be present.          *</pre>          *          *<code>optional string insertion_point = 2;</code>          */
specifier|public
name|Builder
name|clearInsertionPoint
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|insertionPoint_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getInsertionPoint
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          *<pre>          * If non-empty, indicates that the named file should already exist, and the          * content here is to be inserted into that file at a defined insertion          * point.  This feature allows a code generator to extend the output          * produced by another code generator.  The original generator may provide          * insertion points by placing special annotations in the file that look          * like:          *&#64;&#64;protoc_insertion_point(NAME)          * The annotation can have arbitrary text before and after it on the line,          * which allows it to be placed in a comment.  NAME should be replaced with          * an identifier naming the point -- this is what other generators will use          * as the insertion_point.  Code inserted at this point will be placed          * immediately above the line containing the insertion point (thus multiple          * insertions to the same point will come out in the order they were added).          * The double-&#64; is intended to make it unlikely that the generated code          * could contain things that look like insertion points by accident.          * For example, the C++ code generator places the following line in the          * .pb.h files that it generates:          *   //&#64;&#64;protoc_insertion_point(namespace_scope)          * This line appears within the scope of the file's package namespace, but          * outside of any particular class.  Another plugin can then specify the          * insertion_point "namespace_scope" to generate additional classes or          * other declarations that should be placed in this scope.          * Note that if the line containing the insertion point begins with          * whitespace, the same whitespace will be added to every line of the          * inserted text.  This is useful for languages like Python, where          * indentation matters.  In these languages, the insertion point comment          * should be indented the same amount as any inserted code will need to be          * in order to work correctly in that context.          * The code generator that generates the initial file and the one which          * inserts into it must both run as part of a single invocation of protoc.          * Code generators are executed in the order in which they appear on the          * command line.          * If |insertion_point| is present, |name| must also be present.          *</pre>          *          *<code>optional string insertion_point = 2;</code>          */
specifier|public
name|Builder
name|setInsertionPointBytes
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|insertionPoint_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|content_
init|=
literal|""
decl_stmt|;
comment|/**          *<pre>          * The file contents.          *</pre>          *          *<code>optional string content = 15;</code>          */
specifier|public
name|boolean
name|hasContent
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
return|;
block|}
comment|/**          *<pre>          * The file contents.          *</pre>          *          *<code>optional string content = 15;</code>          */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getContent
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|content_
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|content_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
block|}
comment|/**          *<pre>          * The file contents.          *</pre>          *          *<code>optional string content = 15;</code>          */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getContentBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|content_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|content_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|/**          *<pre>          * The file contents.          *</pre>          *          *<code>optional string content = 15;</code>          */
specifier|public
name|Builder
name|setContent
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|content_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          *<pre>          * The file contents.          *</pre>          *          *<code>optional string content = 15;</code>          */
specifier|public
name|Builder
name|clearContent
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|content_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          *<pre>          * The file contents.          *</pre>          *          *<code>optional string content = 15;</code>          */
specifier|public
name|Builder
name|setContentBytes
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|content_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|Builder
name|setUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|setUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|Builder
name|mergeUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|mergeUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
comment|// @@protoc_insertion_point(builder_scope:google.protobuf.compiler.CodeGeneratorResponse.File)
block|}
comment|// @@protoc_insertion_point(class_scope:google.protobuf.compiler.CodeGeneratorResponse.File)
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|DEFAULT_INSTANCE
decl_stmt|;
static|static
block|{
name|DEFAULT_INSTANCE
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Deprecated
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|File
argument_list|>
name|PARSER
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractParser
argument_list|<
name|File
argument_list|>
argument_list|()
block|{
specifier|public
name|File
name|parsePartialFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|File
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|File
argument_list|>
name|parser
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|File
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ERROR_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
specifier|volatile
name|java
operator|.
name|lang
operator|.
name|Object
name|error_
decl_stmt|;
comment|/**      *<pre>      * Error message.  If non-empty, code generation failed.  The plugin process      * should exit with status code zero even if it reports an error in this way.      * This should be used to indicate errors in .proto files which prevent the      * code generator from generating correct code.  Errors which indicate a      * problem in protoc itself -- such as the input CodeGeneratorRequest being      * unparseable -- should be reported by writing a message to stderr and      * exiting with a non-zero status code.      *</pre>      *      *<code>optional string error = 1;</code>      */
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**      *<pre>      * Error message.  If non-empty, code generation failed.  The plugin process      * should exit with status code zero even if it reports an error in this way.      * This should be used to indicate errors in .proto files which prevent the      * code generator from generating correct code.  Errors which indicate a      * problem in protoc itself -- such as the input CodeGeneratorRequest being      * unparseable -- should be reported by writing a message to stderr and      * exiting with a non-zero status code.      *</pre>      *      *<code>optional string error = 1;</code>      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getError
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|error_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|error_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
comment|/**      *<pre>      * Error message.  If non-empty, code generation failed.  The plugin process      * should exit with status code zero even if it reports an error in this way.      * This should be used to indicate errors in .proto files which prevent the      * code generator from generating correct code.  Errors which indicate a      * problem in protoc itself -- such as the input CodeGeneratorRequest being      * unparseable -- should be reported by writing a message to stderr and      * exiting with a non-zero status code.      *</pre>      *      *<code>optional string error = 1;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getErrorBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|error_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|error_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|int
name|FILE_FIELD_NUMBER
init|=
literal|15
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|>
name|file_
decl_stmt|;
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|>
name|getFileList
parameter_list|()
block|{
return|return
name|file_
return|;
block|}
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
argument_list|>
name|getFileOrBuilderList
parameter_list|()
block|{
return|return
name|file_
return|;
block|}
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
specifier|public
name|int
name|getFileCount
parameter_list|()
block|{
return|return
name|file_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|getFile
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|file_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
name|getFileOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|file_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|private
name|byte
name|memoizedIsInitialized
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
name|byte
name|isInitialized
init|=
name|memoizedIsInitialized
decl_stmt|;
if|if
condition|(
name|isInitialized
operator|==
literal|1
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|isInitialized
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|memoizedIsInitialized
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|writeString
argument_list|(
name|output
argument_list|,
literal|1
argument_list|,
name|error_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|file_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeMessage
argument_list|(
literal|15
argument_list|,
name|file_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unknownFields
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|computeStringSize
argument_list|(
literal|1
argument_list|,
name|error_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|file_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeMessageSize
argument_list|(
literal|15
argument_list|,
name|file_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|unknownFields
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|memoizedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|java
operator|.
name|lang
operator|.
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|)
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|other
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|)
name|obj
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|=
name|result
operator|&&
operator|(
name|hasError
argument_list|()
operator|==
name|other
operator|.
name|hasError
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|hasError
argument_list|()
condition|)
block|{
name|result
operator|=
name|result
operator|&&
name|getError
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|result
operator|&&
name|getFileList
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getFileList
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|&&
name|unknownFields
operator|.
name|equals
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|memoizedHashCode
operator|!=
literal|0
condition|)
block|{
return|return
name|memoizedHashCode
return|;
block|}
name|int
name|hash
init|=
literal|41
decl_stmt|;
name|hash
operator|=
operator|(
literal|19
operator|*
name|hash
operator|)
operator|+
name|getDescriptorForType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasError
argument_list|()
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|ERROR_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getError
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getFileCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hash
operator|=
operator|(
literal|37
operator|*
name|hash
operator|)
operator|+
name|FILE_FIELD_NUMBER
expr_stmt|;
name|hash
operator|=
operator|(
literal|53
operator|*
name|hash
operator|)
operator|+
name|getFileList
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|hash
operator|=
operator|(
literal|29
operator|*
name|hash
operator|)
operator|+
name|unknownFields
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|memoizedHashCode
operator|=
name|hash
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseDelimitedWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parseFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|parseWithIOException
argument_list|(
name|PARSER
argument_list|,
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|prototype
parameter_list|)
block|{
return|return
name|DEFAULT_INSTANCE
operator|.
name|toBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|this
operator|==
name|DEFAULT_INSTANCE
condition|?
operator|new
name|Builder
argument_list|()
else|:
operator|new
name|Builder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|Builder
name|newBuilderForType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      *<pre>      * The plugin writes an encoded CodeGeneratorResponse to stdout.      *</pre>      *      * Protobuf type {@code google.protobuf.compiler.CodeGeneratorResponse}      */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
implements|implements
comment|// @@protoc_insertion_point(builder_implements:google.protobuf.compiler.CodeGeneratorResponse)
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponseOrBuilder
block|{
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_descriptor
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Construct using org.apache.hadoop.hbase.shaded.com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.newBuilder()
specifier|private
name|Builder
parameter_list|()
block|{
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeForceBuilderInitialization
parameter_list|()
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|alwaysUseFieldBuilders
condition|)
block|{
name|getFileFieldBuilder
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|error_
operator|=
literal|""
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
name|file_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_descriptor
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|build
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|buildPartial
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|from_bitField0_
init|=
name|bitField0_
decl_stmt|;
name|int
name|to_bitField0_
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|result
operator|.
name|error_
operator|=
name|error_
expr_stmt|;
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|file_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|file_
argument_list|)
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|file_
operator|=
name|file_
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|file_
operator|=
name|fileBuilder_
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|bitField0_
operator|=
name|to_bitField0_
expr_stmt|;
name|onBuilt
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|setField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|clearOneof
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|OneofDescriptor
name|oneof
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|clearOneof
argument_list|(
name|oneof
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|setRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|setRepeatedField
argument_list|(
name|field
argument_list|,
name|index
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|addRepeatedField
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FieldDescriptor
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|super
operator|.
name|addRepeatedField
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
condition|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|getDefaultInstance
argument_list|()
condition|)
return|return
name|this
return|;
if|if
condition|(
name|other
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|error_
operator|=
name|other
operator|.
name|error_
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|file_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|file_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|file_
operator|=
name|other
operator|.
name|file_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|file_
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|file_
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|file_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|fileBuilder_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fileBuilder_
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|fileBuilder_
operator|=
literal|null
expr_stmt|;
name|file_
operator|=
name|other
operator|.
name|file_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|fileBuilder_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|alwaysUseFieldBuilders
condition|?
name|getFileFieldBuilder
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|addAllMessages
argument_list|(
name|other
operator|.
name|file_
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|unknownFields
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|parsedMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedMessage
operator|=
name|PARSER
operator|.
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|parsedMessage
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|)
name|e
operator|.
name|getUnfinishedMessage
argument_list|()
expr_stmt|;
throw|throw
name|e
operator|.
name|unwrapIOException
argument_list|()
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parsedMessage
operator|!=
literal|null
condition|)
block|{
name|mergeFrom
argument_list|(
name|parsedMessage
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|error_
init|=
literal|""
decl_stmt|;
comment|/**        *<pre>        * Error message.  If non-empty, code generation failed.  The plugin process        * should exit with status code zero even if it reports an error in this way.        * This should be used to indicate errors in .proto files which prevent the        * code generator from generating correct code.  Errors which indicate a        * problem in protoc itself -- such as the input CodeGeneratorRequest being        * unparseable -- should be reported by writing a message to stderr and        * exiting with a non-zero status code.        *</pre>        *        *<code>optional string error = 1;</code>        */
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**        *<pre>        * Error message.  If non-empty, code generation failed.  The plugin process        * should exit with status code zero even if it reports an error in this way.        * This should be used to indicate errors in .proto files which prevent the        * code generator from generating correct code.  Errors which indicate a        * problem in protoc itself -- such as the input CodeGeneratorRequest being        * unparseable -- should be reported by writing a message to stderr and        * exiting with a non-zero status code.        *</pre>        *        *<code>optional string error = 1;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getError
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|error_
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
operator|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|error_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<pre>        * Error message.  If non-empty, code generation failed.  The plugin process        * should exit with status code zero even if it reports an error in this way.        * This should be used to indicate errors in .proto files which prevent the        * code generator from generating correct code.  Errors which indicate a        * problem in protoc itself -- such as the input CodeGeneratorRequest being        * unparseable -- should be reported by writing a message to stderr and        * exiting with a non-zero status code.        *</pre>        *        *<code>optional string error = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getErrorBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|error_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|String
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|error_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<pre>        * Error message.  If non-empty, code generation failed.  The plugin process        * should exit with status code zero even if it reports an error in this way.        * This should be used to indicate errors in .proto files which prevent the        * code generator from generating correct code.  Errors which indicate a        * problem in protoc itself -- such as the input CodeGeneratorRequest being        * unparseable -- should be reported by writing a message to stderr and        * exiting with a non-zero status code.        *</pre>        *        *<code>optional string error = 1;</code>        */
specifier|public
name|Builder
name|setError
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|error_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * Error message.  If non-empty, code generation failed.  The plugin process        * should exit with status code zero even if it reports an error in this way.        * This should be used to indicate errors in .proto files which prevent the        * code generator from generating correct code.  Errors which indicate a        * problem in protoc itself -- such as the input CodeGeneratorRequest being        * unparseable -- should be reported by writing a message to stderr and        * exiting with a non-zero status code.        *</pre>        *        *<code>optional string error = 1;</code>        */
specifier|public
name|Builder
name|clearError
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|error_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getError
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<pre>        * Error message.  If non-empty, code generation failed.  The plugin process        * should exit with status code zero even if it reports an error in this way.        * This should be used to indicate errors in .proto files which prevent the        * code generator from generating correct code.  Errors which indicate a        * problem in protoc itself -- such as the input CodeGeneratorRequest being        * unparseable -- should be reported by writing a message to stderr and        * exiting with a non-zero status code.        *</pre>        *        *<code>optional string error = 1;</code>        */
specifier|public
name|Builder
name|setErrorBytes
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|error_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|>
name|file_
init|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|void
name|ensureFileIsMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|file_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|>
argument_list|(
name|file_
argument_list|)
expr_stmt|;
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilderV3
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
argument_list|>
name|fileBuilder_
decl_stmt|;
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|>
name|getFileList
parameter_list|()
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|file_
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|fileBuilder_
operator|.
name|getMessageList
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|int
name|getFileCount
parameter_list|()
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|file_
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|fileBuilder_
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|getFile
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|file_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|fileBuilder_
operator|.
name|getMessage
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|setFile
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|value
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|file_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|setFile
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|file_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|addFile
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|value
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|file_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|addMessage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|addFile
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
name|value
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|file_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|addFile
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|file_
operator|.
name|add
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|addMessage
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|addFile
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|file_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|addAllFile
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractMessageLite
operator|.
name|Builder
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|file_
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|addAllMessages
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|clearFile
parameter_list|()
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
name|file_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|Builder
name|removeFile
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureFileIsMutable
argument_list|()
expr_stmt|;
name|file_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fileBuilder_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
name|getFileBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getFileFieldBuilder
argument_list|()
operator|.
name|getBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
name|getFileOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|file_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|fileBuilder_
operator|.
name|getMessageOrBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
argument_list|>
name|getFileOrBuilderList
parameter_list|()
block|{
if|if
condition|(
name|fileBuilder_
operator|!=
literal|null
condition|)
block|{
return|return
name|fileBuilder_
operator|.
name|getMessageOrBuilderList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|file_
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
name|addFileBuilder
parameter_list|()
block|{
return|return
name|getFileFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
name|addFileBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getFileFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|index
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
argument_list|>
name|getFileBuilderList
parameter_list|()
block|{
return|return
name|getFileFieldBuilder
argument_list|()
operator|.
name|getBuilderList
argument_list|()
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilderV3
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
argument_list|>
name|getFileFieldBuilder
parameter_list|()
block|{
if|if
condition|(
name|fileBuilder_
operator|==
literal|null
condition|)
block|{
name|fileBuilder_
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilderV3
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|File
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
operator|.
name|FileOrBuilder
argument_list|>
argument_list|(
name|file_
argument_list|,
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
argument_list|,
name|getParentForChildren
argument_list|()
argument_list|,
name|isClean
argument_list|()
argument_list|)
expr_stmt|;
name|file_
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|fileBuilder_
return|;
block|}
specifier|public
specifier|final
name|Builder
name|setUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|setUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|Builder
name|mergeUnknownFields
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
parameter_list|)
block|{
return|return
name|super
operator|.
name|mergeUnknownFields
argument_list|(
name|unknownFields
argument_list|)
return|;
block|}
comment|// @@protoc_insertion_point(builder_scope:google.protobuf.compiler.CodeGeneratorResponse)
block|}
comment|// @@protoc_insertion_point(class_scope:google.protobuf.compiler.CodeGeneratorResponse)
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|DEFAULT_INSTANCE
decl_stmt|;
static|static
block|{
name|DEFAULT_INSTANCE
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Deprecated
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|CodeGeneratorResponse
argument_list|>
name|PARSER
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractParser
argument_list|<
name|CodeGeneratorResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|CodeGeneratorResponse
name|parsePartialFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|CodeGeneratorResponse
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|CodeGeneratorResponse
argument_list|>
name|parser
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|CodeGeneratorResponse
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|compiler
operator|.
name|PluginProtos
operator|.
name|CodeGeneratorResponse
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|DEFAULT_INSTANCE
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_descriptor
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_fieldAccessorTable
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_descriptor
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_fieldAccessorTable
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_descriptor
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_fieldAccessorTable
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|descriptor
return|;
block|}
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|descriptor
decl_stmt|;
static|static
block|{
name|java
operator|.
name|lang
operator|.
name|String
index|[]
name|descriptorData
init|=
block|{
literal|"\n%google/protobuf/compiler/plugin.proto\022"
operator|+
literal|"\030google.protobuf.compiler\032 google/protob"
operator|+
literal|"uf/descriptor.proto\"}\n\024CodeGeneratorRequ"
operator|+
literal|"est\022\030\n\020file_to_generate\030\001 \003(\t\022\021\n\tparamet"
operator|+
literal|"er\030\002 \001(\t\0228\n\nproto_file\030\017 \003(\0132$.google.pr"
operator|+
literal|"otobuf.FileDescriptorProto\"\252\001\n\025CodeGener"
operator|+
literal|"atorResponse\022\r\n\005error\030\001 \001(\t\022B\n\004file\030\017 \003("
operator|+
literal|"\01324.google.protobuf.compiler.CodeGenerat"
operator|+
literal|"orResponse.File\032>\n\004File\022\014\n\004name\030\001 \001(\t\022\027\n"
operator|+
literal|"\017insertion_point\030\002 \001(\t\022\017\n\007content\030\017 \001(\tB"
block|,
literal|"7\n\034com.google.protobuf.compilerB\014PluginP"
operator|+
literal|"rotosZ\tplugin_go"
block|}
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|InternalDescriptorAssigner
name|assigner
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|InternalDescriptorAssigner
argument_list|()
block|{
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistry
name|assignDescriptors
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|root
parameter_list|)
block|{
name|descriptor
operator|=
name|root
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|internalBuildGeneratedFileFrom
argument_list|(
name|descriptorData
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
index|[]
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|getDescriptor
argument_list|()
block|,         }
argument_list|,
name|assigner
argument_list|)
expr_stmt|;
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_descriptor
operator|=
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_fieldAccessorTable
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
argument_list|(
name|internal_static_google_protobuf_compiler_CodeGeneratorRequest_descriptor
argument_list|,
operator|new
name|java
operator|.
name|lang
operator|.
name|String
index|[]
block|{
literal|"FileToGenerate"
block|,
literal|"Parameter"
block|,
literal|"ProtoFile"
block|, }
argument_list|)
expr_stmt|;
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_descriptor
operator|=
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_fieldAccessorTable
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
argument_list|(
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_descriptor
argument_list|,
operator|new
name|java
operator|.
name|lang
operator|.
name|String
index|[]
block|{
literal|"Error"
block|,
literal|"File"
block|, }
argument_list|)
expr_stmt|;
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_descriptor
operator|=
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_descriptor
operator|.
name|getNestedTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_fieldAccessorTable
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
operator|.
name|FieldAccessorTable
argument_list|(
name|internal_static_google_protobuf_compiler_CodeGeneratorResponse_File_descriptor
argument_list|,
operator|new
name|java
operator|.
name|lang
operator|.
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"InsertionPoint"
block|,
literal|"Content"
block|, }
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|DescriptorProtos
operator|.
name|getDescriptor
argument_list|()
expr_stmt|;
block|}
comment|// @@protoc_insertion_point(outer_class_scope)
block|}
end_class

end_unit

