begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|tableindexed
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ColumnNameParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|tableindexed
operator|.
name|IndexMaintenanceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Extension of HBaseAdmin that creates indexed tables.  *   */
end_comment

begin_class
specifier|public
class|class
name|IndexedTableAdmin
extends|extends
name|HBaseAdmin
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IndexedTableAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Constructor    *     * @param conf Configuration object    * @throws MasterNotRunningException    */
specifier|public
name|IndexedTableAdmin
parameter_list|(
name|HBaseConfiguration
name|conf
parameter_list|)
throws|throws
name|MasterNotRunningException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new indexed table    *     * @param desc table descriptor for table    *     * @throws IOException    */
specifier|public
name|void
name|createIndexedTable
parameter_list|(
name|IndexedTableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|createTable
argument_list|(
name|desc
operator|.
name|getBaseTableDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|createIndexTables
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createIndexTables
parameter_list|(
name|IndexedTableDescriptor
name|indexDesc
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|baseTableName
init|=
name|indexDesc
operator|.
name|getBaseTableDescriptor
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexSpecification
name|indexSpec
range|:
name|indexDesc
operator|.
name|getIndexes
argument_list|()
control|)
block|{
name|HTableDescriptor
name|indexTableDesc
init|=
name|createIndexTableDesc
argument_list|(
name|baseTableName
argument_list|,
name|indexSpec
argument_list|)
decl_stmt|;
name|super
operator|.
name|createTable
argument_list|(
name|indexTableDesc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|HTableDescriptor
name|createIndexTableDesc
parameter_list|(
name|byte
index|[]
name|baseTableName
parameter_list|,
name|IndexSpecification
name|indexSpec
parameter_list|)
throws|throws
name|ColumnNameParseException
block|{
name|HTableDescriptor
name|indexTableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|indexSpec
operator|.
name|getIndexedTableName
argument_list|(
name|baseTableName
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|families
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|families
operator|.
name|add
argument_list|(
name|IndexedTable
operator|.
name|INDEX_COL_FAMILY_NAME
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|indexSpec
operator|.
name|getAllColumns
argument_list|()
control|)
block|{
name|families
operator|.
name|add
argument_list|(
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|colFamily
range|:
name|families
control|)
block|{
name|indexTableDesc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|colFamily
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|indexTableDesc
return|;
block|}
comment|/** Remove an index for a table.     * @throws IOException     *     */
specifier|public
name|void
name|removeIndex
parameter_list|(
name|byte
index|[]
name|baseTableName
parameter_list|,
name|String
name|indexId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|disableTable
argument_list|(
name|baseTableName
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
name|super
operator|.
name|getTableDescriptor
argument_list|(
name|baseTableName
argument_list|)
decl_stmt|;
name|IndexedTableDescriptor
name|indexDesc
init|=
operator|new
name|IndexedTableDescriptor
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|IndexSpecification
name|spec
init|=
name|indexDesc
operator|.
name|getIndex
argument_list|(
name|indexId
argument_list|)
decl_stmt|;
name|indexDesc
operator|.
name|removeIndex
argument_list|(
name|indexId
argument_list|)
expr_stmt|;
name|this
operator|.
name|disableTable
argument_list|(
name|spec
operator|.
name|getIndexedTableName
argument_list|(
name|baseTableName
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteTable
argument_list|(
name|spec
operator|.
name|getIndexedTableName
argument_list|(
name|baseTableName
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|modifyTable
argument_list|(
name|baseTableName
argument_list|,
name|desc
argument_list|)
expr_stmt|;
name|super
operator|.
name|enableTable
argument_list|(
name|baseTableName
argument_list|)
expr_stmt|;
block|}
comment|/** Add an index to a table. */
specifier|public
name|void
name|addIndex
parameter_list|(
name|byte
index|[]
name|baseTableName
parameter_list|,
name|IndexSpecification
name|indexSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Adding index to existing table ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|baseTableName
argument_list|)
operator|+
literal|"], this may take a long time"
argument_list|)
expr_stmt|;
comment|// TODO, make table read-only
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not putting table in readonly, if its being written to, the index may get out of sync"
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|indexTableDesc
init|=
name|createIndexTableDesc
argument_list|(
name|baseTableName
argument_list|,
name|indexSpec
argument_list|)
decl_stmt|;
name|super
operator|.
name|createTable
argument_list|(
name|indexTableDesc
argument_list|)
expr_stmt|;
name|super
operator|.
name|disableTable
argument_list|(
name|baseTableName
argument_list|)
expr_stmt|;
name|IndexedTableDescriptor
name|indexDesc
init|=
operator|new
name|IndexedTableDescriptor
argument_list|(
name|super
operator|.
name|getTableDescriptor
argument_list|(
name|baseTableName
argument_list|)
argument_list|)
decl_stmt|;
name|indexDesc
operator|.
name|addIndex
argument_list|(
name|indexSpec
argument_list|)
expr_stmt|;
name|super
operator|.
name|modifyTable
argument_list|(
name|baseTableName
argument_list|,
name|indexDesc
operator|.
name|getBaseTableDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|enableTable
argument_list|(
name|baseTableName
argument_list|)
expr_stmt|;
name|reIndexTable
argument_list|(
name|baseTableName
argument_list|,
name|indexSpec
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|reIndexTable
parameter_list|(
name|byte
index|[]
name|baseTableName
parameter_list|,
name|IndexSpecification
name|indexSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|baseTable
init|=
operator|new
name|HTable
argument_list|(
name|baseTableName
argument_list|)
decl_stmt|;
name|HTable
name|indexTable
init|=
operator|new
name|HTable
argument_list|(
name|indexSpec
operator|.
name|getIndexedTableName
argument_list|(
name|baseTableName
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|baseScan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|column
range|:
name|indexSpec
operator|.
name|getAllColumns
argument_list|()
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|baseScan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseScan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Result
name|result
range|:
name|baseTable
operator|.
name|getScanner
argument_list|(
name|baseScan
argument_list|)
control|)
block|{
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|columnValues
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|result
operator|.
name|sorted
argument_list|()
control|)
block|{
name|columnValues
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|COLUMN_FAMILY_DELIM_ARRAY
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|IndexMaintenanceUtils
operator|.
name|doesApplyToIndex
argument_list|(
name|indexSpec
argument_list|,
name|columnValues
argument_list|)
condition|)
block|{
name|Put
name|indexUpdate
init|=
name|IndexMaintenanceUtils
operator|.
name|createIndexUpdate
argument_list|(
name|indexSpec
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|indexTable
operator|.
name|put
argument_list|(
name|indexUpdate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

