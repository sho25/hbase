begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_comment
comment|/**  * Interface for transactional region servers.  *   *<p>  * NOTE: if you change the interface, you must change the RPC version number in  * HBaseRPCProtocolVersion  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|TransactionalRegionInterface
extends|extends
name|HRegionInterface
block|{
comment|/** Status code representing a transaction that can be committed. */
name|int
name|COMMIT_OK
init|=
literal|1
decl_stmt|;
comment|/** Status code representing a read-only transaction that can be committed. */
name|int
name|COMMIT_OK_READ_ONLY
init|=
literal|2
decl_stmt|;
comment|/** Status code representing a transaction that cannot be committed. */
name|int
name|COMMIT_UNSUCESSFUL
init|=
literal|3
decl_stmt|;
comment|/**    * Sent to initiate a transaction.    *     * @param transactionId    * @param regionName name of region    * @throws IOException    */
name|void
name|beginTransaction
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Perform a transactional Get operation.    * @param regionName name of region to get from    * @param get Get operation    * @return Result    * @throws IOException    */
specifier|public
name|Result
name|get
parameter_list|(
name|long
name|transactionId
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|,
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Transactional put data into the specified region     * @param regionName    * @param put the data to be put    * @throws IOException    */
specifier|public
name|void
name|put
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Put an array of puts into the specified region    * @param regionName    * @param puts    * @return result    * @throws IOException    */
specifier|public
name|int
name|put
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|Put
index|[]
name|puts
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Deletes all the KeyValues that match those found in the Delete object,     * if their ts<= to the Delete. In case of a delete with a specific ts it    * only deletes that specific KeyValue.    * @param regionName    * @param delete    * @throws IOException    */
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|//
comment|// remote scanner interface
comment|//
comment|/**    * Opens a remote transactional scanner with a RowFilter.    *     * @param regionName name of region to scan    * @param scan configured scan object    * @return scannerId scanner identifier used in other calls    * @throws IOException    */
specifier|public
name|long
name|openScanner
parameter_list|(
name|long
name|transactionId
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Ask if we can commit the given transaction.    *     * @param regionName    * @param transactionId    * @return status of COMMIT_OK, COMMIT_READ_ONLY, or COMMIT_UNSUSESSFULL    * @throws IOException    */
name|int
name|commitRequest
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Try to commit the given transaction. This is used when there is only one    * participating region.    *     * @param regionName    * @param transactionId    * @return true if committed    * @throws IOException    */
name|boolean
name|commitIfPossible
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Commit the transaction.    *     * @param regionName    * @param transactionId    * @throws IOException    */
name|void
name|commit
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Abort the transaction.    *     * @param regionName    * @param transactionId    * @throws IOException    */
name|void
name|abort
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|long
name|transactionId
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

