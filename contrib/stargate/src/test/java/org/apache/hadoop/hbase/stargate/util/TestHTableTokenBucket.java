begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|MiniClusterTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|util
operator|.
name|HTableTokenBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_class
specifier|public
class|class
name|TestHTableTokenBucket
extends|extends
name|MiniClusterTestBase
block|{
specifier|static
specifier|final
name|String
name|TABLE
init|=
literal|"users"
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|USER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|TOKENS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tokens"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|TOKENS_RATE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tokens.rate"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|TOKENS_SIZE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tokens.size"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|USER_TOKEN
init|=
literal|"da4829144e3a2febd909a6e1b4ed7cfa"
decl_stmt|;
specifier|static
specifier|final
name|String
name|USER_USERNAME
init|=
literal|"testUser"
decl_stmt|;
specifier|static
specifier|final
name|double
name|RATE
init|=
literal|1
decl_stmt|;
comment|// per second
specifier|static
specifier|final
name|long
name|SIZE
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|TABLE
argument_list|)
condition|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TABLE
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|USER_TOKEN
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|USER
argument_list|,
name|NAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|USER_USERNAME
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|USER
argument_list|,
name|TOKENS_RATE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RATE
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|USER
argument_list|,
name|TOKENS_SIZE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTokenBucketConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableTokenBucket
name|tb
init|=
operator|new
name|HTableTokenBucket
argument_list|(
name|conf
argument_list|,
name|TABLE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|USER_TOKEN
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tb
operator|.
name|getRate
argument_list|()
argument_list|,
name|RATE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tb
operator|.
name|getSize
argument_list|()
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTokenBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableTokenBucket
name|tb
init|=
operator|new
name|HTableTokenBucket
argument_list|(
name|conf
argument_list|,
name|TABLE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|USER_TOKEN
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|5
operator|&&
name|last
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|avail
init|=
name|tb
operator|.
name|available
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"bucket did not increment"
argument_list|,
name|avail
operator|>
name|last
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bucket updated too quickly"
argument_list|,
name|avail
operator|-
name|last
operator|<
literal|3
argument_list|)
expr_stmt|;
name|last
operator|=
name|avail
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"bucket did not fill"
argument_list|,
name|last
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bucket overfilled"
argument_list|,
name|last
operator|==
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

