begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A HTable-backed token bucket.  *<p>  * Can be configured with<t>rate</t>, the number of tokens to add to the  * bucket each second, and<t>size</t>, the maximum number of tokens allowed  * to burst. Configuration is stored in the HTable adjacent to the token  * count and is periodically refreshed.  *<p>  * Expected columns:  *<p>  *<ul>  *<li>user:  *<ul>  *<li>user:tokens</li>  *<li>user:tokens.rate</li>  *<li>user:tokens.size</li>  *</ul></li>  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|HTableTokenBucket
implements|implements
name|Constants
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HTableTokenBucket
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|USER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|TOKENS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tokens"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|TOKENS_RATE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tokens.rate"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|TOKENS_SIZE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tokens.size"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|String
name|tableName
decl_stmt|;
name|HTable
name|table
decl_stmt|;
name|byte
index|[]
name|row
decl_stmt|;
name|int
name|tokens
decl_stmt|;
name|double
name|rate
init|=
literal|10.0
decl_stmt|;
comment|// default, 10 ops added per second
name|int
name|size
init|=
literal|100
decl_stmt|;
comment|// burst
name|long
name|lastUpdated
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|configUpdateInterval
decl_stmt|;
name|long
name|lastConfigUpdated
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|void
name|updateConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|USER
argument_list|,
name|TOKENS_RATE
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|USER
argument_list|,
name|TOKENS_SIZE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|USER
argument_list|,
name|TOKENS_RATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rate
operator|=
operator|(
name|int
operator|)
name|Bytes
operator|.
name|toDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|USER
argument_list|,
name|TOKENS_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|size
operator|=
operator|(
name|int
operator|)
name|Bytes
operator|.
name|toLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Constructor    * @param conf configuration    * @param row row key for user    * @throws IOException    */
specifier|public
name|HTableTokenBucket
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"stargate.tb.htable.name"
argument_list|,
name|USERS_TABLE
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param conf configuration    * @param tableName the table to use    * @param row row key for user    * @throws IOException    */
specifier|public
name|HTableTokenBucket
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|configUpdateInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"stargate.tb.update.interval"
argument_list|,
literal|1000
operator|*
literal|60
argument_list|)
expr_stmt|;
name|updateConfig
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return the number of remaining tokens in the bucket (roughly)    * @throws IOException    */
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|lastConfigUpdated
operator|>
name|configUpdateInterval
condition|)
block|{
try|try
block|{
name|updateConfig
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastConfigUpdated
operator|=
name|now
expr_stmt|;
block|}
comment|// We can't simply use incrementColumnValue here because the timestamp of
comment|// the keyvalue will not be changed as long as it remains in memstore, so
comment|// there will be some unavoidable contention on the row if multiple
comment|// Stargate instances are concurrently serving the same user, and three
comment|// more round trips than otherwise.
name|RowLock
name|rl
init|=
name|table
operator|.
name|lockRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
try|try
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|,
name|rl
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|USER
argument_list|,
name|TOKENS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|kvs
operator|!=
literal|null
operator|&&
operator|!
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|KeyValue
name|kv
init|=
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tokens
operator|=
operator|(
name|int
operator|)
name|Bytes
operator|.
name|toLong
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|lastUpdated
operator|=
name|kv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|=
operator|(
name|int
operator|)
name|rate
expr_stmt|;
block|}
name|long
name|elapsed
init|=
name|now
operator|-
name|lastUpdated
decl_stmt|;
name|int
name|i
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|elapsed
operator|/
literal|1000
operator|)
operator|*
name|rate
argument_list|)
decl_stmt|;
comment|// convert sec<-> ms
if|if
condition|(
name|tokens
operator|+
name|i
operator|>
name|size
condition|)
block|{
name|i
operator|=
name|size
operator|-
name|tokens
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|tokens
operator|+=
name|i
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|rl
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|USER
argument_list|,
name|TOKENS
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|table
operator|.
name|unlockRow
argument_list|(
name|rl
argument_list|)
expr_stmt|;
block|}
return|return
name|tokens
return|;
block|}
comment|/**    * @param t the number of tokens to consume from the bucket    * @throws IOException    */
specifier|public
name|void
name|remove
parameter_list|(
name|int
name|t
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Here we don't care about timestamp changes; actually it's advantageous
comment|// if they are not updated, otherwise available() and remove() must be
comment|// used as near to each other in time as possible.
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|USER
argument_list|,
name|TOKENS
argument_list|,
operator|(
name|long
operator|)
operator|-
name|t
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|double
name|getRate
parameter_list|()
block|{
return|return
name|rate
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

