begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryPrefixComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnCountGetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|InclusiveStopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SkipFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SubstringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WritableByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|ProtobufMessageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ScannerMessage
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONStringer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * A representation of Scanner parameters.  *   *<pre>  *&lt;complexType name="Scanner"&gt;  *&lt;sequence>  *&lt;element name="column" type="base64Binary" minOccurs="0" maxOccurs="unbounded"/&gt;  *&lt;/sequence&gt;  *&lt;element name="filter" type="string" minOccurs="0" maxOccurs="1"&gt;&lt;/element&gt;  *&lt;attribute name="startRow" type="base64Binary"&gt;&lt;/attribute&gt;  *&lt;attribute name="endRow" type="base64Binary"&gt;&lt;/attribute&gt;  *&lt;attribute name="batch" type="int"&gt;&lt;/attribute&gt;  *&lt;attribute name="startTime" type="int"&gt;&lt;/attribute&gt;  *&lt;attribute name="endTime" type="int"&gt;&lt;/attribute&gt;  *&lt;attribute name="maxVersions" type="int"&gt;&lt;/attribute&gt;  *&lt;/complexType&gt;  *</pre>  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"Scanner"
argument_list|)
specifier|public
class|class
name|ScannerModel
implements|implements
name|ProtobufMessageHandler
implements|,
name|Serializable
block|{
specifier|static
enum|enum
name|FilterType
block|{
name|ColumnCountGetFilter
block|,
name|FilterList
block|,
name|FirstKeyOnlyFilter
block|,
name|InclusiveStopFilter
block|,
name|PageFilter
block|,
name|PrefixFilter
block|,
name|QualifierFilter
block|,
name|RowFilter
block|,
name|SingleColumnValueFilter
block|,
name|SkipFilter
block|,
name|ValueFilter
block|,
name|WhileMatchFilter
block|}
specifier|static
enum|enum
name|ComparatorType
block|{
name|BinaryComparator
block|,
name|BinaryPrefixComparator
block|,
name|RegexStringComparator
block|,
name|SubstringComparator
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
specifier|private
name|byte
index|[]
name|endRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
empty_stmt|;
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|batch
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|long
name|startTime
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|endTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|String
name|filter
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|maxVersions
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * @param o the JSONObject under construction    * @return the JSONObject under construction    * @throws Exception    */
specifier|public
specifier|static
name|WritableByteArrayComparable
name|buildWritableByteArrayComparable
parameter_list|(
specifier|final
name|JSONObject
name|o
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|type
init|=
name|o
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|o
operator|.
name|getString
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|WritableByteArrayComparable
name|comparator
decl_stmt|;
switch|switch
condition|(
name|ComparatorType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
condition|)
block|{
case|case
name|BinaryComparator
case|:
block|{
name|comparator
operator|=
operator|new
name|BinaryComparator
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BinaryPrefixComparator
case|:
block|{
name|comparator
operator|=
operator|new
name|BinaryPrefixComparator
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RegexStringComparator
case|:
block|{
name|comparator
operator|=
operator|new
name|RegexStringComparator
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SubstringComparator
case|:
block|{
name|comparator
operator|=
operator|new
name|SubstringComparator
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unhandled comparator type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
return|return
name|comparator
return|;
block|}
comment|/**    * @param o the JSONObject under construction    * @return the JSONObject under construction    * @throws Exception    */
specifier|public
specifier|static
name|Filter
name|buildFilter
parameter_list|(
specifier|final
name|JSONObject
name|o
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|type
init|=
name|o
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|Filter
name|filter
decl_stmt|;
switch|switch
condition|(
name|FilterType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
condition|)
block|{
case|case
name|ColumnCountGetFilter
case|:
block|{
name|filter
operator|=
operator|new
name|ColumnCountGetFilter
argument_list|(
name|o
operator|.
name|getInt
argument_list|(
literal|"limit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FilterList
case|:
block|{
name|JSONArray
name|arr
init|=
name|o
operator|.
name|getJSONArray
argument_list|(
literal|"filters"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|(
name|arr
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|buildFilter
argument_list|(
name|arr
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filter
operator|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"op"
argument_list|)
argument_list|)
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FirstKeyOnlyFilter
case|:
block|{
name|filter
operator|=
operator|new
name|FirstKeyOnlyFilter
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|InclusiveStopFilter
case|:
block|{
name|filter
operator|=
operator|new
name|InclusiveStopFilter
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PageFilter
case|:
block|{
name|filter
operator|=
operator|new
name|PageFilter
argument_list|(
name|o
operator|.
name|getLong
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PrefixFilter
case|:
block|{
name|filter
operator|=
operator|new
name|PrefixFilter
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QualifierFilter
case|:
block|{
name|filter
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"op"
argument_list|)
argument_list|)
argument_list|,
name|buildWritableByteArrayComparable
argument_list|(
name|o
operator|.
name|getJSONObject
argument_list|(
literal|"comparator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RowFilter
case|:
block|{
name|filter
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"op"
argument_list|)
argument_list|)
argument_list|,
name|buildWritableByteArrayComparable
argument_list|(
name|o
operator|.
name|getJSONObject
argument_list|(
literal|"comparator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SingleColumnValueFilter
case|:
block|{
name|filter
operator|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"family"
argument_list|)
argument_list|)
argument_list|,
name|o
operator|.
name|has
argument_list|(
literal|"qualifier"
argument_list|)
condition|?
name|Base64
operator|.
name|decode
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|)
else|:
literal|null
argument_list|,
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"op"
argument_list|)
argument_list|)
argument_list|,
name|buildWritableByteArrayComparable
argument_list|(
name|o
operator|.
name|getJSONObject
argument_list|(
literal|"comparator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|has
argument_list|(
literal|"ifMissing"
argument_list|)
condition|)
block|{
operator|(
operator|(
name|SingleColumnValueFilter
operator|)
name|filter
operator|)
operator|.
name|setFilterIfMissing
argument_list|(
name|o
operator|.
name|getBoolean
argument_list|(
literal|"ifMissing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|has
argument_list|(
literal|"latestVersion"
argument_list|)
condition|)
block|{
operator|(
operator|(
name|SingleColumnValueFilter
operator|)
name|filter
operator|)
operator|.
name|setLatestVersionOnly
argument_list|(
name|o
operator|.
name|getBoolean
argument_list|(
literal|"latestVersion"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SkipFilter
case|:
block|{
name|filter
operator|=
operator|new
name|SkipFilter
argument_list|(
name|buildFilter
argument_list|(
name|o
operator|.
name|getJSONObject
argument_list|(
literal|"filter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ValueFilter
case|:
block|{
name|filter
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|getString
argument_list|(
literal|"op"
argument_list|)
argument_list|)
argument_list|,
name|buildWritableByteArrayComparable
argument_list|(
name|o
operator|.
name|getJSONObject
argument_list|(
literal|"comparator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|WhileMatchFilter
case|:
block|{
name|filter
operator|=
operator|new
name|WhileMatchFilter
argument_list|(
name|buildFilter
argument_list|(
name|o
operator|.
name|getJSONObject
argument_list|(
literal|"filter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unhandled filter type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
return|return
name|filter
return|;
block|}
comment|/**    * @param s the JSONStringer    * @param comparator the comparator    * @return the JSONStringer    * @throws Exception    */
specifier|public
specifier|static
name|JSONStringer
name|stringifyComparator
parameter_list|(
specifier|final
name|JSONStringer
name|s
parameter_list|,
specifier|final
name|WritableByteArrayComparable
name|comparator
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|typeName
init|=
name|comparator
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|ComparatorType
name|type
init|=
name|ComparatorType
operator|.
name|valueOf
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|s
operator|.
name|object
argument_list|()
expr_stmt|;
name|s
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BinaryComparator
case|:
case|case
name|BinaryPrefixComparator
case|:
name|s
operator|.
name|key
argument_list|(
literal|"value"
argument_list|)
operator|.
name|value
argument_list|(
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|comparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RegexStringComparator
case|:
case|case
name|SubstringComparator
case|:
name|s
operator|.
name|key
argument_list|(
literal|"value"
argument_list|)
operator|.
name|value
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|comparator
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unhandled filter type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|s
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**    * @param s the JSONStringer    * @param filter the filter    * @return the JSONStringer    * @throws Exception    */
specifier|public
specifier|static
name|JSONStringer
name|stringifyFilter
parameter_list|(
specifier|final
name|JSONStringer
name|s
parameter_list|,
specifier|final
name|Filter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|typeName
init|=
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|FilterType
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|FilterType
operator|.
name|valueOf
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"filter type "
operator|+
name|typeName
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
name|s
operator|.
name|object
argument_list|()
expr_stmt|;
name|s
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ColumnCountGetFilter
case|:
name|s
operator|.
name|key
argument_list|(
literal|"limit"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|ColumnCountGetFilter
operator|)
name|filter
operator|)
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FilterList
case|:
name|s
operator|.
name|key
argument_list|(
literal|"op"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|FilterList
operator|)
name|filter
operator|)
operator|.
name|getOperator
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|key
argument_list|(
literal|"filters"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|Filter
name|child
range|:
operator|(
operator|(
name|FilterList
operator|)
name|filter
operator|)
operator|.
name|getFilters
argument_list|()
control|)
block|{
name|stringifyFilter
argument_list|(
name|s
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|endArray
argument_list|()
expr_stmt|;
break|break;
case|case
name|FirstKeyOnlyFilter
case|:
break|break;
case|case
name|InclusiveStopFilter
case|:
name|s
operator|.
name|key
argument_list|(
literal|"value"
argument_list|)
operator|.
name|value
argument_list|(
name|Base64
operator|.
name|encodeBytes
argument_list|(
operator|(
operator|(
name|InclusiveStopFilter
operator|)
name|filter
operator|)
operator|.
name|getStopRowKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PageFilter
case|:
name|s
operator|.
name|key
argument_list|(
literal|"value"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|PageFilter
operator|)
name|filter
operator|)
operator|.
name|getPageSize
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PrefixFilter
case|:
name|s
operator|.
name|key
argument_list|(
literal|"value"
argument_list|)
operator|.
name|value
argument_list|(
name|Base64
operator|.
name|encodeBytes
argument_list|(
operator|(
operator|(
name|PrefixFilter
operator|)
name|filter
operator|)
operator|.
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QualifierFilter
case|:
case|case
name|RowFilter
case|:
case|case
name|ValueFilter
case|:
name|s
operator|.
name|key
argument_list|(
literal|"op"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|CompareFilter
operator|)
name|filter
operator|)
operator|.
name|getOperator
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|key
argument_list|(
literal|"comparator"
argument_list|)
expr_stmt|;
name|stringifyComparator
argument_list|(
name|s
argument_list|,
operator|(
operator|(
name|CompareFilter
operator|)
name|filter
operator|)
operator|.
name|getComparator
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SingleColumnValueFilter
case|:
block|{
name|SingleColumnValueFilter
name|scvf
init|=
operator|(
name|SingleColumnValueFilter
operator|)
name|filter
decl_stmt|;
name|s
operator|.
name|key
argument_list|(
literal|"family"
argument_list|)
operator|.
name|value
argument_list|(
name|scvf
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|scvf
operator|.
name|getQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|key
argument_list|(
literal|"qualifier"
argument_list|)
operator|.
name|value
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|key
argument_list|(
literal|"op"
argument_list|)
operator|.
name|value
argument_list|(
name|scvf
operator|.
name|getOperator
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|key
argument_list|(
literal|"comparator"
argument_list|)
expr_stmt|;
name|stringifyComparator
argument_list|(
name|s
argument_list|,
name|scvf
operator|.
name|getComparator
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scvf
operator|.
name|getFilterIfMissing
argument_list|()
condition|)
block|{
name|s
operator|.
name|key
argument_list|(
literal|"ifMissing"
argument_list|)
operator|.
name|value
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scvf
operator|.
name|getLatestVersionOnly
argument_list|()
condition|)
block|{
name|s
operator|.
name|key
argument_list|(
literal|"latestVersion"
argument_list|)
operator|.
name|value
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SkipFilter
case|:
name|s
operator|.
name|key
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|stringifyFilter
argument_list|(
name|s
argument_list|,
operator|(
operator|(
name|SkipFilter
operator|)
name|filter
operator|)
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|WhileMatchFilter
case|:
name|s
operator|.
name|key
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|stringifyFilter
argument_list|(
name|s
argument_list|,
operator|(
operator|(
name|WhileMatchFilter
operator|)
name|filter
operator|)
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|s
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**    * @param scan the scan specification    * @throws Exception     */
specifier|public
specifier|static
name|ScannerModel
name|fromScan
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|Exception
block|{
name|ScannerModel
name|model
init|=
operator|new
name|ScannerModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setStartRow
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setEndRow
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
decl_stmt|;
if|if
condition|(
name|families
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|column
range|:
name|families
control|)
block|{
name|model
operator|.
name|addColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
name|model
operator|.
name|setStartTime
argument_list|(
name|scan
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setEndTime
argument_list|(
name|scan
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|caching
init|=
name|scan
operator|.
name|getCaching
argument_list|()
decl_stmt|;
if|if
condition|(
name|caching
operator|>
literal|0
condition|)
block|{
name|model
operator|.
name|setBatch
argument_list|(
name|caching
argument_list|)
expr_stmt|;
block|}
name|int
name|maxVersions
init|=
name|scan
operator|.
name|getMaxVersions
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxVersions
operator|>
literal|0
condition|)
block|{
name|model
operator|.
name|setMaxVersions
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
block|}
name|Filter
name|filter
init|=
name|scan
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|setFilter
argument_list|(
name|stringifyFilter
argument_list|(
operator|new
name|JSONStringer
argument_list|()
argument_list|,
name|filter
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|model
return|;
block|}
comment|/**    * Default constructor    */
specifier|public
name|ScannerModel
parameter_list|()
block|{}
comment|/**    * Constructor    * @param startRow the start key of the row-range    * @param endRow the end key of the row-range    * @param columns the columns to scan    * @param batch the number of values to return in batch    * @param endTime the upper bound on timestamps of values of interest    * @param maxVersions the maximum number of versions to return    * @param filter a filter specification    * (values with timestamps later than this are excluded)    */
specifier|public
name|ScannerModel
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|int
name|batch
parameter_list|,
name|long
name|endTime
parameter_list|,
name|int
name|maxVersions
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|endRow
operator|=
name|endRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
comment|/**    * Constructor     * @param startRow the start key of the row-range    * @param endRow the end key of the row-range    * @param columns the columns to scan    * @param batch the number of values to return in batch    * @param startTime the lower bound on timestamps of values of interest    * (values with timestamps earlier than this are excluded)    * @param endTime the upper bound on timestamps of values of interest    * (values with timestamps later than this are excluded)    * @param filter a filter specification    */
specifier|public
name|ScannerModel
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|endRow
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|int
name|batch
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
name|this
operator|.
name|endRow
operator|=
name|endRow
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
comment|/**    * Add a column to the column set    * @param column the column name, as&lt;column&gt;(:&lt;qualifier&gt;)?    */
specifier|public
name|void
name|addColumn
parameter_list|(
name|byte
index|[]
name|column
parameter_list|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return true if a start row was specified    */
specifier|public
name|boolean
name|hasStartRow
parameter_list|()
block|{
return|return
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|startRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
return|;
block|}
comment|/**    * @return start row    */
annotation|@
name|XmlAttribute
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
comment|/**    * @return true if an end row was specified    */
specifier|public
name|boolean
name|hasEndRow
parameter_list|()
block|{
return|return
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|endRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
return|;
block|}
comment|/**    * @return end row    */
annotation|@
name|XmlAttribute
specifier|public
name|byte
index|[]
name|getEndRow
parameter_list|()
block|{
return|return
name|endRow
return|;
block|}
comment|/**    * @return list of columns of interest in column:qualifier format, or empty for all    */
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"column"
argument_list|)
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
comment|/**    * @return the number of cells to return in batch    */
annotation|@
name|XmlAttribute
specifier|public
name|int
name|getBatch
parameter_list|()
block|{
return|return
name|batch
return|;
block|}
comment|/**    * @return the lower bound on timestamps of items of interest    */
annotation|@
name|XmlAttribute
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**    * @return the upper bound on timestamps of items of interest    */
annotation|@
name|XmlAttribute
specifier|public
name|long
name|getEndTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
comment|/**    * @return maximum number of versions to return    */
annotation|@
name|XmlAttribute
specifier|public
name|int
name|getMaxVersions
parameter_list|()
block|{
return|return
name|maxVersions
return|;
block|}
comment|/**    * @return the filter specification    */
annotation|@
name|XmlElement
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
comment|/**    * @param startRow start row    */
specifier|public
name|void
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
block|}
comment|/**    * @param endRow end row    */
specifier|public
name|void
name|setEndRow
parameter_list|(
name|byte
index|[]
name|endRow
parameter_list|)
block|{
name|this
operator|.
name|endRow
operator|=
name|endRow
expr_stmt|;
block|}
comment|/**    * @param columns list of columns of interest in column:qualifier format, or empty for all    */
specifier|public
name|void
name|setColumns
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
comment|/**    * @param batch the number of cells to return in batch    */
specifier|public
name|void
name|setBatch
parameter_list|(
name|int
name|batch
parameter_list|)
block|{
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
block|}
comment|/**    * @param maxVersions maximum number of versions to return    */
specifier|public
name|void
name|setMaxVersions
parameter_list|(
name|int
name|maxVersions
parameter_list|)
block|{
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
block|}
comment|/**    * @param startTime the lower bound on timestamps of values of interest    */
specifier|public
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
comment|/**    * @param endTime the upper bound on timestamps of values of interest    */
specifier|public
name|void
name|setEndTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
comment|/**    * @param filter the filter specification    */
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|createProtobufOutput
parameter_list|()
block|{
name|Scanner
operator|.
name|Builder
name|builder
init|=
name|Scanner
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|startRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setStartRow
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|endRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setEndRow
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|endRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|column
range|:
name|columns
control|)
block|{
name|builder
operator|.
name|addColumns
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|setEndTime
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setBatch
argument_list|(
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMaxVersions
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProtobufMessageHandler
name|getObjectFromMessage
parameter_list|(
name|byte
index|[]
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|Scanner
operator|.
name|Builder
name|builder
init|=
name|Scanner
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|.
name|hasStartRow
argument_list|()
condition|)
block|{
name|startRow
operator|=
name|builder
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasEndRow
argument_list|()
condition|)
block|{
name|endRow
operator|=
name|builder
operator|.
name|getEndRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ByteString
name|column
range|:
name|builder
operator|.
name|getColumnsList
argument_list|()
control|)
block|{
name|addColumn
argument_list|(
name|column
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasBatch
argument_list|()
condition|)
block|{
name|batch
operator|=
name|builder
operator|.
name|getBatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasStartTime
argument_list|()
condition|)
block|{
name|startTime
operator|=
name|builder
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasEndTime
argument_list|()
condition|)
block|{
name|endTime
operator|=
name|builder
operator|.
name|getEndTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|maxVersions
operator|=
name|builder
operator|.
name|getMaxVersions
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|filter
operator|=
name|builder
operator|.
name|getFilter
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

