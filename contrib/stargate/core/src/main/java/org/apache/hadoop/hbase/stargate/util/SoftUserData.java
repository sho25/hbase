begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|stargate
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SoftValueMap
import|;
end_import

begin_comment
comment|/**  * Provides a softmap backed collection of user data. The collection can be  * reclaimed by the garbage collector at any time when under heap pressure.  */
end_comment

begin_class
specifier|public
class|class
name|SoftUserData
extends|extends
name|UserData
block|{
specifier|static
specifier|final
name|Map
argument_list|<
name|User
argument_list|,
name|UserData
argument_list|>
name|map
init|=
operator|new
name|SoftValueMap
argument_list|<
name|User
argument_list|,
name|UserData
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|UserData
name|get
parameter_list|(
specifier|final
name|User
name|user
parameter_list|)
block|{
name|UserData
name|data
init|=
name|map
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|data
operator|=
operator|new
name|UserData
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|UserData
name|put
parameter_list|(
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|UserData
name|data
parameter_list|)
block|{
return|return
name|map
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|data
argument_list|)
return|;
block|}
block|}
end_class

end_unit

