begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTablePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * This class is responsible for replicating the edits coming  * from another cluster. All edits are first put into a log that will  * be read later by the main thread.  *  * This replication process is currently waiting for the edits to be applied  * before any other entry can be appended to the log.  *  * The log is rolled but old ones aren't kept at the moment.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationSink
extends|extends
name|Thread
block|{
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_LOG_DIR
init|=
literal|".replogs"
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationSink
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|HTablePool
name|pool
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|stop
decl_stmt|;
specifier|private
name|HLog
operator|.
name|Reader
name|reader
decl_stmt|;
specifier|private
name|HLog
operator|.
name|Writer
name|writer
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|path
decl_stmt|;
specifier|private
name|long
name|position
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|newData
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|editsSize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|long
name|lastEditSize
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|long
name|logrollsize
decl_stmt|;
specifier|private
specifier|final
name|long
name|threadWakeFrequency
decl_stmt|;
comment|/**    * Create a sink for replication    * @param conf conf object    * @param stopper boolean to tell this thread to stop    * @param path the path to the log    * @param fs the filesystem to use    * @param threadWakeFrequency how long should the thread wait for edits    * @throws IOException thrown when HDFS goes bad or bad file name    */
specifier|public
name|ReplicationSink
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|AtomicBoolean
name|stopper
parameter_list|,
name|Path
name|path
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|long
name|threadWakeFrequency
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|pool
operator|=
operator|new
name|HTablePool
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|stop
operator|=
name|stopper
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|long
name|blocksize
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
name|this
operator|.
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|multi
init|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.regionserver.logroll.multiplier"
argument_list|,
literal|0.95f
argument_list|)
decl_stmt|;
name|this
operator|.
name|logrollsize
operator|=
call|(
name|long
call|)
argument_list|(
name|blocksize
operator|*
name|multi
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadWakeFrequency
operator|=
name|threadWakeFrequency
expr_stmt|;
name|rollLog
argument_list|()
expr_stmt|;
block|}
comment|/**    * Put this array of entries into a log that will be read later    * @param entries    * @throws IOException    */
specifier|public
name|void
name|replicateEntries
parameter_list|(
name|HLog
operator|.
name|Entry
index|[]
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// add to WAL and defer actual inserts
try|try
block|{
for|for
control|(
name|HLog
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|this
operator|.
name|writer
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|this
operator|.
name|editsSize
operator|.
name|addAndGet
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|heapSize
argument_list|()
operator|+
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
name|this
operator|.
name|newData
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to accept edit because"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Won't be replicating data as we are shutting down"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|HTableInterface
name|table
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|this
operator|.
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|this
operator|.
name|newData
operator|.
name|await
argument_list|(
name|this
operator|.
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|lastEditSize
operator|==
name|this
operator|.
name|editsSize
operator|.
name|get
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// There's no tailing in HDFS so we create a new reader
comment|// and seek every time
name|this
operator|.
name|reader
operator|=
name|HLog
operator|.
name|getReader
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|path
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|position
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|reader
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|lastTable
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
comment|// Very simple optimization where we batch sequences of rows going
comment|// to the same table.
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|new
name|HLog
operator|.
name|Entry
argument_list|()
decl_stmt|;
while|while
condition|(
name|this
operator|.
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|KeyValue
name|kv
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
if|if
condition|(
name|kv
operator|.
name|isDelete
argument_list|()
condition|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|.
name|isDeleteFamily
argument_list|()
condition|)
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|kv
operator|.
name|isEmptyColumn
argument_list|()
condition|)
block|{
name|delete
operator|.
name|deleteColumn
argument_list|(
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getFamily
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|=
name|pool
operator|.
name|getTable
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|pool
operator|.
name|putTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getFamily
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Switching table, flush
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|lastTable
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
operator|&&
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|=
name|pool
operator|.
name|getTable
argument_list|(
name|lastTable
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|pool
operator|.
name|putTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|puts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|lastTable
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|=
name|pool
operator|.
name|getTable
argument_list|(
name|lastTable
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|pool
operator|.
name|putTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|position
operator|=
name|this
operator|.
name|reader
operator|.
name|getPosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|editsSize
operator|.
name|get
argument_list|()
operator|>
name|this
operator|.
name|logrollsize
condition|)
block|{
name|rollLog
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|lastEditSize
operator|=
name|editsSize
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got EOF while reading, will continue on next notify"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Losing edits because: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|newData
operator|.
name|signal
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|reader
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|reader
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Should we log rejected edits in a file for replay?
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to accept edit because"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|this
operator|.
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Delete the current log and start a new one with the same name
comment|// TODO keep the old versions so that the writing thread isn't help up
comment|// by the reading thead and this latter one could be reading older logs.
comment|// At this point we are under the lock.
specifier|protected
name|void
name|rollLog
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|editsSize
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|reader
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|writer
operator|=
name|HLog
operator|.
name|createWriter
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|this
operator|.
name|path
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|editsSize
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|position
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"New replication log"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the path of the file for this server    * @param serverName    * @return    */
specifier|public
specifier|static
name|String
name|getRepLogPath
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
name|StringBuilder
name|dirName
init|=
operator|new
name|StringBuilder
argument_list|(
name|REPLICATION_LOG_DIR
argument_list|)
decl_stmt|;
name|dirName
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|dirName
operator|.
name|append
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
return|return
name|dirName
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

