begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|util
operator|.
name|vint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestVIntTool
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNumBytes
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UVIntTool
operator|.
name|numBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UVIntTool
operator|.
name|numBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UVIntTool
operator|.
name|numBytes
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UVIntTool
operator|.
name|numBytes
argument_list|(
literal|126
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UVIntTool
operator|.
name|numBytes
argument_list|(
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|UVIntTool
operator|.
name|numBytes
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|UVIntTool
operator|.
name|numBytes
argument_list|(
literal|129
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|UVIntTool
operator|.
name|numBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|63
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|63
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|128
block|,
literal|1
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|128
operator|+
literal|27
block|,
literal|1
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|155
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|UVIntTool
operator|.
name|MAX_VALUE_BYTES
argument_list|,
name|bytesViaOutputStream
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|bytesViaOutputStream
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|UVIntTool
operator|.
name|writeBytes
argument_list|(
name|value
argument_list|,
name|os
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToBytes
parameter_list|()
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
name|UVIntTool
operator|.
name|getBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
name|UVIntTool
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|63
block|}
argument_list|,
name|UVIntTool
operator|.
name|getBytes
argument_list|(
literal|63
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|}
argument_list|,
name|UVIntTool
operator|.
name|getBytes
argument_list|(
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|128
block|,
literal|1
block|}
argument_list|,
name|UVIntTool
operator|.
name|getBytes
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|128
operator|+
literal|27
block|,
literal|1
block|}
argument_list|,
name|UVIntTool
operator|.
name|getBytes
argument_list|(
literal|155
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|UVIntTool
operator|.
name|MAX_VALUE_BYTES
argument_list|,
name|UVIntTool
operator|.
name|getBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromBytes
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|UVIntTool
operator|.
name|getInt
argument_list|(
name|UVIntTool
operator|.
name|MAX_VALUE_BYTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundTrips
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|int
name|value
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|UVIntTool
operator|.
name|getBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|roundTripped
init|=
name|UVIntTool
operator|.
name|getInt
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|roundTripped
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInputStreams
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|is
decl_stmt|;
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|UVIntTool
operator|.
name|getInt
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|5
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|UVIntTool
operator|.
name|getInt
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|128
operator|+
literal|27
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|155
argument_list|,
name|UVIntTool
operator|.
name|getInt
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

