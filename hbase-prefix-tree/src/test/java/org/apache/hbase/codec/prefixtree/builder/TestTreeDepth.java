begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|tokenize
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestTreeDepth
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSingleNode
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|testInternal
argument_list|(
name|inputs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleBranch
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"aa"
argument_list|,
literal|"ab"
argument_list|)
decl_stmt|;
name|testInternal
argument_list|(
name|inputs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyRoot
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|testInternal
argument_list|(
name|inputs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRootAsNub
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
name|testInternal
argument_list|(
name|inputs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRootAsNubPlusNub
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"aa"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|testInternal
argument_list|(
name|inputs
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyRootPlusNub
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"aa"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|testInternal
argument_list|(
name|inputs
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitDistantAncestor
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|inputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"ac"
argument_list|,
literal|"acd"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|testInternal
argument_list|(
name|inputs
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testInternal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|inputs
parameter_list|,
name|int
name|expectedTreeDepth
parameter_list|)
block|{
name|Log
operator|.
name|warn
argument_list|(
literal|"init logger"
argument_list|)
expr_stmt|;
name|Tokenizer
name|builder
init|=
operator|new
name|Tokenizer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|inputs
control|)
block|{
name|ByteRange
name|b
init|=
operator|new
name|ByteRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addSorted
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|builder
operator|.
name|getRoot
argument_list|()
operator|.
name|getNodeDepth
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedTreeDepth
argument_list|,
name|builder
operator|.
name|getTreeDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

