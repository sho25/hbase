begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|row
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|cell
operator|.
name|CellScannerPosition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|PrefixTreeBlockMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|row
operator|.
name|BaseTestRowData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|scanner
operator|.
name|CellSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/*  * Goes beyond a trivial trie to add a branch on the "cf" node  */
end_comment

begin_class
specifier|public
class|class
name|TestRowDataDeeper
extends|extends
name|BaseTestRowData
block|{
specifier|static
name|byte
index|[]
name|cdc
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cdc"
argument_list|)
decl_stmt|,
name|cf6
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf6"
argument_list|)
decl_stmt|,
name|cfc
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfc"
argument_list|)
decl_stmt|,
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|,
name|q
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|,
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
decl_stmt|;
specifier|static
name|long
name|ts
init|=
literal|55L
decl_stmt|;
specifier|static
name|List
argument_list|<
name|KeyValue
argument_list|>
name|d
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
static|static
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|cdc
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|ts
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|cf6
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|ts
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|cfc
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|ts
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|KeyValue
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|d
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|individualBlockMetaAssertions
parameter_list|(
name|PrefixTreeBlockMeta
name|blockMeta
parameter_list|)
block|{
comment|//0: token:c; fan:d,f
comment|//1: token:f; fan:6,c
comment|//2: leaves
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|blockMeta
operator|.
name|getRowTreeDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|individualSearcherAssertions
parameter_list|(
name|CellSearcher
name|searcher
parameter_list|)
block|{
comment|/**      * The searcher should get a token mismatch on the "r" branch.  Assert that it skips not only      * rA, but rB as well.      */
name|KeyValue
name|cfcRow
init|=
name|KeyValue
operator|.
name|createFirstOnRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfc"
argument_list|)
argument_list|)
decl_stmt|;
name|CellScannerPosition
name|position
init|=
name|searcher
operator|.
name|positionAtOrAfter
argument_list|(
name|cfcRow
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CellScannerPosition
operator|.
name|AFTER
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|d
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|searcher
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|previous
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|d
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|searcher
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

