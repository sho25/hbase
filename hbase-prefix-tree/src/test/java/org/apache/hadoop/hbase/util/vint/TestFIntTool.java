begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|vint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/********************** tests *************************/
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFIntTool
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLeadingZeros
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|64
argument_list|,
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|63
argument_list|,
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxValueForNumBytes
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|255
argument_list|,
name|UFIntTool
operator|.
name|maxValueForNumBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|65535
argument_list|,
name|UFIntTool
operator|.
name|maxValueForNumBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0xffffff
argument_list|,
name|UFIntTool
operator|.
name|maxValueForNumBytes
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0xffffffffffffffL
argument_list|,
name|UFIntTool
operator|.
name|maxValueForNumBytes
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNumBytes
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
literal|65535
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
literal|65536
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
literal|0xffffffffL
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
literal|0x100000000L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|UFIntTool
operator|.
name|numBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBytes
parameter_list|()
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|1
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|,
literal|256
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
operator|-
literal|128
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|,
literal|256
operator|+
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|,
literal|256
operator|+
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|4
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|8
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromBytes
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|255
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|256
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|256
operator|+
literal|3
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|256
operator|+
literal|128
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
operator|-
literal|128
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|256
operator|+
literal|255
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
operator|-
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundTrips
parameter_list|()
block|{
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|255
block|,
literal|256
block|,
literal|31123
block|,
literal|65535
block|,
literal|65536
block|,
literal|65537
block|,
literal|0xfffffeL
block|,
literal|0xffffffL
block|,
literal|0x1000000L
block|,
literal|0x1000001L
block|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|UFIntTool
operator|.
name|fromBytes
argument_list|(
name|UFIntTool
operator|.
name|getBytes
argument_list|(
literal|8
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteBytes
parameter_list|()
throws|throws
name|IOException
block|{
comment|// copied from testGetBytes
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|1
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|1
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|2
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|2
argument_list|,
literal|256
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
operator|-
literal|128
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|2
argument_list|,
literal|256
operator|+
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|2
argument_list|,
literal|256
operator|+
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|4
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
name|bytesViaOutputStream
argument_list|(
literal|8
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|bytesViaOutputStream
parameter_list|(
name|int
name|outputWidth
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|outputWidth
argument_list|,
name|value
argument_list|,
name|os
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

