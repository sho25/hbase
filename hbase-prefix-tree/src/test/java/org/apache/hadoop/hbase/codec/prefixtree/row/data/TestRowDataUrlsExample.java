begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|row
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|PrefixTreeEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|column
operator|.
name|ColumnNodeWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|row
operator|.
name|RowNodeWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|tokenize
operator|.
name|TokenizerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|row
operator|.
name|BaseTestRowData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/*  * test different timestamps  *   * http://pastebin.com/7ks8kzJ2  * http://pastebin.com/MPn03nsK  */
end_comment

begin_class
specifier|public
class|class
name|TestRowDataUrlsExample
extends|extends
name|BaseTestRowData
block|{
specifier|static
name|String
name|TENANT_ID
init|=
name|Integer
operator|.
name|toString
argument_list|(
literal|95322
argument_list|)
decl_stmt|;
specifier|static
name|String
name|APP_ID
init|=
name|Integer
operator|.
name|toString
argument_list|(
literal|12
argument_list|)
decl_stmt|;
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|URLS
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"com.dablog/2011/10/04/boating"
argument_list|,
literal|"com.dablog/2011/10/09/lasers"
argument_list|,
literal|"com.jamiesrecipes"
argument_list|,
comment|//this nub helped find a bug
literal|"com.jamiesrecipes/eggs"
argument_list|)
decl_stmt|;
specifier|static
name|String
name|FAMILY
init|=
literal|"hits"
decl_stmt|;
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|BROWSERS
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"Chrome"
argument_list|,
literal|"IE8"
argument_list|,
literal|"IE9beta"
argument_list|)
decl_stmt|;
comment|//, "Opera", "Safari");
specifier|static
name|long
name|TIMESTAMP
init|=
literal|1234567890
decl_stmt|;
specifier|static
name|int
name|MAX_VALUE
init|=
literal|50
decl_stmt|;
specifier|static
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|String
name|rowKey
range|:
name|URLS
control|)
block|{
for|for
control|(
name|String
name|qualifier
range|:
name|BROWSERS
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowKey
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILY
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifier
argument_list|)
argument_list|,
name|TIMESTAMP
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"VvvV"
argument_list|)
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Used for generating docs.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-- inputs --"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|KeyValueTestUtil
operator|.
name|toStringWithPadding
argument_list|(
name|kvs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
decl_stmt|;
name|PrefixTreeEncoder
name|encoder
init|=
operator|new
name|PrefixTreeEncoder
argument_list|(
name|os
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|encoder
operator|.
name|write
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-- qualifier SortedPtBuilderNodes --"
argument_list|)
expr_stmt|;
for|for
control|(
name|TokenizerNode
name|tokenizer
range|:
name|encoder
operator|.
name|getQualifierWriter
argument_list|()
operator|.
name|getNonLeaves
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TokenizerNode
name|tokenizerNode
range|:
name|encoder
operator|.
name|getQualifierWriter
argument_list|()
operator|.
name|getLeaves
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tokenizerNode
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-- qualifier PtColumnNodeWriters --"
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnNodeWriter
name|writer
range|:
name|encoder
operator|.
name|getQualifierWriter
argument_list|()
operator|.
name|getColumnNodeWriters
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-- rowKey SortedPtBuilderNodes --"
argument_list|)
expr_stmt|;
for|for
control|(
name|TokenizerNode
name|tokenizerNode
range|:
name|encoder
operator|.
name|getRowWriter
argument_list|()
operator|.
name|getNonLeaves
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tokenizerNode
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TokenizerNode
name|tokenizerNode
range|:
name|encoder
operator|.
name|getRowWriter
argument_list|()
operator|.
name|getLeaves
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tokenizerNode
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-- row PtRowNodeWriters --"
argument_list|)
expr_stmt|;
for|for
control|(
name|RowNodeWriter
name|writer
range|:
name|encoder
operator|.
name|getRowWriter
argument_list|()
operator|.
name|getNonLeafWriters
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RowNodeWriter
name|writer
range|:
name|encoder
operator|.
name|getRowWriter
argument_list|()
operator|.
name|getLeafWriters
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-- concatenated values --"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|encoder
operator|.
name|getValueByteRange
argument_list|()
operator|.
name|deepCopyToNewArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|KeyValue
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|kvs
return|;
block|}
block|}
end_class

end_unit

