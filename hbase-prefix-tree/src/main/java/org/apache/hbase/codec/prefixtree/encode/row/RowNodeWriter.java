begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|row
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteRangeTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|PrefixTreeBlockMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|PrefixTreeEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|tokenize
operator|.
name|TokenizerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|util
operator|.
name|vint
operator|.
name|UFIntTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|util
operator|.
name|vint
operator|.
name|UVIntTool
import|;
end_import

begin_comment
comment|/**  * Serializes the fields comprising one node of the row trie, which can be a branch, nub, or leaf.  * Please see the write() method for the order in which data is written.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RowNodeWriter
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RowNodeWriter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/********************* fields ******************************/
specifier|protected
name|PrefixTreeEncoder
name|prefixTreeEncoder
decl_stmt|;
specifier|protected
name|PrefixTreeBlockMeta
name|blockMeta
decl_stmt|;
specifier|protected
name|TokenizerNode
name|tokenizerNode
decl_stmt|;
specifier|protected
name|int
name|tokenWidth
decl_stmt|;
specifier|protected
name|int
name|fanOut
decl_stmt|;
specifier|protected
name|int
name|numCells
decl_stmt|;
specifier|protected
name|int
name|width
decl_stmt|;
comment|/*********************** construct *************************/
specifier|public
name|RowNodeWriter
parameter_list|(
name|PrefixTreeEncoder
name|keyValueBuilder
parameter_list|,
name|TokenizerNode
name|tokenizerNode
parameter_list|)
block|{
name|reconstruct
argument_list|(
name|keyValueBuilder
argument_list|,
name|tokenizerNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reconstruct
parameter_list|(
name|PrefixTreeEncoder
name|prefixTreeEncoder
parameter_list|,
name|TokenizerNode
name|tokenizerNode
parameter_list|)
block|{
name|this
operator|.
name|prefixTreeEncoder
operator|=
name|prefixTreeEncoder
expr_stmt|;
name|reset
argument_list|(
name|tokenizerNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|TokenizerNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|blockMeta
operator|=
name|prefixTreeEncoder
operator|.
name|getBlockMeta
argument_list|()
expr_stmt|;
comment|// changes between blocks
name|this
operator|.
name|tokenizerNode
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|tokenWidth
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|fanOut
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numCells
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|width
operator|=
literal|0
expr_stmt|;
name|calculateOffsetsAndLengths
argument_list|()
expr_stmt|;
block|}
comment|/********************* methods ****************************/
specifier|protected
name|void
name|calculateOffsetsAndLengths
parameter_list|()
block|{
name|tokenWidth
operator|=
name|tokenizerNode
operator|.
name|getTokenLength
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|tokenizerNode
operator|.
name|isRoot
argument_list|()
condition|)
block|{
operator|--
name|tokenWidth
expr_stmt|;
comment|//root has no parent
block|}
name|fanOut
operator|=
name|CollectionUtils
operator|.
name|nullSafeSize
argument_list|(
name|tokenizerNode
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
name|numCells
operator|=
name|tokenizerNode
operator|.
name|getNumOccurrences
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|calculateWidth
parameter_list|()
block|{
name|calculateWidthOverrideOffsetWidth
argument_list|(
name|blockMeta
operator|.
name|getNextNodeOffsetWidth
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|width
return|;
block|}
specifier|public
name|int
name|calculateWidthOverrideOffsetWidth
parameter_list|(
name|int
name|offsetWidth
parameter_list|)
block|{
name|width
operator|=
literal|0
expr_stmt|;
name|width
operator|+=
name|UVIntTool
operator|.
name|numBytes
argument_list|(
name|tokenWidth
argument_list|)
expr_stmt|;
name|width
operator|+=
name|tokenWidth
expr_stmt|;
name|width
operator|+=
name|UVIntTool
operator|.
name|numBytes
argument_list|(
name|fanOut
argument_list|)
expr_stmt|;
name|width
operator|+=
name|fanOut
expr_stmt|;
name|width
operator|+=
name|UVIntTool
operator|.
name|numBytes
argument_list|(
name|numCells
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizerNode
operator|.
name|hasOccurrences
argument_list|()
condition|)
block|{
name|int
name|fixedBytesPerCell
init|=
name|blockMeta
operator|.
name|getFamilyOffsetWidth
argument_list|()
operator|+
name|blockMeta
operator|.
name|getQualifierOffsetWidth
argument_list|()
operator|+
name|blockMeta
operator|.
name|getTimestampIndexWidth
argument_list|()
operator|+
name|blockMeta
operator|.
name|getMvccVersionIndexWidth
argument_list|()
operator|+
name|blockMeta
operator|.
name|getKeyValueTypeWidth
argument_list|()
operator|+
name|blockMeta
operator|.
name|getValueOffsetWidth
argument_list|()
operator|+
name|blockMeta
operator|.
name|getValueLengthWidth
argument_list|()
decl_stmt|;
name|width
operator|+=
name|numCells
operator|*
name|fixedBytesPerCell
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tokenizerNode
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
name|width
operator|+=
name|fanOut
operator|*
name|offsetWidth
expr_stmt|;
block|}
return|return
name|width
return|;
block|}
comment|/*********************** writing the compiled structure to the OutputStream ***************/
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
comment|//info about this row trie node
name|writeRowToken
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeFan
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeNumCells
argument_list|(
name|os
argument_list|)
expr_stmt|;
comment|//UFInt indexes and offsets for each cell in the row (if nub or leaf)
name|writeFamilyNodeOffsets
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeQualifierNodeOffsets
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeTimestampIndexes
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeMvccVersionIndexes
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeCellTypes
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeValueOffsets
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|writeValueLengths
argument_list|(
name|os
argument_list|)
expr_stmt|;
comment|//offsets to the children of this row trie node (if branch or nub)
name|writeNextRowTrieNodeOffsets
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
comment|/**    * Row node token, fan, and numCells. Written once at the beginning of each row node. These 3    * fields can reproduce all the row keys that compose the block.    */
comment|/**    * UVInt: tokenWidth    * bytes: token    */
specifier|protected
name|void
name|writeRowToken
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|UVIntTool
operator|.
name|writeBytes
argument_list|(
name|tokenWidth
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|int
name|tokenStartIndex
init|=
name|tokenizerNode
operator|.
name|isRoot
argument_list|()
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|ByteRangeTool
operator|.
name|write
argument_list|(
name|os
argument_list|,
name|tokenizerNode
operator|.
name|getToken
argument_list|()
argument_list|,
name|tokenStartIndex
argument_list|)
expr_stmt|;
block|}
comment|/**    * UVInt: numFanBytes/fanOut    * bytes: each fan byte    */
specifier|public
name|void
name|writeFan
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|UVIntTool
operator|.
name|writeBytes
argument_list|(
name|fanOut
argument_list|,
name|os
argument_list|)
expr_stmt|;
if|if
condition|(
name|fanOut
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|ArrayList
argument_list|<
name|TokenizerNode
argument_list|>
name|children
init|=
name|tokenizerNode
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|TokenizerNode
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|child
operator|.
name|getToken
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// first byte of each child's token
block|}
block|}
comment|/**    * UVInt: numCells, the number of cells in this row which will be 0 for branch nodes    */
specifier|protected
name|void
name|writeNumCells
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|UVIntTool
operator|.
name|writeBytes
argument_list|(
name|numCells
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
comment|/**    * The following methods write data for each cell in the row, mostly consisting of indexes or    * offsets into the timestamp/column data structures that are written in the middle of the block.    * We use {@link UFIntTool} to encode these indexes/offsets to allow random access during a binary    * search of a particular column/timestamp combination.    *<p/>    * Branch nodes will not have any data in these sections.    */
specifier|protected
name|void
name|writeFamilyNodeOffsets
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockMeta
operator|.
name|getFamilyOffsetWidth
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCells
condition|;
operator|++
name|i
control|)
block|{
name|int
name|cellInsertionIndex
init|=
name|PrefixTreeEncoder
operator|.
name|MULITPLE_FAMILIES_POSSIBLE
condition|?
name|tokenizerNode
operator|.
name|getFirstInsertionIndex
argument_list|()
operator|+
name|i
else|:
literal|0
decl_stmt|;
name|int
name|sortedIndex
init|=
name|prefixTreeEncoder
operator|.
name|getFamilySorter
argument_list|()
operator|.
name|getSortedIndexForInsertionId
argument_list|(
name|cellInsertionIndex
argument_list|)
decl_stmt|;
name|int
name|indexedFamilyOffset
init|=
name|prefixTreeEncoder
operator|.
name|getFamilyWriter
argument_list|()
operator|.
name|getOutputArrayOffset
argument_list|(
name|sortedIndex
argument_list|)
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|blockMeta
operator|.
name|getFamilyOffsetWidth
argument_list|()
argument_list|,
name|indexedFamilyOffset
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeQualifierNodeOffsets
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockMeta
operator|.
name|getQualifierOffsetWidth
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCells
condition|;
operator|++
name|i
control|)
block|{
name|int
name|cellInsertionIndex
init|=
name|tokenizerNode
operator|.
name|getFirstInsertionIndex
argument_list|()
operator|+
name|i
decl_stmt|;
name|int
name|sortedIndex
init|=
name|prefixTreeEncoder
operator|.
name|getQualifierSorter
argument_list|()
operator|.
name|getSortedIndexForInsertionId
argument_list|(
name|cellInsertionIndex
argument_list|)
decl_stmt|;
name|int
name|indexedQualifierOffset
init|=
name|prefixTreeEncoder
operator|.
name|getQualifierWriter
argument_list|()
operator|.
name|getOutputArrayOffset
argument_list|(
name|sortedIndex
argument_list|)
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|blockMeta
operator|.
name|getQualifierOffsetWidth
argument_list|()
argument_list|,
name|indexedQualifierOffset
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeTimestampIndexes
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockMeta
operator|.
name|getTimestampIndexWidth
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCells
condition|;
operator|++
name|i
control|)
block|{
name|int
name|cellInsertionIndex
init|=
name|tokenizerNode
operator|.
name|getFirstInsertionIndex
argument_list|()
operator|+
name|i
decl_stmt|;
name|long
name|timestamp
init|=
name|prefixTreeEncoder
operator|.
name|getTimestamps
argument_list|()
index|[
name|cellInsertionIndex
index|]
decl_stmt|;
name|int
name|timestampIndex
init|=
name|prefixTreeEncoder
operator|.
name|getTimestampEncoder
argument_list|()
operator|.
name|getIndex
argument_list|(
name|timestamp
argument_list|)
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|blockMeta
operator|.
name|getTimestampIndexWidth
argument_list|()
argument_list|,
name|timestampIndex
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeMvccVersionIndexes
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockMeta
operator|.
name|getMvccVersionIndexWidth
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCells
condition|;
operator|++
name|i
control|)
block|{
name|int
name|cellInsertionIndex
init|=
name|tokenizerNode
operator|.
name|getFirstInsertionIndex
argument_list|()
operator|+
name|i
decl_stmt|;
name|long
name|mvccVersion
init|=
name|prefixTreeEncoder
operator|.
name|getMvccVersions
argument_list|()
index|[
name|cellInsertionIndex
index|]
decl_stmt|;
name|int
name|mvccVersionIndex
init|=
name|prefixTreeEncoder
operator|.
name|getMvccVersionEncoder
argument_list|()
operator|.
name|getIndex
argument_list|(
name|mvccVersion
argument_list|)
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|blockMeta
operator|.
name|getMvccVersionIndexWidth
argument_list|()
argument_list|,
name|mvccVersionIndex
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeCellTypes
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockMeta
operator|.
name|isAllSameType
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCells
condition|;
operator|++
name|i
control|)
block|{
name|int
name|cellInsertionIndex
init|=
name|tokenizerNode
operator|.
name|getFirstInsertionIndex
argument_list|()
operator|+
name|i
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|prefixTreeEncoder
operator|.
name|getTypeBytes
argument_list|()
index|[
name|cellInsertionIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeValueOffsets
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCells
condition|;
operator|++
name|i
control|)
block|{
name|int
name|cellInsertionIndex
init|=
name|tokenizerNode
operator|.
name|getFirstInsertionIndex
argument_list|()
operator|+
name|i
decl_stmt|;
name|long
name|valueStartIndex
init|=
name|prefixTreeEncoder
operator|.
name|getValueOffset
argument_list|(
name|cellInsertionIndex
argument_list|)
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|blockMeta
operator|.
name|getValueOffsetWidth
argument_list|()
argument_list|,
name|valueStartIndex
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeValueLengths
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCells
condition|;
operator|++
name|i
control|)
block|{
name|int
name|cellInsertionIndex
init|=
name|tokenizerNode
operator|.
name|getFirstInsertionIndex
argument_list|()
operator|+
name|i
decl_stmt|;
name|int
name|valueLength
init|=
name|prefixTreeEncoder
operator|.
name|getValueLength
argument_list|(
name|cellInsertionIndex
argument_list|)
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|blockMeta
operator|.
name|getValueLengthWidth
argument_list|()
argument_list|,
name|valueLength
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If a branch or a nub, the last thing we append are the UFInt offsets to the child row nodes.    */
specifier|protected
name|void
name|writeNextRowTrieNodeOffsets
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|TokenizerNode
argument_list|>
name|children
init|=
name|tokenizerNode
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|TokenizerNode
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|distanceToChild
init|=
name|tokenizerNode
operator|.
name|getNegativeIndex
argument_list|()
operator|-
name|child
operator|.
name|getNegativeIndex
argument_list|()
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|blockMeta
operator|.
name|getNextNodeOffsetWidth
argument_list|()
argument_list|,
name|distanceToChild
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

