begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|tokenize
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Data structure used in the first stage of PrefixTree encoding:  *<li>accepts a sorted stream of ByteRanges  *<li>splits them into a set of tokens, each held by a {@link TokenizerNode}  *<li>connects the TokenizerNodes via standard java references  *<li>keeps a pool of TokenizerNodes and a reusable byte[] for holding all token content  *<p><br>  * Mainly used for turning Cell rowKeys into a trie, but also used for family and qualifier  * encoding.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Tokenizer
block|{
comment|/***************** fields **************************/
specifier|protected
name|int
name|numArraysAdded
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|lastNodeId
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|TokenizerNode
argument_list|>
name|nodes
decl_stmt|;
specifier|protected
name|int
name|numNodes
decl_stmt|;
specifier|protected
name|TokenizerNode
name|root
decl_stmt|;
specifier|protected
name|byte
index|[]
name|tokens
decl_stmt|;
specifier|protected
name|int
name|tokensLength
decl_stmt|;
specifier|protected
name|int
name|maxElementLength
init|=
literal|0
decl_stmt|;
comment|// number of levels in the tree assuming root level is 0
specifier|protected
name|int
name|treeDepth
init|=
literal|0
decl_stmt|;
comment|/******************* construct *******************/
specifier|public
name|Tokenizer
parameter_list|()
block|{
name|this
operator|.
name|nodes
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|tokens
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|numArraysAdded
operator|=
literal|0
expr_stmt|;
name|lastNodeId
operator|=
operator|-
literal|1
expr_stmt|;
name|numNodes
operator|=
literal|0
expr_stmt|;
name|tokensLength
operator|=
literal|0
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
name|maxElementLength
operator|=
literal|0
expr_stmt|;
name|treeDepth
operator|=
literal|0
expr_stmt|;
block|}
comment|/***************** building *************************/
specifier|public
name|void
name|addAll
parameter_list|(
name|ArrayList
argument_list|<
name|ByteRange
argument_list|>
name|sortedByteRanges
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedByteRanges
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ByteRange
name|byteRange
init|=
name|sortedByteRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|addSorted
argument_list|(
name|byteRange
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addSorted
parameter_list|(
specifier|final
name|ByteRange
name|bytes
parameter_list|)
block|{
operator|++
name|numArraysAdded
expr_stmt|;
if|if
condition|(
name|bytes
operator|.
name|getLength
argument_list|()
operator|>
name|maxElementLength
condition|)
block|{
name|maxElementLength
operator|=
name|bytes
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
comment|// nodeDepth of firstNode (non-root) is 1
name|root
operator|=
name|addNode
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|root
operator|.
name|addSorted
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|incrementNumOccurrencesOfLatestValue
parameter_list|()
block|{
name|CollectionUtils
operator|.
name|getLast
argument_list|(
name|nodes
argument_list|)
operator|.
name|incrementNumOccurrences
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|long
name|nextNodeId
parameter_list|()
block|{
return|return
operator|++
name|lastNodeId
return|;
block|}
specifier|protected
name|TokenizerNode
name|addNode
parameter_list|(
name|TokenizerNode
name|parent
parameter_list|,
name|int
name|nodeDepth
parameter_list|,
name|int
name|tokenStartOffset
parameter_list|,
specifier|final
name|ByteRange
name|token
parameter_list|,
name|int
name|inputTokenOffset
parameter_list|)
block|{
name|int
name|inputTokenLength
init|=
name|token
operator|.
name|getLength
argument_list|()
operator|-
name|inputTokenOffset
decl_stmt|;
name|int
name|tokenOffset
init|=
name|appendTokenAndRepointByteRange
argument_list|(
name|token
argument_list|,
name|inputTokenOffset
argument_list|)
decl_stmt|;
name|TokenizerNode
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|<=
name|numNodes
condition|)
block|{
name|node
operator|=
operator|new
name|TokenizerNode
argument_list|(
name|this
argument_list|,
name|parent
argument_list|,
name|nodeDepth
argument_list|,
name|tokenStartOffset
argument_list|,
name|tokenOffset
argument_list|,
name|inputTokenLength
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
name|nodes
operator|.
name|get
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
name|node
operator|.
name|reset
argument_list|()
expr_stmt|;
name|node
operator|.
name|reconstruct
argument_list|(
name|this
argument_list|,
name|parent
argument_list|,
name|nodeDepth
argument_list|,
name|tokenStartOffset
argument_list|,
name|tokenOffset
argument_list|,
name|inputTokenLength
argument_list|)
expr_stmt|;
block|}
operator|++
name|numNodes
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|protected
name|int
name|appendTokenAndRepointByteRange
parameter_list|(
specifier|final
name|ByteRange
name|token
parameter_list|,
name|int
name|inputTokenOffset
parameter_list|)
block|{
name|int
name|newOffset
init|=
name|tokensLength
decl_stmt|;
name|int
name|inputTokenLength
init|=
name|token
operator|.
name|getLength
argument_list|()
operator|-
name|inputTokenOffset
decl_stmt|;
name|int
name|newMinimum
init|=
name|tokensLength
operator|+
name|inputTokenLength
decl_stmt|;
name|tokens
operator|=
name|ArrayUtils
operator|.
name|growIfNecessary
argument_list|(
name|tokens
argument_list|,
name|newMinimum
argument_list|,
literal|2
operator|*
name|newMinimum
argument_list|)
expr_stmt|;
name|token
operator|.
name|deepCopySubRangeTo
argument_list|(
name|inputTokenOffset
argument_list|,
name|inputTokenLength
argument_list|,
name|tokens
argument_list|,
name|tokensLength
argument_list|)
expr_stmt|;
name|tokensLength
operator|+=
name|inputTokenLength
expr_stmt|;
return|return
name|newOffset
return|;
block|}
specifier|protected
name|void
name|submitMaxNodeDepthCandidate
parameter_list|(
name|int
name|nodeDepth
parameter_list|)
block|{
if|if
condition|(
name|nodeDepth
operator|>
name|treeDepth
condition|)
block|{
name|treeDepth
operator|=
name|nodeDepth
expr_stmt|;
block|}
block|}
comment|/********************* read ********************/
specifier|public
name|int
name|getNumAdded
parameter_list|()
block|{
return|return
name|numArraysAdded
return|;
block|}
comment|// for debugging
specifier|public
name|ArrayList
argument_list|<
name|TokenizerNode
argument_list|>
name|getNodes
parameter_list|(
name|boolean
name|includeNonLeaves
parameter_list|,
name|boolean
name|includeLeaves
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TokenizerNode
argument_list|>
name|nodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|root
operator|.
name|appendNodesToExternalList
argument_list|(
name|nodes
argument_list|,
name|includeNonLeaves
argument_list|,
name|includeLeaves
argument_list|)
expr_stmt|;
return|return
name|nodes
return|;
block|}
specifier|public
name|void
name|appendNodes
parameter_list|(
name|List
argument_list|<
name|TokenizerNode
argument_list|>
name|appendTo
parameter_list|,
name|boolean
name|includeNonLeaves
parameter_list|,
name|boolean
name|includeLeaves
parameter_list|)
block|{
name|root
operator|.
name|appendNodesToExternalList
argument_list|(
name|appendTo
argument_list|,
name|includeNonLeaves
argument_list|,
name|includeLeaves
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getArrays
parameter_list|()
block|{
name|List
argument_list|<
name|TokenizerNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|TokenizerNode
argument_list|>
argument_list|()
decl_stmt|;
name|root
operator|.
name|appendNodesToExternalList
argument_list|(
name|nodes
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|byteArrays
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|CollectionUtils
operator|.
name|nullSafeSize
argument_list|(
name|nodes
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|TokenizerNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|node
operator|.
name|getNumOccurrences
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|byte
index|[]
name|byteArray
init|=
name|node
operator|.
name|getNewByteArray
argument_list|()
decl_stmt|;
name|byteArrays
operator|.
name|add
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|byteArrays
return|;
block|}
comment|//currently unused, but working and possibly useful in the future
specifier|public
name|void
name|getNode
parameter_list|(
name|TokenizerRowSearchResult
name|resultHolder
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|int
name|keyOffset
parameter_list|,
name|int
name|keyLength
parameter_list|)
block|{
name|root
operator|.
name|getNode
argument_list|(
name|resultHolder
argument_list|,
name|key
argument_list|,
name|keyOffset
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
block|}
comment|/********************** write ***************************/
specifier|public
name|Tokenizer
name|setNodeFirstInsertionIndexes
parameter_list|()
block|{
name|root
operator|.
name|setInsertionIndexes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Tokenizer
name|appendOutputArrayOffsets
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|offsets
parameter_list|)
block|{
name|root
operator|.
name|appendOutputArrayOffsets
argument_list|(
name|offsets
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/********************* print/debug ********************/
specifier|protected
specifier|static
specifier|final
name|Boolean
name|INCLUDE_FULL_TREE_IN_TO_STRING
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getStructuralString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|INCLUDE_FULL_TREE_IN_TO_STRING
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|bytes
range|:
name|getArrays
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStructuralString
parameter_list|()
block|{
name|List
argument_list|<
name|TokenizerNode
argument_list|>
name|nodes
init|=
name|getNodes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenizerNode
name|node
range|:
name|nodes
control|)
block|{
name|String
name|line
init|=
name|node
operator|.
name|getPaddedTokenAndOccurrenceString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/****************** get/set ************************/
specifier|public
name|TokenizerNode
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
specifier|public
name|int
name|getMaxElementLength
parameter_list|()
block|{
return|return
name|maxElementLength
return|;
block|}
specifier|public
name|int
name|getTreeDepth
parameter_list|()
block|{
return|return
name|treeDepth
return|;
block|}
block|}
end_class

end_unit

