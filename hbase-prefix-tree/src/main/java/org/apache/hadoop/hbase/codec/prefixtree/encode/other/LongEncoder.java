begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|other
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|vint
operator|.
name|UFIntTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * Used to de-duplicate, sort, minimize/diff, and serialize timestamps and mvccVersions from a  * collection of Cells.  *  * 1. add longs to a HashSet for fast de-duplication  * 2. keep track of the min and max  * 3. copy all values to a new long[]  * 4. Collections.sort the long[]  * 5. calculate maxDelta = max - min  * 6. determine FInt width based on maxDelta  * 7. PrefixTreeEncoder binary searches to find index of each value  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|LongEncoder
block|{
comment|/****************** fields ****************************/
specifier|protected
name|HashSet
argument_list|<
name|Long
argument_list|>
name|uniqueValues
decl_stmt|;
specifier|protected
name|long
index|[]
name|sortedUniqueValues
decl_stmt|;
specifier|protected
name|long
name|min
decl_stmt|,
name|max
decl_stmt|,
name|maxDelta
decl_stmt|;
specifier|protected
name|int
name|bytesPerDelta
decl_stmt|;
specifier|protected
name|int
name|bytesPerIndex
decl_stmt|;
specifier|protected
name|int
name|totalCompressedBytes
decl_stmt|;
comment|/****************** construct ****************************/
specifier|public
name|LongEncoder
parameter_list|()
block|{
name|this
operator|.
name|uniqueValues
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|uniqueValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sortedUniqueValues
operator|=
literal|null
expr_stmt|;
name|min
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|max
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
name|maxDelta
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
name|bytesPerIndex
operator|=
literal|0
expr_stmt|;
name|bytesPerDelta
operator|=
literal|0
expr_stmt|;
name|totalCompressedBytes
operator|=
literal|0
expr_stmt|;
block|}
comment|/************* methods ***************************/
specifier|public
name|void
name|add
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|uniqueValues
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LongEncoder
name|compile
parameter_list|()
block|{
name|int
name|numUnique
init|=
name|uniqueValues
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numUnique
operator|==
literal|1
condition|)
block|{
name|min
operator|=
name|CollectionUtils
operator|.
name|getFirst
argument_list|(
name|uniqueValues
argument_list|)
expr_stmt|;
name|sortedUniqueValues
operator|=
operator|new
name|long
index|[]
block|{
name|min
block|}
expr_stmt|;
return|return
name|this
return|;
block|}
name|sortedUniqueValues
operator|=
operator|new
name|long
index|[
name|numUnique
index|]
expr_stmt|;
name|int
name|lastIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|long
name|value
range|:
name|uniqueValues
control|)
block|{
name|sortedUniqueValues
index|[
operator|++
name|lastIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedUniqueValues
argument_list|)
expr_stmt|;
name|min
operator|=
name|ArrayUtils
operator|.
name|getFirst
argument_list|(
name|sortedUniqueValues
argument_list|)
expr_stmt|;
name|max
operator|=
name|ArrayUtils
operator|.
name|getLast
argument_list|(
name|sortedUniqueValues
argument_list|)
expr_stmt|;
name|maxDelta
operator|=
name|max
operator|-
name|min
expr_stmt|;
if|if
condition|(
name|maxDelta
operator|>
literal|0
condition|)
block|{
name|bytesPerDelta
operator|=
name|UFIntTool
operator|.
name|numBytes
argument_list|(
name|maxDelta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesPerDelta
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|maxIndex
init|=
name|numUnique
operator|-
literal|1
decl_stmt|;
name|bytesPerIndex
operator|=
name|UFIntTool
operator|.
name|numBytes
argument_list|(
name|maxIndex
argument_list|)
expr_stmt|;
name|totalCompressedBytes
operator|=
name|numUnique
operator|*
name|bytesPerDelta
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getDelta
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|sortedUniqueValues
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|sortedUniqueValues
index|[
name|index
index|]
operator|-
name|min
return|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|(
name|long
name|value
parameter_list|)
block|{
comment|// should always find an exact match
return|return
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|sortedUniqueValues
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeBytes
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedUniqueValues
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|long
name|delta
init|=
name|sortedUniqueValues
index|[
name|i
index|]
operator|-
name|min
decl_stmt|;
name|UFIntTool
operator|.
name|writeBytes
argument_list|(
name|bytesPerDelta
argument_list|,
name|delta
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
comment|//convenience method for tests
specifier|public
name|byte
index|[]
name|getByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|writeBytes
argument_list|(
name|baos
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
name|int
name|getOutputArrayLength
parameter_list|()
block|{
return|return
name|sortedUniqueValues
operator|.
name|length
operator|*
name|bytesPerDelta
return|;
block|}
specifier|public
name|int
name|getNumUniqueValues
parameter_list|()
block|{
return|return
name|sortedUniqueValues
operator|.
name|length
return|;
block|}
comment|/******************* Object methods **********************/
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|ArrayUtils
operator|.
name|isEmpty
argument_list|(
name|sortedUniqueValues
argument_list|)
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
return|return
literal|"["
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|ArrayUtils
operator|.
name|toList
argument_list|(
name|sortedUniqueValues
argument_list|)
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/******************** get/set **************************/
specifier|public
name|long
name|getMin
parameter_list|()
block|{
return|return
name|min
return|;
block|}
specifier|public
name|int
name|getBytesPerDelta
parameter_list|()
block|{
return|return
name|bytesPerDelta
return|;
block|}
specifier|public
name|int
name|getBytesPerIndex
parameter_list|()
block|{
return|return
name|bytesPerIndex
return|;
block|}
specifier|public
name|int
name|getTotalCompressedBytes
parameter_list|()
block|{
return|return
name|totalCompressedBytes
return|;
block|}
specifier|public
name|long
index|[]
name|getSortedUniqueTimestamps
parameter_list|()
block|{
return|return
name|sortedUniqueValues
return|;
block|}
block|}
end_class

end_unit

