begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|encode
operator|.
name|tokenize
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Determines order of nodes in the output array.  Maybe possible to optimize further.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TokenDepthComparator
implements|implements
name|Comparator
argument_list|<
name|TokenizerNode
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TokenizerNode
name|a
parameter_list|,
name|TokenizerNode
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"a cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"b cannot be null"
argument_list|)
throw|;
block|}
comment|// put leaves at the end
if|if
condition|(
operator|!
name|a
operator|.
name|isLeaf
argument_list|()
operator|&&
name|b
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|.
name|isLeaf
argument_list|()
operator|&&
operator|!
name|b
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|.
name|isLeaf
argument_list|()
operator|&&
name|b
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
comment|// keep leaves in sorted order (for debugability)
return|return
name|a
operator|.
name|getId
argument_list|()
operator|<
name|b
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
comment|// compare depth
if|if
condition|(
name|a
operator|.
name|getTokenOffset
argument_list|()
operator|<
name|b
operator|.
name|getTokenOffset
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getTokenOffset
argument_list|()
operator|>
name|b
operator|.
name|getTokenOffset
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// if same depth, return lower id first. ids are unique
return|return
name|a
operator|.
name|getId
argument_list|()
operator|<
name|b
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
end_class

end_unit

