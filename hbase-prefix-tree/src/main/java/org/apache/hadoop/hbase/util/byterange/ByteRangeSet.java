begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|byterange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SimpleMutableByteRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Performance oriented class for de-duping and storing arbitrary byte[]'s arriving in non-sorted  * order. Appends individual byte[]'s to a single big byte[] to avoid overhead and garbage.  *<p>  * Current implementations are {@link org.apache.hadoop.hbase.util.byterange.impl.ByteRangeHashSet} and  * {@link org.apache.hadoop.hbase.util.byterange.impl.ByteRangeTreeSet}, but other options might be a  * trie-oriented ByteRangeTrieSet, etc  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|ByteRangeSet
block|{
comment|/******************** fields **********************/
specifier|protected
name|byte
index|[]
name|byteAppender
decl_stmt|;
specifier|protected
name|int
name|numBytes
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|ByteRange
argument_list|,
name|Integer
argument_list|>
name|uniqueIndexByUniqueRange
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|ByteRange
argument_list|>
name|uniqueRanges
decl_stmt|;
specifier|protected
name|int
name|numUniqueRanges
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
index|[]
name|uniqueRangeIndexByInsertionId
decl_stmt|;
specifier|protected
name|int
name|numInputs
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Integer
argument_list|>
name|sortedIndexByUniqueIndex
decl_stmt|;
specifier|protected
name|int
index|[]
name|sortedIndexByInsertionId
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|ByteRange
argument_list|>
name|sortedRanges
decl_stmt|;
comment|/****************** construct **********************/
specifier|protected
name|ByteRangeSet
parameter_list|()
block|{
name|this
operator|.
name|byteAppender
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|uniqueRanges
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|uniqueRangeIndexByInsertionId
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|sortedIndexByUniqueIndex
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|sortedIndexByInsertionId
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|sortedRanges
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|numBytes
operator|=
literal|0
expr_stmt|;
name|uniqueIndexByUniqueRange
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numUniqueRanges
operator|=
literal|0
expr_stmt|;
name|numInputs
operator|=
literal|0
expr_stmt|;
name|sortedIndexByUniqueIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sortedRanges
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/*************** abstract *************************/
specifier|public
specifier|abstract
name|void
name|addToSortedRanges
parameter_list|()
function_decl|;
comment|/**************** methods *************************/
comment|/**    * Check if the incoming byte range exists.  If not, add it to the backing byteAppender[] and    * insert it into the tracking Map uniqueIndexByUniqueRange.    */
specifier|public
name|void
name|add
parameter_list|(
name|ByteRange
name|bytes
parameter_list|)
block|{
name|Integer
name|index
init|=
name|uniqueIndexByUniqueRange
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|index
operator|=
name|store
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
name|int
name|minLength
init|=
name|numInputs
operator|+
literal|1
decl_stmt|;
name|uniqueRangeIndexByInsertionId
operator|=
name|ArrayUtils
operator|.
name|growIfNecessary
argument_list|(
name|uniqueRangeIndexByInsertionId
argument_list|,
name|minLength
argument_list|,
literal|2
operator|*
name|minLength
argument_list|)
expr_stmt|;
name|uniqueRangeIndexByInsertionId
index|[
name|numInputs
index|]
operator|=
name|index
expr_stmt|;
operator|++
name|numInputs
expr_stmt|;
block|}
specifier|protected
name|int
name|store
parameter_list|(
name|ByteRange
name|bytes
parameter_list|)
block|{
name|int
name|indexOfNewElement
init|=
name|numUniqueRanges
decl_stmt|;
if|if
condition|(
name|uniqueRanges
operator|.
name|size
argument_list|()
operator|<=
name|numUniqueRanges
condition|)
block|{
name|uniqueRanges
operator|.
name|add
argument_list|(
operator|new
name|SimpleMutableByteRange
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteRange
name|storedRange
init|=
name|uniqueRanges
operator|.
name|get
argument_list|(
name|numUniqueRanges
argument_list|)
decl_stmt|;
name|int
name|neededBytes
init|=
name|numBytes
operator|+
name|bytes
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|byteAppender
operator|=
name|ArrayUtils
operator|.
name|growIfNecessary
argument_list|(
name|byteAppender
argument_list|,
name|neededBytes
argument_list|,
literal|2
operator|*
name|neededBytes
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|deepCopyTo
argument_list|(
name|byteAppender
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
name|storedRange
operator|.
name|set
argument_list|(
name|byteAppender
argument_list|,
name|numBytes
argument_list|,
name|bytes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// this isn't valid yet
name|numBytes
operator|+=
name|bytes
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|uniqueIndexByUniqueRange
operator|.
name|put
argument_list|(
name|storedRange
argument_list|,
name|indexOfNewElement
argument_list|)
expr_stmt|;
name|int
name|newestUniqueIndex
init|=
name|numUniqueRanges
decl_stmt|;
operator|++
name|numUniqueRanges
expr_stmt|;
return|return
name|newestUniqueIndex
return|;
block|}
specifier|public
name|ByteRangeSet
name|compile
parameter_list|()
block|{
name|addToSortedRanges
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedRanges
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sortedIndexByUniqueIndex
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// need to grow the size
block|}
comment|// TODO move this to an invert(int[]) util method
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedIndexByUniqueIndex
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|uniqueIndex
init|=
name|uniqueIndexByUniqueRange
operator|.
name|get
argument_list|(
name|sortedRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|sortedIndexByUniqueIndex
operator|.
name|set
argument_list|(
name|uniqueIndex
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|sortedIndexByInsertionId
operator|=
name|ArrayUtils
operator|.
name|growIfNecessary
argument_list|(
name|sortedIndexByInsertionId
argument_list|,
name|numInputs
argument_list|,
name|numInputs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInputs
condition|;
operator|++
name|i
control|)
block|{
name|int
name|uniqueRangeIndex
init|=
name|uniqueRangeIndexByInsertionId
index|[
name|i
index|]
decl_stmt|;
name|int
name|sortedIndex
init|=
name|sortedIndexByUniqueIndex
operator|.
name|get
argument_list|(
name|uniqueRangeIndex
argument_list|)
decl_stmt|;
name|sortedIndexByInsertionId
index|[
name|i
index|]
operator|=
name|sortedIndex
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getSortedIndexForInsertionId
parameter_list|(
name|int
name|insertionId
parameter_list|)
block|{
return|return
name|sortedIndexByInsertionId
index|[
name|insertionId
index|]
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|uniqueIndexByUniqueRange
operator|.
name|size
argument_list|()
return|;
block|}
comment|/***************** standard methods ************************/
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteRange
name|r
range|:
name|sortedRanges
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|i
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|r
operator|.
name|deepCopyToNewArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\ntotalSize:"
operator|+
name|numBytes
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\navgSize:"
operator|+
name|getAvgSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**************** get/set *****************************/
specifier|public
name|ArrayList
argument_list|<
name|ByteRange
argument_list|>
name|getSortedRanges
parameter_list|()
block|{
return|return
name|sortedRanges
return|;
block|}
specifier|public
name|long
name|getAvgSize
parameter_list|()
block|{
return|return
name|numBytes
operator|/
name|numUniqueRanges
return|;
block|}
block|}
end_class

end_unit

