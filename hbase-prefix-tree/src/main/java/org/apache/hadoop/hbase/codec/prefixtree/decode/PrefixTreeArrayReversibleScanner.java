begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|decode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|PrefixTreeBlockMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|prefixtree
operator|.
name|scanner
operator|.
name|ReversibleCellScanner
import|;
end_import

begin_comment
comment|/**  * Methods for going backwards through a PrefixTree block.  This class is split out on its own to  * simplify the Scanner superclass and Searcher subclass.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|PrefixTreeArrayReversibleScanner
extends|extends
name|PrefixTreeArrayScanner
implements|implements
name|ReversibleCellScanner
block|{
comment|/***************** construct ******************************/
specifier|public
name|PrefixTreeArrayReversibleScanner
parameter_list|(
name|PrefixTreeBlockMeta
name|blockMeta
parameter_list|,
name|int
name|rowTreeDepth
parameter_list|,
name|int
name|rowBufferLength
parameter_list|,
name|int
name|qualifierBufferLength
parameter_list|,
name|int
name|tagsBufferLength
parameter_list|)
block|{
name|super
argument_list|(
name|blockMeta
argument_list|,
name|rowTreeDepth
argument_list|,
name|rowBufferLength
argument_list|,
name|qualifierBufferLength
argument_list|,
name|tagsBufferLength
argument_list|)
expr_stmt|;
block|}
comment|/***************** Object methods ***************************/
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|//trivial override to confirm intent (findbugs)
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|/***************** methods **********************************/
annotation|@
name|Override
specifier|public
name|boolean
name|previous
parameter_list|()
block|{
if|if
condition|(
name|afterLast
condition|)
block|{
name|afterLast
operator|=
literal|false
expr_stmt|;
name|positionAtLastCell
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|beforeFirst
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isFirstCellInRow
argument_list|()
condition|)
block|{
name|previousRowInternal
argument_list|()
expr_stmt|;
if|if
condition|(
name|beforeFirst
condition|)
block|{
return|return
literal|false
return|;
block|}
name|populateLastNonRowFields
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|populatePreviousNonRowFields
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|previousRow
parameter_list|(
name|boolean
name|endOfRow
parameter_list|)
block|{
name|previousRowInternal
argument_list|()
expr_stmt|;
if|if
condition|(
name|beforeFirst
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|endOfRow
condition|)
block|{
name|populateLastNonRowFields
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|populateFirstNonRowFields
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|previousRowInternal
parameter_list|()
block|{
if|if
condition|(
name|beforeFirst
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|afterLast
condition|)
block|{
name|positionAtLastRow
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|currentRowNode
operator|.
name|hasOccurrences
argument_list|()
condition|)
block|{
name|discardCurrentRowNode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentRowNode
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
while|while
condition|(
operator|!
name|beforeFirst
condition|)
block|{
if|if
condition|(
name|isDirectlyAfterNub
argument_list|()
condition|)
block|{
comment|//we are about to back up to the nub
name|currentRowNode
operator|.
name|resetFanIndex
argument_list|()
expr_stmt|;
comment|//sets it to -1, which is before the first leaf
name|nubCellsRemain
operator|=
literal|true
expr_stmt|;
comment|//this positions us on the nub
return|return
literal|true
return|;
block|}
if|if
condition|(
name|currentRowNode
operator|.
name|hasPreviousFanNodes
argument_list|()
condition|)
block|{
name|followPreviousFan
argument_list|()
expr_stmt|;
name|descendToLastRowFromCurrentPosition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// keep going up the stack until we find previous fan positions
name|discardCurrentRowNode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentRowNode
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|currentRowNode
operator|.
name|hasOccurrences
argument_list|()
condition|)
block|{
comment|// escape clause
name|currentRowNode
operator|.
name|resetFanIndex
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// found some values
block|}
block|}
return|return
literal|false
return|;
comment|// went past the beginning
block|}
specifier|protected
name|boolean
name|isDirectlyAfterNub
parameter_list|()
block|{
return|return
name|currentRowNode
operator|.
name|isNub
argument_list|()
operator|&&
name|currentRowNode
operator|.
name|getFanIndex
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|protected
name|void
name|positionAtLastRow
parameter_list|()
block|{
name|reInitFirstNode
argument_list|()
expr_stmt|;
name|descendToLastRowFromCurrentPosition
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|descendToLastRowFromCurrentPosition
parameter_list|()
block|{
while|while
condition|(
name|currentRowNode
operator|.
name|hasChildren
argument_list|()
condition|)
block|{
name|followLastFan
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|positionAtLastCell
parameter_list|()
block|{
name|positionAtLastRow
argument_list|()
expr_stmt|;
name|populateLastNonRowFields
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

