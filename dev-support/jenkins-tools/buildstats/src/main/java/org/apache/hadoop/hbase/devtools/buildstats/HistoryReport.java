begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|devtools
operator|.
name|buildstats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|HistoryReport
block|{
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|buildsWithTestResults
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|historyResults
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|skippedTests
decl_stmt|;
specifier|public
name|HistoryReport
parameter_list|()
block|{
name|buildsWithTestResults
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|historyResults
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|getHistoryResults
parameter_list|()
block|{
return|return
name|this
operator|.
name|historyResults
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSkippedTests
parameter_list|()
block|{
return|return
name|this
operator|.
name|skippedTests
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getBuildsWithTestResults
parameter_list|()
block|{
return|return
name|this
operator|.
name|buildsWithTestResults
return|;
block|}
specifier|public
name|void
name|setBuildsWithTestResults
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|src
parameter_list|)
block|{
name|this
operator|.
name|buildsWithTestResults
operator|=
name|src
expr_stmt|;
block|}
specifier|public
name|void
name|setHistoryResults
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|src
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|skippedTests
parameter_list|)
block|{
name|this
operator|.
name|skippedTests
operator|=
name|skippedTests
expr_stmt|;
name|this
operator|.
name|historyResults
operator|=
name|src
expr_stmt|;
block|}
specifier|public
name|void
name|printReport
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%-30s"
argument_list|,
literal|"Failed Test Cases Stats"
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|getBuildsWithTestResults
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%5d"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n========================================================"
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|getHistoryResults
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|failedTestCase
range|:
name|keys
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|int
index|[]
name|resultHistory
init|=
name|getHistoryResults
argument_list|()
operator|.
name|get
argument_list|(
name|failedTestCase
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|failedTestCase
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultHistory
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%5d"
argument_list|,
name|resultHistory
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|skippedTests
operator|==
literal|null
condition|)
return|return;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"\n%-30s\n"
argument_list|,
literal|"Skipped Test Cases Stats"
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|getBuildsWithTestResults
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tmpSkippedTests
init|=
name|skippedTests
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpSkippedTests
operator|==
literal|null
operator|||
name|tmpSkippedTests
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"======= %d skipped(Or don't have) following test suites =======\n"
argument_list|,
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|skippedTestcase
range|:
name|tmpSkippedTests
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|skippedTestcase
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

