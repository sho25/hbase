begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|devtools
operator|.
name|buildstats
package|;
end_package

begin_import
import|import
name|com
operator|.
name|offbytwo
operator|.
name|jenkins
operator|.
name|JenkinsServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|offbytwo
operator|.
name|jenkins
operator|.
name|client
operator|.
name|JenkinsHttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|offbytwo
operator|.
name|jenkins
operator|.
name|model
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestResultHistory
block|{
specifier|public
specifier|final
specifier|static
name|String
name|STATUS_REGRESSION
init|=
literal|"REGRESSION"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|STATUS_FAILED
init|=
literal|"FAILED"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|STATUS_PASSED
init|=
literal|"PASSED"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|STATUS_FIXED
init|=
literal|"FIXED"
decl_stmt|;
specifier|public
specifier|static
name|int
name|BUILD_HISTORY_NUM
init|=
literal|15
decl_stmt|;
specifier|private
name|JenkinsHttpClient
name|client
decl_stmt|;
specifier|private
name|String
name|jobName
decl_stmt|;
specifier|public
name|TestResultHistory
parameter_list|(
name|String
name|apacheHTTPURL
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|passWord
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|this
operator|.
name|client
operator|=
operator|new
name|JenkinsHttpClient
argument_list|(
operator|new
name|URI
argument_list|(
name|apacheHTTPURL
argument_list|)
argument_list|,
name|userName
argument_list|,
name|passWord
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobName
operator|=
name|jobName
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|apacheHTTPUrl
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|jobName
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|int
name|tmpHistoryJobNum
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|tmpHistoryJobNum
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|tmpHistoryJobNum
operator|>
literal|0
condition|)
block|{
name|BUILD_HISTORY_NUM
operator|=
name|tmpHistoryJobNum
expr_stmt|;
block|}
block|}
try|try
block|{
name|TestResultHistory
name|buildHistory
init|=
operator|new
name|TestResultHistory
argument_list|(
name|apacheHTTPUrl
argument_list|,
name|jobName
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|HistoryReport
name|report
init|=
name|buildHistory
operator|.
name|getReport
argument_list|()
decl_stmt|;
comment|// display result in console
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got unexpected exception: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<Jenkins HTTP URL><Job Name> [Number of Historical Jobs to Check]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sample Input: \"https://builds.apache.org\" "
operator|+
literal|"\"HBase-TRUNK-on-Hadoop-2.0.0\" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HistoryReport
name|getReport
parameter_list|()
block|{
name|HistoryReport
name|report
init|=
operator|new
name|HistoryReport
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|buildWithTestResults
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|failureStats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|JenkinsServer
name|jenkins
init|=
operator|new
name|JenkinsServer
argument_list|(
name|this
operator|.
name|client
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Job
argument_list|>
name|jobs
init|=
name|jenkins
operator|.
name|getJobs
argument_list|()
decl_stmt|;
name|JobWithDetails
name|job
init|=
name|jobs
operator|.
name|get
argument_list|(
name|jobName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|details
argument_list|()
decl_stmt|;
comment|// build test case failures stats for the past 10 builds
name|Build
name|lastBuild
init|=
name|job
operator|.
name|getLastBuild
argument_list|()
decl_stmt|;
name|int
name|startingBuildNumber
init|=
operator|(
name|lastBuild
operator|.
name|getNumber
argument_list|()
operator|-
name|BUILD_HISTORY_NUM
operator|>
literal|0
operator|)
condition|?
name|lastBuild
operator|.
name|getNumber
argument_list|()
operator|-
name|BUILD_HISTORY_NUM
operator|+
literal|1
else|:
literal|1
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|executedTestCases
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|skippedTestCases
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allExecutedTestCases
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|normalizedTestSet
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|buildUrl
init|=
name|lastBuild
operator|.
name|getUrl
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startingBuildNumber
init|;
name|i
operator|<=
name|lastBuild
operator|.
name|getNumber
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildExecutedTestCases
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|String
name|curBuildUrl
init|=
name|buildUrl
operator|.
name|replaceFirst
argument_list|(
literal|"/"
operator|+
name|lastBuild
operator|.
name|getNumber
argument_list|()
argument_list|,
literal|"/"
operator|+
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|failedCases
init|=
literal|null
decl_stmt|;
try|try
block|{
name|failedCases
operator|=
name|getBuildFailedTestCases
argument_list|(
name|curBuildUrl
argument_list|,
name|buildExecutedTestCases
argument_list|)
expr_stmt|;
name|buildWithTestResults
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// can't get result so skip it
continue|continue;
block|}
name|executedTestCases
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|buildExecutedTestCases
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|tmpSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tmpTestCase
range|:
name|buildExecutedTestCases
operator|.
name|keySet
argument_list|()
control|)
block|{
name|allExecutedTestCases
operator|.
name|add
argument_list|(
name|tmpTestCase
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tmpTestCase
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSet
operator|.
name|add
argument_list|(
name|tmpTestCase
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tmpTestCase
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|normalizedTestSet
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|tmpSet
argument_list|)
expr_stmt|;
comment|// set test result failed cases of current build
for|for
control|(
name|String
name|curFailedTestCase
range|:
name|failedCases
control|)
block|{
if|if
condition|(
name|failureStats
operator|.
name|containsKey
argument_list|(
name|curFailedTestCase
argument_list|)
condition|)
block|{
name|int
index|[]
name|testCaseResultArray
init|=
name|failureStats
operator|.
name|get
argument_list|(
name|curFailedTestCase
argument_list|)
decl_stmt|;
name|testCaseResultArray
index|[
name|i
operator|-
name|startingBuildNumber
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|int
index|[]
name|testResult
init|=
operator|new
name|int
index|[
name|BUILD_HISTORY_NUM
index|]
decl_stmt|;
name|testResult
index|[
name|i
operator|-
name|startingBuildNumber
index|]
operator|=
operator|-
literal|1
expr_stmt|;
comment|// refill previous build test results for newly failed test case
for|for
control|(
name|int
name|k
init|=
name|startingBuildNumber
init|;
name|k
operator|<
name|i
condition|;
name|k
operator|++
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tmpBuildExecutedTestCases
init|=
name|executedTestCases
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpBuildExecutedTestCases
operator|!=
literal|null
operator|&&
name|tmpBuildExecutedTestCases
operator|.
name|containsKey
argument_list|(
name|curFailedTestCase
argument_list|)
condition|)
block|{
name|String
name|statusStr
init|=
name|tmpBuildExecutedTestCases
operator|.
name|get
argument_list|(
name|curFailedTestCase
argument_list|)
decl_stmt|;
name|testResult
index|[
name|k
operator|-
name|startingBuildNumber
index|]
operator|=
name|convertStatusStringToInt
argument_list|(
name|statusStr
argument_list|)
expr_stmt|;
block|}
block|}
name|failureStats
operator|.
name|put
argument_list|(
name|curFailedTestCase
argument_list|,
name|testResult
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set test result for previous failed test cases
for|for
control|(
name|String
name|curTestCase
range|:
name|failureStats
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|failedCases
operator|.
name|contains
argument_list|(
name|curTestCase
argument_list|)
operator|&&
name|buildExecutedTestCases
operator|.
name|containsKey
argument_list|(
name|curTestCase
argument_list|)
condition|)
block|{
name|String
name|statusVal
init|=
name|buildExecutedTestCases
operator|.
name|get
argument_list|(
name|curTestCase
argument_list|)
decl_stmt|;
name|int
index|[]
name|testCaseResultArray
init|=
name|failureStats
operator|.
name|get
argument_list|(
name|curTestCase
argument_list|)
decl_stmt|;
name|testCaseResultArray
index|[
name|i
operator|-
name|startingBuildNumber
index|]
operator|=
name|convertStatusStringToInt
argument_list|(
name|statusVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check which test suits skipped
for|for
control|(
name|int
name|i
init|=
name|startingBuildNumber
init|;
name|i
operator|<=
name|lastBuild
operator|.
name|getNumber
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|skippedTests
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tmpBuildExecutedTestCases
init|=
name|executedTestCases
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpBuildExecutedTestCases
operator|==
literal|null
operator|||
name|tmpBuildExecutedTestCases
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// normalize test case names
name|Set
argument_list|<
name|String
argument_list|>
name|tmpNormalizedTestCaseSet
init|=
name|normalizedTestSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|testCase
range|:
name|allExecutedTestCases
control|)
block|{
if|if
condition|(
operator|!
name|tmpNormalizedTestCaseSet
operator|.
name|contains
argument_list|(
name|testCase
argument_list|)
condition|)
block|{
name|skippedTests
operator|.
name|add
argument_list|(
name|testCase
argument_list|)
expr_stmt|;
block|}
block|}
name|skippedTestCases
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|skippedTests
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|setBuildsWithTestResults
argument_list|(
name|buildWithTestResults
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|failedTestCase
range|:
name|failureStats
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
index|[]
name|resultHistory
init|=
name|failureStats
operator|.
name|get
argument_list|(
name|failedTestCase
argument_list|)
decl_stmt|;
name|int
index|[]
name|compactHistory
init|=
operator|new
name|int
index|[
name|buildWithTestResults
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|buildWithTestResults
control|)
block|{
name|compactHistory
index|[
name|index
index|]
operator|=
name|resultHistory
index|[
name|i
operator|-
name|startingBuildNumber
index|]
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
name|failureStats
operator|.
name|put
argument_list|(
name|failedTestCase
argument_list|,
name|compactHistory
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|setHistoryResults
argument_list|(
name|failureStats
argument_list|,
name|skippedTestCases
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
comment|/**    * @param statusVal    * @return 1 means PASSED, -1 means FAILED, 0 means SKIPPED    */
specifier|static
name|int
name|convertStatusStringToInt
parameter_list|(
name|String
name|statusVal
parameter_list|)
block|{
if|if
condition|(
name|statusVal
operator|.
name|equalsIgnoreCase
argument_list|(
name|STATUS_REGRESSION
argument_list|)
operator|||
name|statusVal
operator|.
name|equalsIgnoreCase
argument_list|(
name|STATUS_FAILED
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|statusVal
operator|.
name|equalsIgnoreCase
argument_list|(
name|STATUS_PASSED
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get failed test cases of a build    * @param buildURL Jenkins build job URL    * @param executedTestCases Set of test cases which was executed for the build    * @return list of failed test case names    */
name|List
argument_list|<
name|String
argument_list|>
name|getBuildFailedTestCases
parameter_list|(
name|String
name|buildURL
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|executedTestCases
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|apiPath
init|=
name|urlJoin
argument_list|(
name|buildURL
argument_list|,
literal|"testReport?depth=10&tree=suites[cases[className,name,status,failedSince]]"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TestSuite
argument_list|>
name|suites
init|=
name|client
operator|.
name|get
argument_list|(
name|apiPath
argument_list|,
name|BuildResultWithTestCaseDetails
operator|.
name|class
argument_list|)
operator|.
name|getSuites
argument_list|()
decl_stmt|;
name|result
operator|=
name|getTestSuiteFailedTestcase
argument_list|(
name|suites
argument_list|,
name|executedTestCases
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getTestSuiteFailedTestcase
parameter_list|(
name|List
argument_list|<
name|TestSuite
argument_list|>
name|suites
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|executedTestCases
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|suites
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
for|for
control|(
name|TestSuite
name|curTestSuite
range|:
name|suites
control|)
block|{
for|for
control|(
name|TestCaseResult
name|curTestCaseResult
range|:
name|curTestSuite
operator|.
name|getCases
argument_list|()
control|)
block|{
if|if
condition|(
name|curTestCaseResult
operator|.
name|getStatus
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|STATUS_FAILED
argument_list|)
operator|||
name|curTestCaseResult
operator|.
name|getStatus
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|STATUS_REGRESSION
argument_list|)
condition|)
block|{
comment|// failed test case
name|result
operator|.
name|add
argument_list|(
name|curTestCaseResult
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|executedTestCases
operator|.
name|put
argument_list|(
name|curTestCaseResult
operator|.
name|getFullName
argument_list|()
argument_list|,
name|curTestCaseResult
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
name|String
name|urlJoin
parameter_list|(
name|String
name|path1
parameter_list|,
name|String
name|path2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path1
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path1
operator|+=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|path2
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path2
operator|=
name|path2
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|path1
operator|+
name|path2
return|;
block|}
block|}
end_class

end_unit

