begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|THBaseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_class
specifier|public
class|class
name|DemoClient
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Thrift2 Demo"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"This demo assumes you have a table called \"example\" with a column family called \"family1\""
argument_list|)
expr_stmt|;
name|String
name|host
init|=
literal|"localhost"
decl_stmt|;
name|int
name|port
init|=
literal|9090
decl_stmt|;
name|int
name|timeout
init|=
literal|10000
decl_stmt|;
name|boolean
name|framed
init|=
literal|false
decl_stmt|;
name|TTransport
name|transport
init|=
operator|new
name|TSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|framed
condition|)
block|{
name|transport
operator|=
operator|new
name|TFramedTransport
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
name|TProtocol
name|protocol
init|=
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
decl_stmt|;
comment|// This is our thrift client.
name|THBaseService
operator|.
name|Iface
name|client
init|=
operator|new
name|THBaseService
operator|.
name|Client
argument_list|(
name|protocol
argument_list|)
decl_stmt|;
comment|// open the transport
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
name|ByteBuffer
name|table
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"example"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|()
decl_stmt|;
name|put
operator|.
name|setRow
argument_list|(
literal|"row1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|()
decl_stmt|;
name|columnValue
operator|.
name|setFamily
argument_list|(
literal|"family1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|columnValue
operator|.
name|setQualifier
argument_list|(
literal|"qualifier1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|columnValue
operator|.
name|setValue
argument_list|(
literal|"value1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|client
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|()
decl_stmt|;
name|get
operator|.
name|setRow
argument_list|(
literal|"row1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|TResult
name|result
init|=
name|client
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"row = "
operator|+
operator|new
name|String
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TColumnValue
name|resultColumnValue
range|:
name|result
operator|.
name|getColumnValues
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"family = "
operator|+
operator|new
name|String
argument_list|(
name|resultColumnValue
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"qualifier = "
operator|+
operator|new
name|String
argument_list|(
name|resultColumnValue
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"value = "
operator|+
operator|new
name|String
argument_list|(
name|resultColumnValue
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"timestamp = "
operator|+
name|resultColumnValue
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

