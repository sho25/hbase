begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|example
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|example
operator|.
name|generated
operator|.
name|BulkDeleteProtos
operator|.
name|BulkDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|example
operator|.
name|generated
operator|.
name|BulkDeleteProtos
operator|.
name|BulkDeleteRequest
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|example
operator|.
name|generated
operator|.
name|BulkDeleteProtos
operator|.
name|BulkDeleteRequest
operator|.
name|DeleteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|example
operator|.
name|generated
operator|.
name|BulkDeleteProtos
operator|.
name|BulkDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|example
operator|.
name|generated
operator|.
name|BulkDeleteProtos
operator|.
name|BulkDeleteService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|BlockingRpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestBulkDeleteProtocol
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// @Ignore @BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|BulkDeleteEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// @Ignore @AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|// @Ignore @Test
specifier|public
name|void
name|testBulkDeleteEndpoint
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBulkDeleteEndpoint"
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|createTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
name|rowkey
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
comment|// Deleting all the rows.
name|long
name|noOfRowsDeleted
init|=
name|invokeBulkDeleteProtocol
argument_list|(
name|tableName
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|,
literal|5
argument_list|,
name|DeleteType
operator|.
name|ROW
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|noOfRowsDeleted
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
control|)
block|{
name|rows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// @Ignore @Test
specifier|public
name|void
name|testBulkDeleteEndpointWhenRowBatchSizeLessThanRowsToDeleteFromARegion
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBulkDeleteEndpointWhenRowBatchSizeLessThanRowsToDeleteFromARegion"
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|createTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
name|rowkey
argument_list|,
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
comment|// Deleting all the rows.
name|long
name|noOfRowsDeleted
init|=
name|invokeBulkDeleteProtocol
argument_list|(
name|tableName
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|,
literal|10
argument_list|,
name|DeleteType
operator|.
name|ROW
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|noOfRowsDeleted
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
control|)
block|{
name|rows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|long
name|invokeBulkDeleteProtocol
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|int
name|rowBatchSize
parameter_list|,
specifier|final
name|DeleteType
name|deleteType
parameter_list|,
specifier|final
name|Long
name|timeStamp
parameter_list|)
throws|throws
name|Throwable
block|{
name|Table
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|long
name|noOfDeletedRows
init|=
literal|0L
decl_stmt|;
name|Batch
operator|.
name|Call
argument_list|<
name|BulkDeleteService
argument_list|,
name|BulkDeleteResponse
argument_list|>
name|callable
init|=
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|BulkDeleteService
argument_list|,
name|BulkDeleteResponse
argument_list|>
argument_list|()
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|BulkDeleteResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|BulkDeleteResponse
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|BulkDeleteResponse
name|call
parameter_list|(
name|BulkDeleteService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
name|BulkDeleteRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setScan
argument_list|(
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDeleteType
argument_list|(
name|deleteType
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRowBatchSize
argument_list|(
name|rowBatchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeStamp
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTimestamp
argument_list|(
name|timeStamp
argument_list|)
expr_stmt|;
block|}
name|service
operator|.
name|delete
argument_list|(
name|controller
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|BulkDeleteResponse
argument_list|>
name|result
init|=
name|ht
operator|.
name|coprocessorService
argument_list|(
name|BulkDeleteService
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|callable
argument_list|)
decl_stmt|;
for|for
control|(
name|BulkDeleteResponse
name|response
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
name|noOfDeletedRows
operator|+=
name|response
operator|.
name|getRowsDeleted
argument_list|()
expr_stmt|;
block|}
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|noOfDeletedRows
return|;
block|}
comment|// @Ignore @Test
specifier|public
name|void
name|testBulkDeleteWithConditionBasedDelete
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBulkDeleteWithConditionBasedDelete"
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|createTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
name|j
operator|%
literal|10
operator|==
literal|0
operator|)
condition|?
literal|"v1"
else|:
literal|"v2"
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
name|rowkey
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|FilterList
name|fl
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|SingleColumnValueFilter
name|scvf
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// fl.addFilter(new FirstKeyOnlyFilter());
name|fl
operator|.
name|addFilter
argument_list|(
name|scvf
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|fl
argument_list|)
expr_stmt|;
comment|// Deleting all the rows where cf1:c1=v1
name|long
name|noOfRowsDeleted
init|=
name|invokeBulkDeleteProtocol
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
literal|500
argument_list|,
name|DeleteType
operator|.
name|ROW
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|noOfRowsDeleted
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
control|)
block|{
name|rows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|90
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// @Ignore @Test
specifier|public
name|void
name|testBulkDeleteColumn
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBulkDeleteColumn"
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|createTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
name|j
operator|%
literal|10
operator|==
literal|0
operator|)
condition|?
literal|"v1"
else|:
literal|"v2"
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
name|rowkey
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|)
expr_stmt|;
comment|// Delete the column cf1:col2
name|long
name|noOfRowsDeleted
init|=
name|invokeBulkDeleteProtocol
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
literal|500
argument_list|,
name|DeleteType
operator|.
name|COLUMN
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|noOfRowsDeleted
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// @Ignore @Test
specifier|public
name|void
name|testBulkDeleteFamily
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBulkDeleteFamily"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY2
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|120
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Table
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
literal|"v1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY2
argument_list|,
name|QUALIFIER2
argument_list|,
literal|"v2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY1
argument_list|)
expr_stmt|;
comment|// Delete the column family cf1
name|long
name|noOfRowsDeleted
init|=
name|invokeBulkDeleteProtocol
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
literal|500
argument_list|,
name|DeleteType
operator|.
name|FAMILY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|noOfRowsDeleted
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY2
argument_list|,
name|QUALIFIER2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// @Ignore @Test
specifier|public
name|void
name|testBulkDeleteColumnVersion
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBulkDeleteColumnVersion"
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|createTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
literal|"v1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Latest version values
name|value
operator|=
literal|"v2"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY1
argument_list|)
expr_stmt|;
comment|// Delete the latest version values of all the columns in family cf1.
name|long
name|noOfRowsDeleted
init|=
name|invokeBulkDeleteProtocol
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
literal|500
argument_list|,
name|DeleteType
operator|.
name|VERSION
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|noOfRowsDeleted
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|column
init|=
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|column
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"v1"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|=
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|column
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"v1"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|=
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|column
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"v1"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// @Ignore @Test
specifier|public
name|void
name|testBulkDeleteColumnVersionBasedOnTS
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBulkDeleteColumnVersionBasedOnTS"
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|createTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
comment|// TS = 1000L
name|byte
index|[]
name|value
init|=
literal|"v1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
literal|1000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
literal|1000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
literal|1000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// TS = 1234L
name|value
operator|=
literal|"v2"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Latest version values
name|value
operator|=
literal|"v3"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|)
expr_stmt|;
comment|// Delete the column cf1:c3's one version at TS=1234
name|long
name|noOfRowsDeleted
init|=
name|invokeBulkDeleteProtocol
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
literal|500
argument_list|,
name|DeleteType
operator|.
name|VERSION
argument_list|,
literal|1234L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|noOfRowsDeleted
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getFamilyMap
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|column
init|=
name|result
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|column
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"v3"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"v1"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// @Ignore @Test
specifier|public
name|void
name|testBulkDeleteWithNumberOfVersions
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBulkDeleteWithNumberOfVersions"
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|createTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
comment|// TS = 1000L
name|byte
index|[]
name|value
init|=
literal|"v1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
literal|1000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
literal|1000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
literal|1000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// TS = 1234L
name|value
operator|=
literal|"v2"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
literal|1234L
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// TS = 2000L
name|value
operator|=
literal|"v3"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
literal|2000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
literal|2000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
literal|2000L
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Latest version values
name|value
operator|=
literal|"v4"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
comment|// Delete all the versions of columns cf1:c1 and cf1:c2 falling with the time range
comment|// [1000,2000)
specifier|final
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|1000L
argument_list|,
literal|2000L
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|long
name|noOfDeletedRows
init|=
literal|0L
decl_stmt|;
name|long
name|noOfVersionsDeleted
init|=
literal|0L
decl_stmt|;
name|Batch
operator|.
name|Call
argument_list|<
name|BulkDeleteService
argument_list|,
name|BulkDeleteResponse
argument_list|>
name|callable
init|=
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|BulkDeleteService
argument_list|,
name|BulkDeleteResponse
argument_list|>
argument_list|()
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|BlockingRpcCallback
argument_list|<
name|BulkDeleteResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|BulkDeleteResponse
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|BulkDeleteResponse
name|call
parameter_list|(
name|BulkDeleteService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
name|BulkDeleteRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setScan
argument_list|(
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDeleteType
argument_list|(
name|DeleteType
operator|.
name|VERSION
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRowBatchSize
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|service
operator|.
name|delete
argument_list|(
name|controller
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|BulkDeleteResponse
argument_list|>
name|result
init|=
name|ht
operator|.
name|coprocessorService
argument_list|(
name|BulkDeleteService
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|callable
argument_list|)
decl_stmt|;
for|for
control|(
name|BulkDeleteResponse
name|response
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
name|noOfDeletedRows
operator|+=
name|response
operator|.
name|getRowsDeleted
argument_list|()
expr_stmt|;
name|noOfVersionsDeleted
operator|+=
name|response
operator|.
name|getVersionsDeleted
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|noOfDeletedRows
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|noOfVersionsDeleted
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|Scan
name|scan1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan1
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan1
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|getFamilyMap
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|column
init|=
name|res
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|column
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"v4"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"v3"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|=
name|res
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|column
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"v4"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|column
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"v3"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|res
operator|.
name|getColumnCells
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Table
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Just setting 10 as I am not testing with more than 10 versions here
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|120
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Table
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|ht
return|;
block|}
specifier|private
name|Put
name|createPut
parameter_list|(
name|byte
index|[]
name|rowkey
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER1
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER2
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY1
argument_list|,
name|QUALIFIER3
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
block|}
end_class

end_unit

