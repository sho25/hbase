begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PositionedByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * An example for using protobuf objects with {@link DataType} API.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|PBCell
extends|extends
name|PBType
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|encodedClass
parameter_list|()
block|{
return|return
name|CellProtos
operator|.
name|Cell
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|skip
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|builder
init|=
name|CellProtos
operator|.
name|Cell
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|CodedInputStream
name|is
init|=
name|inputStreamFromByteRange
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|is
operator|.
name|setSizeLimit
argument_list|(
name|src
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|mergeFrom
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|int
name|consumed
init|=
name|is
operator|.
name|getTotalBytesRead
argument_list|()
decl_stmt|;
name|src
operator|.
name|setPosition
argument_list|(
name|src
operator|.
name|getPosition
argument_list|()
operator|+
name|consumed
argument_list|)
expr_stmt|;
return|return
name|consumed
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while skipping type."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CellProtos
operator|.
name|Cell
name|decode
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|builder
init|=
name|CellProtos
operator|.
name|Cell
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|CodedInputStream
name|is
init|=
name|inputStreamFromByteRange
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|is
operator|.
name|setSizeLimit
argument_list|(
name|src
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|CellProtos
operator|.
name|Cell
name|ret
init|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|is
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|src
operator|.
name|setPosition
argument_list|(
name|src
operator|.
name|getPosition
argument_list|()
operator|+
name|is
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while decoding type."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|encode
parameter_list|(
name|PositionedByteRange
name|dst
parameter_list|,
name|CellProtos
operator|.
name|Cell
name|val
parameter_list|)
block|{
name|CodedOutputStream
name|os
init|=
name|outputStreamFromByteRange
argument_list|(
name|dst
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|before
init|=
name|os
operator|.
name|spaceLeft
argument_list|()
decl_stmt|,
name|after
decl_stmt|,
name|written
decl_stmt|;
name|val
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|after
operator|=
name|os
operator|.
name|spaceLeft
argument_list|()
expr_stmt|;
name|written
operator|=
name|before
operator|-
name|after
expr_stmt|;
name|dst
operator|.
name|setPosition
argument_list|(
name|dst
operator|.
name|getPosition
argument_list|()
operator|+
name|written
argument_list|)
expr_stmt|;
return|return
name|written
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while encoding type."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

