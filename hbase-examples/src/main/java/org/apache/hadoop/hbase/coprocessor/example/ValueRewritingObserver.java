begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionLifeCycleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * This RegionObserver replaces the values of Puts from one value to another on compaction.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ValueRewritingObserver
implements|implements
name|RegionObserver
implements|,
name|RegionCoprocessor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ORIGINAL_VALUE_KEY
init|=
literal|"hbase.examples.coprocessor.value.rewrite.orig"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLACED_VALUE_KEY
init|=
literal|"hbase.examples.coprocessor.value.rewrite.replaced"
decl_stmt|;
specifier|private
name|byte
index|[]
name|sourceValue
init|=
literal|null
decl_stmt|;
specifier|private
name|byte
index|[]
name|replacedValue
init|=
literal|null
decl_stmt|;
specifier|private
name|Bytes
operator|.
name|ByteArrayComparator
name|comparator
decl_stmt|;
specifier|private
name|CellBuilder
name|cellBuilder
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
comment|// Extremely important to be sure that the coprocessor is invoked as a RegionObserver
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionCoprocessorEnvironment
name|renv
init|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
decl_stmt|;
name|sourceValue
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|renv
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|ORIGINAL_VALUE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|replacedValue
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|renv
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|REPLACED_VALUE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|comparator
operator|=
operator|new
name|Bytes
operator|.
name|ByteArrayComparator
argument_list|()
expr_stmt|;
name|cellBuilder
operator|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InternalScanner
name|preCompact
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
specifier|final
name|InternalScanner
name|scanner
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|,
name|CompactionRequest
name|request
parameter_list|)
block|{
name|InternalScanner
name|modifyingScanner
init|=
operator|new
name|InternalScanner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|,
name|ScannerContext
name|scannerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
name|scanner
operator|.
name|next
argument_list|(
name|result
argument_list|,
name|scannerContext
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|c
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Replace the Cell if the value is the one we're replacing
if|if
condition|(
name|CellUtil
operator|.
name|isPut
argument_list|(
name|c
argument_list|)
operator|&&
name|comparator
operator|.
name|compare
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
argument_list|,
name|sourceValue
argument_list|)
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|cellBuilder
operator|.
name|setRow
argument_list|(
name|CellUtil
operator|.
name|copyRow
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setFamily
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setQualifier
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setTimestamp
argument_list|(
name|c
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
comment|// Make sure each cell gets a unique value
name|byte
index|[]
name|clonedValue
init|=
operator|new
name|byte
index|[
name|replacedValue
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|replacedValue
argument_list|,
literal|0
argument_list|,
name|clonedValue
argument_list|,
literal|0
argument_list|,
name|replacedValue
operator|.
name|length
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setValue
argument_list|(
name|clonedValue
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|cellBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cellBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|modifyingScanner
return|;
block|}
block|}
end_class

end_unit

