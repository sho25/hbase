begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * A simple example shows how to use asynchronous client.  */
end_comment

begin_class
specifier|public
class|class
name|AsyncClientExample
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncClientExample
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The size for thread pool.    */
specifier|private
specifier|static
specifier|final
name|int
name|THREAD_POOL_SIZE
init|=
literal|16
decl_stmt|;
comment|/**    * The default number of operations.    */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_OPS
init|=
literal|100
decl_stmt|;
comment|/**    * The name of the column family. d for default.    */
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
comment|/**    * For the example we're just using one qualifier.    */
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|getConn
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|f
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
return|return
name|f
return|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|future
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
argument_list|)
condition|)
block|{
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|toComplete
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|conn
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|toComplete
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
comment|// we need to reset the future holder so we will get a chance to recreate an async
comment|// connection at next try.
name|future
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|toComplete
operator|.
name|complete
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|toComplete
return|;
block|}
else|else
block|{
name|f
operator|=
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
block|}
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NP_NONNULL_PARAM_VIOLATION"
argument_list|,
name|justification
operator|=
literal|"it is valid to pass NULL to CompletableFuture#completedFuture"
argument_list|)
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|closeConn
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|f
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|null
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|closeFuture
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|f
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|conn
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
name|closeFuture
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|closeFuture
return|;
block|}
specifier|private
name|byte
index|[]
name|getKey
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%08x"
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
argument_list|<
literal|1
operator|||
name|args
operator|.
name|length
argument_list|>
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" tableName [num_operations]"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|numOps
init|=
name|args
operator|.
name|length
operator|>
literal|1
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
else|:
name|DEFAULT_NUM_OPS
decl_stmt|;
name|ExecutorService
name|threadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREAD_POOL_SIZE
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"AsyncClientExample"
argument_list|)
argument_list|)
decl_stmt|;
comment|// We use AsyncTable here so we need to provide a separated thread pool. RawAsyncTable does not
comment|// need a thread pool and may have a better performance if you use it correctly as it can save
comment|// some context switches. But if you use RawAsyncTable incorrectly, you may have a very bad
comment|// impact on performance so use it with caution.
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numOps
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|numOps
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
block|{
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|future
init|=
name|getConn
argument_list|()
decl_stmt|;
name|future
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|conn
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to get async connection for "
operator|+
name|i
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
name|AsyncTable
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|getKey
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|putResp
parameter_list|,
name|putErr
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|putErr
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"put failed for "
operator|+
name|i
argument_list|,
name|putErr
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"put for "
operator|+
name|i
operator|+
literal|" succeeded, try getting"
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|getKey
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|result
parameter_list|,
name|getErr
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|getErr
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"get failed for "
operator|+
name|i
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"get failed for "
operator|+
name|i
operator|+
literal|", server returns empty result"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|result
operator|.
name|containsColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUAL
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"get failed for "
operator|+
name|i
operator|+
literal|", the result does not contain "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|QUAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|v
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUAL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
name|i
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"get failed for "
operator|+
name|i
operator|+
literal|", the value of "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|QUAL
argument_list|)
operator|+
literal|" is "
operator|+
name|v
operator|+
literal|", exected "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"get for "
operator|+
name|i
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
block|}
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|closeConn
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|AsyncClientExample
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

