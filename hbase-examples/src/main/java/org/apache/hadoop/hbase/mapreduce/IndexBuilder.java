begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_comment
comment|/**  * Example map/reduce job to construct index tables that can be used to quickly  * find a row based on the value of a column. It demonstrates:  *<ul>  *<li>Using TableInputFormat and TableMapReduceUtil to use an HTable as input  * to a map/reduce job.</li>  *<li>Passing values from main method to children via the configuration.</li>  *<li>Using MultiTableOutputFormat to output to multiple tables from a  * map/reduce job.</li>  *<li>A real use case of building a secondary index over a table.</li>  *</ul>  *  *<h3>Usage</h3>  *  *<p>  * Modify ${HADOOP_HOME}/conf/hadoop-env.sh to include the hbase jar, the  * zookeeper jar (can be found in lib/ directory under HBase root, the examples output directory,  * and the hbase conf directory in HADOOP_CLASSPATH, and then run  *<tt><strong>bin/hadoop org.apache.hadoop.hbase.mapreduce.IndexBuilder TABLE_NAME COLUMN_FAMILY ATTR [ATTR ...]</strong></tt>  *</p>  *  *<p>  * To run with the sample data provided in index-builder-setup.rb, use the  * arguments<strong><tt>people attributes name email phone</tt></strong>.  *</p>  *  *<p>  * This code was written against HBase 0.21 trunk.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|IndexBuilder
block|{
comment|/** the column family containing the indexed row key */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|INDEX_COLUMN
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"INDEX"
argument_list|)
decl_stmt|;
comment|/** the qualifier containing the indexed row key */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|INDEX_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ROW"
argument_list|)
decl_stmt|;
comment|/**    * Internal Mapper to be run by Hadoop.    */
specifier|public
specifier|static
class|class
name|Map
extends|extends
name|Mapper
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|,
name|ImmutableBytesWritable
argument_list|,
name|Put
argument_list|>
block|{
specifier|private
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|indexes
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|rowKey
parameter_list|,
name|Result
name|result
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|index
range|:
name|indexes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|index
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ImmutableBytesWritable
name|tableName
init|=
name|index
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// original: row 123 attribute:phone 555-1212
comment|// index: row 555-1212 INDEX:ROW 123
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|INDEX_COLUMN
argument_list|,
name|INDEX_QUALIFIER
argument_list|,
name|rowKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|configuration
operator|.
name|get
argument_list|(
literal|"index.tablename"
argument_list|)
decl_stmt|;
name|String
index|[]
name|fields
init|=
name|configuration
operator|.
name|getStrings
argument_list|(
literal|"index.fields"
argument_list|)
decl_stmt|;
name|String
name|familyName
init|=
name|configuration
operator|.
name|get
argument_list|(
literal|"index.familyname"
argument_list|)
decl_stmt|;
name|family
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
name|indexes
operator|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|ImmutableBytesWritable
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
comment|// if the table is "people" and the field to index is "email", then the
comment|// index table will be called "people-email"
name|indexes
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|field
argument_list|)
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
literal|"-"
operator|+
name|field
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Job configuration.    */
specifier|public
specifier|static
name|Job
name|configureJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tableName
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|columnFamily
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"****"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|SCAN
argument_list|,
name|TableMapReduceUtil
operator|.
name|convertScanToString
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|INPUT_TABLE
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"index.tablename"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"index.familyname"
argument_list|,
name|columnFamily
argument_list|)
expr_stmt|;
name|String
index|[]
name|fields
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|args
index|[
name|i
operator|+
literal|2
index|]
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
literal|"index.fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"index.familyname"
argument_list|,
literal|"attributes"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|IndexBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TableInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|MultiTableOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
index|[]
name|otherArgs
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
operator|.
name|getRemainingArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherArgs
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Only "
operator|+
name|otherArgs
operator|.
name|length
operator|+
literal|" arguments supplied, required: 3"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: IndexBuilder<TABLE_NAME><COLUMN_FAMILY><ATTR> [<ATTR> ...]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Job
name|job
init|=
name|configureJob
argument_list|(
name|conf
argument_list|,
name|otherArgs
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

