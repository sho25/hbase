begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test transitions of state across the master.  */
end_comment

begin_class
specifier|public
class|class
name|TestMasterTransistions
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLENAME
init|=
literal|"master_transitions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|}
decl_stmt|;
comment|/**    * Start up a mini cluster and put a small table of many empty regions into it.    * @throws Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a cluster of two regionservers.
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Create a table of three families.  This will assign a region.
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLENAME
argument_list|)
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
name|int
name|countOfRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|t
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|waitUntilAllRegionsAssigned
argument_list|(
name|countOfRegions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterAllTests
parameter_list|()
throws|throws
name|IOException
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Listener for regionserver events testing hbase-2428 (Infinite loop of    * region closes if META region is offline).  In particular, listen    * for the close of the 'metaServer' and when it comes in, requeue it with a    * delay as though there were an issue processing the shutdown.  As part of    * the requeuing,  send over a close of a region on 'otherServer' so it comes    * into a master that has its meta region marked as offline.    */
specifier|static
class|class
name|HBase2428Listener
implements|implements
name|RegionServerOperationListener
block|{
comment|// Map of what we've delayed so we don't do do repeated delays.
specifier|private
specifier|final
name|Set
argument_list|<
name|RegionServerOperation
argument_list|>
name|postponed
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
empty_stmt|;
specifier|private
name|boolean
name|metaShutdownReceived
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|HServerAddress
name|metaAddress
decl_stmt|;
specifier|private
specifier|final
name|MiniHBaseCluster
name|cluster
decl_stmt|;
specifier|private
specifier|final
name|int
name|otherServerIndex
decl_stmt|;
specifier|private
specifier|final
name|HRegionInfo
name|hri
decl_stmt|;
specifier|private
name|int
name|closeCount
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|int
name|SERVER_DURATION
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
specifier|static
specifier|final
name|int
name|CLOSE_DURATION
init|=
literal|1
operator|*
literal|1000
decl_stmt|;
name|HBase2428Listener
parameter_list|(
specifier|final
name|MiniHBaseCluster
name|c
parameter_list|,
specifier|final
name|HServerAddress
name|metaAddress
parameter_list|,
specifier|final
name|HRegionInfo
name|closingHRI
parameter_list|,
specifier|final
name|int
name|otherServerIndex
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|metaAddress
operator|=
name|metaAddress
expr_stmt|;
name|this
operator|.
name|hri
operator|=
name|closingHRI
expr_stmt|;
name|this
operator|.
name|otherServerIndex
operator|=
name|otherServerIndex
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|RegionServerOperation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If a regionserver shutdown and its of the meta server, then we want to
comment|// delay the processing of the shutdown and send off a close of a region on
comment|// the 'otherServer.
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|ProcessServerShutdown
condition|)
block|{
name|ProcessServerShutdown
name|pss
init|=
operator|(
name|ProcessServerShutdown
operator|)
name|op
decl_stmt|;
if|if
condition|(
name|pss
operator|.
name|getDeadServerAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|metaAddress
argument_list|)
condition|)
block|{
comment|// Don't postpone more than once.
if|if
condition|(
operator|!
name|this
operator|.
name|postponed
operator|.
name|contains
argument_list|(
name|pss
argument_list|)
condition|)
block|{
comment|// Close some region.
name|this
operator|.
name|cluster
operator|.
name|addMessageToSendRegionServer
argument_list|(
name|this
operator|.
name|otherServerIndex
argument_list|,
operator|new
name|HMsg
argument_list|(
name|HMsg
operator|.
name|Type
operator|.
name|MSG_REGION_CLOSE
argument_list|,
name|hri
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Forcing close in test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|postponed
operator|.
name|add
argument_list|(
name|pss
argument_list|)
expr_stmt|;
comment|// Put off the processing of the regionserver shutdown processing.
name|pss
operator|.
name|setDelay
argument_list|(
name|SERVER_DURATION
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaShutdownReceived
operator|=
literal|true
expr_stmt|;
comment|// Return false.  This will add this op to the delayed queue.
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Have the close run frequently.
if|if
condition|(
name|isWantedCloseOperation
argument_list|(
name|op
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|setDelay
argument_list|(
name|CLOSE_DURATION
argument_list|)
expr_stmt|;
comment|// Count how many times it comes through here.
name|this
operator|.
name|closeCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|processed
parameter_list|(
specifier|final
name|RegionServerOperation
name|op
parameter_list|)
block|{
if|if
condition|(
name|isWantedCloseOperation
argument_list|(
name|op
argument_list|)
operator|==
literal|null
condition|)
return|return;
name|this
operator|.
name|done
operator|=
literal|true
expr_stmt|;
block|}
comment|/*      * @param op      * @return Null if not the wanted ProcessRegionClose, else<code>op</code>      * cast as a ProcessRegionClose.      */
specifier|private
name|ProcessRegionClose
name|isWantedCloseOperation
parameter_list|(
specifier|final
name|RegionServerOperation
name|op
parameter_list|)
block|{
comment|// Count every time we get a close operation.
if|if
condition|(
name|op
operator|instanceof
name|ProcessRegionClose
condition|)
block|{
name|ProcessRegionClose
name|c
init|=
operator|(
name|ProcessRegionClose
operator|)
name|op
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|regionInfo
operator|.
name|equals
argument_list|(
name|hri
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|this
operator|.
name|done
return|;
block|}
name|boolean
name|isMetaShutdownReceived
parameter_list|()
block|{
return|return
name|metaShutdownReceived
return|;
block|}
name|int
name|getCloseCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|closeCount
return|;
block|}
block|}
comment|/**    * In 2428, the meta region has just been set offline and then a close comes    * in.    * @see<a href="https://issues.apache.org/jira/browse/HBASE-2428">HBASE-2428</a>     */
annotation|@
name|Test
specifier|public
name|void
name|testRegionCloseWhenNoMetaHBase2428
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
specifier|final
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|int
name|metaIndex
init|=
name|cluster
operator|.
name|getServerWithMeta
argument_list|()
decl_stmt|;
comment|// Figure the index of the server that is not server the .META.
name|int
name|otherServerIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|metaIndex
condition|)
continue|continue;
name|otherServerIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
specifier|final
name|HRegionServer
name|otherServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|otherServerIndex
argument_list|)
decl_stmt|;
specifier|final
name|HRegionServer
name|metaHRS
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|metaIndex
argument_list|)
decl_stmt|;
comment|// Get a region out on the otherServer.
specifier|final
name|HRegionInfo
name|hri
init|=
name|otherServer
operator|.
name|getOnlineRegions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
comment|// Add our ReionServerOperationsListener
name|HBase2428Listener
name|listener
init|=
operator|new
name|HBase2428Listener
argument_list|(
name|cluster
argument_list|,
name|metaHRS
operator|.
name|getHServerInfo
argument_list|()
operator|.
name|getServerAddress
argument_list|()
argument_list|,
name|hri
argument_list|,
name|otherServerIndex
argument_list|)
decl_stmt|;
name|master
operator|.
name|getRegionServerOperationQueue
argument_list|()
operator|.
name|registerRegionServerOperationListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Now close the server carrying index.
name|cluster
operator|.
name|abortRegionServer
argument_list|(
name|metaIndex
argument_list|)
expr_stmt|;
comment|// First wait on receipt of meta server shutdown message.
while|while
condition|(
operator|!
name|listener
operator|.
name|metaShutdownReceived
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|listener
operator|.
name|isDone
argument_list|()
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// We should not have retried the close more times than it took for the
comment|// server shutdown message to exit the delay queue and get processed
comment|// (Multiple by two to add in some slop in case of GC or something).
name|assertTrue
argument_list|(
name|listener
operator|.
name|getCloseCount
argument_list|()
operator|<
operator|(
operator|(
name|HBase2428Listener
operator|.
name|SERVER_DURATION
operator|/
name|HBase2428Listener
operator|.
name|CLOSE_DURATION
operator|)
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|assertClosedRegionIsBackOnline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|master
operator|.
name|getRegionServerOperationQueue
argument_list|()
operator|.
name|unregisterRegionServerOperationListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertClosedRegionIsBackOnline
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
comment|// When we get here, region should be successfully deployed. Assert so.
comment|// 'aaa' is safe as first row if startkey is EMPTY_BYTE_ARRAY because we
comment|// loaded with HBaseTestingUtility#createMultiRegions.
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
condition|?
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
else|:
name|hri
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    * Wait until all rows in .META. have a non-empty info:server.  This means    * all regions have been deployed, master has been informed and updated    * .META. with the regions deployed server.    * @param countOfRegions How many regions in .META.    * @throws IOException    */
specifier|private
specifier|static
name|void
name|waitUntilAllRegionsAssigned
parameter_list|(
specifier|final
name|int
name|countOfRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
expr_stmt|;
name|ResultScanner
name|s
init|=
name|meta
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|r
init|=
literal|null
init|;
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|byte
index|[]
name|b
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|length
operator|<=
literal|0
condition|)
break|break;
name|rows
operator|++
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If I got to hear and all rows have a Server, then all have been assigned.
if|if
condition|(
name|rows
operator|==
name|countOfRegions
condition|)
break|break;
block|}
block|}
block|}
end_class

end_unit

