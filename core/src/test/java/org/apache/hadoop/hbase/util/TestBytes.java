begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestBytes
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testNullHashCode
parameter_list|()
block|{
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
name|Exception
name|ee
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Bytes
operator|.
name|hashCode
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ee
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|ee
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|lowest
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|middle
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|highest
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|parts
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|lowest
argument_list|,
name|highest
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|middle
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now divide into three parts.  Change highest so split is even.
name|highest
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
expr_stmt|;
name|parts
operator|=
name|Bytes
operator|.
name|split
argument_list|(
name|lowest
argument_list|,
name|highest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Assert that 3rd part is 'CCC'.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|,
name|middle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSplit2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// More split tests.
name|byte
index|[]
name|lowest
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"http://A"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|highest
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"http://z"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|middle
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"http://]"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|parts
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|lowest
argument_list|,
name|highest
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|middle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSplit3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test invalid split cases
name|byte
index|[]
name|low
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|high
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|3
block|}
decl_stmt|;
comment|// If swapped, should throw IAE
try|try
block|{
name|Bytes
operator|.
name|split
argument_list|(
name|high
argument_list|,
name|low
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should not be able to split if low> high"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// Correct
block|}
comment|// Single split should work
name|byte
index|[]
index|[]
name|parts
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|low
argument_list|,
name|high
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|i
operator|+
literal|" -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Returned split should have 3 parts but has "
operator|+
name|parts
operator|.
name|length
argument_list|,
name|parts
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// If split more than once, this should fail
name|parts
operator|=
name|Bytes
operator|.
name|split
argument_list|(
name|low
argument_list|,
name|high
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned split but should have failed"
argument_list|,
name|parts
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToLong
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|longs
init|=
block|{
operator|-
literal|1l
block|,
literal|123l
block|,
literal|122232323232l
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|float
index|[]
name|floats
init|=
block|{
operator|-
literal|1f
block|,
literal|123.123f
block|,
name|Float
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|floats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|floats
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floats
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toFloat
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|double
index|[]
name|doubles
init|=
block|{
name|Double
operator|.
name|MIN_VALUE
block|,
name|Double
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|doubles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubles
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toDouble
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testBinarySearch
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|arr
init|=
block|{
block|{
literal|1
block|}
block|,
block|{
literal|3
block|}
block|,
block|{
literal|5
block|}
block|,
block|{
literal|7
block|}
block|,
block|{
literal|9
block|}
block|,
block|{
literal|11
block|}
block|,
block|{
literal|13
block|}
block|,
block|{
literal|15
block|}
block|,     }
decl_stmt|;
name|byte
index|[]
name|key1
init|=
block|{
literal|3
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|key2
init|=
block|{
literal|4
block|,
literal|9
block|}
decl_stmt|;
name|byte
index|[]
name|key2_2
init|=
block|{
literal|4
block|}
decl_stmt|;
name|byte
index|[]
name|key3
init|=
block|{
literal|5
block|,
literal|11
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
operator|(
literal|2
operator|+
literal|1
operator|)
argument_list|,
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key2_2
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
operator|(
literal|2
operator|+
literal|1
operator|)
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|12
argument_list|,
literal|123435445
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|124634654
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10005460
argument_list|,
literal|5005645
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|1005435000
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10
argument_list|,
operator|-
literal|43657655
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|26
argument_list|,
literal|5034520
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|10657200
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|12343250
argument_list|,
literal|45376475
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|12343250
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|12
argument_list|,
operator|-
literal|34565445
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|1546543452
argument_list|,
operator|-
literal|34565445
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|checkTestIncrementBytes
parameter_list|(
name|long
name|val
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testValue
init|=
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
decl_stmt|;
if|if
condition|(
name|value
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|testValue
operator|=
operator|new
name|byte
index|[
name|Bytes
operator|.
name|SIZEOF_LONG
index|]
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|testValue
argument_list|,
name|testValue
operator|.
name|length
operator|-
name|value
operator|.
name|length
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|incrementResult
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|Bytes
operator|.
name|incrementBytes
argument_list|(
name|value
argument_list|,
name|amount
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|testValue
argument_list|)
operator|+
name|amount
operator|)
operator|==
name|incrementResult
return|;
block|}
block|}
end_class

end_unit

