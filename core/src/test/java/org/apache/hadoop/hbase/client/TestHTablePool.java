begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Tests HTablePool.  */
end_comment

begin_class
specifier|public
class|class
name|TestHTablePool
extends|extends
name|HBaseTestCase
block|{
specifier|public
name|void
name|testTableWithStringName
parameter_list|()
block|{
name|HTablePool
name|pool
init|=
operator|new
name|HTablePool
argument_list|(
operator|(
name|HBaseConfiguration
operator|)
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"testTable"
decl_stmt|;
comment|// Request a table from an empty pool
name|HTableInterface
name|table
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Return the table to the pool
name|pool
operator|.
name|putTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Request a table of the same name
name|HTableInterface
name|sameTable
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|table
argument_list|,
name|sameTable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTableWithByteArrayName
parameter_list|()
block|{
name|HTablePool
name|pool
init|=
operator|new
name|HTablePool
argument_list|(
operator|(
name|HBaseConfiguration
operator|)
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
comment|// Request a table from an empty pool
name|HTableInterface
name|table
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Return the table to the pool
name|pool
operator|.
name|putTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Request a table of the same name
name|HTableInterface
name|sameTable
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|table
argument_list|,
name|sameTable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTableWithMaxSize
parameter_list|()
block|{
name|HTablePool
name|pool
init|=
operator|new
name|HTablePool
argument_list|(
operator|(
name|HBaseConfiguration
operator|)
literal|null
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
literal|"testTable"
decl_stmt|;
comment|// Request tables from an empty pool
name|HTableInterface
name|table1
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableInterface
name|table2
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableInterface
name|table3
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Return the tables to the pool
name|pool
operator|.
name|putTable
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|pool
operator|.
name|putTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
comment|// The pool should reject this one since it is already full
name|pool
operator|.
name|putTable
argument_list|(
name|table3
argument_list|)
expr_stmt|;
comment|// Request tables of the same name
name|HTableInterface
name|sameTable1
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableInterface
name|sameTable2
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableInterface
name|sameTable3
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|table1
argument_list|,
name|sameTable1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|table2
argument_list|,
name|sameTable2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|table3
argument_list|,
name|sameTable3
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTablesWithDifferentNames
parameter_list|()
block|{
name|HTablePool
name|pool
init|=
operator|new
name|HTablePool
argument_list|(
operator|(
name|HBaseConfiguration
operator|)
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|String
name|tableName1
init|=
literal|"testTable1"
decl_stmt|;
name|String
name|tableName2
init|=
literal|"testTable2"
decl_stmt|;
comment|// Request a table from an empty pool
name|HTableInterface
name|table1
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName1
argument_list|)
decl_stmt|;
name|HTableInterface
name|table2
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table2
argument_list|)
expr_stmt|;
comment|// Return the tables to the pool
name|pool
operator|.
name|putTable
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|pool
operator|.
name|putTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
comment|// Request tables of the same names
name|HTableInterface
name|sameTable1
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName1
argument_list|)
decl_stmt|;
name|HTableInterface
name|sameTable2
init|=
name|pool
operator|.
name|getTable
argument_list|(
name|tableName2
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|table1
argument_list|,
name|sameTable1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|table2
argument_list|,
name|sameTable2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

