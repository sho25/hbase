begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_comment
comment|/**  * Generate random<key, value> pairs.  *<p>  * Copied from  *<a href="https://issues.apache.org/jira/browse/HADOOP-3315">hadoop-3315 tfile</a>.  * Remove after tfile is committed and use the tfile version of this class  * instead.</p>  */
end_comment

begin_class
class|class
name|KVGenerator
block|{
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|dict
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|sorted
decl_stmt|;
specifier|private
specifier|final
name|RandomDistribution
operator|.
name|DiscreteRNG
name|keyLenRNG
decl_stmt|,
name|valLenRNG
decl_stmt|;
specifier|private
name|BytesWritable
name|lastKey
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MIN_KEY_LEN
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
name|byte
name|prefix
index|[]
init|=
operator|new
name|byte
index|[
name|MIN_KEY_LEN
index|]
decl_stmt|;
specifier|public
name|KVGenerator
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|sorted
parameter_list|,
name|RandomDistribution
operator|.
name|DiscreteRNG
name|keyLenRNG
parameter_list|,
name|RandomDistribution
operator|.
name|DiscreteRNG
name|valLenRNG
parameter_list|,
name|RandomDistribution
operator|.
name|DiscreteRNG
name|wordLenRNG
parameter_list|,
name|int
name|dictSize
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|dict
operator|=
operator|new
name|byte
index|[
name|dictSize
index|]
index|[]
expr_stmt|;
name|this
operator|.
name|sorted
operator|=
name|sorted
expr_stmt|;
name|this
operator|.
name|keyLenRNG
operator|=
name|keyLenRNG
expr_stmt|;
name|this
operator|.
name|valLenRNG
operator|=
name|valLenRNG
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dictSize
condition|;
operator|++
name|i
control|)
block|{
name|int
name|wordLen
init|=
name|wordLenRNG
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|dict
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|wordLen
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|dict
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|lastKey
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
name|fillKey
argument_list|(
name|lastKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fillKey
parameter_list|(
name|BytesWritable
name|o
parameter_list|)
block|{
name|int
name|len
init|=
name|keyLenRNG
operator|.
name|nextInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|<
name|MIN_KEY_LEN
condition|)
name|len
operator|=
name|MIN_KEY_LEN
expr_stmt|;
name|o
operator|.
name|setSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|MIN_KEY_LEN
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|len
condition|)
block|{
name|byte
index|[]
name|word
init|=
name|dict
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dict
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|int
name|l
init|=
name|Math
operator|.
name|min
argument_list|(
name|word
operator|.
name|length
argument_list|,
name|len
operator|-
name|n
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|word
argument_list|,
literal|0
argument_list|,
name|o
operator|.
name|get
argument_list|()
argument_list|,
name|n
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|n
operator|+=
name|l
expr_stmt|;
block|}
if|if
condition|(
name|sorted
operator|&&
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|lastKey
operator|.
name|get
argument_list|()
argument_list|,
name|MIN_KEY_LEN
argument_list|,
name|lastKey
operator|.
name|getSize
argument_list|()
operator|-
name|MIN_KEY_LEN
argument_list|,
name|o
operator|.
name|get
argument_list|()
argument_list|,
name|MIN_KEY_LEN
argument_list|,
name|o
operator|.
name|getSize
argument_list|()
operator|-
name|MIN_KEY_LEN
argument_list|)
operator|>
literal|0
condition|)
block|{
name|incrementPrefix
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
argument_list|,
literal|0
argument_list|,
name|o
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|MIN_KEY_LEN
argument_list|)
expr_stmt|;
name|lastKey
operator|.
name|set
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fillValue
parameter_list|(
name|BytesWritable
name|o
parameter_list|)
block|{
name|int
name|len
init|=
name|valLenRNG
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|o
operator|.
name|setSize
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|len
condition|)
block|{
name|byte
index|[]
name|word
init|=
name|dict
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|dict
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|int
name|l
init|=
name|Math
operator|.
name|min
argument_list|(
name|word
operator|.
name|length
argument_list|,
name|len
operator|-
name|n
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|word
argument_list|,
literal|0
argument_list|,
name|o
operator|.
name|get
argument_list|()
argument_list|,
name|n
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|n
operator|+=
name|l
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|incrementPrefix
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|MIN_KEY_LEN
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
operator|++
name|prefix
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|prefix
index|[
name|i
index|]
operator|!=
literal|0
condition|)
return|return;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Prefix overflown"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|next
parameter_list|(
name|BytesWritable
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|,
name|boolean
name|dupKey
parameter_list|)
block|{
if|if
condition|(
name|dupKey
condition|)
block|{
name|key
operator|.
name|set
argument_list|(
name|lastKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fillKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|fillValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

