begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/** Describes a meta region and its server */
end_comment

begin_class
specifier|public
class|class
name|MetaRegion
implements|implements
name|Comparable
argument_list|<
name|MetaRegion
argument_list|>
block|{
specifier|private
specifier|final
name|HServerAddress
name|server
decl_stmt|;
specifier|private
name|HRegionInfo
name|regionInfo
decl_stmt|;
name|MetaRegion
parameter_list|(
specifier|final
name|HServerAddress
name|server
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"server cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"regionInfo cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{server: "
operator|+
name|this
operator|.
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|", regionname: "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", startKey:<"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|+
literal|">}"
return|;
block|}
comment|/** @return the regionName */
specifier|public
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
return|return
name|regionInfo
operator|.
name|getRegionName
argument_list|()
return|;
block|}
comment|/** @return the server */
specifier|public
name|HServerAddress
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
comment|/** @return the startKey */
specifier|public
name|byte
index|[]
name|getStartKey
parameter_list|()
block|{
return|return
name|regionInfo
operator|.
name|getStartKey
argument_list|()
return|;
block|}
comment|/** @return the endKey */
specifier|public
name|byte
index|[]
name|getEndKey
parameter_list|()
block|{
return|return
name|regionInfo
operator|.
name|getEndKey
argument_list|()
return|;
block|}
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|MetaRegion
operator|&&
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|MetaRegion
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|regionInfo
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|// Comparable
specifier|public
name|int
name|compareTo
parameter_list|(
name|MetaRegion
name|other
parameter_list|)
block|{
name|int
name|cmp
init|=
name|regionInfo
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|regionInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
comment|// Might be on different host?
name|cmp
operator|=
name|this
operator|.
name|server
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|server
argument_list|)
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
block|}
end_class

end_unit

