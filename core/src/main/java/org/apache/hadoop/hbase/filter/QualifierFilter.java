begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_comment
comment|/**  * This filter is used to filter based on the column qualifier. It takes an  * operator (equal, greater, not equal, etc) and a byte [] comparator for the  * column qualifier portion of a key.  *<p>  * This filter can be wrapped with {@link WhileMatchFilter} and {@link SkipFilter}  * to add more control.  *<p>  * Multiple filters can be combined using {@link FilterList}.  *<p>  * If an already known column qualifier is looked for, use {@link Get#addColumn}  * directly rather than a filter.  */
end_comment

begin_class
specifier|public
class|class
name|QualifierFilter
extends|extends
name|CompareFilter
block|{
comment|/**    * Writable constructor, do not use.    */
specifier|public
name|QualifierFilter
parameter_list|()
block|{   }
comment|/**    * Constructor.    * @param qualifierCompareOp the compare op for column qualifier matching    * @param qualifierComparator the comparator for column qualifier matching    */
specifier|public
name|QualifierFilter
parameter_list|(
specifier|final
name|CompareOp
name|qualifierCompareOp
parameter_list|,
specifier|final
name|WritableByteArrayComparable
name|qualifierComparator
parameter_list|)
block|{
name|super
argument_list|(
name|qualifierCompareOp
argument_list|,
name|qualifierComparator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|KeyValue
name|v
parameter_list|)
block|{
name|int
name|qualifierLength
init|=
name|v
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifierLength
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|doCompare
argument_list|(
name|this
operator|.
name|compareOp
argument_list|,
name|this
operator|.
name|comparator
argument_list|,
name|v
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|v
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|qualifierLength
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
block|}
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
end_class

end_unit

