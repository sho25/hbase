begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RemoteExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Sleeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * Keeps up the queue of {@link RegionServerOperation}s.  * Has both live queue and a temporary put-aside queue; if processing of the  * live todo queue fails for some reason, we'll add the item back on the delay  * queue for retry later.  Call {@link #shutdown()} to effect a cleanup of  * queues when done.  Listen to this queue by registering  * {@link RegionServerOperationListener}s.  * @see #registerRegionServerOperationListener(RegionServerOperationListener)  * @see #unregisterRegionServerOperationListener(RegionServerOperationListener)  */
end_comment

begin_class
specifier|public
class|class
name|RegionServerOperationQueue
block|{
comment|// TODO: Build up the junit test of this class.
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Enums returned by {@link RegionServerOperationQueue#process()};    */
specifier|public
specifier|static
enum|enum
name|ProcessingResultCode
block|{
comment|/**      * Operation was processed successfully.      */
name|PROCESSED
block|,
comment|/**      * Nothing to do.      */
name|NOOP
block|,
comment|/**      * Operation was put-aside for now.  Will be retried later.      */
name|REQUEUED
block|,
comment|/**      * Failed processing of the operation.      */
name|FAILED
block|,
comment|/**      * Operation was requeued but we failed its processing for some reason      * (Bad filesystem?).      */
name|REQUEUED_BUT_PROBLEM
block|}
empty_stmt|;
comment|/*    * Do not put items directly on this queue. Use {@link #putOnDelayQueue(RegionServerOperation)}.    * It makes sure the expiration on the RegionServerOperation added is updated.    */
specifier|private
specifier|final
name|DelayQueue
argument_list|<
name|RegionServerOperation
argument_list|>
name|delayedToDoQueue
init|=
operator|new
name|DelayQueue
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|RegionServerOperation
argument_list|>
name|toDoQueue
init|=
operator|new
name|PriorityBlockingQueue
argument_list|<
name|RegionServerOperation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|RegionServerOperationListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|RegionServerOperationListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|threadWakeFrequency
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|closed
decl_stmt|;
specifier|private
specifier|final
name|Sleeper
name|sleeper
decl_stmt|;
name|RegionServerOperationQueue
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|AtomicBoolean
name|closed
parameter_list|)
block|{
name|this
operator|.
name|threadWakeFrequency
operator|=
name|c
operator|.
name|getInt
argument_list|(
name|HMaster
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|closed
operator|=
name|closed
expr_stmt|;
name|this
operator|.
name|sleeper
operator|=
operator|new
name|Sleeper
argument_list|(
name|this
operator|.
name|threadWakeFrequency
argument_list|,
name|this
operator|.
name|closed
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|RegionServerOperation
name|op
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|toDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Insertion into todo queue interrupted; putting on delay queue"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|putOnDelayQueue
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Try to get an operation off of the queue and process it.    * @return {@link ProcessingResultCode#PROCESSED},    * {@link ProcessingResultCode#REQUEUED},    * {@link ProcessingResultCode#REQUEUED_BUT_PROBLEM}    */
specifier|public
specifier|synchronized
name|ProcessingResultCode
name|process
parameter_list|()
block|{
name|RegionServerOperation
name|op
init|=
name|delayedToDoQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
comment|// if there aren't any todo items in the queue, sleep for a bit.
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|op
operator|=
name|toDoQueue
operator|.
name|poll
argument_list|(
name|threadWakeFrequency
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// At this point, if there's still no todo operation, or we're supposed to
comment|// be closed, return.
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|ProcessingResultCode
operator|.
name|NOOP
return|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing todo: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|process
argument_list|(
name|op
argument_list|)
condition|)
block|{
comment|// Add it back on the queue.
name|putOnDelayQueue
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|process
argument_list|()
condition|)
block|{
name|processed
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Operation would have blocked because not all meta regions are
comment|// online. This could cause a deadlock, because this thread is waiting
comment|// for the missing meta region(s) to come back online, but since it
comment|// is waiting, it cannot process the meta region online operation it
comment|// is waiting for. So put this operation back on the queue for now.
if|if
condition|(
name|toDoQueue
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// The queue is currently empty so wait for a while to see if what
comment|// we need comes in first
name|this
operator|.
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Put "
operator|+
name|op
operator|.
name|toString
argument_list|()
operator|+
literal|" back on queue"
argument_list|)
expr_stmt|;
block|}
name|toDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Putting into toDoQueue was interrupted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// There was an exception performing the operation.
if|if
condition|(
name|ex
operator|instanceof
name|RemoteException
condition|)
block|{
try|try
block|{
name|ex
operator|=
name|RemoteExceptionHandler
operator|.
name|decodeRemoteException
argument_list|(
operator|(
name|RemoteException
operator|)
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"main processing loop: "
operator|+
name|op
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed processing: "
operator|+
name|op
operator|.
name|toString
argument_list|()
operator|+
literal|"; putting onto delayed todo queue"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|putOnDelayQueue
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
name|ProcessingResultCode
operator|.
name|REQUEUED_BUT_PROBLEM
return|;
block|}
return|return
name|ProcessingResultCode
operator|.
name|REQUEUED
return|;
block|}
name|void
name|putOnDelayQueue
parameter_list|(
specifier|final
name|RegionServerOperation
name|op
parameter_list|)
block|{
name|op
operator|.
name|resetExpiration
argument_list|()
expr_stmt|;
name|this
operator|.
name|delayedToDoQueue
operator|.
name|put
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clean up the queues.    */
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|toDoQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|delayedToDoQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param l Register this listener of RegionServerOperation events.    */
specifier|public
name|void
name|registerRegionServerOperationListener
parameter_list|(
specifier|final
name|RegionServerOperationListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param l Unregister this listener for RegionServerOperation events.    * @return True if this listener was registered.    */
specifier|public
name|boolean
name|unregisterRegionServerOperationListener
parameter_list|(
specifier|final
name|RegionServerOperationListener
name|l
parameter_list|)
block|{
return|return
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
return|;
block|}
comment|/*    * Tell listeners that we processed a RegionServerOperation.    * @param op Operation to tell the world about.    */
specifier|private
name|void
name|processed
parameter_list|(
specifier|final
name|RegionServerOperation
name|op
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|RegionServerOperationListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
name|listener
operator|.
name|processed
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Called for each message passed the master.  Most of the messages that come    * in here will go on to become {@link #process(RegionServerOperation)}s but    * others like {@linke HMsg.Type#MSG_REPORT_PROCESS_OPEN} go no further;    * only in here can you see them come in.    * @param serverInfo Server we got the message from.    * @param incomingMsg The message received.    * @return True to continue processing, false to skip.    */
name|boolean
name|process
parameter_list|(
specifier|final
name|HServerInfo
name|serverInfo
parameter_list|,
specifier|final
name|HMsg
name|incomingMsg
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
for|for
control|(
name|RegionServerOperationListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
if|if
condition|(
operator|!
name|listener
operator|.
name|process
argument_list|(
name|serverInfo
argument_list|,
name|incomingMsg
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * Tell listeners that we processed a RegionServerOperation.    * @param op Operation to tell the world about.    */
specifier|private
name|boolean
name|process
parameter_list|(
specifier|final
name|RegionServerOperation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
for|for
control|(
name|RegionServerOperationListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
if|if
condition|(
operator|!
name|listener
operator|.
name|process
argument_list|(
name|op
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

