begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Class that provides static method needed when putting deletes into memstore  */
end_comment

begin_class
specifier|public
class|class
name|DeleteCompare
block|{
comment|/**    * Return codes from deleteCompare.    */
enum|enum
name|DeleteCode
block|{
comment|/**      * Do nothing.  Move to next KV in memstore      */
name|SKIP
block|,
comment|/**      * Add to the list of deletes.      */
name|DELETE
block|,
comment|/**      * Stop looking at KVs in memstore.  Finalize.      */
name|DONE
block|}
comment|/**    * Method used when putting deletes into memstore to remove all the previous    * entries that are affected by this Delete    * @param mem    * @param deleteBuffer    * @param deleteRowOffset    * @param deleteRowLength    * @param deleteQualifierOffset    * @param deleteQualifierLength    * @param deleteTimeOffset    * @param deleteType    * @param comparator    * @return SKIP if current KeyValue should not be deleted, DELETE if    * current KeyValue should be deleted and DONE when the current KeyValue is    * out of the Deletes range    */
specifier|public
specifier|static
name|DeleteCode
name|deleteCompare
parameter_list|(
name|KeyValue
name|mem
parameter_list|,
name|byte
index|[]
name|deleteBuffer
parameter_list|,
name|int
name|deleteRowOffset
parameter_list|,
name|short
name|deleteRowLength
parameter_list|,
name|int
name|deleteQualifierOffset
parameter_list|,
name|int
name|deleteQualifierLength
parameter_list|,
name|int
name|deleteTimeOffset
parameter_list|,
name|byte
name|deleteType
parameter_list|,
name|KeyValue
operator|.
name|KeyComparator
name|comparator
parameter_list|)
block|{
comment|//Parsing new KeyValue
name|byte
index|[]
name|memBuffer
init|=
name|mem
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|int
name|memOffset
init|=
name|mem
operator|.
name|getOffset
argument_list|()
decl_stmt|;
comment|//Getting key lengths
name|int
name|memKeyLen
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|memBuffer
argument_list|,
name|memOffset
argument_list|)
decl_stmt|;
name|memOffset
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
comment|//Skipping value lengths
name|memOffset
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
comment|//Getting row lengths
name|short
name|memRowLen
init|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|memBuffer
argument_list|,
name|memOffset
argument_list|)
decl_stmt|;
name|memOffset
operator|+=
name|Bytes
operator|.
name|SIZEOF_SHORT
expr_stmt|;
name|int
name|res
init|=
name|comparator
operator|.
name|compareRows
argument_list|(
name|memBuffer
argument_list|,
name|memOffset
argument_list|,
name|memRowLen
argument_list|,
name|deleteBuffer
argument_list|,
name|deleteRowOffset
argument_list|,
name|deleteRowLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|>
literal|0
condition|)
block|{
return|return
name|DeleteCode
operator|.
name|DONE
return|;
block|}
elseif|else
if|if
condition|(
name|res
operator|<
literal|0
condition|)
block|{
return|return
name|DeleteCode
operator|.
name|SKIP
return|;
block|}
name|memOffset
operator|+=
name|memRowLen
expr_stmt|;
comment|//Getting family lengths
name|byte
name|memFamLen
init|=
name|memBuffer
index|[
name|memOffset
index|]
decl_stmt|;
name|memOffset
operator|+=
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|+
name|memFamLen
expr_stmt|;
comment|//Get column lengths
name|int
name|memQualifierLen
init|=
name|memKeyLen
operator|-
name|memRowLen
operator|-
name|memFamLen
operator|-
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|-
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|-
name|Bytes
operator|.
name|SIZEOF_LONG
operator|-
name|Bytes
operator|.
name|SIZEOF_BYTE
decl_stmt|;
comment|//Compare timestamp
name|int
name|tsOffset
init|=
name|memOffset
operator|+
name|memQualifierLen
decl_stmt|;
name|int
name|timeRes
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|memBuffer
argument_list|,
name|tsOffset
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|,
name|deleteBuffer
argument_list|,
name|deleteTimeOffset
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteType
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
condition|)
block|{
if|if
condition|(
name|timeRes
operator|<=
literal|0
condition|)
block|{
return|return
name|DeleteCode
operator|.
name|DELETE
return|;
block|}
return|return
name|DeleteCode
operator|.
name|SKIP
return|;
block|}
comment|//Compare columns
name|res
operator|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|memBuffer
argument_list|,
name|memOffset
argument_list|,
name|memQualifierLen
argument_list|,
name|deleteBuffer
argument_list|,
name|deleteQualifierOffset
argument_list|,
name|deleteQualifierLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|<
literal|0
condition|)
block|{
return|return
name|DeleteCode
operator|.
name|SKIP
return|;
block|}
elseif|else
if|if
condition|(
name|res
operator|>
literal|0
condition|)
block|{
return|return
name|DeleteCode
operator|.
name|DONE
return|;
block|}
comment|// same column, compare the time.
if|if
condition|(
name|timeRes
operator|==
literal|0
condition|)
block|{
return|return
name|DeleteCode
operator|.
name|DELETE
return|;
block|}
elseif|else
if|if
condition|(
name|timeRes
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|deleteType
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
condition|)
block|{
return|return
name|DeleteCode
operator|.
name|DELETE
return|;
block|}
return|return
name|DeleteCode
operator|.
name|DONE
return|;
block|}
else|else
block|{
return|return
name|DeleteCode
operator|.
name|SKIP
return|;
block|}
block|}
block|}
end_class

end_unit

