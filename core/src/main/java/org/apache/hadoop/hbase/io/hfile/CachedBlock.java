begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2009 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_comment
comment|/**  * Represents an entry in the {@link LruBlockCache}.  *   *<p>Makes the block memory-aware with {@link HeapSize} and Comparable  * to sort by access time for the LRU.  It also takes care of priority by  * either instantiating as in-memory or handling the transition from single  * to multiple access.  */
end_comment

begin_class
specifier|public
class|class
name|CachedBlock
implements|implements
name|HeapSize
implements|,
name|Comparable
argument_list|<
name|CachedBlock
argument_list|>
block|{
specifier|public
specifier|final
specifier|static
name|long
name|PER_BLOCK_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|OBJECT
operator|+
operator|(
literal|3
operator|*
name|ClassSize
operator|.
name|REFERENCE
operator|)
operator|+
operator|(
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_LONG
operator|)
operator|+
name|ClassSize
operator|.
name|STRING
operator|+
name|ClassSize
operator|.
name|BYTE_BUFFER
argument_list|)
decl_stmt|;
specifier|static
enum|enum
name|BlockPriority
block|{
comment|/**      * Accessed a single time (used for scan-resistance)      */
name|SINGLE
block|,
comment|/**      * Accessed multiple times      */
name|MULTI
block|,
comment|/**      * Block from in-memory store      */
name|MEMORY
block|}
empty_stmt|;
specifier|private
specifier|final
name|String
name|blockName
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|buf
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|accessTime
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|BlockPriority
name|priority
decl_stmt|;
specifier|public
name|CachedBlock
parameter_list|(
name|String
name|blockName
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|,
name|long
name|accessTime
parameter_list|)
block|{
name|this
argument_list|(
name|blockName
argument_list|,
name|buf
argument_list|,
name|accessTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CachedBlock
parameter_list|(
name|String
name|blockName
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|,
name|long
name|accessTime
parameter_list|,
name|boolean
name|inMemory
parameter_list|)
block|{
name|this
operator|.
name|blockName
operator|=
name|blockName
expr_stmt|;
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|accessTime
operator|=
name|accessTime
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|ClassSize
operator|.
name|align
argument_list|(
name|blockName
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|buf
operator|.
name|capacity
argument_list|()
argument_list|)
operator|+
name|PER_BLOCK_OVERHEAD
expr_stmt|;
if|if
condition|(
name|inMemory
condition|)
block|{
name|this
operator|.
name|priority
operator|=
name|BlockPriority
operator|.
name|MEMORY
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|priority
operator|=
name|BlockPriority
operator|.
name|SINGLE
expr_stmt|;
block|}
block|}
comment|/**    * Block has been accessed.  Update its local access time.    */
specifier|public
name|void
name|access
parameter_list|(
name|long
name|accessTime
parameter_list|)
block|{
name|this
operator|.
name|accessTime
operator|=
name|accessTime
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|priority
operator|==
name|BlockPriority
operator|.
name|SINGLE
condition|)
block|{
name|this
operator|.
name|priority
operator|=
name|BlockPriority
operator|.
name|MULTI
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|CachedBlock
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|accessTime
operator|==
name|that
operator|.
name|accessTime
condition|)
return|return
literal|0
return|;
return|return
name|this
operator|.
name|accessTime
operator|<
name|that
operator|.
name|accessTime
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|ByteBuffer
name|getBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|buf
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockName
return|;
block|}
specifier|public
name|BlockPriority
name|getPriority
parameter_list|()
block|{
return|return
name|this
operator|.
name|priority
return|;
block|}
block|}
end_class

end_unit

