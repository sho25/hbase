begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_comment
comment|/**  * Utility used running a cluster all in the one JVM.  */
end_comment

begin_class
specifier|public
class|class
name|JVMClusterUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JVMClusterUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Datastructure to hold RegionServer Thread and RegionServer instance    */
specifier|public
specifier|static
class|class
name|RegionServerThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|HRegionServer
name|regionServer
decl_stmt|;
specifier|public
name|RegionServerThread
parameter_list|(
specifier|final
name|HRegionServer
name|r
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
name|super
argument_list|(
name|r
argument_list|,
literal|"RegionServer:"
operator|+
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServer
operator|=
name|r
expr_stmt|;
block|}
comment|/** @return the region server */
specifier|public
name|HRegionServer
name|getRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionServer
return|;
block|}
comment|/**      * Block until the region server has come online, indicating it is ready      * to be used.      */
specifier|public
name|void
name|waitForServerOnline
parameter_list|()
block|{
while|while
condition|(
operator|!
name|regionServer
operator|.
name|isOnline
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue waiting
block|}
block|}
block|}
block|}
comment|/**    * Creates a {@link RegionServerThread}.    * Call 'start' on the returned thread to make it run.    * @param c Configuration to use.    * @param hrsc Class to create.    * @param index Used distingushing the object returned.    * @throws IOException    * @return Region server added.    */
specifier|public
specifier|static
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|createRegionServerThread
parameter_list|(
specifier|final
name|HBaseConfiguration
name|c
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|HRegionServer
argument_list|>
name|hrsc
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionServer
name|server
decl_stmt|;
try|try
block|{
name|server
operator|=
name|hrsc
operator|.
name|getConstructor
argument_list|(
name|HBaseConfiguration
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
return|return
operator|new
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|(
name|server
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/**    * Start the cluster.    * @param m    * @param regionServers    * @return Address to use contacting master.    */
specifier|public
specifier|static
name|String
name|startup
parameter_list|(
specifier|final
name|HMaster
name|m
parameter_list|,
specifier|final
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|regionservers
parameter_list|)
block|{
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|m
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|regionservers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|t
range|:
name|regionservers
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|m
operator|==
literal|null
condition|?
literal|null
else|:
name|m
operator|.
name|getMasterAddress
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @param master    * @param regionservers    */
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|(
specifier|final
name|HMaster
name|master
parameter_list|,
specifier|final
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|regionservers
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutting down HBase Cluster"
argument_list|)
expr_stmt|;
comment|// Be careful how the hdfs shutdown thread runs in context where more than
comment|// one regionserver in the mix.
name|Thread
name|hdfsClientFinalizer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|t
range|:
name|regionservers
control|)
block|{
name|Thread
name|tt
init|=
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|setHDFSShutdownThreadOnExit
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|hdfsClientFinalizer
operator|==
literal|null
operator|&&
name|tt
operator|!=
literal|null
condition|)
block|{
name|hdfsClientFinalizer
operator|=
name|tt
expr_stmt|;
block|}
block|}
if|if
condition|(
name|master
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// regionServerThreads can never be null because they are initialized when
comment|// the class is constructed.
for|for
control|(
name|Thread
name|t
range|:
name|regionservers
control|)
block|{
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
if|if
condition|(
name|master
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|master
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
comment|// The below has been replaced to debug sometime hangs on end of
comment|// tests.
comment|// this.master.join():
name|Threads
operator|.
name|threadDumpingIsAlive
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
if|if
condition|(
name|hdfsClientFinalizer
operator|!=
literal|null
condition|)
block|{
comment|// Don't run the shutdown thread.  Plays havoc if we try to start a
comment|// minihbasecluster immediately after this one has gone down (In
comment|// Filesystem, the shutdown thread is kept in a static and is created
comment|// on classloading.  Can only run it once).
comment|// hdfsClientFinalizer.start();
comment|// Threads.shutdown(hdfsClientFinalizer);
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown "
operator|+
operator|(
operator|(
name|regionservers
operator|!=
literal|null
operator|)
condition|?
name|master
operator|.
name|getName
argument_list|()
else|:
literal|"0 masters"
operator|)
operator|+
literal|" "
operator|+
name|regionservers
operator|.
name|size
argument_list|()
operator|+
literal|" region server(s)"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

