begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_class
specifier|public
class|class
name|SequenceFileLogReader
implements|implements
name|HLog
operator|.
name|Reader
block|{
comment|/**    * Hack just to set the correct file length up in SequenceFile.Reader.    * See HADOOP-6307.  The below is all about setting the right length on the    * file we are reading.  fs.getFileStatus(file).getLen() is passed down to    * a private SequenceFile.Reader constructor.  This won't work.  Need to do    * the available on the stream.  The below is ugly.  It makes getPos, the    * first time its called, return length of the file -- i.e. tell a lie -- just    * so this line up in SF.Reader's constructor ends up with right answer:    *     *         this.end = in.getPos() + length;    *    */
specifier|private
specifier|static
class|class
name|WALReader
extends|extends
name|SequenceFile
operator|.
name|Reader
block|{
name|WALReader
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|FSDataInputStream
name|openFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|WALReaderFSDataInputStream
argument_list|(
name|super
operator|.
name|openFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bufferSize
argument_list|,
name|length
argument_list|)
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * Override just so can intercept first call to getPos.      */
specifier|static
class|class
name|WALReaderFSDataInputStream
extends|extends
name|FSDataInputStream
block|{
specifier|private
name|boolean
name|firstGetPosInvocation
init|=
literal|true
decl_stmt|;
specifier|private
name|long
name|length
decl_stmt|;
name|WALReaderFSDataInputStream
parameter_list|(
specifier|final
name|FSDataInputStream
name|is
parameter_list|,
specifier|final
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|l
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|firstGetPosInvocation
condition|)
block|{
name|this
operator|.
name|firstGetPosInvocation
operator|=
literal|false
expr_stmt|;
comment|// Tell a lie.  We're doing this just so that this line up in
comment|// SequenceFile.Reader constructor comes out with the correct length
comment|// on the file:
comment|//         this.end = in.getPos() + length;
name|long
name|available
init|=
name|this
operator|.
name|in
operator|.
name|available
argument_list|()
decl_stmt|;
comment|// Length gets added up in the SF.Reader constructor so subtract the
comment|// difference.  If available< this.length, then return this.length.
return|return
name|available
operator|>=
name|this
operator|.
name|length
condition|?
name|available
operator|-
name|this
operator|.
name|length
else|:
name|this
operator|.
name|length
return|;
block|}
return|return
name|super
operator|.
name|getPos
argument_list|()
return|;
block|}
block|}
block|}
name|Configuration
name|conf
decl_stmt|;
name|WALReader
name|reader
decl_stmt|;
specifier|public
name|SequenceFileLogReader
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|reader
operator|=
operator|new
name|WALReader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HLog
operator|.
name|Entry
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|next
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HLog
operator|.
name|Entry
name|next
parameter_list|(
name|HLog
operator|.
name|Entry
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|reuse
operator|==
literal|null
condition|)
block|{
name|HLogKey
name|key
init|=
name|HLog
operator|.
name|newKey
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|WALEdit
name|val
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
return|return
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|next
argument_list|(
name|reuse
operator|.
name|getKey
argument_list|()
argument_list|,
name|reuse
operator|.
name|getEdit
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|reuse
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|getPosition
argument_list|()
return|;
block|}
block|}
end_class

end_unit

