begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2008 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|file
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
operator|.
name|OutputRecord
import|;
end_import

begin_comment
comment|/**  * Add timestamp to {@link org.apache.hadoop.metrics.file.FileContext#emitRecord(String, String, OutputRecord)}.  */
end_comment

begin_class
specifier|public
class|class
name|TimeStampingFileContext
extends|extends
name|FileContext
block|{
comment|// Copies bunch of FileContext here because writer and file are private in
comment|// superclass.
specifier|private
name|File
name|file
init|=
literal|null
decl_stmt|;
specifier|private
name|PrintWriter
name|writer
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|SimpleDateFormat
name|sdf
decl_stmt|;
specifier|public
name|TimeStampingFileContext
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|sdf
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|String
name|contextName
parameter_list|,
name|ContextFactory
name|factory
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|contextName
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|getAttribute
argument_list|(
name|FILE_NAME_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startMonitoring
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startMonitoring
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stopMonitoring
parameter_list|()
block|{
name|super
operator|.
name|stopMonitoring
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|String
name|iso8601
parameter_list|()
block|{
return|return
name|this
operator|.
name|sdf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|emitRecord
parameter_list|(
name|String
name|contextName
parameter_list|,
name|String
name|recordName
parameter_list|,
name|OutputRecord
name|outRec
parameter_list|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|iso8601
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|contextName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|recordName
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
literal|": "
decl_stmt|;
for|for
control|(
name|String
name|tagName
range|:
name|outRec
operator|.
name|getTagNames
argument_list|()
control|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|outRec
operator|.
name|getTag
argument_list|(
name|tagName
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|metricName
range|:
name|outRec
operator|.
name|getMetricNames
argument_list|()
control|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|metricName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|outRec
operator|.
name|getMetric
argument_list|(
name|metricName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

