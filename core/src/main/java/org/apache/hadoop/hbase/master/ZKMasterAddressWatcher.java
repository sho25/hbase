begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HServerAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * ZooKeeper watcher for the master address.  Also watches the cluster state  * flag so will shutdown this master if cluster has been shutdown.  *<p>Used by the Master.  Waits on the master address ZNode delete event.  When  * multiple masters are brought up, they race to become master by writing their  * address to ZooKeeper. Whoever wins becomes the master, and the rest wait for  * that ephemeral node in ZooKeeper to evaporate (meaning the master went down),  * at which point they try to write their own address to become the new master.  */
end_comment

begin_class
class|class
name|ZKMasterAddressWatcher
implements|implements
name|Watcher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKMasterAddressWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ZooKeeperWrapper
name|zookeeper
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|requestShutdown
decl_stmt|;
comment|/**    * Create this watcher using passed ZooKeeperWrapper instance.    * @param zk ZooKeeper    * @param flag Flag to set to request shutdown.    */
name|ZKMasterAddressWatcher
parameter_list|(
specifier|final
name|ZooKeeperWrapper
name|zk
parameter_list|,
specifier|final
name|AtomicBoolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|requestShutdown
operator|=
name|flag
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|=
name|zk
expr_stmt|;
block|}
comment|/**    * @see org.apache.zookeeper.Watcher#process(org.apache.zookeeper.WatchedEvent)    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|EventType
name|type
init|=
name|event
operator|.
name|getType
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
operator|(
literal|"Got event "
operator|+
name|type
operator|+
literal|" with path "
operator|+
name|event
operator|.
name|getPath
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|NodeDeleted
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|zookeeper
operator|.
name|clusterStateZNode
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster shutdown while waiting, shutting down"
operator|+
literal|" this master."
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestShutdown
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master address ZNode deleted, notifying waiting masters"
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|NodeCreated
argument_list|)
operator|&&
name|event
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|zookeeper
operator|.
name|clusterStateZNode
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resetting watch on cluster state node."
argument_list|)
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|.
name|setClusterStateWatch
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait for master address to be available. This sets a watch in ZooKeeper and    * blocks until the master address ZNode gets deleted.    */
specifier|public
specifier|synchronized
name|void
name|waitForMasterAddressAvailability
parameter_list|()
block|{
while|while
condition|(
name|zookeeper
operator|.
name|readMasterAddress
argument_list|(
name|this
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for master address ZNode to be deleted "
operator|+
literal|"(Also watching cluster state node)"
argument_list|)
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|.
name|setClusterStateWatch
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
block|}
comment|/**    * Write address to zookeeper.  Parks here until we successfully write our    * address (or until cluster shutdown).    * @param address Address whose format is HServerAddress.toString    */
name|boolean
name|writeAddressToZooKeeper
parameter_list|(
specifier|final
name|HServerAddress
name|address
parameter_list|,
name|boolean
name|retry
parameter_list|)
block|{
do|do
block|{
name|waitForMasterAddressAvailability
argument_list|()
expr_stmt|;
comment|// Check if we need to shutdown instead of taking control
if|if
condition|(
name|this
operator|.
name|requestShutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Won't start Master because cluster is shuting down"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|zookeeper
operator|.
name|writeMasterAddress
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|this
operator|.
name|zookeeper
operator|.
name|setClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|.
name|setClusterStateWatch
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Watch our own node
name|this
operator|.
name|zookeeper
operator|.
name|readMasterAddress
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
do|while
condition|(
name|retry
condition|)
do|;
return|return
literal|false
return|;
block|}
comment|/**    * Reset the ZK in case a new connection is required    * @param zookeeper new instance    */
specifier|public
name|void
name|setZookeeper
parameter_list|(
name|ZooKeeperWrapper
name|zookeeper
parameter_list|)
block|{
name|this
operator|.
name|zookeeper
operator|=
name|zookeeper
expr_stmt|;
block|}
block|}
end_class

end_unit

