begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.3)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
comment|/**  * Any timestamps in the columns are ignored, use timeRange to select by timestamp.  * Max versions defaults to 1.  */
annotation|@
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.9.3)"
argument_list|,
name|date
operator|=
literal|"2015-12-13"
argument_list|)
specifier|public
class|class
name|TScan
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|TScan
argument_list|,
name|TScan
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|TScan
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"TScan"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|START_ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|STOP_ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"stopRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CACHING_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"caching"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MAX_VERSIONS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"maxVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIME_RANGE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timeRange"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|FILTER_STRING_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"filterString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BATCH_SIZE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"batchSize"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|AUTHORIZATIONS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"authorizations"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|REVERSED_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"reversed"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|TScanStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|TScanTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteBuffer
name|startRow
decl_stmt|;
comment|// optional
specifier|public
name|ByteBuffer
name|stopRow
decl_stmt|;
comment|// optional
specifier|public
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
decl_stmt|;
comment|// optional
specifier|public
name|int
name|caching
decl_stmt|;
comment|// optional
specifier|public
name|int
name|maxVersions
decl_stmt|;
comment|// optional
specifier|public
name|TTimeRange
name|timeRange
decl_stmt|;
comment|// optional
specifier|public
name|ByteBuffer
name|filterString
decl_stmt|;
comment|// optional
specifier|public
name|int
name|batchSize
decl_stmt|;
comment|// optional
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// optional
specifier|public
name|TAuthorization
name|authorizations
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|reversed
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|START_ROW
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"startRow"
argument_list|)
block|,
name|STOP_ROW
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"stopRow"
argument_list|)
block|,
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"columns"
argument_list|)
block|,
name|CACHING
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"caching"
argument_list|)
block|,
name|MAX_VERSIONS
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"maxVersions"
argument_list|)
block|,
name|TIME_RANGE
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"timeRange"
argument_list|)
block|,
name|FILTER_STRING
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"filterString"
argument_list|)
block|,
name|BATCH_SIZE
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"batchSize"
argument_list|)
block|,
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"attributes"
argument_list|)
block|,
name|AUTHORIZATIONS
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
literal|"authorizations"
argument_list|)
block|,
name|REVERSED
argument_list|(
operator|(
name|short
operator|)
literal|11
argument_list|,
literal|"reversed"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// START_ROW
return|return
name|START_ROW
return|;
case|case
literal|2
case|:
comment|// STOP_ROW
return|return
name|STOP_ROW
return|;
case|case
literal|3
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// CACHING
return|return
name|CACHING
return|;
case|case
literal|5
case|:
comment|// MAX_VERSIONS
return|return
name|MAX_VERSIONS
return|;
case|case
literal|6
case|:
comment|// TIME_RANGE
return|return
name|TIME_RANGE
return|;
case|case
literal|7
case|:
comment|// FILTER_STRING
return|return
name|FILTER_STRING
return|;
case|case
literal|8
case|:
comment|// BATCH_SIZE
return|return
name|BATCH_SIZE
return|;
case|case
literal|9
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
case|case
literal|10
case|:
comment|// AUTHORIZATIONS
return|return
name|AUTHORIZATIONS
return|;
case|case
literal|11
case|:
comment|// REVERSED
return|return
name|REVERSED
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__CACHING_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__MAXVERSIONS_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__BATCHSIZE_ISSET_ID
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__REVERSED_ISSET_ID
init|=
literal|3
decl_stmt|;
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|START_ROW
block|,
name|_Fields
operator|.
name|STOP_ROW
block|,
name|_Fields
operator|.
name|COLUMNS
block|,
name|_Fields
operator|.
name|CACHING
block|,
name|_Fields
operator|.
name|MAX_VERSIONS
block|,
name|_Fields
operator|.
name|TIME_RANGE
block|,
name|_Fields
operator|.
name|FILTER_STRING
block|,
name|_Fields
operator|.
name|BATCH_SIZE
block|,
name|_Fields
operator|.
name|ATTRIBUTES
block|,
name|_Fields
operator|.
name|AUTHORIZATIONS
block|,
name|_Fields
operator|.
name|REVERSED
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|START_ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"startRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STOP_ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"stopRow"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TColumn
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CACHING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"caching"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_VERSIONS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"maxVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIME_RANGE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timeRange"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TTimeRange
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|FILTER_STRING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"filterString"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BATCH_SIZE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"batchSize"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|AUTHORIZATIONS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"authorizations"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TAuthorization
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|REVERSED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"reversed"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|TScan
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TScan
parameter_list|()
block|{
name|this
operator|.
name|maxVersions
operator|=
literal|1
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|TScan
parameter_list|(
name|TScan
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|other
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|other
operator|.
name|stopRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TColumn
argument_list|>
name|__this__columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
name|other
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TColumn
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
operator|new
name|TColumn
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
name|this
operator|.
name|caching
operator|=
name|other
operator|.
name|caching
expr_stmt|;
name|this
operator|.
name|maxVersions
operator|=
name|other
operator|.
name|maxVersions
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTimeRange
argument_list|()
condition|)
block|{
name|this
operator|.
name|timeRange
operator|=
operator|new
name|TTimeRange
argument_list|(
name|other
operator|.
name|timeRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|this
operator|.
name|filterString
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|other
operator|.
name|filterString
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|batchSize
operator|=
name|other
operator|.
name|batchSize
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
name|other
operator|.
name|attributes
argument_list|)
decl_stmt|;
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAuthorizations
argument_list|()
condition|)
block|{
name|this
operator|.
name|authorizations
operator|=
operator|new
name|TAuthorization
argument_list|(
name|other
operator|.
name|authorizations
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|reversed
operator|=
name|other
operator|.
name|reversed
expr_stmt|;
block|}
specifier|public
name|TScan
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|TScan
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|setCachingIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|caching
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|maxVersions
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|timeRange
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|filterString
operator|=
literal|null
expr_stmt|;
name|setBatchSizeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|batchSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|authorizations
operator|=
literal|null
expr_stmt|;
name|setReversedIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|reversed
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
name|setStartRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|startRow
operator|==
literal|null
condition|?
literal|null
else|:
name|startRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStartRow
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|startRow
argument_list|)
return|;
block|}
specifier|public
name|TScan
name|setStartRow
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|startRow
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TScan
name|setStartRow
parameter_list|(
name|ByteBuffer
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStartRow
parameter_list|()
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field startRow is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStartRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|startRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getStopRow
parameter_list|()
block|{
name|setStopRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stopRow
operator|==
literal|null
condition|?
literal|null
else|:
name|stopRow
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForStopRow
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|stopRow
argument_list|)
return|;
block|}
specifier|public
name|TScan
name|setStopRow
parameter_list|(
name|byte
index|[]
name|stopRow
parameter_list|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|stopRow
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|stopRow
argument_list|,
name|stopRow
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TScan
name|setStopRow
parameter_list|(
name|ByteBuffer
name|stopRow
parameter_list|)
block|{
name|this
operator|.
name|stopRow
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetStopRow
parameter_list|()
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field stopRow is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetStopRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopRow
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStopRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TColumn
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|TColumn
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TColumn
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
specifier|public
name|TScan
name|setColumns
parameter_list|(
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCaching
parameter_list|()
block|{
return|return
name|this
operator|.
name|caching
return|;
block|}
specifier|public
name|TScan
name|setCaching
parameter_list|(
name|int
name|caching
parameter_list|)
block|{
name|this
operator|.
name|caching
operator|=
name|caching
expr_stmt|;
name|setCachingIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetCaching
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHING_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field caching is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCaching
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHING_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCachingIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHING_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxVersions
return|;
block|}
specifier|public
name|TScan
name|setMaxVersions
parameter_list|(
name|int
name|maxVersions
parameter_list|)
block|{
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetMaxVersions
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MAXVERSIONS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field maxVersions is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMaxVersions
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MAXVERSIONS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMaxVersionsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MAXVERSIONS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TTimeRange
name|getTimeRange
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeRange
return|;
block|}
specifier|public
name|TScan
name|setTimeRange
parameter_list|(
name|TTimeRange
name|timeRange
parameter_list|)
block|{
name|this
operator|.
name|timeRange
operator|=
name|timeRange
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimeRange
parameter_list|()
block|{
name|this
operator|.
name|timeRange
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field timeRange is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimeRange
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeRange
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTimeRangeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|timeRange
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getFilterString
parameter_list|()
block|{
name|setFilterString
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|filterString
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|filterString
operator|==
literal|null
condition|?
literal|null
else|:
name|filterString
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|ByteBuffer
name|bufferForFilterString
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|filterString
argument_list|)
return|;
block|}
specifier|public
name|TScan
name|setFilterString
parameter_list|(
name|byte
index|[]
name|filterString
parameter_list|)
block|{
name|this
operator|.
name|filterString
operator|=
name|filterString
operator|==
literal|null
condition|?
operator|(
name|ByteBuffer
operator|)
literal|null
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|filterString
argument_list|,
name|filterString
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TScan
name|setFilterString
parameter_list|(
name|ByteBuffer
name|filterString
parameter_list|)
block|{
name|this
operator|.
name|filterString
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|filterString
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetFilterString
parameter_list|()
block|{
name|this
operator|.
name|filterString
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field filterString is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetFilterString
parameter_list|()
block|{
return|return
name|this
operator|.
name|filterString
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setFilterStringIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|filterString
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getBatchSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|batchSize
return|;
block|}
specifier|public
name|TScan
name|setBatchSize
parameter_list|(
name|int
name|batchSize
parameter_list|)
block|{
name|this
operator|.
name|batchSize
operator|=
name|batchSize
expr_stmt|;
name|setBatchSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetBatchSize
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BATCHSIZE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field batchSize is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBatchSize
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BATCHSIZE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBatchSizeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BATCHSIZE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
specifier|public
name|TScan
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|TAuthorization
name|getAuthorizations
parameter_list|()
block|{
return|return
name|this
operator|.
name|authorizations
return|;
block|}
specifier|public
name|TScan
name|setAuthorizations
parameter_list|(
name|TAuthorization
name|authorizations
parameter_list|)
block|{
name|this
operator|.
name|authorizations
operator|=
name|authorizations
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAuthorizations
parameter_list|()
block|{
name|this
operator|.
name|authorizations
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field authorizations is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAuthorizations
parameter_list|()
block|{
return|return
name|this
operator|.
name|authorizations
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAuthorizationsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|authorizations
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isReversed
parameter_list|()
block|{
return|return
name|this
operator|.
name|reversed
return|;
block|}
specifier|public
name|TScan
name|setReversed
parameter_list|(
name|boolean
name|reversed
parameter_list|)
block|{
name|this
operator|.
name|reversed
operator|=
name|reversed
expr_stmt|;
name|setReversedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetReversed
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__REVERSED_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field reversed is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetReversed
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__REVERSED_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setReversedIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__REVERSED_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|START_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStartRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStartRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STOP_ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetStopRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setStopRow
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|List
argument_list|<
name|TColumn
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CACHING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCaching
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCaching
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_VERSIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMaxVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMaxVersions
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIME_RANGE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimeRange
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimeRange
argument_list|(
operator|(
name|TTimeRange
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FILTER_STRING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetFilterString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setFilterString
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BATCH_SIZE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBatchSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBatchSize
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|AUTHORIZATIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAuthorizations
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAuthorizations
argument_list|(
operator|(
name|TAuthorization
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|REVERSED
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetReversed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setReversed
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|START_ROW
case|:
return|return
name|getStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|getStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|CACHING
case|:
return|return
name|getCaching
argument_list|()
return|;
case|case
name|MAX_VERSIONS
case|:
return|return
name|getMaxVersions
argument_list|()
return|;
case|case
name|TIME_RANGE
case|:
return|return
name|getTimeRange
argument_list|()
return|;
case|case
name|FILTER_STRING
case|:
return|return
name|getFilterString
argument_list|()
return|;
case|case
name|BATCH_SIZE
case|:
return|return
name|getBatchSize
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
case|case
name|AUTHORIZATIONS
case|:
return|return
name|getAuthorizations
argument_list|()
return|;
case|case
name|REVERSED
case|:
return|return
name|isReversed
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|START_ROW
case|:
return|return
name|isSetStartRow
argument_list|()
return|;
case|case
name|STOP_ROW
case|:
return|return
name|isSetStopRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|CACHING
case|:
return|return
name|isSetCaching
argument_list|()
return|;
case|case
name|MAX_VERSIONS
case|:
return|return
name|isSetMaxVersions
argument_list|()
return|;
case|case
name|TIME_RANGE
case|:
return|return
name|isSetTimeRange
argument_list|()
return|;
case|case
name|FILTER_STRING
case|:
return|return
name|isSetFilterString
argument_list|()
return|;
case|case
name|BATCH_SIZE
case|:
return|return
name|isSetBatchSize
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
case|case
name|AUTHORIZATIONS
case|:
return|return
name|isSetAuthorizations
argument_list|()
return|;
case|case
name|REVERSED
case|:
return|return
name|isSetReversed
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|TScan
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|TScan
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|TScan
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_startRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_startRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_startRow
operator|||
name|that_present_startRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_startRow
operator|&&
name|that_present_startRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|startRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|startRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_stopRow
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_stopRow
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_stopRow
operator|||
name|that_present_stopRow
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_stopRow
operator|&&
name|that_present_stopRow
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|stopRow
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stopRow
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_caching
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCaching
argument_list|()
decl_stmt|;
name|boolean
name|that_present_caching
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCaching
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_caching
operator|||
name|that_present_caching
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_caching
operator|&&
name|that_present_caching
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|caching
operator|!=
name|that
operator|.
name|caching
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_maxVersions
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMaxVersions
argument_list|()
decl_stmt|;
name|boolean
name|that_present_maxVersions
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMaxVersions
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_maxVersions
operator|||
name|that_present_maxVersions
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_maxVersions
operator|&&
name|that_present_maxVersions
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|maxVersions
operator|!=
name|that
operator|.
name|maxVersions
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timeRange
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTimeRange
argument_list|()
decl_stmt|;
name|boolean
name|that_present_timeRange
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_timeRange
operator|||
name|that_present_timeRange
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timeRange
operator|&&
name|that_present_timeRange
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|timeRange
operator|.
name|equals
argument_list|(
name|that
operator|.
name|timeRange
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_filterString
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetFilterString
argument_list|()
decl_stmt|;
name|boolean
name|that_present_filterString
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetFilterString
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_filterString
operator|||
name|that_present_filterString
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_filterString
operator|&&
name|that_present_filterString
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|filterString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|filterString
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_batchSize
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBatchSize
argument_list|()
decl_stmt|;
name|boolean
name|that_present_batchSize
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBatchSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_batchSize
operator|||
name|that_present_batchSize
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_batchSize
operator|&&
name|that_present_batchSize
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|batchSize
operator|!=
name|that
operator|.
name|batchSize
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_authorizations
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAuthorizations
argument_list|()
decl_stmt|;
name|boolean
name|that_present_authorizations
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAuthorizations
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_authorizations
operator|||
name|that_present_authorizations
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_authorizations
operator|&&
name|that_present_authorizations
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|authorizations
operator|.
name|equals
argument_list|(
name|that
operator|.
name|authorizations
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_reversed
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetReversed
argument_list|()
decl_stmt|;
name|boolean
name|that_present_reversed
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetReversed
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_reversed
operator|||
name|that_present_reversed
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_reversed
operator|&&
name|that_present_reversed
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|reversed
operator|!=
name|that
operator|.
name|reversed
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|present_startRow
init|=
literal|true
operator|&&
operator|(
name|isSetStartRow
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_startRow
condition|)
name|list
operator|.
name|add
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|boolean
name|present_stopRow
init|=
literal|true
operator|&&
operator|(
name|isSetStopRow
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_stopRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_stopRow
condition|)
name|list
operator|.
name|add
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
name|boolean
name|present_columns
init|=
literal|true
operator|&&
operator|(
name|isSetColumns
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_columns
condition|)
name|list
operator|.
name|add
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|boolean
name|present_caching
init|=
literal|true
operator|&&
operator|(
name|isSetCaching
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_caching
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_caching
condition|)
name|list
operator|.
name|add
argument_list|(
name|caching
argument_list|)
expr_stmt|;
name|boolean
name|present_maxVersions
init|=
literal|true
operator|&&
operator|(
name|isSetMaxVersions
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_maxVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_maxVersions
condition|)
name|list
operator|.
name|add
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
name|boolean
name|present_timeRange
init|=
literal|true
operator|&&
operator|(
name|isSetTimeRange
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_timeRange
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_timeRange
condition|)
name|list
operator|.
name|add
argument_list|(
name|timeRange
argument_list|)
expr_stmt|;
name|boolean
name|present_filterString
init|=
literal|true
operator|&&
operator|(
name|isSetFilterString
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_filterString
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_filterString
condition|)
name|list
operator|.
name|add
argument_list|(
name|filterString
argument_list|)
expr_stmt|;
name|boolean
name|present_batchSize
init|=
literal|true
operator|&&
operator|(
name|isSetBatchSize
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_batchSize
condition|)
name|list
operator|.
name|add
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
name|boolean
name|present_attributes
init|=
literal|true
operator|&&
operator|(
name|isSetAttributes
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_attributes
condition|)
name|list
operator|.
name|add
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|boolean
name|present_authorizations
init|=
literal|true
operator|&&
operator|(
name|isSetAuthorizations
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_authorizations
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_authorizations
condition|)
name|list
operator|.
name|add
argument_list|(
name|authorizations
argument_list|)
expr_stmt|;
name|boolean
name|present_reversed
init|=
literal|true
operator|&&
operator|(
name|isSetReversed
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_reversed
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_reversed
condition|)
name|list
operator|.
name|add
argument_list|(
name|reversed
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TScan
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStartRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetStartRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|other
operator|.
name|startRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetStopRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetStopRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetStopRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|stopRow
argument_list|,
name|other
operator|.
name|stopRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|other
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCaching
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCaching
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCaching
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|caching
argument_list|,
name|other
operator|.
name|caching
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMaxVersions
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|,
name|other
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimeRange
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetTimeRange
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimeRange
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timeRange
argument_list|,
name|other
operator|.
name|timeRange
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetFilterString
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetFilterString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetFilterString
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|filterString
argument_list|,
name|other
operator|.
name|filterString
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBatchSize
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetBatchSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBatchSize
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|batchSize
argument_list|,
name|other
operator|.
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|other
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAuthorizations
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetAuthorizations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAuthorizations
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|authorizations
argument_list|,
name|other
operator|.
name|authorizations
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetReversed
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetReversed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetReversed
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|reversed
argument_list|,
name|other
operator|.
name|reversed
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"TScan("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|isSetStartRow
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"startRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|toString
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetStopRow
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"stopRow:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stopRow
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|toString
argument_list|(
name|this
operator|.
name|stopRow
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetCaching
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"caching:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|caching
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMaxVersions
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"maxVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetTimeRange
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timeRange:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|timeRange
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timeRange
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetFilterString
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"filterString:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|filterString
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|toString
argument_list|(
name|this
operator|.
name|filterString
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetBatchSize
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"batchSize:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|batchSize
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetAuthorizations
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"authorizations:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|authorizations
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|authorizations
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetReversed
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"reversed:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|reversed
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
if|if
condition|(
name|timeRange
operator|!=
literal|null
condition|)
block|{
name|timeRange
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|authorizations
operator|!=
literal|null
condition|)
block|{
name|authorizations
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TScanStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|TScanStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TScanStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TScanStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|TScan
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|TScan
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// START_ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// STOP_ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStopRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list106
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
name|_list106
operator|.
name|size
argument_list|)
expr_stmt|;
name|TColumn
name|_elem107
decl_stmt|;
for|for
control|(
name|int
name|_i108
init|=
literal|0
init|;
name|_i108
operator|<
name|_list106
operator|.
name|size
condition|;
operator|++
name|_i108
control|)
block|{
name|_elem107
operator|=
operator|new
name|TColumn
argument_list|()
expr_stmt|;
name|_elem107
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem107
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// CACHING
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|caching
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCachingIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// MAX_VERSIONS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|maxVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// TIME_RANGE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|timeRange
operator|=
operator|new
name|TTimeRange
argument_list|()
expr_stmt|;
name|struct
operator|.
name|timeRange
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setTimeRangeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// FILTER_STRING
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|filterString
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setFilterStringIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// BATCH_SIZE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|batchSize
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBatchSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map109
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map109
operator|.
name|size
argument_list|)
expr_stmt|;
name|ByteBuffer
name|_key110
decl_stmt|;
name|ByteBuffer
name|_val111
decl_stmt|;
for|for
control|(
name|int
name|_i112
init|=
literal|0
init|;
name|_i112
operator|<
name|_map109
operator|.
name|size
condition|;
operator|++
name|_i112
control|)
block|{
name|_key110
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val111
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key110
argument_list|,
name|_val111
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// AUTHORIZATIONS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|authorizations
operator|=
operator|new
name|TAuthorization
argument_list|()
expr_stmt|;
name|struct
operator|.
name|authorizations
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setAuthorizationsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// REVERSED
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|reversed
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setReversedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|TScan
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|startRow
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|START_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|stopRow
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STOP_ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|stopRow
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TColumn
name|_iter113
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|_iter113
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCaching
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CACHING_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|caching
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_VERSIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|timeRange
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetTimeRange
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIME_RANGE_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|timeRange
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|filterString
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FILTER_STRING_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|filterString
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBatchSize
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BATCH_SIZE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|batchSize
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter114
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter114
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter114
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|authorizations
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetAuthorizations
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|AUTHORIZATIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|authorizations
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetReversed
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|REVERSED_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|reversed
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TScanTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|TScanTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TScanTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TScanTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|TScan
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TScan
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCaching
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimeRange
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBatchSize
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAuthorizations
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetReversed
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|11
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|startRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|stopRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TColumn
name|_iter115
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|_iter115
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCaching
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|caching
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimeRange
argument_list|()
condition|)
block|{
name|struct
operator|.
name|timeRange
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|filterString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBatchSize
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|batchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|_iter116
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter116
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter116
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAuthorizations
argument_list|()
condition|)
block|{
name|struct
operator|.
name|authorizations
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetReversed
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|reversed
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TScan
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|startRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStartRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|stopRow
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setStopRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list117
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
name|_list117
operator|.
name|size
argument_list|)
expr_stmt|;
name|TColumn
name|_elem118
decl_stmt|;
for|for
control|(
name|int
name|_i119
init|=
literal|0
init|;
name|_i119
operator|<
name|_list117
operator|.
name|size
condition|;
operator|++
name|_i119
control|)
block|{
name|_elem118
operator|=
operator|new
name|TColumn
argument_list|()
expr_stmt|;
name|_elem118
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem118
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|caching
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCachingIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|maxVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timeRange
operator|=
operator|new
name|TTimeRange
argument_list|()
expr_stmt|;
name|struct
operator|.
name|timeRange
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setTimeRangeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|struct
operator|.
name|filterString
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setFilterStringIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|7
argument_list|)
condition|)
block|{
name|struct
operator|.
name|batchSize
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBatchSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map120
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map120
operator|.
name|size
argument_list|)
expr_stmt|;
name|ByteBuffer
name|_key121
decl_stmt|;
name|ByteBuffer
name|_val122
decl_stmt|;
for|for
control|(
name|int
name|_i123
init|=
literal|0
init|;
name|_i123
operator|<
name|_map120
operator|.
name|size
condition|;
operator|++
name|_i123
control|)
block|{
name|_key121
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val122
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key121
argument_list|,
name|_val122
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|9
argument_list|)
condition|)
block|{
name|struct
operator|.
name|authorizations
operator|=
operator|new
name|TAuthorization
argument_list|()
expr_stmt|;
name|struct
operator|.
name|authorizations
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setAuthorizationsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|10
argument_list|)
condition|)
block|{
name|struct
operator|.
name|reversed
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setReversedIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

