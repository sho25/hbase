begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|COALESCE_INC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
operator|.
name|getBytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|OperationWithAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ParseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|AlreadyExists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|BatchMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TAppend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_comment
comment|/**  * The HBaseServiceHandler is a glue object that connects Thrift RPC calls to the  * HBase client API primarily defined in the Admin and Table objects.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|ThriftHBaseServiceHandler
extends|extends
name|HBaseServiceHandler
implements|implements
name|Hbase
operator|.
name|Iface
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThriftHBaseServiceHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HREGION_VERSION
init|=
literal|1
decl_stmt|;
comment|// nextScannerId and scannerMap are used to manage scanner state
specifier|private
name|int
name|nextScannerId
init|=
literal|0
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ResultScannerWrapper
argument_list|>
name|scannerMap
decl_stmt|;
name|IncrementCoalescer
name|coalescer
decl_stmt|;
comment|/**    * Returns a list of all the column families for a given Table.    *    * @param table table    * @throws IOException    */
name|byte
index|[]
index|[]
name|getAllColumns
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|HColumnDescriptor
index|[]
name|cds
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columns
init|=
operator|new
name|byte
index|[
name|cds
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columns
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|cds
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|COLUMN_FAMILY_DELIM_ARRAY
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
comment|/**    * Assigns a unique ID to the scanner and adds the mapping to an internal    * hash-map.    *    * @param scanner the {@link ResultScanner} to add    * @return integer scanner id    */
specifier|protected
specifier|synchronized
name|int
name|addScanner
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|,
name|boolean
name|sortColumns
parameter_list|)
block|{
name|int
name|id
init|=
name|nextScannerId
operator|++
decl_stmt|;
name|ResultScannerWrapper
name|resultScannerWrapper
init|=
operator|new
name|ResultScannerWrapper
argument_list|(
name|scanner
argument_list|,
name|sortColumns
argument_list|)
decl_stmt|;
name|scannerMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|resultScannerWrapper
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**    * Returns the scanner associated with the specified ID.    *    * @param id the ID of the scanner to get    * @return a Scanner, or null if ID was invalid.    */
specifier|private
specifier|synchronized
name|ResultScannerWrapper
name|getScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Removes the scanner associated with the specified ID from the internal    * id-&gt;scanner hash-map.    *    * @param id the ID of the scanner to remove    * @return a Scanner, or null if ID was invalid.    */
specifier|private
specifier|synchronized
name|ResultScannerWrapper
name|removeScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|protected
name|ThriftHBaseServiceHandler
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|UserProvider
name|userProvider
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|c
argument_list|,
name|userProvider
argument_list|)
expr_stmt|;
name|scannerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|coalescer
operator|=
operator|new
name|IncrementCoalescer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|getAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|getTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|disableTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|getTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
return|return
name|this
operator|.
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableEnabled
argument_list|(
name|getTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// ThriftServerRunner.compact should be deprecated and replaced with methods specific to
comment|// table and region.
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
try|try
block|{
name|getAdmin
argument_list|()
operator|.
name|compactRegion
argument_list|(
name|getBytes
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Invalid region, try table
name|getAdmin
argument_list|()
operator|.
name|compact
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|getBytes
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// ThriftServerRunner.majorCompact should be deprecated and replaced with methods specific
comment|// to table and region.
annotation|@
name|Override
specifier|public
name|void
name|majorCompact
parameter_list|(
name|ByteBuffer
name|tableNameOrRegionName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
try|try
block|{
name|getAdmin
argument_list|()
operator|.
name|compactRegion
argument_list|(
name|getBytes
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Invalid region, try table
name|getAdmin
argument_list|()
operator|.
name|compact
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|getBytes
argument_list|(
name|tableNameOrRegionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
block|{
try|try
block|{
name|TableName
index|[]
name|tableNames
init|=
name|this
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableNames
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableNames
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return the list of regions in the given table, or an empty list if the table does not exist    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
block|{
try|try
init|(
name|RegionLocator
name|locator
init|=
name|connectionCache
operator|.
name|getRegionLocator
argument_list|(
name|getBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionLocations
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|regionLocations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|regionLocation
range|:
name|regionLocations
control|)
block|{
name|RegionInfo
name|info
init|=
name|regionLocation
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|regionLocation
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|TRegionInfo
name|region
init|=
operator|new
name|TRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|.
name|serverName
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|port
operator|=
name|serverName
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|region
operator|.
name|startKey
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|endKey
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|id
operator|=
name|info
operator|.
name|getRegionId
argument_list|()
expr_stmt|;
name|region
operator|.
name|name
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|version
operator|=
name|HREGION_VERSION
expr_stmt|;
comment|// HRegion now not versioned, PB encoding used
name|results
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
comment|// Return empty list for non-existing table
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|attributes
argument_list|)
return|;
block|}
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
name|get
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|attributes
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid familyAndQualifier provided."
argument_list|)
throw|;
block|}
comment|/**    * Note: this internal interface is slightly different from public APIs in regard to handling    * of the qualifier. Here we differ from the public Java API in that null != byte[0]. Rather,    * we respect qual == null as a request for the entire column family. The caller (    * {@link #get(ByteBuffer, ByteBuffer, ByteBuffer, Map)}) interface IS consistent in that the    * column is parse like normal.    */
specifier|protected
name|List
argument_list|<
name|TCell
argument_list|>
name|get
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
return|;
block|}
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
name|getVer
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid familyAndQualifier provided."
argument_list|)
throw|;
block|}
comment|/**    * Note: this public interface is slightly different from public Java APIs in regard to    * handling of the qualifier. Here we differ from the public Java API in that null != byte[0].    * Rather, we respect qual == null as a request for the entire column family. If you want to    * access the entire column family, use    * {@link #getVer(ByteBuffer, ByteBuffer, ByteBuffer, int, Map)} with a {@code column} value    * that lacks a {@code ':'}.    */
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVer
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|qualifier
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|get
operator|.
name|readVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
return|;
block|}
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
name|getVerTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|,
name|numVersions
argument_list|,
name|attributes
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid familyAndQualifier provided."
argument_list|)
throw|;
block|}
comment|/**    * Note: this internal interface is slightly different from public APIs in regard to handling    * of the qualifier. Here we differ from the public Java API in that null != byte[0]. Rather,    * we respect qual == null as a request for the entire column family. The caller (    * {@link #getVerTs(ByteBuffer, ByteBuffer, ByteBuffer, long, int, Map)}) interface IS    * consistent in that the column is parse like normal.    */
specifier|protected
name|List
argument_list|<
name|TCell
argument_list|>
name|getVerTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|numVersions
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|qualifier
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|numVersions
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumns
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|columns
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
return|return
name|getRowsWithColumnsTs
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
literal|null
argument_list|,
name|timestamp
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|getRowsWithColumnsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|rows
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incNumRowKeysInBatchGet
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ByteBuffer
name|row
range|:
name|rows
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|get
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|Result
index|[]
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAll
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|delete
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|addColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|deleteAllRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|delete
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|ByteBuffer
name|in_tableName
parameter_list|,
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|AlreadyExists
block|{
name|TableName
name|tableName
init|=
name|getTableName
argument_list|(
name|in_tableName
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExists
argument_list|(
literal|"table name already in use"
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnDescriptor
name|col
range|:
name|columnFamilies
control|)
block|{
name|HColumnDescriptor
name|colDesc
init|=
name|ThriftUtilities
operator|.
name|colDescFromThrift
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TableName
name|getTableName
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|getBytes
argument_list|(
name|buffer
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTable
parameter_list|(
name|ByteBuffer
name|in_tableName
parameter_list|)
throws|throws
name|IOError
block|{
name|TableName
name|tableName
init|=
name|getTableName
argument_list|(
name|in_tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteTable: table={}"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"table does not exist"
argument_list|)
throw|;
block|}
name|getAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|mutateRowTs
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|mutations
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRowTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|put
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|delete
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incNumRowKeysInBatchMutate
argument_list|(
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// I apologize for all this mess :)
name|CellBuilder
name|builder
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|addColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|setDurability
argument_list|(
name|m
operator|.
name|writeToWAL
condition|?
name|Durability
operator|.
name|SYNC_WAL
else|:
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No column qualifier specified. Delete is the only mutation supported "
operator|+
literal|"over the whole column family."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|famAndQf
index|[
literal|1
index|]
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|getBytes
argument_list|(
name|m
operator|.
name|value
argument_list|)
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|put
operator|.
name|setDurability
argument_list|(
name|m
operator|.
name|writeToWAL
condition|?
name|Durability
operator|.
name|SYNC_WAL
else|:
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRows
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|mutateRowsTs
argument_list|(
name|tableName
argument_list|,
name|rowBatches
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRowsTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|rowBatches
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CellBuilder
name|builder
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
for|for
control|(
name|BatchMutation
name|batch
range|:
name|rowBatches
control|)
block|{
name|byte
index|[]
name|row
init|=
name|getBytes
argument_list|(
name|batch
operator|.
name|row
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
name|batch
operator|.
name|mutations
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|delete
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|put
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|mutations
control|)
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|m
operator|.
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isDelete
condition|)
block|{
comment|// no qualifier, family only.
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|delete
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|addColumns
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|setDurability
argument_list|(
name|m
operator|.
name|writeToWAL
condition|?
name|Durability
operator|.
name|SYNC_WAL
else|:
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No column qualifier specified. Delete is the only mutation supported "
operator|+
literal|"over the whole column family."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|2
condition|)
block|{
try|try
block|{
name|put
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|famAndQf
index|[
literal|1
index|]
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|m
operator|.
name|value
operator|!=
literal|null
condition|?
name|getBytes
argument_list|(
name|m
operator|.
name|value
argument_list|)
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid famAndQf provided."
argument_list|)
throw|;
block|}
name|put
operator|.
name|setDurability
argument_list|(
name|m
operator|.
name|writeToWAL
condition|?
name|Durability
operator|.
name|SYNC_WAL
else|:
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|puts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deletes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famAndQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|amount
argument_list|)
return|;
block|}
return|return
name|atomicIncrement
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|,
name|famAndQf
index|[
literal|1
index|]
argument_list|,
name|amount
argument_list|)
return|;
block|}
specifier|protected
name|long
name|atomicIncrement
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|scannerClose
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerClose: id={}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ResultScannerWrapper
name|resultScannerWrapper
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultScannerWrapper
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|resultScannerWrapper
operator|.
name|getScanner
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeScanner
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGetList
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|nbRows
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|IOError
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerGetList: id={}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ResultScannerWrapper
name|resultScannerWrapper
init|=
name|getScanner
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|resultScannerWrapper
condition|)
block|{
name|String
name|message
init|=
literal|"scanner ID is invalid"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
literal|"scanner ID is invalid"
argument_list|)
throw|;
block|}
name|Result
index|[]
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|resultScannerWrapper
operator|.
name|getScanner
argument_list|()
operator|.
name|next
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|results
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ThriftUtilities
operator|.
name|rowResultFromHBase
argument_list|(
name|results
argument_list|,
name|resultScannerWrapper
operator|.
name|isColumnSorted
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TRowResult
argument_list|>
name|scannerGet
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|IllegalArgument
throws|,
name|IOError
block|{
return|return
name|scannerGetList
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithScan
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|TScan
name|tScan
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|tScan
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|tScan
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setStopRow
argument_list|(
name|tScan
operator|.
name|getStopRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|tScan
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetCaching
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|tScan
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetBatchSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|tScan
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetColumns
argument_list|()
operator|&&
operator|!
name|tScan
operator|.
name|getColumns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|tScan
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|ParseFilter
name|parseFilter
init|=
operator|new
name|ParseFilter
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|parseFilter
operator|.
name|parseFilterString
argument_list|(
name|tScan
operator|.
name|getFilterString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetReversed
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReversed
argument_list|(
name|tScan
operator|.
name|isReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tScan
operator|.
name|isSetCacheBlocks
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCacheBlocks
argument_list|(
name|tScan
operator|.
name|isCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|,
name|tScan
operator|.
name|sortColumns
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpen
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithStop
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithPrefix
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startAndPrefix
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|getBytes
argument_list|(
name|startAndPrefix
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|scannerOpenWithStopTs
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|startRow
parameter_list|,
name|ByteBuffer
name|stopRow
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|getBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|getBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
name|addAttributes
argument_list|(
name|scan
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
operator|!
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|column
range|:
name|columns
control|)
block|{
name|byte
index|[]
index|[]
name|famQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|famQf
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|famQf
index|[
literal|0
index|]
argument_list|,
name|famQf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|addScanner
argument_list|(
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TreeMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ColumnDescriptor
argument_list|>
name|columns
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|desc
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|e
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|ColumnDescriptor
name|col
init|=
name|ThriftUtilities
operator|.
name|colDescFromHbase
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|columns
operator|.
name|put
argument_list|(
name|col
operator|.
name|name
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|closeTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TRegionInfo
name|getRegionInfo
parameter_list|(
name|ByteBuffer
name|searchRow
parameter_list|)
throws|throws
name|IOError
block|{
try|try
block|{
name|byte
index|[]
name|row
init|=
name|getBytes
argument_list|(
name|searchRow
argument_list|)
decl_stmt|;
name|Result
name|startRowResult
init|=
name|getReverseScanResult
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getName
argument_list|()
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
if|if
condition|(
name|startRowResult
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find row in "
operator|+
name|TableName
operator|.
name|META_TABLE_NAME
operator|+
literal|", row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
comment|// find region start and end keys
name|RegionInfo
name|regionInfo
init|=
name|MetaTableAccessor
operator|.
name|getRegionInfo
argument_list|(
name|startRowResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RegionInfo REGIONINFO was null or "
operator|+
literal|" empty in Meta for row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
name|TRegionInfo
name|region
init|=
operator|new
name|TRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|.
name|setStartKey
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|setEndKey
argument_list|(
name|regionInfo
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|id
operator|=
name|regionInfo
operator|.
name|getRegionId
argument_list|()
expr_stmt|;
name|region
operator|.
name|setName
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|version
operator|=
name|HREGION_VERSION
expr_stmt|;
comment|// version not used anymore, PB encoding used.
comment|// find region assignment to server
name|ServerName
name|serverName
init|=
name|MetaTableAccessor
operator|.
name|getServerName
argument_list|(
name|startRowResult
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverName
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|setServerName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|port
operator|=
name|serverName
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
return|return
name|region
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Result
name|getReverseScanResult
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
return|return
name|scanner
operator|.
name|next
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|increment
parameter_list|(
name|TIncrement
name|tincrement
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|tincrement
operator|.
name|getRow
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|||
name|tincrement
operator|.
name|getTable
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
literal|"Must supply a table and a row key; can't increment"
argument_list|)
throw|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|COALESCE_INC_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|this
operator|.
name|coalescer
operator|.
name|queueIncrement
argument_list|(
name|tincrement
argument_list|)
expr_stmt|;
return|return;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tincrement
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Increment
name|inc
init|=
name|ThriftUtilities
operator|.
name|incrementFromThrift
argument_list|(
name|tincrement
argument_list|)
decl_stmt|;
name|table
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementRows
parameter_list|(
name|List
argument_list|<
name|TIncrement
argument_list|>
name|tincrements
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|COALESCE_INC_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|this
operator|.
name|coalescer
operator|.
name|queueIncrements
argument_list|(
name|tincrements
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|TIncrement
name|tinc
range|:
name|tincrements
control|)
block|{
name|increment
argument_list|(
name|tinc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TCell
argument_list|>
name|append
parameter_list|(
name|TAppend
name|tappend
parameter_list|)
throws|throws
name|IOError
throws|,
name|TException
block|{
if|if
condition|(
name|tappend
operator|.
name|getRow
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|||
name|tappend
operator|.
name|getTable
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
literal|"Must supply a table and a row key; can't append"
argument_list|)
throw|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tappend
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|Append
name|append
init|=
name|ThriftUtilities
operator|.
name|appendFromThrift
argument_list|(
name|tappend
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|cellFromHBase
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|column
parameter_list|,
name|ByteBuffer
name|value
parameter_list|,
name|Mutation
name|mput
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|IOError
throws|,
name|IllegalArgument
throws|,
name|TException
block|{
name|Put
name|put
decl_stmt|;
try|try
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
name|addAttributes
argument_list|(
name|put
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|mput
operator|.
name|column
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|famAndQf
index|[
literal|1
index|]
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|mput
operator|.
name|value
operator|!=
literal|null
condition|?
name|getBytes
argument_list|(
name|mput
operator|.
name|value
argument_list|)
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|mput
operator|.
name|writeToWAL
condition|?
name|Durability
operator|.
name|SYNC_WAL
else|:
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
name|CellUtil
operator|.
name|parseColumn
argument_list|(
name|getBytes
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
name|Table
operator|.
name|CheckAndMutateBuilder
name|mutateBuilder
init|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|getBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|famAndQf
index|[
literal|0
index|]
argument_list|)
operator|.
name|qualifier
argument_list|(
name|famAndQf
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|mutateBuilder
operator|.
name|ifEquals
argument_list|(
name|getBytes
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mutateBuilder
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|getIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgument
argument_list|(
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|IOError
name|getIOError
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|IOError
name|error
init|=
operator|new
name|IOErrorWithCause
argument_list|(
name|throwable
argument_list|)
decl_stmt|;
name|error
operator|.
name|setMessage
argument_list|(
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|throwable
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
comment|/**    * Adds all the attributes into the Operation object    */
specifier|private
specifier|static
name|void
name|addAttributes
parameter_list|(
name|OperationWithAttributes
name|op
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
operator|||
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|entry
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|getBytes
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|op
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|ResultScannerWrapper
block|{
specifier|private
specifier|final
name|ResultScanner
name|scanner
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|sortColumns
decl_stmt|;
specifier|public
name|ResultScannerWrapper
parameter_list|(
name|ResultScanner
name|resultScanner
parameter_list|,
name|boolean
name|sortResultColumns
parameter_list|)
block|{
name|scanner
operator|=
name|resultScanner
expr_stmt|;
name|sortColumns
operator|=
name|sortResultColumns
expr_stmt|;
block|}
specifier|public
name|ResultScanner
name|getScanner
parameter_list|()
block|{
return|return
name|scanner
return|;
block|}
specifier|public
name|boolean
name|isColumnSorted
parameter_list|()
block|{
return|return
name|sortColumns
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IOErrorWithCause
extends|extends
name|IOError
block|{
specifier|private
specifier|final
name|Throwable
name|cause
decl_stmt|;
specifier|public
name|IOErrorWithCause
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Throwable
name|getCause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
operator|&&
name|other
operator|instanceof
name|IOErrorWithCause
condition|)
block|{
name|Throwable
name|otherCause
init|=
operator|(
operator|(
name|IOErrorWithCause
operator|)
name|other
operator|)
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|otherCause
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getCause
argument_list|()
operator|.
name|equals
argument_list|(
name|otherCause
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|otherCause
operator|==
literal|null
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|cause
operator|!=
literal|null
condition|?
name|cause
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

