begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|READONLY_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_READONLY_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_READONLY_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|HBaseServiceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|HbaseHandlerMetricsProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|ThriftMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|THBaseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_comment
comment|/**  * ThriftServer - this class starts up a Thrift server which implements the HBase API specified in  * the HbaseClient.thrift IDL file.  */
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NM_SAME_SIMPLE_NAME_AS_SUPERCLASS"
argument_list|,
name|justification
operator|=
literal|"Change the name will be an incompatible change, will do it later"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
class|class
name|ThriftServer
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|ThriftServer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThriftServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ThriftServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsageAndExit
parameter_list|(
name|Options
name|options
parameter_list|,
name|int
name|exitCode
parameter_list|)
throws|throws
name|Shell
operator|.
name|ExitCodeException
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"Thrift"
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
literal|"To start the Thrift server run 'hbase-daemon.sh start thrift2' or "
operator|+
literal|"'hbase thrift2'\n"
operator|+
literal|"To shutdown the thrift server run 'hbase-daemon.sh stop thrift2' or"
operator|+
literal|" send a kill signal to the thrift server pid"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Shell
operator|.
name|ExitCodeException
argument_list|(
name|exitCode
argument_list|,
literal|""
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|HBaseServiceHandler
name|createHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserProvider
name|userProvider
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ThriftMetrics
name|createThriftMetrics
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|ThriftMetrics
argument_list|(
name|conf
argument_list|,
name|ThriftMetrics
operator|.
name|ThriftServerType
operator|.
name|TWO
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TProcessor
name|createProcessor
parameter_list|()
block|{
return|return
operator|new
name|THBaseService
operator|.
name|Processor
argument_list|<>
argument_list|(
name|HbaseHandlerMetricsProxy
operator|.
name|newInstance
argument_list|(
operator|(
name|THBaseService
operator|.
name|Iface
operator|)
name|hbaseServiceHandler
argument_list|,
name|metrics
argument_list|,
name|conf
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|super
operator|.
name|addOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"ro"
argument_list|,
name|READONLY_OPTION
argument_list|,
literal|false
argument_list|,
literal|"Respond only to read method requests [default: false]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|parseCommandLine
parameter_list|(
name|CommandLine
name|cmd
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|Shell
operator|.
name|ExitCodeException
block|{
name|super
operator|.
name|parseCommandLine
argument_list|(
name|cmd
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|boolean
name|readOnly
init|=
name|THRIFT_READONLY_ENABLED_DEFAULT
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|READONLY_OPTION
argument_list|)
condition|)
block|{
name|readOnly
operator|=
literal|true
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|THRIFT_READONLY_ENABLED
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start up the Thrift2 server.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// for now, only time we return is on an argument error.
specifier|final
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|ThriftServer
argument_list|(
name|conf
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

