begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.12.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
package|;
end_package

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|,
literal|"unused"
block|}
argument_list|)
comment|/**  * Thrift wrapper around  * org.apache.hadoop.hbase.client.ColumnFamilyDescriptor  */
annotation|@
name|javax
operator|.
name|annotation
operator|.
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.12.0)"
argument_list|,
name|date
operator|=
literal|"2019-11-07"
argument_list|)
specifier|public
class|class
name|TColumnFamilyDescriptor
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|TColumnFamilyDescriptor
argument_list|,
name|TColumnFamilyDescriptor
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|TColumnFamilyDescriptor
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"TColumnFamilyDescriptor"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CONFIGURATION_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"configuration"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BLOCK_SIZE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"blockSize"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BLOOMN_FILTER_TYPE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"bloomnFilterType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COMPRESSION_TYPE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"compressionType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DFS_REPLICATION_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"dfsReplication"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DATA_BLOCK_ENCODING_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"dataBlockEncoding"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|KEEP_DELETED_CELLS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"keepDeletedCells"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MAX_VERSIONS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"maxVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|MIN_VERSIONS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"minVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SCOPE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"scope"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TIME_TO_LIVE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"timeToLive"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|13
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BLOCK_CACHE_ENABLED_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"blockCacheEnabled"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|14
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CACHE_BLOOMS_ON_WRITE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"cacheBloomsOnWrite"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|15
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CACHE_DATA_ON_WRITE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"cacheDataOnWrite"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|16
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CACHE_INDEXES_ON_WRITE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"cacheIndexesOnWrite"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|17
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COMPRESS_TAGS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"compressTags"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|18
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|EVICT_BLOCKS_ON_CLOSE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"evictBlocksOnClose"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|19
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|IN_MEMORY_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"inMemory"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|20
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|TColumnFamilyDescriptorStandardSchemeFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|TColumnFamilyDescriptorTupleSchemeFactory
argument_list|()
decl_stmt|;
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|name
decl_stmt|;
comment|// required
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// optional
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|configuration
decl_stmt|;
comment|// optional
specifier|public
name|int
name|blockSize
decl_stmt|;
comment|// optional
comment|/**    *     * @see TBloomFilterType    */
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TBloomFilterType
name|bloomnFilterType
decl_stmt|;
comment|// optional
comment|/**    *     * @see TCompressionAlgorithm    */
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TCompressionAlgorithm
name|compressionType
decl_stmt|;
comment|// optional
specifier|public
name|short
name|dfsReplication
decl_stmt|;
comment|// optional
comment|/**    *     * @see TDataBlockEncoding    */
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TDataBlockEncoding
name|dataBlockEncoding
decl_stmt|;
comment|// optional
comment|/**    *     * @see TKeepDeletedCells    */
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TKeepDeletedCells
name|keepDeletedCells
decl_stmt|;
comment|// optional
specifier|public
name|int
name|maxVersions
decl_stmt|;
comment|// optional
specifier|public
name|int
name|minVersions
decl_stmt|;
comment|// optional
specifier|public
name|int
name|scope
decl_stmt|;
comment|// optional
specifier|public
name|int
name|timeToLive
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|blockCacheEnabled
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|cacheBloomsOnWrite
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|cacheDataOnWrite
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|cacheIndexesOnWrite
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|compressTags
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|evictBlocksOnClose
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|inMemory
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"name"
argument_list|)
block|,
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"attributes"
argument_list|)
block|,
name|CONFIGURATION
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"configuration"
argument_list|)
block|,
name|BLOCK_SIZE
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"blockSize"
argument_list|)
block|,
comment|/**      *       * @see TBloomFilterType      */
name|BLOOMN_FILTER_TYPE
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"bloomnFilterType"
argument_list|)
block|,
comment|/**      *       * @see TCompressionAlgorithm      */
name|COMPRESSION_TYPE
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"compressionType"
argument_list|)
block|,
name|DFS_REPLICATION
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"dfsReplication"
argument_list|)
block|,
comment|/**      *       * @see TDataBlockEncoding      */
name|DATA_BLOCK_ENCODING
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"dataBlockEncoding"
argument_list|)
block|,
comment|/**      *       * @see TKeepDeletedCells      */
name|KEEP_DELETED_CELLS
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"keepDeletedCells"
argument_list|)
block|,
name|MAX_VERSIONS
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
literal|"maxVersions"
argument_list|)
block|,
name|MIN_VERSIONS
argument_list|(
operator|(
name|short
operator|)
literal|11
argument_list|,
literal|"minVersions"
argument_list|)
block|,
name|SCOPE
argument_list|(
operator|(
name|short
operator|)
literal|12
argument_list|,
literal|"scope"
argument_list|)
block|,
name|TIME_TO_LIVE
argument_list|(
operator|(
name|short
operator|)
literal|13
argument_list|,
literal|"timeToLive"
argument_list|)
block|,
name|BLOCK_CACHE_ENABLED
argument_list|(
operator|(
name|short
operator|)
literal|14
argument_list|,
literal|"blockCacheEnabled"
argument_list|)
block|,
name|CACHE_BLOOMS_ON_WRITE
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
literal|"cacheBloomsOnWrite"
argument_list|)
block|,
name|CACHE_DATA_ON_WRITE
argument_list|(
operator|(
name|short
operator|)
literal|16
argument_list|,
literal|"cacheDataOnWrite"
argument_list|)
block|,
name|CACHE_INDEXES_ON_WRITE
argument_list|(
operator|(
name|short
operator|)
literal|17
argument_list|,
literal|"cacheIndexesOnWrite"
argument_list|)
block|,
name|COMPRESS_TAGS
argument_list|(
operator|(
name|short
operator|)
literal|18
argument_list|,
literal|"compressTags"
argument_list|)
block|,
name|EVICT_BLOCKS_ON_CLOSE
argument_list|(
operator|(
name|short
operator|)
literal|19
argument_list|,
literal|"evictBlocksOnClose"
argument_list|)
block|,
name|IN_MEMORY
argument_list|(
operator|(
name|short
operator|)
literal|20
argument_list|,
literal|"inMemory"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
return|return
name|NAME
return|;
case|case
literal|2
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
case|case
literal|3
case|:
comment|// CONFIGURATION
return|return
name|CONFIGURATION
return|;
case|case
literal|4
case|:
comment|// BLOCK_SIZE
return|return
name|BLOCK_SIZE
return|;
case|case
literal|5
case|:
comment|// BLOOMN_FILTER_TYPE
return|return
name|BLOOMN_FILTER_TYPE
return|;
case|case
literal|6
case|:
comment|// COMPRESSION_TYPE
return|return
name|COMPRESSION_TYPE
return|;
case|case
literal|7
case|:
comment|// DFS_REPLICATION
return|return
name|DFS_REPLICATION
return|;
case|case
literal|8
case|:
comment|// DATA_BLOCK_ENCODING
return|return
name|DATA_BLOCK_ENCODING
return|;
case|case
literal|9
case|:
comment|// KEEP_DELETED_CELLS
return|return
name|KEEP_DELETED_CELLS
return|;
case|case
literal|10
case|:
comment|// MAX_VERSIONS
return|return
name|MAX_VERSIONS
return|;
case|case
literal|11
case|:
comment|// MIN_VERSIONS
return|return
name|MIN_VERSIONS
return|;
case|case
literal|12
case|:
comment|// SCOPE
return|return
name|SCOPE
return|;
case|case
literal|13
case|:
comment|// TIME_TO_LIVE
return|return
name|TIME_TO_LIVE
return|;
case|case
literal|14
case|:
comment|// BLOCK_CACHE_ENABLED
return|return
name|BLOCK_CACHE_ENABLED
return|;
case|case
literal|15
case|:
comment|// CACHE_BLOOMS_ON_WRITE
return|return
name|CACHE_BLOOMS_ON_WRITE
return|;
case|case
literal|16
case|:
comment|// CACHE_DATA_ON_WRITE
return|return
name|CACHE_DATA_ON_WRITE
return|;
case|case
literal|17
case|:
comment|// CACHE_INDEXES_ON_WRITE
return|return
name|CACHE_INDEXES_ON_WRITE
return|;
case|case
literal|18
case|:
comment|// COMPRESS_TAGS
return|return
name|COMPRESS_TAGS
return|;
case|case
literal|19
case|:
comment|// EVICT_BLOCKS_ON_CLOSE
return|return
name|EVICT_BLOCKS_ON_CLOSE
return|;
case|case
literal|20
case|:
comment|// IN_MEMORY
return|return
name|IN_MEMORY
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__BLOCKSIZE_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__DFSREPLICATION_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__MAXVERSIONS_ISSET_ID
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__MINVERSIONS_ISSET_ID
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__SCOPE_ISSET_ID
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__TIMETOLIVE_ISSET_ID
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__BLOCKCACHEENABLED_ISSET_ID
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__CACHEBLOOMSONWRITE_ISSET_ID
init|=
literal|7
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__CACHEDATAONWRITE_ISSET_ID
init|=
literal|8
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__CACHEINDEXESONWRITE_ISSET_ID
init|=
literal|9
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__COMPRESSTAGS_ISSET_ID
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__EVICTBLOCKSONCLOSE_ISSET_ID
init|=
literal|11
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__INMEMORY_ISSET_ID
init|=
literal|12
decl_stmt|;
specifier|private
name|short
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|ATTRIBUTES
block|,
name|_Fields
operator|.
name|CONFIGURATION
block|,
name|_Fields
operator|.
name|BLOCK_SIZE
block|,
name|_Fields
operator|.
name|BLOOMN_FILTER_TYPE
block|,
name|_Fields
operator|.
name|COMPRESSION_TYPE
block|,
name|_Fields
operator|.
name|DFS_REPLICATION
block|,
name|_Fields
operator|.
name|DATA_BLOCK_ENCODING
block|,
name|_Fields
operator|.
name|KEEP_DELETED_CELLS
block|,
name|_Fields
operator|.
name|MAX_VERSIONS
block|,
name|_Fields
operator|.
name|MIN_VERSIONS
block|,
name|_Fields
operator|.
name|SCOPE
block|,
name|_Fields
operator|.
name|TIME_TO_LIVE
block|,
name|_Fields
operator|.
name|BLOCK_CACHE_ENABLED
block|,
name|_Fields
operator|.
name|CACHE_BLOOMS_ON_WRITE
block|,
name|_Fields
operator|.
name|CACHE_DATA_ON_WRITE
block|,
name|_Fields
operator|.
name|CACHE_INDEXES_ON_WRITE
block|,
name|_Fields
operator|.
name|COMPRESS_TAGS
block|,
name|_Fields
operator|.
name|EVICT_BLOCKS_ON_CLOSE
block|,
name|_Fields
operator|.
name|IN_MEMORY
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CONFIGURATION
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"configuration"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BLOCK_SIZE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"blockSize"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BLOOMN_FILTER_TYPE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"bloomnFilterType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|TBloomFilterType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COMPRESSION_TYPE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"compressionType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|TCompressionAlgorithm
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DFS_REPLICATION
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"dfsReplication"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DATA_BLOCK_ENCODING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"dataBlockEncoding"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|TDataBlockEncoding
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|KEEP_DELETED_CELLS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"keepDeletedCells"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|TKeepDeletedCells
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_VERSIONS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"maxVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MIN_VERSIONS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"minVersions"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SCOPE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"scope"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TIME_TO_LIVE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"timeToLive"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BLOCK_CACHE_ENABLED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"blockCacheEnabled"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CACHE_BLOOMS_ON_WRITE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"cacheBloomsOnWrite"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CACHE_DATA_ON_WRITE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"cacheDataOnWrite"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CACHE_INDEXES_ON_WRITE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"cacheIndexesOnWrite"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COMPRESS_TAGS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"compressTags"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|EVICT_BLOCKS_ON_CLOSE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"evictBlocksOnClose"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IN_MEMORY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"inMemory"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|TColumnFamilyDescriptor
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TColumnFamilyDescriptor
parameter_list|()
block|{   }
specifier|public
name|TColumnFamilyDescriptor
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|TColumnFamilyDescriptor
parameter_list|(
name|TColumnFamilyDescriptor
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|other
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
argument_list|(
name|other
operator|.
name|attributes
argument_list|)
decl_stmt|;
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetConfiguration
argument_list|()
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|__this__configuration
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|(
name|other
operator|.
name|configuration
argument_list|)
decl_stmt|;
name|this
operator|.
name|configuration
operator|=
name|__this__configuration
expr_stmt|;
block|}
name|this
operator|.
name|blockSize
operator|=
name|other
operator|.
name|blockSize
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetBloomnFilterType
argument_list|()
condition|)
block|{
name|this
operator|.
name|bloomnFilterType
operator|=
name|other
operator|.
name|bloomnFilterType
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetCompressionType
argument_list|()
condition|)
block|{
name|this
operator|.
name|compressionType
operator|=
name|other
operator|.
name|compressionType
expr_stmt|;
block|}
name|this
operator|.
name|dfsReplication
operator|=
name|other
operator|.
name|dfsReplication
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDataBlockEncoding
argument_list|()
condition|)
block|{
name|this
operator|.
name|dataBlockEncoding
operator|=
name|other
operator|.
name|dataBlockEncoding
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetKeepDeletedCells
argument_list|()
condition|)
block|{
name|this
operator|.
name|keepDeletedCells
operator|=
name|other
operator|.
name|keepDeletedCells
expr_stmt|;
block|}
name|this
operator|.
name|maxVersions
operator|=
name|other
operator|.
name|maxVersions
expr_stmt|;
name|this
operator|.
name|minVersions
operator|=
name|other
operator|.
name|minVersions
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|other
operator|.
name|scope
expr_stmt|;
name|this
operator|.
name|timeToLive
operator|=
name|other
operator|.
name|timeToLive
expr_stmt|;
name|this
operator|.
name|blockCacheEnabled
operator|=
name|other
operator|.
name|blockCacheEnabled
expr_stmt|;
name|this
operator|.
name|cacheBloomsOnWrite
operator|=
name|other
operator|.
name|cacheBloomsOnWrite
expr_stmt|;
name|this
operator|.
name|cacheDataOnWrite
operator|=
name|other
operator|.
name|cacheDataOnWrite
expr_stmt|;
name|this
operator|.
name|cacheIndexesOnWrite
operator|=
name|other
operator|.
name|cacheIndexesOnWrite
expr_stmt|;
name|this
operator|.
name|compressTags
operator|=
name|other
operator|.
name|compressTags
expr_stmt|;
name|this
operator|.
name|evictBlocksOnClose
operator|=
name|other
operator|.
name|evictBlocksOnClose
expr_stmt|;
name|this
operator|.
name|inMemory
operator|=
name|other
operator|.
name|inMemory
expr_stmt|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|TColumnFamilyDescriptor
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
literal|null
expr_stmt|;
name|setBlockSizeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bloomnFilterType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|compressionType
operator|=
literal|null
expr_stmt|;
name|setDfsReplicationIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dfsReplication
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|dataBlockEncoding
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|keepDeletedCells
operator|=
literal|null
expr_stmt|;
name|setMaxVersionsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxVersions
operator|=
literal|0
expr_stmt|;
name|setMinVersionsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|minVersions
operator|=
literal|0
expr_stmt|;
name|setScopeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|scope
operator|=
literal|0
expr_stmt|;
name|setTimeToLiveIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeToLive
operator|=
literal|0
expr_stmt|;
name|setBlockCacheEnabledIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockCacheEnabled
operator|=
literal|false
expr_stmt|;
name|setCacheBloomsOnWriteIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheBloomsOnWrite
operator|=
literal|false
expr_stmt|;
name|setCacheDataOnWriteIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheDataOnWrite
operator|=
literal|false
expr_stmt|;
name|setCacheIndexesOnWriteIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheIndexesOnWrite
operator|=
literal|false
expr_stmt|;
name|setCompressTagsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|compressTags
operator|=
literal|false
expr_stmt|;
name|setEvictBlocksOnCloseIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|evictBlocksOnClose
operator|=
literal|false
expr_stmt|;
name|setInMemoryIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|inMemory
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getName
parameter_list|()
block|{
name|setName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|name
operator|==
literal|null
condition|?
literal|null
else|:
name|name
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|bufferForName
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setName
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
operator|==
literal|null
condition|?
operator|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|)
literal|null
else|:
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|name
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setName
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|key
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setAttributes
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getConfigurationSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|configuration
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|configuration
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToConfiguration
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|key
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|configuration
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|configuration
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|configuration
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|configuration
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setConfiguration
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetConfiguration
parameter_list|()
block|{
name|this
operator|.
name|configuration
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field configuration is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|configuration
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setConfigurationIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|configuration
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getBlockSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockSize
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setBlockSize
parameter_list|(
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|setBlockSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetBlockSize
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKSIZE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field blockSize is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBlockSize
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKSIZE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBlockSizeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKSIZE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    *     * @see TBloomFilterType    */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|TBloomFilterType
name|getBloomnFilterType
parameter_list|()
block|{
return|return
name|this
operator|.
name|bloomnFilterType
return|;
block|}
comment|/**    *     * @see TBloomFilterType    */
specifier|public
name|TColumnFamilyDescriptor
name|setBloomnFilterType
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TBloomFilterType
name|bloomnFilterType
parameter_list|)
block|{
name|this
operator|.
name|bloomnFilterType
operator|=
name|bloomnFilterType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetBloomnFilterType
parameter_list|()
block|{
name|this
operator|.
name|bloomnFilterType
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field bloomnFilterType is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBloomnFilterType
parameter_list|()
block|{
return|return
name|this
operator|.
name|bloomnFilterType
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setBloomnFilterTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|bloomnFilterType
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    *     * @see TCompressionAlgorithm    */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|TCompressionAlgorithm
name|getCompressionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|compressionType
return|;
block|}
comment|/**    *     * @see TCompressionAlgorithm    */
specifier|public
name|TColumnFamilyDescriptor
name|setCompressionType
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TCompressionAlgorithm
name|compressionType
parameter_list|)
block|{
name|this
operator|.
name|compressionType
operator|=
name|compressionType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetCompressionType
parameter_list|()
block|{
name|this
operator|.
name|compressionType
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field compressionType is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCompressionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|compressionType
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setCompressionTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|compressionType
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getDfsReplication
parameter_list|()
block|{
return|return
name|this
operator|.
name|dfsReplication
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setDfsReplication
parameter_list|(
name|short
name|dfsReplication
parameter_list|)
block|{
name|this
operator|.
name|dfsReplication
operator|=
name|dfsReplication
expr_stmt|;
name|setDfsReplicationIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetDfsReplication
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__DFSREPLICATION_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field dfsReplication is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDfsReplication
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__DFSREPLICATION_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDfsReplicationIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__DFSREPLICATION_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    *     * @see TDataBlockEncoding    */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|TDataBlockEncoding
name|getDataBlockEncoding
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataBlockEncoding
return|;
block|}
comment|/**    *     * @see TDataBlockEncoding    */
specifier|public
name|TColumnFamilyDescriptor
name|setDataBlockEncoding
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TDataBlockEncoding
name|dataBlockEncoding
parameter_list|)
block|{
name|this
operator|.
name|dataBlockEncoding
operator|=
name|dataBlockEncoding
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetDataBlockEncoding
parameter_list|()
block|{
name|this
operator|.
name|dataBlockEncoding
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dataBlockEncoding is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDataBlockEncoding
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataBlockEncoding
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDataBlockEncodingIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dataBlockEncoding
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    *     * @see TKeepDeletedCells    */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|TKeepDeletedCells
name|getKeepDeletedCells
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepDeletedCells
return|;
block|}
comment|/**    *     * @see TKeepDeletedCells    */
specifier|public
name|TColumnFamilyDescriptor
name|setKeepDeletedCells
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TKeepDeletedCells
name|keepDeletedCells
parameter_list|)
block|{
name|this
operator|.
name|keepDeletedCells
operator|=
name|keepDeletedCells
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetKeepDeletedCells
parameter_list|()
block|{
name|this
operator|.
name|keepDeletedCells
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field keepDeletedCells is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetKeepDeletedCells
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepDeletedCells
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setKeepDeletedCellsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|keepDeletedCells
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMaxVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxVersions
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setMaxVersions
parameter_list|(
name|int
name|maxVersions
parameter_list|)
block|{
name|this
operator|.
name|maxVersions
operator|=
name|maxVersions
expr_stmt|;
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetMaxVersions
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MAXVERSIONS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field maxVersions is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMaxVersions
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MAXVERSIONS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMaxVersionsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MAXVERSIONS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getMinVersions
parameter_list|()
block|{
return|return
name|this
operator|.
name|minVersions
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setMinVersions
parameter_list|(
name|int
name|minVersions
parameter_list|)
block|{
name|this
operator|.
name|minVersions
operator|=
name|minVersions
expr_stmt|;
name|setMinVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetMinVersions
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MINVERSIONS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field minVersions is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMinVersions
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MINVERSIONS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMinVersionsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__MINVERSIONS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getScope
parameter_list|()
block|{
return|return
name|this
operator|.
name|scope
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setScope
parameter_list|(
name|int
name|scope
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|setScopeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetScope
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SCOPE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field scope is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetScope
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SCOPE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setScopeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__SCOPE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getTimeToLive
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeToLive
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setTimeToLive
parameter_list|(
name|int
name|timeToLive
parameter_list|)
block|{
name|this
operator|.
name|timeToLive
operator|=
name|timeToLive
expr_stmt|;
name|setTimeToLiveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetTimeToLive
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__TIMETOLIVE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field timeToLive is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTimeToLive
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__TIMETOLIVE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimeToLiveIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__TIMETOLIVE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBlockCacheEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockCacheEnabled
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setBlockCacheEnabled
parameter_list|(
name|boolean
name|blockCacheEnabled
parameter_list|)
block|{
name|this
operator|.
name|blockCacheEnabled
operator|=
name|blockCacheEnabled
expr_stmt|;
name|setBlockCacheEnabledIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetBlockCacheEnabled
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKCACHEENABLED_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field blockCacheEnabled is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBlockCacheEnabled
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKCACHEENABLED_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBlockCacheEnabledIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKCACHEENABLED_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCacheBloomsOnWrite
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheBloomsOnWrite
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setCacheBloomsOnWrite
parameter_list|(
name|boolean
name|cacheBloomsOnWrite
parameter_list|)
block|{
name|this
operator|.
name|cacheBloomsOnWrite
operator|=
name|cacheBloomsOnWrite
expr_stmt|;
name|setCacheBloomsOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetCacheBloomsOnWrite
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEBLOOMSONWRITE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field cacheBloomsOnWrite is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCacheBloomsOnWrite
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEBLOOMSONWRITE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCacheBloomsOnWriteIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEBLOOMSONWRITE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCacheDataOnWrite
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheDataOnWrite
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setCacheDataOnWrite
parameter_list|(
name|boolean
name|cacheDataOnWrite
parameter_list|)
block|{
name|this
operator|.
name|cacheDataOnWrite
operator|=
name|cacheDataOnWrite
expr_stmt|;
name|setCacheDataOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetCacheDataOnWrite
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEDATAONWRITE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field cacheDataOnWrite is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCacheDataOnWrite
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEDATAONWRITE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCacheDataOnWriteIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEDATAONWRITE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCacheIndexesOnWrite
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheIndexesOnWrite
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setCacheIndexesOnWrite
parameter_list|(
name|boolean
name|cacheIndexesOnWrite
parameter_list|)
block|{
name|this
operator|.
name|cacheIndexesOnWrite
operator|=
name|cacheIndexesOnWrite
expr_stmt|;
name|setCacheIndexesOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetCacheIndexesOnWrite
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEINDEXESONWRITE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field cacheIndexesOnWrite is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCacheIndexesOnWrite
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEINDEXESONWRITE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCacheIndexesOnWriteIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__CACHEINDEXESONWRITE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCompressTags
parameter_list|()
block|{
return|return
name|this
operator|.
name|compressTags
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setCompressTags
parameter_list|(
name|boolean
name|compressTags
parameter_list|)
block|{
name|this
operator|.
name|compressTags
operator|=
name|compressTags
expr_stmt|;
name|setCompressTagsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetCompressTags
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__COMPRESSTAGS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field compressTags is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCompressTags
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__COMPRESSTAGS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCompressTagsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__COMPRESSTAGS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEvictBlocksOnClose
parameter_list|()
block|{
return|return
name|this
operator|.
name|evictBlocksOnClose
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setEvictBlocksOnClose
parameter_list|(
name|boolean
name|evictBlocksOnClose
parameter_list|)
block|{
name|this
operator|.
name|evictBlocksOnClose
operator|=
name|evictBlocksOnClose
expr_stmt|;
name|setEvictBlocksOnCloseIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetEvictBlocksOnClose
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__EVICTBLOCKSONCLOSE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field evictBlocksOnClose is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetEvictBlocksOnClose
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__EVICTBLOCKSONCLOSE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setEvictBlocksOnCloseIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__EVICTBLOCKSONCLOSE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInMemory
parameter_list|()
block|{
return|return
name|this
operator|.
name|inMemory
return|;
block|}
specifier|public
name|TColumnFamilyDescriptor
name|setInMemory
parameter_list|(
name|boolean
name|inMemory
parameter_list|)
block|{
name|this
operator|.
name|inMemory
operator|=
name|inMemory
expr_stmt|;
name|setInMemoryIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetInMemory
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__INMEMORY_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field inMemory is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetInMemory
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__INMEMORY_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setInMemoryIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__INMEMORY_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|setName
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CONFIGURATION
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetConfiguration
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setConfiguration
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOCK_SIZE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBlockSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBlockSize
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOOMN_FILTER_TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBloomnFilterType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBloomnFilterType
argument_list|(
operator|(
name|TBloomFilterType
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPRESSION_TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCompressionType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCompressionType
argument_list|(
operator|(
name|TCompressionAlgorithm
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DFS_REPLICATION
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDfsReplication
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDfsReplication
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DATA_BLOCK_ENCODING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDataBlockEncoding
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDataBlockEncoding
argument_list|(
operator|(
name|TDataBlockEncoding
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|KEEP_DELETED_CELLS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetKeepDeletedCells
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setKeepDeletedCells
argument_list|(
operator|(
name|TKeepDeletedCells
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_VERSIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMaxVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMaxVersions
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MIN_VERSIONS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMinVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMinVersions
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SCOPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetScope
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setScope
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIME_TO_LIVE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTimeToLive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTimeToLive
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOCK_CACHE_ENABLED
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBlockCacheEnabled
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBlockCacheEnabled
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CACHE_BLOOMS_ON_WRITE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCacheBloomsOnWrite
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCacheBloomsOnWrite
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CACHE_DATA_ON_WRITE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCacheDataOnWrite
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCacheDataOnWrite
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CACHE_INDEXES_ON_WRITE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCacheIndexesOnWrite
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCacheIndexesOnWrite
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPRESS_TAGS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCompressTags
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCompressTags
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EVICT_BLOCKS_ON_CLOSE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetEvictBlocksOnClose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setEvictBlocksOnClose
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IN_MEMORY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetInMemory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setInMemory
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
case|case
name|CONFIGURATION
case|:
return|return
name|getConfiguration
argument_list|()
return|;
case|case
name|BLOCK_SIZE
case|:
return|return
name|getBlockSize
argument_list|()
return|;
case|case
name|BLOOMN_FILTER_TYPE
case|:
return|return
name|getBloomnFilterType
argument_list|()
return|;
case|case
name|COMPRESSION_TYPE
case|:
return|return
name|getCompressionType
argument_list|()
return|;
case|case
name|DFS_REPLICATION
case|:
return|return
name|getDfsReplication
argument_list|()
return|;
case|case
name|DATA_BLOCK_ENCODING
case|:
return|return
name|getDataBlockEncoding
argument_list|()
return|;
case|case
name|KEEP_DELETED_CELLS
case|:
return|return
name|getKeepDeletedCells
argument_list|()
return|;
case|case
name|MAX_VERSIONS
case|:
return|return
name|getMaxVersions
argument_list|()
return|;
case|case
name|MIN_VERSIONS
case|:
return|return
name|getMinVersions
argument_list|()
return|;
case|case
name|SCOPE
case|:
return|return
name|getScope
argument_list|()
return|;
case|case
name|TIME_TO_LIVE
case|:
return|return
name|getTimeToLive
argument_list|()
return|;
case|case
name|BLOCK_CACHE_ENABLED
case|:
return|return
name|isBlockCacheEnabled
argument_list|()
return|;
case|case
name|CACHE_BLOOMS_ON_WRITE
case|:
return|return
name|isCacheBloomsOnWrite
argument_list|()
return|;
case|case
name|CACHE_DATA_ON_WRITE
case|:
return|return
name|isCacheDataOnWrite
argument_list|()
return|;
case|case
name|CACHE_INDEXES_ON_WRITE
case|:
return|return
name|isCacheIndexesOnWrite
argument_list|()
return|;
case|case
name|COMPRESS_TAGS
case|:
return|return
name|isCompressTags
argument_list|()
return|;
case|case
name|EVICT_BLOCKS_ON_CLOSE
case|:
return|return
name|isEvictBlocksOnClose
argument_list|()
return|;
case|case
name|IN_MEMORY
case|:
return|return
name|isInMemory
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
case|case
name|CONFIGURATION
case|:
return|return
name|isSetConfiguration
argument_list|()
return|;
case|case
name|BLOCK_SIZE
case|:
return|return
name|isSetBlockSize
argument_list|()
return|;
case|case
name|BLOOMN_FILTER_TYPE
case|:
return|return
name|isSetBloomnFilterType
argument_list|()
return|;
case|case
name|COMPRESSION_TYPE
case|:
return|return
name|isSetCompressionType
argument_list|()
return|;
case|case
name|DFS_REPLICATION
case|:
return|return
name|isSetDfsReplication
argument_list|()
return|;
case|case
name|DATA_BLOCK_ENCODING
case|:
return|return
name|isSetDataBlockEncoding
argument_list|()
return|;
case|case
name|KEEP_DELETED_CELLS
case|:
return|return
name|isSetKeepDeletedCells
argument_list|()
return|;
case|case
name|MAX_VERSIONS
case|:
return|return
name|isSetMaxVersions
argument_list|()
return|;
case|case
name|MIN_VERSIONS
case|:
return|return
name|isSetMinVersions
argument_list|()
return|;
case|case
name|SCOPE
case|:
return|return
name|isSetScope
argument_list|()
return|;
case|case
name|TIME_TO_LIVE
case|:
return|return
name|isSetTimeToLive
argument_list|()
return|;
case|case
name|BLOCK_CACHE_ENABLED
case|:
return|return
name|isSetBlockCacheEnabled
argument_list|()
return|;
case|case
name|CACHE_BLOOMS_ON_WRITE
case|:
return|return
name|isSetCacheBloomsOnWrite
argument_list|()
return|;
case|case
name|CACHE_DATA_ON_WRITE
case|:
return|return
name|isSetCacheDataOnWrite
argument_list|()
return|;
case|case
name|CACHE_INDEXES_ON_WRITE
case|:
return|return
name|isSetCacheIndexesOnWrite
argument_list|()
return|;
case|case
name|COMPRESS_TAGS
case|:
return|return
name|isSetCompressTags
argument_list|()
return|;
case|case
name|EVICT_BLOCKS_ON_CLOSE
case|:
return|return
name|isSetEvictBlocksOnClose
argument_list|()
return|;
case|case
name|IN_MEMORY
case|:
return|return
name|isSetInMemory
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|TColumnFamilyDescriptor
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|TColumnFamilyDescriptor
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|TColumnFamilyDescriptor
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_configuration
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetConfiguration
argument_list|()
decl_stmt|;
name|boolean
name|that_present_configuration
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_configuration
operator|||
name|that_present_configuration
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_configuration
operator|&&
name|that_present_configuration
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|configuration
operator|.
name|equals
argument_list|(
name|that
operator|.
name|configuration
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_blockSize
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBlockSize
argument_list|()
decl_stmt|;
name|boolean
name|that_present_blockSize
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBlockSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_blockSize
operator|||
name|that_present_blockSize
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_blockSize
operator|&&
name|that_present_blockSize
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|blockSize
operator|!=
name|that
operator|.
name|blockSize
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_bloomnFilterType
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBloomnFilterType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_bloomnFilterType
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBloomnFilterType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_bloomnFilterType
operator|||
name|that_present_bloomnFilterType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_bloomnFilterType
operator|&&
name|that_present_bloomnFilterType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|bloomnFilterType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|bloomnFilterType
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_compressionType
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCompressionType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_compressionType
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCompressionType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_compressionType
operator|||
name|that_present_compressionType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_compressionType
operator|&&
name|that_present_compressionType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|compressionType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|compressionType
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_dfsReplication
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDfsReplication
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dfsReplication
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDfsReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dfsReplication
operator|||
name|that_present_dfsReplication
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dfsReplication
operator|&&
name|that_present_dfsReplication
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|dfsReplication
operator|!=
name|that
operator|.
name|dfsReplication
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_dataBlockEncoding
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDataBlockEncoding
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dataBlockEncoding
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDataBlockEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dataBlockEncoding
operator|||
name|that_present_dataBlockEncoding
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dataBlockEncoding
operator|&&
name|that_present_dataBlockEncoding
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dataBlockEncoding
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dataBlockEncoding
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_keepDeletedCells
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetKeepDeletedCells
argument_list|()
decl_stmt|;
name|boolean
name|that_present_keepDeletedCells
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetKeepDeletedCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_keepDeletedCells
operator|||
name|that_present_keepDeletedCells
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_keepDeletedCells
operator|&&
name|that_present_keepDeletedCells
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|keepDeletedCells
operator|.
name|equals
argument_list|(
name|that
operator|.
name|keepDeletedCells
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_maxVersions
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMaxVersions
argument_list|()
decl_stmt|;
name|boolean
name|that_present_maxVersions
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMaxVersions
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_maxVersions
operator|||
name|that_present_maxVersions
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_maxVersions
operator|&&
name|that_present_maxVersions
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|maxVersions
operator|!=
name|that
operator|.
name|maxVersions
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_minVersions
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMinVersions
argument_list|()
decl_stmt|;
name|boolean
name|that_present_minVersions
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMinVersions
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_minVersions
operator|||
name|that_present_minVersions
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_minVersions
operator|&&
name|that_present_minVersions
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|minVersions
operator|!=
name|that
operator|.
name|minVersions
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_scope
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetScope
argument_list|()
decl_stmt|;
name|boolean
name|that_present_scope
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetScope
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_scope
operator|||
name|that_present_scope
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_scope
operator|&&
name|that_present_scope
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|scope
operator|!=
name|that
operator|.
name|scope
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_timeToLive
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTimeToLive
argument_list|()
decl_stmt|;
name|boolean
name|that_present_timeToLive
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTimeToLive
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_timeToLive
operator|||
name|that_present_timeToLive
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_timeToLive
operator|&&
name|that_present_timeToLive
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|timeToLive
operator|!=
name|that
operator|.
name|timeToLive
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_blockCacheEnabled
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBlockCacheEnabled
argument_list|()
decl_stmt|;
name|boolean
name|that_present_blockCacheEnabled
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBlockCacheEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_blockCacheEnabled
operator|||
name|that_present_blockCacheEnabled
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_blockCacheEnabled
operator|&&
name|that_present_blockCacheEnabled
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|blockCacheEnabled
operator|!=
name|that
operator|.
name|blockCacheEnabled
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_cacheBloomsOnWrite
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCacheBloomsOnWrite
argument_list|()
decl_stmt|;
name|boolean
name|that_present_cacheBloomsOnWrite
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCacheBloomsOnWrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_cacheBloomsOnWrite
operator|||
name|that_present_cacheBloomsOnWrite
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_cacheBloomsOnWrite
operator|&&
name|that_present_cacheBloomsOnWrite
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|cacheBloomsOnWrite
operator|!=
name|that
operator|.
name|cacheBloomsOnWrite
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_cacheDataOnWrite
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCacheDataOnWrite
argument_list|()
decl_stmt|;
name|boolean
name|that_present_cacheDataOnWrite
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCacheDataOnWrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_cacheDataOnWrite
operator|||
name|that_present_cacheDataOnWrite
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_cacheDataOnWrite
operator|&&
name|that_present_cacheDataOnWrite
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|cacheDataOnWrite
operator|!=
name|that
operator|.
name|cacheDataOnWrite
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_cacheIndexesOnWrite
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCacheIndexesOnWrite
argument_list|()
decl_stmt|;
name|boolean
name|that_present_cacheIndexesOnWrite
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCacheIndexesOnWrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_cacheIndexesOnWrite
operator|||
name|that_present_cacheIndexesOnWrite
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_cacheIndexesOnWrite
operator|&&
name|that_present_cacheIndexesOnWrite
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|cacheIndexesOnWrite
operator|!=
name|that
operator|.
name|cacheIndexesOnWrite
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_compressTags
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCompressTags
argument_list|()
decl_stmt|;
name|boolean
name|that_present_compressTags
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCompressTags
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_compressTags
operator|||
name|that_present_compressTags
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_compressTags
operator|&&
name|that_present_compressTags
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|compressTags
operator|!=
name|that
operator|.
name|compressTags
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_evictBlocksOnClose
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetEvictBlocksOnClose
argument_list|()
decl_stmt|;
name|boolean
name|that_present_evictBlocksOnClose
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetEvictBlocksOnClose
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_evictBlocksOnClose
operator|||
name|that_present_evictBlocksOnClose
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_evictBlocksOnClose
operator|&&
name|that_present_evictBlocksOnClose
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|evictBlocksOnClose
operator|!=
name|that
operator|.
name|evictBlocksOnClose
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_inMemory
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetInMemory
argument_list|()
decl_stmt|;
name|boolean
name|that_present_inMemory
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetInMemory
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_inMemory
operator|||
name|that_present_inMemory
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_inMemory
operator|&&
name|that_present_inMemory
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|inMemory
operator|!=
name|that
operator|.
name|inMemory
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetName
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetName
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|name
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetAttributes
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|attributes
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetConfiguration
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetConfiguration
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|configuration
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetBlockSize
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetBlockSize
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|blockSize
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetBloomnFilterType
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetBloomnFilterType
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|bloomnFilterType
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetCompressionType
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetCompressionType
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|compressionType
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetDfsReplication
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetDfsReplication
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|dfsReplication
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetDataBlockEncoding
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetDataBlockEncoding
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|dataBlockEncoding
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetKeepDeletedCells
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetKeepDeletedCells
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|keepDeletedCells
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetMaxVersions
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetMaxVersions
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|maxVersions
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetMinVersions
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetMinVersions
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|minVersions
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetScope
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetScope
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|scope
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetTimeToLive
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetTimeToLive
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|timeToLive
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetBlockCacheEnabled
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetBlockCacheEnabled
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|blockCacheEnabled
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetCacheBloomsOnWrite
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetCacheBloomsOnWrite
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|cacheBloomsOnWrite
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetCacheDataOnWrite
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetCacheDataOnWrite
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|cacheDataOnWrite
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetCacheIndexesOnWrite
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetCacheIndexesOnWrite
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|cacheIndexesOnWrite
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetCompressTags
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetCompressTags
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|compressTags
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetEvictBlocksOnClose
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetEvictBlocksOnClose
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|evictBlocksOnClose
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetInMemory
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetInMemory
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|inMemory
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TColumnFamilyDescriptor
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|other
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|other
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetConfiguration
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetConfiguration
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetConfiguration
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|configuration
argument_list|,
name|other
operator|.
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBlockSize
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetBlockSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBlockSize
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|blockSize
argument_list|,
name|other
operator|.
name|blockSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBloomnFilterType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetBloomnFilterType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBloomnFilterType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|bloomnFilterType
argument_list|,
name|other
operator|.
name|bloomnFilterType
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCompressionType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCompressionType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCompressionType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|compressionType
argument_list|,
name|other
operator|.
name|compressionType
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDfsReplication
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetDfsReplication
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDfsReplication
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dfsReplication
argument_list|,
name|other
operator|.
name|dfsReplication
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDataBlockEncoding
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetDataBlockEncoding
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDataBlockEncoding
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dataBlockEncoding
argument_list|,
name|other
operator|.
name|dataBlockEncoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetKeepDeletedCells
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetKeepDeletedCells
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetKeepDeletedCells
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|keepDeletedCells
argument_list|,
name|other
operator|.
name|keepDeletedCells
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMaxVersions
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|,
name|other
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMinVersions
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetMinVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMinVersions
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|minVersions
argument_list|,
name|other
operator|.
name|minVersions
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetScope
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetScope
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetScope
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|scope
argument_list|,
name|other
operator|.
name|scope
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTimeToLive
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTimeToLive
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timeToLive
argument_list|,
name|other
operator|.
name|timeToLive
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBlockCacheEnabled
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetBlockCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBlockCacheEnabled
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|blockCacheEnabled
argument_list|,
name|other
operator|.
name|blockCacheEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCacheBloomsOnWrite
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCacheBloomsOnWrite
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCacheBloomsOnWrite
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|cacheBloomsOnWrite
argument_list|,
name|other
operator|.
name|cacheBloomsOnWrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCacheDataOnWrite
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCacheDataOnWrite
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCacheDataOnWrite
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|cacheDataOnWrite
argument_list|,
name|other
operator|.
name|cacheDataOnWrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCacheIndexesOnWrite
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCacheIndexesOnWrite
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCacheIndexesOnWrite
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|cacheIndexesOnWrite
argument_list|,
name|other
operator|.
name|cacheIndexesOnWrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCompressTags
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCompressTags
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCompressTags
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|compressTags
argument_list|,
name|other
operator|.
name|compressTags
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetEvictBlocksOnClose
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetEvictBlocksOnClose
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetEvictBlocksOnClose
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|evictBlocksOnClose
argument_list|,
name|other
operator|.
name|evictBlocksOnClose
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetInMemory
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetInMemory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetInMemory
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|inMemory
argument_list|,
name|other
operator|.
name|inMemory
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"TColumnFamilyDescriptor("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|toString
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetConfiguration
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"configuration:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|configuration
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|configuration
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetBlockSize
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"blockSize:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|blockSize
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetBloomnFilterType
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"bloomnFilterType:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bloomnFilterType
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|bloomnFilterType
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetCompressionType
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"compressionType:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|compressionType
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|compressionType
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetDfsReplication
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dfsReplication:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dfsReplication
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetDataBlockEncoding
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dataBlockEncoding:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dataBlockEncoding
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dataBlockEncoding
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetKeepDeletedCells
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"keepDeletedCells:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|keepDeletedCells
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|keepDeletedCells
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMaxVersions
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"maxVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetMinVersions
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"minVersions:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|minVersions
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetScope
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"scope:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|scope
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetTimeToLive
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"timeToLive:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|timeToLive
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetBlockCacheEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"blockCacheEnabled:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|blockCacheEnabled
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetCacheBloomsOnWrite
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cacheBloomsOnWrite:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|cacheBloomsOnWrite
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetCacheDataOnWrite
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cacheDataOnWrite:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|cacheDataOnWrite
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetCacheIndexesOnWrite
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cacheIndexesOnWrite:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|cacheIndexesOnWrite
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetCompressTags
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"compressTags:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|compressTags
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetEvictBlocksOnClose
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"evictBlocksOnClose:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|evictBlocksOnClose
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetInMemory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inMemory:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|inMemory
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'name' was not present! Struct: "
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// check for sub-struct validity
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TColumnFamilyDescriptorStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
specifier|public
name|TColumnFamilyDescriptorStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TColumnFamilyDescriptorStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TColumnFamilyDescriptorStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|TColumnFamilyDescriptor
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|TColumnFamilyDescriptor
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|name
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map142
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map142
operator|.
name|size
argument_list|)
expr_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|_key143
decl_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|_val144
decl_stmt|;
for|for
control|(
name|int
name|_i145
init|=
literal|0
init|;
name|_i145
operator|<
name|_map142
operator|.
name|size
condition|;
operator|++
name|_i145
control|)
block|{
name|_key143
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val144
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key143
argument_list|,
name|_val144
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// CONFIGURATION
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map146
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|configuration
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map146
operator|.
name|size
argument_list|)
expr_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|lang
operator|.
name|String
name|_key147
decl_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|lang
operator|.
name|String
name|_val148
decl_stmt|;
for|for
control|(
name|int
name|_i149
init|=
literal|0
init|;
name|_i149
operator|<
name|_map146
operator|.
name|size
condition|;
operator|++
name|_i149
control|)
block|{
name|_key147
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val148
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|configuration
operator|.
name|put
argument_list|(
name|_key147
argument_list|,
name|_val148
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setConfigurationIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// BLOCK_SIZE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|blockSize
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBlockSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// BLOOMN_FILTER_TYPE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|bloomnFilterType
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TBloomFilterType
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setBloomnFilterTypeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// COMPRESSION_TYPE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|compressionType
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCompressionAlgorithm
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setCompressionTypeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// DFS_REPLICATION
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I16
condition|)
block|{
name|struct
operator|.
name|dfsReplication
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setDfsReplicationIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// DATA_BLOCK_ENCODING
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|dataBlockEncoding
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDataBlockEncoding
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setDataBlockEncodingIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// KEEP_DELETED_CELLS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|keepDeletedCells
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TKeepDeletedCells
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setKeepDeletedCellsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// MAX_VERSIONS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|maxVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// MIN_VERSIONS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|minVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMinVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// SCOPE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|scope
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setScopeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// TIME_TO_LIVE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|timeToLive
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimeToLiveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// BLOCK_CACHE_ENABLED
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|blockCacheEnabled
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBlockCacheEnabledIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
comment|// CACHE_BLOOMS_ON_WRITE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|cacheBloomsOnWrite
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCacheBloomsOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
comment|// CACHE_DATA_ON_WRITE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|cacheDataOnWrite
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCacheDataOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|17
case|:
comment|// CACHE_INDEXES_ON_WRITE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|cacheIndexesOnWrite
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCacheIndexesOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|18
case|:
comment|// COMPRESS_TAGS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|compressTags
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCompressTagsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|19
case|:
comment|// EVICT_BLOCKS_ON_CLOSE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|evictBlocksOnClose
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setEvictBlocksOnCloseIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|20
case|:
comment|// IN_MEMORY
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|inMemory
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setInMemoryIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|TColumnFamilyDescriptor
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|_iter150
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter150
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter150
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|configuration
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetConfiguration
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CONFIGURATION_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|configuration
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|_iter151
range|:
name|struct
operator|.
name|configuration
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter151
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter151
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockSize
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOCK_SIZE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|blockSize
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|bloomnFilterType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetBloomnFilterType
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOOMN_FILTER_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|bloomnFilterType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|compressionType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetCompressionType
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COMPRESSION_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|compressionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDfsReplication
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DFS_REPLICATION_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|struct
operator|.
name|dfsReplication
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|dataBlockEncoding
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetDataBlockEncoding
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DATA_BLOCK_ENCODING_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|dataBlockEncoding
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|keepDeletedCells
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetKeepDeletedCells
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|KEEP_DELETED_CELLS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|keepDeletedCells
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_VERSIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMinVersions
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MIN_VERSIONS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|minVersions
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetScope
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SCOPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|scope
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimeToLive
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TIME_TO_LIVE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|timeToLive
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockCacheEnabled
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOCK_CACHE_ENABLED_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|blockCacheEnabled
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheBloomsOnWrite
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CACHE_BLOOMS_ON_WRITE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|cacheBloomsOnWrite
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheDataOnWrite
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CACHE_DATA_ON_WRITE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|cacheDataOnWrite
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheIndexesOnWrite
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CACHE_INDEXES_ON_WRITE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|cacheIndexesOnWrite
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompressTags
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COMPRESS_TAGS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|compressTags
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetEvictBlocksOnClose
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|EVICT_BLOCKS_ON_CLOSE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|evictBlocksOnClose
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetInMemory
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IN_MEMORY_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|inMemory
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TColumnFamilyDescriptorTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
specifier|public
name|TColumnFamilyDescriptorTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TColumnFamilyDescriptorTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TColumnFamilyDescriptorTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|TColumnFamilyDescriptor
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TColumnFamilyDescriptor
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|name
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetConfiguration
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockSize
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBloomnFilterType
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompressionType
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDfsReplication
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDataBlockEncoding
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetKeepDeletedCells
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMinVersions
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetScope
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimeToLive
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockCacheEnabled
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|12
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheBloomsOnWrite
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|13
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheDataOnWrite
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|14
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheIndexesOnWrite
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|15
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompressTags
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|16
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetEvictBlocksOnClose
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|17
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetInMemory
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|18
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|19
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|_iter152
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter152
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter152
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetConfiguration
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|configuration
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|_iter153
range|:
name|struct
operator|.
name|configuration
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter153
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter153
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockSize
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|blockSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBloomnFilterType
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|bloomnFilterType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompressionType
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|compressionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDfsReplication
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI16
argument_list|(
name|struct
operator|.
name|dfsReplication
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDataBlockEncoding
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|dataBlockEncoding
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetKeepDeletedCells
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|keepDeletedCells
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|maxVersions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetMinVersions
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|minVersions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetScope
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|scope
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTimeToLive
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|timeToLive
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockCacheEnabled
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|blockCacheEnabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheBloomsOnWrite
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|cacheBloomsOnWrite
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheDataOnWrite
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|cacheDataOnWrite
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCacheIndexesOnWrite
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|cacheIndexesOnWrite
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCompressTags
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|compressTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetEvictBlocksOnClose
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|evictBlocksOnClose
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetInMemory
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|inMemory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TColumnFamilyDescriptor
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|struct
operator|.
name|name
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|19
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map154
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map154
operator|.
name|size
argument_list|)
expr_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|_key155
decl_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|_val156
decl_stmt|;
for|for
control|(
name|int
name|_i157
init|=
literal|0
init|;
name|_i157
operator|<
name|_map154
operator|.
name|size
condition|;
operator|++
name|_i157
control|)
block|{
name|_key155
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val156
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key155
argument_list|,
name|_val156
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map158
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|configuration
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map158
operator|.
name|size
argument_list|)
expr_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|lang
operator|.
name|String
name|_key159
decl_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|lang
operator|.
name|String
name|_val160
decl_stmt|;
for|for
control|(
name|int
name|_i161
init|=
literal|0
init|;
name|_i161
operator|<
name|_map158
operator|.
name|size
condition|;
operator|++
name|_i161
control|)
block|{
name|_key159
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val160
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|configuration
operator|.
name|put
argument_list|(
name|_key159
argument_list|,
name|_val160
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setConfigurationIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|blockSize
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBlockSizeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|bloomnFilterType
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TBloomFilterType
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setBloomnFilterTypeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|compressionType
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCompressionAlgorithm
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setCompressionTypeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|struct
operator|.
name|dfsReplication
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setDfsReplicationIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|struct
operator|.
name|dataBlockEncoding
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDataBlockEncoding
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setDataBlockEncodingIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|7
argument_list|)
condition|)
block|{
name|struct
operator|.
name|keepDeletedCells
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TKeepDeletedCells
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setKeepDeletedCellsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|)
block|{
name|struct
operator|.
name|maxVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMaxVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|9
argument_list|)
condition|)
block|{
name|struct
operator|.
name|minVersions
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setMinVersionsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|10
argument_list|)
condition|)
block|{
name|struct
operator|.
name|scope
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setScopeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|11
argument_list|)
condition|)
block|{
name|struct
operator|.
name|timeToLive
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTimeToLiveIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|12
argument_list|)
condition|)
block|{
name|struct
operator|.
name|blockCacheEnabled
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBlockCacheEnabledIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|13
argument_list|)
condition|)
block|{
name|struct
operator|.
name|cacheBloomsOnWrite
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCacheBloomsOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|14
argument_list|)
condition|)
block|{
name|struct
operator|.
name|cacheDataOnWrite
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCacheDataOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|15
argument_list|)
condition|)
block|{
name|struct
operator|.
name|cacheIndexesOnWrite
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCacheIndexesOnWriteIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|16
argument_list|)
condition|)
block|{
name|struct
operator|.
name|compressTags
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setCompressTagsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|17
argument_list|)
condition|)
block|{
name|struct
operator|.
name|evictBlocksOnClose
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setEvictBlocksOnCloseIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|18
argument_list|)
condition|)
block|{
name|struct
operator|.
name|inMemory
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setInMemoryIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
end_class

end_unit

