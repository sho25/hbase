begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_READONLY_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_READONLY_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|appendFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|columnFamilyDescriptorFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|compareOpFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|deleteFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|deletesFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|getFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|getsFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|incrementFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|namespaceDescriptorFromHBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|namespaceDescriptorFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|namespaceDescriptorsFromHBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|putFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|putsFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|resultFromHBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|resultsFromHBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|rowMutationsFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|scanFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|splitKeyFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|tableDescriptorFromHBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|tableDescriptorFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|tableDescriptorsFromHBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|tableNameFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|tableNamesFromHBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|byteBufferToByteArray
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|HBaseServiceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TAppend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|THBaseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|THRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TNamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TRowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is a glue object that connects Thrift RPC calls to the HBase client API primarily  * defined in the Table interface.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|ThriftHBaseServiceHandler
extends|extends
name|HBaseServiceHandler
implements|implements
name|THBaseService
operator|.
name|Iface
block|{
comment|// TODO: Size of pool configuraple
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThriftHBaseServiceHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// nextScannerId and scannerMap are used to manage scanner state
comment|// TODO: Cleanup thread for Scanners, Scanner id wrap
specifier|private
specifier|final
name|AtomicInteger
name|nextScannerId
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|ResultScanner
argument_list|>
name|scannerMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IOException
name|ioe
init|=
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|isReadOnly
decl_stmt|;
specifier|private
specifier|static
class|class
name|TIOErrorWithCause
extends|extends
name|TIOError
block|{
specifier|private
name|Throwable
name|cause
decl_stmt|;
specifier|public
name|TIOErrorWithCause
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Throwable
name|getCause
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
operator|&&
name|other
operator|instanceof
name|TIOErrorWithCause
condition|)
block|{
name|Throwable
name|otherCause
init|=
operator|(
operator|(
name|TIOErrorWithCause
operator|)
name|other
operator|)
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|otherCause
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getCause
argument_list|()
operator|.
name|equals
argument_list|(
name|otherCause
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|otherCause
operator|==
literal|null
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|cause
operator|!=
literal|null
condition|?
name|cause
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|public
name|ThriftHBaseServiceHandler
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|UserProvider
name|userProvider
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
expr_stmt|;
name|isReadOnly
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|THRIFT_READONLY_ENABLED
argument_list|,
name|THRIFT_READONLY_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Table
name|getTable
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
try|try
block|{
return|return
name|connectionCache
operator|.
name|getTable
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RegionLocator
name|getLocator
parameter_list|(
name|ByteBuffer
name|tableName
parameter_list|)
block|{
try|try
block|{
return|return
name|connectionCache
operator|.
name|getRegionLocator
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|closeTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|TIOError
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|TIOError
name|getTIOError
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|TIOError
name|err
init|=
operator|new
name|TIOErrorWithCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|err
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|err
return|;
block|}
comment|/**    * Assigns a unique ID to the scanner and adds the mapping to an internal HashMap.    * @param scanner to add    * @return Id for this Scanner    */
specifier|private
name|int
name|addScanner
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|)
block|{
name|int
name|id
init|=
name|nextScannerId
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|scannerMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**    * Returns the Scanner associated with the specified Id.    * @param id of the Scanner to get    * @return a Scanner, or null if the Id is invalid    */
specifier|private
name|ResultScanner
name|getScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Removes the scanner associated with the specified ID from the internal HashMap.    * @param id of the Scanner to remove    * @return the removed Scanner, or<code>null</code> if the Id is invalid    */
specifier|protected
name|ResultScanner
name|removeScanner
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|scannerMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TGet
name|get
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|htable
operator|.
name|exists
argument_list|(
name|getFromThrift
argument_list|(
name|get
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Boolean
argument_list|>
name|existsAll
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|List
argument_list|<
name|TGet
argument_list|>
name|gets
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
index|[]
name|exists
init|=
name|htable
operator|.
name|exists
argument_list|(
name|getsFromThrift
argument_list|(
name|gets
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|exists
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|boolean
name|exist
range|:
name|exists
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|exist
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TResult
name|get
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TGet
name|get
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|resultFromHBase
argument_list|(
name|htable
operator|.
name|get
argument_list|(
name|getFromThrift
argument_list|(
name|get
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TResult
argument_list|>
name|getMultiple
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|List
argument_list|<
name|TGet
argument_list|>
name|gets
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|resultsFromHBase
argument_list|(
name|htable
operator|.
name|get
argument_list|(
name|getsFromThrift
argument_list|(
name|gets
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TPut
name|put
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|put
argument_list|(
name|putFromThrift
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|,
name|ByteBuffer
name|qualifier
parameter_list|,
name|ByteBuffer
name|value
parameter_list|,
name|TPut
name|put
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|Table
operator|.
name|CheckAndMutateBuilder
name|builder
init|=
name|htable
operator|.
name|checkAndMutate
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|row
argument_list|)
argument_list|,
name|byteBufferToByteArray
argument_list|(
name|family
argument_list|)
argument_list|)
operator|.
name|qualifier
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|qualifier
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|builder
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenPut
argument_list|(
name|putFromThrift
argument_list|(
name|put
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|builder
operator|.
name|ifEquals
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|thenPut
argument_list|(
name|putFromThrift
argument_list|(
name|put
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|putMultiple
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|List
argument_list|<
name|TPut
argument_list|>
name|puts
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|put
argument_list|(
name|putsFromThrift
argument_list|(
name|puts
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteSingle
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TDelete
name|deleteSingle
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|delete
argument_list|(
name|deleteFromThrift
argument_list|(
name|deleteSingle
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TDelete
argument_list|>
name|deleteMultiple
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|List
argument_list|<
name|TDelete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|delete
argument_list|(
name|deletesFromThrift
argument_list|(
name|deletes
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndMutate
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|,
name|ByteBuffer
name|qualifier
parameter_list|,
name|TCompareOperator
name|compareOp
parameter_list|,
name|ByteBuffer
name|value
parameter_list|,
name|TRowMutations
name|rowMutations
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
init|)
block|{
return|return
name|htable
operator|.
name|checkAndMutate
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|row
argument_list|)
argument_list|,
name|byteBufferToByteArray
argument_list|(
name|family
argument_list|)
argument_list|)
operator|.
name|qualifier
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|qualifier
argument_list|)
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|compareOpFromThrift
argument_list|(
name|compareOp
argument_list|)
argument_list|,
name|byteBufferToByteArray
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|thenMutate
argument_list|(
name|rowMutationsFromThrift
argument_list|(
name|rowMutations
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndDelete
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|ByteBuffer
name|family
parameter_list|,
name|ByteBuffer
name|qualifier
parameter_list|,
name|ByteBuffer
name|value
parameter_list|,
name|TDelete
name|deleteSingle
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|Table
operator|.
name|CheckAndMutateBuilder
name|mutateBuilder
init|=
name|htable
operator|.
name|checkAndMutate
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|row
argument_list|)
argument_list|,
name|byteBufferToByteArray
argument_list|(
name|family
argument_list|)
argument_list|)
operator|.
name|qualifier
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|qualifier
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|mutateBuilder
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenDelete
argument_list|(
name|deleteFromThrift
argument_list|(
name|deleteSingle
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mutateBuilder
operator|.
name|ifEquals
argument_list|(
name|byteBufferToByteArray
argument_list|(
name|value
argument_list|)
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|deleteFromThrift
argument_list|(
name|deleteSingle
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TResult
name|increment
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TIncrement
name|increment
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|resultFromHBase
argument_list|(
name|htable
operator|.
name|increment
argument_list|(
name|incrementFromThrift
argument_list|(
name|increment
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TResult
name|append
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TAppend
name|append
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|resultFromHBase
argument_list|(
name|htable
operator|.
name|append
argument_list|(
name|appendFromThrift
argument_list|(
name|append
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|openScanner
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TScan
name|scan
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|ResultScanner
name|resultScanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resultScanner
operator|=
name|htable
operator|.
name|getScanner
argument_list|(
name|scanFromThrift
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
return|return
name|addScanner
argument_list|(
name|resultScanner
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TResult
argument_list|>
name|getScannerRows
parameter_list|(
name|int
name|scannerId
parameter_list|,
name|int
name|numRows
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TIllegalArgument
throws|,
name|TException
block|{
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|TIllegalArgument
name|ex
init|=
operator|new
name|TIllegalArgument
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
literal|"Invalid scanner Id"
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
try|try
block|{
name|connectionCache
operator|.
name|updateConnectionAccessTime
argument_list|()
expr_stmt|;
return|return
name|resultsFromHBase
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|numRows
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TResult
argument_list|>
name|getScannerResults
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TScan
name|scan
parameter_list|,
name|int
name|numRows
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scanner
operator|=
name|htable
operator|.
name|getScanner
argument_list|(
name|scanFromThrift
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultsFromHBase
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|numRows
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeScanner
parameter_list|(
name|int
name|scannerId
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TIllegalArgument
throws|,
name|TException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scannerClose: id="
operator|+
name|scannerId
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|scannerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"scanner ID is invalid"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|TIllegalArgument
name|ex
init|=
operator|new
name|TIllegalArgument
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setMessage
argument_list|(
literal|"Invalid scanner Id"
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|removeScanner
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRow
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|TRowMutations
name|rowMutations
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|checkReadOnlyMode
argument_list|()
expr_stmt|;
name|Table
name|htable
init|=
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|mutateRow
argument_list|(
name|rowMutationsFromThrift
argument_list|(
name|rowMutations
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTable
argument_list|(
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|THRegionLocation
argument_list|>
name|getAllRegionLocations
parameter_list|(
name|ByteBuffer
name|table
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|RegionLocator
name|locator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|locator
operator|=
name|getLocator
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|ThriftUtilities
operator|.
name|regionLocationsFromHBase
argument_list|(
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|locator
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|locator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't close the locator."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|THRegionLocation
name|getRegionLocation
parameter_list|(
name|ByteBuffer
name|table
parameter_list|,
name|ByteBuffer
name|row
parameter_list|,
name|boolean
name|reload
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|RegionLocator
name|locator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|locator
operator|=
name|getLocator
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowBytes
init|=
name|byteBufferToByteArray
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|HRegionLocation
name|hrl
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|rowBytes
argument_list|,
name|reload
argument_list|)
decl_stmt|;
return|return
name|ThriftUtilities
operator|.
name|regionLocationFromHBase
argument_list|(
name|hrl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|locator
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|locator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't close the locator."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkReadOnlyMode
parameter_list|()
throws|throws
name|TIOError
block|{
if|if
condition|(
name|isReadOnly
argument_list|()
condition|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|isReadOnly
return|;
block|}
annotation|@
name|Override
specifier|public
name|TTableDescriptor
name|getTableDescriptor
parameter_list|(
name|TTableName
name|table
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|tableName
init|=
name|ThriftUtilities
operator|.
name|tableNameFromThrift
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|TableDescriptor
name|tableDescriptor
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|tableDescriptorFromHBase
argument_list|(
name|tableDescriptor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|getTableDescriptors
parameter_list|(
name|List
argument_list|<
name|TTableName
argument_list|>
name|tables
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
name|ThriftUtilities
operator|.
name|tableNamesFromThrift
argument_list|(
name|tables
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDescriptors
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableDescriptors
argument_list|(
name|tableNames
argument_list|)
decl_stmt|;
return|return
name|tableDescriptorsFromHBase
argument_list|(
name|tableDescriptors
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|TTableName
name|tTableName
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|tableName
init|=
name|tableNameFromThrift
argument_list|(
name|tTableName
argument_list|)
decl_stmt|;
return|return
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|getTableDescriptorsByPattern
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|Pattern
name|pattern
init|=
operator|(
name|regex
operator|==
literal|null
condition|?
literal|null
else|:
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
operator|)
decl_stmt|;
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDescriptors
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableDescriptors
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
decl_stmt|;
return|return
name|tableDescriptorsFromHBase
argument_list|(
name|tableDescriptors
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|getTableDescriptorsByNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|descriptors
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|tableDescriptorsFromHBase
argument_list|(
name|descriptors
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TTableName
argument_list|>
name|getTableNamesByPattern
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|Pattern
name|pattern
init|=
operator|(
name|regex
operator|==
literal|null
condition|?
literal|null
else|:
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
operator|)
decl_stmt|;
name|TableName
index|[]
name|tableNames
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableNames
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
decl_stmt|;
return|return
name|tableNamesFromHBase
argument_list|(
name|tableNames
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TTableName
argument_list|>
name|getTableNamesByNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
index|[]
name|tableNames
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableNamesByNamespace
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|tableNamesFromHBase
argument_list|(
name|tableNames
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|TTableDescriptor
name|desc
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|splitKeys
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableDescriptor
name|descriptor
init|=
name|tableDescriptorFromThrift
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|split
init|=
name|splitKeyFromThrift
argument_list|(
name|splitKeys
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|descriptor
argument_list|,
name|split
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTable
parameter_list|(
name|TTableName
name|tableName
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|truncateTable
parameter_list|(
name|TTableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|truncateTable
argument_list|(
name|table
argument_list|,
name|preserveSplits
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enableTable
parameter_list|(
name|TTableName
name|tableName
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|disableTable
parameter_list|(
name|TTableName
name|tableName
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|TTableName
name|tableName
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableEnabled
argument_list|(
name|table
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableDisabled
parameter_list|(
name|TTableName
name|tableName
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableDisabled
argument_list|(
name|table
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableAvailable
parameter_list|(
name|TTableName
name|tableName
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableAvailable
argument_list|(
name|table
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableAvailableWithSplit
parameter_list|(
name|TTableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|splitKeys
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"isTableAvailableWithSplit not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addColumnFamily
parameter_list|(
name|TTableName
name|tableName
parameter_list|,
name|TColumnFamilyDescriptor
name|column
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|columnFamilyDescriptor
init|=
name|columnFamilyDescriptorFromThrift
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|addColumnFamily
argument_list|(
name|table
argument_list|,
name|columnFamilyDescriptor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteColumnFamily
parameter_list|(
name|TTableName
name|tableName
parameter_list|,
name|ByteBuffer
name|column
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteColumnFamily
argument_list|(
name|table
argument_list|,
name|column
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyColumnFamily
parameter_list|(
name|TTableName
name|tableName
parameter_list|,
name|TColumnFamilyDescriptor
name|column
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableName
name|table
init|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|columnFamilyDescriptor
init|=
name|columnFamilyDescriptorFromThrift
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|modifyColumnFamily
argument_list|(
name|table
argument_list|,
name|columnFamilyDescriptor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyTable
parameter_list|(
name|TTableDescriptor
name|desc
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|TableDescriptor
name|descriptor
init|=
name|tableDescriptorFromThrift
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|modifyTable
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createNamespace
parameter_list|(
name|TNamespaceDescriptor
name|namespaceDesc
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|NamespaceDescriptor
name|descriptor
init|=
name|namespaceDescriptorFromThrift
argument_list|(
name|namespaceDesc
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyNamespace
parameter_list|(
name|TNamespaceDescriptor
name|namespaceDesc
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|NamespaceDescriptor
name|descriptor
init|=
name|namespaceDescriptorFromThrift
argument_list|(
name|namespaceDesc
argument_list|)
decl_stmt|;
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|modifyNamespace
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteNamespace
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TNamespaceDescriptor
name|getNamespaceDescriptor
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|NamespaceDescriptor
name|descriptor
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|getNamespaceDescriptor
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|namespaceDescriptorFromHBase
argument_list|(
name|descriptor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listNamespaces
parameter_list|()
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|String
index|[]
name|namespaces
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|listNamespaces
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|namespaces
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|namespaces
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TNamespaceDescriptor
argument_list|>
name|listNamespaceDescriptors
parameter_list|()
throws|throws
name|TIOError
throws|,
name|TException
block|{
try|try
block|{
name|NamespaceDescriptor
index|[]
name|descriptors
init|=
name|connectionCache
operator|.
name|getAdmin
argument_list|()
operator|.
name|listNamespaceDescriptors
argument_list|()
decl_stmt|;
return|return
name|namespaceDescriptorsFromHBase
argument_list|(
name|descriptors
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|getTIOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

