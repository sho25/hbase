begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.12.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
package|;
end_package

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|,
literal|"unused"
block|}
argument_list|)
comment|/**  * Used to perform Increment operations for a single row.  *   * You can specify how this Increment should be written to the write-ahead Log (WAL)  * by changing the durability. If you don't provide durability, it defaults to  * column family's default setting for durability.  */
annotation|@
name|javax
operator|.
name|annotation
operator|.
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.12.0)"
argument_list|,
name|date
operator|=
literal|"2019-02-22"
argument_list|)
specifier|public
class|class
name|TIncrement
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|TIncrement
argument_list|,
name|TIncrement
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|TIncrement
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"TIncrement"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROW_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMNS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ATTRIBUTES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DURABILITY_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"durability"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CELL_VISIBILITY_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"cellVisibility"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|RETURN_RESULTS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"returnResults"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|STANDARD_SCHEME_FACTORY
init|=
operator|new
name|TIncrementStandardSchemeFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
name|TUPLE_SCHEME_FACTORY
init|=
operator|new
name|TIncrementTupleSchemeFactory
argument_list|()
decl_stmt|;
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|row
decl_stmt|;
comment|// required
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|columns
decl_stmt|;
comment|// required
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|attributes
decl_stmt|;
comment|// optional
comment|/**    *     * @see TDurability    */
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TDurability
name|durability
decl_stmt|;
comment|// optional
specifier|public
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TCellVisibility
name|cellVisibility
decl_stmt|;
comment|// optional
specifier|public
name|boolean
name|returnResults
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|ROW
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"row"
argument_list|)
block|,
name|COLUMNS
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"columns"
argument_list|)
block|,
name|ATTRIBUTES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"attributes"
argument_list|)
block|,
comment|/**      *       * @see TDurability      */
name|DURABILITY
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"durability"
argument_list|)
block|,
name|CELL_VISIBILITY
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"cellVisibility"
argument_list|)
block|,
name|RETURN_RESULTS
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"returnResults"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|java
operator|.
name|util
operator|.
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// ROW
return|return
name|ROW
return|;
case|case
literal|2
case|:
comment|// COLUMNS
return|return
name|COLUMNS
return|;
case|case
literal|4
case|:
comment|// ATTRIBUTES
return|return
name|ATTRIBUTES
return|;
case|case
literal|5
case|:
comment|// DURABILITY
return|return
name|DURABILITY
return|;
case|case
literal|6
case|:
comment|// CELL_VISIBILITY
return|return
name|CELL_VISIBILITY
return|;
case|case
literal|7
case|:
comment|// RETURN_RESULTS
return|return
name|RETURN_RESULTS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|java
operator|.
name|lang
operator|.
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__RETURNRESULTS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|ATTRIBUTES
block|,
name|_Fields
operator|.
name|DURABILITY
block|,
name|_Fields
operator|.
name|CELL_VISIBILITY
block|,
name|_Fields
operator|.
name|RETURN_RESULTS
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROW
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"row"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMNS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columns"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TColumnIncrement
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ATTRIBUTES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"attributes"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DURABILITY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"durability"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|TDurability
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CELL_VISIBILITY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"cellVisibility"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TCellVisibility
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|RETURN_RESULTS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"returnResults"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|TIncrement
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TIncrement
parameter_list|()
block|{   }
specifier|public
name|TIncrement
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|row
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|columns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|TIncrement
parameter_list|(
name|TIncrement
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetRow
argument_list|()
condition|)
block|{
name|this
operator|.
name|row
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|other
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|__this__columns
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|(
name|other
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TColumnIncrement
name|other_element
range|:
name|other
operator|.
name|columns
control|)
block|{
name|__this__columns
operator|.
name|add
argument_list|(
operator|new
name|TColumnIncrement
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|=
name|__this__columns
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|__this__attributes
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
argument_list|(
name|other
operator|.
name|attributes
argument_list|)
decl_stmt|;
name|this
operator|.
name|attributes
operator|=
name|__this__attributes
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|this
operator|.
name|durability
operator|=
name|other
operator|.
name|durability
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetCellVisibility
argument_list|()
condition|)
block|{
name|this
operator|.
name|cellVisibility
operator|=
operator|new
name|TCellVisibility
argument_list|(
name|other
operator|.
name|cellVisibility
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|returnResults
operator|=
name|other
operator|.
name|returnResults
expr_stmt|;
block|}
specifier|public
name|TIncrement
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|TIncrement
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|durability
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cellVisibility
operator|=
literal|null
expr_stmt|;
name|setReturnResultsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|returnResults
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|rightSize
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|row
operator|.
name|array
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|bufferForRow
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|row
argument_list|)
return|;
block|}
specifier|public
name|TIncrement
name|setRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
operator|==
literal|null
condition|?
operator|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|)
literal|null
else|:
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|row
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TIncrement
name|setRow
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|copyBinary
argument_list|(
name|row
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetRow
parameter_list|()
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field row is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRowIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|row
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|columns
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TColumnIncrement
argument_list|>
name|getColumnsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|columns
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|columns
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColumns
parameter_list|(
name|TColumnIncrement
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
specifier|public
name|TIncrement
name|setColumns
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetColumns
parameter_list|()
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columns is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columns
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|attributes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToAttributes
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|key
parameter_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
return|;
block|}
specifier|public
name|TIncrement
name|setAttributes
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetAttributes
parameter_list|()
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field attributes is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAttributes
parameter_list|()
block|{
return|return
name|this
operator|.
name|attributes
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAttributesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    *     * @see TDurability    */
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|TDurability
name|getDurability
parameter_list|()
block|{
return|return
name|this
operator|.
name|durability
return|;
block|}
comment|/**    *     * @see TDurability    */
specifier|public
name|TIncrement
name|setDurability
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TDurability
name|durability
parameter_list|)
block|{
name|this
operator|.
name|durability
operator|=
name|durability
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetDurability
parameter_list|()
block|{
name|this
operator|.
name|durability
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field durability is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDurability
parameter_list|()
block|{
return|return
name|this
operator|.
name|durability
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDurabilityIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|durability
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|TCellVisibility
name|getCellVisibility
parameter_list|()
block|{
return|return
name|this
operator|.
name|cellVisibility
return|;
block|}
specifier|public
name|TIncrement
name|setCellVisibility
parameter_list|(
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TCellVisibility
name|cellVisibility
parameter_list|)
block|{
name|this
operator|.
name|cellVisibility
operator|=
name|cellVisibility
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetCellVisibility
parameter_list|()
block|{
name|this
operator|.
name|cellVisibility
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field cellVisibility is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCellVisibility
parameter_list|()
block|{
return|return
name|this
operator|.
name|cellVisibility
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setCellVisibilityIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|cellVisibility
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isReturnResults
parameter_list|()
block|{
return|return
name|this
operator|.
name|returnResults
return|;
block|}
specifier|public
name|TIncrement
name|setReturnResults
parameter_list|(
name|boolean
name|returnResults
parameter_list|)
block|{
name|this
operator|.
name|returnResults
operator|=
name|returnResults
expr_stmt|;
name|setReturnResultsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|unsetReturnResults
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__RETURNRESULTS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field returnResults is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetReturnResults
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__RETURNRESULTS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setReturnResultsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__RETURNRESULTS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ROW
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|setRow
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setRow
argument_list|(
operator|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|COLUMNS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumns
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAttributes
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DURABILITY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDurability
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDurability
argument_list|(
operator|(
name|TDurability
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CELL_VISIBILITY
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCellVisibility
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCellVisibility
argument_list|(
operator|(
name|TCellVisibility
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RETURN_RESULTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetReturnResults
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setReturnResults
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ROW
case|:
return|return
name|getRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|getColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|getAttributes
argument_list|()
return|;
case|case
name|DURABILITY
case|:
return|return
name|getDurability
argument_list|()
return|;
case|case
name|CELL_VISIBILITY
case|:
return|return
name|getCellVisibility
argument_list|()
return|;
case|case
name|RETURN_RESULTS
case|:
return|return
name|isReturnResults
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|ROW
case|:
return|return
name|isSetRow
argument_list|()
return|;
case|case
name|COLUMNS
case|:
return|return
name|isSetColumns
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|isSetAttributes
argument_list|()
return|;
case|case
name|DURABILITY
case|:
return|return
name|isSetDurability
argument_list|()
return|;
case|case
name|CELL_VISIBILITY
case|:
return|return
name|isSetCellVisibility
argument_list|()
return|;
case|case
name|RETURN_RESULTS
case|:
return|return
name|isSetReturnResults
argument_list|()
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|TIncrement
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|TIncrement
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|TIncrement
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|that
condition|)
return|return
literal|true
return|;
name|boolean
name|this_present_row
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
name|boolean
name|that_present_row
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_row
operator|||
name|that_present_row
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_row
operator|&&
name|that_present_row
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|row
operator|.
name|equals
argument_list|(
name|that
operator|.
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columns
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columns
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columns
operator|||
name|that_present_columns
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columns
operator|&&
name|that_present_columns
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columns
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columns
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_attributes
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
name|boolean
name|that_present_attributes
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_attributes
operator|||
name|that_present_attributes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_attributes
operator|&&
name|that_present_attributes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|attributes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attributes
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_durability
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDurability
argument_list|()
decl_stmt|;
name|boolean
name|that_present_durability
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDurability
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_durability
operator|||
name|that_present_durability
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_durability
operator|&&
name|that_present_durability
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|durability
operator|.
name|equals
argument_list|(
name|that
operator|.
name|durability
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_cellVisibility
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCellVisibility
argument_list|()
decl_stmt|;
name|boolean
name|that_present_cellVisibility
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCellVisibility
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_cellVisibility
operator|||
name|that_present_cellVisibility
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_cellVisibility
operator|&&
name|that_present_cellVisibility
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|cellVisibility
operator|.
name|equals
argument_list|(
name|that
operator|.
name|cellVisibility
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_returnResults
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetReturnResults
argument_list|()
decl_stmt|;
name|boolean
name|that_present_returnResults
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetReturnResults
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_returnResults
operator|||
name|that_present_returnResults
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_returnResults
operator|&&
name|that_present_returnResults
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|returnResults
operator|!=
name|that
operator|.
name|returnResults
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|1
decl_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetRow
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|row
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetColumns
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|columns
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetAttributes
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|attributes
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetDurability
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetDurability
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|durability
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetCellVisibility
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetCellVisibility
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
name|cellVisibility
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|isSetReturnResults
argument_list|()
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
if|if
condition|(
name|isSetReturnResults
argument_list|()
condition|)
name|hashCode
operator|=
name|hashCode
operator|*
literal|8191
operator|+
operator|(
operator|(
name|returnResults
operator|)
condition|?
literal|131071
else|:
literal|524287
operator|)
expr_stmt|;
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TIncrement
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRow
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRow
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|other
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumns
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetColumns
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumns
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columns
argument_list|,
name|other
operator|.
name|columns
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAttributes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|attributes
argument_list|,
name|other
operator|.
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDurability
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetDurability
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDurability
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|durability
argument_list|,
name|other
operator|.
name|durability
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCellVisibility
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetCellVisibility
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCellVisibility
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|cellVisibility
argument_list|,
name|other
operator|.
name|cellVisibility
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetReturnResults
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetReturnResults
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetReturnResults
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|returnResults
argument_list|,
name|other
operator|.
name|returnResults
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|iprot
argument_list|)
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|scheme
argument_list|(
name|oprot
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|toString
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|StringBuilder
name|sb
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|StringBuilder
argument_list|(
literal|"TIncrement("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"row:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|row
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|toString
argument_list|(
name|this
operator|.
name|row
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columns:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columns
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetAttributes
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"attributes:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetDurability
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"durability:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|durability
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|durability
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetCellVisibility
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cellVisibility:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cellVisibility
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|cellVisibility
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetReturnResults
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"returnResults:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|returnResults
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'row' was not present! Struct: "
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'columns' was not present! Struct: "
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// check for sub-struct validity
if|if
condition|(
name|cellVisibility
operator|!=
literal|null
condition|)
block|{
name|cellVisibility
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TIncrementStandardSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
specifier|public
name|TIncrementStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TIncrementStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TIncrementStandardScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
argument_list|<
name|TIncrement
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|TIncrement
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// ROW
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// COLUMNS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list70
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|(
name|_list70
operator|.
name|size
argument_list|)
expr_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TColumnIncrement
name|_elem71
decl_stmt|;
for|for
control|(
name|int
name|_i72
init|=
literal|0
init|;
name|_i72
operator|<
name|_list70
operator|.
name|size
condition|;
operator|++
name|_i72
control|)
block|{
name|_elem71
operator|=
operator|new
name|TColumnIncrement
argument_list|()
expr_stmt|;
name|_elem71
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem71
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// ATTRIBUTES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map73
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map73
operator|.
name|size
argument_list|)
expr_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|_key74
decl_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|_val75
decl_stmt|;
for|for
control|(
name|int
name|_i76
init|=
literal|0
init|;
name|_i76
operator|<
name|_map73
operator|.
name|size
condition|;
operator|++
name|_i76
control|)
block|{
name|_key74
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val75
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key74
argument_list|,
name|_val75
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// DURABILITY
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|durability
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDurability
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setDurabilityIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// CELL_VISIBILITY
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|cellVisibility
operator|=
operator|new
name|TCellVisibility
argument_list|()
expr_stmt|;
name|struct
operator|.
name|cellVisibility
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setCellVisibilityIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// RETURN_RESULTS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|BOOL
condition|)
block|{
name|struct
operator|.
name|returnResults
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setReturnResultsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|TIncrement
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|row
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROW_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|columns
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMNS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TColumnIncrement
name|_iter77
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|_iter77
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ATTRIBUTES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|_iter78
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter78
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter78
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|durability
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DURABILITY_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|durability
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|cellVisibility
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetCellVisibility
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CELL_VISIBILITY_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|cellVisibility
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetReturnResults
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|RETURN_RESULTS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|returnResults
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TIncrementTupleSchemeFactory
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
block|{
specifier|public
name|TIncrementTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TIncrementTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TIncrementTupleScheme
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
argument_list|<
name|TIncrement
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TIncrement
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|oprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|struct
operator|.
name|row
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TColumnIncrement
name|_iter79
range|:
name|struct
operator|.
name|columns
control|)
block|{
name|_iter79
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
name|java
operator|.
name|util
operator|.
name|BitSet
name|optionals
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCellVisibility
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetReturnResults
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
name|_iter80
range|:
name|struct
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter80
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBinary
argument_list|(
name|_iter80
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|durability
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetCellVisibility
argument_list|()
condition|)
block|{
name|struct
operator|.
name|cellVisibility
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetReturnResults
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeBool
argument_list|(
name|struct
operator|.
name|returnResults
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TIncrement
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
name|iprot
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|struct
operator|.
name|row
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setRowIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list81
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|columns
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|(
name|_list81
operator|.
name|size
argument_list|)
expr_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|TColumnIncrement
name|_elem82
decl_stmt|;
for|for
control|(
name|int
name|_i83
init|=
literal|0
init|;
name|_i83
operator|<
name|_list81
operator|.
name|size
condition|;
operator|++
name|_i83
control|)
block|{
name|_elem82
operator|=
operator|new
name|TColumnIncrement
argument_list|()
expr_stmt|;
name|_elem82
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|columns
operator|.
name|add
argument_list|(
name|_elem82
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setColumnsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map84
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|attributes
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|,
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
argument_list|>
argument_list|(
literal|2
operator|*
name|_map84
operator|.
name|size
argument_list|)
expr_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|_key85
decl_stmt|;
annotation|@
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|annotation
operator|.
name|Nullable
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|_val86
decl_stmt|;
for|for
control|(
name|int
name|_i87
init|=
literal|0
init|;
name|_i87
operator|<
name|_map84
operator|.
name|size
condition|;
operator|++
name|_i87
control|)
block|{
name|_key85
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|_val86
operator|=
name|iprot
operator|.
name|readBinary
argument_list|()
expr_stmt|;
name|struct
operator|.
name|attributes
operator|.
name|put
argument_list|(
name|_key85
argument_list|,
name|_val86
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setAttributesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|durability
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDurability
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setDurabilityIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|cellVisibility
operator|=
operator|new
name|TCellVisibility
argument_list|()
expr_stmt|;
name|struct
operator|.
name|cellVisibility
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setCellVisibilityIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|returnResults
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setReturnResultsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|S
extends|extends
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
parameter_list|>
name|S
name|scheme
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|proto
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
operator|.
name|class
operator|.
name|equals
argument_list|(
name|proto
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
name|STANDARD_SCHEME_FACTORY
else|:
name|TUPLE_SCHEME_FACTORY
operator|)
operator|.
name|getScheme
argument_list|()
return|;
block|}
block|}
end_class

end_unit

