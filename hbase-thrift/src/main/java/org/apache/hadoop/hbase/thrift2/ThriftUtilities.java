begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
operator|.
name|getBytes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ExtendedCellBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ExtendedCellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Consistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|OperationWithAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
operator|.
name|ReadType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ParseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|CellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TAppend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TAuthorization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TBloomFilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCompressionAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TConsistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDeleteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDurability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|THRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|THRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TKeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TNamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TReadType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TRowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TTimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|ThriftUtilities
block|{
specifier|private
specifier|final
specifier|static
name|Cell
index|[]
name|EMPTY_CELL_ARRAY
init|=
operator|new
name|Cell
index|[]
block|{}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|ThriftUtilities
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can't initialize class"
argument_list|)
throw|;
block|}
comment|/**    * Creates a {@link Get} (HBase) from a {@link TGet} (Thrift).    *    * This ignores any timestamps set on {@link TColumn} objects.    *    * @param in the<code>TGet</code> to convert    *    * @return<code>Get</code> object    *    * @throws IOException if an invalid time range or max version parameter is given    */
specifier|public
specifier|static
name|Get
name|getFromThrift
parameter_list|(
name|TGet
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|out
init|=
operator|new
name|Get
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
comment|// Timestamp overwrites time range if both are set
if|if
condition|(
name|in
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|out
operator|.
name|setTimestamp
argument_list|(
name|in
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|in
operator|.
name|isSetTimeRange
argument_list|()
condition|)
block|{
name|out
operator|.
name|setTimeRange
argument_list|(
name|in
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMinStamp
argument_list|()
argument_list|,
name|in
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMaxStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|out
operator|.
name|readVersions
argument_list|(
name|in
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|ParseFilter
name|parseFilter
init|=
operator|new
name|ParseFilter
argument_list|()
decl_stmt|;
name|out
operator|.
name|setFilter
argument_list|(
name|parseFilter
operator|.
name|parseFilterString
argument_list|(
name|in
operator|.
name|getFilterString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|addAttributes
argument_list|(
name|out
argument_list|,
name|in
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetAuthorizations
argument_list|()
condition|)
block|{
name|out
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|in
operator|.
name|getAuthorizations
argument_list|()
operator|.
name|getLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetConsistency
argument_list|()
condition|)
block|{
name|out
operator|.
name|setConsistency
argument_list|(
name|consistencyFromThrift
argument_list|(
name|in
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetTargetReplicaId
argument_list|()
condition|)
block|{
name|out
operator|.
name|setReplicaId
argument_list|(
name|in
operator|.
name|getTargetReplicaId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetCacheBlocks
argument_list|()
condition|)
block|{
name|out
operator|.
name|setCacheBlocks
argument_list|(
name|in
operator|.
name|isCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetStoreLimit
argument_list|()
condition|)
block|{
name|out
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|in
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetStoreOffset
argument_list|()
condition|)
block|{
name|out
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|in
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetExistence_only
argument_list|()
condition|)
block|{
name|out
operator|.
name|setCheckExistenceOnly
argument_list|(
name|in
operator|.
name|isExistence_only
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
for|for
control|(
name|TColumn
name|column
range|:
name|in
operator|.
name|getColumns
argument_list|()
control|)
block|{
if|if
condition|(
name|column
operator|.
name|isSetQualifier
argument_list|()
condition|)
block|{
name|out
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|addFamily
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|in
operator|.
name|isSetFilterBytes
argument_list|()
condition|)
block|{
name|out
operator|.
name|setFilter
argument_list|(
name|filterFromThrift
argument_list|(
name|in
operator|.
name|getFilterBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Converts multiple {@link TGet}s (Thrift) into a list of {@link Get}s (HBase).    *    * @param in list of<code>TGet</code>s to convert    *    * @return list of<code>Get</code> objects    *    * @throws IOException if an invalid time range or max version parameter is given    * @see #getFromThrift(TGet)    */
specifier|public
specifier|static
name|List
argument_list|<
name|Get
argument_list|>
name|getsFromThrift
parameter_list|(
name|List
argument_list|<
name|TGet
argument_list|>
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Get
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TGet
name|get
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|getFromThrift
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Creates a {@link TResult} (Thrift) from a {@link Result} (HBase).    *    * @param in the<code>Result</code> to convert    *    * @return converted result, returns an empty result if the input is<code>null</code>    */
specifier|public
specifier|static
name|TResult
name|resultFromHBase
parameter_list|(
name|Result
name|in
parameter_list|)
block|{
name|Cell
index|[]
name|raw
init|=
name|in
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|TResult
name|out
init|=
operator|new
name|TResult
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|in
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|setRow
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|raw
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|raw
control|)
block|{
name|TColumnValue
name|col
init|=
operator|new
name|TColumnValue
argument_list|()
decl_stmt|;
name|col
operator|.
name|setFamily
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|col
operator|.
name|setQualifier
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|col
operator|.
name|setTimestamp
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|col
operator|.
name|setValue
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|col
operator|.
name|setType
argument_list|(
name|kv
operator|.
name|getType
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|kv
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|col
operator|.
name|setTags
argument_list|(
name|PrivateCellUtil
operator|.
name|cloneTags
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|columnValues
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|out
operator|.
name|setStale
argument_list|(
name|in
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setPartial
argument_list|(
name|in
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
comment|/**    * Converts multiple {@link Result}s (HBase) into a list of {@link TResult}s (Thrift).    *    * @param in array of<code>Result</code>s to convert    *    * @return list of converted<code>TResult</code>s    *    * @see #resultFromHBase(Result)    */
specifier|public
specifier|static
name|List
argument_list|<
name|TResult
argument_list|>
name|resultsFromHBase
parameter_list|(
name|Result
index|[]
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TResult
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|resultFromHBase
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Creates a {@link Put} (HBase) from a {@link TPut} (Thrift)    *    * @param in the<code>TPut</code> to convert    *    * @return converted<code>Put</code>    */
specifier|public
specifier|static
name|Put
name|putFromThrift
parameter_list|(
name|TPut
name|in
parameter_list|)
block|{
name|Put
name|out
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|out
operator|=
operator|new
name|Put
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|,
name|in
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
operator|new
name|Put
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromThrift
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TColumnValue
name|columnValue
range|:
name|in
operator|.
name|getColumnValues
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|columnValue
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|out
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|columnValue
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|columnValue
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|columnValue
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|columnValue
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|out
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|columnValue
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|columnValue
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|out
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|columnValue
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
operator|(
name|e
operator|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|addAttributes
argument_list|(
name|out
argument_list|,
name|in
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getCellVisibility
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|in
operator|.
name|getCellVisibility
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Converts multiple {@link TPut}s (Thrift) into a list of {@link Put}s (HBase).    *    * @param in list of<code>TPut</code>s to convert    *    * @return list of converted<code>Put</code>s    *    * @see #putFromThrift(TPut)    */
specifier|public
specifier|static
name|List
argument_list|<
name|Put
argument_list|>
name|putsFromThrift
parameter_list|(
name|List
argument_list|<
name|TPut
argument_list|>
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TPut
name|put
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|putFromThrift
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Creates a {@link Delete} (HBase) from a {@link TDelete} (Thrift).    *    * @param in the<code>TDelete</code> to convert    *    * @return converted<code>Delete</code>    */
specifier|public
specifier|static
name|Delete
name|deleteFromThrift
parameter_list|(
name|TDelete
name|in
parameter_list|)
block|{
name|Delete
name|out
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
name|out
operator|=
operator|new
name|Delete
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TColumn
name|column
range|:
name|in
operator|.
name|getColumns
argument_list|()
control|)
block|{
if|if
condition|(
name|in
operator|.
name|isSetDeleteType
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|in
operator|.
name|getDeleteType
argument_list|()
condition|)
block|{
case|case
name|DELETE_COLUMN
case|:
if|if
condition|(
name|column
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|out
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|column
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE_COLUMNS
case|:
if|if
condition|(
name|column
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|out
operator|.
name|addColumns
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|column
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|addColumns
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE_FAMILY
case|:
if|if
condition|(
name|column
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|out
operator|.
name|addFamily
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|addFamily
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE_FAMILY_VERSION
case|:
if|if
condition|(
name|column
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|out
operator|.
name|addFamilyVersion
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Timestamp is required for TDelete with DeleteFamilyVersion type"
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"DeleteType is required for TDelete"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"DeleteType is required for TDelete"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|in
operator|.
name|isSetTimestamp
argument_list|()
condition|)
block|{
name|out
operator|=
operator|new
name|Delete
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|,
name|in
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
operator|new
name|Delete
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|addAttributes
argument_list|(
name|out
argument_list|,
name|in
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromThrift
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|/**    * Converts multiple {@link TDelete}s (Thrift) into a list of {@link Delete}s (HBase).    *    * @param in list of<code>TDelete</code>s to convert    *    * @return list of converted<code>Delete</code>s    *    * @see #deleteFromThrift(TDelete)    */
specifier|public
specifier|static
name|List
argument_list|<
name|Delete
argument_list|>
name|deletesFromThrift
parameter_list|(
name|List
argument_list|<
name|TDelete
argument_list|>
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TDelete
name|delete
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|deleteFromThrift
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|TDeleteType
name|deleteTypeFromHBase
parameter_list|(
name|Cell
operator|.
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Delete
case|:
return|return
name|TDeleteType
operator|.
name|DELETE_COLUMN
return|;
case|case
name|DeleteColumn
case|:
return|return
name|TDeleteType
operator|.
name|DELETE_COLUMNS
return|;
case|case
name|DeleteFamily
case|:
return|return
name|TDeleteType
operator|.
name|DELETE_FAMILY
return|;
case|case
name|DeleteFamilyVersion
case|:
return|return
name|TDeleteType
operator|.
name|DELETE_FAMILY_VERSION
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknow delete type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|TDelete
name|deleteFromHBase
parameter_list|(
name|Delete
name|in
parameter_list|)
block|{
name|TDelete
name|out
init|=
operator|new
name|TDelete
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|rowTimestamp
init|=
name|in
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowTimestamp
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|)
block|{
name|out
operator|.
name|setTimestamp
argument_list|(
name|rowTimestamp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getAttributesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToAttributes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getDurability
argument_list|()
operator|!=
name|Durability
operator|.
name|USE_DEFAULT
condition|)
block|{
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromHBase
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Delete the whole row
if|if
condition|(
name|in
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|out
return|;
block|}
name|TDeleteType
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|familyEntry
range|:
name|in
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|familyEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|familyEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|familyEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|TDeleteType
name|cellDeleteType
init|=
name|deleteTypeFromHBase
argument_list|(
name|cell
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|cellDeleteType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|!=
name|cellDeleteType
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Only the same delete type is supported, but two delete type "
operator|+
literal|"is founded, one is "
operator|+
name|type
operator|+
literal|" the other one is "
operator|+
name|cellDeleteType
argument_list|)
throw|;
block|}
name|byte
index|[]
name|qualifier
init|=
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|long
name|timestamp
init|=
name|cell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timestamp
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|)
block|{
name|column
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|out
operator|.
name|setDeleteType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
comment|/**    * Creates a {@link RowMutations} (HBase) from a {@link TRowMutations} (Thrift)    *    * @param in the<code>TRowMutations</code> to convert    *    * @return converted<code>RowMutations</code>    */
specifier|public
specifier|static
name|RowMutations
name|rowMutationsFromThrift
parameter_list|(
name|TRowMutations
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TMutation
argument_list|>
name|mutations
init|=
name|in
operator|.
name|getMutations
argument_list|()
decl_stmt|;
name|RowMutations
name|out
init|=
operator|new
name|RowMutations
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|,
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TMutation
name|mutation
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|mutation
operator|.
name|isSetPut
argument_list|()
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|putFromThrift
argument_list|(
name|mutation
operator|.
name|getPut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mutation
operator|.
name|isSetDeleteSingle
argument_list|()
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|deleteFromThrift
argument_list|(
name|mutation
operator|.
name|getDeleteSingle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|Scan
name|scanFromThrift
parameter_list|(
name|TScan
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|out
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|isSetStartRow
argument_list|()
condition|)
block|{
name|out
operator|.
name|withStartRow
argument_list|(
name|in
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetStopRow
argument_list|()
condition|)
block|{
name|out
operator|.
name|setStopRow
argument_list|(
name|in
operator|.
name|getStopRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetCaching
argument_list|()
condition|)
block|{
name|out
operator|.
name|setCaching
argument_list|(
name|in
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|out
operator|.
name|setMaxVersions
argument_list|(
name|in
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetColumns
argument_list|()
condition|)
block|{
for|for
control|(
name|TColumn
name|column
range|:
name|in
operator|.
name|getColumns
argument_list|()
control|)
block|{
if|if
condition|(
name|column
operator|.
name|isSetQualifier
argument_list|()
condition|)
block|{
name|out
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|addFamily
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|TTimeRange
name|timeRange
init|=
name|in
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeRange
operator|!=
literal|null
operator|&&
name|timeRange
operator|.
name|isSetMinStamp
argument_list|()
operator|&&
name|timeRange
operator|.
name|isSetMaxStamp
argument_list|()
condition|)
block|{
name|out
operator|.
name|setTimeRange
argument_list|(
name|timeRange
operator|.
name|getMinStamp
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMaxStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetBatchSize
argument_list|()
condition|)
block|{
name|out
operator|.
name|setBatch
argument_list|(
name|in
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetFilterString
argument_list|()
condition|)
block|{
name|ParseFilter
name|parseFilter
init|=
operator|new
name|ParseFilter
argument_list|()
decl_stmt|;
name|out
operator|.
name|setFilter
argument_list|(
name|parseFilter
operator|.
name|parseFilterString
argument_list|(
name|in
operator|.
name|getFilterString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|addAttributes
argument_list|(
name|out
argument_list|,
name|in
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetAuthorizations
argument_list|()
condition|)
block|{
name|out
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|in
operator|.
name|getAuthorizations
argument_list|()
operator|.
name|getLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetReversed
argument_list|()
condition|)
block|{
name|out
operator|.
name|setReversed
argument_list|(
name|in
operator|.
name|isReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetCacheBlocks
argument_list|()
condition|)
block|{
name|out
operator|.
name|setCacheBlocks
argument_list|(
name|in
operator|.
name|isCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetColFamTimeRangeMap
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|TTimeRange
argument_list|>
name|colFamTimeRangeMap
init|=
name|in
operator|.
name|getColFamTimeRangeMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|MapUtils
operator|.
name|isNotEmpty
argument_list|(
name|colFamTimeRangeMap
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|TTimeRange
argument_list|>
name|entry
range|:
name|colFamTimeRangeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMinStamp
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMaxStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|in
operator|.
name|isSetReadType
argument_list|()
condition|)
block|{
name|out
operator|.
name|setReadType
argument_list|(
name|readTypeFromThrift
argument_list|(
name|in
operator|.
name|getReadType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetLimit
argument_list|()
condition|)
block|{
name|out
operator|.
name|setLimit
argument_list|(
name|in
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetConsistency
argument_list|()
condition|)
block|{
name|out
operator|.
name|setConsistency
argument_list|(
name|consistencyFromThrift
argument_list|(
name|in
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetTargetReplicaId
argument_list|()
condition|)
block|{
name|out
operator|.
name|setReplicaId
argument_list|(
name|in
operator|.
name|getTargetReplicaId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetFilterBytes
argument_list|()
condition|)
block|{
name|out
operator|.
name|setFilter
argument_list|(
name|filterFromThrift
argument_list|(
name|in
operator|.
name|getFilterBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|filterFromHBase
parameter_list|(
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterProtos
operator|.
name|Filter
name|filterPB
init|=
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
decl_stmt|;
return|return
name|filterPB
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Filter
name|filterFromThrift
parameter_list|(
name|byte
index|[]
name|filterBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterProtos
operator|.
name|Filter
name|filterPB
init|=
name|FilterProtos
operator|.
name|Filter
operator|.
name|parseFrom
argument_list|(
name|filterBytes
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filterPB
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TScan
name|scanFromHBase
parameter_list|(
name|Scan
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|TScan
name|out
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|out
operator|.
name|setStartRow
argument_list|(
name|in
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setStopRow
argument_list|(
name|in
operator|.
name|getStopRow
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCaching
argument_list|(
name|in
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setMaxVersions
argument_list|(
name|in
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|in
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|family
operator|.
name|getValue
argument_list|()
control|)
block|{
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|out
operator|.
name|addToColumns
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|addToColumns
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
name|TTimeRange
name|tTimeRange
init|=
operator|new
name|TTimeRange
argument_list|()
decl_stmt|;
name|tTimeRange
operator|.
name|setMinStamp
argument_list|(
name|in
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|setMaxStamp
argument_list|(
name|in
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setTimeRange
argument_list|(
name|tTimeRange
argument_list|)
expr_stmt|;
name|out
operator|.
name|setBatchSize
argument_list|(
name|in
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getAttributesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToAttributes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Authorizations
name|authorizations
init|=
name|in
operator|.
name|getAuthorizations
argument_list|()
decl_stmt|;
if|if
condition|(
name|authorizations
operator|!=
literal|null
condition|)
block|{
name|TAuthorization
name|tAuthorization
init|=
operator|new
name|TAuthorization
argument_list|()
decl_stmt|;
name|tAuthorization
operator|.
name|setLabels
argument_list|(
name|authorizations
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setAuthorizations
argument_list|(
name|tAuthorization
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|out
operator|.
name|setReversed
argument_list|(
name|in
operator|.
name|isReversed
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCacheBlocks
argument_list|(
name|in
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setReadType
argument_list|(
name|readTypeFromHBase
argument_list|(
name|in
operator|.
name|getReadType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|setLimit
argument_list|(
name|in
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setConsistency
argument_list|(
name|consistencyFromHBase
argument_list|(
name|in
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|setTargetReplicaId
argument_list|(
name|in
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|TimeRange
argument_list|>
name|entry
range|:
name|in
operator|.
name|getColumnFamilyTimeRange
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TTimeRange
name|timeRange
init|=
operator|new
name|TTimeRange
argument_list|()
decl_stmt|;
name|timeRange
operator|.
name|setMinStamp
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|setMaxStamp
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|putToColFamTimeRangeMap
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|timeRange
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|setFilterBytes
argument_list|(
name|filterFromHBase
argument_list|(
name|in
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioE
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioE
argument_list|)
throw|;
block|}
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|Increment
name|incrementFromThrift
parameter_list|(
name|TIncrement
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Increment
name|out
init|=
operator|new
name|Increment
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TColumnIncrement
name|column
range|:
name|in
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|out
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|column
operator|.
name|getAmount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|addAttributes
argument_list|(
name|out
argument_list|,
name|in
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromThrift
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getCellVisibility
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|in
operator|.
name|getCellVisibility
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetReturnResults
argument_list|()
condition|)
block|{
name|out
operator|.
name|setReturnResults
argument_list|(
name|in
operator|.
name|isReturnResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|Append
name|appendFromThrift
parameter_list|(
name|TAppend
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|Append
name|out
init|=
operator|new
name|Append
argument_list|(
name|append
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TColumnValue
name|column
range|:
name|append
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|out
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getFamily
argument_list|()
argument_list|,
name|column
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|column
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|append
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
name|addAttributes
argument_list|(
name|out
argument_list|,
name|append
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|append
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromThrift
argument_list|(
name|append
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|append
operator|.
name|getCellVisibility
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|append
operator|.
name|getCellVisibility
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|append
operator|.
name|isSetReturnResults
argument_list|()
condition|)
block|{
name|out
operator|.
name|setReturnResults
argument_list|(
name|append
operator|.
name|isReturnResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|THRegionLocation
name|regionLocationFromHBase
parameter_list|(
name|HRegionLocation
name|hrl
parameter_list|)
block|{
name|RegionInfo
name|hri
init|=
name|hrl
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|hrl
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|THRegionInfo
name|thRegionInfo
init|=
operator|new
name|THRegionInfo
argument_list|()
decl_stmt|;
name|THRegionLocation
name|thRegionLocation
init|=
operator|new
name|THRegionLocation
argument_list|()
decl_stmt|;
name|TServerName
name|tServerName
init|=
operator|new
name|TServerName
argument_list|()
decl_stmt|;
name|tServerName
operator|.
name|setHostName
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|tServerName
operator|.
name|setPort
argument_list|(
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|tServerName
operator|.
name|setStartCode
argument_list|(
name|serverName
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
name|thRegionInfo
operator|.
name|setTableName
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|thRegionInfo
operator|.
name|setEndKey
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|thRegionInfo
operator|.
name|setStartKey
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|thRegionInfo
operator|.
name|setOffline
argument_list|(
name|hri
operator|.
name|isOffline
argument_list|()
argument_list|)
expr_stmt|;
name|thRegionInfo
operator|.
name|setSplit
argument_list|(
name|hri
operator|.
name|isSplit
argument_list|()
argument_list|)
expr_stmt|;
name|thRegionInfo
operator|.
name|setReplicaId
argument_list|(
name|hri
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
name|thRegionLocation
operator|.
name|setRegionInfo
argument_list|(
name|thRegionInfo
argument_list|)
expr_stmt|;
name|thRegionLocation
operator|.
name|setServerName
argument_list|(
name|tServerName
argument_list|)
expr_stmt|;
return|return
name|thRegionLocation
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|THRegionLocation
argument_list|>
name|regionLocationsFromHBase
parameter_list|(
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locations
parameter_list|)
block|{
name|List
argument_list|<
name|THRegionLocation
argument_list|>
name|tlocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|locations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|hrl
range|:
name|locations
control|)
block|{
name|tlocations
operator|.
name|add
argument_list|(
name|regionLocationFromHBase
argument_list|(
name|hrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tlocations
return|;
block|}
comment|/**    * Adds all the attributes into the Operation object    */
specifier|private
specifier|static
name|void
name|addAttributes
parameter_list|(
name|OperationWithAttributes
name|op
parameter_list|,
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
operator|||
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|entry
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|getBytes
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|op
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Durability
name|durabilityFromThrift
parameter_list|(
name|TDurability
name|tDurability
parameter_list|)
block|{
switch|switch
condition|(
name|tDurability
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
literal|1
case|:
return|return
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
literal|2
case|:
return|return
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
literal|3
case|:
return|return
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
literal|4
case|:
return|return
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
specifier|public
specifier|static
name|CompareOperator
name|compareOpFromThrift
parameter_list|(
name|TCompareOperator
name|tCompareOp
parameter_list|)
block|{
switch|switch
condition|(
name|tCompareOp
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|CompareOperator
operator|.
name|LESS
return|;
case|case
literal|1
case|:
return|return
name|CompareOperator
operator|.
name|LESS_OR_EQUAL
return|;
case|case
literal|2
case|:
return|return
name|CompareOperator
operator|.
name|EQUAL
return|;
case|case
literal|3
case|:
return|return
name|CompareOperator
operator|.
name|NOT_EQUAL
return|;
case|case
literal|4
case|:
return|return
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
return|;
case|case
literal|5
case|:
return|return
name|CompareOperator
operator|.
name|GREATER
return|;
case|case
literal|6
case|:
return|return
name|CompareOperator
operator|.
name|NO_OP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|ReadType
name|readTypeFromThrift
parameter_list|(
name|TReadType
name|tReadType
parameter_list|)
block|{
switch|switch
condition|(
name|tReadType
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
return|return
name|ReadType
operator|.
name|DEFAULT
return|;
case|case
literal|2
case|:
return|return
name|ReadType
operator|.
name|STREAM
return|;
case|case
literal|3
case|:
return|return
name|ReadType
operator|.
name|PREAD
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|TReadType
name|readTypeFromHBase
parameter_list|(
name|ReadType
name|readType
parameter_list|)
block|{
switch|switch
condition|(
name|readType
condition|)
block|{
case|case
name|DEFAULT
case|:
return|return
name|TReadType
operator|.
name|DEFAULT
return|;
case|case
name|STREAM
case|:
return|return
name|TReadType
operator|.
name|STREAM
return|;
case|case
name|PREAD
case|:
return|return
name|TReadType
operator|.
name|PREAD
return|;
default|default:
return|return
name|TReadType
operator|.
name|DEFAULT
return|;
block|}
block|}
specifier|private
specifier|static
name|Consistency
name|consistencyFromThrift
parameter_list|(
name|TConsistency
name|tConsistency
parameter_list|)
block|{
switch|switch
condition|(
name|tConsistency
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
literal|1
case|:
return|return
name|Consistency
operator|.
name|STRONG
return|;
case|case
literal|2
case|:
return|return
name|Consistency
operator|.
name|TIMELINE
return|;
default|default:
return|return
name|Consistency
operator|.
name|STRONG
return|;
block|}
block|}
specifier|public
specifier|static
name|TableName
name|tableNameFromThrift
parameter_list|(
name|TTableName
name|tableName
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNs
argument_list|()
argument_list|,
name|tableName
operator|.
name|getQualifier
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableName
index|[]
name|tableNamesArrayFromThrift
parameter_list|(
name|List
argument_list|<
name|TTableName
argument_list|>
name|tableNames
parameter_list|)
block|{
name|TableName
index|[]
name|out
init|=
operator|new
name|TableName
index|[
name|tableNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TTableName
name|tableName
range|:
name|tableNames
control|)
block|{
name|out
index|[
name|index
operator|++
index|]
operator|=
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesFromThrift
parameter_list|(
name|List
argument_list|<
name|TTableName
argument_list|>
name|tableNames
parameter_list|)
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TTableName
name|tableName
range|:
name|tableNames
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|tableNameFromThrift
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|TTableName
name|tableNameFromHBase
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|TTableName
name|tableName
init|=
operator|new
name|TTableName
argument_list|()
decl_stmt|;
name|tableName
operator|.
name|setNs
argument_list|(
name|table
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|tableName
operator|.
name|setQualifier
argument_list|(
name|table
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tableName
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TTableName
argument_list|>
name|tableNamesFromHBase
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TTableName
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|tableNameFromHBase
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TTableName
argument_list|>
name|tableNamesFromHBase
parameter_list|(
name|TableName
index|[]
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TTableName
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|tableNameFromHBase
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|splitKeyFromThrift
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
operator|||
name|in
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
index|[]
name|out
init|=
operator|new
name|byte
index|[
name|in
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|key
range|:
name|in
control|)
block|{
name|out
index|[
name|index
operator|++
index|]
operator|=
name|key
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|BloomType
name|bloomFilterFromThrift
parameter_list|(
name|TBloomFilterType
name|in
parameter_list|)
block|{
switch|switch
condition|(
name|in
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|BloomType
operator|.
name|NONE
return|;
case|case
literal|1
case|:
return|return
name|BloomType
operator|.
name|ROW
return|;
case|case
literal|2
case|:
return|return
name|BloomType
operator|.
name|ROWCOL
return|;
case|case
literal|3
case|:
return|return
name|BloomType
operator|.
name|ROWPREFIX_FIXED_LENGTH
return|;
default|default:
return|return
name|BloomType
operator|.
name|ROW
return|;
block|}
block|}
specifier|public
specifier|static
name|Compression
operator|.
name|Algorithm
name|compressionAlgorithmFromThrift
parameter_list|(
name|TCompressionAlgorithm
name|in
parameter_list|)
block|{
switch|switch
condition|(
name|in
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Compression
operator|.
name|Algorithm
operator|.
name|LZO
return|;
case|case
literal|1
case|:
return|return
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
return|;
case|case
literal|2
case|:
return|return
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
return|;
case|case
literal|3
case|:
return|return
name|Compression
operator|.
name|Algorithm
operator|.
name|SNAPPY
return|;
case|case
literal|4
case|:
return|return
name|Compression
operator|.
name|Algorithm
operator|.
name|LZ4
return|;
case|case
literal|5
case|:
return|return
name|Compression
operator|.
name|Algorithm
operator|.
name|BZIP2
return|;
case|case
literal|6
case|:
return|return
name|Compression
operator|.
name|Algorithm
operator|.
name|ZSTD
return|;
default|default:
return|return
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
return|;
block|}
block|}
specifier|public
specifier|static
name|DataBlockEncoding
name|dataBlockEncodingFromThrift
parameter_list|(
name|TDataBlockEncoding
name|in
parameter_list|)
block|{
switch|switch
condition|(
name|in
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|DataBlockEncoding
operator|.
name|NONE
return|;
case|case
literal|2
case|:
return|return
name|DataBlockEncoding
operator|.
name|PREFIX
return|;
case|case
literal|3
case|:
return|return
name|DataBlockEncoding
operator|.
name|DIFF
return|;
case|case
literal|4
case|:
return|return
name|DataBlockEncoding
operator|.
name|FAST_DIFF
return|;
case|case
literal|7
case|:
return|return
name|DataBlockEncoding
operator|.
name|ROW_INDEX_V1
return|;
default|default:
return|return
name|DataBlockEncoding
operator|.
name|NONE
return|;
block|}
block|}
specifier|public
specifier|static
name|KeepDeletedCells
name|keepDeletedCellsFromThrift
parameter_list|(
name|TKeepDeletedCells
name|in
parameter_list|)
block|{
switch|switch
condition|(
name|in
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|KeepDeletedCells
operator|.
name|FALSE
return|;
case|case
literal|1
case|:
return|return
name|KeepDeletedCells
operator|.
name|TRUE
return|;
case|case
literal|2
case|:
return|return
name|KeepDeletedCells
operator|.
name|TTL
return|;
default|default:
return|return
name|KeepDeletedCells
operator|.
name|FALSE
return|;
block|}
block|}
specifier|public
specifier|static
name|ColumnFamilyDescriptor
name|columnFamilyDescriptorFromThrift
parameter_list|(
name|TColumnFamilyDescriptor
name|in
parameter_list|)
block|{
name|ColumnFamilyDescriptorBuilder
name|builder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|in
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|setValue
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|isSetConfiguration
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
range|:
name|in
operator|.
name|getConfiguration
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|setConfiguration
argument_list|(
name|conf
operator|.
name|getKey
argument_list|()
argument_list|,
name|conf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|isSetBlockSize
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setBlocksize
argument_list|(
name|in
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetBloomnFilterType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setBloomFilterType
argument_list|(
name|bloomFilterFromThrift
argument_list|(
name|in
operator|.
name|getBloomnFilterType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetCompressionType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCompressionType
argument_list|(
name|compressionAlgorithmFromThrift
argument_list|(
name|in
operator|.
name|getCompressionType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetDfsReplication
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setDFSReplication
argument_list|(
name|in
operator|.
name|getDfsReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetDataBlockEncoding
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setDataBlockEncoding
argument_list|(
name|dataBlockEncodingFromThrift
argument_list|(
name|in
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetKeepDeletedCells
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setKeepDeletedCells
argument_list|(
name|keepDeletedCellsFromThrift
argument_list|(
name|in
operator|.
name|getKeepDeletedCells
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetMaxVersions
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setMaxVersions
argument_list|(
name|in
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetMinVersions
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setMinVersions
argument_list|(
name|in
operator|.
name|getMinVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetScope
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setScope
argument_list|(
name|in
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetTimeToLive
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setTimeToLive
argument_list|(
name|in
operator|.
name|getTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetBlockCacheEnabled
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setBlockCacheEnabled
argument_list|(
name|in
operator|.
name|isBlockCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetCacheBloomsOnWrite
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCacheBloomsOnWrite
argument_list|(
name|in
operator|.
name|isCacheBloomsOnWrite
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetCacheDataOnWrite
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCacheDataOnWrite
argument_list|(
name|in
operator|.
name|isCacheDataOnWrite
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetCacheIndexesOnWrite
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCacheIndexesOnWrite
argument_list|(
name|in
operator|.
name|isCacheIndexesOnWrite
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetCompressTags
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setCompressTags
argument_list|(
name|in
operator|.
name|isCompressTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetEvictBlocksOnClose
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setEvictBlocksOnClose
argument_list|(
name|in
operator|.
name|isEvictBlocksOnClose
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetInMemory
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setInMemory
argument_list|(
name|in
operator|.
name|isInMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NamespaceDescriptor
name|namespaceDescriptorFromThrift
parameter_list|(
name|TNamespaceDescriptor
name|in
parameter_list|)
block|{
name|NamespaceDescriptor
operator|.
name|Builder
name|builder
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|in
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|isSetConfiguration
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
range|:
name|in
operator|.
name|getConfiguration
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|addConfiguration
argument_list|(
name|conf
operator|.
name|getKey
argument_list|()
argument_list|,
name|conf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TNamespaceDescriptor
name|namespaceDescriptorFromHBase
parameter_list|(
name|NamespaceDescriptor
name|in
parameter_list|)
block|{
name|TNamespaceDescriptor
name|out
init|=
operator|new
name|TNamespaceDescriptor
argument_list|()
decl_stmt|;
name|out
operator|.
name|setName
argument_list|(
name|in
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
range|:
name|in
operator|.
name|getConfiguration
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToConfiguration
argument_list|(
name|conf
operator|.
name|getKey
argument_list|()
argument_list|,
name|conf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TNamespaceDescriptor
argument_list|>
name|namespaceDescriptorsFromHBase
parameter_list|(
name|NamespaceDescriptor
index|[]
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TNamespaceDescriptor
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|descriptor
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|namespaceDescriptorFromHBase
argument_list|(
name|descriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|TableDescriptor
name|tableDescriptorFromThrift
parameter_list|(
name|TTableDescriptor
name|in
parameter_list|)
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableNameFromThrift
argument_list|(
name|in
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TColumnFamilyDescriptor
name|column
range|:
name|in
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|columnFamilyDescriptorFromThrift
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|isSetAttributes
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|setValue
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|isSetDurability
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setDurability
argument_list|(
name|durabilityFromThrift
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|HTableDescriptor
name|hTableDescriptorFromThrift
parameter_list|(
name|TTableDescriptor
name|in
parameter_list|)
block|{
return|return
operator|new
name|HTableDescriptor
argument_list|(
name|tableDescriptorFromThrift
argument_list|(
name|in
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HTableDescriptor
index|[]
name|hTableDescriptorsFromThrift
parameter_list|(
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|in
parameter_list|)
block|{
name|HTableDescriptor
index|[]
name|out
init|=
operator|new
name|HTableDescriptor
index|[
name|in
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TTableDescriptor
name|tTableDescriptor
range|:
name|in
control|)
block|{
name|out
index|[
name|index
operator|++
index|]
operator|=
name|hTableDescriptorFromThrift
argument_list|(
name|tTableDescriptor
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDescriptorsFromThrift
parameter_list|(
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TTableDescriptor
name|tableDescriptor
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|tableDescriptorFromThrift
argument_list|(
name|tableDescriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|private
specifier|static
name|TDurability
name|durabilityFromHBase
parameter_list|(
name|Durability
name|durability
parameter_list|)
block|{
switch|switch
condition|(
name|durability
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|TDurability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|TDurability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|TDurability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|TDurability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|TDurability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|TTableDescriptor
name|tableDescriptorFromHBase
parameter_list|(
name|TableDescriptor
name|in
parameter_list|)
block|{
name|TTableDescriptor
name|out
init|=
operator|new
name|TTableDescriptor
argument_list|()
decl_stmt|;
name|out
operator|.
name|setTableName
argument_list|(
name|tableNameFromHBase
argument_list|(
name|in
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|attributes
init|=
name|in
operator|.
name|getValues
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToAttributes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ColumnFamilyDescriptor
name|column
range|:
name|in
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|out
operator|.
name|addToColumns
argument_list|(
name|columnFamilyDescriptorFromHBase
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromHBase
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|tableDescriptorsFromHBase
parameter_list|(
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TableDescriptor
name|descriptor
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|tableDescriptorFromHBase
argument_list|(
name|descriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|tableDescriptorsFromHBase
parameter_list|(
name|TableDescriptor
index|[]
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TTableDescriptor
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|TableDescriptor
name|descriptor
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|tableDescriptorFromHBase
argument_list|(
name|descriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|TBloomFilterType
name|bloomFilterFromHBase
parameter_list|(
name|BloomType
name|in
parameter_list|)
block|{
switch|switch
condition|(
name|in
condition|)
block|{
case|case
name|NONE
case|:
return|return
name|TBloomFilterType
operator|.
name|NONE
return|;
case|case
name|ROW
case|:
return|return
name|TBloomFilterType
operator|.
name|ROW
return|;
case|case
name|ROWCOL
case|:
return|return
name|TBloomFilterType
operator|.
name|ROWCOL
return|;
case|case
name|ROWPREFIX_FIXED_LENGTH
case|:
return|return
name|TBloomFilterType
operator|.
name|ROWPREFIX_FIXED_LENGTH
return|;
default|default:
return|return
name|TBloomFilterType
operator|.
name|ROW
return|;
block|}
block|}
specifier|public
specifier|static
name|TCompressionAlgorithm
name|compressionAlgorithmFromHBase
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|in
parameter_list|)
block|{
switch|switch
condition|(
name|in
condition|)
block|{
case|case
name|LZO
case|:
return|return
name|TCompressionAlgorithm
operator|.
name|LZO
return|;
case|case
name|GZ
case|:
return|return
name|TCompressionAlgorithm
operator|.
name|GZ
return|;
case|case
name|NONE
case|:
return|return
name|TCompressionAlgorithm
operator|.
name|NONE
return|;
case|case
name|SNAPPY
case|:
return|return
name|TCompressionAlgorithm
operator|.
name|SNAPPY
return|;
case|case
name|LZ4
case|:
return|return
name|TCompressionAlgorithm
operator|.
name|LZ4
return|;
case|case
name|BZIP2
case|:
return|return
name|TCompressionAlgorithm
operator|.
name|BZIP2
return|;
case|case
name|ZSTD
case|:
return|return
name|TCompressionAlgorithm
operator|.
name|ZSTD
return|;
default|default:
return|return
name|TCompressionAlgorithm
operator|.
name|NONE
return|;
block|}
block|}
specifier|public
specifier|static
name|TDataBlockEncoding
name|dataBlockEncodingFromHBase
parameter_list|(
name|DataBlockEncoding
name|in
parameter_list|)
block|{
switch|switch
condition|(
name|in
condition|)
block|{
case|case
name|NONE
case|:
return|return
name|TDataBlockEncoding
operator|.
name|NONE
return|;
case|case
name|PREFIX
case|:
return|return
name|TDataBlockEncoding
operator|.
name|PREFIX
return|;
case|case
name|DIFF
case|:
return|return
name|TDataBlockEncoding
operator|.
name|DIFF
return|;
case|case
name|FAST_DIFF
case|:
return|return
name|TDataBlockEncoding
operator|.
name|FAST_DIFF
return|;
case|case
name|ROW_INDEX_V1
case|:
return|return
name|TDataBlockEncoding
operator|.
name|ROW_INDEX_V1
return|;
default|default:
return|return
name|TDataBlockEncoding
operator|.
name|NONE
return|;
block|}
block|}
specifier|public
specifier|static
name|TKeepDeletedCells
name|keepDeletedCellsFromHBase
parameter_list|(
name|KeepDeletedCells
name|in
parameter_list|)
block|{
switch|switch
condition|(
name|in
condition|)
block|{
case|case
name|FALSE
case|:
return|return
name|TKeepDeletedCells
operator|.
name|FALSE
return|;
case|case
name|TRUE
case|:
return|return
name|TKeepDeletedCells
operator|.
name|TRUE
return|;
case|case
name|TTL
case|:
return|return
name|TKeepDeletedCells
operator|.
name|TTL
return|;
default|default:
return|return
name|TKeepDeletedCells
operator|.
name|FALSE
return|;
block|}
block|}
specifier|public
specifier|static
name|TColumnFamilyDescriptor
name|columnFamilyDescriptorFromHBase
parameter_list|(
name|ColumnFamilyDescriptor
name|in
parameter_list|)
block|{
name|TColumnFamilyDescriptor
name|out
init|=
operator|new
name|TColumnFamilyDescriptor
argument_list|()
decl_stmt|;
name|out
operator|.
name|setName
argument_list|(
name|in
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToAttributes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
range|:
name|in
operator|.
name|getConfiguration
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToConfiguration
argument_list|(
name|conf
operator|.
name|getKey
argument_list|()
argument_list|,
name|conf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setBlockSize
argument_list|(
name|in
operator|.
name|getBlocksize
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setBloomnFilterType
argument_list|(
name|bloomFilterFromHBase
argument_list|(
name|in
operator|.
name|getBloomFilterType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCompressionType
argument_list|(
name|compressionAlgorithmFromHBase
argument_list|(
name|in
operator|.
name|getCompressionType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|setDfsReplication
argument_list|(
name|in
operator|.
name|getDFSReplication
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setDataBlockEncoding
argument_list|(
name|dataBlockEncodingFromHBase
argument_list|(
name|in
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|setKeepDeletedCells
argument_list|(
name|keepDeletedCellsFromHBase
argument_list|(
name|in
operator|.
name|getKeepDeletedCells
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|setMaxVersions
argument_list|(
name|in
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setMinVersions
argument_list|(
name|in
operator|.
name|getMinVersions
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setScope
argument_list|(
name|in
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setTimeToLive
argument_list|(
name|in
operator|.
name|getTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setBlockCacheEnabled
argument_list|(
name|in
operator|.
name|isBlockCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCacheBloomsOnWrite
argument_list|(
name|in
operator|.
name|isCacheBloomsOnWrite
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCacheDataOnWrite
argument_list|(
name|in
operator|.
name|isCacheDataOnWrite
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCacheIndexesOnWrite
argument_list|(
name|in
operator|.
name|isCacheIndexesOnWrite
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCompressTags
argument_list|(
name|in
operator|.
name|isCompressTags
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setEvictBlocksOnClose
argument_list|(
name|in
operator|.
name|isEvictBlocksOnClose
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setInMemory
argument_list|(
name|in
operator|.
name|isInMemory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|private
specifier|static
name|TConsistency
name|consistencyFromHBase
parameter_list|(
name|Consistency
name|consistency
parameter_list|)
block|{
switch|switch
condition|(
name|consistency
condition|)
block|{
case|case
name|STRONG
case|:
return|return
name|TConsistency
operator|.
name|STRONG
return|;
case|case
name|TIMELINE
case|:
return|return
name|TConsistency
operator|.
name|TIMELINE
return|;
default|default:
return|return
name|TConsistency
operator|.
name|STRONG
return|;
block|}
block|}
specifier|public
specifier|static
name|TGet
name|getFromHBase
parameter_list|(
name|Get
name|in
parameter_list|)
block|{
name|TGet
name|out
init|=
operator|new
name|TGet
argument_list|()
decl_stmt|;
name|out
operator|.
name|setRow
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|TTimeRange
name|tTimeRange
init|=
operator|new
name|TTimeRange
argument_list|()
decl_stmt|;
name|tTimeRange
operator|.
name|setMaxStamp
argument_list|(
name|in
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|setMinStamp
argument_list|(
name|in
operator|.
name|getTimeRange
argument_list|()
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setTimeRange
argument_list|(
name|tTimeRange
argument_list|)
expr_stmt|;
name|out
operator|.
name|setMaxVersions
argument_list|(
name|in
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getAttributesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToAttributes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Authorizations
name|authorizations
init|=
name|in
operator|.
name|getAuthorizations
argument_list|()
decl_stmt|;
if|if
condition|(
name|authorizations
operator|!=
literal|null
condition|)
block|{
name|TAuthorization
name|tAuthorization
init|=
operator|new
name|TAuthorization
argument_list|()
decl_stmt|;
name|tAuthorization
operator|.
name|setLabels
argument_list|(
name|authorizations
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setAuthorizations
argument_list|(
name|tAuthorization
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|out
operator|.
name|setConsistency
argument_list|(
name|consistencyFromHBase
argument_list|(
name|in
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|setTargetReplicaId
argument_list|(
name|in
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCacheBlocks
argument_list|(
name|in
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setStoreLimit
argument_list|(
name|in
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setStoreOffset
argument_list|(
name|in
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setExistence_only
argument_list|(
name|in
operator|.
name|isCheckExistenceOnly
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|in
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|family
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|family
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|family
operator|.
name|getValue
argument_list|()
control|)
block|{
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|out
operator|.
name|addToColumns
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|addToColumns
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|setFilterBytes
argument_list|(
name|filterFromHBase
argument_list|(
name|in
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioE
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioE
argument_list|)
throw|;
block|}
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|Cell
name|toCell
parameter_list|(
name|ExtendedCellBuilder
name|cellBuilder
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|TColumnValue
name|columnValue
parameter_list|)
block|{
return|return
name|cellBuilder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
operator|.
name|setFamily
argument_list|(
name|columnValue
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|columnValue
operator|.
name|getQualifier
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|columnValue
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|columnValue
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|columnValue
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|setTags
argument_list|(
name|columnValue
operator|.
name|getTags
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Result
name|resultFromThrift
parameter_list|(
name|TResult
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|in
operator|.
name|isSetColumnValues
argument_list|()
operator|||
name|in
operator|.
name|getColumnValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|in
operator|.
name|isStale
argument_list|()
condition|?
name|EMPTY_RESULT_STALE
else|:
name|EMPTY_RESULT
return|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|getColumnValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ExtendedCellBuilder
name|builder
init|=
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
for|for
control|(
name|TColumnValue
name|columnValue
range|:
name|in
operator|.
name|getColumnValues
argument_list|()
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|builder
argument_list|,
name|in
operator|.
name|getRow
argument_list|()
argument_list|,
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
name|in
operator|.
name|isStale
argument_list|()
argument_list|,
name|in
operator|.
name|isPartial
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TPut
name|putFromHBase
parameter_list|(
name|Put
name|in
parameter_list|)
block|{
name|TPut
name|out
init|=
operator|new
name|TPut
argument_list|()
decl_stmt|;
name|out
operator|.
name|setRow
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getTimestamp
argument_list|()
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|)
block|{
name|out
operator|.
name|setTimestamp
argument_list|(
name|in
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getDurability
argument_list|()
operator|!=
name|Durability
operator|.
name|USE_DEFAULT
condition|)
block|{
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromHBase
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|entry
range|:
name|in
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|()
decl_stmt|;
name|columnValue
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|cell
operator|.
name|getType
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|columnValue
operator|.
name|setTags
argument_list|(
name|PrivateCellUtil
operator|.
name|cloneTags
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|addToColumnValues
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getAttributesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToAttributes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|CellVisibility
name|cellVisibility
init|=
name|in
operator|.
name|getCellVisibility
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellVisibility
operator|!=
literal|null
condition|)
block|{
name|TCellVisibility
name|tCellVisibility
init|=
operator|new
name|TCellVisibility
argument_list|()
decl_stmt|;
name|tCellVisibility
operator|.
name|setExpression
argument_list|(
name|cellVisibility
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCellVisibility
argument_list|(
name|tCellVisibility
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TPut
argument_list|>
name|putsFromHBase
parameter_list|(
name|List
argument_list|<
name|Put
argument_list|>
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TPut
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Put
name|put
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|putFromHBase
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|NamespaceDescriptor
index|[]
name|namespaceDescriptorsFromThrift
parameter_list|(
name|List
argument_list|<
name|TNamespaceDescriptor
argument_list|>
name|in
parameter_list|)
block|{
name|NamespaceDescriptor
index|[]
name|out
init|=
operator|new
name|NamespaceDescriptor
index|[
name|in
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TNamespaceDescriptor
name|descriptor
range|:
name|in
control|)
block|{
name|out
index|[
name|index
operator|++
index|]
operator|=
name|namespaceDescriptorFromThrift
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TDelete
argument_list|>
name|deletesFromHBase
parameter_list|(
name|List
argument_list|<
name|Delete
argument_list|>
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TDelete
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Delete
name|delete
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|deleteFromHBase
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|TAppend
name|appendFromHBase
parameter_list|(
name|Append
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|TAppend
name|out
init|=
operator|new
name|TAppend
argument_list|()
decl_stmt|;
name|out
operator|.
name|setRow
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getDurability
argument_list|()
operator|!=
name|Durability
operator|.
name|USE_DEFAULT
condition|)
block|{
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromHBase
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|entry
range|:
name|in
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|()
decl_stmt|;
name|columnValue
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|cell
operator|.
name|getType
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|columnValue
operator|.
name|setTags
argument_list|(
name|PrivateCellUtil
operator|.
name|cloneTags
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|addToColumns
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getAttributesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToAttributes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|CellVisibility
name|cellVisibility
init|=
name|in
operator|.
name|getCellVisibility
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellVisibility
operator|!=
literal|null
condition|)
block|{
name|TCellVisibility
name|tCellVisibility
init|=
operator|new
name|TCellVisibility
argument_list|()
decl_stmt|;
name|tCellVisibility
operator|.
name|setExpression
argument_list|(
name|cellVisibility
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCellVisibility
argument_list|(
name|tCellVisibility
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|out
operator|.
name|setReturnResults
argument_list|(
name|in
operator|.
name|isReturnResults
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|TIncrement
name|incrementFromHBase
parameter_list|(
name|Increment
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|TIncrement
name|out
init|=
operator|new
name|TIncrement
argument_list|()
decl_stmt|;
name|out
operator|.
name|setRow
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getDurability
argument_list|()
operator|!=
name|Durability
operator|.
name|USE_DEFAULT
condition|)
block|{
name|out
operator|.
name|setDurability
argument_list|(
name|durabilityFromHBase
argument_list|(
name|in
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|entry
range|:
name|in
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|TColumnIncrement
name|columnValue
init|=
operator|new
name|TColumnIncrement
argument_list|()
decl_stmt|;
name|columnValue
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|columnValue
operator|.
name|setAmount
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|addToColumns
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|in
operator|.
name|getAttributesMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|putToAttributes
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|CellVisibility
name|cellVisibility
init|=
name|in
operator|.
name|getCellVisibility
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellVisibility
operator|!=
literal|null
condition|)
block|{
name|TCellVisibility
name|tCellVisibility
init|=
operator|new
name|TCellVisibility
argument_list|()
decl_stmt|;
name|tCellVisibility
operator|.
name|setExpression
argument_list|(
name|cellVisibility
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setCellVisibility
argument_list|(
name|tCellVisibility
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|out
operator|.
name|setReturnResults
argument_list|(
name|in
operator|.
name|isReturnResults
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|TRowMutations
name|rowMutationsFromHBase
parameter_list|(
name|RowMutations
name|in
parameter_list|)
block|{
name|TRowMutations
name|tRowMutations
init|=
operator|new
name|TRowMutations
argument_list|()
decl_stmt|;
name|tRowMutations
operator|.
name|setRow
argument_list|(
name|in
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Mutation
name|mutation
range|:
name|in
operator|.
name|getMutations
argument_list|()
control|)
block|{
name|TMutation
name|tMutation
init|=
operator|new
name|TMutation
argument_list|()
decl_stmt|;
if|if
condition|(
name|mutation
operator|instanceof
name|Put
condition|)
block|{
name|tMutation
operator|.
name|setPut
argument_list|(
name|ThriftUtilities
operator|.
name|putFromHBase
argument_list|(
operator|(
name|Put
operator|)
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mutation
operator|instanceof
name|Delete
condition|)
block|{
name|tMutation
operator|.
name|setDeleteSingle
argument_list|(
name|ThriftUtilities
operator|.
name|deleteFromHBase
argument_list|(
operator|(
name|Delete
operator|)
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only Put and Delete is supported in mutateRow, but muation="
operator|+
name|mutation
argument_list|)
throw|;
block|}
name|tRowMutations
operator|.
name|addToMutations
argument_list|(
name|tMutation
argument_list|)
expr_stmt|;
block|}
return|return
name|tRowMutations
return|;
block|}
specifier|public
specifier|static
name|TCompareOperator
name|compareOpFromHBase
parameter_list|(
name|CompareOperator
name|compareOp
parameter_list|)
block|{
switch|switch
condition|(
name|compareOp
condition|)
block|{
case|case
name|LESS
case|:
return|return
name|TCompareOperator
operator|.
name|LESS
return|;
case|case
name|LESS_OR_EQUAL
case|:
return|return
name|TCompareOperator
operator|.
name|LESS_OR_EQUAL
return|;
case|case
name|EQUAL
case|:
return|return
name|TCompareOperator
operator|.
name|EQUAL
return|;
case|case
name|NOT_EQUAL
case|:
return|return
name|TCompareOperator
operator|.
name|NOT_EQUAL
return|;
case|case
name|GREATER_OR_EQUAL
case|:
return|return
name|TCompareOperator
operator|.
name|GREATER_OR_EQUAL
return|;
case|case
name|GREATER
case|:
return|return
name|TCompareOperator
operator|.
name|GREATER
return|;
case|case
name|NO_OP
case|:
return|return
name|TCompareOperator
operator|.
name|NO_OP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|splitKeyFromHBase
parameter_list|(
name|byte
index|[]
index|[]
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
operator|||
name|in
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|key
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|Result
index|[]
name|resultsFromThrift
parameter_list|(
name|List
argument_list|<
name|TResult
argument_list|>
name|in
parameter_list|)
block|{
name|Result
index|[]
name|out
init|=
operator|new
name|Result
index|[
name|in
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TResult
name|tResult
range|:
name|in
control|)
block|{
name|out
index|[
name|index
operator|++
index|]
operator|=
name|resultFromThrift
argument_list|(
name|tResult
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TGet
argument_list|>
name|getsFromHBase
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|in
parameter_list|)
block|{
name|List
argument_list|<
name|TGet
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Get
name|get
range|:
name|in
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|getFromHBase
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
block|}
end_class

end_unit

