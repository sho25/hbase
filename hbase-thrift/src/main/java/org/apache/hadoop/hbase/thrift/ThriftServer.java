begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|BACKLOG_CONF_DEAFULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|BACKLOG_CONF_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|BIND_CONF_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|BIND_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|COMPACT_CONF_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|COMPACT_CONF_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|COMPACT_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|DEFAULT_BIND_ADDR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|DEFAULT_HTTP_MAX_HEADER_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|DEFAULT_LISTEN_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|FRAMED_CONF_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|FRAMED_CONF_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|FRAMED_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|HTTP_MAX_THREADS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|HTTP_MAX_THREADS_KEY_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|HTTP_MIN_THREADS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|HTTP_MIN_THREADS_KEY_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|INFOPORT_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|KEEP_ALIVE_SEC_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|MAX_FRAME_SIZE_CONF_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|MAX_FRAME_SIZE_CONF_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|MAX_QUEUE_SIZE_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|MAX_WORKERS_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|MIN_WORKERS_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|PORT_CONF_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|PORT_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|READ_TIMEOUT_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|SELECTOR_NUM_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_DNS_INTERFACE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_DNS_NAMESERVER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_FILTERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_HTTP_ALLOW_OPTIONS_METHOD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_HTTP_ALLOW_OPTIONS_METHOD_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_INFO_SERVER_BINDING_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_INFO_SERVER_BINDING_ADDRESS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_INFO_SERVER_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_INFO_SERVER_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_QOP_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SELECTOR_NUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SERVER_SOCKET_READ_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SERVER_SOCKET_READ_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SPNEGO_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SPNEGO_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SSL_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SSL_EXCLUDE_CIPHER_SUITES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SSL_EXCLUDE_PROTOCOLS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SSL_INCLUDE_CIPHER_SUITES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SSL_INCLUDE_PROTOCOLS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SSL_KEYSTORE_KEYPASSWORD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SSL_KEYSTORE_PASSWORD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SSL_KEYSTORE_STORE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_SUPPORT_PROXYUSER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|USE_HTTP_CONF_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthorizeCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ParseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|HttpServerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|InfoServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JvmPauseMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ExitCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|THsHaServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TNonblockingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadedSelectorServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TNonblockingServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSaslServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SecureRequestCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SslConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_comment
comment|/**  * ThriftServer- this class starts up a Thrift server which implements the  * Hbase API specified in the Hbase.thrift IDL file. The server runs in an  * independent process.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
specifier|public
class|class
name|ThriftServer
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThriftServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|InfoServer
name|infoServer
decl_stmt|;
specifier|protected
name|TProcessor
name|processor
decl_stmt|;
specifier|protected
name|ThriftMetrics
name|metrics
decl_stmt|;
specifier|protected
name|HBaseServiceHandler
name|hbaseServiceHandler
decl_stmt|;
specifier|protected
name|UserGroupInformation
name|serviceUGI
decl_stmt|;
specifier|protected
name|UserGroupInformation
name|httpUGI
decl_stmt|;
specifier|protected
name|boolean
name|httpEnabled
decl_stmt|;
specifier|protected
name|SaslUtil
operator|.
name|QualityOfProtection
name|qop
decl_stmt|;
specifier|protected
name|String
name|host
decl_stmt|;
specifier|protected
name|int
name|listenPort
decl_stmt|;
specifier|protected
name|boolean
name|securityEnabled
decl_stmt|;
specifier|protected
name|boolean
name|doAsEnabled
decl_stmt|;
specifier|protected
name|JvmPauseMonitor
name|pauseMonitor
decl_stmt|;
specifier|protected
specifier|volatile
name|TServer
name|tserver
decl_stmt|;
specifier|protected
specifier|volatile
name|Server
name|httpServer
decl_stmt|;
comment|//
comment|// Main program and support routines
comment|//
specifier|public
name|ThriftServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ThriftMetrics
name|createThriftMetrics
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|ThriftMetrics
argument_list|(
name|conf
argument_list|,
name|ThriftMetrics
operator|.
name|ThriftServerType
operator|.
name|ONE
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setupParamters
parameter_list|()
throws|throws
name|IOException
block|{
comment|// login the server principal (if using secure Hadoop)
name|UserProvider
name|userProvider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|securityEnabled
operator|=
name|userProvider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
operator|&&
name|userProvider
operator|.
name|isHBaseSecurityEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|securityEnabled
condition|)
block|{
name|host
operator|=
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_DNS_INTERFACE_KEY
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_DNS_NAMESERVER_KEY
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|userProvider
operator|.
name|login
argument_list|(
name|THRIFT_KEYTAB_FILE_KEY
argument_list|,
name|THRIFT_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|host
argument_list|)
expr_stmt|;
comment|// Setup the SPNEGO user for HTTP if configured
name|String
name|spnegoPrincipal
init|=
name|getSpengoPrincipal
argument_list|(
name|conf
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|String
name|spnegoKeytab
init|=
name|getSpnegoKeytab
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// login the SPNEGO principal using UGI to avoid polluting the login user
name|this
operator|.
name|httpUGI
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|spnegoPrincipal
argument_list|,
name|spnegoKeytab
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|serviceUGI
operator|=
name|userProvider
operator|.
name|getCurrent
argument_list|()
operator|.
name|getUGI
argument_list|()
expr_stmt|;
if|if
condition|(
name|httpUGI
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|httpUGI
operator|=
name|serviceUGI
expr_stmt|;
block|}
name|this
operator|.
name|listenPort
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|PORT_CONF_KEY
argument_list|,
name|DEFAULT_LISTEN_PORT
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|createThriftMetrics
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|pauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|hbaseServiceHandler
operator|=
name|createHandler
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|hbaseServiceHandler
operator|.
name|initMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|createProcessor
argument_list|()
expr_stmt|;
name|httpEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|USE_HTTP_CONF_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doAsEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|THRIFT_SUPPORT_PROXYUSER_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|doAsEnabled
operator|&&
operator|!
name|httpEnabled
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fail to enable the doAs feature. "
operator|+
name|USE_HTTP_CONF_KEY
operator|+
literal|" is not configured"
argument_list|)
expr_stmt|;
block|}
name|String
name|strQop
init|=
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_QOP_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|strQop
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|qop
operator|=
name|SaslUtil
operator|.
name|getQop
argument_list|(
name|strQop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qop
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|qop
operator|!=
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|AUTHENTICATION
operator|&&
name|qop
operator|!=
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|INTEGRITY
operator|&&
name|qop
operator|!=
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|PRIVACY
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid %s: It must be one of %s, %s, or %s."
argument_list|,
name|THRIFT_QOP_KEY
argument_list|,
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|AUTHENTICATION
operator|.
name|name
argument_list|()
argument_list|,
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|INTEGRITY
operator|.
name|name
argument_list|()
argument_list|,
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|PRIVACY
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|checkHttpSecurity
argument_list|(
name|qop
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|securityEnabled
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Thrift server must run in secure mode to support authentication"
argument_list|)
throw|;
block|}
block|}
name|registerFilters
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getSpengoPrincipal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|host
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|principal
init|=
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_SPNEGO_PRINCIPAL_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
comment|// We cannot use the Hadoop configuration deprecation handling here since
comment|// the THRIFT_KERBEROS_PRINCIPAL_KEY config is still valid for regular Kerberos
comment|// communication. The preference should be to use the THRIFT_SPNEGO_PRINCIPAL_KEY
comment|// config so that THRIFT_KERBEROS_PRINCIPAL_KEY doesn't control both backend
comment|// Kerberos principal and SPNEGO principal.
name|LOG
operator|.
name|info
argument_list|(
literal|"Using deprecated {} config for SPNEGO principal. Use {} instead."
argument_list|,
name|THRIFT_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|THRIFT_SPNEGO_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
name|principal
operator|=
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_KERBEROS_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
block|}
comment|// Handle _HOST in principal value
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principal
argument_list|,
name|host
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSpnegoKeytab
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|keytab
init|=
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_SPNEGO_KEYTAB_FILE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|keytab
operator|==
literal|null
condition|)
block|{
comment|// We cannot use the Hadoop configuration deprecation handling here since
comment|// the THRIFT_KEYTAB_FILE_KEY config is still valid for regular Kerberos
comment|// communication. The preference should be to use the THRIFT_SPNEGO_KEYTAB_FILE_KEY
comment|// config so that THRIFT_KEYTAB_FILE_KEY doesn't control both backend
comment|// Kerberos keytab and SPNEGO keytab.
name|LOG
operator|.
name|info
argument_list|(
literal|"Using deprecated {} config for SPNEGO keytab. Use {} instead."
argument_list|,
name|THRIFT_KEYTAB_FILE_KEY
argument_list|,
name|THRIFT_SPNEGO_KEYTAB_FILE_KEY
argument_list|)
expr_stmt|;
name|keytab
operator|=
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_KEYTAB_FILE_KEY
argument_list|)
expr_stmt|;
block|}
return|return
name|keytab
return|;
block|}
specifier|protected
name|void
name|startInfoServer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Put up info server.
name|int
name|port
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|THRIFT_INFO_SERVER_PORT
argument_list|,
name|THRIFT_INFO_SERVER_PORT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
literal|"startcode"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|a
init|=
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_INFO_SERVER_BINDING_ADDRESS
argument_list|,
name|THRIFT_INFO_SERVER_BINDING_ADDRESS_DEFAULT
argument_list|)
decl_stmt|;
name|infoServer
operator|=
operator|new
name|InfoServer
argument_list|(
literal|"thrift"
argument_list|,
name|a
argument_list|,
name|port
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|setAttribute
argument_list|(
literal|"hbase.conf"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|setAttribute
argument_list|(
literal|"hbase.thrift.server.type"
argument_list|,
name|metrics
operator|.
name|getThriftServerType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|checkHttpSecurity
parameter_list|(
name|SaslUtil
operator|.
name|QualityOfProtection
name|qop
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|qop
operator|==
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|PRIVACY
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|USE_HTTP_CONF_KEY
argument_list|,
literal|false
argument_list|)
operator|&&
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|THRIFT_SSL_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Thrift HTTP Server's QoP is privacy, but "
operator|+
name|THRIFT_SSL_ENABLED_KEY
operator|+
literal|" is false"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|HBaseServiceHandler
name|createHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserProvider
name|userProvider
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|)
return|;
block|}
specifier|protected
name|TProcessor
name|createProcessor
parameter_list|()
block|{
return|return
operator|new
name|Hbase
operator|.
name|Processor
argument_list|<>
argument_list|(
name|HbaseHandlerMetricsProxy
operator|.
name|newInstance
argument_list|(
operator|(
name|Hbase
operator|.
name|Iface
operator|)
name|hbaseServiceHandler
argument_list|,
name|metrics
argument_list|,
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * the thrift server, not null means the server is started, for test only    * @return the tServer    */
annotation|@
name|VisibleForTesting
specifier|public
name|TServer
name|getTserver
parameter_list|()
block|{
return|return
name|tserver
return|;
block|}
comment|/**    * the Jetty server, not null means the HTTP server is started, for test only    * @return the http server    */
annotation|@
name|VisibleForTesting
specifier|public
name|Server
name|getHttpServer
parameter_list|()
block|{
return|return
name|httpServer
return|;
block|}
specifier|protected
name|void
name|printUsageAndExit
parameter_list|(
name|Options
name|options
parameter_list|,
name|int
name|exitCode
parameter_list|)
throws|throws
name|ExitCodeException
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"Thrift"
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
literal|"To start the Thrift server run 'hbase-daemon.sh start thrift' or "
operator|+
literal|"'hbase thrift'\n"
operator|+
literal|"To shutdown the thrift server run 'hbase-daemon.sh stop "
operator|+
literal|"thrift' or send a kill signal to the thrift server pid"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExitCodeException
argument_list|(
name|exitCode
argument_list|,
literal|""
argument_list|)
throw|;
block|}
comment|/**    * Create a Servlet for the http server    * @param protocolFactory protocolFactory    * @return the servlet    */
specifier|protected
name|TServlet
name|createTServlet
parameter_list|(
name|TProtocolFactory
name|protocolFactory
parameter_list|)
block|{
return|return
operator|new
name|ThriftHttpServlet
argument_list|(
name|processor
argument_list|,
name|protocolFactory
argument_list|,
name|serviceUGI
argument_list|,
name|httpUGI
argument_list|,
name|hbaseServiceHandler
argument_list|,
name|securityEnabled
argument_list|,
name|doAsEnabled
argument_list|)
return|;
block|}
comment|/**    * Setup an HTTP Server using Jetty to serve calls from THttpClient    *    * @throws IOException IOException    */
specifier|protected
name|void
name|setupHTTPServer
parameter_list|()
throws|throws
name|IOException
block|{
name|TProtocolFactory
name|protocolFactory
init|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|TServlet
name|thriftHttpServlet
init|=
name|createTServlet
argument_list|(
name|protocolFactory
argument_list|)
decl_stmt|;
comment|// Set the default max thread number to 100 to limit
comment|// the number of concurrent requests so that Thrfit HTTP server doesn't OOM easily.
comment|// Jetty set the default max thread number to 250, if we don't set it.
comment|//
comment|// Our default min thread number 2 is the same as that used by Jetty.
name|int
name|minThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HTTP_MIN_THREADS_KEY
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|TBoundedThreadPoolServer
operator|.
name|MIN_WORKER_THREADS_CONF_KEY
argument_list|,
name|HTTP_MIN_THREADS_KEY_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HTTP_MAX_THREADS_KEY
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|TBoundedThreadPoolServer
operator|.
name|MAX_WORKER_THREADS_CONF_KEY
argument_list|,
name|HTTP_MAX_THREADS_KEY_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|QueuedThreadPool
name|threadPool
init|=
operator|new
name|QueuedThreadPool
argument_list|(
name|maxThreads
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|setMinThreads
argument_list|(
name|minThreads
argument_list|)
expr_stmt|;
name|httpServer
operator|=
operator|new
name|Server
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
comment|// Context handler
name|ServletContextHandler
name|ctxHandler
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|httpServer
argument_list|,
literal|"/"
argument_list|,
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|ctxHandler
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|thriftHttpServlet
argument_list|)
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
name|HttpServerUtil
operator|.
name|constrainHttpMethods
argument_list|(
name|ctxHandler
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|THRIFT_HTTP_ALLOW_OPTIONS_METHOD
argument_list|,
name|THRIFT_HTTP_ALLOW_OPTIONS_METHOD_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
comment|// set up Jetty and run the embedded server
name|HttpConfiguration
name|httpConfig
init|=
operator|new
name|HttpConfiguration
argument_list|()
decl_stmt|;
name|httpConfig
operator|.
name|setSecureScheme
argument_list|(
literal|"https"
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setSecurePort
argument_list|(
name|listenPort
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setHeaderCacheSize
argument_list|(
name|DEFAULT_HTTP_MAX_HEADER_SIZE
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setRequestHeaderSize
argument_list|(
name|DEFAULT_HTTP_MAX_HEADER_SIZE
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setResponseHeaderSize
argument_list|(
name|DEFAULT_HTTP_MAX_HEADER_SIZE
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setSendServerVersion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|httpConfig
operator|.
name|setSendDateHeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ServerConnector
name|serverConnector
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|THRIFT_SSL_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|HttpConfiguration
name|httpsConfig
init|=
operator|new
name|HttpConfiguration
argument_list|(
name|httpConfig
argument_list|)
decl_stmt|;
name|httpsConfig
operator|.
name|addCustomizer
argument_list|(
operator|new
name|SecureRequestCustomizer
argument_list|()
argument_list|)
expr_stmt|;
name|SslContextFactory
name|sslCtxFactory
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
name|String
name|keystore
init|=
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_SSL_KEYSTORE_STORE_KEY
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|HBaseConfiguration
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|THRIFT_SSL_KEYSTORE_PASSWORD_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|keyPassword
init|=
name|HBaseConfiguration
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|THRIFT_SSL_KEYSTORE_KEYPASSWORD_KEY
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|sslCtxFactory
operator|.
name|setKeyStorePath
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|sslCtxFactory
operator|.
name|setKeyStorePassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|sslCtxFactory
operator|.
name|setKeyManagerPassword
argument_list|(
name|keyPassword
argument_list|)
expr_stmt|;
name|String
index|[]
name|excludeCiphers
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|THRIFT_SSL_EXCLUDE_CIPHER_SUITES_KEY
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeCiphers
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sslCtxFactory
operator|.
name|setExcludeCipherSuites
argument_list|(
name|excludeCiphers
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|includeCiphers
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|THRIFT_SSL_INCLUDE_CIPHER_SUITES_KEY
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeCiphers
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sslCtxFactory
operator|.
name|setIncludeCipherSuites
argument_list|(
name|includeCiphers
argument_list|)
expr_stmt|;
block|}
comment|// Disable SSLv3 by default due to "Poodle" Vulnerability - CVE-2014-3566
name|String
index|[]
name|excludeProtocols
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|THRIFT_SSL_EXCLUDE_PROTOCOLS_KEY
argument_list|,
literal|"SSLv3"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeProtocols
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sslCtxFactory
operator|.
name|setExcludeProtocols
argument_list|(
name|excludeProtocols
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|includeProtocols
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|THRIFT_SSL_INCLUDE_PROTOCOLS_KEY
argument_list|,
name|ArrayUtils
operator|.
name|EMPTY_STRING_ARRAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeProtocols
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|sslCtxFactory
operator|.
name|setIncludeProtocols
argument_list|(
name|includeProtocols
argument_list|)
expr_stmt|;
block|}
name|serverConnector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|httpServer
argument_list|,
operator|new
name|SslConnectionFactory
argument_list|(
name|sslCtxFactory
argument_list|,
name|HttpVersion
operator|.
name|HTTP_1_1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|httpsConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverConnector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|httpServer
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|httpConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|serverConnector
operator|.
name|setPort
argument_list|(
name|listenPort
argument_list|)
expr_stmt|;
name|serverConnector
operator|.
name|setHost
argument_list|(
name|getBindAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|addConnector
argument_list|(
name|serverConnector
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|setStopAtShutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|doAsEnabled
condition|)
block|{
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Thrift HTTP Server on {}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|listenPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setting up the thrift TServer    */
specifier|protected
name|void
name|setupServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Construct correct ProtocolFactory
name|TProtocolFactory
name|protocolFactory
init|=
name|getProtocolFactory
argument_list|()
decl_stmt|;
name|ImplType
name|implType
init|=
name|ImplType
operator|.
name|getServerImpl
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TProcessor
name|processorToUse
init|=
name|processor
decl_stmt|;
comment|// Construct correct TransportFactory
name|TTransportFactory
name|transportFactory
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|FRAMED_CONF_KEY
argument_list|,
name|FRAMED_CONF_DEFAULT
argument_list|)
operator|||
name|implType
operator|.
name|isAlwaysFramed
condition|)
block|{
if|if
condition|(
name|qop
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Thrift server authentication"
operator|+
literal|" doesn't work with framed transport yet"
argument_list|)
throw|;
block|}
name|transportFactory
operator|=
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_FRAME_SIZE_CONF_KEY
argument_list|,
name|MAX_FRAME_SIZE_CONF_DEFAULT
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using framed transport"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qop
operator|==
literal|null
condition|)
block|{
name|transportFactory
operator|=
operator|new
name|TTransportFactory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Extract the name from the principal
name|String
name|thriftKerberosPrincipal
init|=
name|conf
operator|.
name|get
argument_list|(
name|THRIFT_KERBEROS_PRINCIPAL_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|thriftKerberosPrincipal
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|THRIFT_KERBEROS_PRINCIPAL_KEY
operator|+
literal|" cannot be null"
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|SecurityUtil
operator|.
name|getUserFromPrincipal
argument_list|(
name|thriftKerberosPrincipal
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProperties
init|=
name|SaslUtil
operator|.
name|initSaslProperties
argument_list|(
name|qop
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|TSaslServerTransport
operator|.
name|Factory
name|saslFactory
init|=
operator|new
name|TSaslServerTransport
operator|.
name|Factory
argument_list|()
decl_stmt|;
name|saslFactory
operator|.
name|addServerDefinition
argument_list|(
literal|"GSSAPI"
argument_list|,
name|name
argument_list|,
name|host
argument_list|,
name|saslProperties
argument_list|,
operator|new
name|SaslRpcServer
operator|.
name|SaslGssCallbackHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|UnsupportedCallbackException
block|{
name|AuthorizeCallback
name|ac
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|AuthorizeCallback
condition|)
block|{
name|ac
operator|=
operator|(
name|AuthorizeCallback
operator|)
name|callback
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL GSSAPI Callback"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|ac
operator|!=
literal|null
condition|)
block|{
name|String
name|authid
init|=
name|ac
operator|.
name|getAuthenticationID
argument_list|()
decl_stmt|;
name|String
name|authzid
init|=
name|ac
operator|.
name|getAuthorizationID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|authid
operator|.
name|equals
argument_list|(
name|authzid
argument_list|)
condition|)
block|{
name|ac
operator|.
name|setAuthorized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ac
operator|.
name|setAuthorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|SecurityUtil
operator|.
name|getUserFromPrincipal
argument_list|(
name|authzid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Effective user: {}"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|ac
operator|.
name|setAuthorizedID
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|transportFactory
operator|=
name|saslFactory
expr_stmt|;
comment|// Create a processor wrapper, to get the caller
name|processorToUse
operator|=
parameter_list|(
name|inProt
parameter_list|,
name|outProt
parameter_list|)
lambda|->
block|{
name|TSaslServerTransport
name|saslServerTransport
init|=
operator|(
name|TSaslServerTransport
operator|)
name|inProt
operator|.
name|getTransport
argument_list|()
decl_stmt|;
name|SaslServer
name|saslServer
init|=
name|saslServerTransport
operator|.
name|getSaslServer
argument_list|()
decl_stmt|;
name|String
name|principal
init|=
name|saslServer
operator|.
name|getAuthorizationID
argument_list|()
decl_stmt|;
name|hbaseServiceHandler
operator|.
name|setEffectiveUser
argument_list|(
name|principal
argument_list|)
expr_stmt|;
return|return
name|processor
operator|.
name|process
argument_list|(
name|inProt
argument_list|,
name|outProt
argument_list|)
return|;
block|}
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|BIND_CONF_KEY
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|implType
operator|.
name|canSpecifyBindIP
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Server types {} don't support IP address binding at the moment. See "
operator|+
literal|"https://issues.apache.org/jira/browse/HBASE-2155 for details."
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|ImplType
operator|.
name|serversThatCannotSpecifyBindIP
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"-"
operator|+
name|BIND_CONF_KEY
operator|+
literal|" not supported with "
operator|+
name|implType
argument_list|)
throw|;
block|}
name|InetSocketAddress
name|inetSocketAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|getBindAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|listenPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|implType
operator|==
name|ImplType
operator|.
name|HS_HA
operator|||
name|implType
operator|==
name|ImplType
operator|.
name|NONBLOCKING
operator|||
name|implType
operator|==
name|ImplType
operator|.
name|THREADED_SELECTOR
condition|)
block|{
name|TNonblockingServerTransport
name|serverTransport
init|=
operator|new
name|TNonblockingServerSocket
argument_list|(
name|inetSocketAddress
argument_list|)
decl_stmt|;
if|if
condition|(
name|implType
operator|==
name|ImplType
operator|.
name|NONBLOCKING
condition|)
block|{
name|tserver
operator|=
name|getTNonBlockingServer
argument_list|(
name|serverTransport
argument_list|,
name|protocolFactory
argument_list|,
name|processorToUse
argument_list|,
name|transportFactory
argument_list|,
name|inetSocketAddress
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|implType
operator|==
name|ImplType
operator|.
name|HS_HA
condition|)
block|{
name|tserver
operator|=
name|getTHsHaServer
argument_list|(
name|serverTransport
argument_list|,
name|protocolFactory
argument_list|,
name|processorToUse
argument_list|,
name|transportFactory
argument_list|,
name|inetSocketAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// THREADED_SELECTOR
name|tserver
operator|=
name|getTThreadedSelectorServer
argument_list|(
name|serverTransport
argument_list|,
name|protocolFactory
argument_list|,
name|processorToUse
argument_list|,
name|transportFactory
argument_list|,
name|inetSocketAddress
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase {} server on {}"
argument_list|,
name|implType
operator|.
name|simpleClassName
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|listenPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|implType
operator|==
name|ImplType
operator|.
name|THREAD_POOL
condition|)
block|{
name|this
operator|.
name|tserver
operator|=
name|getTThreadPoolServer
argument_list|(
name|protocolFactory
argument_list|,
name|processorToUse
argument_list|,
name|transportFactory
argument_list|,
name|inetSocketAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported Thrift server implementation: "
operator|+
name|implType
operator|.
name|simpleClassName
argument_list|()
argument_list|)
throw|;
block|}
comment|// A sanity check that we instantiated the right type of server.
if|if
condition|(
name|tserver
operator|.
name|getClass
argument_list|()
operator|!=
name|implType
operator|.
name|serverClass
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected to create Thrift server class "
operator|+
name|implType
operator|.
name|serverClass
operator|.
name|getName
argument_list|()
operator|+
literal|" but got "
operator|+
name|tserver
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|TServer
name|getTNonBlockingServer
parameter_list|(
name|TNonblockingServerTransport
name|serverTransport
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TProcessor
name|processor
parameter_list|,
name|TTransportFactory
name|transportFactory
parameter_list|,
name|InetSocketAddress
name|inetSocketAddress
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase Nonblocking Thrift server on "
operator|+
name|inetSocketAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TNonblockingServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|TNonblockingServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|serverArgs
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
expr_stmt|;
name|serverArgs
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
return|return
operator|new
name|TNonblockingServer
argument_list|(
name|serverArgs
argument_list|)
return|;
block|}
specifier|protected
name|TServer
name|getTHsHaServer
parameter_list|(
name|TNonblockingServerTransport
name|serverTransport
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TProcessor
name|processor
parameter_list|,
name|TTransportFactory
name|transportFactory
parameter_list|,
name|InetSocketAddress
name|inetSocketAddress
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase HsHA Thrift server on "
operator|+
name|inetSocketAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|THsHaServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|THsHaServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
decl_stmt|;
name|int
name|queueSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TBoundedThreadPoolServer
operator|.
name|MAX_QUEUED_REQUESTS_CONF_KEY
argument_list|,
name|TBoundedThreadPoolServer
operator|.
name|DEFAULT_MAX_QUEUED_REQUESTS
argument_list|)
decl_stmt|;
name|CallQueue
name|callQueue
init|=
operator|new
name|CallQueue
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|queueSize
argument_list|)
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|int
name|workerThread
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TBoundedThreadPoolServer
operator|.
name|MAX_WORKER_THREADS_CONF_KEY
argument_list|,
name|serverArgs
operator|.
name|getMaxWorkerThreads
argument_list|()
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|createExecutor
argument_list|(
name|callQueue
argument_list|,
name|workerThread
argument_list|,
name|workerThread
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|executorService
argument_list|(
name|executorService
argument_list|)
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
return|return
operator|new
name|THsHaServer
argument_list|(
name|serverArgs
argument_list|)
return|;
block|}
specifier|protected
name|TServer
name|getTThreadedSelectorServer
parameter_list|(
name|TNonblockingServerTransport
name|serverTransport
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TProcessor
name|processor
parameter_list|,
name|TTransportFactory
name|transportFactory
parameter_list|,
name|InetSocketAddress
name|inetSocketAddress
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase ThreadedSelector Thrift server on "
operator|+
name|inetSocketAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TThreadedSelectorServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|HThreadedSelectorServerArgs
argument_list|(
name|serverTransport
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|queueSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TBoundedThreadPoolServer
operator|.
name|MAX_QUEUED_REQUESTS_CONF_KEY
argument_list|,
name|TBoundedThreadPoolServer
operator|.
name|DEFAULT_MAX_QUEUED_REQUESTS
argument_list|)
decl_stmt|;
name|CallQueue
name|callQueue
init|=
operator|new
name|CallQueue
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|queueSize
argument_list|)
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|int
name|workerThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TBoundedThreadPoolServer
operator|.
name|MAX_WORKER_THREADS_CONF_KEY
argument_list|,
name|serverArgs
operator|.
name|getWorkerThreads
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|selectorThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|THRIFT_SELECTOR_NUM
argument_list|,
name|serverArgs
operator|.
name|getSelectorThreads
argument_list|()
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|selectorThreads
argument_list|(
name|selectorThreads
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|createExecutor
argument_list|(
name|callQueue
argument_list|,
name|workerThreads
argument_list|,
name|workerThreads
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|executorService
argument_list|(
name|executorService
argument_list|)
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
return|return
operator|new
name|TThreadedSelectorServer
argument_list|(
name|serverArgs
argument_list|)
return|;
block|}
specifier|protected
name|TServer
name|getTThreadPoolServer
parameter_list|(
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TProcessor
name|processor
parameter_list|,
name|TTransportFactory
name|transportFactory
parameter_list|,
name|InetSocketAddress
name|inetSocketAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting HBase ThreadPool Thrift server on "
operator|+
name|inetSocketAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Thrift's implementation uses '0' as a placeholder for 'use the default.'
name|int
name|backlog
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|BACKLOG_CONF_KEY
argument_list|,
name|BACKLOG_CONF_DEAFULT
argument_list|)
decl_stmt|;
name|int
name|readTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|THRIFT_SERVER_SOCKET_READ_TIMEOUT_KEY
argument_list|,
name|THRIFT_SERVER_SOCKET_READ_TIMEOUT_DEFAULT
argument_list|)
decl_stmt|;
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
operator|new
name|TServerSocket
operator|.
name|ServerSocketTransportArgs
argument_list|()
operator|.
name|bindAddr
argument_list|(
name|inetSocketAddress
argument_list|)
operator|.
name|backlog
argument_list|(
name|backlog
argument_list|)
operator|.
name|clientTimeout
argument_list|(
name|readTimeout
argument_list|)
argument_list|)
decl_stmt|;
name|TBoundedThreadPoolServer
operator|.
name|Args
name|serverArgs
init|=
operator|new
name|TBoundedThreadPoolServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|serverArgs
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transportFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
expr_stmt|;
return|return
operator|new
name|TBoundedThreadPoolServer
argument_list|(
name|serverArgs
argument_list|,
name|metrics
argument_list|)
return|;
block|}
specifier|protected
name|TProtocolFactory
name|getProtocolFactory
parameter_list|()
block|{
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|COMPACT_CONF_KEY
argument_list|,
name|COMPACT_CONF_DEFAULT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using compact protocol"
argument_list|)
expr_stmt|;
name|protocolFactory
operator|=
operator|new
name|TCompactProtocol
operator|.
name|Factory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using binary protocol"
argument_list|)
expr_stmt|;
name|protocolFactory
operator|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
expr_stmt|;
block|}
return|return
name|protocolFactory
return|;
block|}
specifier|protected
name|ExecutorService
name|createExecutor
parameter_list|(
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|callQueue
parameter_list|,
name|int
name|minWorkers
parameter_list|,
name|int
name|maxWorkers
parameter_list|)
block|{
name|ThreadFactoryBuilder
name|tfb
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
decl_stmt|;
name|tfb
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tfb
operator|.
name|setNameFormat
argument_list|(
literal|"thrift-worker-%d"
argument_list|)
expr_stmt|;
name|ThreadPoolExecutor
name|threadPool
init|=
operator|new
name|THBaseThreadPoolExecutor
argument_list|(
name|minWorkers
argument_list|,
name|maxWorkers
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|callQueue
argument_list|,
name|tfb
operator|.
name|build
argument_list|()
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|threadPool
return|;
block|}
specifier|protected
name|InetAddress
name|getBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|String
name|bindAddressStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|BIND_CONF_KEY
argument_list|,
name|DEFAULT_BIND_ADDR
argument_list|)
decl_stmt|;
return|return
name|InetAddress
operator|.
name|getByName
argument_list|(
name|bindAddressStr
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|registerFilters
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
name|filters
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|THRIFT_FILTERS
argument_list|)
decl_stmt|;
name|Splitter
name|splitter
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|filterClass
range|:
name|filters
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filterPart
init|=
name|splitter
operator|.
name|splitToList
argument_list|(
name|filterClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterPart
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid filter specification "
operator|+
name|filterClass
operator|+
literal|" - skipping"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParseFilter
operator|.
name|registerFilter
argument_list|(
name|filterPart
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|filterPart
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Add options to command lines    * @param options options    */
specifier|protected
name|void
name|addOptions
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|options
operator|.
name|addOption
argument_list|(
literal|"b"
argument_list|,
name|BIND_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Address to bind "
operator|+
literal|"the Thrift server to. [default: "
operator|+
name|DEFAULT_BIND_ADDR
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"p"
argument_list|,
name|PORT_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Port to bind to [default: "
operator|+
name|DEFAULT_LISTEN_PORT
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"f"
argument_list|,
name|FRAMED_OPTION
argument_list|,
literal|false
argument_list|,
literal|"Use framed transport"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"c"
argument_list|,
name|COMPACT_OPTION
argument_list|,
literal|false
argument_list|,
literal|"Use the compact protocol"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help information"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"s"
argument_list|,
name|SELECTOR_NUM_OPTION
argument_list|,
literal|true
argument_list|,
literal|"How many selector threads to use."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|INFOPORT_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Port for web UI"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"m"
argument_list|,
name|MIN_WORKERS_OPTION
argument_list|,
literal|true
argument_list|,
literal|"The minimum number of worker threads for "
operator|+
name|ImplType
operator|.
name|THREAD_POOL
operator|.
name|simpleClassName
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"w"
argument_list|,
name|MAX_WORKERS_OPTION
argument_list|,
literal|true
argument_list|,
literal|"The maximum number of worker threads for "
operator|+
name|ImplType
operator|.
name|THREAD_POOL
operator|.
name|simpleClassName
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"q"
argument_list|,
name|MAX_QUEUE_SIZE_OPTION
argument_list|,
literal|true
argument_list|,
literal|"The maximum number of queued requests in "
operator|+
name|ImplType
operator|.
name|THREAD_POOL
operator|.
name|simpleClassName
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"k"
argument_list|,
name|KEEP_ALIVE_SEC_OPTION
argument_list|,
literal|true
argument_list|,
literal|"The amount of time in secods to keep a thread alive when idle in "
operator|+
name|ImplType
operator|.
name|THREAD_POOL
operator|.
name|simpleClassName
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"t"
argument_list|,
name|READ_TIMEOUT_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Amount of time in milliseconds before a server thread will timeout "
operator|+
literal|"waiting for client to send data on a connected socket. Currently, "
operator|+
literal|"only applies to TBoundedThreadPoolServer"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOptionGroup
argument_list|(
name|ImplType
operator|.
name|createOptionGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|parseCommandLine
parameter_list|(
name|CommandLine
name|cmd
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|ExitCodeException
block|{
comment|// Get port to bind to
try|try
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|PORT_OPTION
argument_list|)
condition|)
block|{
name|int
name|listenPort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|PORT_OPTION
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|PORT_CONF_KEY
argument_list|,
name|listenPort
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not parse the value provided for the port option"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// check for user-defined info server port setting, if so override the conf
try|try
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|INFOPORT_OPTION
argument_list|)
condition|)
block|{
name|String
name|val
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|INFOPORT_OPTION
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|THRIFT_INFO_SERVER_PORT
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Web UI port set to "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not parse the value provided for the "
operator|+
name|INFOPORT_OPTION
operator|+
literal|" option"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Make optional changes to the configuration based on command-line options
name|optionToConf
argument_list|(
name|cmd
argument_list|,
name|MIN_WORKERS_OPTION
argument_list|,
name|conf
argument_list|,
name|TBoundedThreadPoolServer
operator|.
name|MIN_WORKER_THREADS_CONF_KEY
argument_list|)
expr_stmt|;
name|optionToConf
argument_list|(
name|cmd
argument_list|,
name|MAX_WORKERS_OPTION
argument_list|,
name|conf
argument_list|,
name|TBoundedThreadPoolServer
operator|.
name|MAX_WORKER_THREADS_CONF_KEY
argument_list|)
expr_stmt|;
name|optionToConf
argument_list|(
name|cmd
argument_list|,
name|MAX_QUEUE_SIZE_OPTION
argument_list|,
name|conf
argument_list|,
name|TBoundedThreadPoolServer
operator|.
name|MAX_QUEUED_REQUESTS_CONF_KEY
argument_list|)
expr_stmt|;
name|optionToConf
argument_list|(
name|cmd
argument_list|,
name|KEEP_ALIVE_SEC_OPTION
argument_list|,
name|conf
argument_list|,
name|TBoundedThreadPoolServer
operator|.
name|THREAD_KEEP_ALIVE_TIME_SEC_CONF_KEY
argument_list|)
expr_stmt|;
name|optionToConf
argument_list|(
name|cmd
argument_list|,
name|READ_TIMEOUT_OPTION
argument_list|,
name|conf
argument_list|,
name|THRIFT_SERVER_SOCKET_READ_TIMEOUT_KEY
argument_list|)
expr_stmt|;
name|optionToConf
argument_list|(
name|cmd
argument_list|,
name|SELECTOR_NUM_OPTION
argument_list|,
name|conf
argument_list|,
name|THRIFT_SELECTOR_NUM
argument_list|)
expr_stmt|;
comment|// Set general thrift server options
name|boolean
name|compact
init|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|COMPACT_OPTION
argument_list|)
operator|||
name|conf
operator|.
name|getBoolean
argument_list|(
name|COMPACT_CONF_KEY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|COMPACT_CONF_KEY
argument_list|,
name|compact
argument_list|)
expr_stmt|;
name|boolean
name|framed
init|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|FRAMED_OPTION
argument_list|)
operator|||
name|conf
operator|.
name|getBoolean
argument_list|(
name|FRAMED_CONF_KEY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FRAMED_CONF_KEY
argument_list|,
name|framed
argument_list|)
expr_stmt|;
name|optionToConf
argument_list|(
name|cmd
argument_list|,
name|BIND_OPTION
argument_list|,
name|conf
argument_list|,
name|BIND_CONF_KEY
argument_list|)
expr_stmt|;
name|ImplType
operator|.
name|setServerImpl
argument_list|(
name|cmd
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parse the command line options to set parameters the conf.    */
specifier|protected
name|void
name|processOptions
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|addOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|DefaultParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|printUsageAndExit
argument_list|(
name|options
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|parseCommandLine
argument_list|(
name|cmd
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|infoServer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping infoServer"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|infoServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop infoServer"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pauseMonitor
operator|!=
literal|null
condition|)
block|{
name|pauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tserver
operator|!=
literal|null
condition|)
block|{
name|tserver
operator|.
name|stop
argument_list|()
expr_stmt|;
name|tserver
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|httpServer
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem encountered in shutting down HTTP server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|httpServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|optionToConf
parameter_list|(
name|CommandLine
name|cmd
parameter_list|,
name|String
name|option
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|destConfKey
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set configuration key:"
operator|+
name|destConfKey
operator|+
literal|" value:"
operator|+
name|value
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|destConfKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run without any command line arguments    * @return exit code    * @throws Exception exception    */
specifier|public
name|int
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|run
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|strings
parameter_list|)
throws|throws
name|Exception
block|{
name|processOptions
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|setupParamters
argument_list|()
expr_stmt|;
name|startInfoServer
argument_list|()
expr_stmt|;
if|if
condition|(
name|httpEnabled
condition|)
block|{
name|setupHTTPServer
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setupServer
argument_list|()
expr_stmt|;
name|tserver
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"***** STARTING service '"
operator|+
name|ThriftServer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"' *****"
argument_list|)
expr_stmt|;
name|VersionInfo
operator|.
name|logVersion
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// for now, only time we return is on an argument error.
specifier|final
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|ThriftServer
argument_list|(
name|conf
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***** STOPPING service '"
operator|+
name|ThriftServer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"' *****"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

