begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|ImplType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|TestThriftServerCmdLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|THBaseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestThrift2ServerCmdLine
extends|extends
name|TestThriftServerCmdLine
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestThrift2ServerCmdLine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLENAME
init|=
literal|"TestThrift2ServerCmdLineTable"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ThriftServer
name|createThriftServer
parameter_list|()
block|{
return|return
operator|new
name|ThriftServer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|TestThrift2ServerCmdLine
parameter_list|(
name|ImplType
name|implType
parameter_list|,
name|boolean
name|specifyFramed
parameter_list|,
name|boolean
name|specifyBindIP
parameter_list|,
name|boolean
name|specifyCompact
parameter_list|)
block|{
name|super
argument_list|(
name|implType
argument_list|,
name|specifyFramed
argument_list|,
name|specifyBindIP
argument_list|,
name|specifyCompact
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|talkToThriftServer
parameter_list|()
throws|throws
name|Exception
block|{
name|TSocket
name|sock
init|=
operator|new
name|TSocket
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|TTransport
name|transport
init|=
name|sock
decl_stmt|;
if|if
condition|(
name|specifyFramed
operator|||
name|implType
operator|.
name|isAlwaysFramed
argument_list|()
condition|)
block|{
name|transport
operator|=
operator|new
name|TFramedTransport
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
name|sock
operator|.
name|open
argument_list|()
expr_stmt|;
try|try
block|{
name|TProtocol
name|tProtocol
decl_stmt|;
if|if
condition|(
name|specifyCompact
condition|)
block|{
name|tProtocol
operator|=
operator|new
name|TCompactProtocol
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tProtocol
operator|=
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
name|THBaseService
operator|.
name|Client
name|client
init|=
operator|new
name|THBaseService
operator|.
name|Client
argument_list|(
name|tProtocol
argument_list|)
decl_stmt|;
name|TTableName
name|tTableName
init|=
operator|new
name|TTableName
argument_list|()
decl_stmt|;
name|tTableName
operator|.
name|setNs
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|tTableName
operator|.
name|setQualifier
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tableCreated
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|client
operator|.
name|tableExists
argument_list|(
name|tTableName
argument_list|)
argument_list|)
expr_stmt|;
name|TTableDescriptor
name|tTableDescriptor
init|=
operator|new
name|TTableDescriptor
argument_list|()
decl_stmt|;
name|tTableDescriptor
operator|.
name|setTableName
argument_list|(
name|tTableName
argument_list|)
expr_stmt|;
name|TColumnFamilyDescriptor
name|columnFamilyDescriptor
init|=
operator|new
name|TColumnFamilyDescriptor
argument_list|()
decl_stmt|;
name|columnFamilyDescriptor
operator|.
name|setName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|tTableDescriptor
operator|.
name|addToColumns
argument_list|(
name|columnFamilyDescriptor
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tTableDescriptor
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCreated
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"tableCreated "
operator|+
name|tableCreated
argument_list|,
name|client
operator|.
name|tableExists
argument_list|(
name|tTableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

