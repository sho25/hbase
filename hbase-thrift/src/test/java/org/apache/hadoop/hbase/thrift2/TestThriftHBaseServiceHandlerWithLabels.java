begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|ScanLabelGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|SimpleScanLabelGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TAppend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TAuthorization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestThriftHBaseServiceHandlerWithLabels
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestThriftHBaseServiceHandlerWithLabels
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Static names for tables, columns, rows, and values
specifier|private
specifier|static
name|byte
index|[]
name|tableAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tableA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|familyAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|familyBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|qualifierAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifierA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|qualifierBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifierB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HColumnDescriptor
index|[]
name|families
init|=
operator|new
name|HColumnDescriptor
index|[]
block|{
operator|new
name|HColumnDescriptor
argument_list|(
name|familyAname
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
block|,
operator|new
name|HColumnDescriptor
argument_list|(
name|familyBname
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TOPSECRET
init|=
literal|"topsecret"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PUBLIC
init|=
literal|"public"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PRIVATE
init|=
literal|"private"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|CONFIDENTIAL
init|=
literal|"confidential"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SECRET
init|=
literal|"secret"
decl_stmt|;
specifier|private
specifier|static
name|User
name|SUPERUSER
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|void
name|assertTColumnValuesEqual
parameter_list|(
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesA
parameter_list|,
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesB
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|columnValuesA
operator|.
name|size
argument_list|()
argument_list|,
name|columnValuesB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|TColumnValue
argument_list|>
name|comparator
init|=
operator|new
name|Comparator
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TColumnValue
name|o1
parameter_list|,
name|TColumnValue
name|o2
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|o1
operator|.
name|getFamily
argument_list|()
argument_list|,
name|o1
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|o2
operator|.
name|getFamily
argument_list|()
argument_list|,
name|o2
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|columnValuesA
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|columnValuesB
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnValuesA
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TColumnValue
name|a
init|=
name|columnValuesA
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TColumnValue
name|b
init|=
name|columnValuesB
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|a
operator|.
name|getFamily
argument_list|()
argument_list|,
name|b
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|a
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|b
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
argument_list|,
name|b
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|SUPERUSER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|VisibilityUtils
operator|.
name|VISIBILITY_LABEL_GENERATOR_CLASS
argument_list|,
name|SimpleScanLabelGenerator
operator|.
name|class
argument_list|,
name|ScanLabelGenerator
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.superuser"
argument_list|,
name|SUPERUSER
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.master.classes"
argument_list|,
name|VisibilityController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.region.classes"
argument_list|,
name|VisibilityController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Wait for the labels table to become available
name|UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
operator|.
name|getName
argument_list|()
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
name|createLabels
argument_list|()
expr_stmt|;
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|tableDescriptor
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableAname
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|family
range|:
name|families
control|)
block|{
name|tableDescriptor
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|setAuths
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createLabels
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|PrivilegedExceptionAction
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|VisibilityLabelsResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|labels
init|=
block|{
name|SECRET
block|,
name|CONFIDENTIAL
block|,
name|PRIVATE
block|,
name|PUBLIC
block|,
name|TOPSECRET
block|}
decl_stmt|;
try|try
block|{
name|VisibilityClient
operator|.
name|addLabels
argument_list|(
name|conf
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|SUPERUSER
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setAuths
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|labels
init|=
block|{
name|SECRET
block|,
name|CONFIDENTIAL
block|,
name|PRIVATE
block|,
name|PUBLIC
block|,
name|TOPSECRET
block|}
decl_stmt|;
try|try
block|{
name|VisibilityClient
operator|.
name|setAuths
argument_list|(
name|conf
argument_list|,
name|labels
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{  }
specifier|private
name|ThriftHBaseServiceHandler
name|createHandler
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|conf
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithVisibilityLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// insert data
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"testScan"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|5
condition|)
block|{
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
name|PUBLIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
literal|"("
operator|+
name|SECRET
operator|+
literal|"|"
operator|+
name|CONFIDENTIAL
operator|+
literal|")"
operator|+
literal|"&"
operator|+
literal|"!"
operator|+
name|TOPSECRET
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
comment|// create scan instance
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|()
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|familyAname
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testScan"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testScan\uffff"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|TAuthorization
name|tauth
init|=
operator|new
name|TAuthorization
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|SECRET
argument_list|)
expr_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|PRIVATE
argument_list|)
expr_stmt|;
name|tauth
operator|.
name|setLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAuthorizations
argument_list|(
name|tauth
argument_list|)
expr_stmt|;
comment|// get scanner and rows
name|int
name|scanId
init|=
name|handler
operator|.
name|openScanner
argument_list|(
name|table
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
operator|(
literal|"testScan"
operator|+
literal|5
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
literal|5
condition|)
block|{
name|assertArrayEquals
argument_list|(
operator|(
literal|"testScan"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|5
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
operator|(
literal|"testScan"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check that we are at the end of the scan
name|results
operator|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// close scanner and check that it was indeed closed
name|handler
operator|.
name|closeScanner
argument_list|(
name|scanId
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Scanner id should be invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIllegalArgument
name|e
parameter_list|)
block|{   }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetScannerResultsWithAuthorizations
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// insert data
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"testGetScannerResults"
operator|+
name|pad
argument_list|(
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
name|PUBLIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
literal|"("
operator|+
name|SECRET
operator|+
literal|"|"
operator|+
name|CONFIDENTIAL
operator|+
literal|")"
operator|+
literal|"&"
operator|+
literal|"!"
operator|+
name|TOPSECRET
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
comment|// create scan instance
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|()
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|familyAname
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testGetScannerResults"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// get 5 rows and check the returned results
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testGetScannerResults05"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|TAuthorization
name|tauth
init|=
operator|new
name|TAuthorization
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|SECRET
argument_list|)
expr_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|PRIVATE
argument_list|)
expr_stmt|;
name|tauth
operator|.
name|setLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAuthorizations
argument_list|(
name|tauth
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|getScannerResults
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
literal|3
condition|)
block|{
name|assertArrayEquals
argument_list|(
operator|(
literal|"testGetScannerResults"
operator|+
name|pad
argument_list|(
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
operator|(
literal|"testGetScannerResults"
operator|+
name|pad
argument_list|(
name|i
operator|+
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetsWithLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testPutGet"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
literal|"("
operator|+
name|SECRET
operator|+
literal|"|"
operator|+
name|CONFIDENTIAL
operator|+
literal|")"
operator|+
literal|"&"
operator|+
literal|"!"
operator|+
name|TOPSECRET
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TAuthorization
name|tauth
init|=
operator|new
name|TAuthorization
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|SECRET
argument_list|)
expr_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|PRIVATE
argument_list|)
expr_stmt|;
name|tauth
operator|.
name|setLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|get
operator|.
name|setAuthorizations
argument_list|(
name|tauth
argument_list|)
expr_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|returnedColumnValues
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
decl_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|columnValues
argument_list|,
name|returnedColumnValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementWithTags
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testIncrementWithTags"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
name|PRIVATE
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|incrementColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|()
decl_stmt|;
name|incrementColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnIncrement
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TIncrement
name|increment
init|=
operator|new
name|TIncrement
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|incrementColumns
argument_list|)
decl_stmt|;
name|increment
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
name|SECRET
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|increment
argument_list|(
name|table
argument_list|,
name|increment
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TAuthorization
name|tauth
init|=
operator|new
name|TAuthorization
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|SECRET
argument_list|)
expr_stmt|;
name|tauth
operator|.
name|setLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|get
operator|.
name|setAuthorizations
argument_list|(
name|tauth
argument_list|)
expr_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|TColumnValue
name|columnValue
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|columnValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementWithTagsWithNotMatchLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testIncrementWithTagsWithNotMatchLabels"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
name|PRIVATE
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|incrementColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|()
decl_stmt|;
name|incrementColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnIncrement
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TIncrement
name|increment
init|=
operator|new
name|TIncrement
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|incrementColumns
argument_list|)
decl_stmt|;
name|increment
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
name|SECRET
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|increment
argument_list|(
name|table
argument_list|,
name|increment
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TAuthorization
name|tauth
init|=
operator|new
name|TAuthorization
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|PUBLIC
argument_list|)
expr_stmt|;
name|tauth
operator|.
name|setLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|get
operator|.
name|setAuthorizations
argument_list|(
name|tauth
argument_list|)
expr_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testAppend"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|5L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
name|PRIVATE
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|appendColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
decl_stmt|;
name|appendColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|v2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TAppend
name|append
init|=
operator|new
name|TAppend
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|appendColumns
argument_list|)
decl_stmt|;
name|append
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|TCellVisibility
argument_list|()
operator|.
name|setExpression
argument_list|(
name|SECRET
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|append
argument_list|(
name|table
argument_list|,
name|append
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TAuthorization
name|tauth
init|=
operator|new
name|TAuthorization
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|SECRET
argument_list|)
expr_stmt|;
name|tauth
operator|.
name|setLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|get
operator|.
name|setAuthorizations
argument_list|(
name|tauth
argument_list|)
expr_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|TColumnValue
name|columnValue
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|columnValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**  * Padding numbers to make comparison of sort order easier in a for loop  *   * @param n  *          The number to pad.  * @param pad  *          The length to pad up to.  * @return The padded number as a string.  */
specifier|private
name|String
name|pad
parameter_list|(
name|int
name|n
parameter_list|,
name|byte
name|pad
parameter_list|)
block|{
name|String
name|res
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|n
argument_list|)
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|length
argument_list|()
operator|<
name|pad
condition|)
name|res
operator|=
literal|"0"
operator|+
name|res
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

