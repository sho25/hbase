begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TAppend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TRowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestThriftHBaseServiceHandlerWithReadOnly
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestThriftHBaseServiceHandlerWithReadOnly
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Static names for tables, columns, rows, and values
specifier|private
specifier|static
name|byte
index|[]
name|tableAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tableA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|familyAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|familyBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|qualifierAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifierA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|qualifierBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifierB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HColumnDescriptor
index|[]
name|families
init|=
operator|new
name|HColumnDescriptor
index|[]
block|{
operator|new
name|HColumnDescriptor
argument_list|(
name|familyAname
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
block|,
operator|new
name|HColumnDescriptor
argument_list|(
name|familyBname
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
block|}
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.thrift.readonly"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|tableDescriptor
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableAname
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|family
range|:
name|families
control|)
block|{
name|tableDescriptor
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{    }
specifier|private
name|ThriftHBaseServiceHandler
name|createHandler
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
return|return
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|conf
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistsWithReadOnly
parameter_list|()
throws|throws
name|TException
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testExists"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|exists
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertFalse
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistsAllWithReadOnly
parameter_list|()
throws|throws
name|TException
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName1
init|=
literal|"testExistsAll1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName2
init|=
literal|"testExistsAll2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TGet
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|existsAll
argument_list|(
name|table
argument_list|,
name|gets
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertFalse
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testGet"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertFalse
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultipleWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowName1
init|=
literal|"testGetMultiple1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName2
init|=
literal|"testGetMultiple2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TGet
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|getMultiple
argument_list|(
name|table
argument_list|,
name|gets
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertFalse
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testPut"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPutWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testCheckAndPut"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesA
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesA
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|TPut
name|putA
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesA
argument_list|)
decl_stmt|;
name|putA
operator|.
name|setColumnValues
argument_list|(
name|columnValuesA
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesB
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueB
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesB
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|TPut
name|putB
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesB
argument_list|)
decl_stmt|;
name|putB
operator|.
name|setColumnValues
argument_list|(
name|columnValuesB
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|checkAndPut
argument_list|(
name|table
argument_list|,
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|,
name|putB
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutMultipleWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowName1
init|=
literal|"testPutMultiple1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName2
init|=
literal|"testPutMultiple2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TPut
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|,
name|columnValues
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|,
name|columnValues
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|putMultiple
argument_list|(
name|table
argument_list|,
name|puts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testDelete"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|TDelete
name|delete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|deleteSingle
argument_list|(
name|table
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteMultipleWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowName1
init|=
literal|"testDeleteMultiple1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName2
init|=
literal|"testDeleteMultiple2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TDelete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|deleteMultiple
argument_list|(
name|table
argument_list|,
name|deletes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndMutateWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|ByteBuffer
name|row
init|=
name|wrap
argument_list|(
literal|"row"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|family
init|=
name|wrap
argument_list|(
name|familyAname
argument_list|)
decl_stmt|;
name|ByteBuffer
name|qualifier
init|=
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
decl_stmt|;
name|ByteBuffer
name|value
init|=
name|wrap
argument_list|(
name|valueAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesB
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueB
init|=
operator|new
name|TColumnValue
argument_list|(
name|family
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesB
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|TPut
name|putB
init|=
operator|new
name|TPut
argument_list|(
name|row
argument_list|,
name|columnValuesB
argument_list|)
decl_stmt|;
name|putB
operator|.
name|setColumnValues
argument_list|(
name|columnValuesB
argument_list|)
expr_stmt|;
name|TRowMutations
name|tRowMutations
init|=
operator|new
name|TRowMutations
argument_list|(
name|row
argument_list|,
name|Arrays
operator|.
expr|<
name|TMutation
operator|>
name|asList
argument_list|(
name|TMutation
operator|.
name|put
argument_list|(
name|putB
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|checkAndMutate
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|TCompareOp
operator|.
name|EQUAL
argument_list|,
name|value
argument_list|,
name|tRowMutations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDeleteWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testCheckAndDelete"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|TDelete
name|delete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|checkAndDelete
argument_list|(
name|table
argument_list|,
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testIncrement"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|incrementColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|incrementColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnIncrement
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TIncrement
name|increment
init|=
operator|new
name|TIncrement
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|incrementColumns
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|increment
argument_list|(
name|table
argument_list|,
name|increment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testAppend"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"42"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|appendColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|appendColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|v1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TAppend
name|append
init|=
operator|new
name|TAppend
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|appendColumns
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|append
argument_list|(
name|table
argument_list|,
name|append
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMutateRowWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testMutateRow"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesA
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesA
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|TPut
name|putA
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesA
argument_list|)
decl_stmt|;
name|putA
operator|.
name|setColumnValues
argument_list|(
name|columnValuesA
argument_list|)
expr_stmt|;
name|TDelete
name|delete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TMutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TMutation
name|mutationA
init|=
name|TMutation
operator|.
name|put
argument_list|(
name|putA
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|mutationA
argument_list|)
expr_stmt|;
name|TMutation
name|mutationB
init|=
name|TMutation
operator|.
name|deleteSingle
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|mutationB
argument_list|)
expr_stmt|;
name|TRowMutations
name|tRowMutations
init|=
operator|new
name|TRowMutations
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|mutations
argument_list|)
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|mutateRow
argument_list|(
name|table
argument_list|,
name|tRowMutations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thrift Server is in Read-only mode."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithReadOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|int
name|scanId
init|=
name|handler
operator|.
name|openScanner
argument_list|(
name|table
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|handler
operator|.
name|closeScanner
argument_list|(
name|scanId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIOError
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertFalse
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

