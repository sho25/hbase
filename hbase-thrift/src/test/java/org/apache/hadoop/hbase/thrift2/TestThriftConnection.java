begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|THRIFT_INFO_SERVER_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnCountGetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RestTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|client
operator|.
name|ThriftConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RestTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestThriftConnection
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestThriftConnection
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestThriftConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fa"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fc"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYD
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fd"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow4"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testvalue1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testvalue2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ONE_HOUR
init|=
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TS_2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TS_1
init|=
name|TS_2
operator|-
name|ONE_HOUR
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|ThriftServer
name|thriftServer
decl_stmt|;
specifier|protected
specifier|static
name|ThriftServer
name|thriftHttpServer
decl_stmt|;
specifier|protected
specifier|static
name|int
name|thriftPort
decl_stmt|;
specifier|protected
specifier|static
name|int
name|httpPort
decl_stmt|;
specifier|protected
specifier|static
name|Connection
name|thriftConnection
decl_stmt|;
specifier|protected
specifier|static
name|Connection
name|thriftHttpConnection
decl_stmt|;
specifier|private
specifier|static
name|Admin
name|thriftAdmin
decl_stmt|;
specifier|private
specifier|static
name|ThriftServer
name|startThriftServer
parameter_list|(
name|int
name|port
parameter_list|,
name|boolean
name|useHttp
parameter_list|)
block|{
name|Configuration
name|thriftServerConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|thriftServerConf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|PORT_CONF_KEY
argument_list|,
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|useHttp
condition|)
block|{
name|thriftServerConf
operator|.
name|setBoolean
argument_list|(
name|Constants
operator|.
name|USE_HTTP_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ThriftServer
name|server
init|=
operator|new
name|ThriftServer
argument_list|(
name|thriftServerConf
argument_list|)
decl_stmt|;
name|Thread
name|thriftServerThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Thrift Server failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thriftServerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thriftServerThread
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|useHttp
condition|)
block|{
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|server
operator|.
name|getHttpServer
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|server
operator|.
name|getTserver
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
specifier|private
specifier|static
name|Connection
name|createConnection
parameter_list|(
name|int
name|port
parameter_list|,
name|boolean
name|useHttp
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConnectionUtils
operator|.
name|HBASE_CLIENT_CONNECTION_IMPL
argument_list|,
name|ThriftConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useHttp
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|HBASE_THRIFT_CLIENT_BUIDLER_CLASS
argument_list|,
name|ThriftConnection
operator|.
name|HTTPThriftClientBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|host
init|=
name|HConstants
operator|.
name|LOCALHOST
decl_stmt|;
if|if
condition|(
name|useHttp
condition|)
block|{
name|host
operator|=
literal|"http://"
operator|+
name|host
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|HBASE_THRIFT_SERVER_NAME
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Constants
operator|.
name|HBASE_THRIFT_SERVER_PORT
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Do not start info server
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|THRIFT_INFO_SERVER_PORT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|thriftPort
operator|=
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
expr_stmt|;
name|httpPort
operator|=
name|HBaseTestingUtility
operator|.
name|randomFreePort
argument_list|()
expr_stmt|;
comment|// Start a thrift server
name|thriftServer
operator|=
name|startThriftServer
argument_list|(
name|thriftPort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Start a HTTP thrift server
name|thriftHttpServer
operator|=
name|startThriftServer
argument_list|(
name|httpPort
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|thriftConnection
operator|=
name|createConnection
argument_list|(
name|thriftPort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|thriftHttpConnection
operator|=
name|createConnection
argument_list|(
name|httpPort
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|thriftAdmin
operator|=
name|thriftConnection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TS_1="
operator|+
name|TS_1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TS_2="
operator|+
name|TS_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|thriftAdmin
operator|!=
literal|null
condition|)
block|{
name|thriftAdmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|thriftHttpConnection
operator|!=
literal|null
condition|)
block|{
name|thriftHttpConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|thriftConnection
operator|!=
literal|null
condition|)
block|{
name|thriftConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|thriftHttpServer
operator|!=
literal|null
condition|)
block|{
name|thriftHttpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThrfitAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|testThriftAdmin
argument_list|(
name|thriftConnection
argument_list|,
literal|"testThrfitAdminNamesapce"
argument_list|,
literal|"testThrfitAdminTable"
argument_list|)
expr_stmt|;
name|testThriftAdmin
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testThrfitHttpAdminNamesapce"
argument_list|,
literal|"testThrfitHttpAdminTable"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|testGet
argument_list|(
name|thriftConnection
argument_list|,
literal|"testGetTable"
argument_list|)
expr_stmt|;
name|testGet
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testGetHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGet
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYC
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_2
name|assertNotNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_2
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_2
name|assertNotNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test timestamp
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYB
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimestamp
argument_list|(
name|TS_1
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_1
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
comment|// test timerange
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYB
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|TS_1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_1
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
comment|// test maxVersions
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|listCells
argument_list|()
control|)
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|kv
argument_list|,
name|FAMILYA
argument_list|)
operator|&&
name|TS_1
operator|==
name|kv
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|VALUE_1
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_1
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|kv
argument_list|,
name|FAMILYA
argument_list|)
operator|&&
name|TS_2
operator|==
name|kv
operator|.
name|getTimestamp
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|VALUE_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// @TS_2
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHBASE22011
parameter_list|()
throws|throws
name|Exception
block|{
name|testHBASE22011
argument_list|(
name|thriftConnection
argument_list|,
literal|"testHBASE22011Table"
argument_list|)
expr_stmt|;
name|testHBASE22011
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testHBASE22011HttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHBASE22011
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnCountGetFilter
name|filter
init|=
operator|new
name|ColumnCountGetFilter
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiGet
parameter_list|()
throws|throws
name|Exception
block|{
name|testMultiGet
argument_list|(
name|thriftConnection
argument_list|,
literal|"testMultiGetTable"
argument_list|)
expr_stmt|;
name|testMultiGet
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testMultiGetHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultiGet
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results
init|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test Versions
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|g
operator|.
name|readVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|Get
name|get2
init|=
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
decl_stmt|;
name|get2
operator|.
name|readVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get2
argument_list|)
expr_stmt|;
name|results
operator|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"RESALLYREALLYNOTTHERE"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"RESALLYREALLYNOTTHERE"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_2
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|Exception
block|{
name|testPut
argument_list|(
name|thriftConnection
argument_list|,
literal|"testPutTable"
argument_list|)
expr_stmt|;
name|testPut
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testPutHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPut
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// multiput
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYB
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelete
argument_list|(
name|thriftConnection
argument_list|,
literal|"testDeleteTable"
argument_list|)
expr_stmt|;
name|testDelete
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testDeleteHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelete
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYC
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYC
argument_list|,
name|QUALIFIER_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYB
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYC
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value3
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYC
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value4
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYC
argument_list|,
name|QUALIFIER_2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_2
argument_list|,
name|value4
argument_list|)
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW_3
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYB
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setTimestamp
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYB
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
comment|// Delete column family from row
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILYC
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYC
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value3
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYC
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value4
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYC
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value4
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILYB
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|value1
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner
parameter_list|()
throws|throws
name|Exception
block|{
name|testScanner
argument_list|(
name|thriftConnection
argument_list|,
literal|"testScannerTable"
argument_list|)
expr_stmt|;
name|testScanner
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testScannerHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testScanner
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|Result
index|[]
name|results
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_2
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_3
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_4
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|FAMILYA
argument_list|)
expr_stmt|;
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_2
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_3
argument_list|,
name|results
index|[
literal|2
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_4
argument_list|,
name|results
index|[
literal|3
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
expr_stmt|;
name|results
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_1
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_2
argument_list|,
name|results
index|[
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_3
argument_list|,
name|results
index|[
literal|2
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ROW_4
argument_list|,
name|results
index|[
literal|3
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|testCheckAndDelete
argument_list|(
name|thriftConnection
argument_list|,
literal|"testCheckAndDeleteTable"
argument_list|)
expr_stmt|;
name|testCheckAndDelete
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testCheckAndDeleteHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCheckAndDelete
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|result
operator|.
name|getValue
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE_1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table
operator|.
name|exists
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|get
argument_list|)
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW_1
argument_list|,
name|FAMILYA
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER_1
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE_1
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW_1
argument_list|,
name|FAMILYA
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER_1
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE_1
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW_1
argument_list|,
name|FAMILYA
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER_1
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE_2
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIteratorScaner
parameter_list|()
throws|throws
name|Exception
block|{
name|testIteratorScanner
argument_list|(
name|thriftConnection
argument_list|,
literal|"testIteratorScanerTable"
argument_list|)
expr_stmt|;
name|testIteratorScanner
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testIteratorScanerHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIteratorScanner
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|iterator
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
name|testReverseScan
argument_list|(
name|thriftConnection
argument_list|,
literal|"testReverseScanTable"
argument_list|)
expr_stmt|;
name|testReverseScan
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testReverseScanHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverseScan
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|iterator
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Result
name|lastResult
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Result
name|current
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastResult
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|,
name|current
operator|.
name|getRow
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastResult
operator|=
name|current
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|testScanWithFilters
argument_list|(
name|thriftConnection
argument_list|,
literal|"testScanWithFiltersTable"
argument_list|)
expr_stmt|;
name|testScanWithFilters
argument_list|(
name|thriftHttpConnection
argument_list|,
literal|"testScanWithFiltersHttpTable"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testScanWithFilters
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|thriftAdmin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnValueFilter
name|columnValueFilter
init|=
operator|new
name|ColumnValueFilter
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|VALUE_1
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|prefixFilter
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|columnValueFilter
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|iterator
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Result
name|result
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|counter
operator|+=
name|result
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|TableDescriptor
name|createTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptorBuilder
name|familyABuilder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILYA
argument_list|)
decl_stmt|;
name|familyABuilder
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ColumnFamilyDescriptorBuilder
name|familyBBuilder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILYB
argument_list|)
decl_stmt|;
name|familyBBuilder
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ColumnFamilyDescriptorBuilder
name|familyCBuilder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILYC
argument_list|)
decl_stmt|;
name|familyCBuilder
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|familyABuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|familyBBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|familyCBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|TableDescriptor
name|tableDescriptor
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|TS_2
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|TS_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUALIFIER_1
argument_list|,
name|TS_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYB
argument_list|,
name|QUALIFIER_2
argument_list|,
name|TS_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
return|return
name|tableDescriptor
return|;
block|}
specifier|private
name|void
name|testThriftAdmin
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
comment|//create name space
name|NamespaceDescriptor
name|namespaceDescriptor
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|namespaceDescriptor
operator|.
name|setConfiguration
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|namespaceDescriptor
operator|.
name|setConfiguration
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|namespaceDescriptor
argument_list|)
expr_stmt|;
comment|//list namespace
name|NamespaceDescriptor
index|[]
name|namespaceDescriptors
init|=
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|nd
range|:
name|namespaceDescriptors
control|)
block|{
if|if
condition|(
name|nd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
comment|//modify namesapce
name|namespaceDescriptor
operator|.
name|setConfiguration
argument_list|(
literal|"kye3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyNamespace
argument_list|(
name|namespaceDescriptor
argument_list|)
expr_stmt|;
comment|//get namespace
name|NamespaceDescriptor
name|namespaceDescriptorReturned
init|=
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namespaceDescriptorReturned
operator|.
name|getConfiguration
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|//create table
name|TableDescriptor
name|tableDescriptor
init|=
name|createTable
argument_list|(
name|admin
argument_list|,
name|table
argument_list|)
decl_stmt|;
comment|//modify table
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableDescriptor
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|//modify column family
name|ColumnFamilyDescriptor
name|familyA
init|=
name|tableDescriptor
operator|.
name|getColumnFamily
argument_list|(
name|FAMILYA
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptorBuilder
name|familyABuilder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|familyA
argument_list|)
decl_stmt|;
name|familyABuilder
operator|.
name|setInMemory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
name|familyABuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|//add column family
name|ColumnFamilyDescriptorBuilder
name|familyDBuilder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILYD
argument_list|)
decl_stmt|;
name|familyDBuilder
operator|.
name|setDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|PREFIX
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
name|familyDBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|//get table descriptor
name|TableDescriptor
name|tableDescriptorReturned
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableDescriptorReturned
operator|.
name|getColumnFamilies
argument_list|()
operator|.
name|length
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tableDescriptorReturned
operator|.
name|getDurability
argument_list|()
operator|==
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|ColumnFamilyDescriptor
name|columnFamilyADescriptor1Returned
init|=
name|tableDescriptorReturned
operator|.
name|getColumnFamily
argument_list|(
name|FAMILYA
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|columnFamilyADescriptor1Returned
operator|.
name|isInMemory
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
comment|//delete column family
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILYA
argument_list|)
expr_stmt|;
name|tableDescriptorReturned
operator|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tableDescriptorReturned
operator|.
name|getColumnFamilies
argument_list|()
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|//disable table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//enable table
name|admin
operator|.
name|enableTable
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//truncate table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|truncateTable
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//delete table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//delete namespace
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|namespaceDescriptors
operator|=
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
expr_stmt|;
comment|// should have 2 namespace, default and hbase
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|nd
range|:
name|namespaceDescriptors
control|)
block|{
if|if
condition|(
name|nd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|found
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

