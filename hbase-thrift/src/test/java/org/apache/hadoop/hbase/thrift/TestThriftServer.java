begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|Constants
operator|.
name|COALESCE_INC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilityFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ParseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
operator|.
name|MetricsAssertHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|ThriftMetrics
operator|.
name|ThriftServerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|BatchMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Hbase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TAppend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TRowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|generated
operator|.
name|TThriftServerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|TableDescriptorChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Unit testing for ThriftServerRunner.HBaseServiceHandler, a part of the  * org.apache.hadoop.hbase.thrift package.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestThriftServer
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestThriftServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestThriftServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MetricsAssertHelper
name|metricsHelper
init|=
name|CompatibilityFactory
operator|.
name|getInstance
argument_list|(
name|MetricsAssertHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MAXVERSIONS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|asByteBuffer
parameter_list|(
name|String
name|i
parameter_list|)
block|{
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ByteBuffer
name|asByteBuffer
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|l
argument_list|)
argument_list|)
return|;
block|}
comment|// Static names for tables, columns, rows, and values
specifier|private
specifier|static
name|ByteBuffer
name|tableAname
init|=
name|asByteBuffer
argument_list|(
literal|"tableA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|tableBname
init|=
name|asByteBuffer
argument_list|(
literal|"tableB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|columnAname
init|=
name|asByteBuffer
argument_list|(
literal|"columnA:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|columnAAname
init|=
name|asByteBuffer
argument_list|(
literal|"columnA:A"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|columnBname
init|=
name|asByteBuffer
argument_list|(
literal|"columnB:"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|rowAname
init|=
name|asByteBuffer
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|rowBname
init|=
name|asByteBuffer
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|valueAname
init|=
name|asByteBuffer
argument_list|(
literal|"valueA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|valueBname
init|=
name|asByteBuffer
argument_list|(
literal|"valueB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|valueCname
init|=
name|asByteBuffer
argument_list|(
literal|"valueC"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|valueDname
init|=
name|asByteBuffer
argument_list|(
literal|"valueD"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteBuffer
name|valueEname
init|=
name|asByteBuffer
argument_list|(
literal|100L
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|COALESCE_INC_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|TableDescriptorChecker
operator|.
name|TABLE_SANITY_CHECKS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Runs all of the tests under a single JUnit test method.  We    * consolidate all testing to one method because HBaseClusterTestCase    * is prone to OutOfMemoryExceptions when there are three or more    * JUnit test methods.    */
annotation|@
name|Test
specifier|public
name|void
name|testAll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run all tests
name|doTestTableCreateDrop
argument_list|()
expr_stmt|;
name|doTestThriftMetrics
argument_list|()
expr_stmt|;
name|doTestTableMutations
argument_list|()
expr_stmt|;
name|doTestTableTimestampsAndColumns
argument_list|()
expr_stmt|;
name|doTestTableScanners
argument_list|()
expr_stmt|;
name|doTestGetTableRegions
argument_list|()
expr_stmt|;
name|doTestFilterRegistration
argument_list|()
expr_stmt|;
name|doTestGetRegionInfo
argument_list|()
expr_stmt|;
name|doTestIncrements
argument_list|()
expr_stmt|;
name|doTestAppend
argument_list|()
expr_stmt|;
name|doTestCheckAndPut
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests for creating, enabling, disabling, and deleting tables.  Also    * tests that creating a table with an invalid column name yields an    * IllegalArgument exception.    */
specifier|public
name|void
name|doTestTableCreateDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|doTestTableCreateDrop
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doTestTableCreateDrop
parameter_list|(
name|Hbase
operator|.
name|Iface
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|createTestTables
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|MySlowHBaseHandler
extends|extends
name|ThriftHBaseServiceHandler
implements|implements
name|Hbase
operator|.
name|Iface
block|{
specifier|protected
name|MySlowHBaseHandler
parameter_list|(
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|c
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getTableNames
parameter_list|()
throws|throws
name|IOError
block|{
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getTableNames
argument_list|()
return|;
block|}
block|}
comment|/**    * TODO: These counts are supposed to be zero but sometimes they are not, they are equal to the    * passed in maybe.  Investigate why.  My guess is they are set by the test that runs just    * previous to this one.  Sometimes they are cleared.  Sometimes not.    */
specifier|private
name|int
name|getCurrentCount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|maybe
parameter_list|,
specifier|final
name|ThriftMetrics
name|metrics
parameter_list|)
block|{
name|int
name|currentCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
name|name
argument_list|,
name|maybe
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shouldn't this be null? name="
operator|+
name|name
operator|+
literal|", equals="
operator|+
name|maybe
argument_list|)
expr_stmt|;
name|currentCount
operator|=
name|maybe
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
name|currentCount
return|;
block|}
comment|/**    * Tests if the metrics for thrift handler work correctly    */
specifier|public
name|void
name|doTestThriftMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"START doTestThriftMetrics"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ThriftMetrics
name|metrics
init|=
name|getMetrics
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Hbase
operator|.
name|Iface
name|handler
init|=
name|getHandlerForMetricsTest
argument_list|(
name|metrics
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|currentCountCreateTable
init|=
name|getCurrentCount
argument_list|(
literal|"createTable_num_ops"
argument_list|,
literal|2
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|int
name|currentCountDeleteTable
init|=
name|getCurrentCount
argument_list|(
literal|"deleteTable_num_ops"
argument_list|,
literal|2
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|int
name|currentCountDisableTable
init|=
name|getCurrentCount
argument_list|(
literal|"disableTable_num_ops"
argument_list|,
literal|2
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|createTestTables
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"createTable_num_ops"
argument_list|,
name|currentCountCreateTable
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"deleteTable_num_ops"
argument_list|,
name|currentCountDeleteTable
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"disableTable_num_ops"
argument_list|,
name|currentCountDisableTable
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTableNames
argument_list|()
expr_stmt|;
comment|// This will have an artificial delay.
comment|// 3 to 6 seconds (to account for potential slowness), measured in nanoseconds
try|try
block|{
name|metricsHelper
operator|.
name|assertGaugeGt
argument_list|(
literal|"getTableNames_avg_time"
argument_list|,
literal|3L
operator|*
literal|1000
operator|*
literal|1000
operator|*
literal|1000
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertGaugeLt
argument_list|(
literal|"getTableNames_avg_time"
argument_list|,
literal|6L
operator|*
literal|1000
operator|*
literal|1000
operator|*
literal|1000
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fix me!  Why does this happen?  A concurrent cluster running?"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Hbase
operator|.
name|Iface
name|getHandlerForMetricsTest
parameter_list|(
name|ThriftMetrics
name|metrics
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Hbase
operator|.
name|Iface
name|handler
init|=
operator|new
name|MySlowHBaseHandler
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|HbaseHandlerMetricsProxy
operator|.
name|newInstance
argument_list|(
operator|(
name|ThriftHBaseServiceHandler
operator|)
name|handler
argument_list|,
name|metrics
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ThriftMetrics
name|getMetrics
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ThriftMetrics
argument_list|(
name|conf
argument_list|,
name|ThriftMetrics
operator|.
name|ThriftServerType
operator|.
name|ONE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|createTestTables
parameter_list|(
name|Hbase
operator|.
name|Iface
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create/enable/disable/delete tables, ensure methods act correctly
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler
operator|.
name|getColumnDescriptors
argument_list|(
name|tableAname
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|isTableEnabled
argument_list|(
name|tableAname
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableBname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkTableList
parameter_list|(
name|Hbase
operator|.
name|Iface
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|contains
argument_list|(
name|tableAname
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|dropTestTables
parameter_list|(
name|Hbase
operator|.
name|Iface
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|handler
operator|.
name|disableTable
argument_list|(
name|tableBname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|isTableEnabled
argument_list|(
name|tableBname
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableBname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|isTableEnabled
argument_list|(
name|tableAname
argument_list|)
argument_list|)
expr_stmt|;
comment|/* TODO Reenable.     assertFalse(handler.isTableEnabled(tableAname));     handler.enableTable(tableAname);     assertTrue(handler.isTableEnabled(tableAname));     handler.disableTable(tableAname);*/
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestIncrements
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|createTestTables
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|doTestIncrements
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doTestIncrements
parameter_list|(
name|ThriftHBaseServiceHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAAname
argument_list|,
name|valueEname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAname
argument_list|,
name|valueEname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|mutations
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|mutations
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TIncrement
argument_list|>
name|increments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|increments
operator|.
name|add
argument_list|(
operator|new
name|TIncrement
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|columnAAname
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|increments
operator|.
name|add
argument_list|(
operator|new
name|TIncrement
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|columnAAname
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|increments
operator|.
name|add
argument_list|(
operator|new
name|TIncrement
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|columnAAname
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numIncrements
init|=
literal|60000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIncrements
condition|;
name|i
operator|++
control|)
block|{
name|handler
operator|.
name|increment
argument_list|(
operator|new
name|TIncrement
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnAname
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|incrementRows
argument_list|(
name|increments
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|long
name|lv
init|=
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnAname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
operator|.
name|getLong
argument_list|()
decl_stmt|;
comment|// Wait on all increments being flushed
while|while
condition|(
name|handler
operator|.
name|coalescer
operator|.
name|getQueueSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|(
literal|100
operator|+
operator|(
literal|2
operator|*
name|numIncrements
operator|)
operator|)
argument_list|,
name|lv
argument_list|)
expr_stmt|;
name|lv
operator|=
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|columnAAname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
operator|.
name|getLong
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|100
operator|+
operator|(
literal|3
operator|*
literal|7
operator|*
name|numIncrements
operator|)
operator|)
argument_list|,
name|lv
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|coalescer
operator|.
name|getSuccessfulCoalescings
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests adding a series of Mutations and BatchMutations, including a    * delete mutation.  Also tests data retrieval, and getting back multiple    * versions.    */
specifier|public
name|void
name|doTestTableMutations
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|doTestTableMutations
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doTestTableMutations
parameter_list|(
name|Hbase
operator|.
name|Iface
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Setup
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
comment|// Apply a few Mutations to rowA
comment|//     mutations.add(new Mutation(false, columnAname, valueAname));
comment|//     mutations.add(new Mutation(false, columnBname, valueBname));
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getMutations
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Assert that the changes were made
name|assertEquals
argument_list|(
name|valueAname
argument_list|,
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnAname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult1
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowAname
argument_list|,
name|rowResult1
operator|.
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueBname
argument_list|,
name|rowResult1
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
comment|// Apply a few BatchMutations for rowA and rowB
comment|// rowAmutations.add(new Mutation(true, columnAname, null));
comment|// rowAmutations.add(new Mutation(false, columnBname, valueCname));
comment|// batchMutations.add(new BatchMutation(rowAname, rowAmutations));
comment|// Mutations to rowB
comment|// rowBmutations.add(new Mutation(false, columnAname, valueCname));
comment|// rowBmutations.add(new Mutation(false, columnBname, valueDname));
comment|// batchMutations.add(new BatchMutation(rowBname, rowBmutations));
name|handler
operator|.
name|mutateRows
argument_list|(
name|tableAname
argument_list|,
name|getBatchMutations
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Assert that changes were made to rowA
name|List
argument_list|<
name|TCell
argument_list|>
name|cells
init|=
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnAname
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cells
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueCname
argument_list|,
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TCell
argument_list|>
name|versions
init|=
name|handler
operator|.
name|getVer
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|MAXVERSIONS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|valueCname
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueBname
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
comment|// Assert that changes were made to rowB
name|TRowResult
name|rowResult2
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowBname
argument_list|,
name|rowResult2
operator|.
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueCname
argument_list|,
name|rowResult2
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnAname
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueDname
argument_list|,
name|rowResult2
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
comment|// Apply some deletes
name|handler
operator|.
name|deleteAll
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteAllRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Assert that the deletes were applied
name|int
name|size
init|=
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|size
operator|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// Try null mutation
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAname
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|mutations
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult3
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowAname
argument_list|,
name|rowResult3
operator|.
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rowResult3
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnAname
argument_list|)
operator|.
name|value
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Teardown
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Similar to testTableMutations(), except Mutations are applied with    * specific timestamps and data retrieval uses these timestamps to    * extract specific versions of data.    */
specifier|public
name|void
name|doTestTableTimestampsAndColumns
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
comment|// Apply timestamped Mutations to rowA
name|long
name|time1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handler
operator|.
name|mutateRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getMutations
argument_list|()
argument_list|,
name|time1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Apply timestamped BatchMutations for rowA and rowB
name|long
name|time2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handler
operator|.
name|mutateRowsTs
argument_list|(
name|tableAname
argument_list|,
name|getBatchMutations
argument_list|()
argument_list|,
name|time2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Apply an overlapping timestamped mutation to rowB
name|handler
operator|.
name|mutateRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|getMutations
argument_list|()
argument_list|,
name|time2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// the getVerTs is [inf, ts) so you need to increment one.
name|time1
operator|+=
literal|1
expr_stmt|;
name|time2
operator|+=
literal|2
expr_stmt|;
comment|// Assert that the timestamp-related methods retrieve the correct data
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|handler
operator|.
name|getVerTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time2
argument_list|,
name|MAXVERSIONS
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler
operator|.
name|getVerTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time1
argument_list|,
name|MAXVERSIONS
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult1
init|=
name|handler
operator|.
name|getRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|time1
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult2
init|=
name|handler
operator|.
name|getRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|time2
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// columnA was completely deleted
comment|//assertTrue(Bytes.equals(rowResult1.columns.get(columnAname).value, valueAname));
name|assertEquals
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueBname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult2
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
expr_stmt|;
comment|// ColumnAname has been deleted, and will never be visible even with a getRowTs()
name|assertFalse
argument_list|(
name|rowResult2
operator|.
name|columns
operator|.
name|containsKey
argument_list|(
name|columnAname
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|columnBname
argument_list|)
expr_stmt|;
name|rowResult1
operator|=
name|handler
operator|.
name|getRowWithColumns
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columns
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|containsKey
argument_list|(
name|columnAname
argument_list|)
argument_list|)
expr_stmt|;
name|rowResult1
operator|=
name|handler
operator|.
name|getRowWithColumnsTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columns
argument_list|,
name|time1
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueBname
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rowResult1
operator|.
name|columns
operator|.
name|containsKey
argument_list|(
name|columnAname
argument_list|)
argument_list|)
expr_stmt|;
comment|// Apply some timestamped deletes
comment|// this actually deletes _everything_.
comment|// nukes everything in columnB: forever.
name|handler
operator|.
name|deleteAllTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteAllRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
name|time2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Assert that the timestamp-related methods retrieve the correct data
name|int
name|size
init|=
name|handler
operator|.
name|getVerTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time1
argument_list|,
name|MAXVERSIONS
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|size
operator|=
name|handler
operator|.
name|getVerTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
name|time2
argument_list|,
name|MAXVERSIONS
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// should be available....
name|assertEquals
argument_list|(
name|handler
operator|.
name|get
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnBname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowBname
argument_list|,
literal|null
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Teardown
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the four different scanner-opening methods (with and without    * a stoprow, with and without a timestamp).    */
specifier|public
name|void
name|doTestTableScanners
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
comment|// Apply timestamped Mutations to rowA
name|long
name|time1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handler
operator|.
name|mutateRowTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getMutations
argument_list|()
argument_list|,
name|time1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Sleep to assure that 'time1' and 'time2' will be different even with a
comment|// coarse grained system timer.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Apply timestamped BatchMutations for rowA and rowB
name|long
name|time2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|handler
operator|.
name|mutateRowsTs
argument_list|(
name|tableAname
argument_list|,
name|getBatchMutations
argument_list|()
argument_list|,
name|time2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|time1
operator|+=
literal|1
expr_stmt|;
comment|// Test a scanner on all rows and all columns, no timestamp
name|int
name|scanner1
init|=
name|handler
operator|.
name|scannerOpen
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getColumnList
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult1a
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowResult1a
operator|.
name|row
argument_list|,
name|rowAname
argument_list|)
expr_stmt|;
comment|// This used to be '1'.  I don't know why when we are asking for two columns
comment|// and when the mutations above would seem to add two columns to the row.
comment|// -- St.Ack 05/12/2009
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowResult1a
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult1a
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult1b
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowResult1b
operator|.
name|row
argument_list|,
name|rowBname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rowResult1b
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult1b
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnAname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult1b
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueDname
argument_list|)
expr_stmt|;
name|closeScanner
argument_list|(
name|scanner1
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// Test a scanner on all rows and all columns, with timestamp
name|int
name|scanner2
init|=
name|handler
operator|.
name|scannerOpenTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getColumnList
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|time1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult2a
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowResult2a
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// column A deleted, does not exist.
comment|//assertTrue(Bytes.equals(rowResult2a.columns.get(columnAname).value, valueAname));
name|assertEquals
argument_list|(
name|rowResult2a
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueBname
argument_list|)
expr_stmt|;
name|closeScanner
argument_list|(
name|scanner2
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// Test a scanner on the first row and first column only, no timestamp
name|int
name|scanner3
init|=
name|handler
operator|.
name|scannerOpenWithStop
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|rowBname
argument_list|,
name|getColumnList
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|closeScanner
argument_list|(
name|scanner3
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// Test a scanner on the first row and second column only, with timestamp
name|int
name|scanner4
init|=
name|handler
operator|.
name|scannerOpenWithStopTs
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|rowBname
argument_list|,
name|getColumnList
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|time1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult4a
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner4
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowResult4a
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult4a
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueBname
argument_list|)
expr_stmt|;
comment|// Test scanner using a TScan object once with sortColumns False and once with sortColumns true
name|TScan
name|scanNoSortColumns
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|scanNoSortColumns
operator|.
name|setStartRow
argument_list|(
name|rowAname
argument_list|)
expr_stmt|;
name|scanNoSortColumns
operator|.
name|setStopRow
argument_list|(
name|rowBname
argument_list|)
expr_stmt|;
name|int
name|scanner5
init|=
name|handler
operator|.
name|scannerOpenWithScan
argument_list|(
name|tableAname
argument_list|,
name|scanNoSortColumns
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult5
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner5
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowResult5
operator|.
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult5
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
expr_stmt|;
name|TScan
name|scanSortColumns
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|scanSortColumns
operator|.
name|setStartRow
argument_list|(
name|rowAname
argument_list|)
expr_stmt|;
name|scanSortColumns
operator|.
name|setStopRow
argument_list|(
name|rowBname
argument_list|)
expr_stmt|;
name|scanSortColumns
operator|=
name|scanSortColumns
operator|.
name|setSortColumns
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|scanner6
init|=
name|handler
operator|.
name|scannerOpenWithScan
argument_list|(
name|tableAname
argument_list|,
name|scanSortColumns
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult6
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner6
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowResult6
operator|.
name|sortedColumns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowResult6
operator|.
name|sortedColumns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCell
argument_list|()
operator|.
name|value
argument_list|,
name|valueCname
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|rowBmutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|rowBmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|asByteBuffer
argument_list|(
literal|"columnA:"
operator|+
name|i
argument_list|)
argument_list|,
name|valueCname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|rowC
init|=
name|asByteBuffer
argument_list|(
literal|"rowC"
argument_list|)
decl_stmt|;
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowC
argument_list|,
name|rowBmutations
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TScan
name|scanSortMultiColumns
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|scanSortMultiColumns
operator|.
name|setStartRow
argument_list|(
name|rowC
argument_list|)
expr_stmt|;
name|scanSortMultiColumns
operator|=
name|scanSortMultiColumns
operator|.
name|setSortColumns
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|scanner7
init|=
name|handler
operator|.
name|scannerOpenWithScan
argument_list|(
name|tableAname
argument_list|,
name|scanSortMultiColumns
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TRowResult
name|rowResult7
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner7
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ByteBuffer
name|smallerColumn
init|=
name|asByteBuffer
argument_list|(
literal|"columnA:"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|currentColumn
init|=
name|rowResult7
operator|.
name|sortedColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|columnName
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|smallerColumn
operator|.
name|array
argument_list|()
argument_list|,
name|currentColumn
operator|.
name|array
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|smallerColumn
operator|=
name|currentColumn
expr_stmt|;
block|}
name|TScan
name|reversedScan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|reversedScan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reversedScan
operator|.
name|setStartRow
argument_list|(
name|rowBname
argument_list|)
expr_stmt|;
name|reversedScan
operator|.
name|setStopRow
argument_list|(
name|rowAname
argument_list|)
expr_stmt|;
name|int
name|scanner8
init|=
name|handler
operator|.
name|scannerOpenWithScan
argument_list|(
name|tableAname
argument_list|,
name|reversedScan
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TRowResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|scannerGet
argument_list|(
name|scanner8
argument_list|)
decl_stmt|;
name|handler
operator|.
name|scannerClose
argument_list|(
name|scanner8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|rowBname
argument_list|)
expr_stmt|;
comment|// Teardown
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
comment|/**    * For HBASE-2556    * Tests for GetTableRegions    */
specifier|public
name|void
name|doTestGetTableRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|doTestGetTableRegions
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doTestGetTableRegions
parameter_list|(
name|Hbase
operator|.
name|Iface
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|handler
operator|.
name|getTableNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TRegionInfo
argument_list|>
name|regions
init|=
name|handler
operator|.
name|getTableRegions
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|int
name|regionCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"empty table should have only 1 region, "
operator|+
literal|"but found "
operator|+
name|regionCount
argument_list|,
literal|1
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Region found:"
operator|+
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|regionCount
operator|=
name|handler
operator|.
name|getTableRegions
argument_list|(
name|tableAname
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"non-existing table should have 0 region, "
operator|+
literal|"but found "
operator|+
name|regionCount
argument_list|,
literal|0
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestFilterRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.thrift.filters"
argument_list|,
literal|"MyFilter:filterclass"
argument_list|)
expr_stmt|;
name|ThriftServer
operator|.
name|registerFilters
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|registeredFilters
init|=
name|ParseFilter
operator|.
name|getAllFilters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"filterclass"
argument_list|,
name|registeredFilters
operator|.
name|get
argument_list|(
literal|"MyFilter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestGetRegionInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|doTestGetRegionInfo
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|doTestGetRegionInfo
parameter_list|(
name|Hbase
operator|.
name|Iface
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create tableA and add two columns to rowA
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|getMutations
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|searchRow
init|=
name|HRegionInfo
operator|.
name|createRegionName
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableAname
operator|.
name|array
argument_list|()
argument_list|)
argument_list|,
name|rowAname
operator|.
name|array
argument_list|()
argument_list|,
name|HConstants
operator|.
name|NINES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TRegionInfo
name|regionInfo
init|=
name|handler
operator|.
name|getRegionInfo
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|searchRow
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|startsWith
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|tableAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Appends the value to a cell and checks that the cell value is updated properly.    */
specifier|public
specifier|static
name|void
name|doTestAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAname
argument_list|,
name|valueAname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|mutations
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnList
operator|.
name|add
argument_list|(
name|columnAname
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|valueList
operator|.
name|add
argument_list|(
name|valueBname
argument_list|)
expr_stmt|;
name|TAppend
name|append
init|=
operator|new
name|TAppend
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnList
argument_list|,
name|valueList
argument_list|)
decl_stmt|;
name|handler
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowAname
argument_list|,
name|rowResult
operator|.
name|row
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|valueAname
operator|.
name|array
argument_list|()
argument_list|,
name|valueBname
operator|.
name|array
argument_list|()
argument_list|)
argument_list|,
name|rowResult
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnAname
argument_list|)
operator|.
name|value
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check that checkAndPut fails if the cell does not exist, then put in the cell, then check that    * the checkAndPut succeeds.    */
specifier|public
specifier|static
name|void
name|doTestCheckAndPut
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|handler
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|getColumnDescriptors
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAname
argument_list|,
name|valueAname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Mutation
name|putB
init|=
operator|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnBname
argument_list|,
name|valueBname
argument_list|,
literal|true
argument_list|)
operator|)
decl_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|checkAndPut
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnAname
argument_list|,
name|valueAname
argument_list|,
name|putB
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|mutateRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|mutations
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|checkAndPut
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
name|columnAname
argument_list|,
name|valueAname
argument_list|,
name|putB
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TRowResult
name|rowResult
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tableAname
argument_list|,
name|rowAname
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowAname
argument_list|,
name|rowResult
operator|.
name|row
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valueBname
argument_list|,
name|rowResult
operator|.
name|columns
operator|.
name|get
argument_list|(
name|columnBname
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|handler
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricsWithException
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rowkey
init|=
literal|"row1"
decl_stmt|;
name|String
name|family
init|=
literal|"f"
decl_stmt|;
name|String
name|col
init|=
literal|"c"
decl_stmt|;
comment|// create a table which will throw exceptions for requests
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|tableDesc
operator|.
name|addCoprocessor
argument_list|(
name|ErrorThrowingGetObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowkey
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|col
argument_list|)
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ThriftMetrics
name|metrics
init|=
name|getMetrics
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ThriftHBaseServiceHandler
name|hbaseHandler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Hbase
operator|.
name|Iface
name|handler
init|=
name|HbaseHandlerMetricsProxy
operator|.
name|newInstance
argument_list|(
name|hbaseHandler
argument_list|,
name|metrics
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ByteBuffer
name|tTableName
init|=
name|asByteBuffer
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
comment|// check metrics increment with a successful get
name|long
name|preGetCounter
init|=
name|metricsHelper
operator|.
name|checkCounterExists
argument_list|(
literal|"getRow_num_ops"
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
condition|?
name|metricsHelper
operator|.
name|getCounter
argument_list|(
literal|"getRow_num_ops"
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
name|List
argument_list|<
name|TRowResult
argument_list|>
name|tRowResult
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tTableName
argument_list|,
name|asByteBuffer
argument_list|(
name|rowkey
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tRowResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TRowResult
name|tResult
init|=
name|tRowResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TCell
name|expectedColumnValue
init|=
operator|new
name|TCell
argument_list|(
name|asByteBuffer
argument_list|(
literal|"val1"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowkey
argument_list|)
argument_list|,
name|tResult
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|TCell
argument_list|>
name|returnedColumnValues
init|=
name|tResult
operator|.
name|getColumns
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|returnedColumnValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedColumnValue
argument_list|,
name|returnedColumnValues
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"getRow_num_ops"
argument_list|,
name|preGetCounter
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check metrics increment when the get throws each exception type
for|for
control|(
name|ErrorThrowingGetObserver
operator|.
name|ErrorType
name|type
range|:
name|ErrorThrowingGetObserver
operator|.
name|ErrorType
operator|.
name|values
argument_list|()
control|)
block|{
name|testExceptionType
argument_list|(
name|handler
argument_list|,
name|metrics
argument_list|,
name|tTableName
argument_list|,
name|rowkey
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testExceptionType
parameter_list|(
name|Hbase
operator|.
name|Iface
name|handler
parameter_list|,
name|ThriftMetrics
name|metrics
parameter_list|,
name|ByteBuffer
name|tTableName
parameter_list|,
name|String
name|rowkey
parameter_list|,
name|ErrorThrowingGetObserver
operator|.
name|ErrorType
name|errorType
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|preGetCounter
init|=
name|metricsHelper
operator|.
name|getCounter
argument_list|(
literal|"getRow_num_ops"
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|exceptionKey
init|=
name|errorType
operator|.
name|getMetricName
argument_list|()
decl_stmt|;
name|long
name|preExceptionCounter
init|=
name|metricsHelper
operator|.
name|checkCounterExists
argument_list|(
name|exceptionKey
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
condition|?
name|metricsHelper
operator|.
name|getCounter
argument_list|(
name|exceptionKey
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|asByteBuffer
argument_list|(
name|ErrorThrowingGetObserver
operator|.
name|SHOULD_ERROR_ATTRIBUTE
argument_list|)
argument_list|,
name|asByteBuffer
argument_list|(
name|errorType
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|TRowResult
argument_list|>
name|tRowResult
init|=
name|handler
operator|.
name|getRow
argument_list|(
name|tTableName
argument_list|,
name|asByteBuffer
argument_list|(
name|rowkey
argument_list|)
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Get with error attribute should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"getRow_num_ops"
argument_list|,
name|preGetCounter
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
name|exceptionKey
argument_list|,
name|preExceptionCounter
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return a List of ColumnDescriptors for use in creating a table.  Has one    *         default ColumnDescriptor and one ColumnDescriptor with fewer versions    */
specifier|private
specifier|static
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|getColumnDescriptors
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|ColumnDescriptor
argument_list|>
name|cDescriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// A default ColumnDescriptor
name|ColumnDescriptor
name|cDescA
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|cDescA
operator|.
name|name
operator|=
name|columnAname
expr_stmt|;
name|cDescriptors
operator|.
name|add
argument_list|(
name|cDescA
argument_list|)
expr_stmt|;
comment|// A slightly customized ColumnDescriptor (only 2 versions)
name|ColumnDescriptor
name|cDescB
init|=
operator|new
name|ColumnDescriptor
argument_list|(
name|columnBname
argument_list|,
literal|2
argument_list|,
literal|"NONE"
argument_list|,
literal|false
argument_list|,
literal|"NONE"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|cDescriptors
operator|.
name|add
argument_list|(
name|cDescB
argument_list|)
expr_stmt|;
return|return
name|cDescriptors
return|;
block|}
comment|/**    *    * @param includeA whether or not to include columnA    * @param includeB whether or not to include columnB    * @return a List of column names for use in retrieving a scanner    */
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|getColumnList
parameter_list|(
name|boolean
name|includeA
parameter_list|,
name|boolean
name|includeB
parameter_list|)
block|{
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|columnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeA
condition|)
block|{
name|columnList
operator|.
name|add
argument_list|(
name|columnAname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeB
condition|)
block|{
name|columnList
operator|.
name|add
argument_list|(
name|columnBname
argument_list|)
expr_stmt|;
block|}
return|return
name|columnList
return|;
block|}
comment|/**    * @return a List of Mutations for a row, with columnA having valueA    *         and columnB having valueB    */
specifier|private
specifier|static
name|List
argument_list|<
name|Mutation
argument_list|>
name|getMutations
parameter_list|()
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAname
argument_list|,
name|valueAname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnBname
argument_list|,
name|valueBname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mutations
return|;
block|}
comment|/**    * @return a List of BatchMutations with the following effects:    *         (rowA, columnA): delete    *         (rowA, columnB): place valueC    *         (rowB, columnA): place valueC    *         (rowB, columnB): place valueD    */
specifier|private
specifier|static
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|getBatchMutations
parameter_list|()
block|{
name|List
argument_list|<
name|BatchMutation
argument_list|>
name|batchMutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Mutations to rowA.  You can't mix delete and put anymore.
name|List
argument_list|<
name|Mutation
argument_list|>
name|rowAmutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rowAmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|true
argument_list|,
name|columnAname
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|batchMutations
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|rowAname
argument_list|,
name|rowAmutations
argument_list|)
argument_list|)
expr_stmt|;
name|rowAmutations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rowAmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnBname
argument_list|,
name|valueCname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|batchMutations
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|rowAname
argument_list|,
name|rowAmutations
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mutations to rowB
name|List
argument_list|<
name|Mutation
argument_list|>
name|rowBmutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|rowBmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnAname
argument_list|,
name|valueCname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|rowBmutations
operator|.
name|add
argument_list|(
operator|new
name|Mutation
argument_list|(
literal|false
argument_list|,
name|columnBname
argument_list|,
name|valueDname
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|batchMutations
operator|.
name|add
argument_list|(
operator|new
name|BatchMutation
argument_list|(
name|rowBname
argument_list|,
name|rowBmutations
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|batchMutations
return|;
block|}
comment|/**    * Asserts that the passed scanner is exhausted, and then closes    * the scanner.    *    * @param scannerId the scanner to close    * @param handler the HBaseServiceHandler interfacing to HBase    */
specifier|private
name|void
name|closeScanner
parameter_list|(
name|int
name|scannerId
parameter_list|,
name|ThriftHBaseServiceHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|handler
operator|.
name|scannerGet
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
name|handler
operator|.
name|scannerClose
argument_list|(
name|scannerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetThriftServerType
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TThriftServerType
operator|.
name|ONE
argument_list|,
name|handler
operator|.
name|getThriftServerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that thrift client calling thrift2 server can get the thrift2 server type correctly.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetThriftServerOneType
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a thrift2 server
name|HBaseThriftTestingUtility
name|THRIFT_TEST_UTIL
init|=
operator|new
name|HBaseThriftTestingUtility
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting HBase Thrift Server Two"
argument_list|)
expr_stmt|;
name|THRIFT_TEST_UTIL
operator|.
name|startThriftServer
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|ThriftServerType
operator|.
name|TWO
argument_list|)
expr_stmt|;
try|try
init|(
name|TTransport
name|transport
init|=
operator|new
name|TSocket
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|THRIFT_TEST_UTIL
operator|.
name|getServerPort
argument_list|()
argument_list|)
init|)
block|{
name|TProtocol
name|protocol
init|=
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
decl_stmt|;
comment|// This is our thrift client.
name|Hbase
operator|.
name|Client
name|client
init|=
operator|new
name|Hbase
operator|.
name|Client
argument_list|(
name|protocol
argument_list|)
decl_stmt|;
comment|// open the transport
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|TThriftServerType
operator|.
name|TWO
operator|.
name|name
argument_list|()
argument_list|,
name|client
operator|.
name|getThriftServerType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|THRIFT_TEST_UTIL
operator|.
name|stopThriftServer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

