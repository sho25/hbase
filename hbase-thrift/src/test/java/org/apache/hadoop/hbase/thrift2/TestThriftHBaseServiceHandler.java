begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilityFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ParseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
operator|.
name|MetricsAssertHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|ErrorThrowingGetObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift
operator|.
name|ThriftMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TAppend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TCompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDeleteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|THBaseService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIOError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIllegalArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TIncrement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TRowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|generated
operator|.
name|TDurability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|getFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|putFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|scanFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|incrementFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|thrift2
operator|.
name|ThriftUtilities
operator|.
name|deleteFromThrift
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
import|;
end_import

begin_comment
comment|/**  * Unit testing for ThriftServer.HBaseHandler, a part of the org.apache.hadoop.hbase.thrift2  * package.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestThriftHBaseServiceHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestThriftHBaseServiceHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Static names for tables, columns, rows, and values
specifier|private
specifier|static
name|byte
index|[]
name|tableAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tableA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|familyAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|familyBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|qualifierAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifierA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|qualifierBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifierB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueAname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|valueBname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"valueB"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HColumnDescriptor
index|[]
name|families
init|=
operator|new
name|HColumnDescriptor
index|[]
block|{
operator|new
name|HColumnDescriptor
argument_list|(
name|familyAname
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
block|,
operator|new
name|HColumnDescriptor
argument_list|(
name|familyBname
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MetricsAssertHelper
name|metricsHelper
init|=
name|CompatibilityFactory
operator|.
name|getInstance
argument_list|(
name|MetricsAssertHelper
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|public
name|void
name|assertTColumnValuesEqual
parameter_list|(
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesA
parameter_list|,
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesB
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|columnValuesA
operator|.
name|size
argument_list|()
argument_list|,
name|columnValuesB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|TColumnValue
argument_list|>
name|comparator
init|=
operator|new
name|Comparator
argument_list|<
name|TColumnValue
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TColumnValue
name|o1
parameter_list|,
name|TColumnValue
name|o2
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|o1
operator|.
name|getFamily
argument_list|()
argument_list|,
name|o1
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|o2
operator|.
name|getFamily
argument_list|()
argument_list|,
name|o2
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|columnValuesA
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|columnValuesB
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnValuesA
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TColumnValue
name|a
init|=
name|columnValuesA
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TColumnValue
name|b
init|=
name|columnValuesB
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTColumnValueEqual
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertTColumnValueEqual
parameter_list|(
name|TColumnValue
name|a
parameter_list|,
name|TColumnValue
name|b
parameter_list|)
block|{
name|assertArrayEquals
argument_list|(
name|a
operator|.
name|getFamily
argument_list|()
argument_list|,
name|b
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|a
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|b
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
argument_list|,
name|b
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|tableDescriptor
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableAname
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|family
range|:
name|families
control|)
block|{
name|tableDescriptor
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{    }
specifier|private
name|ThriftHBaseServiceHandler
name|createHandler
parameter_list|()
throws|throws
name|TException
block|{
try|try
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
return|return
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|conf
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExists
parameter_list|()
throws|throws
name|TIOError
throws|,
name|TException
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testExists"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|exists
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|exists
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutGet
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testPutGet"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|returnedColumnValues
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
decl_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|columnValues
argument_list|,
name|returnedColumnValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutGetMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowName1
init|=
literal|"testPutGetMultiple1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName2
init|=
literal|"testPutGetMultiple2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TPut
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|TPut
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|,
name|columnValues
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|,
name|columnValues
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|putMultiple
argument_list|(
name|table
argument_list|,
name|puts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TGet
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<
name|TGet
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|getMultiple
argument_list|(
name|table
argument_list|,
name|gets
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|columnValues
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|columnValues
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getColumnValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowName1
init|=
literal|"testDeleteMultiple1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName2
init|=
literal|"testDeleteMultiple2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TPut
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|TPut
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|,
name|columnValues
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|,
name|columnValues
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|putMultiple
argument_list|(
name|table
argument_list|,
name|puts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TDelete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|TDelete
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TDelete
argument_list|>
name|deleteResults
init|=
name|handler
operator|.
name|deleteMultiple
argument_list|(
name|table
argument_list|,
name|deletes
argument_list|)
decl_stmt|;
comment|// 0 means they were all successfully applies
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deleteResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|exists
argument_list|(
name|table
argument_list|,
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|exists
argument_list|(
name|table
argument_list|,
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testDelete"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueB
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|TDelete
name|delete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|deleteColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|deleteColumn
init|=
operator|new
name|TColumn
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|)
decl_stmt|;
name|deleteColumn
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|deleteColumns
operator|.
name|add
argument_list|(
name|deleteColumn
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setColumns
argument_list|(
name|deleteColumns
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteSingle
argument_list|(
name|table
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|returnedColumnValues
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|expectedColumnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|expectedColumnValues
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|expectedColumnValues
argument_list|,
name|returnedColumnValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteAllTimestamps
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testDeleteAllTimestamps"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValueA
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|columnValueA
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|TDelete
name|delete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|deleteColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|deleteColumn
init|=
operator|new
name|TColumn
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|)
decl_stmt|;
name|deleteColumn
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|deleteColumns
operator|.
name|add
argument_list|(
name|deleteColumn
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setColumns
argument_list|(
name|deleteColumns
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setDeleteType
argument_list|(
name|TDeleteType
operator|.
name|DELETE_COLUMNS
argument_list|)
expr_stmt|;
comment|// This is the default anyway.
name|handler
operator|.
name|deleteSingle
argument_list|(
name|table
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteSingleTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testDeleteSingleTimestamp"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|long
name|timestamp1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|10
decl_stmt|;
name|long
name|timestamp2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValueA
operator|.
name|setTimestamp
argument_list|(
name|timestamp1
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|columnValueA
operator|.
name|setTimestamp
argument_list|(
name|timestamp2
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|TDelete
name|delete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|deleteColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|deleteColumn
init|=
operator|new
name|TColumn
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|)
decl_stmt|;
name|deleteColumn
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|deleteColumns
operator|.
name|add
argument_list|(
name|deleteColumn
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setColumns
argument_list|(
name|deleteColumns
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setDeleteType
argument_list|(
name|TDeleteType
operator|.
name|DELETE_COLUMN
argument_list|)
expr_stmt|;
name|handler
operator|.
name|deleteSingle
argument_list|(
name|table
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// the older timestamp should remain.
name|assertEquals
argument_list|(
name|timestamp1
argument_list|,
name|result
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testIncrement"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|incrementColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|incrementColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnIncrement
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TIncrement
name|increment
init|=
operator|new
name|TIncrement
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|incrementColumns
argument_list|)
decl_stmt|;
name|handler
operator|.
name|increment
argument_list|(
name|table
argument_list|,
name|increment
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|TColumnValue
name|columnValue
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|columnValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testAppend"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"42"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"23"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|v1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|appendColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|appendColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|v2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TAppend
name|append
init|=
operator|new
name|TAppend
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|appendColumns
argument_list|)
decl_stmt|;
name|handler
operator|.
name|append
argument_list|(
name|table
argument_list|,
name|append
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|TColumnValue
name|columnValue
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|columnValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * check that checkAndPut fails if the cell does not exist, then put in the cell, then check    * that the checkAndPut succeeds.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPut
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testCheckAndPut"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesA
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesA
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|TPut
name|putA
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesA
argument_list|)
decl_stmt|;
name|putA
operator|.
name|setColumnValues
argument_list|(
name|columnValuesA
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesB
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueB
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesB
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|TPut
name|putB
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesB
argument_list|)
decl_stmt|;
name|putB
operator|.
name|setColumnValues
argument_list|(
name|columnValuesB
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|checkAndPut
argument_list|(
name|table
argument_list|,
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|,
name|putB
argument_list|)
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|putA
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|checkAndPut
argument_list|(
name|table
argument_list|,
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|,
name|putB
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|returnedColumnValues
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|expectedColumnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|expectedColumnValues
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|expectedColumnValues
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|expectedColumnValues
argument_list|,
name|returnedColumnValues
argument_list|)
expr_stmt|;
block|}
comment|/**    * check that checkAndDelete fails if the cell does not exist, then put in the cell, then    * check that the checkAndDelete succeeds.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testCheckAndDelete"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesA
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesA
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|TPut
name|putA
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesA
argument_list|)
decl_stmt|;
name|putA
operator|.
name|setColumnValues
argument_list|(
name|columnValuesA
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesB
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueB
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesB
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|TPut
name|putB
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesB
argument_list|)
decl_stmt|;
name|putB
operator|.
name|setColumnValues
argument_list|(
name|columnValuesB
argument_list|)
expr_stmt|;
comment|// put putB so that we know whether the row has been deleted or not
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|putB
argument_list|)
expr_stmt|;
name|TDelete
name|delete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|checkAndDelete
argument_list|(
name|table
argument_list|,
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|,
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|columnValuesB
argument_list|,
name|result
operator|.
name|getColumnValues
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|putA
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|checkAndDelete
argument_list|(
name|table
argument_list|,
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|,
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSetRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScan
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// insert data
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"testScan"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
comment|// create scan instance
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|familyAname
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testScan"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testScan\uffff"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// get scanner and rows
name|int
name|scanId
init|=
name|handler
operator|.
name|openScanner
argument_list|(
name|table
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// check if the rows are returned and in order
name|assertArrayEquals
argument_list|(
operator|(
literal|"testScan"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check that we are at the end of the scan
name|results
operator|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// close scanner and check that it was indeed closed
name|handler
operator|.
name|closeScanner
argument_list|(
name|scanId
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Scanner id should be invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIllegalArgument
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * Tests keeping a HBase scanner alive for long periods of time. Each call to getScannerRow()    * should reset the ConnectionCache timeout for the scanner's connection    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testLongLivedScan
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numTrials
init|=
literal|6
decl_stmt|;
name|int
name|trialPause
init|=
literal|1000
decl_stmt|;
name|int
name|cleanUpInterval
init|=
literal|100
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set the ConnectionCache timeout to trigger halfway through the trials
name|conf
operator|.
name|setInt
argument_list|(
name|ThriftHBaseServiceHandler
operator|.
name|MAX_IDLETIME
argument_list|,
operator|(
name|numTrials
operator|/
literal|2
operator|)
operator|*
name|trialPause
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ThriftHBaseServiceHandler
operator|.
name|CLEANUP_INTERVAL
argument_list|,
name|cleanUpInterval
argument_list|)
expr_stmt|;
name|ThriftHBaseServiceHandler
name|handler
init|=
operator|new
name|ThriftHBaseServiceHandler
argument_list|(
name|conf
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// insert data
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTrials
condition|;
name|i
operator|++
control|)
block|{
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"testScan"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
comment|// create scan instance
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|familyAname
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testScan"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testScan\uffff"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Prevent the scanner from caching results
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// get scanner and rows
name|int
name|scanId
init|=
name|handler
operator|.
name|openScanner
argument_list|(
name|table
argument_list|,
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTrials
condition|;
name|i
operator|++
control|)
block|{
comment|// Make sure that the Scanner doesn't throw an exception after the ConnectionCache timeout
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|(
literal|"testScan"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|trialPause
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// insert data
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"testReverseScan"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
comment|// create reverse scan instance
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|familyAname
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testReverseScan\uffff"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testReverseScan"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// get scanner and rows
name|int
name|scanId
init|=
name|handler
operator|.
name|openScanner
argument_list|(
name|table
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// check if the rows are returned and in order
name|assertArrayEquals
argument_list|(
operator|(
literal|"testReverseScan"
operator|+
operator|(
literal|9
operator|-
name|i
operator|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check that we are at the end of the scan
name|results
operator|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// close scanner and check that it was indeed closed
name|handler
operator|.
name|closeScanner
argument_list|(
name|scanId
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Scanner id should be invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIllegalArgument
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// insert data
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"testScanWithFilter"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
comment|// create scan instance with filter
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|familyAname
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testScanWithFilter"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testScanWithFilter\uffff"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// only get the key part
name|scan
operator|.
name|setFilterString
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"KeyOnlyFilter()"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get scanner and rows
name|int
name|scanId
init|=
name|handler
operator|.
name|openScanner
argument_list|(
name|table
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// check if the rows are returned and in order
name|assertArrayEquals
argument_list|(
operator|(
literal|"testScanWithFilter"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the value is indeed stripped by the filter
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// check that we are at the end of the scan
name|results
operator|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// close scanner and check that it was indeed closed
name|handler
operator|.
name|closeScanner
argument_list|(
name|scanId
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Scanner id should be invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIllegalArgument
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutTTL
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testPutTTL"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Add some dummy data
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Time in ms for the kv's to live.
name|long
name|ttlTimeMs
init|=
literal|2000L
decl_stmt|;
comment|// the _ttl attribute is a number of ms ttl for key values in this put.
name|attributes
operator|.
name|put
argument_list|(
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"_ttl"
argument_list|)
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ttlTimeMs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Attach the attributes
name|put
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
comment|// Send it.
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
comment|// Now get the data back
name|TGet
name|getOne
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|resultOne
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|getOne
argument_list|)
decl_stmt|;
comment|// It's there.
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|resultOne
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultOne
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep 30 seconds just to make 100% sure that the key value should be expired.
name|Thread
operator|.
name|sleep
argument_list|(
name|ttlTimeMs
operator|*
literal|15
argument_list|)
expr_stmt|;
name|TGet
name|getTwo
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|resultTwo
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|getTwo
argument_list|)
decl_stmt|;
comment|// Nothing should be there since it's ttl'd out.
name|assertNull
argument_list|(
name|resultTwo
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultTwo
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Padding numbers to make comparison of sort order easier in a for loop    *    * @param n  The number to pad.    * @param pad  The length to pad up to.    * @return The padded number as a string.    */
specifier|private
name|String
name|pad
parameter_list|(
name|int
name|n
parameter_list|,
name|byte
name|pad
parameter_list|)
block|{
name|String
name|res
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|n
argument_list|)
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|length
argument_list|()
operator|<
name|pad
condition|)
name|res
operator|=
literal|"0"
operator|+
name|res
expr_stmt|;
return|return
name|res
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithBatchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// insert data
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|String
name|colNum
init|=
name|pad
argument_list|(
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|3
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
operator|(
literal|"col"
operator|+
name|colNum
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|wrap
argument_list|(
operator|(
literal|"val"
operator|+
name|colNum
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
block|}
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"testScanWithBatchSize"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
comment|// create scan instance
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|familyAname
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testScanWithBatchSize"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testScanWithBatchSize\uffff"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// set batch size to 10 columns per call
name|scan
operator|.
name|setBatchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// get scanner
name|int
name|scanId
init|=
name|handler
operator|.
name|openScanner
argument_list|(
name|table
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// get batch for single row (10x10 is what we expect)
name|results
operator|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check length of batch
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|cols
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the columns are returned and in order
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
literal|10
condition|;
name|y
operator|++
control|)
block|{
name|int
name|colNum
init|=
name|y
operator|+
operator|(
literal|10
operator|*
name|i
operator|)
decl_stmt|;
name|String
name|colNumPad
init|=
name|pad
argument_list|(
name|colNum
argument_list|,
operator|(
name|byte
operator|)
literal|3
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|(
literal|"col"
operator|+
name|colNumPad
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|y
argument_list|)
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check that we are at the end of the scan
name|results
operator|=
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// close scanner and check that it was indeed closed
name|handler
operator|.
name|closeScanner
argument_list|(
name|scanId
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|getScannerRows
argument_list|(
name|scanId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Scanner id should be invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TIllegalArgument
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetScannerResults
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// insert data
name|TColumnValue
name|columnValue
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
operator|(
literal|"testGetScannerResults"
operator|+
name|pad
argument_list|(
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
comment|// create scan instance
name|TScan
name|scan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|column
init|=
operator|new
name|TColumn
argument_list|()
decl_stmt|;
name|column
operator|.
name|setFamily
argument_list|(
name|familyAname
argument_list|)
expr_stmt|;
name|column
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testGetScannerResults"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// get 5 rows and check the returned results
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testGetScannerResults05"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TResult
argument_list|>
name|results
init|=
name|handler
operator|.
name|getScannerResults
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// check if the rows are returned and in order
name|assertArrayEquals
argument_list|(
operator|(
literal|"testGetScannerResults"
operator|+
name|pad
argument_list|(
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// get 10 rows and check the returned results
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testGetScannerResults10"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|handler
operator|.
name|getScannerResults
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// check if the rows are returned and in order
name|assertArrayEquals
argument_list|(
operator|(
literal|"testGetScannerResults"
operator|+
name|pad
argument_list|(
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// get 20 rows and check the returned results
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testGetScannerResults20"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|handler
operator|.
name|getScannerResults
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// check if the rows are returned and in order
name|assertArrayEquals
argument_list|(
operator|(
literal|"testGetScannerResults"
operator|+
name|pad
argument_list|(
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// reverse scan
name|scan
operator|=
operator|new
name|TScan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
literal|"testGetScannerResults20"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
literal|"testGetScannerResults"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|handler
operator|.
name|getScannerResults
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// check if the rows are returned and in order
name|assertArrayEquals
argument_list|(
operator|(
literal|"testGetScannerResults"
operator|+
name|pad
argument_list|(
literal|19
operator|-
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.thrift.filters"
argument_list|,
literal|"MyFilter:filterclass"
argument_list|)
expr_stmt|;
name|ThriftServer
operator|.
name|registerFilters
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|registeredFilters
init|=
name|ParseFilter
operator|.
name|getAllFilters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"filterclass"
argument_list|,
name|registeredFilters
operator|.
name|get
argument_list|(
literal|"MyFilter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ThriftMetrics
name|metrics
init|=
name|getMetrics
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ThriftHBaseServiceHandler
name|hbaseHandler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|THBaseService
operator|.
name|Iface
name|handler
init|=
name|ThriftHBaseServiceHandler
operator|.
name|newInstance
argument_list|(
name|hbaseHandler
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testMetrics"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|handler
operator|.
name|exists
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|put
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|put
operator|.
name|setColumnValues
argument_list|(
name|columnValues
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|exists
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"put_num_ops"
argument_list|,
literal|1
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"exists_num_ops"
argument_list|,
literal|2
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ThriftMetrics
name|getMetrics
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|ThriftMetrics
name|m
init|=
operator|new
name|ThriftMetrics
argument_list|(
name|conf
argument_list|,
name|ThriftMetrics
operator|.
name|ThriftServerType
operator|.
name|TWO
argument_list|)
decl_stmt|;
name|m
operator|.
name|getSource
argument_list|()
operator|.
name|init
argument_list|()
expr_stmt|;
comment|//Clear all the metrics
return|return
name|m
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricsWithException
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
comment|// create a table which will throw exceptions for requests
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|tableDesc
operator|.
name|addCoprocessor
argument_list|(
name|ErrorThrowingGetObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|col
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ThriftHBaseServiceHandler
name|hbaseHandler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ThriftMetrics
name|metrics
init|=
name|getMetrics
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|THBaseService
operator|.
name|Iface
name|handler
init|=
name|ThriftHBaseServiceHandler
operator|.
name|newInstance
argument_list|(
name|hbaseHandler
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|ByteBuffer
name|tTableName
init|=
name|wrap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// check metrics increment with a successful get
name|long
name|preGetCounter
init|=
name|metricsHelper
operator|.
name|checkCounterExists
argument_list|(
literal|"get_num_ops"
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
condition|?
name|metricsHelper
operator|.
name|getCounter
argument_list|(
literal|"get_num_ops"
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
name|TGet
name|tGet
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowkey
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|tResult
init|=
name|handler
operator|.
name|get
argument_list|(
name|tTableName
argument_list|,
name|tGet
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|expectedColumnValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|family
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|col
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowkey
argument_list|,
name|tResult
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|returnedColumnValues
init|=
name|tResult
operator|.
name|getColumnValues
argument_list|()
decl_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|expectedColumnValues
argument_list|,
name|returnedColumnValues
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"get_num_ops"
argument_list|,
name|preGetCounter
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check metrics increment when the get throws each exception type
for|for
control|(
name|ErrorThrowingGetObserver
operator|.
name|ErrorType
name|type
range|:
name|ErrorThrowingGetObserver
operator|.
name|ErrorType
operator|.
name|values
argument_list|()
control|)
block|{
name|testExceptionType
argument_list|(
name|handler
argument_list|,
name|metrics
argument_list|,
name|tTableName
argument_list|,
name|rowkey
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testExceptionType
parameter_list|(
name|THBaseService
operator|.
name|Iface
name|handler
parameter_list|,
name|ThriftMetrics
name|metrics
parameter_list|,
name|ByteBuffer
name|tTableName
parameter_list|,
name|byte
index|[]
name|rowkey
parameter_list|,
name|ErrorThrowingGetObserver
operator|.
name|ErrorType
name|errorType
parameter_list|)
block|{
name|long
name|preGetCounter
init|=
name|metricsHelper
operator|.
name|getCounter
argument_list|(
literal|"get_num_ops"
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|exceptionKey
init|=
name|errorType
operator|.
name|getMetricName
argument_list|()
decl_stmt|;
name|long
name|preExceptionCounter
init|=
name|metricsHelper
operator|.
name|checkCounterExists
argument_list|(
name|exceptionKey
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
condition|?
name|metricsHelper
operator|.
name|getCounter
argument_list|(
name|exceptionKey
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
name|TGet
name|tGet
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowkey
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ErrorThrowingGetObserver
operator|.
name|SHOULD_ERROR_ATTRIBUTE
argument_list|)
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|errorType
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tGet
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
try|try
block|{
name|TResult
name|tResult
init|=
name|handler
operator|.
name|get
argument_list|(
name|tTableName
argument_list|,
name|tGet
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Get with error attribute should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
literal|"get_num_ops"
argument_list|,
name|preGetCounter
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
name|exceptionKey
argument_list|,
name|preExceptionCounter
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * See HBASE-17611    *    * Latency metrics were capped at ~ 2 seconds due to the use of an int variable to capture the    * duration.    */
annotation|@
name|Test
specifier|public
name|void
name|testMetricsPrecision
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
comment|// create a table which will throw exceptions for requests
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMetricsPrecision"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|tableDesc
operator|.
name|addCoprocessor
argument_list|(
name|DelayingRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|col
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ThriftHBaseServiceHandler
name|hbaseHandler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ThriftMetrics
name|metrics
init|=
name|getMetrics
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|THBaseService
operator|.
name|Iface
name|handler
init|=
name|ThriftHBaseServiceHandler
operator|.
name|newInstance
argument_list|(
name|hbaseHandler
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|ByteBuffer
name|tTableName
init|=
name|wrap
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// check metrics latency with a successful get
name|TGet
name|tGet
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowkey
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|tResult
init|=
name|handler
operator|.
name|get
argument_list|(
name|tTableName
argument_list|,
name|tGet
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|expectedColumnValues
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|family
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|col
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowkey
argument_list|,
name|tResult
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|returnedColumnValues
init|=
name|tResult
operator|.
name|getColumnValues
argument_list|()
decl_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|expectedColumnValues
argument_list|,
name|returnedColumnValues
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertGaugeGt
argument_list|(
literal|"get_max"
argument_list|,
literal|3000L
argument_list|,
name|metrics
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{         }
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rowName
init|=
literal|"testAttribute"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|attributeKey
init|=
literal|"attribute1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|attributeValue
init|=
literal|"value1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|wrap
argument_list|(
name|attributeKey
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|attributeValue
argument_list|)
argument_list|)
expr_stmt|;
name|TGet
name|tGet
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|tGet
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
name|getFromThrift
argument_list|(
name|tGet
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|get
operator|.
name|getAttribute
argument_list|(
literal|"attribute1"
argument_list|)
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TPut
name|tPut
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|tPut
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
name|putFromThrift
argument_list|(
name|tPut
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|put
operator|.
name|getAttribute
argument_list|(
literal|"attribute1"
argument_list|)
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
name|TScan
name|tScan
init|=
operator|new
name|TScan
argument_list|()
decl_stmt|;
name|tScan
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|scanFromThrift
argument_list|(
name|tScan
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|scan
operator|.
name|getAttribute
argument_list|(
literal|"attribute1"
argument_list|)
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|incrementColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|incrementColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnIncrement
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TIncrement
name|tIncrement
init|=
operator|new
name|TIncrement
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|incrementColumns
argument_list|)
decl_stmt|;
name|tIncrement
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|Increment
name|increment
init|=
name|incrementFromThrift
argument_list|(
name|tIncrement
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|increment
operator|.
name|getAttribute
argument_list|(
literal|"attribute1"
argument_list|)
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
name|TDelete
name|tDelete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|tDelete
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
name|deleteFromThrift
argument_list|(
name|tDelete
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|delete
operator|.
name|getAttribute
argument_list|(
literal|"attribute1"
argument_list|)
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Put valueA to a row, make sure put has happened, then create a mutation object to put valueB    * and delete ValueA, then check that the row value is only valueB.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMutateRow
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowName
init|=
literal|"testMutateRow"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesA
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesA
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|TPut
name|putA
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesA
argument_list|)
decl_stmt|;
name|putA
operator|.
name|setColumnValues
argument_list|(
name|columnValuesA
argument_list|)
expr_stmt|;
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|putA
argument_list|)
expr_stmt|;
name|TGet
name|get
init|=
operator|new
name|TGet
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|returnedColumnValues
init|=
name|result
operator|.
name|getColumnValues
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|expectedColumnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|expectedColumnValues
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|expectedColumnValues
argument_list|,
name|returnedColumnValues
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesB
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueB
init|=
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesB
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|TPut
name|putB
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValuesB
argument_list|)
decl_stmt|;
name|putB
operator|.
name|setColumnValues
argument_list|(
name|columnValuesB
argument_list|)
expr_stmt|;
name|TDelete
name|delete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TColumn
argument_list|>
name|deleteColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumn
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumn
name|deleteColumn
init|=
operator|new
name|TColumn
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|)
decl_stmt|;
name|deleteColumn
operator|.
name|setQualifier
argument_list|(
name|qualifierAname
argument_list|)
expr_stmt|;
name|deleteColumns
operator|.
name|add
argument_list|(
name|deleteColumn
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setColumns
argument_list|(
name|deleteColumns
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TMutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<
name|TMutation
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TMutation
name|mutationA
init|=
name|TMutation
operator|.
name|put
argument_list|(
name|putB
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|mutationA
argument_list|)
expr_stmt|;
name|TMutation
name|mutationB
init|=
name|TMutation
operator|.
name|deleteSingle
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|mutationB
argument_list|)
expr_stmt|;
name|TRowMutations
name|tRowMutations
init|=
operator|new
name|TRowMutations
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|mutations
argument_list|)
decl_stmt|;
name|handler
operator|.
name|mutateRow
argument_list|(
name|table
argument_list|,
name|tRowMutations
argument_list|)
expr_stmt|;
name|result
operator|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|rowName
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|returnedColumnValues
operator|=
name|result
operator|.
name|getColumnValues
argument_list|()
expr_stmt|;
name|expectedColumnValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expectedColumnValues
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|assertTColumnValuesEqual
argument_list|(
name|expectedColumnValues
argument_list|,
name|returnedColumnValues
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create TPut, TDelete , TIncrement objects, set durability then call ThriftUtility    * functions to get Put , Delete and Increment respectively. Use getDurability to make sure    * the returned objects have the appropriate durability setting.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testDurability
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|rowName
init|=
literal|"testDurability"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValues
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|add
argument_list|(
operator|new
name|TColumnValue
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnIncrement
argument_list|>
name|incrementColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnIncrement
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|incrementColumns
operator|.
name|add
argument_list|(
operator|new
name|TColumnIncrement
argument_list|(
name|wrap
argument_list|(
name|familyAname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TDelete
name|tDelete
init|=
operator|new
name|TDelete
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|)
decl_stmt|;
name|tDelete
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
name|deleteFromThrift
argument_list|(
name|tDelete
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|delete
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|tDelete
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|delete
operator|=
name|deleteFromThrift
argument_list|(
name|tDelete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|tDelete
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
name|delete
operator|=
name|deleteFromThrift
argument_list|(
name|tDelete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
name|tDelete
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|FSYNC_WAL
argument_list|)
expr_stmt|;
name|delete
operator|=
name|deleteFromThrift
argument_list|(
name|tDelete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|)
expr_stmt|;
name|TPut
name|tPut
init|=
operator|new
name|TPut
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|columnValues
argument_list|)
decl_stmt|;
name|tPut
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
name|putFromThrift
argument_list|(
name|tPut
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|put
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|tPut
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|put
operator|=
name|putFromThrift
argument_list|(
name|tPut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|put
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|tPut
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
name|put
operator|=
name|putFromThrift
argument_list|(
name|tPut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|put
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
name|tPut
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|FSYNC_WAL
argument_list|)
expr_stmt|;
name|put
operator|=
name|putFromThrift
argument_list|(
name|tPut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|put
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|)
expr_stmt|;
name|TIncrement
name|tIncrement
init|=
operator|new
name|TIncrement
argument_list|(
name|wrap
argument_list|(
name|rowName
argument_list|)
argument_list|,
name|incrementColumns
argument_list|)
decl_stmt|;
name|tIncrement
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|Increment
name|increment
init|=
name|incrementFromThrift
argument_list|(
name|tIncrement
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|increment
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|tIncrement
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|increment
operator|=
name|incrementFromThrift
argument_list|(
name|tIncrement
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|increment
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|tIncrement
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
name|increment
operator|=
name|incrementFromThrift
argument_list|(
name|tIncrement
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|increment
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
name|tIncrement
operator|.
name|setDurability
argument_list|(
name|TDurability
operator|.
name|FSYNC_WAL
argument_list|)
expr_stmt|;
name|increment
operator|=
name|incrementFromThrift
argument_list|(
name|tIncrement
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|increment
operator|.
name|getDurability
argument_list|()
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndMutate
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftHBaseServiceHandler
name|handler
init|=
name|createHandler
argument_list|()
decl_stmt|;
name|ByteBuffer
name|table
init|=
name|wrap
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|ByteBuffer
name|row
init|=
name|wrap
argument_list|(
literal|"row"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|family
init|=
name|wrap
argument_list|(
name|familyAname
argument_list|)
decl_stmt|;
name|ByteBuffer
name|qualifier
init|=
name|wrap
argument_list|(
name|qualifierAname
argument_list|)
decl_stmt|;
name|ByteBuffer
name|value
init|=
name|wrap
argument_list|(
name|valueAname
argument_list|)
decl_stmt|;
comment|// Create a mutation to write to 'B', our "mutate" of "checkAndMutate"
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesB
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueB
init|=
operator|new
name|TColumnValue
argument_list|(
name|family
argument_list|,
name|wrap
argument_list|(
name|qualifierBname
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|valueBname
argument_list|)
argument_list|)
decl_stmt|;
name|columnValuesB
operator|.
name|add
argument_list|(
name|columnValueB
argument_list|)
expr_stmt|;
name|TPut
name|putB
init|=
operator|new
name|TPut
argument_list|(
name|row
argument_list|,
name|columnValuesB
argument_list|)
decl_stmt|;
name|putB
operator|.
name|setColumnValues
argument_list|(
name|columnValuesB
argument_list|)
expr_stmt|;
name|TRowMutations
name|tRowMutations
init|=
operator|new
name|TRowMutations
argument_list|(
name|row
argument_list|,
name|Arrays
operator|.
expr|<
name|TMutation
operator|>
name|asList
argument_list|(
name|TMutation
operator|.
name|put
argument_list|(
name|putB
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Empty table when we begin
name|TResult
name|result
init|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
operator|new
name|TGet
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// checkAndMutate -- condition should fail because the value doesn't exist.
name|assertFalse
argument_list|(
literal|"Expected condition to not pass"
argument_list|,
name|handler
operator|.
name|checkAndMutate
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|TCompareOp
operator|.
name|EQUAL
argument_list|,
name|value
argument_list|,
name|tRowMutations
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TColumnValue
argument_list|>
name|columnValuesA
init|=
operator|new
name|ArrayList
argument_list|<
name|TColumnValue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TColumnValue
name|columnValueA
init|=
operator|new
name|TColumnValue
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|columnValuesA
operator|.
name|add
argument_list|(
name|columnValueA
argument_list|)
expr_stmt|;
comment|// Put an update 'A'
name|handler
operator|.
name|put
argument_list|(
name|table
argument_list|,
operator|new
name|TPut
argument_list|(
name|row
argument_list|,
name|columnValuesA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the update is there
name|result
operator|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
operator|new
name|TGet
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTColumnValueEqual
argument_list|(
name|columnValueA
argument_list|,
name|result
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// checkAndMutate -- condition should pass since we added the value
name|assertTrue
argument_list|(
literal|"Expected condition to pass"
argument_list|,
name|handler
operator|.
name|checkAndMutate
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|TCompareOp
operator|.
name|EQUAL
argument_list|,
name|value
argument_list|,
name|tRowMutations
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|handler
operator|.
name|get
argument_list|(
name|table
argument_list|,
operator|new
name|TGet
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getColumnValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTColumnValueEqual
argument_list|(
name|columnValueA
argument_list|,
name|result
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTColumnValueEqual
argument_list|(
name|columnValueB
argument_list|,
name|result
operator|.
name|getColumnValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|DelayingRegionObserver
implements|implements
name|RegionObserver
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DelayingRegionObserver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// sleep time in msec
specifier|private
name|long
name|delayMillis
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|delayMillis
operator|=
name|e
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"delayingregionobserver.delay"
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|delayMillis
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Slept for "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|" msec"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted while sleeping"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

