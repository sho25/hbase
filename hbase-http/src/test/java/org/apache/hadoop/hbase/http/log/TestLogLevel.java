begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|log
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|log
operator|.
name|LogLevel
operator|.
name|CLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test LogLevel.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestLogLevel
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestLogLevel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|File
name|BASEDIR
decl_stmt|;
specifier|private
specifier|static
name|String
name|keystoresDir
decl_stmt|;
specifier|private
specifier|static
name|String
name|sslConfDir
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|serverConf
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|clientConf
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|sslConf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|logName
init|=
name|TestLogLevel
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|logName
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PRINCIPAL
init|=
literal|"loglevel.principal"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|KEYTAB
init|=
literal|"loglevel.keytab"
decl_stmt|;
specifier|private
specifier|static
name|MiniKdc
name|kdc
decl_stmt|;
specifier|private
specifier|static
name|HBaseCommonTestingUtility
name|htu
init|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCALHOST
init|=
literal|"localhost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|clientPrincipal
init|=
literal|"client/"
operator|+
name|LOCALHOST
decl_stmt|;
specifier|private
specifier|static
name|String
name|HTTP_PRINCIPAL
init|=
literal|"HTTP/"
operator|+
name|LOCALHOST
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|KEYTAB_FILE
init|=
operator|new
name|File
argument_list|(
name|htu
operator|.
name|getDataTestDir
argument_list|(
literal|"keytab"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|BASEDIR
operator|=
operator|new
name|File
argument_list|(
name|htu
operator|.
name|getDataTestDir
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|BASEDIR
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|BASEDIR
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"unable to create the base directory for testing"
argument_list|)
throw|;
block|}
name|serverConf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|clientConf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|setupSSL
argument_list|(
name|BASEDIR
argument_list|)
expr_stmt|;
name|kdc
operator|=
name|setupMiniKdc
argument_list|()
expr_stmt|;
comment|// Create two principles: a client and a HTTP principal
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|KEYTAB_FILE
argument_list|,
name|clientPrincipal
argument_list|,
name|HTTP_PRINCIPAL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets up {@link MiniKdc} for testing security.    * Copied from HBaseTestingUtility#setupMiniKdc().    */
specifier|static
specifier|private
name|MiniKdc
name|setupMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|conf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|put
argument_list|(
name|MiniKdc
operator|.
name|DEBUG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniKdc
name|kdc
init|=
literal|null
decl_stmt|;
name|File
name|dir
init|=
literal|null
decl_stmt|;
comment|// There is time lag between selecting a port and trying to bind with it. It's possible that
comment|// another service captures the port in between which'll result in BindException.
name|boolean
name|bindException
decl_stmt|;
name|int
name|numTries
init|=
literal|0
decl_stmt|;
do|do
block|{
try|try
block|{
name|bindException
operator|=
literal|false
expr_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
name|htu
operator|.
name|getDataTestDir
argument_list|(
literal|"kdc"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|conf
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BindException
name|e
parameter_list|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// clean directory
name|numTries
operator|++
expr_stmt|;
if|if
condition|(
name|numTries
operator|==
literal|3
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed setting up MiniKDC. Tried "
operator|+
name|numTries
operator|+
literal|" times."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|log
operator|.
name|error
argument_list|(
literal|"BindException encountered when setting up MiniKdc. Trying again."
argument_list|)
expr_stmt|;
name|bindException
operator|=
literal|true
expr_stmt|;
block|}
block|}
do|while
condition|(
name|bindException
condition|)
do|;
return|return
name|kdc
return|;
block|}
specifier|static
specifier|private
name|void
name|setupSSL
parameter_list|(
name|File
name|base
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|keystoresDir
operator|=
name|base
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|sslConfDir
operator|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestLogLevel
operator|.
name|class
argument_list|)
expr_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfDir
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sslConf
operator|=
name|getSslConfig
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the SSL configuration.    * This method is copied from KeyStoreTestUtil#getSslConfig() in Hadoop.    * @return {@link Configuration} instance with ssl configs loaded.    */
specifier|private
specifier|static
name|Configuration
name|getSslConfig
parameter_list|()
block|{
name|Configuration
name|sslConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|sslServerConfFile
init|=
literal|"ssl-server.xml"
decl_stmt|;
name|String
name|sslClientConfFile
init|=
literal|"ssl-client.xml"
decl_stmt|;
name|sslConf
operator|.
name|addResource
argument_list|(
name|sslServerConfFile
argument_list|)
expr_stmt|;
name|sslConf
operator|.
name|addResource
argument_list|(
name|sslClientConfFile
argument_list|)
expr_stmt|;
name|sslConf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_SERVER_CONF_KEY
argument_list|,
name|sslServerConfFile
argument_list|)
expr_stmt|;
name|sslConf
operator|.
name|set
argument_list|(
name|SSLFactory
operator|.
name|SSL_CLIENT_CONF_KEY
argument_list|,
name|sslClientConfFile
argument_list|)
expr_stmt|;
return|return
name|sslConf
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|BASEDIR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test client command line options. Does not validate server behavior.    * @throws Exception if commands return unexpected results.    */
annotation|@
name|Test
specifier|public
name|void
name|testCommandOptions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|className
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-foo"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail due to insufficient number of arguments
name|assertFalse
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getlevel"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setlevel"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getlevel"
block|,
literal|"foo.bar:8080"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// valid command arguments
name|assertTrue
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getlevel"
block|,
literal|"foo.bar:8080"
block|,
name|className
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setlevel"
block|,
literal|"foo.bar:8080"
block|,
name|className
block|,
literal|"DEBUG"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getlevel"
block|,
literal|"foo.bar:8080"
block|,
name|className
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setlevel"
block|,
literal|"foo.bar:8080"
block|,
name|className
block|,
literal|"DEBUG"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail due to the extra argument
name|assertFalse
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getlevel"
block|,
literal|"foo.bar:8080"
block|,
name|className
block|,
literal|"blah"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setlevel"
block|,
literal|"foo.bar:8080"
block|,
name|className
block|,
literal|"DEBUG"
block|,
literal|"blah"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|validateCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getlevel"
block|,
literal|"foo.bar:8080"
block|,
name|className
block|,
literal|"-setlevel"
block|,
literal|"foo.bar:8080"
block|,
name|className
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check to see if a command can be accepted.    *    * @param args a String array of arguments    * @return true if the command can be accepted, false if not.    */
specifier|private
name|boolean
name|validateCommand
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CLI
name|cli
init|=
operator|new
name|CLI
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
try|try
block|{
name|cli
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// this is used to verify the command arguments only.
comment|// no HadoopIllegalArgumentException = the arguments are good.
return|return
literal|true
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Creates and starts a Jetty server binding at an ephemeral port to run    * LogLevel servlet.    * @param protocol "http" or "https"    * @param isSpnego true if SPNEGO is enabled    * @return a created HttpServer object    * @throws Exception if unable to create or start a Jetty server    */
specifier|private
name|HttpServer
name|createServer
parameter_list|(
name|String
name|protocol
parameter_list|,
name|boolean
name|isSpnego
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpServer
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|".."
argument_list|)
operator|.
name|addEndpoint
argument_list|(
operator|new
name|URI
argument_list|(
name|protocol
operator|+
literal|"://localhost:0"
argument_list|)
argument_list|)
operator|.
name|setFindPort
argument_list|(
literal|true
argument_list|)
operator|.
name|setConf
argument_list|(
name|serverConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSpnego
condition|)
block|{
comment|// Set up server Kerberos credentials.
comment|// Since the server may fall back to simple authentication,
comment|// use ACL to make sure the connection is Kerberos/SPNEGO authenticated.
name|builder
operator|.
name|setSecurityEnabled
argument_list|(
literal|true
argument_list|)
operator|.
name|setUsernameConfKey
argument_list|(
name|PRINCIPAL
argument_list|)
operator|.
name|setKeytabConfKey
argument_list|(
name|KEYTAB
argument_list|)
operator|.
name|setACL
argument_list|(
operator|new
name|AccessControlList
argument_list|(
literal|"client"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if using HTTPS, configure keystore/truststore properties.
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|)
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|keyPassword
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.keypassword"
argument_list|)
argument_list|)
operator|.
name|keyStore
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.location"
argument_list|)
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.password"
argument_list|)
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.type"
argument_list|,
literal|"jks"
argument_list|)
argument_list|)
operator|.
name|trustStore
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.location"
argument_list|)
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.password"
argument_list|)
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.type"
argument_list|,
literal|"jks"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HttpServer
name|server
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|server
return|;
block|}
specifier|private
name|void
name|testDynamicLogLevel
parameter_list|(
specifier|final
name|String
name|bindProtocol
parameter_list|,
specifier|final
name|String
name|connectProtocol
parameter_list|,
specifier|final
name|boolean
name|isSpnego
parameter_list|)
throws|throws
name|Exception
block|{
name|testDynamicLogLevel
argument_list|(
name|bindProtocol
argument_list|,
name|connectProtocol
argument_list|,
name|isSpnego
argument_list|,
name|Level
operator|.
name|DEBUG
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run both client and server using the given protocol.    *    * @param bindProtocol specify either http or https for server    * @param connectProtocol specify either http or https for client    * @param isSpnego true if SPNEGO is enabled    * @throws Exception if client can't accesss server.    */
specifier|private
name|void
name|testDynamicLogLevel
parameter_list|(
specifier|final
name|String
name|bindProtocol
parameter_list|,
specifier|final
name|String
name|connectProtocol
parameter_list|,
specifier|final
name|boolean
name|isSpnego
parameter_list|,
specifier|final
name|String
name|newLevel
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|LogLevel
operator|.
name|isValidProtocol
argument_list|(
name|bindProtocol
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid server protocol "
operator|+
name|bindProtocol
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|LogLevel
operator|.
name|isValidProtocol
argument_list|(
name|connectProtocol
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid client protocol "
operator|+
name|connectProtocol
argument_list|)
throw|;
block|}
name|Level
name|oldLevel
init|=
name|log
operator|.
name|getEffectiveLevel
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"Get default Log Level which shouldn't be ERROR."
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|,
name|oldLevel
argument_list|)
expr_stmt|;
comment|// configs needed for SPNEGO at server side
if|if
condition|(
name|isSpnego
condition|)
block|{
name|serverConf
operator|.
name|set
argument_list|(
name|PRINCIPAL
argument_list|,
name|HTTP_PRINCIPAL
argument_list|)
expr_stmt|;
name|serverConf
operator|.
name|set
argument_list|(
name|KEYTAB
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|serverConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|serverConf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|serverConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|serverConf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|serverConf
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HttpServer
name|server
init|=
name|createServer
argument_list|(
name|bindProtocol
argument_list|,
name|isSpnego
argument_list|)
decl_stmt|;
comment|// get server port
specifier|final
name|String
name|authority
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|server
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keytabFilePath
init|=
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|clientUGI
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|clientPrincipal
argument_list|,
name|keytabFilePath
argument_list|)
decl_stmt|;
try|try
block|{
name|clientUGI
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
comment|// client command line
name|getLevel
argument_list|(
name|connectProtocol
argument_list|,
name|authority
argument_list|)
block|;
name|setLevel
argument_list|(
name|connectProtocol
argument_list|,
name|authority
argument_list|,
name|newLevel
argument_list|)
block|;
return|return
literal|null
return|;
block|}
block|)
empty_stmt|;
block|}
finally|finally
block|{
name|clientUGI
operator|.
name|logoutUserFromKeytab
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// restore log level
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|log
parameter_list|,
name|oldLevel
parameter_list|)
constructor_decl|;
block|}
end_class

begin_comment
comment|/**    * Run LogLevel command line to start a client to get log level of this test    * class.    *    * @param protocol specify either http or https    * @param authority daemon's web UI address    * @throws Exception if unable to connect    */
end_comment

begin_function
specifier|private
name|void
name|getLevel
parameter_list|(
name|String
name|protocol
parameter_list|,
name|String
name|authority
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|getLevelArgs
init|=
block|{
literal|"-getlevel"
block|,
name|authority
block|,
name|logName
block|,
literal|"-protocol"
block|,
name|protocol
block|}
decl_stmt|;
name|CLI
name|cli
init|=
operator|new
name|CLI
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|cli
operator|.
name|run
argument_list|(
name|getLevelArgs
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Run LogLevel command line to start a client to set log level of this test    * class to debug.    *    * @param protocol specify either http or https    * @param authority daemon's web UI address    * @throws Exception if unable to run or log level does not change as expected    */
end_comment

begin_function
specifier|private
name|void
name|setLevel
parameter_list|(
name|String
name|protocol
parameter_list|,
name|String
name|authority
parameter_list|,
name|String
name|newLevel
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|setLevelArgs
init|=
block|{
literal|"-setlevel"
block|,
name|authority
block|,
name|logName
block|,
name|newLevel
block|,
literal|"-protocol"
block|,
name|protocol
block|}
decl_stmt|;
name|CLI
name|cli
init|=
operator|new
name|CLI
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|cli
operator|.
name|run
argument_list|(
name|setLevelArgs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new level not equal to expected: "
argument_list|,
name|newLevel
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|log
operator|.
name|getEffectiveLevel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Test setting log level to "Info".    *    * @throws Exception if client can't set log level to INFO.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testInfoLogLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
literal|true
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Test setting log level to "Error".    *    * @throws Exception if client can't set log level to ERROR.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testErrorLogLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
literal|true
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Server runs HTTP, no SPNEGO.    *    * @throws Exception if http client can't access http server,    *   or http client can access https server.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testLogLevelByHttp
parameter_list|()
throws|throws
name|Exception
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"A HTTPS Client should not have succeeded in connecting to a "
operator|+
literal|"HTTP server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|e
parameter_list|)
block|{
name|exceptionShouldContains
argument_list|(
literal|"Unrecognized SSL message"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Server runs HTTP + SPNEGO.    *    * @throws Exception if http client can't access http server,    *   or http client can access https server.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testLogLevelByHttpWithSpnego
parameter_list|()
throws|throws
name|Exception
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"A HTTPS Client should not have succeeded in connecting to a "
operator|+
literal|"HTTP server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|e
parameter_list|)
block|{
name|exceptionShouldContains
argument_list|(
literal|"Unrecognized SSL message"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Server runs HTTPS, no SPNEGO.    *    * @throws Exception if https client can't access https server,    *   or https client can access http server.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testLogLevelByHttps
parameter_list|()
throws|throws
name|Exception
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"A HTTP Client should not have succeeded in connecting to a "
operator|+
literal|"HTTPS server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
name|exceptionShouldContains
argument_list|(
literal|"Unexpected end of file from server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Server runs HTTPS + SPNEGO.    *    * @throws Exception if https client can't access https server,    *   or https client can access http server.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testLogLevelByHttpsWithSpnego
parameter_list|()
throws|throws
name|Exception
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|testDynamicLogLevel
argument_list|(
name|LogLevel
operator|.
name|PROTOCOL_HTTPS
argument_list|,
name|LogLevel
operator|.
name|PROTOCOL_HTTP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"A HTTP Client should not have succeeded in connecting to a "
operator|+
literal|"HTTPS server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
name|exceptionShouldContains
argument_list|(
literal|"Unexpected end of file from server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Assert that a throwable or one of its causes should contain the substr in its message.    *    * Ideally we should use {@link GenericTestUtils#assertExceptionContains(String, Throwable)} util    * method which asserts t.toString() contains the substr. As the original throwable may have been    * wrapped in Hadoop3 because of HADOOP-12897, it's required to check all the wrapped causes.    * After stop supporting Hadoop2, this method can be removed and assertion in tests can use    * t.getCause() directly, similar to HADOOP-15280.    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|exceptionShouldContains
parameter_list|(
name|String
name|substr
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|throwable
decl_stmt|;
while|while
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|t
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|contains
argument_list|(
name|substr
argument_list|)
condition|)
block|{
return|return;
block|}
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected to find '"
operator|+
name|substr
operator|+
literal|"' but got unexpected exception:"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|throwable
argument_list|)
argument_list|,
name|throwable
argument_list|)
throw|;
block|}
end_function

unit|}
end_unit

