begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|log
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Jdk14Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|KerberosAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServletUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|impl
operator|.
name|Log4jLoggerAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * Change log level in runtime.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|LogLevel
block|{
specifier|private
specifier|static
specifier|final
name|String
name|USAGES
init|=
literal|"\nUsage: General options are:\n"
operator|+
literal|"\t[-getlevel<host:port><classname> [-protocol (http|https)]\n"
operator|+
literal|"\t[-setlevel<host:port><classname><level> [-protocol (http|https)]"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROTOCOL_HTTP
init|=
literal|"http"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROTOCOL_HTTPS
init|=
literal|"https"
decl_stmt|;
comment|/**    * A command line implementation    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|CLI
name|cli
init|=
operator|new
name|CLI
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|cli
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Valid command line options.    */
specifier|private
enum|enum
name|Operations
block|{
name|GETLEVEL
block|,
name|SETLEVEL
block|,
name|UNKNOWN
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGES
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isValidProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
return|return
operator|(
operator|(
name|protocol
operator|.
name|equals
argument_list|(
name|PROTOCOL_HTTP
argument_list|)
operator|||
name|protocol
operator|.
name|equals
argument_list|(
name|PROTOCOL_HTTPS
argument_list|)
operator|)
operator|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|CLI
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
name|Operations
name|operation
init|=
name|Operations
operator|.
name|UNKNOWN
decl_stmt|;
specifier|private
name|String
name|protocol
decl_stmt|;
specifier|private
name|String
name|hostName
decl_stmt|;
specifier|private
name|String
name|className
decl_stmt|;
specifier|private
name|String
name|level
decl_stmt|;
name|CLI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|sendLogLevelRequest
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**      * Send HTTP request to the daemon.      * @throws HadoopIllegalArgumentException if arguments are invalid.      * @throws Exception if unable to connect      */
specifier|private
name|void
name|sendLogLevelRequest
parameter_list|()
throws|throws
name|HadoopIllegalArgumentException
throws|,
name|Exception
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|GETLEVEL
case|:
name|doGetLevel
argument_list|()
expr_stmt|;
break|break;
case|case
name|SETLEVEL
case|:
name|doSetLevel
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Expect either -getlevel or -setlevel"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|parseArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|HadoopIllegalArgumentException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"No arguments specified"
argument_list|)
throw|;
block|}
name|int
name|nextArgIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nextArgIndex
operator|<
name|args
operator|.
name|length
condition|)
block|{
switch|switch
condition|(
name|args
index|[
name|nextArgIndex
index|]
condition|)
block|{
case|case
literal|"-getlevel"
case|:
name|nextArgIndex
operator|=
name|parseGetLevelArgs
argument_list|(
name|args
argument_list|,
name|nextArgIndex
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"-setlevel"
case|:
name|nextArgIndex
operator|=
name|parseSetLevelArgs
argument_list|(
name|args
argument_list|,
name|nextArgIndex
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"-protocol"
case|:
name|nextArgIndex
operator|=
name|parseProtocolArgs
argument_list|(
name|args
argument_list|,
name|nextArgIndex
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Unexpected argument "
operator|+
name|args
index|[
name|nextArgIndex
index|]
argument_list|)
throw|;
block|}
block|}
comment|// if operation is never specified in the arguments
if|if
condition|(
name|operation
operator|==
name|Operations
operator|.
name|UNKNOWN
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Must specify either -getlevel or -setlevel"
argument_list|)
throw|;
block|}
comment|// if protocol is unspecified, set it as http.
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
name|protocol
operator|=
name|PROTOCOL_HTTP
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|parseGetLevelArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|HadoopIllegalArgumentException
block|{
comment|// fail if multiple operations are specified in the arguments
if|if
condition|(
name|operation
operator|!=
name|Operations
operator|.
name|UNKNOWN
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Redundant -getlevel command"
argument_list|)
throw|;
block|}
comment|// check number of arguments is sufficient
if|if
condition|(
name|index
operator|+
literal|2
operator|>=
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"-getlevel needs two parameters"
argument_list|)
throw|;
block|}
name|operation
operator|=
name|Operations
operator|.
name|GETLEVEL
expr_stmt|;
name|hostName
operator|=
name|args
index|[
name|index
operator|+
literal|1
index|]
expr_stmt|;
name|className
operator|=
name|args
index|[
name|index
operator|+
literal|2
index|]
expr_stmt|;
return|return
name|index
operator|+
literal|3
return|;
block|}
specifier|private
name|int
name|parseSetLevelArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|HadoopIllegalArgumentException
block|{
comment|// fail if multiple operations are specified in the arguments
if|if
condition|(
name|operation
operator|!=
name|Operations
operator|.
name|UNKNOWN
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Redundant -setlevel command"
argument_list|)
throw|;
block|}
comment|// check number of arguments is sufficient
if|if
condition|(
name|index
operator|+
literal|3
operator|>=
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"-setlevel needs three parameters"
argument_list|)
throw|;
block|}
name|operation
operator|=
name|Operations
operator|.
name|SETLEVEL
expr_stmt|;
name|hostName
operator|=
name|args
index|[
name|index
operator|+
literal|1
index|]
expr_stmt|;
name|className
operator|=
name|args
index|[
name|index
operator|+
literal|2
index|]
expr_stmt|;
name|level
operator|=
name|args
index|[
name|index
operator|+
literal|3
index|]
expr_stmt|;
return|return
name|index
operator|+
literal|4
return|;
block|}
specifier|private
name|int
name|parseProtocolArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|HadoopIllegalArgumentException
block|{
comment|// make sure only -protocol is specified
if|if
condition|(
name|protocol
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Redundant -protocol command"
argument_list|)
throw|;
block|}
comment|// check number of arguments is sufficient
if|if
condition|(
name|index
operator|+
literal|1
operator|>=
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"-protocol needs one parameter"
argument_list|)
throw|;
block|}
comment|// check protocol is valid
name|protocol
operator|=
name|args
index|[
name|index
operator|+
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|isValidProtocol
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid protocol: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
return|return
name|index
operator|+
literal|2
return|;
block|}
comment|/**      * Send HTTP request to get log level.      *      * @throws HadoopIllegalArgumentException if arguments are invalid.      * @throws Exception if unable to connect      */
specifier|private
name|void
name|doGetLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|process
argument_list|(
name|protocol
operator|+
literal|"://"
operator|+
name|hostName
operator|+
literal|"/logLevel?log="
operator|+
name|className
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send HTTP request to set log level.      *      * @throws HadoopIllegalArgumentException if arguments are invalid.      * @throws Exception if unable to connect      */
specifier|private
name|void
name|doSetLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|process
argument_list|(
name|protocol
operator|+
literal|"://"
operator|+
name|hostName
operator|+
literal|"/logLevel?log="
operator|+
name|className
operator|+
literal|"&level="
operator|+
name|level
argument_list|)
expr_stmt|;
block|}
comment|/**      * Connect to the URL. Supports HTTP and supports SPNEGO      * authentication. It falls back to simple authentication if it fails to      * initiate SPNEGO.      *      * @param url the URL address of the daemon servlet      * @return a connected connection      * @throws Exception if it can not establish a connection.      */
specifier|private
name|URLConnection
name|connect
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|AuthenticatedURL
name|aUrl
decl_stmt|;
name|SSLFactory
name|clientSslFactory
decl_stmt|;
name|URLConnection
name|connection
decl_stmt|;
comment|// If https is chosen, configures SSL client.
if|if
condition|(
name|PROTOCOL_HTTPS
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|clientSslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|this
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|clientSslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|SSLSocketFactory
name|sslSocketF
init|=
name|clientSslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
decl_stmt|;
name|aUrl
operator|=
operator|new
name|AuthenticatedURL
argument_list|(
operator|new
name|KerberosAuthenticator
argument_list|()
argument_list|,
name|clientSslFactory
argument_list|)
expr_stmt|;
name|connection
operator|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|HttpsURLConnection
name|httpsConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|connection
decl_stmt|;
name|httpsConn
operator|.
name|setSSLSocketFactory
argument_list|(
name|sslSocketF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aUrl
operator|=
operator|new
name|AuthenticatedURL
argument_list|(
operator|new
name|KerberosAuthenticator
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
comment|/**      * Configures the client to send HTTP request to the URL.      * Supports SPENGO for authentication.      * @param urlString URL and query string to the daemon's web UI      * @throws Exception if unable to connect      */
specifier|private
name|void
name|process
parameter_list|(
name|String
name|urlString
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|urlString
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connecting to "
operator|+
name|url
argument_list|)
expr_stmt|;
name|URLConnection
name|connection
init|=
name|connect
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// read from the servlet
try|try
init|(
name|InputStreamReader
name|streamReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
init|;
name|BufferedReader
name|bufferedReader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|streamReader
argument_list|)
init|)
block|{
name|bufferedReader
operator|.
name|lines
argument_list|()
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|filter
argument_list|(
name|line
lambda|->
name|line
operator|.
name|startsWith
argument_list|(
name|MARKER
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|line
lambda|->
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TAG
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|""
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|MARKER
init|=
literal|"<!-- OUTPUT -->"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|TAG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<[^>]*>"
argument_list|)
decl_stmt|;
comment|/**    * A servlet implementation    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
specifier|static
class|class
name|Servlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|// Do the authorization
if|if
condition|(
operator|!
name|HttpServer
operator|.
name|hasAdministratorAccess
argument_list|(
name|getServletContext
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Disallow modification of the LogLevel if explicitly set to readonly
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|HttpServer
operator|.
name|CONF_CONTEXT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.master.ui.readonly"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Modification of HBase via"
operator|+
literal|" the UI is disallowed in configuration."
argument_list|)
expr_stmt|;
return|return;
block|}
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
decl_stmt|;
try|try
block|{
name|String
name|headerPath
init|=
literal|"header.jsp?pageTitle=Log Level"
decl_stmt|;
name|request
operator|.
name|getRequestDispatcher
argument_list|(
name|headerPath
argument_list|)
operator|.
name|include
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|out
operator|=
name|response
operator|.
name|getWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// in case file is not found fall back to old design
name|out
operator|=
name|ServletUtil
operator|.
name|initHTML
argument_list|(
name|response
argument_list|,
literal|"Log Level"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
name|FORMS
argument_list|)
expr_stmt|;
name|String
name|logName
init|=
name|ServletUtil
operator|.
name|getParameter
argument_list|(
name|request
argument_list|,
literal|"log"
argument_list|)
decl_stmt|;
name|String
name|level
init|=
name|ServletUtil
operator|.
name|getParameter
argument_list|(
name|request
argument_list|,
literal|"level"
argument_list|)
decl_stmt|;
if|if
condition|(
name|logName
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<p>Results:</p>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|MARKER
operator|+
literal|"Submitted Log Name:<b>"
operator|+
name|logName
operator|+
literal|"</b><br />"
argument_list|)
expr_stmt|;
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|logName
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|MARKER
operator|+
literal|"Log Class:<b>"
operator|+
name|log
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</b><br />"
argument_list|)
expr_stmt|;
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|MARKER
operator|+
literal|"Submitted Level:<b>"
operator|+
name|level
operator|+
literal|"</b><br />"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|instanceof
name|Log4JLogger
condition|)
block|{
name|process
argument_list|(
operator|(
operator|(
name|Log4JLogger
operator|)
name|log
operator|)
operator|.
name|getLogger
argument_list|()
argument_list|,
name|level
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|log
operator|instanceof
name|Jdk14Logger
condition|)
block|{
name|process
argument_list|(
operator|(
operator|(
name|Jdk14Logger
operator|)
name|log
operator|)
operator|.
name|getLogger
argument_list|()
argument_list|,
name|level
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|log
operator|instanceof
name|Log4jLoggerAdapter
condition|)
block|{
name|process
argument_list|(
name|LogManager
operator|.
name|getLogger
argument_list|(
name|logName
argument_list|)
argument_list|,
name|level
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Sorry, "
operator|+
name|log
operator|.
name|getClass
argument_list|()
operator|+
literal|" not supported.<br />"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|String
name|footerPath
init|=
literal|"footer.jsp"
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getRequestDispatcher
argument_list|(
name|footerPath
argument_list|)
operator|.
name|include
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|ServletUtil
operator|.
name|HTML_TAIL
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|static
specifier|final
name|String
name|FORMS
init|=
literal|"<div class='container-fluid content'>\n"
operator|+
literal|"<div class='row inner_header'>\n"
operator|+
literal|"<div class='page-header'>\n"
operator|+
literal|"<h1>Get/Set Log Level</h1>\n"
operator|+
literal|"</div>\n"
operator|+
literal|"</div>\n"
operator|+
literal|"Actions:"
operator|+
literal|"<p>"
operator|+
literal|"<center>\n"
operator|+
literal|"<table class='table' style='border: 0;' width='95%'>\n"
operator|+
literal|"<tr>\n"
operator|+
literal|"<form>\n"
operator|+
literal|"<td class='centered'>\n"
operator|+
literal|"<input style='font-size: 12pt; width: 10em' type='submit' value='Get Log Level'"
operator|+
literal|" class='btn' />\n"
operator|+
literal|"</td>\n"
operator|+
literal|"<td style='text-align: center;'>\n"
operator|+
literal|"<input type='text' name='log' size='50' required='required'"
operator|+
literal|" placeholder='Log Name (required)' />\n"
operator|+
literal|"</td>\n"
operator|+
literal|"<td width=\"40%\">"
operator|+
literal|"Get the current log level for the specified log name."
operator|+
literal|"</td>\n"
operator|+
literal|"</form>\n"
operator|+
literal|"</tr>\n"
operator|+
literal|"<tr>\n"
operator|+
literal|"<form>\n"
operator|+
literal|"<td class='centered'>\n"
operator|+
literal|"<input style='font-size: 12pt; width: 10em' type='submit'"
operator|+
literal|" value='Set Log Level' class='btn' />\n"
operator|+
literal|"</td>\n"
operator|+
literal|"<td style='text-align: center;'>\n"
operator|+
literal|"<input type='text' name='log' size='50' required='required'"
operator|+
literal|" placeholder='Log Name (required)' />\n"
operator|+
literal|"<input type='text' name='level' size='50' required='required'"
operator|+
literal|" placeholder='Log Level (required)' />\n"
operator|+
literal|"</td>\n"
operator|+
literal|"<td width=\"40%\" style=\"\">"
operator|+
literal|"Set the specified log level for the specified log name."
operator|+
literal|"</td>\n"
operator|+
literal|"</form>\n"
operator|+
literal|"</tr>\n"
operator|+
literal|"</table>\n"
operator|+
literal|"</center>\n"
operator|+
literal|"</p>\n"
operator|+
literal|"<hr/>\n"
decl_stmt|;
specifier|private
specifier|static
name|void
name|process
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|log
parameter_list|,
name|String
name|level
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|level
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|toLevel
argument_list|(
name|level
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|MARKER
operator|+
literal|"<div class='text-danger'>"
operator|+
literal|"Bad level :<strong>"
operator|+
name|level
operator|+
literal|"</strong><br />"
operator|+
literal|"</div>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|toLevel
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|MARKER
operator|+
literal|"<div class='text-success'>"
operator|+
literal|"Setting Level to<strong>"
operator|+
name|level
operator|+
literal|"</strong> ...<br />"
operator|+
literal|"</div>"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
name|MARKER
operator|+
literal|"Effective level:<b>"
operator|+
name|log
operator|.
name|getEffectiveLevel
argument_list|()
operator|+
literal|"</b><br />"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|process
parameter_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
name|log
parameter_list|,
name|String
name|level
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|setLevel
argument_list|(
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
operator|.
name|parse
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|MARKER
operator|+
literal|"Setting Level to "
operator|+
name|level
operator|+
literal|" ...<br />"
argument_list|)
expr_stmt|;
block|}
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
name|lev
decl_stmt|;
while|while
condition|(
operator|(
name|lev
operator|=
name|log
operator|.
name|getLevel
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
name|log
operator|=
name|log
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
name|MARKER
operator|+
literal|"Effective level:<b>"
operator|+
name|lev
operator|+
literal|"</b><br />"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|LogLevel
parameter_list|()
block|{}
block|}
end_class

end_unit

