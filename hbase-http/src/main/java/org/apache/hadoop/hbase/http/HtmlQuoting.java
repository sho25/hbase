begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * This class is responsible for quoting HTML characters.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|HtmlQuoting
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ampBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"&amp;"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|aposBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"&apos;"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|gtBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"&gt;"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ltBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"&lt;"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|quotBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"&quot;"
argument_list|)
decl_stmt|;
comment|/**    * Does the given string need to be quoted?    * @param data the string to check    * @param off the starting position    * @param len the number of bytes to check    * @return does the string contain any of the active html characters?    */
specifier|public
specifier|static
name|boolean
name|needsQuoting
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|off
operator|+
name|len
operator|>
name|data
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"off+len="
operator|+
name|off
operator|+
name|len
operator|+
literal|" should be lower"
operator|+
literal|" than data length="
operator|+
name|data
operator|.
name|length
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
name|off
operator|+
name|len
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|data
index|[
name|i
index|]
condition|)
block|{
case|case
literal|'&'
case|:
case|case
literal|'<'
case|:
case|case
literal|'>'
case|:
case|case
literal|'\''
case|:
case|case
literal|'"'
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Does the given string need to be quoted?    * @param str the string to check    * @return does the string contain any of the active html characters?    */
specifier|public
specifier|static
name|boolean
name|needsQuoting
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
name|needsQuoting
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Quote all of the active HTML characters in the given string as they    * are added to the buffer.    * @param output the stream to write the output to    * @param buffer the byte array to take the characters from    * @param off the index of the first byte to quote    * @param len the number of bytes to quote    */
specifier|public
specifier|static
name|void
name|quoteHtmlChars
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
name|off
operator|+
name|len
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|buffer
index|[
name|i
index|]
condition|)
block|{
case|case
literal|'&'
case|:
name|output
operator|.
name|write
argument_list|(
name|ampBytes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
name|output
operator|.
name|write
argument_list|(
name|ltBytes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|output
operator|.
name|write
argument_list|(
name|gtBytes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\''
case|:
name|output
operator|.
name|write
argument_list|(
name|aposBytes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'"'
case|:
name|output
operator|.
name|write
argument_list|(
name|quotBytes
argument_list|)
expr_stmt|;
break|break;
default|default:
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Quote the given item to make it html-safe.    * @param item the string to quote    * @return the quoted string    */
specifier|public
specifier|static
name|String
name|quoteHtmlChars
parameter_list|(
name|String
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|needsQuoting
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
condition|)
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|quoteHtmlChars
argument_list|(
name|buffer
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Won't happen, since it is a bytearrayoutputstream
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|item
return|;
block|}
block|}
comment|/**    * Return an output stream that quotes all of the output.    * @param out the stream to write the quoted output to    * @return a new stream that the application show write to    */
specifier|public
specifier|static
name|OutputStream
name|quoteOutputStream
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
return|return
operator|new
name|OutputStream
argument_list|()
block|{
specifier|private
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|quoteHtmlChars
argument_list|(
name|out
argument_list|,
name|data
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|quoteHtmlChars
argument_list|(
name|out
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Remove HTML quoting from a string.    * @param item the string to unquote    * @return the unquoted string    */
specifier|public
specifier|static
name|String
name|unquoteHtmlChars
parameter_list|(
name|String
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|next
init|=
name|item
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
decl_stmt|;
comment|// nothing was quoted
if|if
condition|(
name|next
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|item
return|;
block|}
name|int
name|len
init|=
name|item
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|posn
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|item
operator|.
name|substring
argument_list|(
name|posn
argument_list|,
name|next
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|startsWith
argument_list|(
literal|"&amp;"
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
name|next
operator|+=
literal|5
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|startsWith
argument_list|(
literal|"&apos;"
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|next
operator|+=
literal|6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|startsWith
argument_list|(
literal|"&gt;"
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|next
operator|+=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|startsWith
argument_list|(
literal|"&lt;"
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|next
operator|+=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|startsWith
argument_list|(
literal|"&quot;"
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|next
operator|+=
literal|6
expr_stmt|;
block|}
else|else
block|{
name|int
name|end
init|=
name|item
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|,
name|next
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|end
operator|==
literal|0
condition|)
block|{
name|end
operator|=
name|len
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad HTML quoting for "
operator|+
name|item
operator|.
name|substring
argument_list|(
name|next
argument_list|,
name|end
argument_list|)
argument_list|)
throw|;
block|}
name|posn
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|item
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|,
name|posn
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|item
operator|.
name|substring
argument_list|(
name|posn
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Please provide some arguments"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Original: "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|String
name|quoted
init|=
name|quoteHtmlChars
argument_list|(
name|arg
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Quoted: "
operator|+
name|quoted
argument_list|)
expr_stmt|;
name|String
name|unquoted
init|=
name|unquoteHtmlChars
argument_list|(
name|quoted
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unquoted: "
operator|+
name|unquoted
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|HtmlQuoting
parameter_list|()
block|{}
block|}
end_class

end_unit

