begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Testcases for FastLongHistogram.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFastLongHistogram
block|{
specifier|private
specifier|static
name|void
name|doTestUniform
parameter_list|(
name|FastLongHistogram
name|hist
parameter_list|)
block|{
name|long
index|[]
name|VALUES
init|=
block|{
literal|0
block|,
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|}
decl_stmt|;
name|double
index|[]
name|qs
init|=
operator|new
name|double
index|[
name|VALUES
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qs
index|[
name|i
index|]
operator|=
operator|(
name|double
operator|)
name|VALUES
index|[
name|i
index|]
operator|/
name|VALUES
index|[
name|VALUES
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|long
name|v
range|:
name|VALUES
control|)
block|{
name|hist
operator|.
name|add
argument_list|(
name|v
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|vals
init|=
name|hist
operator|.
name|getQuantiles
argument_list|(
name|qs
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|vals
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|qs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|j
operator|+
literal|"-th element org: "
operator|+
name|VALUES
index|[
name|j
index|]
operator|+
literal|", act: "
operator|+
name|vals
index|[
name|j
index|]
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|vals
index|[
name|j
index|]
operator|-
name|VALUES
index|[
name|j
index|]
argument_list|)
operator|<=
literal|10
argument_list|)
expr_stmt|;
block|}
name|hist
operator|.
name|snapshotAndReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniform
parameter_list|()
block|{
name|FastLongHistogram
name|hist
init|=
operator|new
name|FastLongHistogram
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|doTestUniform
argument_list|(
name|hist
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdaptionOfChange
parameter_list|()
block|{
comment|// assumes the uniform distribution
name|FastLongHistogram
name|hist
init|=
operator|new
name|FastLongHistogram
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
literal|10
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|900
condition|;
name|i
operator|++
control|)
block|{
name|hist
operator|.
name|add
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// add 10% outliers, this breaks the assumption, hope bin10xMax works
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|hist
operator|.
name|add
argument_list|(
literal|1000
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|vals
init|=
name|hist
operator|.
name|getQuantiles
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.25
block|,
literal|0.75
block|,
literal|0.95
block|}
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|vals
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Out of possible value"
argument_list|,
name|vals
index|[
literal|0
index|]
operator|>=
literal|0
operator|&&
name|vals
index|[
literal|0
index|]
operator|<=
literal|50
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Out of possible value"
argument_list|,
name|vals
index|[
literal|1
index|]
operator|>=
literal|50
operator|&&
name|vals
index|[
literal|1
index|]
operator|<=
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Out of possible value"
argument_list|,
name|vals
index|[
literal|2
index|]
operator|>=
literal|900
operator|&&
name|vals
index|[
literal|2
index|]
operator|<=
literal|1100
argument_list|)
expr_stmt|;
block|}
name|hist
operator|.
name|snapshotAndReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNumAtOrBelow
parameter_list|()
block|{
name|long
index|[]
name|VALUES
init|=
block|{
literal|1
block|,
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|}
decl_stmt|;
name|FastLongHistogram
name|h
init|=
operator|new
name|FastLongHistogram
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|v
range|:
name|VALUES
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|.
name|add
argument_list|(
name|v
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|h
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|h
operator|.
name|snapshotAndReset
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|v
range|:
name|VALUES
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|.
name|add
argument_list|(
name|v
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add something way out there to make sure it doesn't throw off the counts.
name|h
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|h
operator|.
name|getNumAtOrBelow
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|h
operator|.
name|getNumAtOrBelow
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|601
argument_list|,
name|h
operator|.
name|getNumAtOrBelow
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameValues
parameter_list|()
block|{
name|FastLongHistogram
name|hist
init|=
operator|new
name|FastLongHistogram
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|hist
operator|.
name|add
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|hist
operator|.
name|snapshotAndReset
argument_list|()
expr_stmt|;
name|doTestUniform
argument_list|(
name|hist
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

