begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetricRegistryImpl
block|{
specifier|private
name|MetricRegistryInfo
name|info
decl_stmt|;
specifier|private
name|MetricRegistryImpl
name|registry
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|info
operator|=
operator|new
name|MetricRegistryInfo
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|,
literal|"foobar"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|registry
operator|=
operator|new
name|MetricRegistryImpl
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCounter
parameter_list|()
block|{
name|Counter
name|counter
init|=
name|registry
operator|.
name|counter
argument_list|(
literal|"mycounter"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|(
literal|42L
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|(
literal|"mycounter"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
call|(
name|long
call|)
argument_list|(
operator|(
name|Counter
operator|)
name|metric
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterGauge
parameter_list|()
block|{
name|registry
operator|.
name|register
argument_list|(
literal|"mygauge"
argument_list|,
operator|new
name|Gauge
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
literal|42L
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|(
literal|"mygauge"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
call|(
name|long
call|)
argument_list|(
operator|(
name|Gauge
argument_list|<
name|Long
argument_list|>
operator|)
name|metric
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisterGaugeLambda
parameter_list|()
block|{
comment|// register a Gauge using lambda expression
name|registry
operator|.
name|register
argument_list|(
literal|"gaugeLambda"
argument_list|,
parameter_list|()
lambda|->
literal|42L
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|(
literal|"gaugeLambda"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
call|(
name|long
call|)
argument_list|(
operator|(
name|Gauge
argument_list|<
name|Long
argument_list|>
operator|)
name|metric
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimer
parameter_list|()
block|{
name|Timer
name|timer
init|=
name|registry
operator|.
name|timer
argument_list|(
literal|"mytimer"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|timer
argument_list|)
expr_stmt|;
name|timer
operator|.
name|updateNanos
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMeter
parameter_list|()
block|{
name|Meter
name|meter
init|=
name|registry
operator|.
name|meter
argument_list|(
literal|"mymeter"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|meter
argument_list|)
expr_stmt|;
name|meter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegister
parameter_list|()
block|{
name|CounterImpl
name|counter
init|=
operator|new
name|CounterImpl
argument_list|()
decl_stmt|;
name|registry
operator|.
name|register
argument_list|(
literal|"mycounter"
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|(
literal|42L
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|(
literal|"mycounter"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
call|(
name|long
call|)
argument_list|(
operator|(
name|Counter
operator|)
name|metric
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleRegister
parameter_list|()
block|{
name|Gauge
name|g1
init|=
name|registry
operator|.
name|register
argument_list|(
literal|"mygauge"
argument_list|,
parameter_list|()
lambda|->
literal|42L
argument_list|)
decl_stmt|;
name|Gauge
name|g2
init|=
name|registry
operator|.
name|register
argument_list|(
literal|"mygauge"
argument_list|,
parameter_list|()
lambda|->
literal|52L
argument_list|)
decl_stmt|;
comment|// second gauge is ignored if it exists
name|assertEquals
argument_list|(
name|g1
argument_list|,
name|g2
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|(
literal|"mygauge"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
call|(
name|long
call|)
argument_list|(
operator|(
name|Gauge
argument_list|<
name|Long
argument_list|>
operator|)
name|metric
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|c1
init|=
name|registry
operator|.
name|counter
argument_list|(
literal|"mycounter"
argument_list|)
decl_stmt|;
name|Counter
name|c2
init|=
name|registry
operator|.
name|counter
argument_list|(
literal|"mycounter"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetrics
parameter_list|()
block|{
name|CounterImpl
name|counter
init|=
operator|new
name|CounterImpl
argument_list|()
decl_stmt|;
name|registry
operator|.
name|register
argument_list|(
literal|"mycounter"
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|Gauge
name|gauge
init|=
name|registry
operator|.
name|register
argument_list|(
literal|"mygauge"
argument_list|,
parameter_list|()
lambda|->
literal|42L
argument_list|)
decl_stmt|;
name|Timer
name|timer
init|=
name|registry
operator|.
name|timer
argument_list|(
literal|"mytimer"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|registry
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|metrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counter
argument_list|,
name|metrics
operator|.
name|get
argument_list|(
literal|"mycounter"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gauge
argument_list|,
name|metrics
operator|.
name|get
argument_list|(
literal|"mygauge"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timer
argument_list|,
name|metrics
operator|.
name|get
argument_list|(
literal|"mytimer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

