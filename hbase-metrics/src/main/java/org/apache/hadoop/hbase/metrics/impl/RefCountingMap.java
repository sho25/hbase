begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A map of K to V, but does ref counting for added and removed values. The values are  * not added directly, but instead requested from the given Supplier if ref count == 0. Each put()  * call will increment the ref count, and each remove() will decrement it. The values are removed  * from the map iff ref count == 0.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|RefCountingMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
specifier|private
name|ConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|Payload
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
class|class
name|Payload
parameter_list|<
name|V
parameter_list|>
block|{
name|V
name|v
decl_stmt|;
name|int
name|refCount
decl_stmt|;
name|Payload
parameter_list|(
name|V
name|v
parameter_list|)
block|{
name|this
operator|.
name|v
operator|=
name|v
expr_stmt|;
name|this
operator|.
name|refCount
operator|=
literal|1
expr_stmt|;
comment|// create with ref count = 1
block|}
block|}
name|V
name|put
parameter_list|(
name|K
name|k
parameter_list|,
name|Supplier
argument_list|<
name|V
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Payload
argument_list|<
name|V
argument_list|>
operator|)
name|map
operator|.
name|compute
argument_list|(
name|k
argument_list|,
parameter_list|(
name|k1
parameter_list|,
name|oldValue
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|oldValue
operator|.
name|refCount
operator|++
expr_stmt|;
return|return
name|oldValue
return|;
block|}
else|else
block|{
return|return
operator|new
name|Payload
argument_list|(
name|supplier
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|)
operator|.
name|v
return|;
block|}
name|V
name|get
parameter_list|(
name|K
name|k
parameter_list|)
block|{
name|Payload
argument_list|<
name|V
argument_list|>
name|p
init|=
name|map
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|v
return|;
block|}
comment|/**    * Decrements the ref count of k, and removes from map if ref count == 0.    * @param k the key to remove    * @return the value associated with the specified key or null if key is removed from map.    */
name|V
name|remove
parameter_list|(
name|K
name|k
parameter_list|)
block|{
name|Payload
argument_list|<
name|V
argument_list|>
name|p
init|=
name|map
operator|.
name|computeIfPresent
argument_list|(
name|k
argument_list|,
operator|(
name|k1
expr|,
name|v
operator|)
operator|->
operator|--
name|v
operator|.
name|refCount
operator|<=
literal|0
condition|?
literal|null
else|:
name|v
argument_list|)
decl_stmt|;
return|return
name|p
operator|==
literal|null
condition|?
literal|null
else|:
name|p
operator|.
name|v
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|map
operator|.
name|keySet
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|map
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|v
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

