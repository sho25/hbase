begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ConcurrentMapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Custom implementation of {@link MetricRegistry}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricRegistryImpl
implements|implements
name|MetricRegistry
block|{
specifier|private
specifier|final
name|MetricRegistryInfo
name|info
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
decl_stmt|;
specifier|public
name|MetricRegistryImpl
parameter_list|(
name|MetricRegistryInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Timer
name|timer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Timer
operator|)
name|ConcurrentMapUtils
operator|.
name|computeIfAbsent
argument_list|(
name|metrics
argument_list|,
name|name
argument_list|,
name|this
operator|::
name|createTimer
argument_list|)
return|;
block|}
specifier|protected
name|Timer
name|createTimer
parameter_list|()
block|{
return|return
operator|new
name|TimerImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Histogram
name|histogram
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Histogram
operator|)
name|ConcurrentMapUtils
operator|.
name|computeIfAbsent
argument_list|(
name|metrics
argument_list|,
name|name
argument_list|,
name|this
operator|::
name|createHistogram
argument_list|)
return|;
block|}
specifier|protected
name|Histogram
name|createHistogram
parameter_list|()
block|{
return|return
operator|new
name|HistogramImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Meter
name|meter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Meter
operator|)
name|ConcurrentMapUtils
operator|.
name|computeIfAbsent
argument_list|(
name|metrics
argument_list|,
name|name
argument_list|,
name|this
operator|::
name|createMeter
argument_list|)
return|;
block|}
specifier|protected
name|Meter
name|createMeter
parameter_list|()
block|{
return|return
operator|new
name|DropwizardMeter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Counter
name|counter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Counter
operator|)
name|ConcurrentMapUtils
operator|.
name|computeIfAbsent
argument_list|(
name|metrics
argument_list|,
name|name
argument_list|,
name|this
operator|::
name|createCounter
argument_list|)
return|;
block|}
specifier|protected
name|Counter
name|createCounter
parameter_list|()
block|{
return|return
operator|new
name|CounterImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Metric
argument_list|>
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|metrics
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Metric
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|Metric
name|metric
parameter_list|)
block|{
return|return
name|ConcurrentMapUtils
operator|.
name|computeIfAbsent
argument_list|(
name|metrics
argument_list|,
name|name
argument_list|,
parameter_list|()
lambda|->
name|metric
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Gauge
argument_list|<
name|T
argument_list|>
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|Gauge
argument_list|<
name|T
argument_list|>
name|gauge
parameter_list|)
block|{
return|return
operator|(
name|Gauge
operator|)
name|register
argument_list|(
name|name
argument_list|,
operator|(
name|Metric
operator|)
name|gauge
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerAll
parameter_list|(
name|MetricSet
name|metricSet
parameter_list|)
block|{
name|metricSet
operator|.
name|getMetrics
argument_list|()
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|register
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metrics
operator|.
name|remove
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricRegistryInfo
name|getMetricRegistryInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
block|}
end_class

end_unit

