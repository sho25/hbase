begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Implementation of MetricRegistries that does ref-counting.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricRegistriesImpl
extends|extends
name|MetricRegistries
block|{
specifier|private
specifier|final
name|MetricRegistryFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|RefCountingMap
argument_list|<
name|MetricRegistryInfo
argument_list|,
name|MetricRegistry
argument_list|>
name|registries
decl_stmt|;
specifier|public
name|MetricRegistriesImpl
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|MetricRegistryFactoryImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MetricRegistriesImpl
parameter_list|(
name|MetricRegistryFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|registries
operator|=
operator|new
name|RefCountingMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MetricRegistry
name|create
parameter_list|(
name|MetricRegistryInfo
name|info
parameter_list|)
block|{
return|return
name|registries
operator|.
name|put
argument_list|(
name|info
argument_list|,
parameter_list|()
lambda|->
name|factory
operator|.
name|create
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|MetricRegistryInfo
name|key
parameter_list|)
block|{
return|return
name|registries
operator|.
name|remove
argument_list|(
name|key
argument_list|)
operator|==
literal|null
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|MetricRegistry
argument_list|>
name|get
parameter_list|(
name|MetricRegistryInfo
name|info
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|registries
operator|.
name|get
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|MetricRegistry
argument_list|>
name|getMetricRegistries
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|registries
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|registries
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|MetricRegistryInfo
argument_list|>
name|getMetricRegistryInfos
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|registries
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

