begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This class is a container of queues that allows to select a queue  * in a round robin fashion, considering priority of the queue.  *  * the quantum is just how many poll() will return the same object.  * e.g. if quantum is 1 and you have A and B as object you'll get: A B A B  * e.g. if quantum is 2 and you have A and B as object you'll get: A A B B A A B B  * then the object priority is just a priority * quantum  *  * Example:  *  - three queues (A, B, C) with priorities (1, 1, 2)  *  - The first poll() will return A  *  - The second poll() will return B  *  - The third and forth poll() will return C  *  - and so on again and again.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ProcedureFairRunQueues
parameter_list|<
name|TKey
parameter_list|,
name|TQueue
extends|extends
name|ProcedureFairRunQueues
operator|.
name|FairObject
parameter_list|>
block|{
specifier|private
name|ConcurrentSkipListMap
argument_list|<
name|TKey
argument_list|,
name|TQueue
argument_list|>
name|objMap
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|TKey
argument_list|,
name|TQueue
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|quantum
decl_stmt|;
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|TKey
argument_list|,
name|TQueue
argument_list|>
name|current
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|currentQuantum
init|=
literal|0
decl_stmt|;
specifier|public
interface|interface
name|FairObject
block|{
name|boolean
name|isAvailable
parameter_list|()
function_decl|;
name|int
name|getPriority
parameter_list|()
function_decl|;
block|}
comment|/**    * @param quantum how many poll() will return the same object.    */
specifier|public
name|ProcedureFairRunQueues
parameter_list|(
specifier|final
name|int
name|quantum
parameter_list|)
block|{
name|this
operator|.
name|quantum
operator|=
name|quantum
expr_stmt|;
block|}
specifier|public
name|TQueue
name|get
parameter_list|(
specifier|final
name|TKey
name|key
parameter_list|)
block|{
return|return
name|objMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|TQueue
name|add
parameter_list|(
specifier|final
name|TKey
name|key
parameter_list|,
specifier|final
name|TQueue
name|queue
parameter_list|)
block|{
name|TQueue
name|oldq
init|=
name|objMap
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|queue
argument_list|)
decl_stmt|;
return|return
name|oldq
operator|!=
literal|null
condition|?
name|oldq
else|:
name|queue
return|;
block|}
specifier|public
name|TQueue
name|remove
parameter_list|(
specifier|final
name|TKey
name|key
parameter_list|)
block|{
name|TQueue
name|queue
init|=
name|objMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|queue
operator|=
name|objMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|queue
operator|==
name|current
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|currentQuantum
operator|=
literal|0
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|queue
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|currentQuantum
operator|=
literal|0
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
name|objMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return the next available item if present    */
specifier|public
name|TQueue
name|poll
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TQueue
name|queue
decl_stmt|;
if|if
condition|(
name|currentQuantum
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|nextObject
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// nothing here
return|return
literal|null
return|;
block|}
name|queue
operator|=
name|current
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|currentQuantum
operator|=
name|calculateQuantum
argument_list|(
name|queue
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|currentQuantum
operator|--
expr_stmt|;
name|queue
operator|=
name|current
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|queue
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|TKey
argument_list|,
name|TQueue
argument_list|>
name|last
init|=
name|current
decl_stmt|;
comment|// Try the next one
do|do
block|{
if|if
condition|(
name|nextObject
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
block|}
do|while
condition|(
name|current
operator|.
name|getValue
argument_list|()
operator|!=
name|last
operator|.
name|getValue
argument_list|()
operator|&&
operator|!
name|current
operator|.
name|getValue
argument_list|()
operator|.
name|isAvailable
argument_list|()
condition|)
do|;
name|queue
operator|=
name|current
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|currentQuantum
operator|=
name|calculateQuantum
argument_list|(
name|queue
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|queue
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TKey
argument_list|,
name|TQueue
argument_list|>
name|entry
range|:
name|objMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|TKey
argument_list|,
name|TQueue
argument_list|>
name|nextObject
parameter_list|()
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|TKey
argument_list|,
name|TQueue
argument_list|>
name|next
init|=
literal|null
decl_stmt|;
comment|// If we have already a key, try the next one
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|objMap
operator|.
name|higherEntry
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if there is no higher key, go back to the first
name|current
operator|=
operator|(
name|next
operator|!=
literal|null
operator|)
condition|?
name|next
else|:
name|objMap
operator|.
name|firstEntry
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
specifier|private
name|int
name|calculateQuantum
parameter_list|(
specifier|final
name|TQueue
name|fairObject
parameter_list|)
block|{
comment|// TODO
return|return
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|fairObject
operator|.
name|getPriority
argument_list|()
operator|*
name|quantum
argument_list|)
return|;
block|}
block|}
end_class

end_unit

