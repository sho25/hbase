begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Base class for {@link ProcedureStore}s.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|ProcedureStoreBase
implements|implements
name|ProcedureStore
block|{
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|ProcedureStoreListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**    * Change the state to 'isRunning',    * returns true if the store state was changed,    * false if the store was already in that state.    * @param isRunning the state to set.    * @return true if the store state was changed, otherwise false.    */
specifier|protected
name|boolean
name|setRunning
parameter_list|(
name|boolean
name|isRunning
parameter_list|)
block|{
return|return
name|running
operator|.
name|getAndSet
argument_list|(
name|isRunning
argument_list|)
operator|!=
name|isRunning
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerListener
parameter_list|(
name|ProcedureStoreListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|unregisterListener
parameter_list|(
name|ProcedureStoreListener
name|listener
parameter_list|)
block|{
return|return
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|void
name|sendPostSyncSignal
parameter_list|()
block|{
name|listeners
operator|.
name|forEach
argument_list|(
name|ProcedureStoreListener
operator|::
name|postSync
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|sendAbortProcessSignal
parameter_list|()
block|{
name|listeners
operator|.
name|forEach
argument_list|(
name|ProcedureStoreListener
operator|::
name|abortProcess
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|sendForceUpdateSignal
parameter_list|(
name|long
index|[]
name|procIds
parameter_list|)
block|{
name|listeners
operator|.
name|forEach
argument_list|(
name|l
lambda|->
name|l
operator|.
name|forceUpdate
argument_list|(
name|procIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

