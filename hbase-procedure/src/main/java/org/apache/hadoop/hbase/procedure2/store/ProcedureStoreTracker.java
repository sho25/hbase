begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_comment
comment|/**  * Keeps track of live procedures.  *  * It can be used by the ProcedureStore to identify which procedures are already  * deleted/completed to avoid the deserialization step on restart.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ProcedureStoreTracker
block|{
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|keepDeletes
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|partial
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|minUpdatedProcId
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|long
name|maxUpdatedProcId
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|public
enum|enum
name|DeleteState
block|{
name|YES
block|,
name|NO
block|,
name|MAYBE
block|}
specifier|public
specifier|static
class|class
name|BitSetNode
block|{
specifier|private
specifier|final
specifier|static
name|long
name|WORD_MASK
init|=
literal|0xffffffffffffffffL
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ADDRESS_BITS_PER_WORD
init|=
literal|6
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|BITS_PER_WORD
init|=
literal|1
operator|<<
name|ADDRESS_BITS_PER_WORD
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|MAX_NODE_SIZE
init|=
literal|1
operator|<<
name|ADDRESS_BITS_PER_WORD
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|partial
decl_stmt|;
specifier|private
name|long
index|[]
name|updated
decl_stmt|;
specifier|private
name|long
index|[]
name|deleted
decl_stmt|;
specifier|private
name|long
name|start
decl_stmt|;
specifier|public
name|void
name|dump
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%06d:%06d min=%d max=%d%n"
argument_list|,
name|getStart
argument_list|()
argument_list|,
name|getEnd
argument_list|()
argument_list|,
name|getMinProcId
argument_list|()
argument_list|,
name|getMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Update:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updated
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BITS_PER_WORD
condition|;
operator|++
name|j
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
operator|(
name|updated
index|[
name|i
index|]
operator|&
operator|(
literal|1L
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delete:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleted
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BITS_PER_WORD
condition|;
operator|++
name|j
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
operator|(
name|deleted
index|[
name|i
index|]
operator|&
operator|(
literal|1L
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BitSetNode
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|boolean
name|partial
parameter_list|)
block|{
name|start
operator|=
name|alignDown
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
name|updated
operator|=
operator|new
name|long
index|[
name|count
index|]
expr_stmt|;
name|deleted
operator|=
operator|new
name|long
index|[
name|count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|updated
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|deleted
index|[
name|i
index|]
operator|=
name|partial
condition|?
literal|0
else|:
name|WORD_MASK
expr_stmt|;
block|}
name|this
operator|.
name|partial
operator|=
name|partial
expr_stmt|;
name|updateState
argument_list|(
name|procId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BitSetNode
parameter_list|(
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
index|[]
name|updated
parameter_list|,
specifier|final
name|long
index|[]
name|deleted
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|updated
operator|=
name|updated
expr_stmt|;
name|this
operator|.
name|deleted
operator|=
name|deleted
expr_stmt|;
name|this
operator|.
name|partial
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|updateState
argument_list|(
name|procId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|updateState
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Long
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
specifier|public
name|Long
name|getEnd
parameter_list|()
block|{
return|return
name|start
operator|+
operator|(
name|updated
operator|.
name|length
operator|<<
name|ADDRESS_BITS_PER_WORD
operator|)
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
name|start
operator|<=
name|procId
operator|&&
name|procId
operator|<=
name|getEnd
argument_list|()
return|;
block|}
specifier|public
name|DeleteState
name|isDeleted
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|int
name|bitmapIndex
init|=
name|getBitmapIndex
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|int
name|wordIndex
init|=
name|bitmapIndex
operator|>>
name|ADDRESS_BITS_PER_WORD
decl_stmt|;
if|if
condition|(
name|wordIndex
operator|>=
name|deleted
operator|.
name|length
condition|)
block|{
return|return
name|DeleteState
operator|.
name|MAYBE
return|;
block|}
return|return
operator|(
name|deleted
index|[
name|wordIndex
index|]
operator|&
operator|(
literal|1L
operator|<<
name|bitmapIndex
operator|)
operator|)
operator|!=
literal|0
condition|?
name|DeleteState
operator|.
name|YES
else|:
name|DeleteState
operator|.
name|NO
return|;
block|}
specifier|private
name|boolean
name|isUpdated
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|int
name|bitmapIndex
init|=
name|getBitmapIndex
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|int
name|wordIndex
init|=
name|bitmapIndex
operator|>>
name|ADDRESS_BITS_PER_WORD
decl_stmt|;
if|if
condition|(
name|wordIndex
operator|>=
name|updated
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|updated
index|[
name|wordIndex
index|]
operator|&
operator|(
literal|1L
operator|<<
name|bitmapIndex
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|boolean
name|isUpdated
parameter_list|()
block|{
comment|// TODO: cache the value
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updated
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|updated
index|[
name|i
index|]
operator||
name|deleted
index|[
name|i
index|]
operator|)
operator|!=
name|WORD_MASK
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
comment|// TODO: cache the value
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleted
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|deleted
index|[
name|i
index|]
operator|!=
name|WORD_MASK
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|resetUpdates
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updated
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|updated
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|undeleteAll
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updated
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|deleted
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unsetPartialFlag
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updated
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BITS_PER_WORD
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|(
name|updated
index|[
name|i
index|]
operator|&
operator|(
literal|1L
operator|<<
name|j
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|deleted
index|[
name|i
index|]
operator||=
operator|(
literal|1L
operator|<<
name|j
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
operator|.
name|TrackerNode
name|convert
parameter_list|()
block|{
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
operator|.
name|TrackerNode
operator|.
name|Builder
name|builder
init|=
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
operator|.
name|TrackerNode
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStartId
argument_list|(
name|start
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updated
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|builder
operator|.
name|addUpdated
argument_list|(
name|updated
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addDeleted
argument_list|(
name|deleted
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|BitSetNode
name|convert
parameter_list|(
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
operator|.
name|TrackerNode
name|data
parameter_list|)
block|{
name|long
name|start
init|=
name|data
operator|.
name|getStartId
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|data
operator|.
name|getUpdatedCount
argument_list|()
decl_stmt|;
name|long
index|[]
name|updated
init|=
operator|new
name|long
index|[
name|size
index|]
decl_stmt|;
name|long
index|[]
name|deleted
init|=
operator|new
name|long
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|updated
index|[
name|i
index|]
operator|=
name|data
operator|.
name|getUpdated
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|deleted
index|[
name|i
index|]
operator|=
name|data
operator|.
name|getDeleted
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BitSetNode
argument_list|(
name|start
argument_list|,
name|updated
argument_list|,
name|deleted
argument_list|)
return|;
block|}
comment|// ========================================================================
comment|//  Grow/Merge Helpers
comment|// ========================================================================
specifier|public
name|boolean
name|canGrow
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|procId
operator|-
name|start
argument_list|)
operator|<
name|MAX_NODE_SIZE
return|;
block|}
specifier|public
name|boolean
name|canMerge
parameter_list|(
specifier|final
name|BitSetNode
name|rightNode
parameter_list|)
block|{
assert|assert
name|start
operator|<
name|rightNode
operator|.
name|getEnd
argument_list|()
assert|;
return|return
operator|(
name|rightNode
operator|.
name|getEnd
argument_list|()
operator|-
name|start
operator|)
operator|<
name|MAX_NODE_SIZE
return|;
block|}
specifier|public
name|void
name|grow
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|int
name|delta
decl_stmt|,
name|offset
decl_stmt|;
if|if
condition|(
name|procId
operator|<
name|start
condition|)
block|{
comment|// add to head
name|long
name|newStart
init|=
name|alignDown
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|delta
operator|=
call|(
name|int
call|)
argument_list|(
name|start
operator|-
name|newStart
argument_list|)
operator|>>
name|ADDRESS_BITS_PER_WORD
expr_stmt|;
name|offset
operator|=
name|delta
expr_stmt|;
name|start
operator|=
name|newStart
expr_stmt|;
block|}
else|else
block|{
comment|// Add to tail
name|long
name|newEnd
init|=
name|alignUp
argument_list|(
name|procId
operator|+
literal|1
argument_list|)
decl_stmt|;
name|delta
operator|=
call|(
name|int
call|)
argument_list|(
name|newEnd
operator|-
name|getEnd
argument_list|()
argument_list|)
operator|>>
name|ADDRESS_BITS_PER_WORD
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
name|long
index|[]
name|newBitmap
decl_stmt|;
name|int
name|oldSize
init|=
name|updated
operator|.
name|length
decl_stmt|;
name|newBitmap
operator|=
operator|new
name|long
index|[
name|oldSize
operator|+
name|delta
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newBitmap
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|newBitmap
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|updated
argument_list|,
literal|0
argument_list|,
name|newBitmap
argument_list|,
name|offset
argument_list|,
name|oldSize
argument_list|)
expr_stmt|;
name|updated
operator|=
name|newBitmap
expr_stmt|;
name|newBitmap
operator|=
operator|new
name|long
index|[
name|deleted
operator|.
name|length
operator|+
name|delta
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newBitmap
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|newBitmap
index|[
name|i
index|]
operator|=
name|partial
condition|?
literal|0
else|:
name|WORD_MASK
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|deleted
argument_list|,
literal|0
argument_list|,
name|newBitmap
argument_list|,
name|offset
argument_list|,
name|oldSize
argument_list|)
expr_stmt|;
name|deleted
operator|=
name|newBitmap
expr_stmt|;
block|}
specifier|public
name|void
name|merge
parameter_list|(
specifier|final
name|BitSetNode
name|rightNode
parameter_list|)
block|{
name|int
name|delta
init|=
call|(
name|int
call|)
argument_list|(
name|rightNode
operator|.
name|getEnd
argument_list|()
operator|-
name|getEnd
argument_list|()
argument_list|)
operator|>>
name|ADDRESS_BITS_PER_WORD
decl_stmt|;
name|long
index|[]
name|newBitmap
decl_stmt|;
name|int
name|oldSize
init|=
name|updated
operator|.
name|length
decl_stmt|;
name|int
name|newSize
init|=
operator|(
name|delta
operator|-
name|rightNode
operator|.
name|updated
operator|.
name|length
operator|)
decl_stmt|;
name|int
name|offset
init|=
name|oldSize
operator|+
name|newSize
decl_stmt|;
name|newBitmap
operator|=
operator|new
name|long
index|[
name|oldSize
operator|+
name|delta
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|updated
argument_list|,
literal|0
argument_list|,
name|newBitmap
argument_list|,
literal|0
argument_list|,
name|oldSize
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rightNode
operator|.
name|updated
argument_list|,
literal|0
argument_list|,
name|newBitmap
argument_list|,
name|offset
argument_list|,
name|rightNode
operator|.
name|updated
operator|.
name|length
argument_list|)
expr_stmt|;
name|updated
operator|=
name|newBitmap
expr_stmt|;
name|newBitmap
operator|=
operator|new
name|long
index|[
name|oldSize
operator|+
name|delta
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|deleted
argument_list|,
literal|0
argument_list|,
name|newBitmap
argument_list|,
literal|0
argument_list|,
name|oldSize
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rightNode
operator|.
name|deleted
argument_list|,
literal|0
argument_list|,
name|newBitmap
argument_list|,
name|offset
argument_list|,
name|rightNode
operator|.
name|deleted
operator|.
name|length
argument_list|)
expr_stmt|;
name|deleted
operator|=
name|newBitmap
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newSize
condition|;
operator|++
name|i
control|)
block|{
name|updated
index|[
name|offset
operator|+
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|deleted
index|[
name|offset
operator|+
name|i
index|]
operator|=
name|partial
condition|?
literal|0
else|:
name|WORD_MASK
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BitSetNode("
operator|+
name|getStart
argument_list|()
operator|+
literal|"-"
operator|+
name|getEnd
argument_list|()
operator|+
literal|")"
return|;
block|}
comment|// ========================================================================
comment|//  Min/Max Helpers
comment|// ========================================================================
specifier|public
name|long
name|getMinProcId
parameter_list|()
block|{
name|long
name|minProcId
init|=
name|start
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleted
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|deleted
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
return|return
operator|(
name|minProcId
operator|)
return|;
block|}
if|if
condition|(
name|deleted
index|[
name|i
index|]
operator|!=
name|WORD_MASK
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BITS_PER_WORD
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|(
name|deleted
index|[
name|i
index|]
operator|&
operator|(
literal|1L
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
name|minProcId
operator|+
name|j
return|;
block|}
block|}
block|}
name|minProcId
operator|+=
name|BITS_PER_WORD
expr_stmt|;
block|}
return|return
name|minProcId
return|;
block|}
specifier|public
name|long
name|getMaxProcId
parameter_list|()
block|{
name|long
name|maxProcId
init|=
name|getEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|deleted
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|deleted
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
return|return
name|maxProcId
return|;
block|}
if|if
condition|(
name|deleted
index|[
name|i
index|]
operator|!=
name|WORD_MASK
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|BITS_PER_WORD
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
if|if
condition|(
operator|(
name|deleted
index|[
name|i
index|]
operator|&
operator|(
literal|1L
operator|<<
name|j
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|maxProcId
operator|-
operator|(
name|BITS_PER_WORD
operator|-
literal|1
operator|-
name|j
operator|)
return|;
block|}
block|}
block|}
name|maxProcId
operator|-=
name|BITS_PER_WORD
expr_stmt|;
block|}
return|return
name|maxProcId
return|;
block|}
comment|// ========================================================================
comment|//  Bitmap Helpers
comment|// ========================================================================
specifier|private
name|int
name|getBitmapIndex
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|procId
operator|-
name|start
argument_list|)
return|;
block|}
specifier|private
name|void
name|updateState
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|boolean
name|isDeleted
parameter_list|)
block|{
name|int
name|bitmapIndex
init|=
name|getBitmapIndex
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|int
name|wordIndex
init|=
name|bitmapIndex
operator|>>
name|ADDRESS_BITS_PER_WORD
decl_stmt|;
name|long
name|value
init|=
operator|(
literal|1L
operator|<<
name|bitmapIndex
operator|)
decl_stmt|;
if|if
condition|(
name|isDeleted
condition|)
block|{
name|updated
index|[
name|wordIndex
index|]
operator||=
name|value
expr_stmt|;
name|deleted
index|[
name|wordIndex
index|]
operator||=
name|value
expr_stmt|;
block|}
else|else
block|{
name|updated
index|[
name|wordIndex
index|]
operator||=
name|value
expr_stmt|;
name|deleted
index|[
name|wordIndex
index|]
operator|&=
operator|~
name|value
expr_stmt|;
block|}
block|}
comment|// ========================================================================
comment|//  Helpers
comment|// ========================================================================
specifier|private
specifier|static
name|long
name|alignUp
parameter_list|(
specifier|final
name|long
name|x
parameter_list|)
block|{
return|return
operator|(
name|x
operator|+
operator|(
name|BITS_PER_WORD
operator|-
literal|1
operator|)
operator|)
operator|&
operator|-
name|BITS_PER_WORD
return|;
block|}
specifier|private
specifier|static
name|long
name|alignDown
parameter_list|(
specifier|final
name|long
name|x
parameter_list|)
block|{
return|return
name|x
operator|&
operator|-
name|BITS_PER_WORD
return|;
block|}
block|}
specifier|public
name|void
name|insert
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|BitSetNode
name|node
init|=
name|getOrCreateNode
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|node
operator|.
name|update
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|trackProcIds
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|long
index|[]
name|subProcIds
parameter_list|)
block|{
name|update
argument_list|(
name|procId
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subProcIds
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|insert
argument_list|(
name|subProcIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
init|=
name|map
operator|.
name|floorEntry
argument_list|(
name|procId
argument_list|)
decl_stmt|;
assert|assert
name|entry
operator|!=
literal|null
operator|:
literal|"expected node to update procId="
operator|+
name|procId
assert|;
name|BitSetNode
name|node
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
assert|assert
name|node
operator|.
name|contains
argument_list|(
name|procId
argument_list|)
assert|;
name|node
operator|.
name|update
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|trackProcIds
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
init|=
name|map
operator|.
name|floorEntry
argument_list|(
name|procId
argument_list|)
decl_stmt|;
assert|assert
name|entry
operator|!=
literal|null
operator|:
literal|"expected node to delete procId="
operator|+
name|procId
assert|;
name|BitSetNode
name|node
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
assert|assert
name|node
operator|.
name|contains
argument_list|(
name|procId
argument_list|)
operator|:
literal|"expected procId in the node"
assert|;
name|node
operator|.
name|delete
argument_list|(
name|procId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keepDeletes
operator|&&
name|node
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: RESET if (map.size() == 1)
name|map
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|trackProcIds
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|trackProcIds
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|minUpdatedProcId
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minUpdatedProcId
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|maxUpdatedProcId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxUpdatedProcId
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getUpdatedMinProcId
parameter_list|()
block|{
return|return
name|minUpdatedProcId
return|;
block|}
specifier|public
name|long
name|getUpdatedMaxProcId
parameter_list|()
block|{
return|return
name|maxUpdatedProcId
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|void
name|setDeleted
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|boolean
name|isDeleted
parameter_list|)
block|{
name|BitSetNode
name|node
init|=
name|getOrCreateNode
argument_list|(
name|procId
argument_list|)
decl_stmt|;
assert|assert
name|node
operator|.
name|contains
argument_list|(
name|procId
argument_list|)
operator|:
literal|"expected procId="
operator|+
name|procId
operator|+
literal|" in the node="
operator|+
name|node
assert|;
name|node
operator|.
name|updateState
argument_list|(
name|procId
argument_list|,
name|isDeleted
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|keepDeletes
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|partial
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetUpdates
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DeleteState
name|isDeleted
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
init|=
name|map
operator|.
name|floorEntry
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|procId
argument_list|)
condition|)
block|{
name|BitSetNode
name|node
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DeleteState
name|state
init|=
name|node
operator|.
name|isDeleted
argument_list|(
name|procId
argument_list|)
decl_stmt|;
return|return
name|partial
operator|&&
operator|!
name|node
operator|.
name|isUpdated
argument_list|(
name|procId
argument_list|)
condition|?
name|DeleteState
operator|.
name|MAYBE
else|:
name|state
return|;
block|}
return|return
name|partial
condition|?
name|DeleteState
operator|.
name|MAYBE
else|:
name|DeleteState
operator|.
name|YES
return|;
block|}
specifier|public
name|long
name|getMinProcId
parameter_list|()
block|{
comment|// TODO: Cache?
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
init|=
name|map
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
return|return
name|entry
operator|==
literal|null
condition|?
literal|0
else|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMinProcId
argument_list|()
return|;
block|}
specifier|public
name|void
name|setKeepDeletes
parameter_list|(
name|boolean
name|keepDeletes
parameter_list|)
block|{
name|this
operator|.
name|keepDeletes
operator|=
name|keepDeletes
expr_stmt|;
if|if
condition|(
operator|!
name|keepDeletes
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
argument_list|>
name|it
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|setPartialFlag
parameter_list|(
name|boolean
name|isPartial
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|partial
operator|&&
operator|!
name|isPartial
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|unsetPartialFlag
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|partial
operator|=
name|isPartial
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isUpdated
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isUpdated
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isTracking
parameter_list|(
name|long
name|minId
parameter_list|,
name|long
name|maxId
parameter_list|)
block|{
comment|// TODO: we can make it more precise, instead of looking just at the block
return|return
name|map
operator|.
name|floorEntry
argument_list|(
name|minId
argument_list|)
operator|!=
literal|null
operator|||
name|map
operator|.
name|floorEntry
argument_list|(
name|maxId
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|resetUpdates
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|resetUpdates
argument_list|()
expr_stmt|;
block|}
name|minUpdatedProcId
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|maxUpdatedProcId
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
specifier|public
name|void
name|undeleteAll
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|undeleteAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|BitSetNode
name|getOrCreateNode
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
comment|// can procId fit in the left node?
name|BitSetNode
name|leftNode
init|=
literal|null
decl_stmt|;
name|boolean
name|leftCanGrow
init|=
literal|false
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|leftEntry
init|=
name|map
operator|.
name|floorEntry
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftEntry
operator|!=
literal|null
condition|)
block|{
name|leftNode
operator|=
name|leftEntry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|leftNode
operator|.
name|contains
argument_list|(
name|procId
argument_list|)
condition|)
block|{
return|return
name|leftNode
return|;
block|}
name|leftCanGrow
operator|=
name|leftNode
operator|.
name|canGrow
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
name|BitSetNode
name|rightNode
init|=
literal|null
decl_stmt|;
name|boolean
name|rightCanGrow
init|=
literal|false
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|rightEntry
init|=
name|map
operator|.
name|ceilingEntry
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightEntry
operator|!=
literal|null
condition|)
block|{
name|rightNode
operator|=
name|rightEntry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|rightCanGrow
operator|=
name|rightNode
operator|.
name|canGrow
argument_list|(
name|procId
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|leftNode
operator|.
name|canMerge
argument_list|(
name|rightNode
argument_list|)
condition|)
block|{
comment|// merge left and right node
return|return
name|mergeNodes
argument_list|(
name|leftNode
argument_list|,
name|rightNode
argument_list|)
return|;
block|}
if|if
condition|(
name|leftCanGrow
operator|&&
name|rightCanGrow
condition|)
block|{
if|if
condition|(
operator|(
name|procId
operator|-
name|leftNode
operator|.
name|getEnd
argument_list|()
operator|)
operator|<=
operator|(
name|rightNode
operator|.
name|getStart
argument_list|()
operator|-
name|procId
operator|)
condition|)
block|{
comment|// grow the left node
return|return
name|growNode
argument_list|(
name|leftNode
argument_list|,
name|procId
argument_list|)
return|;
block|}
comment|// grow the right node
return|return
name|growNode
argument_list|(
name|rightNode
argument_list|,
name|procId
argument_list|)
return|;
block|}
block|}
block|}
comment|// grow the left node
if|if
condition|(
name|leftCanGrow
condition|)
block|{
return|return
name|growNode
argument_list|(
name|leftNode
argument_list|,
name|procId
argument_list|)
return|;
block|}
comment|// grow the right node
if|if
condition|(
name|rightCanGrow
condition|)
block|{
return|return
name|growNode
argument_list|(
name|rightNode
argument_list|,
name|procId
argument_list|)
return|;
block|}
comment|// add new node
name|BitSetNode
name|node
init|=
operator|new
name|BitSetNode
argument_list|(
name|procId
argument_list|,
name|partial
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node
operator|.
name|getStart
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|BitSetNode
name|growNode
parameter_list|(
name|BitSetNode
name|node
parameter_list|,
name|long
name|procId
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|grow
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node
operator|.
name|getStart
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|BitSetNode
name|mergeNodes
parameter_list|(
name|BitSetNode
name|leftNode
parameter_list|,
name|BitSetNode
name|rightNode
parameter_list|)
block|{
assert|assert
name|leftNode
operator|.
name|getStart
argument_list|()
operator|<
name|rightNode
operator|.
name|getStart
argument_list|()
assert|;
name|leftNode
operator|.
name|merge
argument_list|(
name|rightNode
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|rightNode
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|leftNode
return|;
block|}
specifier|public
name|void
name|dump
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"map "
operator|+
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"isUpdated "
operator|+
name|isUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"isEmpty "
operator|+
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
operator|.
name|Builder
name|builder
init|=
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|BitSetNode
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|addNode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readFrom
parameter_list|(
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
name|data
init|=
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
operator|.
name|parseDelimitedFrom
argument_list|(
name|stream
argument_list|)
decl_stmt|;
for|for
control|(
name|ProcedureProtos
operator|.
name|ProcedureStoreTracker
operator|.
name|TrackerNode
name|protoNode
range|:
name|data
operator|.
name|getNodeList
argument_list|()
control|)
block|{
specifier|final
name|BitSetNode
name|node
init|=
name|BitSetNode
operator|.
name|convert
argument_list|(
name|protoNode
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node
operator|.
name|getStart
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

