begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
operator|.
name|ProcedureIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A procedure iterator which holds all the procedure protos in memory. For fast access.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|InMemoryProcedureIterator
implements|implements
name|ProcedureIterator
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ProtoAndProcedure
argument_list|>
name|procs
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|ProtoAndProcedure
argument_list|>
name|iter
decl_stmt|;
specifier|private
name|ProtoAndProcedure
name|current
decl_stmt|;
specifier|public
name|InMemoryProcedureIterator
parameter_list|(
name|List
argument_list|<
name|ProtoAndProcedure
argument_list|>
name|procs
parameter_list|)
block|{
name|this
operator|.
name|procs
operator|=
name|procs
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|iter
operator|=
name|procs
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|current
operator|!=
literal|null
return|;
block|}
specifier|private
name|void
name|checkNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNextFinished
parameter_list|()
block|{
name|checkNext
argument_list|()
expr_stmt|;
return|return
name|ProcedureUtil
operator|.
name|isFinished
argument_list|(
name|current
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|moveToNext
parameter_list|()
block|{
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|skipNext
parameter_list|()
block|{
name|checkNext
argument_list|()
expr_stmt|;
name|moveToNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Procedure
argument_list|<
name|?
argument_list|>
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNext
argument_list|()
expr_stmt|;
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|current
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|moveToNext
argument_list|()
expr_stmt|;
return|return
name|proc
return|;
block|}
block|}
end_class

end_unit

