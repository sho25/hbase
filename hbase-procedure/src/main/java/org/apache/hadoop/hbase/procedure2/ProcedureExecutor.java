begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|IllegalArgumentIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
operator|.
name|ProcedureIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
operator|.
name|ProcedureStoreListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IdLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
operator|.
name|ProcedureState
import|;
end_import

begin_comment
comment|/**  * Thread Pool that executes the submitted procedures.  * The executor has a ProcedureStore associated.  * Each operation is logged and on restart the pending procedures are resumed.  *  * Unless the Procedure code throws an error (e.g. invalid user input)  * the procedure will complete (at some point in time), On restart the pending  * procedures are resumed and the once failed will be rolledback.  *  * The user can add procedures to the executor via submitProcedure(proc)  * check for the finished state via isFinished(procId)  * and get the result via getResult(procId)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ProcedureExecutor
parameter_list|<
name|TEnvironment
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProcedureExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHECK_OWNER_SET_CONF_KEY
init|=
literal|"hbase.procedure.check.owner.set"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_CHECK_OWNER_SET
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_KEEP_ALIVE_TIME_CONF_KEY
init|=
literal|"hbase.procedure.worker.keep.alive.time.msec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_WORKER_KEEP_ALIVE_TIME
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EVICT_TTL_CONF_KEY
init|=
literal|"hbase.procedure.cleaner.evict.ttl"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_EVICT_TTL
init|=
literal|15
operator|*
literal|60000
decl_stmt|;
comment|// 15min
specifier|public
specifier|static
specifier|final
name|String
name|EVICT_ACKED_TTL_CONF_KEY
init|=
literal|"hbase.procedure.cleaner.acked.evict.ttl"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_ACKED_EVICT_TTL
init|=
literal|5
operator|*
literal|60000
decl_stmt|;
comment|// 5min
comment|/**    * {@link #testing} is non-null when ProcedureExecutor is being tested. Tests will try to    * break PE having it fail at various junctures. When non-null, testing is set to an instance of    * the below internal {@link Testing} class with flags set for the particular test.    */
specifier|volatile
name|Testing
name|testing
init|=
literal|null
decl_stmt|;
comment|/**    * Class with parameters describing how to fail/die when in testing-context.    */
specifier|public
specifier|static
class|class
name|Testing
block|{
specifier|protected
specifier|volatile
name|boolean
name|killIfHasParent
init|=
literal|true
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|killIfSuspended
init|=
literal|false
decl_stmt|;
comment|/**      * Kill the PE BEFORE we store state to the WAL. Good for figuring out if a Procedure is      * persisting all the state it needs to recover after a crash.      */
specifier|protected
specifier|volatile
name|boolean
name|killBeforeStoreUpdate
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|toggleKillBeforeStoreUpdate
init|=
literal|false
decl_stmt|;
comment|/**      * Set when we want to fail AFTER state has been stored into the WAL. Rarely used. HBASE-20978      * is about a case where memory-state was being set after store to WAL where a crash could      * cause us to get stuck. This flag allows killing at what was a vulnerable time.      */
specifier|protected
specifier|volatile
name|boolean
name|killAfterStoreUpdate
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|toggleKillAfterStoreUpdate
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|shouldKillBeforeStoreUpdate
parameter_list|()
block|{
specifier|final
name|boolean
name|kill
init|=
name|this
operator|.
name|killBeforeStoreUpdate
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|toggleKillBeforeStoreUpdate
condition|)
block|{
name|this
operator|.
name|killBeforeStoreUpdate
operator|=
operator|!
name|kill
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Toggle KILL before store update to: "
operator|+
name|this
operator|.
name|killBeforeStoreUpdate
argument_list|)
expr_stmt|;
block|}
return|return
name|kill
return|;
block|}
specifier|protected
name|boolean
name|shouldKillBeforeStoreUpdate
parameter_list|(
name|boolean
name|isSuspended
parameter_list|,
name|boolean
name|hasParent
parameter_list|)
block|{
if|if
condition|(
name|isSuspended
operator|&&
operator|!
name|killIfSuspended
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|hasParent
operator|&&
operator|!
name|killIfHasParent
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|shouldKillBeforeStoreUpdate
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|shouldKillAfterStoreUpdate
parameter_list|()
block|{
specifier|final
name|boolean
name|kill
init|=
name|this
operator|.
name|killAfterStoreUpdate
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|toggleKillAfterStoreUpdate
condition|)
block|{
name|this
operator|.
name|killAfterStoreUpdate
operator|=
operator|!
name|kill
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Toggle KILL after store update to: "
operator|+
name|this
operator|.
name|killAfterStoreUpdate
argument_list|)
expr_stmt|;
block|}
return|return
name|kill
return|;
block|}
specifier|protected
name|boolean
name|shouldKillAfterStoreUpdate
parameter_list|(
specifier|final
name|boolean
name|isSuspended
parameter_list|)
block|{
return|return
operator|(
name|isSuspended
operator|&&
operator|!
name|killIfSuspended
operator|)
condition|?
literal|false
else|:
name|shouldKillAfterStoreUpdate
argument_list|()
return|;
block|}
block|}
specifier|public
interface|interface
name|ProcedureExecutorListener
block|{
name|void
name|procedureLoaded
parameter_list|(
name|long
name|procId
parameter_list|)
function_decl|;
name|void
name|procedureAdded
parameter_list|(
name|long
name|procId
parameter_list|)
function_decl|;
name|void
name|procedureFinished
parameter_list|(
name|long
name|procId
parameter_list|)
function_decl|;
block|}
comment|/**    * Map the the procId returned by submitProcedure(), the Root-ProcID, to the Procedure.    * Once a Root-Procedure completes (success or failure), the result will be added to this map.    * The user of ProcedureExecutor should call getResult(procId) to get the result.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|completed
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Map the the procId returned by submitProcedure(), the Root-ProcID, to the RootProcedureState.    * The RootProcedureState contains the execution stack of the Root-Procedure,    * It is added to the map by submitProcedure() and removed on procedure completion.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|rollbackStack
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Helper map to lookup the live procedures by ID.    * This map contains every procedure. root-procedures and subprocedures.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|procedures
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Helper map to lookup whether the procedure already issued from the same client. This map    * contains every root procedure.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|NonceKey
argument_list|,
name|Long
argument_list|>
name|nonceKeysToProcIdsMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|ProcedureExecutorListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Created in the {@link #init(int, boolean)} method. Destroyed in {@link #join()} (FIX! Doing    * resource handling rather than observing in a #join is unexpected).    * Overridden when we do the ProcedureTestingUtility.testRecoveryAndDoubleExecution trickery    * (Should be ok).    */
specifier|private
name|ThreadGroup
name|threadGroup
decl_stmt|;
comment|/**    * Created in the {@link #init(int, boolean)}  method. Terminated in {@link #join()} (FIX! Doing    * resource handling rather than observing in a #join is unexpected).    * Overridden when we do the ProcedureTestingUtility.testRecoveryAndDoubleExecution trickery    * (Should be ok).    */
specifier|private
name|CopyOnWriteArrayList
argument_list|<
name|WorkerThread
argument_list|>
name|workerThreads
decl_stmt|;
comment|/**    * Created in the {@link #init(int, boolean)} method. Terminated in {@link #join()} (FIX! Doing    * resource handling rather than observing in a #join is unexpected).    * Overridden when we do the ProcedureTestingUtility.testRecoveryAndDoubleExecution trickery    * (Should be ok).    */
specifier|private
name|TimeoutExecutorThread
argument_list|<
name|TEnvironment
argument_list|>
name|timeoutExecutor
decl_stmt|;
specifier|private
name|int
name|corePoolSize
decl_stmt|;
specifier|private
name|int
name|maxPoolSize
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|keepAliveTime
decl_stmt|;
comment|/**    * Scheduler/Queue that contains runnable procedures.    */
specifier|private
specifier|final
name|ProcedureScheduler
name|scheduler
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|forceUpdateExecutor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Force-Update-PEWorker-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|lastProcId
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|workerId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|activeExecutorCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TEnvironment
name|environment
decl_stmt|;
specifier|private
specifier|final
name|ProcedureStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|checkOwnerSet
decl_stmt|;
comment|// To prevent concurrent execution of the same procedure.
comment|// For some rare cases, especially if the procedure uses ProcedureEvent, it is possible that the
comment|// procedure is woken up before we finish the suspend which causes the same procedures to be
comment|// executed in parallel. This does lead to some problems, see HBASE-20939&HBASE-20949, and is also
comment|// a bit confusing to the developers. So here we introduce this lock to prevent the concurrent
comment|// execution of the same procedure.
specifier|private
specifier|final
name|IdLock
name|procExecutionLock
init|=
operator|new
name|IdLock
argument_list|()
decl_stmt|;
specifier|public
name|ProcedureExecutor
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TEnvironment
name|environment
parameter_list|,
specifier|final
name|ProcedureStore
name|store
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|environment
argument_list|,
name|store
argument_list|,
operator|new
name|SimpleProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isRootFinished
parameter_list|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
parameter_list|)
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|rootProc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|proc
operator|.
name|getRootProcId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|rootProc
operator|==
literal|null
operator|||
name|rootProc
operator|.
name|isFinished
argument_list|()
return|;
block|}
specifier|private
name|void
name|forceUpdateProcedure
parameter_list|(
name|long
name|procId
parameter_list|)
throws|throws
name|IOException
block|{
name|IdLock
operator|.
name|Entry
name|lockEntry
init|=
name|procExecutionLock
operator|.
name|getLockEntry
argument_list|(
name|procId
argument_list|)
decl_stmt|;
try|try
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|proc
operator|.
name|isFinished
argument_list|()
operator|&&
name|proc
operator|.
name|hasParent
argument_list|()
operator|&&
name|isRootFinished
argument_list|(
name|proc
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure {} has already been finished and parent is succeeded,"
operator|+
literal|" skip force updating"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
name|retainer
init|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|retainer
operator|==
literal|null
operator|||
name|retainer
operator|.
name|getProcedure
argument_list|()
operator|instanceof
name|FailedProcedure
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No pending procedure with id = {}, skip force updating."
argument_list|,
name|procId
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|evictTtl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|EVICT_TTL_CONF_KEY
argument_list|,
name|DEFAULT_EVICT_TTL
argument_list|)
decl_stmt|;
name|long
name|evictAckTtl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|EVICT_ACKED_TTL_CONF_KEY
argument_list|,
name|DEFAULT_ACKED_EVICT_TTL
argument_list|)
decl_stmt|;
if|if
condition|(
name|retainer
operator|.
name|isExpired
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|evictTtl
argument_list|,
name|evictAckTtl
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure {} has already been finished and expired, skip force updating"
argument_list|,
name|procId
argument_list|)
expr_stmt|;
return|return;
block|}
name|proc
operator|=
name|retainer
operator|.
name|getProcedure
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Force update procedure {}"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|procExecutionLock
operator|.
name|releaseLockEntry
argument_list|(
name|lockEntry
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ProcedureExecutor
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TEnvironment
name|environment
parameter_list|,
specifier|final
name|ProcedureStore
name|store
parameter_list|,
specifier|final
name|ProcedureScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|checkOwnerSet
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CHECK_OWNER_SET_CONF_KEY
argument_list|,
name|DEFAULT_CHECK_OWNER_SET
argument_list|)
expr_stmt|;
name|refreshConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|store
operator|.
name|registerListener
argument_list|(
operator|new
name|ProcedureStoreListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|forceUpdate
parameter_list|(
name|long
index|[]
name|procIds
parameter_list|)
block|{
name|Arrays
operator|.
name|stream
argument_list|(
name|procIds
argument_list|)
operator|.
name|forEach
argument_list|(
name|procId
lambda|->
name|forceUpdateExecutor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
block|try
block|{
name|forceUpdateProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to force update procedure with pid={}"
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
block|)
empty_stmt|;
block|}
end_class

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}    private
name|void
name|load
parameter_list|(
specifier|final
name|boolean
name|abortOnCorruption
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|completed
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"completed not empty"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|rollbackStack
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"rollback state not empty"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|procedures
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"procedure map not empty"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|scheduler
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|,
literal|"run queue not empty"
argument_list|)
expr_stmt|;
name|store
operator|.
name|load
argument_list|(
operator|new
name|ProcedureStore
operator|.
name|ProcedureLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setMaxProcId
parameter_list|(
name|long
name|maxProcId
parameter_list|)
block|{
assert|assert
name|lastProcId
operator|.
name|get
argument_list|()
operator|<
literal|0
operator|:
literal|"expected only one call to setMaxProcId()"
assert|;
name|lastProcId
operator|.
name|set
argument_list|(
name|maxProcId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|loadProcedures
argument_list|(
name|procIter
argument_list|,
name|abortOnCorruption
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleCorrupted
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|corruptedCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|procIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Corrupt "
operator|+
name|proc
argument_list|)
expr_stmt|;
name|corruptedCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|abortOnCorruption
operator|&&
name|corruptedCount
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"found "
operator|+
name|corruptedCount
operator|+
literal|" corrupted procedure(s) on replay"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|restoreLock
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|restored
parameter_list|)
block|{
name|proc
operator|.
name|restoreLock
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|restored
operator|.
name|add
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|restoreLocks
parameter_list|(
name|Deque
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|stack
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|restored
parameter_list|)
block|{
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|restoreLock
argument_list|(
name|stack
operator|.
name|pop
argument_list|()
argument_list|,
name|restored
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// Restore the locks for all the procedures.
end_comment

begin_comment
comment|// Notice that we need to restore the locks starting from the root proc, otherwise there will be
end_comment

begin_comment
comment|// problem that a sub procedure may hold the exclusive lock first and then we are stuck when
end_comment

begin_comment
comment|// calling the acquireLock method for the parent procedure.
end_comment

begin_comment
comment|// The algorithm is straight-forward:
end_comment

begin_comment
comment|// 1. Use a set to record the procedures which locks have already been restored.
end_comment

begin_comment
comment|// 2. Use a stack to store the hierarchy of the procedures
end_comment

begin_comment
comment|// 3. For all the procedure, we will first try to find its parent and push it into the stack,
end_comment

begin_comment
comment|// unless
end_comment

begin_comment
comment|// a. We have no parent, i.e, we are the root procedure
end_comment

begin_comment
comment|// b. The lock has already been restored(by checking the set introduced in #1)
end_comment

begin_comment
comment|// then we start to pop the stack and call acquireLock for each procedure.
end_comment

begin_comment
comment|// Notice that this should be done for all procedures, not only the ones in runnableList.
end_comment

begin_function
specifier|private
name|void
name|restoreLocks
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|restored
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Deque
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|stack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|proc
lambda|->
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|restored
operator|.
name|contains
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
condition|)
block|{
name|restoreLocks
argument_list|(
name|stack
argument_list|,
name|restored
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|restoreLock
argument_list|(
name|proc
argument_list|,
name|restored
argument_list|)
expr_stmt|;
name|restoreLocks
argument_list|(
name|stack
argument_list|,
name|restored
argument_list|)
expr_stmt|;
return|return;
block|}
name|stack
operator|.
name|push
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|proc
operator|=
name|procedures
operator|.
name|get
argument_list|(
name|proc
operator|.
name|getParentProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|loadProcedures
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|,
name|boolean
name|abortOnCorruption
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 1. Build the rollback stack
name|int
name|runnableCount
init|=
literal|0
decl_stmt|;
name|int
name|failedCount
init|=
literal|0
decl_stmt|;
name|int
name|waitingCount
init|=
literal|0
decl_stmt|;
name|int
name|waitingTimeoutCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
name|finished
init|=
name|procIter
operator|.
name|isNextFinished
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
init|=
name|procIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|NonceKey
name|nonceKey
init|=
name|proc
operator|.
name|getNonceKey
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|proc
operator|.
name|getProcId
argument_list|()
decl_stmt|;
if|if
condition|(
name|finished
condition|)
block|{
name|completed
operator|.
name|put
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|CompletedProcedureRetainer
argument_list|<>
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed {}"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
condition|)
block|{
assert|assert
operator|!
name|proc
operator|.
name|isFinished
argument_list|()
operator|:
literal|"unexpected finished procedure"
assert|;
name|rollbackStack
operator|.
name|put
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|RootProcedureState
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add the procedure to the map
name|proc
operator|.
name|beforeReplay
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|put
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|proc
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|proc
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RUNNABLE
case|:
name|runnableCount
operator|++
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|failedCount
operator|++
expr_stmt|;
break|break;
case|case
name|WAITING
case|:
name|waitingCount
operator|++
expr_stmt|;
break|break;
case|case
name|WAITING_TIMEOUT
case|:
name|waitingTimeoutCount
operator|++
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
comment|// add the nonce to the map
if|if
condition|(
name|nonceKey
operator|!=
literal|null
condition|)
block|{
name|nonceKeysToProcIdsMap
operator|.
name|put
argument_list|(
name|nonceKey
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 2. Initialize the stacks
comment|// In the old implementation, for procedures in FAILED state, we will push it into the
comment|// ProcedureScheduler directly to execute the rollback. But this does not work after we
comment|// introduce the restore lock stage.
comment|// For now, when we acquire a xlock, we will remove the queue from runQueue in scheduler, and
comment|// then when a procedure which has lock access, for example, a sub procedure of the procedure
comment|// which has the xlock, is pushed into the scheduler, we will add the queue back to let the
comment|// workers poll from it. The assumption here is that, the procedure which has the xlock should
comment|// have been polled out already, so when loading we can not add the procedure to scheduler first
comment|// and then call acquireLock, since the procedure is still in the queue, and since we will
comment|// remove the queue from runQueue, then no one can poll it out, then there is a dead lock
name|List
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|runnableList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|runnableCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|failedList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|failedCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|waitingList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|waitingCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|waitingTimeoutList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|waitingTimeoutCount
argument_list|)
decl_stmt|;
name|procIter
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|procIter
operator|.
name|isNextFinished
argument_list|()
condition|)
block|{
name|procIter
operator|.
name|skipNext
argument_list|()
expr_stmt|;
continue|continue;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
init|=
name|procIter
operator|.
name|next
argument_list|()
decl_stmt|;
assert|assert
operator|!
operator|(
name|proc
operator|.
name|isFinished
argument_list|()
operator|&&
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
operator|)
operator|:
literal|"unexpected completed proc="
operator|+
name|proc
assert|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading {}"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|Long
name|rootProcId
init|=
name|getRootProcedureId
argument_list|(
name|proc
argument_list|)
decl_stmt|;
comment|// The orphan procedures will be passed to handleCorrupted, so add an assert here
assert|assert
name|rootProcId
operator|!=
literal|null
assert|;
if|if
condition|(
name|proc
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|parent
init|=
name|procedures
operator|.
name|get
argument_list|(
name|proc
operator|.
name|getParentProcId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|proc
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|parent
operator|.
name|incChildrenLatch
argument_list|()
expr_stmt|;
block|}
block|}
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|procStack
init|=
name|rollbackStack
operator|.
name|get
argument_list|(
name|rootProcId
argument_list|)
decl_stmt|;
name|procStack
operator|.
name|loadStack
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setRootProcId
argument_list|(
name|rootProcId
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|proc
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RUNNABLE
case|:
name|runnableList
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAITING
case|:
name|waitingList
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAITING_TIMEOUT
case|:
name|waitingTimeoutList
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|failedList
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROLLEDBACK
case|:
case|case
name|INITIALIZING
case|:
name|String
name|msg
init|=
literal|"Unexpected "
operator|+
name|proc
operator|.
name|getState
argument_list|()
operator|+
literal|" state for "
operator|+
name|proc
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|msg
argument_list|)
throw|;
default|default:
break|break;
block|}
block|}
comment|// 3. Check the waiting procedures to see if some of them can be added to runnable.
name|waitingList
operator|.
name|forEach
argument_list|(
name|proc
lambda|->
block|{
if|if
condition|(
operator|!
name|proc
operator|.
name|hasChildren
argument_list|()
condition|)
block|{
comment|// Normally, WAITING procedures should be waken by its children.
comment|// But, there is a case that, all the children are successful and before
comment|// they can wake up their parent procedure, the master was killed.
comment|// So, during recovering the procedures from ProcedureWal, its children
comment|// are not loaded because of their SUCCESS state.
comment|// So we need to continue to run this WAITING procedure. But before
comment|// executing, we need to set its state to RUNNABLE, otherwise, a exception
comment|// will throw:
comment|// Preconditions.checkArgument(procedure.getState() == ProcedureState.RUNNABLE,
comment|// "NOT RUNNABLE! " + procedure.toString());
name|proc
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|RUNNABLE
argument_list|)
expr_stmt|;
name|runnableList
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proc
operator|.
name|afterReplay
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// 4. restore locks
name|restoreLocks
argument_list|()
expr_stmt|;
comment|// 5. Push the procedures to the timeout executor
name|waitingTimeoutList
operator|.
name|forEach
argument_list|(
name|proc
lambda|->
block|{
name|proc
operator|.
name|afterReplay
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|timeoutExecutor
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// 6. Push the procedure to the scheduler
name|failedList
operator|.
name|forEach
argument_list|(
name|scheduler
operator|::
name|addBack
argument_list|)
expr_stmt|;
name|runnableList
operator|.
name|forEach
argument_list|(
name|p
lambda|->
block|{
name|p
operator|.
name|afterReplay
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|sendProcedureLoadedNotification
argument_list|(
name|p
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scheduler
operator|.
name|addBack
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// After all procedures put into the queue, signal the worker threads.
comment|// Otherwise, there is a race condition. See HBASE-21364.
name|scheduler
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Initialize the procedure executor, but do not start workers. We will start them later.    *<p/>    * It calls ProcedureStore.recoverLease() and ProcedureStore.load() to recover the lease, and    * ensure a single executor, and start the procedure replay to resume and recover the previous    * pending and in-progress procedures.    * @param numThreads number of threads available for procedure execution.    * @param abortOnCorruption true if you want to abort your service in case a corrupted procedure    *          is found on replay. otherwise false.    */
end_comment

begin_function
specifier|public
name|void
name|init
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|boolean
name|abortOnCorruption
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We have numThreads executor + one timer thread used for timing out
comment|// procedures and triggering periodic procedures.
name|this
operator|.
name|corePoolSize
operator|=
name|numThreads
expr_stmt|;
name|this
operator|.
name|maxPoolSize
operator|=
literal|10
operator|*
name|numThreads
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting {} core workers (bigger of cpus/4 or 16) with max (burst) worker count={}"
argument_list|,
name|corePoolSize
argument_list|,
name|maxPoolSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadGroup
operator|=
operator|new
name|ThreadGroup
argument_list|(
literal|"PEWorkerGroup"
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeoutExecutor
operator|=
operator|new
name|TimeoutExecutorThread
argument_list|<>
argument_list|(
name|this
argument_list|,
name|threadGroup
argument_list|)
expr_stmt|;
comment|// Create the workers
name|workerId
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|workerThreads
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|corePoolSize
condition|;
operator|++
name|i
control|)
block|{
name|workerThreads
operator|.
name|add
argument_list|(
operator|new
name|WorkerThread
argument_list|(
name|threadGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|st
decl_stmt|,
name|et
decl_stmt|;
comment|// Acquire the store lease.
name|st
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|store
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
name|et
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered {} lease in {}"
argument_list|,
name|store
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|et
operator|-
name|st
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// start the procedure scheduler
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// TODO: Split in two steps.
comment|// TODO: Handle corrupted procedures (currently just a warn)
comment|// The first one will make sure that we have the latest id,
comment|// so we can start the threads and accept new procedures.
comment|// The second step will do the actual load of old procedures.
name|st
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|load
argument_list|(
name|abortOnCorruption
argument_list|)
expr_stmt|;
name|et
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded {} in {}"
argument_list|,
name|store
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|et
operator|-
name|st
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Start the workers.    */
end_comment

begin_function
specifier|public
name|void
name|startWorkers
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|running
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Already running"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Start the executors. Here we must have the lastProcId set.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Start workers {}"
argument_list|,
name|workerThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|timeoutExecutor
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|WorkerThread
name|worker
range|:
name|workerThreads
control|)
block|{
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Internal chores
name|timeoutExecutor
operator|.
name|add
argument_list|(
operator|new
name|WorkerMonitor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add completed cleaner chore
name|addChore
argument_list|(
operator|new
name|CompletedProcedureCleaner
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|store
argument_list|,
name|procExecutionLock
argument_list|,
name|completed
argument_list|,
name|nonceKeysToProcIdsMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|running
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|timeoutExecutor
operator|.
name|sendStopSignal
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|join
parameter_list|()
block|{
assert|assert
operator|!
name|isRunning
argument_list|()
operator|:
literal|"expected not running"
assert|;
comment|// stop the timeout executor
name|timeoutExecutor
operator|.
name|awaitTermination
argument_list|()
expr_stmt|;
comment|// stop the worker threads
for|for
control|(
name|WorkerThread
name|worker
range|:
name|workerThreads
control|)
block|{
name|worker
operator|.
name|awaitTermination
argument_list|()
expr_stmt|;
block|}
comment|// Destroy the Thread Group for the executors
comment|// TODO: Fix. #join is not place to destroy resources.
try|try
block|{
name|threadGroup
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalThreadStateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ThreadGroup {} contains running threads; {}: See STDOUT"
argument_list|,
name|this
operator|.
name|threadGroup
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// This dumps list of threads on STDOUT.
name|this
operator|.
name|threadGroup
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
comment|// reset the in-memory state for testing
name|completed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rollbackStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|procedures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nonceKeysToProcIdsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lastProcId
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|refreshConfiguration
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|setKeepAliveTime
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|WORKER_KEEP_ALIVE_TIME_CONF_KEY
argument_list|,
name|DEFAULT_WORKER_KEEP_ALIVE_TIME
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Accessors
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_function
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * @return the current number of worker threads.    */
end_comment

begin_function
specifier|public
name|int
name|getWorkerThreadCount
parameter_list|()
block|{
return|return
name|workerThreads
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * @return the core pool size settings.    */
end_comment

begin_function
specifier|public
name|int
name|getCorePoolSize
parameter_list|()
block|{
return|return
name|corePoolSize
return|;
block|}
end_function

begin_function
specifier|public
name|int
name|getActiveExecutorCount
parameter_list|()
block|{
return|return
name|activeExecutorCount
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|TEnvironment
name|getEnvironment
parameter_list|()
block|{
return|return
name|this
operator|.
name|environment
return|;
block|}
end_function

begin_function
specifier|public
name|ProcedureStore
name|getStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|store
return|;
block|}
end_function

begin_function
name|ProcedureScheduler
name|getScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|setKeepAliveTime
parameter_list|(
specifier|final
name|long
name|keepAliveTime
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
operator|.
name|keepAliveTime
operator|=
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|keepAliveTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|long
name|getKeepAliveTime
parameter_list|(
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
return|return
name|timeUnit
operator|.
name|convert
argument_list|(
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Submit/Remove Chores
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|/**    * Add a chore procedure to the executor    * @param chore the chore to add    */
end_comment

begin_function
specifier|public
name|void
name|addChore
parameter_list|(
name|ProcedureInMemoryChore
argument_list|<
name|TEnvironment
argument_list|>
name|chore
parameter_list|)
block|{
name|chore
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|WAITING_TIMEOUT
argument_list|)
expr_stmt|;
name|timeoutExecutor
operator|.
name|add
argument_list|(
name|chore
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Remove a chore procedure from the executor    * @param chore the chore to remove    * @return whether the chore is removed, or it will be removed later    */
end_comment

begin_function
specifier|public
name|boolean
name|removeChore
parameter_list|(
name|ProcedureInMemoryChore
argument_list|<
name|TEnvironment
argument_list|>
name|chore
parameter_list|)
block|{
name|chore
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
return|return
name|timeoutExecutor
operator|.
name|remove
argument_list|(
name|chore
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Nonce Procedure helpers
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|/**    * Create a NoneKey from the specified nonceGroup and nonce.    * @param nonceGroup    * @param nonce    * @return the generated NonceKey    */
end_comment

begin_function
specifier|public
name|NonceKey
name|createNonceKey
parameter_list|(
specifier|final
name|long
name|nonceGroup
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|)
block|{
return|return
operator|(
name|nonce
operator|==
name|HConstants
operator|.
name|NO_NONCE
operator|)
condition|?
literal|null
else|:
operator|new
name|NonceKey
argument_list|(
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Register a nonce for a procedure that is going to be submitted.    * A procId will be reserved and on submitProcedure(),    * the procedure with the specified nonce will take the reserved ProcId.    * If someone already reserved the nonce, this method will return the procId reserved,    * otherwise an invalid procId will be returned. and the caller should procede    * and submit the procedure.    *    * @param nonceKey A unique identifier for this operation from the client or process.    * @return the procId associated with the nonce, if any otherwise an invalid procId.    */
end_comment

begin_function
specifier|public
name|long
name|registerNonce
parameter_list|(
specifier|final
name|NonceKey
name|nonceKey
parameter_list|)
block|{
if|if
condition|(
name|nonceKey
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// check if we have already a Reserved ID for the nonce
name|Long
name|oldProcId
init|=
name|nonceKeysToProcIdsMap
operator|.
name|get
argument_list|(
name|nonceKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldProcId
operator|==
literal|null
condition|)
block|{
comment|// reserve a new Procedure ID, this will be associated with the nonce
comment|// and the procedure submitted with the specified nonce will use this ID.
specifier|final
name|long
name|newProcId
init|=
name|nextProcId
argument_list|()
decl_stmt|;
name|oldProcId
operator|=
name|nonceKeysToProcIdsMap
operator|.
name|putIfAbsent
argument_list|(
name|nonceKey
argument_list|,
name|newProcId
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldProcId
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
block|}
comment|// we found a registered nonce, but the procedure may not have been submitted yet.
comment|// since the client expect the procedure to be submitted, spin here until it is.
specifier|final
name|boolean
name|traceEnabled
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
while|while
condition|(
name|isRunning
argument_list|()
operator|&&
operator|!
operator|(
name|procedures
operator|.
name|containsKey
argument_list|(
name|oldProcId
argument_list|)
operator|||
name|completed
operator|.
name|containsKey
argument_list|(
name|oldProcId
argument_list|)
operator|)
operator|&&
name|nonceKeysToProcIdsMap
operator|.
name|containsKey
argument_list|(
name|nonceKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|traceEnabled
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting for pid="
operator|+
name|oldProcId
operator|.
name|longValue
argument_list|()
operator|+
literal|" to be submitted"
argument_list|)
expr_stmt|;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
name|oldProcId
operator|.
name|longValue
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Remove the NonceKey if the procedure was not submitted to the executor.    * @param nonceKey A unique identifier for this operation from the client or process.    */
end_comment

begin_function
specifier|public
name|void
name|unregisterNonceIfProcedureWasNotSubmitted
parameter_list|(
specifier|final
name|NonceKey
name|nonceKey
parameter_list|)
block|{
if|if
condition|(
name|nonceKey
operator|==
literal|null
condition|)
return|return;
specifier|final
name|Long
name|procId
init|=
name|nonceKeysToProcIdsMap
operator|.
name|get
argument_list|(
name|nonceKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
literal|null
condition|)
return|return;
comment|// if the procedure was not submitted, remove the nonce
if|if
condition|(
operator|!
operator|(
name|procedures
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
operator|||
name|completed
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
operator|)
condition|)
block|{
name|nonceKeysToProcIdsMap
operator|.
name|remove
argument_list|(
name|nonceKey
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * If the failure failed before submitting it, we may want to give back the    * same error to the requests with the same nonceKey.    *    * @param nonceKey A unique identifier for this operation from the client or process    * @param procName name of the procedure, used to inform the user    * @param procOwner name of the owner of the procedure, used to inform the user    * @param exception the failure to report to the user    */
end_comment

begin_function
specifier|public
name|void
name|setFailureResultForNonce
parameter_list|(
name|NonceKey
name|nonceKey
parameter_list|,
name|String
name|procName
parameter_list|,
name|User
name|procOwner
parameter_list|,
name|IOException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|nonceKey
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Long
name|procId
init|=
name|nonceKeysToProcIdsMap
operator|.
name|get
argument_list|(
name|nonceKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|procId
operator|==
literal|null
operator|||
name|completed
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
condition|)
block|{
return|return;
block|}
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
init|=
operator|new
name|FailedProcedure
argument_list|<>
argument_list|(
name|procId
operator|.
name|longValue
argument_list|()
argument_list|,
name|procName
argument_list|,
name|procOwner
argument_list|,
name|nonceKey
argument_list|,
name|exception
argument_list|)
decl_stmt|;
name|completed
operator|.
name|putIfAbsent
argument_list|(
name|procId
argument_list|,
operator|new
name|CompletedProcedureRetainer
argument_list|<>
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Submit/Abort Procedure
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|/**    * Add a new root-procedure to the executor.    * @param proc the new procedure to execute.    * @return the procedure id, that can be used to monitor the operation    */
end_comment

begin_function
specifier|public
name|long
name|submitProcedure
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
return|return
name|submitProcedure
argument_list|(
name|proc
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Bypass a procedure. If the procedure is set to bypass, all the logic in    * execute/rollback will be ignored and it will return success, whatever.    * It is used to recover buggy stuck procedures, releasing the lock resources    * and letting other procedures run. Bypassing one procedure (and its ancestors will    * be bypassed automatically) may leave the cluster in a middle state, e.g. region    * not assigned, or some hdfs files left behind. After getting rid of those stuck procedures,    * the operators may have to do some clean up on hdfs or schedule some assign procedures    * to let region online. DO AT YOUR OWN RISK.    *<p>    * A procedure can be bypassed only if    * 1. The procedure is in state of RUNNABLE, WAITING, WAITING_TIMEOUT    * or it is a root procedure without any child.    * 2. No other worker thread is executing it    * 3. No child procedure has been submitted    *    *<p>    * If all the requirements are meet, the procedure and its ancestors will be    * bypassed and persisted to WAL.    *    *<p>    * If the procedure is in WAITING state, will set it to RUNNABLE add it to run queue.    * TODO: What about WAITING_TIMEOUT?    * @param pids the procedure id    * @param lockWait time to wait lock    * @param force if force set to true, we will bypass the procedure even if it is executing.    *              This is for procedures which can't break out during executing(due to bug, mostly)    *              In this case, bypassing the procedure is not enough, since it is already stuck    *              there. We need to restart the master after bypassing, and letting the problematic    *              procedure to execute wth bypass=true, so in that condition, the procedure can be    *              successfully bypassed.    * @param recursive We will do an expensive search for children of each pid. EXPENSIVE!    * @return true if bypass success    * @throws IOException IOException    */
end_comment

begin_function
specifier|public
name|List
argument_list|<
name|Boolean
argument_list|>
name|bypassProcedure
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|pids
parameter_list|,
name|long
name|lockWait
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Boolean
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|pids
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|pid
range|:
name|pids
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|bypassProcedure
argument_list|(
name|pid
argument_list|,
name|lockWait
argument_list|,
name|force
argument_list|,
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
name|boolean
name|bypassProcedure
parameter_list|(
name|long
name|pid
parameter_list|,
name|long
name|lockWait
parameter_list|,
name|boolean
name|override
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|lockWait
operator|>
literal|0
argument_list|,
literal|"lockWait should be positive"
argument_list|)
expr_stmt|;
specifier|final
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|procedure
init|=
name|getProcedure
argument_list|(
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
name|procedure
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure pid={} does not exist, skipping bypass"
argument_list|,
name|pid
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin bypass {} with lockWait={}, override={}, recursive={}"
argument_list|,
name|procedure
argument_list|,
name|lockWait
argument_list|,
name|override
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
name|IdLock
operator|.
name|Entry
name|lockEntry
init|=
name|procExecutionLock
operator|.
name|tryLockEntry
argument_list|(
name|procedure
operator|.
name|getProcId
argument_list|()
argument_list|,
name|lockWait
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockEntry
operator|==
literal|null
operator|&&
operator|!
name|override
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waited {} ms, but {} is still running, skipping bypass with force={}"
argument_list|,
name|lockWait
argument_list|,
name|procedure
argument_list|,
name|override
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|lockEntry
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waited {} ms, but {} is still running, begin bypass with force={}"
argument_list|,
name|lockWait
argument_list|,
name|procedure
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// check whether the procedure is already finished
if|if
condition|(
name|procedure
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} is already finished, skipping bypass"
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|procedure
operator|.
name|hasChildren
argument_list|()
condition|)
block|{
if|if
condition|(
name|recursive
condition|)
block|{
comment|// EXPENSIVE. Checks each live procedure of which there could be many!!!
comment|// Is there another way to get children of a procedure?
name|LOG
operator|.
name|info
argument_list|(
literal|"Recursive bypass on children of pid={}"
argument_list|,
name|procedure
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|procedures
operator|.
name|forEachValue
argument_list|(
literal|1
comment|/*Single-threaded*/
argument_list|,
comment|// Transformer
name|v
lambda|->
name|v
operator|.
name|getParentProcId
argument_list|()
operator|==
name|procedure
operator|.
name|getProcId
argument_list|()
condition|?
name|v
else|:
literal|null
operator|,
comment|// Consumer
name|v
lambda|->
block|{
lambda|try
block|{
name|bypassProcedure
argument_list|(
name|v
operator|.
name|getProcId
argument_list|()
argument_list|,
name|lockWait
argument_list|,
name|override
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Recursive bypass of pid={}"
argument_list|,
name|v
operator|.
name|getProcId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|)
empty_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} has children, skipping bypass"
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_function

begin_comment
comment|// If the procedure has no parent or no child, we are safe to bypass it in whatever state
end_comment

begin_if
if|if
condition|(
name|procedure
operator|.
name|hasParent
argument_list|()
operator|&&
name|procedure
operator|.
name|getState
argument_list|()
operator|!=
name|ProcedureState
operator|.
name|RUNNABLE
operator|&&
name|procedure
operator|.
name|getState
argument_list|()
operator|!=
name|ProcedureState
operator|.
name|WAITING
operator|&&
name|procedure
operator|.
name|getState
argument_list|()
operator|!=
name|ProcedureState
operator|.
name|WAITING_TIMEOUT
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bypassing procedures in RUNNABLE, WAITING and WAITING_TIMEOUT states "
operator|+
literal|"(with no parent), {}"
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
comment|// Question: how is the bypass done here?
return|return
literal|false
return|;
block|}
end_if

begin_comment
comment|// Now, the procedure is not finished, and no one can execute it since we take the lock now
end_comment

begin_comment
comment|// And we can be sure that its ancestor is not running too, since their child has not
end_comment

begin_comment
comment|// finished yet
end_comment

begin_decl_stmt
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|current
init|=
name|procedure
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bypassing {}"
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|current
operator|.
name|bypass
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
name|long
name|parentID
init|=
name|current
operator|.
name|getParentProcId
argument_list|()
decl_stmt|;
name|current
operator|=
name|getProcedure
argument_list|(
name|parentID
argument_list|)
expr_stmt|;
block|}
end_while

begin_comment
comment|//wake up waiting procedure, already checked there is no child
end_comment

begin_if
if|if
condition|(
name|procedure
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|WAITING
condition|)
block|{
name|procedure
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|RUNNABLE
argument_list|)
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
end_if

begin_comment
comment|// If we don't have the lock, we can't re-submit the queue,
end_comment

begin_comment
comment|// since it is already executing. To get rid of the stuck situation, we
end_comment

begin_comment
comment|// need to restart the master. With the procedure set to bypass, the procedureExecutor
end_comment

begin_comment
comment|// will bypass it and won't get stuck again.
end_comment

begin_if
if|if
condition|(
name|lockEntry
operator|!=
literal|null
condition|)
block|{
comment|// add the procedure to run queue,
name|scheduler
operator|.
name|addFront
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bypassing {} and its ancestors successfully, adding to queue"
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bypassing {} and its ancestors successfully, but since it is already running, "
operator|+
literal|"skipping add to queue"
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
block|}
end_if

begin_return
return|return
literal|true
return|;
end_return

begin_block
unit|} finally
block|{
if|if
condition|(
name|lockEntry
operator|!=
literal|null
condition|)
block|{
name|procExecutionLock
operator|.
name|releaseLockEntry
argument_list|(
name|lockEntry
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_comment
unit|}
comment|/**    * Add a new root-procedure to the executor.    * @param proc the new procedure to execute.    * @param nonceKey the registered unique identifier for this operation from the client or process.    * @return the procedure id, that can be used to monitor the operation    */
end_comment

begin_expr_stmt
unit|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NP_NULL_ON_SOME_PATH"
argument_list|,
name|justification
operator|=
literal|"FindBugs is blind to the check-for-null"
argument_list|)
specifier|public
name|long
name|submitProcedure
argument_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
argument_list|,
name|NonceKey
name|nonceKey
argument_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|lastProcId
operator|.
name|get
argument_list|()
operator|>=
literal|0
argument_list|)
block|;
name|prepareProcedure
argument_list|(
name|proc
argument_list|)
block|;
name|final
name|Long
name|currentProcId
block|;
if|if
condition|(
name|nonceKey
operator|!=
literal|null
condition|)
block|{
name|currentProcId
operator|=
name|nonceKeysToProcIdsMap
operator|.
name|get
argument_list|(
name|nonceKey
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|currentProcId
operator|!=
literal|null
argument_list|,
literal|"Expected nonceKey="
operator|+
name|nonceKey
operator|+
literal|" to be reserved, use registerNonce(); proc="
operator|+
name|proc
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|currentProcId
operator|=
name|nextProcId
argument_list|()
expr_stmt|;
block|}
end_else

begin_comment
comment|// Initialize the procedure
end_comment

begin_expr_stmt
name|proc
operator|.
name|setNonceKey
argument_list|(
name|nonceKey
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|proc
operator|.
name|setProcId
argument_list|(
name|currentProcId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Commit the transaction
end_comment

begin_expr_stmt
name|store
operator|.
name|insert
argument_list|(
name|proc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stored {}"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Add the procedure to the executor
end_comment

begin_return
return|return
name|pushProcedure
argument_list|(
name|proc
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/**    * Add a set of new root-procedure to the executor.    * @param procs the new procedures to execute.    */
end_comment

begin_comment
comment|// TODO: Do we need to take nonces here?
end_comment

begin_function
unit|public
name|void
name|submitProcedures
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
index|[]
name|procs
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|lastProcId
operator|.
name|get
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|procs
operator|==
literal|null
operator|||
name|procs
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
comment|// Prepare procedure
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|prepareProcedure
argument_list|(
name|procs
index|[
name|i
index|]
argument_list|)
operator|.
name|setProcId
argument_list|(
name|nextProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Commit the transaction
name|store
operator|.
name|insert
argument_list|(
name|procs
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stored "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|procs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the procedure to the executor
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|pushProcedure
argument_list|(
name|procs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|prepareProcedure
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|proc
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|INITIALIZING
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
argument_list|,
literal|"unexpected parent"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|checkOwnerSet
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|proc
operator|.
name|hasOwner
argument_list|()
argument_list|,
literal|"missing owner"
argument_list|)
expr_stmt|;
block|}
return|return
name|proc
return|;
block|}
end_function

begin_function
specifier|private
name|long
name|pushProcedure
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
specifier|final
name|long
name|currentProcId
init|=
name|proc
operator|.
name|getProcId
argument_list|()
decl_stmt|;
comment|// Update metrics on start of a procedure
name|proc
operator|.
name|updateMetricsOnSubmit
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the rollback stack for the procedure
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|stack
init|=
operator|new
name|RootProcedureState
argument_list|<>
argument_list|()
decl_stmt|;
name|rollbackStack
operator|.
name|put
argument_list|(
name|currentProcId
argument_list|,
name|stack
argument_list|)
expr_stmt|;
comment|// Submit the new subprocedures
assert|assert
operator|!
name|procedures
operator|.
name|containsKey
argument_list|(
name|currentProcId
argument_list|)
assert|;
name|procedures
operator|.
name|put
argument_list|(
name|currentProcId
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|sendProcedureAddedNotification
argument_list|(
name|currentProcId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addBack
argument_list|(
name|proc
argument_list|)
expr_stmt|;
return|return
name|proc
operator|.
name|getProcId
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Send an abort notification the specified procedure.    * Depending on the procedure implementation the abort can be considered or ignored.    * @param procId the procedure to abort    * @return true if the procedure exists and has received the abort, otherwise false.    */
end_comment

begin_function
specifier|public
name|boolean
name|abort
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
return|return
name|abort
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Send an abort notification to the specified procedure.    * Depending on the procedure implementation, the abort can be considered or ignored.    * @param procId the procedure to abort    * @param mayInterruptIfRunning if the proc completed at least one step, should it be aborted?    * @return true if the procedure exists and has received the abort, otherwise false.    */
end_comment

begin_function
specifier|public
name|boolean
name|abort
parameter_list|(
name|long
name|procId
parameter_list|,
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|mayInterruptIfRunning
operator|&&
name|proc
operator|.
name|wasExecuted
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|proc
operator|.
name|abort
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Executor query helpers
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_function
specifier|public
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|getProcedure
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
parameter_list|<
name|T
extends|extends
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
parameter_list|>
name|T
name|getProcedure
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|long
name|procId
parameter_list|)
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
init|=
name|getProcedure
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|proc
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|proc
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|public
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|getResult
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
name|retainer
init|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|retainer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|retainer
operator|.
name|getProcedure
argument_list|()
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Return true if the procedure is finished.    * The state may be "completed successfully" or "failed and rolledback".    * Use getResult() to check the state or get the result data.    * @param procId the ID of the procedure to check    * @return true if the procedure execution is finished, otherwise false.    */
end_comment

begin_function
specifier|public
name|boolean
name|isFinished
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
operator|!
name|procedures
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Return true if the procedure is started.    * @param procId the ID of the procedure to check    * @return true if the procedure execution is started, otherwise false.    */
end_comment

begin_function
specifier|public
name|boolean
name|isStarted
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
block|{
return|return
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
operator|!=
literal|null
return|;
block|}
return|return
name|proc
operator|.
name|wasExecuted
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Mark the specified completed procedure, as ready to remove.    * @param procId the ID of the procedure to remove    */
end_comment

begin_function
specifier|public
name|void
name|removeResult
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
name|retainer
init|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|retainer
operator|==
literal|null
condition|)
block|{
assert|assert
operator|!
name|procedures
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
operator|:
literal|"pid="
operator|+
name|procId
operator|+
literal|" is still running"
assert|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"pid={} already removed by the cleaner."
argument_list|,
name|procId
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// The CompletedProcedureCleaner will take care of deletion, once the TTL is expired.
name|retainer
operator|.
name|setClientAckTime
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|getResultOrProcedure
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
name|retainer
init|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|retainer
operator|==
literal|null
condition|)
block|{
return|return
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|retainer
operator|.
name|getProcedure
argument_list|()
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Check if the user is this procedure's owner    * @param procId the target procedure    * @param user the user    * @return true if the user is the owner of the procedure,    *   false otherwise or the owner is unknown.    */
end_comment

begin_function
specifier|public
name|boolean
name|isProcedureOwner
parameter_list|(
name|long
name|procId
parameter_list|,
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|runningProc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|runningProc
operator|!=
literal|null
condition|)
block|{
return|return
name|runningProc
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
name|retainer
init|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|retainer
operator|!=
literal|null
condition|)
block|{
return|return
name|retainer
operator|.
name|getProcedure
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
return|;
block|}
comment|// Procedure either does not exist or has already completed and got cleaned up.
comment|// At this time, we cannot check the owner of the procedure
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|/**    * Should only be used when starting up, where the procedure workers have not been started.    *<p/>    * If the procedure works has been started, the return values maybe changed when you are    * processing it so usually this is not safe. Use {@link #getProcedures()} below for most cases as    * it will do a copy, and also include the finished procedures.    */
end_comment

begin_function
specifier|public
name|Collection
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|getActiveProceduresNoCopy
parameter_list|()
block|{
return|return
name|procedures
operator|.
name|values
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Get procedures.    * @return the procedures in a list    */
end_comment

begin_function
specifier|public
name|List
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|getProcedures
parameter_list|()
block|{
name|List
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|procedureList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|procedures
operator|.
name|size
argument_list|()
operator|+
name|completed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|procedureList
operator|.
name|addAll
argument_list|(
name|procedures
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// Note: The procedure could show up twice in the list with different state, as
comment|// it could complete after we walk through procedures list and insert into
comment|// procedureList - it is ok, as we will use the information in the Procedure
comment|// to figure it out; to prevent this would increase the complexity of the logic.
name|completed
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CompletedProcedureRetainer
operator|::
name|getProcedure
argument_list|)
operator|.
name|forEach
argument_list|(
name|procedureList
operator|::
name|add
argument_list|)
expr_stmt|;
return|return
name|procedureList
return|;
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Listeners helpers
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_function
specifier|public
name|void
name|registerListener
parameter_list|(
name|ProcedureExecutorListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|unregisterListener
parameter_list|(
name|ProcedureExecutorListener
name|listener
parameter_list|)
block|{
return|return
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|sendProcedureLoadedNotification
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ProcedureExecutorListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|procedureLoaded
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener "
operator|+
name|listener
operator|+
literal|" had an error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|sendProcedureAddedNotification
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ProcedureExecutorListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|procedureAdded
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener "
operator|+
name|listener
operator|+
literal|" had an error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|sendProcedureFinishedNotification
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ProcedureExecutorListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|procedureFinished
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener "
operator|+
name|listener
operator|+
literal|" had an error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Procedure IDs helpers
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_function
specifier|private
name|long
name|nextProcId
parameter_list|()
block|{
name|long
name|procId
init|=
name|lastProcId
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|procId
operator|<
literal|0
condition|)
block|{
while|while
condition|(
operator|!
name|lastProcId
operator|.
name|compareAndSet
argument_list|(
name|procId
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|procId
operator|=
name|lastProcId
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|procId
operator|>=
literal|0
condition|)
break|break;
block|}
while|while
condition|(
name|procedures
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
condition|)
block|{
name|procId
operator|=
name|lastProcId
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
name|procId
operator|>=
literal|0
operator|:
literal|"Invalid procId "
operator|+
name|procId
assert|;
return|return
name|procId
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
specifier|protected
name|long
name|getLastProcId
parameter_list|()
block|{
return|return
name|lastProcId
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getActiveProcIds
parameter_list|()
block|{
return|return
name|procedures
operator|.
name|keySet
argument_list|()
return|;
block|}
end_function

begin_function
name|Long
name|getRootProcedureId
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
return|return
name|Procedure
operator|.
name|getRootProcedureId
argument_list|(
name|procedures
argument_list|,
name|proc
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Executions
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_function
specifier|private
name|void
name|executeProcedure
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
if|if
condition|(
name|proc
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} is already finished, skipping execution"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Long
name|rootProcId
init|=
name|getRootProcedureId
argument_list|(
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootProcId
operator|==
literal|null
condition|)
block|{
comment|// The 'proc' was ready to run but the root procedure was rolledback
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rollback because parent is done/rolledback proc="
operator|+
name|proc
argument_list|)
expr_stmt|;
name|executeRollback
argument_list|(
name|proc
argument_list|)
expr_stmt|;
return|return;
block|}
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|procStack
init|=
name|rollbackStack
operator|.
name|get
argument_list|(
name|rootProcId
argument_list|)
decl_stmt|;
if|if
condition|(
name|procStack
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"RootProcedureState is null for "
operator|+
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
do|do
block|{
comment|// Try to acquire the execution
if|if
condition|(
operator|!
name|procStack
operator|.
name|acquire
argument_list|(
name|proc
argument_list|)
condition|)
block|{
if|if
condition|(
name|procStack
operator|.
name|setRollback
argument_list|()
condition|)
block|{
comment|// we have the 'rollback-lock' we can start rollingback
switch|switch
condition|(
name|executeRollback
argument_list|(
name|rootProcId
argument_list|,
name|procStack
argument_list|)
condition|)
block|{
case|case
name|LOCK_ACQUIRED
case|:
break|break;
case|case
name|LOCK_YIELD_WAIT
case|:
name|procStack
operator|.
name|unsetRollback
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCK_EVENT_WAIT
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"LOCK_EVENT_WAIT rollback..."
operator|+
name|proc
argument_list|)
expr_stmt|;
name|procStack
operator|.
name|unsetRollback
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
comment|// if we can't rollback means that some child is still running.
comment|// the rollback will be executed after all the children are done.
comment|// If the procedure was never executed, remove and mark it as rolledback.
if|if
condition|(
operator|!
name|proc
operator|.
name|wasExecuted
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|executeRollback
argument_list|(
name|proc
argument_list|)
condition|)
block|{
case|case
name|LOCK_ACQUIRED
case|:
break|break;
case|case
name|LOCK_YIELD_WAIT
case|:
name|scheduler
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCK_EVENT_WAIT
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"LOCK_EVENT_WAIT can't rollback child running?..."
operator|+
name|proc
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
break|break;
block|}
comment|// Execute the procedure
assert|assert
name|proc
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|RUNNABLE
operator|:
name|proc
assert|;
comment|// Note that lock is NOT about concurrency but rather about ensuring
comment|// ownership of a procedure of an entity such as a region or table
name|LockState
name|lockState
init|=
name|acquireLock
argument_list|(
name|proc
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|lockState
condition|)
block|{
case|case
name|LOCK_ACQUIRED
case|:
name|execProcedure
argument_list|(
name|procStack
argument_list|,
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCK_YIELD_WAIT
case|:
name|LOG
operator|.
name|info
argument_list|(
name|lockState
operator|+
literal|" "
operator|+
name|proc
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOCK_EVENT_WAIT
case|:
comment|// Someone will wake us up when the lock is available
name|LOG
operator|.
name|debug
argument_list|(
name|lockState
operator|+
literal|" "
operator|+
name|proc
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|procStack
operator|.
name|release
argument_list|(
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
comment|// update metrics on finishing the procedure
name|proc
operator|.
name|updateMetricsOnFinish
argument_list|(
name|getEnvironment
argument_list|()
argument_list|,
name|proc
operator|.
name|elapsedTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished "
operator|+
name|proc
operator|+
literal|" in "
operator|+
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|proc
operator|.
name|elapsedTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finalize the procedure state
if|if
condition|(
name|proc
operator|.
name|getProcId
argument_list|()
operator|==
name|rootProcId
condition|)
block|{
name|procedureFinished
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execCompletionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
do|while
condition|(
name|procStack
operator|.
name|isFailed
argument_list|()
condition|)
do|;
block|}
end_function

begin_function
specifier|private
name|LockState
name|acquireLock
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
name|TEnvironment
name|env
init|=
name|getEnvironment
argument_list|()
decl_stmt|;
comment|// if holdLock is true, then maybe we already have the lock, so just return LOCK_ACQUIRED if
comment|// hasLock is true.
if|if
condition|(
name|proc
operator|.
name|hasLock
argument_list|()
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
return|return
name|proc
operator|.
name|doAcquireLock
argument_list|(
name|env
argument_list|,
name|store
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|releaseLock
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|TEnvironment
name|env
init|=
name|getEnvironment
argument_list|()
decl_stmt|;
comment|// For how the framework works, we know that we will always have the lock
comment|// when we call releaseLock(), so we can avoid calling proc.hasLock()
if|if
condition|(
name|force
operator|||
operator|!
name|proc
operator|.
name|holdLock
argument_list|(
name|env
argument_list|)
operator|||
name|proc
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|proc
operator|.
name|doReleaseLock
argument_list|(
name|env
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Execute the rollback of the full procedure stack. Once the procedure is rolledback, the    * root-procedure will be visible as finished to user, and the result will be the fatal exception.    */
end_comment

begin_function
specifier|private
name|LockState
name|executeRollback
parameter_list|(
name|long
name|rootProcId
parameter_list|,
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|procStack
parameter_list|)
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|rootProc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|rootProcId
argument_list|)
decl_stmt|;
name|RemoteProcedureException
name|exception
init|=
name|rootProc
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// TODO: This needs doc. The root proc doesn't have an exception. Maybe we are
comment|// rolling back because the subprocedure does. Clarify.
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|procStack
operator|.
name|getException
argument_list|()
expr_stmt|;
name|rootProc
operator|.
name|setFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|rootProc
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|subprocStack
init|=
name|procStack
operator|.
name|getSubproceduresStack
argument_list|()
decl_stmt|;
assert|assert
name|subprocStack
operator|!=
literal|null
operator|:
literal|"Called rollback with no steps executed rootProc="
operator|+
name|rootProc
assert|;
name|int
name|stackTail
init|=
name|subprocStack
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|stackTail
operator|--
operator|>
literal|0
condition|)
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
init|=
name|subprocStack
operator|.
name|get
argument_list|(
name|stackTail
argument_list|)
decl_stmt|;
name|IdLock
operator|.
name|Entry
name|lockEntry
init|=
literal|null
decl_stmt|;
comment|// Hold the execution lock if it is not held by us. The IdLock is not reentrant so we need
comment|// this check, as the worker will hold the lock before executing a procedure. This is the only
comment|// place where we may hold two procedure execution locks, and there is a fence in the
comment|// RootProcedureState where we can make sure that only one worker can execute the rollback of
comment|// a RootProcedureState, so there is no dead lock problem. And the lock here is necessary to
comment|// prevent race between us and the force update thread.
if|if
condition|(
operator|!
name|procExecutionLock
operator|.
name|isHeldByCurrentThread
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|lockEntry
operator|=
name|procExecutionLock
operator|.
name|getLockEntry
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// can only happen if interrupted, so not a big deal to propagate it
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
comment|// For the sub procedures which are successfully finished, we do not rollback them.
comment|// Typically, if we want to rollback a procedure, we first need to rollback it, and then
comment|// recursively rollback its ancestors. The state changes which are done by sub procedures
comment|// should be handled by parent procedures when rolling back. For example, when rolling back
comment|// a MergeTableProcedure, we will schedule new procedures to bring the offline regions
comment|// online, instead of rolling back the original procedures which offlined the regions(in
comment|// fact these procedures can not be rolled back...).
if|if
condition|(
name|proc
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
comment|// Just do the cleanup work, without actually executing the rollback
name|subprocStack
operator|.
name|remove
argument_list|(
name|stackTail
argument_list|)
expr_stmt|;
name|cleanupAfterRollbackOneStep
argument_list|(
name|proc
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LockState
name|lockState
init|=
name|acquireLock
argument_list|(
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockState
operator|!=
name|LockState
operator|.
name|LOCK_ACQUIRED
condition|)
block|{
comment|// can't take a lock on the procedure, add the root-proc back on the
comment|// queue waiting for the lock availability
return|return
name|lockState
return|;
block|}
name|lockState
operator|=
name|executeRollback
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|releaseLock
argument_list|(
name|proc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|abortRollback
init|=
name|lockState
operator|!=
name|LockState
operator|.
name|LOCK_ACQUIRED
decl_stmt|;
name|abortRollback
operator||=
operator|!
name|isRunning
argument_list|()
operator|||
operator|!
name|store
operator|.
name|isRunning
argument_list|()
expr_stmt|;
comment|// allows to kill the executor before something is stored to the wal.
comment|// useful to test the procedure recovery.
if|if
condition|(
name|abortRollback
condition|)
block|{
return|return
name|lockState
return|;
block|}
name|subprocStack
operator|.
name|remove
argument_list|(
name|stackTail
argument_list|)
expr_stmt|;
comment|// if the procedure is kind enough to pass the slot to someone else, yield
comment|// if the proc is already finished, do not yield
if|if
condition|(
operator|!
name|proc
operator|.
name|isFinished
argument_list|()
operator|&&
name|proc
operator|.
name|isYieldAfterExecutionStep
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|LockState
operator|.
name|LOCK_YIELD_WAIT
return|;
block|}
if|if
condition|(
name|proc
operator|!=
name|rootProc
condition|)
block|{
name|execCompletionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|lockEntry
operator|!=
literal|null
condition|)
block|{
name|procExecutionLock
operator|.
name|releaseLockEntry
argument_list|(
name|lockEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Finalize the procedure state
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolled back {} exec-time={}"
argument_list|,
name|rootProc
argument_list|,
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|rootProc
operator|.
name|elapsedTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|procedureFinished
argument_list|(
name|rootProc
argument_list|)
expr_stmt|;
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|cleanupAfterRollbackOneStep
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
if|if
condition|(
name|proc
operator|.
name|removeStackIndex
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|proc
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|proc
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|ROLLEDBACK
argument_list|)
expr_stmt|;
block|}
comment|// update metrics on finishing the procedure (fail)
name|proc
operator|.
name|updateMetricsOnFinish
argument_list|(
name|getEnvironment
argument_list|()
argument_list|,
name|proc
operator|.
name|elapsedTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|remove
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|long
index|[]
name|childProcIds
init|=
name|rollbackStack
operator|.
name|get
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
operator|.
name|getSubprocedureIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|childProcIds
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|proc
argument_list|,
name|childProcIds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|store
operator|.
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Execute the rollback of the procedure step.    * It updates the store with the new state (stack index)    * or will remove completly the procedure in case it is a child.    */
end_comment

begin_function
specifier|private
name|LockState
name|executeRollback
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
try|try
block|{
name|proc
operator|.
name|doRollback
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Roll back attempt failed for {}"
argument_list|,
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|LockState
operator|.
name|LOCK_YIELD_WAIT
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|handleInterruptedException
argument_list|(
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|LockState
operator|.
name|LOCK_YIELD_WAIT
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch NullPointerExceptions or similar errors...
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"CODE-BUG: Uncaught runtime exception for "
operator|+
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// allows to kill the executor before something is stored to the wal.
comment|// useful to test the procedure recovery.
if|if
condition|(
name|testing
operator|!=
literal|null
operator|&&
name|testing
operator|.
name|shouldKillBeforeStoreUpdate
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"TESTING: Kill before store update"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|cleanupAfterRollbackOneStep
argument_list|(
name|proc
argument_list|)
expr_stmt|;
return|return
name|LockState
operator|.
name|LOCK_ACQUIRED
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|yieldProcedure
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
name|releaseLock
argument_list|(
name|proc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Executes<code>procedure</code>    *<ul>    *<li>Calls the doExecute() of the procedure    *<li>If the procedure execution didn't fail (i.e. valid user input)    *<ul>    *<li>...and returned subprocedures    *<ul><li>The subprocedures are initialized.    *<li>The subprocedures are added to the store    *<li>The subprocedures are added to the runnable queue    *<li>The procedure is now in a WAITING state, waiting for the subprocedures to complete    *</ul>    *</li>    *<li>...if there are no subprocedure    *<ul><li>the procedure completed successfully    *<li>if there is a parent (WAITING)    *<li>the parent state will be set to RUNNABLE    *</ul>    *</li>    *</ul>    *</li>    *<li>In case of failure    *<ul>    *<li>The store is updated with the new state</li>    *<li>The executor (caller of this method) will start the rollback of the procedure</li>    *</ul>    *</li>    *</ul>    */
end_comment

begin_function
specifier|private
name|void
name|execProcedure
parameter_list|(
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|procStack
parameter_list|,
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|procedure
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|procedure
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|RUNNABLE
argument_list|,
literal|"NOT RUNNABLE! "
operator|+
name|procedure
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Procedures can suspend themselves. They skip out by throwing a ProcedureSuspendedException.
comment|// The exception is caught below and then we hurry to the exit without disturbing state. The
comment|// idea is that the processing of this procedure will be unsuspended later by an external event
comment|// such the report of a region open.
name|boolean
name|suspended
init|=
literal|false
decl_stmt|;
comment|// Whether to 're-' -execute; run through the loop again.
name|boolean
name|reExecute
init|=
literal|false
decl_stmt|;
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
index|[]
name|subprocs
init|=
literal|null
decl_stmt|;
do|do
block|{
name|reExecute
operator|=
literal|false
expr_stmt|;
name|procedure
operator|.
name|resetPersistence
argument_list|()
expr_stmt|;
try|try
block|{
name|subprocs
operator|=
name|procedure
operator|.
name|doExecute
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subprocs
operator|!=
literal|null
operator|&&
name|subprocs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|subprocs
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ProcedureSuspendedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Suspend {}"
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
name|suspended
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProcedureYieldException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Yield {}"
argument_list|,
name|procedure
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|yieldProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Yield interrupt {}"
argument_list|,
name|procedure
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|handleInterruptedException
argument_list|(
name|procedure
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|yieldProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch NullPointerExceptions or similar errors...
name|String
name|msg
init|=
literal|"CODE-BUG: Uncaught runtime exception: "
operator|+
name|procedure
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|setFailure
argument_list|(
operator|new
name|RemoteProcedureException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|procedure
operator|.
name|isFailed
argument_list|()
condition|)
block|{
if|if
condition|(
name|subprocs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subprocs
operator|.
name|length
operator|==
literal|1
operator|&&
name|subprocs
index|[
literal|0
index|]
operator|==
name|procedure
condition|)
block|{
comment|// Procedure returned itself. Quick-shortcut for a state machine-like procedure;
comment|// i.e. we go around this loop again rather than go back out on the scheduler queue.
name|subprocs
operator|=
literal|null
expr_stmt|;
name|reExecute
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Short-circuit to next step on pid={}"
argument_list|,
name|procedure
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Yield the current procedure, and make the subprocedure runnable
comment|// subprocs may come back 'null'.
name|subprocs
operator|=
name|initializeChildren
argument_list|(
name|procStack
argument_list|,
name|procedure
argument_list|,
name|subprocs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized subprocedures="
operator|+
operator|(
name|subprocs
operator|==
literal|null
condition|?
literal|null
else|:
name|Stream
operator|.
name|of
argument_list|(
name|subprocs
argument_list|)
operator|.
name|map
argument_list|(
name|e
lambda|->
literal|"{"
operator|+
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|procedure
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|WAITING_TIMEOUT
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Added to timeoutExecutor {}"
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
name|timeoutExecutor
operator|.
name|add
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|suspended
condition|)
block|{
comment|// No subtask, so we are done
name|procedure
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the procedure to the stack
name|procStack
operator|.
name|addRollbackStep
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
comment|// allows to kill the executor before something is stored to the wal.
comment|// useful to test the procedure recovery.
if|if
condition|(
name|testing
operator|!=
literal|null
operator|&&
name|testing
operator|.
name|shouldKillBeforeStoreUpdate
argument_list|(
name|suspended
argument_list|,
name|procedure
operator|.
name|hasParent
argument_list|()
argument_list|)
condition|)
block|{
name|kill
argument_list|(
literal|"TESTING: Kill BEFORE store update: "
operator|+
name|procedure
argument_list|)
expr_stmt|;
block|}
comment|// TODO: The code here doesn't check if store is running before persisting to the store as
comment|// it relies on the method call below to throw RuntimeException to wind up the stack and
comment|// executor thread to stop. The statement following the method call below seems to check if
comment|// store is not running, to prevent scheduling children procedures, re-execution or yield
comment|// of this procedure. This may need more scrutiny and subsequent cleanup in future
comment|//
comment|// Commit the transaction even if a suspend (state may have changed). Note this append
comment|// can take a bunch of time to complete.
if|if
condition|(
name|procedure
operator|.
name|needPersistence
argument_list|()
condition|)
block|{
name|updateStoreOnExec
argument_list|(
name|procStack
argument_list|,
name|procedure
argument_list|,
name|subprocs
argument_list|)
expr_stmt|;
block|}
comment|// if the store is not running we are aborting
if|if
condition|(
operator|!
name|store
operator|.
name|isRunning
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// if the procedure is kind enough to pass the slot to someone else, yield
if|if
condition|(
name|procedure
operator|.
name|isRunnable
argument_list|()
operator|&&
operator|!
name|suspended
operator|&&
name|procedure
operator|.
name|isYieldAfterExecutionStep
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
condition|)
block|{
name|yieldProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
return|return;
block|}
assert|assert
operator|(
name|reExecute
operator|&&
name|subprocs
operator|==
literal|null
operator|)
operator|||
operator|!
name|reExecute
assert|;
block|}
do|while
condition|(
name|reExecute
condition|)
do|;
comment|// Allows to kill the executor after something is stored to the WAL but before the below
comment|// state settings are done -- in particular the one on the end where we make parent
comment|// RUNNABLE again when its children are done; see countDownChildren.
if|if
condition|(
name|testing
operator|!=
literal|null
operator|&&
name|testing
operator|.
name|shouldKillAfterStoreUpdate
argument_list|(
name|suspended
argument_list|)
condition|)
block|{
name|kill
argument_list|(
literal|"TESTING: Kill AFTER store update: "
operator|+
name|procedure
argument_list|)
expr_stmt|;
block|}
comment|// Submit the new subprocedures
if|if
condition|(
name|subprocs
operator|!=
literal|null
operator|&&
operator|!
name|procedure
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|submitChildrenProcedures
argument_list|(
name|subprocs
argument_list|)
expr_stmt|;
block|}
comment|// we need to log the release lock operation before waking up the parent procedure, as there
comment|// could be race that the parent procedure may call updateStoreOnExec ahead of us and remove all
comment|// the sub procedures from store and cause problems...
name|releaseLock
argument_list|(
name|procedure
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// if the procedure is complete and has a parent, count down the children latch.
comment|// If 'suspended', do nothing to change state -- let other threads handle unsuspend event.
if|if
condition|(
operator|!
name|suspended
operator|&&
name|procedure
operator|.
name|isFinished
argument_list|()
operator|&&
name|procedure
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|countDownChildren
argument_list|(
name|procStack
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|kill
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
end_function

begin_function
specifier|private
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
index|[]
name|initializeChildren
parameter_list|(
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|procStack
parameter_list|,
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|procedure
parameter_list|,
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
index|[]
name|subprocs
parameter_list|)
block|{
assert|assert
name|subprocs
operator|!=
literal|null
operator|:
literal|"expected subprocedures"
assert|;
specifier|final
name|long
name|rootProcId
init|=
name|getRootProcedureId
argument_list|(
name|procedure
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subprocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|subproc
init|=
name|subprocs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|subproc
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"subproc["
operator|+
name|i
operator|+
literal|"] is null, aborting the procedure"
decl_stmt|;
name|procedure
operator|.
name|setFailure
argument_list|(
operator|new
name|RemoteProcedureException
argument_list|(
name|msg
argument_list|,
operator|new
name|IllegalArgumentIOException
argument_list|(
name|msg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
assert|assert
name|subproc
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|INITIALIZING
operator|:
name|subproc
assert|;
name|subproc
operator|.
name|setParentProcId
argument_list|(
name|procedure
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|subproc
operator|.
name|setRootProcId
argument_list|(
name|rootProcId
argument_list|)
expr_stmt|;
name|subproc
operator|.
name|setProcId
argument_list|(
name|nextProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStack
operator|.
name|addSubProcedure
argument_list|(
name|subproc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|procedure
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|procedure
operator|.
name|setChildrenLatch
argument_list|(
name|subprocs
operator|.
name|length
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|procedure
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RUNNABLE
case|:
name|procedure
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAITING_TIMEOUT
case|:
name|timeoutExecutor
operator|.
name|add
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|subprocs
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|submitChildrenProcedures
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
index|[]
name|subprocs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subprocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|subproc
init|=
name|subprocs
index|[
name|i
index|]
decl_stmt|;
name|subproc
operator|.
name|updateMetricsOnSubmit
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|procedures
operator|.
name|containsKey
argument_list|(
name|subproc
operator|.
name|getProcId
argument_list|()
argument_list|)
assert|;
name|procedures
operator|.
name|put
argument_list|(
name|subproc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|subproc
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addFront
argument_list|(
name|subproc
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|countDownChildren
parameter_list|(
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|procStack
parameter_list|,
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|procedure
parameter_list|)
block|{
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|parent
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procedure
operator|.
name|getParentProcId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
assert|assert
name|procStack
operator|.
name|isRollingback
argument_list|()
assert|;
return|return;
block|}
comment|// If this procedure is the last child awake the parent procedure
if|if
condition|(
name|parent
operator|.
name|tryRunnable
argument_list|()
condition|)
block|{
comment|// If we succeeded in making the parent runnable -- i.e. all of its
comment|// children have completed, move parent to front of the queue.
name|store
operator|.
name|update
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addFront
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished subprocedure(s) of "
operator|+
name|parent
operator|+
literal|"; resume parent processing."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|updateStoreOnExec
parameter_list|(
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|procStack
parameter_list|,
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|procedure
parameter_list|,
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
index|[]
name|subprocs
parameter_list|)
block|{
if|if
condition|(
name|subprocs
operator|!=
literal|null
operator|&&
operator|!
name|procedure
operator|.
name|isFailed
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Stored "
operator|+
name|procedure
operator|+
literal|", children "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|subprocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|insert
argument_list|(
name|procedure
argument_list|,
name|subprocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Store update {}"
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
if|if
condition|(
name|procedure
operator|.
name|isFinished
argument_list|()
operator|&&
operator|!
name|procedure
operator|.
name|hasParent
argument_list|()
condition|)
block|{
comment|// remove child procedures
specifier|final
name|long
index|[]
name|childProcIds
init|=
name|procStack
operator|.
name|getSubprocedureIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|childProcIds
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|procedure
argument_list|,
name|childProcIds
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childProcIds
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|procedures
operator|.
name|remove
argument_list|(
name|childProcIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|store
operator|.
name|update
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|store
operator|.
name|update
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|handleInterruptedException
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|,
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Interrupt during {}. suspend and retry it later."
argument_list|,
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// NOTE: We don't call Thread.currentThread().interrupt()
comment|// because otherwise all the subsequent calls e.g. Thread.sleep() will throw
comment|// the InterruptedException. If the master is going down, we will be notified
comment|// and the executor/store will be stopped.
comment|// (The interrupted procedure will be retried on the next run)
block|}
end_function

begin_function
specifier|private
name|void
name|execCompletionCleanup
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
specifier|final
name|TEnvironment
name|env
init|=
name|getEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
name|proc
operator|.
name|hasLock
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Usually this should not happen, we will release the lock before if the procedure"
operator|+
literal|" is finished, even if the holdLock is true, arrive here means we have some holes where"
operator|+
literal|" we do not release the lock. And the releaseLock below may fail since the procedure may"
operator|+
literal|" have already been deleted from the procedure store."
argument_list|)
expr_stmt|;
name|releaseLock
argument_list|(
name|proc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proc
operator|.
name|completionCleanup
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch NullPointerExceptions or similar errors...
name|LOG
operator|.
name|error
argument_list|(
literal|"CODE-BUG: uncatched runtime exception for procedure: "
operator|+
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|procedureFinished
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
parameter_list|)
block|{
comment|// call the procedure completion cleanup handler
name|execCompletionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
name|retainer
init|=
operator|new
name|CompletedProcedureRetainer
argument_list|<>
argument_list|(
name|proc
argument_list|)
decl_stmt|;
comment|// update the executor internal state maps
if|if
condition|(
operator|!
name|proc
operator|.
name|shouldWaitClientAck
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
condition|)
block|{
name|retainer
operator|.
name|setClientAckTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|completed
operator|.
name|put
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|retainer
argument_list|)
expr_stmt|;
name|rollbackStack
operator|.
name|remove
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|remove
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// call the runnableSet completion cleanup handler
try|try
block|{
name|scheduler
operator|.
name|completionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch NullPointerExceptions or similar errors...
name|LOG
operator|.
name|error
argument_list|(
literal|"CODE-BUG: uncatched runtime exception for completion cleanup: {}"
argument_list|,
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Notify the listeners
name|sendProcedureFinishedNotification
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|RootProcedureState
argument_list|<
name|TEnvironment
argument_list|>
name|getProcStack
parameter_list|(
name|long
name|rootProcId
parameter_list|)
block|{
return|return
name|rollbackStack
operator|.
name|get
argument_list|(
name|rootProcId
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
name|ProcedureScheduler
name|getProcedureScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
name|int
name|getCompletedSize
parameter_list|()
block|{
return|return
name|completed
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// ==========================================================================
end_comment

begin_comment
comment|//  Worker Thread
end_comment

begin_comment
comment|// ==========================================================================
end_comment

begin_class
specifier|private
class|class
name|WorkerThread
extends|extends
name|StoppableThread
block|{
specifier|private
specifier|final
name|AtomicLong
name|executionStartTime
init|=
operator|new
name|AtomicLong
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|activeProcedure
decl_stmt|;
specifier|public
name|WorkerThread
parameter_list|(
name|ThreadGroup
name|group
parameter_list|)
block|{
name|this
argument_list|(
name|group
argument_list|,
literal|"PEWorker-"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|WorkerThread
parameter_list|(
name|ThreadGroup
name|group
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|super
argument_list|(
name|group
argument_list|,
name|prefix
operator|+
name|workerId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendStopSignal
parameter_list|()
block|{
name|scheduler
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|lastUpdate
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|isRunning
argument_list|()
operator|&&
name|keepAlive
argument_list|(
name|lastUpdate
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|proc
init|=
name|scheduler
operator|.
name|poll
argument_list|(
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|this
operator|.
name|activeProcedure
operator|=
name|proc
expr_stmt|;
name|int
name|activeCount
init|=
name|activeExecutorCount
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|int
name|runningCount
init|=
name|store
operator|.
name|setRunningProcedureCount
argument_list|(
name|activeCount
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Execute pid={} runningCount={}, activeCount={}"
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|runningCount
argument_list|,
name|activeCount
argument_list|)
expr_stmt|;
name|executionStartTime
operator|.
name|set
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
name|IdLock
operator|.
name|Entry
name|lockEntry
init|=
name|procExecutionLock
operator|.
name|getLockEntry
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|executeProcedure
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ASSERT pid="
operator|+
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|procExecutionLock
operator|.
name|releaseLockEntry
argument_list|(
name|lockEntry
argument_list|)
expr_stmt|;
name|activeCount
operator|=
name|activeExecutorCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|runningCount
operator|=
name|store
operator|.
name|setRunningProcedureCount
argument_list|(
name|activeCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Halt pid={} runningCount={}, activeCount={}"
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|runningCount
argument_list|,
name|activeCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|activeProcedure
operator|=
literal|null
expr_stmt|;
name|lastUpdate
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|executionStartTime
operator|.
name|set
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Worker terminating UNNATURALLY {}"
argument_list|,
name|this
operator|.
name|activeProcedure
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Worker terminated."
argument_list|)
expr_stmt|;
block|}
name|workerThreads
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Procedure
argument_list|<
name|?
argument_list|>
name|p
init|=
name|this
operator|.
name|activeProcedure
decl_stmt|;
return|return
name|getName
argument_list|()
operator|+
literal|"(pid="
operator|+
operator|(
name|p
operator|==
literal|null
condition|?
name|Procedure
operator|.
name|NO_PROC_ID
else|:
name|p
operator|.
name|getProcId
argument_list|()
operator|+
literal|")"
operator|)
return|;
block|}
comment|/**      * @return the time since the current procedure is running      */
specifier|public
name|long
name|getCurrentRunTime
parameter_list|()
block|{
return|return
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|executionStartTime
operator|.
name|get
argument_list|()
return|;
block|}
comment|// core worker never timeout
specifier|protected
name|boolean
name|keepAlive
parameter_list|(
name|long
name|lastUpdate
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

begin_comment
comment|// A worker thread which can be added when core workers are stuck. Will timeout after
end_comment

begin_comment
comment|// keepAliveTime if there is no procedure to run.
end_comment

begin_class
specifier|private
specifier|final
class|class
name|KeepAliveWorkerThread
extends|extends
name|WorkerThread
block|{
specifier|public
name|KeepAliveWorkerThread
parameter_list|(
name|ThreadGroup
name|group
parameter_list|)
block|{
name|super
argument_list|(
name|group
argument_list|,
literal|"KeepAlivePEWorker-"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|keepAlive
parameter_list|(
name|long
name|lastUpdate
parameter_list|)
block|{
return|return
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|lastUpdate
operator|<
name|keepAliveTime
return|;
block|}
block|}
end_class

begin_comment
comment|// ----------------------------------------------------------------------------
end_comment

begin_comment
comment|// TODO-MAYBE: Should we provide a InlineChore to notify the store with the
end_comment

begin_comment
comment|// full set of procedures pending and completed to write a compacted
end_comment

begin_comment
comment|// version of the log (in case is a log)?
end_comment

begin_comment
comment|// In theory no, procedures are have a short life, so at some point the store
end_comment

begin_comment
comment|// will have the tracker saying everything is in the last log.
end_comment

begin_comment
comment|// ----------------------------------------------------------------------------
end_comment

begin_class
specifier|private
specifier|final
class|class
name|WorkerMonitor
extends|extends
name|InlineChore
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_MONITOR_INTERVAL_CONF_KEY
init|=
literal|"hbase.procedure.worker.monitor.interval.msec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WORKER_MONITOR_INTERVAL
init|=
literal|5000
decl_stmt|;
comment|// 5sec
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_STUCK_THRESHOLD_CONF_KEY
init|=
literal|"hbase.procedure.worker.stuck.threshold.msec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WORKER_STUCK_THRESHOLD
init|=
literal|10000
decl_stmt|;
comment|// 10sec
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_ADD_STUCK_PERCENTAGE_CONF_KEY
init|=
literal|"hbase.procedure.worker.add.stuck.percentage"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_WORKER_ADD_STUCK_PERCENTAGE
init|=
literal|0.5f
decl_stmt|;
comment|// 50% stuck
specifier|private
name|float
name|addWorkerStuckPercentage
init|=
name|DEFAULT_WORKER_ADD_STUCK_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|timeoutInterval
init|=
name|DEFAULT_WORKER_MONITOR_INTERVAL
decl_stmt|;
specifier|private
name|int
name|stuckThreshold
init|=
name|DEFAULT_WORKER_STUCK_THRESHOLD
decl_stmt|;
specifier|public
name|WorkerMonitor
parameter_list|()
block|{
name|refreshConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|int
name|stuckCount
init|=
name|checkForStuckWorkers
argument_list|()
decl_stmt|;
name|checkThreadCount
argument_list|(
name|stuckCount
argument_list|)
expr_stmt|;
comment|// refresh interval (poor man dynamic conf update)
name|refreshConfig
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|checkForStuckWorkers
parameter_list|()
block|{
comment|// check if any of the worker is stuck
name|int
name|stuckCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WorkerThread
name|worker
range|:
name|workerThreads
control|)
block|{
if|if
condition|(
name|worker
operator|.
name|getCurrentRunTime
argument_list|()
operator|<
name|stuckThreshold
condition|)
block|{
continue|continue;
block|}
comment|// WARN the worker is stuck
name|stuckCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Worker stuck {}, run time {}"
argument_list|,
name|worker
argument_list|,
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|worker
operator|.
name|getCurrentRunTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|stuckCount
return|;
block|}
specifier|private
name|void
name|checkThreadCount
parameter_list|(
specifier|final
name|int
name|stuckCount
parameter_list|)
block|{
comment|// nothing to do if there are no runnable tasks
if|if
condition|(
name|stuckCount
operator|<
literal|1
operator|||
operator|!
name|scheduler
operator|.
name|hasRunnables
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// add a new thread if the worker stuck percentage exceed the threshold limit
comment|// and every handler is active.
specifier|final
name|float
name|stuckPerc
init|=
operator|(
operator|(
name|float
operator|)
name|stuckCount
operator|)
operator|/
name|workerThreads
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// let's add new worker thread more aggressively, as they will timeout finally if there is no
comment|// work to do.
if|if
condition|(
name|stuckPerc
operator|>=
name|addWorkerStuckPercentage
operator|&&
name|workerThreads
operator|.
name|size
argument_list|()
operator|<
name|maxPoolSize
condition|)
block|{
specifier|final
name|KeepAliveWorkerThread
name|worker
init|=
operator|new
name|KeepAliveWorkerThread
argument_list|(
name|threadGroup
argument_list|)
decl_stmt|;
name|workerThreads
operator|.
name|add
argument_list|(
name|worker
argument_list|)
expr_stmt|;
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added new worker thread {}"
argument_list|,
name|worker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|refreshConfig
parameter_list|()
block|{
name|addWorkerStuckPercentage
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|WORKER_ADD_STUCK_PERCENTAGE_CONF_KEY
argument_list|,
name|DEFAULT_WORKER_ADD_STUCK_PERCENTAGE
argument_list|)
expr_stmt|;
name|timeoutInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|WORKER_MONITOR_INTERVAL_CONF_KEY
argument_list|,
name|DEFAULT_WORKER_MONITOR_INTERVAL
argument_list|)
expr_stmt|;
name|stuckThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|WORKER_STUCK_THRESHOLD_CONF_KEY
argument_list|,
name|DEFAULT_WORKER_STUCK_THRESHOLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTimeoutInterval
parameter_list|()
block|{
return|return
name|timeoutInterval
return|;
block|}
block|}
end_class

unit|}
end_unit

