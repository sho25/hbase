begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|IllegalArgumentIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
operator|.
name|ProcedureIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|DelayedUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|DelayedUtil
operator|.
name|DelayedWithTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
operator|.
name|ProcedureState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * Thread Pool that executes the submitted procedures.  * The executor has a ProcedureStore associated.  * Each operation is logged and on restart the pending procedures are resumed.  *  * Unless the Procedure code throws an error (e.g. invalid user input)  * the procedure will complete (at some point in time), On restart the pending  * procedures are resumed and the once failed will be rolledback.  *  * The user can add procedures to the executor via submitProcedure(proc)  * check for the finished state via isFinished(procId)  * and get the result via getResult(procId)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ProcedureExecutor
parameter_list|<
name|TEnvironment
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcedureExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHECK_OWNER_SET_CONF_KEY
init|=
literal|"hbase.procedure.check.owner.set"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_CHECK_OWNER_SET
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_KEEP_ALIVE_TIME_CONF_KEY
init|=
literal|"hbase.procedure.worker.keep.alive.time.msec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_WORKER_KEEP_ALIVE_TIME
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|Testing
name|testing
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
class|class
name|Testing
block|{
specifier|protected
name|boolean
name|killIfSuspended
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|killBeforeStoreUpdate
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|toggleKillBeforeStoreUpdate
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|shouldKillBeforeStoreUpdate
parameter_list|()
block|{
specifier|final
name|boolean
name|kill
init|=
name|this
operator|.
name|killBeforeStoreUpdate
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|toggleKillBeforeStoreUpdate
condition|)
block|{
name|this
operator|.
name|killBeforeStoreUpdate
operator|=
operator|!
name|kill
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Toggle Kill before store update to: "
operator|+
name|this
operator|.
name|killBeforeStoreUpdate
argument_list|)
expr_stmt|;
block|}
return|return
name|kill
return|;
block|}
specifier|protected
name|boolean
name|shouldKillBeforeStoreUpdate
parameter_list|(
specifier|final
name|boolean
name|isSuspended
parameter_list|)
block|{
return|return
operator|(
name|isSuspended
operator|&&
operator|!
name|killIfSuspended
operator|)
condition|?
literal|false
else|:
name|shouldKillBeforeStoreUpdate
argument_list|()
return|;
block|}
block|}
specifier|public
interface|interface
name|ProcedureExecutorListener
block|{
name|void
name|procedureLoaded
parameter_list|(
name|long
name|procId
parameter_list|)
function_decl|;
name|void
name|procedureAdded
parameter_list|(
name|long
name|procId
parameter_list|)
function_decl|;
name|void
name|procedureFinished
parameter_list|(
name|long
name|procId
parameter_list|)
function_decl|;
block|}
comment|/**    * Internal cleaner that removes the completed procedure results after a TTL.    * NOTE: This is a special case handled in timeoutLoop().    *    * Since the client code looks more or less like:    *   procId = master.doOperation()    *   while (master.getProcResult(procId) == ProcInProgress);    * The master should not throw away the proc result as soon as the procedure is done    * but should wait a result request from the client (see executor.removeResult(procId))    * The client will call something like master.isProcDone() or master.getProcResult()    * which will return the result/state to the client, and it will mark the completed    * proc as ready to delete. note that the client may not receive the response from    * the master (e.g. master failover) so, if we delay a bit the real deletion of    * the proc result the client will be able to get the result the next try.    */
specifier|private
specifier|static
class|class
name|CompletedProcedureCleaner
parameter_list|<
name|TEnvironment
parameter_list|>
extends|extends
name|ProcedureInMemoryChore
argument_list|<
name|TEnvironment
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompletedProcedureCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLEANER_INTERVAL_CONF_KEY
init|=
literal|"hbase.procedure.cleaner.interval"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CLEANER_INTERVAL
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
comment|// 30sec
specifier|private
specifier|static
specifier|final
name|String
name|EVICT_TTL_CONF_KEY
init|=
literal|"hbase.procedure.cleaner.evict.ttl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_EVICT_TTL
init|=
literal|15
operator|*
literal|60000
decl_stmt|;
comment|// 15min
specifier|private
specifier|static
specifier|final
name|String
name|EVICT_ACKED_TTL_CONF_KEY
init|=
literal|"hbase.procedure.cleaner.acked.evict.ttl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ACKED_EVICT_TTL
init|=
literal|5
operator|*
literal|60000
decl_stmt|;
comment|// 5min
specifier|private
specifier|static
specifier|final
name|String
name|BATCH_SIZE_CONF_KEY
init|=
literal|"hbase.procedure.cleaner.evict.batch.size"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BATCH_SIZE
init|=
literal|32
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ProcedureInfo
argument_list|>
name|completed
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|NonceKey
argument_list|,
name|Long
argument_list|>
name|nonceKeysToProcIdsMap
decl_stmt|;
specifier|private
specifier|final
name|ProcedureStore
name|store
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|CompletedProcedureCleaner
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ProcedureStore
name|store
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ProcedureInfo
argument_list|>
name|completedMap
parameter_list|,
specifier|final
name|Map
argument_list|<
name|NonceKey
argument_list|,
name|Long
argument_list|>
name|nonceKeysToProcIdsMap
parameter_list|)
block|{
comment|// set the timeout interval that triggers the periodic-procedure
name|super
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|CLEANER_INTERVAL_CONF_KEY
argument_list|,
name|DEFAULT_CLEANER_INTERVAL
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|completed
operator|=
name|completedMap
expr_stmt|;
name|this
operator|.
name|nonceKeysToProcIdsMap
operator|=
name|nonceKeysToProcIdsMap
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|periodicExecute
parameter_list|(
specifier|final
name|TEnvironment
name|env
parameter_list|)
block|{
if|if
condition|(
name|completed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No completed procedures to cleanup."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|final
name|long
name|evictTtl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|EVICT_TTL_CONF_KEY
argument_list|,
name|DEFAULT_EVICT_TTL
argument_list|)
decl_stmt|;
specifier|final
name|long
name|evictAckTtl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|EVICT_ACKED_TTL_CONF_KEY
argument_list|,
name|DEFAULT_ACKED_EVICT_TTL
argument_list|)
decl_stmt|;
specifier|final
name|int
name|batchSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|BATCH_SIZE_CONF_KEY
argument_list|,
name|DEFAULT_BATCH_SIZE
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|batchIds
init|=
operator|new
name|long
index|[
name|batchSize
index|]
decl_stmt|;
name|int
name|batchCount
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ProcedureInfo
argument_list|>
argument_list|>
name|it
init|=
name|completed
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isDebugEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|store
operator|.
name|isRunning
argument_list|()
condition|)
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ProcedureInfo
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ProcedureInfo
name|procInfo
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// TODO: Select TTL based on Procedure type
if|if
condition|(
operator|(
name|procInfo
operator|.
name|hasClientAckTime
argument_list|()
operator|&&
operator|(
name|now
operator|-
name|procInfo
operator|.
name|getClientAckTime
argument_list|()
operator|)
operator|>=
name|evictAckTtl
operator|)
operator|||
operator|(
name|now
operator|-
name|procInfo
operator|.
name|getLastUpdate
argument_list|()
operator|)
operator|>=
name|evictTtl
condition|)
block|{
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Evict completed procedure: "
operator|+
name|procInfo
argument_list|)
expr_stmt|;
block|}
name|batchIds
index|[
name|batchCount
operator|++
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|batchCount
operator|==
name|batchIds
operator|.
name|length
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|batchIds
argument_list|,
literal|0
argument_list|,
name|batchCount
argument_list|)
expr_stmt|;
name|batchCount
operator|=
literal|0
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
specifier|final
name|NonceKey
name|nonceKey
init|=
name|procInfo
operator|.
name|getNonceKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|nonceKey
operator|!=
literal|null
condition|)
block|{
name|nonceKeysToProcIdsMap
operator|.
name|remove
argument_list|(
name|nonceKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|batchCount
operator|>
literal|0
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|batchIds
argument_list|,
literal|0
argument_list|,
name|batchCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Map the the procId returned by submitProcedure(), the Root-ProcID, to the ProcedureInfo.    * Once a Root-Procedure completes (success or failure), the result will be added to this map.    * The user of ProcedureExecutor should call getResult(procId) to get the result.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|ProcedureInfo
argument_list|>
name|completed
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|ProcedureInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Map the the procId returned by submitProcedure(), the Root-ProcID, to the RootProcedureState.    * The RootProcedureState contains the execution stack of the Root-Procedure,    * It is added to the map by submitProcedure() and removed on procedure completion.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|RootProcedureState
argument_list|>
name|rollbackStack
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|RootProcedureState
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Helper map to lookup the live procedures by ID.    * This map contains every procedure. root-procedures and subprocedures.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|Procedure
argument_list|>
name|procedures
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|Procedure
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Helper map to lookup whether the procedure already issued from the same client.    * This map contains every root procedure.    */
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|NonceKey
argument_list|,
name|Long
argument_list|>
name|nonceKeysToProcIdsMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NonceKey
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|ProcedureExecutorListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ProcedureExecutorListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|ThreadGroup
name|threadGroup
decl_stmt|;
specifier|private
name|CopyOnWriteArrayList
argument_list|<
name|WorkerThread
argument_list|>
name|workerThreads
decl_stmt|;
specifier|private
name|TimeoutExecutorThread
name|timeoutExecutor
decl_stmt|;
specifier|private
name|int
name|corePoolSize
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|keepAliveTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Scheduler/Queue that contains runnable procedures.    */
specifier|private
specifier|final
name|ProcedureScheduler
name|scheduler
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|lastProcId
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|workerId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|activeExecutorCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TEnvironment
name|environment
decl_stmt|;
specifier|private
specifier|final
name|ProcedureStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|checkOwnerSet
decl_stmt|;
specifier|public
name|ProcedureExecutor
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TEnvironment
name|environment
parameter_list|,
specifier|final
name|ProcedureStore
name|store
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|environment
argument_list|,
name|store
argument_list|,
operator|new
name|SimpleProcedureScheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureExecutor
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TEnvironment
name|environment
parameter_list|,
specifier|final
name|ProcedureStore
name|store
parameter_list|,
specifier|final
name|ProcedureScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|checkOwnerSet
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CHECK_OWNER_SET_CONF_KEY
argument_list|,
name|DEFAULT_CHECK_OWNER_SET
argument_list|)
expr_stmt|;
name|refreshConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|load
parameter_list|(
specifier|final
name|boolean
name|abortOnCorruption
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|completed
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"completed not empty"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|rollbackStack
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"rollback state not empty"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|procedures
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"procedure map not empty"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|scheduler
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|,
literal|"run queue not empty"
argument_list|)
expr_stmt|;
name|store
operator|.
name|load
argument_list|(
operator|new
name|ProcedureStore
operator|.
name|ProcedureLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setMaxProcId
parameter_list|(
name|long
name|maxProcId
parameter_list|)
block|{
assert|assert
name|lastProcId
operator|.
name|get
argument_list|()
operator|<
literal|0
operator|:
literal|"expected only one call to setMaxProcId()"
assert|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"load procedures maxProcId="
operator|+
name|maxProcId
argument_list|)
expr_stmt|;
name|lastProcId
operator|.
name|set
argument_list|(
name|maxProcId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|loadProcedures
argument_list|(
name|procIter
argument_list|,
name|abortOnCorruption
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleCorrupted
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|corruptedCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcedureInfo
name|proc
init|=
name|procIter
operator|.
name|nextAsProcedureInfo
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"corrupted procedure: "
operator|+
name|proc
argument_list|)
expr_stmt|;
name|corruptedCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|abortOnCorruption
operator|&&
name|corruptedCount
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"found "
operator|+
name|corruptedCount
operator|+
literal|" corrupted procedure(s) on replay"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadProcedures
parameter_list|(
specifier|final
name|ProcedureIterator
name|procIter
parameter_list|,
specifier|final
name|boolean
name|abortOnCorruption
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|isDebugEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
comment|// 1. Build the rollback stack
name|int
name|runnablesCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|NonceKey
name|nonceKey
decl_stmt|;
specifier|final
name|long
name|procId
decl_stmt|;
if|if
condition|(
name|procIter
operator|.
name|isNextCompleted
argument_list|()
condition|)
block|{
name|ProcedureInfo
name|proc
init|=
name|procIter
operator|.
name|nextAsProcedureInfo
argument_list|()
decl_stmt|;
name|nonceKey
operator|=
name|proc
operator|.
name|getNonceKey
argument_list|()
expr_stmt|;
name|procId
operator|=
name|proc
operator|.
name|getProcId
argument_list|()
expr_stmt|;
name|completed
operator|.
name|put
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The procedure is completed: "
operator|+
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Procedure
name|proc
init|=
name|procIter
operator|.
name|nextAsProcedure
argument_list|()
decl_stmt|;
name|nonceKey
operator|=
name|proc
operator|.
name|getNonceKey
argument_list|()
expr_stmt|;
name|procId
operator|=
name|proc
operator|.
name|getProcId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
condition|)
block|{
assert|assert
operator|!
name|proc
operator|.
name|isFinished
argument_list|()
operator|:
literal|"unexpected finished procedure"
assert|;
name|rollbackStack
operator|.
name|put
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|RootProcedureState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add the procedure to the map
name|proc
operator|.
name|beforeReplay
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|put
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|RUNNABLE
condition|)
block|{
name|runnablesCount
operator|++
expr_stmt|;
block|}
block|}
comment|// add the nonce to the map
if|if
condition|(
name|nonceKey
operator|!=
literal|null
condition|)
block|{
name|nonceKeysToProcIdsMap
operator|.
name|put
argument_list|(
name|nonceKey
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 2. Initialize the stacks
specifier|final
name|ArrayList
argument_list|<
name|Procedure
argument_list|>
name|runnableList
init|=
operator|new
name|ArrayList
argument_list|(
name|runnablesCount
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Procedure
argument_list|>
name|waitingSet
init|=
literal|null
decl_stmt|;
name|procIter
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|procIter
operator|.
name|isNextCompleted
argument_list|()
condition|)
block|{
name|procIter
operator|.
name|skipNext
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|Procedure
name|proc
init|=
name|procIter
operator|.
name|nextAsProcedure
argument_list|()
decl_stmt|;
assert|assert
operator|!
operator|(
name|proc
operator|.
name|isFinished
argument_list|()
operator|&&
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
operator|)
operator|:
literal|"unexpected completed proc="
operator|+
name|proc
assert|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Loading procedure state=%s isFailed=%s: %s"
argument_list|,
name|proc
operator|.
name|getState
argument_list|()
argument_list|,
name|proc
operator|.
name|hasException
argument_list|()
argument_list|,
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Long
name|rootProcId
init|=
name|getRootProcedureId
argument_list|(
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootProcId
operator|==
literal|null
condition|)
block|{
comment|// The 'proc' was ready to run but the root procedure was rolledback?
name|scheduler
operator|.
name|addBack
argument_list|(
name|proc
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|proc
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|Procedure
name|parent
init|=
name|procedures
operator|.
name|get
argument_list|(
name|proc
operator|.
name|getParentProcId
argument_list|()
argument_list|)
decl_stmt|;
comment|// corrupted procedures are handled later at step 3
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|proc
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|parent
operator|.
name|incChildrenLatch
argument_list|()
expr_stmt|;
block|}
block|}
name|RootProcedureState
name|procStack
init|=
name|rollbackStack
operator|.
name|get
argument_list|(
name|rootProcId
argument_list|)
decl_stmt|;
name|procStack
operator|.
name|loadStack
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setRootProcId
argument_list|(
name|rootProcId
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|proc
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RUNNABLE
case|:
name|runnableList
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAITING
case|:
if|if
condition|(
operator|!
name|proc
operator|.
name|hasChildren
argument_list|()
condition|)
block|{
name|runnableList
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|WAITING_TIMEOUT
case|:
if|if
condition|(
name|waitingSet
operator|==
literal|null
condition|)
block|{
name|waitingSet
operator|=
operator|new
name|HashSet
argument_list|<
name|Procedure
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|waitingSet
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
break|break;
case|case
name|FINISHED
case|:
if|if
condition|(
name|proc
operator|.
name|hasException
argument_list|()
condition|)
block|{
comment|// add the proc to the scheduler to perform the rollback
name|scheduler
operator|.
name|addBack
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROLLEDBACK
case|:
case|case
name|INITIALIZING
case|:
name|String
name|msg
init|=
literal|"Unexpected "
operator|+
name|proc
operator|.
name|getState
argument_list|()
operator|+
literal|" state for "
operator|+
name|proc
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|msg
argument_list|)
throw|;
default|default:
break|break;
block|}
block|}
comment|// 3. Validate the stacks
name|int
name|corruptedCount
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|RootProcedureState
argument_list|>
argument_list|>
name|itStack
init|=
name|rollbackStack
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itStack
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|RootProcedureState
argument_list|>
name|entry
init|=
name|itStack
operator|.
name|next
argument_list|()
decl_stmt|;
name|RootProcedureState
name|procStack
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|procStack
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Procedure
name|proc
range|:
name|procStack
operator|.
name|getSubproceduresStack
argument_list|()
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"corrupted procedure: "
operator|+
name|proc
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|remove
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|runnableList
operator|.
name|remove
argument_list|(
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitingSet
operator|!=
literal|null
condition|)
name|waitingSet
operator|.
name|remove
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|corruptedCount
operator|++
expr_stmt|;
block|}
name|itStack
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|abortOnCorruption
operator|&&
name|corruptedCount
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"found "
operator|+
name|corruptedCount
operator|+
literal|" procedures on replay"
argument_list|)
throw|;
block|}
comment|// 4. Push the procedures to the timeout executor
if|if
condition|(
name|waitingSet
operator|!=
literal|null
operator|&&
operator|!
name|waitingSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Procedure
name|proc
range|:
name|waitingSet
control|)
block|{
name|proc
operator|.
name|afterReplay
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|timeoutExecutor
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 5. Push the procedure to the scheduler
if|if
condition|(
operator|!
name|runnableList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: See ProcedureWALFormatReader#hasFastStartSupport
comment|// some procedure may be started way before this stuff.
for|for
control|(
name|int
name|i
init|=
name|runnableList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|Procedure
name|proc
init|=
name|runnableList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|proc
operator|.
name|afterReplay
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|sendProcedureLoadedNotification
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proc
operator|.
name|wasExecuted
argument_list|()
condition|)
block|{
name|scheduler
operator|.
name|addFront
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if it was not in execution, it can wait.
name|scheduler
operator|.
name|addBack
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Start the procedure executor.    * It calls ProcedureStore.recoverLease() and ProcedureStore.load() to    * recover the lease, and ensure a single executor, and start the procedure    * replay to resume and recover the previous pending and in-progress perocedures.    *    * @param numThreads number of threads available for procedure execution.    * @param abortOnCorruption true if you want to abort your service in case    *          a corrupted procedure is found on replay. otherwise false.    */
specifier|public
name|void
name|start
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|boolean
name|abortOnCorruption
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|running
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Already running"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We have numThreads executor + one timer thread used for timing out
comment|// procedures and triggering periodic procedures.
name|this
operator|.
name|corePoolSize
operator|=
name|numThreads
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting procedure executor threads="
operator|+
name|corePoolSize
argument_list|)
expr_stmt|;
comment|// Create the Thread Group for the executors
name|threadGroup
operator|=
operator|new
name|ThreadGroup
argument_list|(
literal|"ProcedureExecutor"
argument_list|)
expr_stmt|;
comment|// Create the timeout executor
name|timeoutExecutor
operator|=
operator|new
name|TimeoutExecutorThread
argument_list|(
name|threadGroup
argument_list|)
expr_stmt|;
comment|// Create the workers
name|workerId
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|workerThreads
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|WorkerThread
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|corePoolSize
condition|;
operator|++
name|i
control|)
block|{
name|workerThreads
operator|.
name|add
argument_list|(
operator|new
name|WorkerThread
argument_list|(
name|threadGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|st
decl_stmt|,
name|et
decl_stmt|;
comment|// Acquire the store lease.
name|st
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|store
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
name|et
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"recover procedure store (%s) lease: %s"
argument_list|,
name|store
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|et
operator|-
name|st
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// start the procedure scheduler
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// TODO: Split in two steps.
comment|// TODO: Handle corrupted procedures (currently just a warn)
comment|// The first one will make sure that we have the latest id,
comment|// so we can start the threads and accept new procedures.
comment|// The second step will do the actual load of old procedures.
name|st
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|load
argument_list|(
name|abortOnCorruption
argument_list|)
expr_stmt|;
name|et
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"load procedure store (%s): %s"
argument_list|,
name|store
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|et
operator|-
name|st
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start the executors. Here we must have the lastProcId set.
name|LOG
operator|.
name|debug
argument_list|(
literal|"start workers "
operator|+
name|workerThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|timeoutExecutor
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|WorkerThread
name|worker
range|:
name|workerThreads
control|)
block|{
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Internal chores
name|timeoutExecutor
operator|.
name|add
argument_list|(
operator|new
name|WorkerMonitor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add completed cleaner chore
name|addChore
argument_list|(
operator|new
name|CompletedProcedureCleaner
argument_list|(
name|conf
argument_list|,
name|store
argument_list|,
name|completed
argument_list|,
name|nonceKeysToProcIdsMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|running
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the procedure executor"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|timeoutExecutor
operator|.
name|sendStopSignal
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|join
parameter_list|()
block|{
assert|assert
operator|!
name|isRunning
argument_list|()
operator|:
literal|"expected not running"
assert|;
comment|// stop the timeout executor
name|timeoutExecutor
operator|.
name|awaitTermination
argument_list|()
expr_stmt|;
name|timeoutExecutor
operator|=
literal|null
expr_stmt|;
comment|// stop the worker threads
for|for
control|(
name|WorkerThread
name|worker
range|:
name|workerThreads
control|)
block|{
name|worker
operator|.
name|awaitTermination
argument_list|()
expr_stmt|;
block|}
name|workerThreads
operator|=
literal|null
expr_stmt|;
comment|// Destroy the Thread Group for the executors
try|try
block|{
name|threadGroup
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalThreadStateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"thread group "
operator|+
name|threadGroup
operator|+
literal|" contains running threads"
argument_list|)
expr_stmt|;
name|threadGroup
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|threadGroup
operator|=
literal|null
expr_stmt|;
block|}
comment|// reset the in-memory state for testing
name|completed
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rollbackStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|procedures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nonceKeysToProcIdsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lastProcId
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|refreshConfiguration
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|setKeepAliveTime
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|WORKER_KEEP_ALIVE_TIME_CONF_KEY
argument_list|,
name|DEFAULT_WORKER_KEEP_ALIVE_TIME
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Accessors
comment|// ==========================================================================
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * @return the current number of worker threads.    */
specifier|public
name|int
name|getWorkerThreadCount
parameter_list|()
block|{
return|return
name|workerThreads
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * @return the core pool size settings.    */
specifier|public
name|int
name|getCorePoolSize
parameter_list|()
block|{
return|return
name|corePoolSize
return|;
block|}
specifier|public
name|int
name|getActiveExecutorCount
parameter_list|()
block|{
return|return
name|activeExecutorCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|TEnvironment
name|getEnvironment
parameter_list|()
block|{
return|return
name|this
operator|.
name|environment
return|;
block|}
specifier|public
name|ProcedureStore
name|getStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|store
return|;
block|}
specifier|protected
name|ProcedureScheduler
name|getScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
specifier|public
name|void
name|setKeepAliveTime
parameter_list|(
specifier|final
name|long
name|keepAliveTime
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
operator|.
name|keepAliveTime
operator|=
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|keepAliveTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getKeepAliveTime
parameter_list|(
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
return|return
name|timeUnit
operator|.
name|convert
argument_list|(
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|// ==========================================================================
comment|//  Submit/Remove Chores
comment|// ==========================================================================
comment|/**    * Add a chore procedure to the executor    * @param chore the chore to add    */
specifier|public
name|void
name|addChore
parameter_list|(
specifier|final
name|ProcedureInMemoryChore
name|chore
parameter_list|)
block|{
name|chore
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|WAITING_TIMEOUT
argument_list|)
expr_stmt|;
name|timeoutExecutor
operator|.
name|add
argument_list|(
name|chore
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a chore procedure from the executor    * @param chore the chore to remove    * @return whether the chore is removed, or it will be removed later    */
specifier|public
name|boolean
name|removeChore
parameter_list|(
specifier|final
name|ProcedureInMemoryChore
name|chore
parameter_list|)
block|{
name|chore
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
return|return
name|timeoutExecutor
operator|.
name|remove
argument_list|(
name|chore
argument_list|)
return|;
block|}
comment|// ==========================================================================
comment|//  Submit/Abort Procedure
comment|// ==========================================================================
comment|/**    * Add a new root-procedure to the executor.    * @param proc the new procedure to execute.    * @return the procedure id, that can be used to monitor the operation    */
specifier|public
name|long
name|submitProcedure
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
return|return
name|submitProcedure
argument_list|(
name|proc
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Add a new root-procedure to the executor.    * @param proc the new procedure to execute.    * @param nonceGroup    * @param nonce    * @return the procedure id, that can be used to monitor the operation    */
specifier|public
name|long
name|submitProcedure
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|,
specifier|final
name|long
name|nonceGroup
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|lastProcId
operator|.
name|get
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|isRunning
argument_list|()
argument_list|,
literal|"executor not running"
argument_list|)
expr_stmt|;
comment|// Prepare procedure
name|prepareProcedure
argument_list|(
name|proc
argument_list|)
expr_stmt|;
comment|// Check whether the proc exists.  If exist, just return the proc id.
comment|// This is to prevent the same proc to submit multiple times (it could happen
comment|// when client could not talk to server and resubmit the same request).
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
specifier|final
name|NonceKey
name|noncekey
init|=
operator|new
name|NonceKey
argument_list|(
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
decl_stmt|;
name|proc
operator|.
name|setNonceKey
argument_list|(
name|noncekey
argument_list|)
expr_stmt|;
name|Long
name|oldProcId
init|=
name|nonceKeysToProcIdsMap
operator|.
name|putIfAbsent
argument_list|(
name|noncekey
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldProcId
operator|!=
literal|null
condition|)
block|{
comment|// Found the proc
return|return
name|oldProcId
operator|.
name|longValue
argument_list|()
return|;
block|}
block|}
comment|// Commit the transaction
name|store
operator|.
name|insert
argument_list|(
name|proc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure "
operator|+
name|proc
operator|+
literal|" added to the store."
argument_list|)
expr_stmt|;
block|}
comment|// Add the procedure to the executor
return|return
name|pushProcedure
argument_list|(
name|proc
argument_list|)
return|;
block|}
comment|/**    * Add a set of new root-procedure to the executor.    * @param procs the new procedures to execute.    */
specifier|public
name|void
name|submitProcedures
parameter_list|(
specifier|final
name|Procedure
index|[]
name|procs
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|lastProcId
operator|.
name|get
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|isRunning
argument_list|()
argument_list|,
literal|"executor not running"
argument_list|)
expr_stmt|;
comment|// Prepare procedure
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|prepareProcedure
argument_list|(
name|procs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Commit the transaction
name|store
operator|.
name|insert
argument_list|(
name|procs
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedures added to the store: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|procs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the procedure to the executor
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|pushProcedure
argument_list|(
name|procs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|prepareProcedure
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|proc
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|INITIALIZING
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|isRunning
argument_list|()
argument_list|,
literal|"executor not running"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
argument_list|,
literal|"unexpected parent"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|checkOwnerSet
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|proc
operator|.
name|hasOwner
argument_list|()
argument_list|,
literal|"missing owner"
argument_list|)
expr_stmt|;
block|}
comment|// Initialize the Procedure ID
specifier|final
name|long
name|currentProcId
init|=
name|nextProcId
argument_list|()
decl_stmt|;
name|proc
operator|.
name|setProcId
argument_list|(
name|currentProcId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|pushProcedure
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
specifier|final
name|long
name|currentProcId
init|=
name|proc
operator|.
name|getProcId
argument_list|()
decl_stmt|;
comment|// Create the rollback stack for the procedure
name|RootProcedureState
name|stack
init|=
operator|new
name|RootProcedureState
argument_list|()
decl_stmt|;
name|rollbackStack
operator|.
name|put
argument_list|(
name|currentProcId
argument_list|,
name|stack
argument_list|)
expr_stmt|;
comment|// Submit the new subprocedures
assert|assert
operator|!
name|procedures
operator|.
name|containsKey
argument_list|(
name|currentProcId
argument_list|)
assert|;
name|procedures
operator|.
name|put
argument_list|(
name|currentProcId
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|sendProcedureAddedNotification
argument_list|(
name|currentProcId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addBack
argument_list|(
name|proc
argument_list|)
expr_stmt|;
return|return
name|currentProcId
return|;
block|}
comment|/**    * Send an abort notification the specified procedure.    * Depending on the procedure implementation the abort can be considered or ignored.    * @param procId the procedure to abort    * @return true if the procedure exist and has received the abort, otherwise false.    */
specifier|public
name|boolean
name|abort
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
name|abort
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Send an abort notification the specified procedure.    * Depending on the procedure implementation the abort can be considered or ignored.    * @param procId the procedure to abort    * @param mayInterruptIfRunning if the proc completed at least one step, should it be aborted?    * @return true if the procedure exist and has received the abort, otherwise false.    */
specifier|public
name|boolean
name|abort
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
specifier|final
name|Procedure
name|proc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|mayInterruptIfRunning
operator|&&
name|proc
operator|.
name|wasExecuted
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|proc
operator|.
name|abort
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// ==========================================================================
comment|//  Executor query helpers
comment|// ==========================================================================
specifier|public
name|Procedure
name|getProcedure
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
return|;
block|}
specifier|public
name|ProcedureInfo
name|getResult
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
return|;
block|}
comment|/**    * Return true if the procedure is finished.    * The state may be "completed successfully" or "failed and rolledback".    * Use getResult() to check the state or get the result data.    * @param procId the ID of the procedure to check    * @return true if the procedure execution is finished, otherwise false.    */
specifier|public
name|boolean
name|isFinished
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
return|return
operator|!
name|procedures
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
return|;
block|}
comment|/**    * Return true if the procedure is started.    * @param procId the ID of the procedure to check    * @return true if the procedure execution is started, otherwise false.    */
specifier|public
name|boolean
name|isStarted
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
specifier|final
name|Procedure
name|proc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
block|{
return|return
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
operator|!=
literal|null
return|;
block|}
return|return
name|proc
operator|.
name|wasExecuted
argument_list|()
return|;
block|}
comment|/**    * Mark the specified completed procedure, as ready to remove.    * @param procId the ID of the procedure to remove    */
specifier|public
name|void
name|removeResult
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
specifier|final
name|ProcedureInfo
name|result
init|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
assert|assert
operator|!
name|procedures
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
operator|:
literal|"procId="
operator|+
name|procId
operator|+
literal|" is still running"
assert|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure procId="
operator|+
name|procId
operator|+
literal|" already removed by the cleaner."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// The CompletedProcedureCleaner will take care of deletion, once the TTL is expired.
name|result
operator|.
name|setClientAckTime
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Pair
argument_list|<
name|ProcedureInfo
argument_list|,
name|Procedure
argument_list|>
name|getResultOrProcedure
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|ProcedureInfo
name|result
init|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|Procedure
name|proc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|proc
operator|=
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Pair
argument_list|(
name|result
argument_list|,
name|proc
argument_list|)
return|;
block|}
comment|/**    * Check if the user is this procedure's owner    * @param procId the target procedure    * @param user the user    * @return true if the user is the owner of the procedure,    *   false otherwise or the owner is unknown.    */
specifier|public
name|boolean
name|isProcedureOwner
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
specifier|final
name|Procedure
name|proc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
condition|)
block|{
return|return
name|proc
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|ProcedureInfo
name|procInfo
init|=
name|completed
operator|.
name|get
argument_list|(
name|procId
argument_list|)
decl_stmt|;
if|if
condition|(
name|procInfo
operator|==
literal|null
condition|)
block|{
comment|// Procedure either does not exist or has already completed and got cleaned up.
comment|// At this time, we cannot check the owner of the procedure
return|return
literal|false
return|;
block|}
return|return
name|ProcedureInfo
operator|.
name|isProcedureOwner
argument_list|(
name|procInfo
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|/**    * List procedures.    * @return the procedures in a list    */
specifier|public
name|List
argument_list|<
name|ProcedureInfo
argument_list|>
name|listProcedures
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|ProcedureInfo
argument_list|>
name|procedureLists
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcedureInfo
argument_list|>
argument_list|(
name|procedures
operator|.
name|size
argument_list|()
operator|+
name|completed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Procedure
argument_list|>
name|p
range|:
name|procedures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|procedureLists
operator|.
name|add
argument_list|(
name|ProcedureUtil
operator|.
name|convertToProcedureInfo
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ProcedureInfo
argument_list|>
name|e
range|:
name|completed
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Note: The procedure could show up twice in the list with different state, as
comment|// it could complete after we walk through procedures list and insert into
comment|// procedureList - it is ok, as we will use the information in the ProcedureInfo
comment|// to figure it out; to prevent this would increase the complexity of the logic.
name|procedureLists
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|procedureLists
return|;
block|}
comment|// ==========================================================================
comment|//  Listeners helpers
comment|// ==========================================================================
specifier|public
name|void
name|registerListener
parameter_list|(
name|ProcedureExecutorListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|unregisterListener
parameter_list|(
name|ProcedureExecutorListener
name|listener
parameter_list|)
block|{
return|return
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
return|;
block|}
specifier|private
name|void
name|sendProcedureLoadedNotification
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ProcedureExecutorListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|procedureLoaded
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The listener "
operator|+
name|listener
operator|+
literal|" had an error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|sendProcedureAddedNotification
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ProcedureExecutorListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|procedureAdded
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The listener "
operator|+
name|listener
operator|+
literal|" had an error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|sendProcedureFinishedNotification
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ProcedureExecutorListener
name|listener
range|:
name|this
operator|.
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|procedureFinished
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The listener "
operator|+
name|listener
operator|+
literal|" had an error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// ==========================================================================
comment|//  Procedure IDs helpers
comment|// ==========================================================================
specifier|private
name|long
name|nextProcId
parameter_list|()
block|{
name|long
name|procId
init|=
name|lastProcId
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|procId
operator|<
literal|0
condition|)
block|{
while|while
condition|(
operator|!
name|lastProcId
operator|.
name|compareAndSet
argument_list|(
name|procId
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|procId
operator|=
name|lastProcId
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|procId
operator|>=
literal|0
condition|)
break|break;
block|}
while|while
condition|(
name|procedures
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
condition|)
block|{
name|procId
operator|=
name|lastProcId
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
name|procId
operator|>=
literal|0
operator|:
literal|"Invalid procId "
operator|+
name|procId
assert|;
return|return
name|procId
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|long
name|getLastProcId
parameter_list|()
block|{
return|return
name|lastProcId
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|Long
name|getRootProcedureId
parameter_list|(
name|Procedure
name|proc
parameter_list|)
block|{
return|return
name|Procedure
operator|.
name|getRootProcedureId
argument_list|(
name|procedures
argument_list|,
name|proc
argument_list|)
return|;
block|}
comment|// ==========================================================================
comment|//  Executions
comment|// ==========================================================================
specifier|private
name|void
name|executeProcedure
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
specifier|final
name|Long
name|rootProcId
init|=
name|getRootProcedureId
argument_list|(
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootProcId
operator|==
literal|null
condition|)
block|{
comment|// The 'proc' was ready to run but the root procedure was rolledback
name|executeRollback
argument_list|(
name|proc
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|RootProcedureState
name|procStack
init|=
name|rollbackStack
operator|.
name|get
argument_list|(
name|rootProcId
argument_list|)
decl_stmt|;
if|if
condition|(
name|procStack
operator|==
literal|null
condition|)
return|return;
do|do
block|{
comment|// Try to acquire the execution
if|if
condition|(
operator|!
name|procStack
operator|.
name|acquire
argument_list|(
name|proc
argument_list|)
condition|)
block|{
if|if
condition|(
name|procStack
operator|.
name|setRollback
argument_list|()
condition|)
block|{
comment|// we have the 'rollback-lock' we can start rollingback
if|if
condition|(
operator|!
name|executeRollback
argument_list|(
name|rootProcId
argument_list|,
name|procStack
argument_list|)
condition|)
block|{
name|procStack
operator|.
name|unsetRollback
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if we can't rollback means that some child is still running.
comment|// the rollback will be executed after all the children are done.
comment|// If the procedure was never executed, remove and mark it as rolledback.
if|if
condition|(
operator|!
name|proc
operator|.
name|wasExecuted
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|executeRollback
argument_list|(
name|proc
argument_list|)
condition|)
block|{
name|scheduler
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
comment|// Execute the procedure
assert|assert
name|proc
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|RUNNABLE
operator|:
name|proc
assert|;
if|if
condition|(
name|acquireLock
argument_list|(
name|proc
argument_list|)
condition|)
block|{
name|execProcedure
argument_list|(
name|procStack
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|releaseLock
argument_list|(
name|proc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scheduler
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
name|procStack
operator|.
name|release
argument_list|(
name|proc
argument_list|)
expr_stmt|;
comment|// allows to kill the executor before something is stored to the wal.
comment|// useful to test the procedure recovery.
if|if
condition|(
name|testing
operator|!=
literal|null
operator|&&
operator|!
name|isRunning
argument_list|()
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|proc
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Procedure completed in "
operator|+
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|proc
operator|.
name|elapsedTime
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|proc
argument_list|)
expr_stmt|;
block|}
comment|// Finalize the procedure state
if|if
condition|(
name|proc
operator|.
name|getProcId
argument_list|()
operator|==
name|rootProcId
condition|)
block|{
name|procedureFinished
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execCompletionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
do|while
condition|(
name|procStack
operator|.
name|isFailed
argument_list|()
condition|)
do|;
block|}
specifier|private
name|boolean
name|acquireLock
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
specifier|final
name|TEnvironment
name|env
init|=
name|getEnvironment
argument_list|()
decl_stmt|;
comment|// hasLock() is used in conjunction with holdLock().
comment|// This allows us to not rewrite or carry around the hasLock() flag
comment|// for every procedure. the hasLock() have meaning only if holdLock() is true.
if|if
condition|(
name|proc
operator|.
name|holdLock
argument_list|(
name|env
argument_list|)
operator|&&
name|proc
operator|.
name|hasLock
argument_list|(
name|env
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|proc
operator|.
name|doAcquireLock
argument_list|(
name|env
argument_list|)
return|;
block|}
specifier|private
name|void
name|releaseLock
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
block|{
specifier|final
name|TEnvironment
name|env
init|=
name|getEnvironment
argument_list|()
decl_stmt|;
comment|// for how the framework works, we know that we will always have the lock
comment|// when we call releaseLock(), so we can avoid calling proc.hasLock()
if|if
condition|(
name|force
operator|||
operator|!
name|proc
operator|.
name|holdLock
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|proc
operator|.
name|doReleaseLock
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute the rollback of the full procedure stack.    * Once the procedure is rolledback, the root-procedure will be visible as    * finished to user, and the result will be the fatal exception.    */
specifier|private
name|boolean
name|executeRollback
parameter_list|(
specifier|final
name|long
name|rootProcId
parameter_list|,
specifier|final
name|RootProcedureState
name|procStack
parameter_list|)
block|{
specifier|final
name|Procedure
name|rootProc
init|=
name|procedures
operator|.
name|get
argument_list|(
name|rootProcId
argument_list|)
decl_stmt|;
name|RemoteProcedureException
name|exception
init|=
name|rootProc
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|procStack
operator|.
name|getException
argument_list|()
expr_stmt|;
name|rootProc
operator|.
name|setFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|rootProc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Procedure
argument_list|>
name|subprocStack
init|=
name|procStack
operator|.
name|getSubproceduresStack
argument_list|()
decl_stmt|;
assert|assert
name|subprocStack
operator|!=
literal|null
operator|:
literal|"Called rollback with no steps executed rootProc="
operator|+
name|rootProc
assert|;
name|int
name|stackTail
init|=
name|subprocStack
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|reuseLock
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|stackTail
operator|--
operator|>
literal|0
condition|)
block|{
specifier|final
name|Procedure
name|proc
init|=
name|subprocStack
operator|.
name|get
argument_list|(
name|stackTail
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reuseLock
operator|&&
operator|!
name|acquireLock
argument_list|(
name|proc
argument_list|)
condition|)
block|{
comment|// can't take a lock on the procedure, add the root-proc back on the
comment|// queue waiting for the lock availability
return|return
literal|false
return|;
block|}
name|boolean
name|abortRollback
init|=
operator|!
name|executeRollback
argument_list|(
name|proc
argument_list|)
decl_stmt|;
name|abortRollback
operator||=
operator|!
name|isRunning
argument_list|()
operator|||
operator|!
name|store
operator|.
name|isRunning
argument_list|()
expr_stmt|;
comment|// If the next procedure is the same to this one
comment|// (e.g. StateMachineProcedure reuse the same instance)
comment|// we can avoid to lock/unlock each step
name|reuseLock
operator|=
name|stackTail
operator|>
literal|0
operator|&&
operator|(
name|subprocStack
operator|.
name|get
argument_list|(
name|stackTail
operator|-
literal|1
argument_list|)
operator|==
name|proc
operator|)
operator|&&
operator|!
name|abortRollback
expr_stmt|;
if|if
condition|(
operator|!
name|reuseLock
condition|)
block|{
name|releaseLock
argument_list|(
name|proc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// allows to kill the executor before something is stored to the wal.
comment|// useful to test the procedure recovery.
if|if
condition|(
name|abortRollback
condition|)
block|{
return|return
literal|false
return|;
block|}
name|subprocStack
operator|.
name|remove
argument_list|(
name|stackTail
argument_list|)
expr_stmt|;
comment|// if the procedure is kind enough to pass the slot to someone else, yield
if|if
condition|(
name|proc
operator|.
name|isYieldAfterExecutionStep
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|proc
operator|!=
name|rootProc
condition|)
block|{
name|execCompletionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Finalize the procedure state
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolledback procedure "
operator|+
name|rootProc
operator|+
literal|" exec-time="
operator|+
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|rootProc
operator|.
name|elapsedTime
argument_list|()
argument_list|)
operator|+
literal|" exception="
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|procedureFinished
argument_list|(
name|rootProc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Execute the rollback of the procedure step.    * It updates the store with the new state (stack index)    * or will remove completly the procedure in case it is a child.    */
specifier|private
name|boolean
name|executeRollback
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
try|try
block|{
name|proc
operator|.
name|doRollback
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rollback attempt failed for "
operator|+
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|handleInterruptedException
argument_list|(
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch NullPointerExceptions or similar errors...
name|LOG
operator|.
name|fatal
argument_list|(
literal|"CODE-BUG: Uncatched runtime exception for procedure: "
operator|+
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// allows to kill the executor before something is stored to the wal.
comment|// useful to test the procedure recovery.
if|if
condition|(
name|testing
operator|!=
literal|null
operator|&&
name|testing
operator|.
name|shouldKillBeforeStoreUpdate
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"TESTING: Kill before store update"
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|proc
operator|.
name|removeStackIndex
argument_list|()
condition|)
block|{
name|proc
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|ROLLEDBACK
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|remove
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|long
index|[]
name|childProcIds
init|=
name|rollbackStack
operator|.
name|get
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
operator|.
name|getSubprocedureIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|childProcIds
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|proc
argument_list|,
name|childProcIds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|store
operator|.
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Executes the specified procedure    *  - calls the doExecute() of the procedure    *  - if the procedure execution didn't fail (e.g. invalid user input)    *     - ...and returned subprocedures    *        - the subprocedures are initialized.    *        - the subprocedures are added to the store    *        - the subprocedures are added to the runnable queue    *        - the procedure is now in a WAITING state, waiting for the subprocedures to complete    *     - ...if there are no subprocedure    *        - the procedure completed successfully    *        - if there is a parent (WAITING)    *            - the parent state will be set to RUNNABLE    *  - in case of failure    *    - the store is updated with the new state    *    - the executor (caller of this method) will start the rollback of the procedure    */
specifier|private
name|void
name|execProcedure
parameter_list|(
specifier|final
name|RootProcedureState
name|procStack
parameter_list|,
specifier|final
name|Procedure
name|procedure
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|procedure
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|RUNNABLE
argument_list|)
expr_stmt|;
comment|// Execute the procedure
name|boolean
name|isSuspended
init|=
literal|false
decl_stmt|;
name|boolean
name|reExecute
init|=
literal|false
decl_stmt|;
name|Procedure
index|[]
name|subprocs
init|=
literal|null
decl_stmt|;
do|do
block|{
name|reExecute
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|subprocs
operator|=
name|procedure
operator|.
name|doExecute
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subprocs
operator|!=
literal|null
operator|&&
name|subprocs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|subprocs
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ProcedureSuspendedException
name|e
parameter_list|)
block|{
name|isSuspended
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProcedureYieldException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Yield procedure: "
operator|+
name|procedure
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scheduler
operator|.
name|yield
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|handleInterruptedException
argument_list|(
name|procedure
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|yield
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch NullPointerExceptions or similar errors...
name|String
name|msg
init|=
literal|"CODE-BUG: Uncatched runtime exception for procedure: "
operator|+
name|procedure
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|setFailure
argument_list|(
operator|new
name|RemoteProcedureException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|procedure
operator|.
name|isFailed
argument_list|()
condition|)
block|{
if|if
condition|(
name|subprocs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subprocs
operator|.
name|length
operator|==
literal|1
operator|&&
name|subprocs
index|[
literal|0
index|]
operator|==
name|procedure
condition|)
block|{
comment|// quick-shortcut for a state machine like procedure
name|subprocs
operator|=
literal|null
expr_stmt|;
name|reExecute
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// yield the current procedure, and make the subprocedure runnable
name|subprocs
operator|=
name|initializeChildren
argument_list|(
name|procStack
argument_list|,
name|procedure
argument_list|,
name|subprocs
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|procedure
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|WAITING_TIMEOUT
condition|)
block|{
name|timeoutExecutor
operator|.
name|add
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isSuspended
condition|)
block|{
comment|// No subtask, so we are done
name|procedure
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the procedure to the stack
name|procStack
operator|.
name|addRollbackStep
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
comment|// allows to kill the executor before something is stored to the wal.
comment|// useful to test the procedure recovery.
if|if
condition|(
name|testing
operator|!=
literal|null
operator|&&
name|testing
operator|.
name|shouldKillBeforeStoreUpdate
argument_list|(
name|isSuspended
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"TESTING: Kill before store update: "
operator|+
name|procedure
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Commit the transaction
name|updateStoreOnExec
argument_list|(
name|procStack
argument_list|,
name|procedure
argument_list|,
name|subprocs
argument_list|)
expr_stmt|;
comment|// if the store is not running we are aborting
if|if
condition|(
operator|!
name|store
operator|.
name|isRunning
argument_list|()
condition|)
return|return;
comment|// if the procedure is kind enough to pass the slot to someone else, yield
if|if
condition|(
name|procedure
operator|.
name|isRunnable
argument_list|()
operator|&&
operator|!
name|isSuspended
operator|&&
name|procedure
operator|.
name|isYieldAfterExecutionStep
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
condition|)
block|{
name|scheduler
operator|.
name|yield
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
return|return;
block|}
assert|assert
operator|(
name|reExecute
operator|&&
name|subprocs
operator|==
literal|null
operator|)
operator|||
operator|!
name|reExecute
assert|;
block|}
do|while
condition|(
name|reExecute
condition|)
do|;
comment|// Submit the new subprocedures
if|if
condition|(
name|subprocs
operator|!=
literal|null
operator|&&
operator|!
name|procedure
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|submitChildrenProcedures
argument_list|(
name|subprocs
argument_list|)
expr_stmt|;
block|}
comment|// if the procedure is complete and has a parent, count down the children latch
if|if
condition|(
name|procedure
operator|.
name|isFinished
argument_list|()
operator|&&
name|procedure
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|countDownChildren
argument_list|(
name|procStack
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Procedure
index|[]
name|initializeChildren
parameter_list|(
specifier|final
name|RootProcedureState
name|procStack
parameter_list|,
specifier|final
name|Procedure
name|procedure
parameter_list|,
specifier|final
name|Procedure
index|[]
name|subprocs
parameter_list|)
block|{
assert|assert
name|subprocs
operator|!=
literal|null
operator|:
literal|"expected subprocedures"
assert|;
specifier|final
name|long
name|rootProcId
init|=
name|getRootProcedureId
argument_list|(
name|procedure
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subprocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Procedure
name|subproc
init|=
name|subprocs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|subproc
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"subproc["
operator|+
name|i
operator|+
literal|"] is null, aborting the procedure"
decl_stmt|;
name|procedure
operator|.
name|setFailure
argument_list|(
operator|new
name|RemoteProcedureException
argument_list|(
name|msg
argument_list|,
operator|new
name|IllegalArgumentIOException
argument_list|(
name|msg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
assert|assert
name|subproc
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|INITIALIZING
operator|:
name|subproc
assert|;
name|subproc
operator|.
name|setParentProcId
argument_list|(
name|procedure
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|subproc
operator|.
name|setRootProcId
argument_list|(
name|rootProcId
argument_list|)
expr_stmt|;
name|subproc
operator|.
name|setProcId
argument_list|(
name|nextProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStack
operator|.
name|addSubProcedure
argument_list|(
name|subproc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|procedure
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|procedure
operator|.
name|setChildrenLatch
argument_list|(
name|subprocs
operator|.
name|length
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|procedure
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RUNNABLE
case|:
name|procedure
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAITING_TIMEOUT
case|:
name|timeoutExecutor
operator|.
name|add
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|subprocs
return|;
block|}
specifier|private
name|void
name|submitChildrenProcedures
parameter_list|(
specifier|final
name|Procedure
index|[]
name|subprocs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subprocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Procedure
name|subproc
init|=
name|subprocs
index|[
name|i
index|]
decl_stmt|;
assert|assert
operator|!
name|procedures
operator|.
name|containsKey
argument_list|(
name|subproc
operator|.
name|getProcId
argument_list|()
argument_list|)
assert|;
name|procedures
operator|.
name|put
argument_list|(
name|subproc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|subproc
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addFront
argument_list|(
name|subproc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|countDownChildren
parameter_list|(
specifier|final
name|RootProcedureState
name|procStack
parameter_list|,
specifier|final
name|Procedure
name|procedure
parameter_list|)
block|{
specifier|final
name|Procedure
name|parent
init|=
name|procedures
operator|.
name|get
argument_list|(
name|procedure
operator|.
name|getParentProcId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
assert|assert
name|procStack
operator|.
name|isRollingback
argument_list|()
assert|;
return|return;
block|}
comment|// If this procedure is the last child awake the parent procedure
specifier|final
name|boolean
name|isTraceEnabled
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTraceEnabled
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|parent
operator|+
literal|" child is done: "
operator|+
name|procedure
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|.
name|childrenCountDown
argument_list|()
operator|&&
name|parent
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|WAITING
condition|)
block|{
name|parent
operator|.
name|setState
argument_list|(
name|ProcedureState
operator|.
name|RUNNABLE
argument_list|)
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addFront
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTraceEnabled
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|parent
operator|+
literal|" all the children finished their work, resume."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
specifier|private
name|void
name|updateStoreOnExec
parameter_list|(
specifier|final
name|RootProcedureState
name|procStack
parameter_list|,
specifier|final
name|Procedure
name|procedure
parameter_list|,
specifier|final
name|Procedure
index|[]
name|subprocs
parameter_list|)
block|{
if|if
condition|(
name|subprocs
operator|!=
literal|null
operator|&&
operator|!
name|procedure
operator|.
name|isFailed
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Store add "
operator|+
name|procedure
operator|+
literal|" children "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|subprocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|insert
argument_list|(
name|procedure
argument_list|,
name|subprocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Store update "
operator|+
name|procedure
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|procedure
operator|.
name|isFinished
argument_list|()
operator|&&
operator|!
name|procedure
operator|.
name|hasParent
argument_list|()
condition|)
block|{
comment|// remove child procedures
specifier|final
name|long
index|[]
name|childProcIds
init|=
name|procStack
operator|.
name|getSubprocedureIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|childProcIds
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|procedure
argument_list|,
name|childProcIds
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childProcIds
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|procedures
operator|.
name|remove
argument_list|(
name|childProcIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|store
operator|.
name|update
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|store
operator|.
name|update
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleInterruptedException
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|,
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"got an interrupt during "
operator|+
name|proc
operator|+
literal|". suspend and retry it later."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: We don't call Thread.currentThread().interrupt()
comment|// because otherwise all the subsequent calls e.g. Thread.sleep() will throw
comment|// the InterruptedException. If the master is going down, we will be notified
comment|// and the executor/store will be stopped.
comment|// (The interrupted procedure will be retried on the next run)
block|}
specifier|private
name|void
name|execCompletionCleanup
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
specifier|final
name|TEnvironment
name|env
init|=
name|getEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
name|proc
operator|.
name|holdLock
argument_list|(
name|env
argument_list|)
operator|&&
name|proc
operator|.
name|hasLock
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|releaseLock
argument_list|(
name|proc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proc
operator|.
name|completionCleanup
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch NullPointerExceptions or similar errors...
name|LOG
operator|.
name|error
argument_list|(
literal|"CODE-BUG: uncatched runtime exception for procedure: "
operator|+
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|procedureFinished
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
comment|// call the procedure completion cleanup handler
name|execCompletionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
comment|// update the executor internal state maps
specifier|final
name|ProcedureInfo
name|procInfo
init|=
name|ProcedureUtil
operator|.
name|convertToProcedureInfo
argument_list|(
name|proc
argument_list|,
name|proc
operator|.
name|getNonceKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proc
operator|.
name|shouldWaitClientAck
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
condition|)
block|{
name|procInfo
operator|.
name|setClientAckTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|completed
operator|.
name|put
argument_list|(
name|procInfo
operator|.
name|getProcId
argument_list|()
argument_list|,
name|procInfo
argument_list|)
expr_stmt|;
name|rollbackStack
operator|.
name|remove
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|remove
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// call the runnableSet completion cleanup handler
try|try
block|{
name|scheduler
operator|.
name|completionCleanup
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch NullPointerExceptions or similar errors...
name|LOG
operator|.
name|error
argument_list|(
literal|"CODE-BUG: uncatched runtime exception for completion cleanup: "
operator|+
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Notify the listeners
name|sendProcedureFinishedNotification
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Worker Thread
comment|// ==========================================================================
specifier|private
specifier|final
class|class
name|WorkerThread
extends|extends
name|StoppableThread
block|{
specifier|private
specifier|final
name|AtomicLong
name|executionStartTime
init|=
operator|new
name|AtomicLong
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|public
name|WorkerThread
parameter_list|(
specifier|final
name|ThreadGroup
name|group
parameter_list|)
block|{
name|super
argument_list|(
name|group
argument_list|,
literal|"ProcedureExecutorWorker-"
operator|+
name|workerId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendStopSignal
parameter_list|()
block|{
name|scheduler
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|boolean
name|isTraceEnabled
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
name|long
name|lastUpdate
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|isRunning
argument_list|()
operator|&&
name|keepAlive
argument_list|(
name|lastUpdate
argument_list|)
condition|)
block|{
specifier|final
name|Procedure
name|procedure
init|=
name|scheduler
operator|.
name|poll
argument_list|(
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|procedure
operator|==
literal|null
condition|)
continue|continue;
name|activeExecutorCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|executionStartTime
operator|.
name|set
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|isTraceEnabled
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Trying to start the execution of "
operator|+
name|procedure
argument_list|)
expr_stmt|;
block|}
name|executeProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|activeExecutorCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|lastUpdate
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|executionStartTime
operator|.
name|set
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"worker thread terminated "
operator|+
name|this
argument_list|)
expr_stmt|;
name|workerThreads
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the time since the current procedure is running      */
specifier|public
name|long
name|getCurrentRunTime
parameter_list|()
block|{
return|return
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|executionStartTime
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|keepAlive
parameter_list|(
specifier|final
name|long
name|lastUpdate
parameter_list|)
block|{
if|if
condition|(
name|workerThreads
operator|.
name|size
argument_list|()
operator|<=
name|corePoolSize
condition|)
return|return
literal|true
return|;
return|return
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|lastUpdate
operator|)
operator|<
name|keepAliveTime
return|;
block|}
block|}
comment|// ==========================================================================
comment|//  Timeout Thread
comment|// ==========================================================================
specifier|private
specifier|final
class|class
name|TimeoutExecutorThread
extends|extends
name|StoppableThread
block|{
specifier|private
specifier|final
name|DelayQueue
argument_list|<
name|DelayedWithTimeout
argument_list|>
name|queue
init|=
operator|new
name|DelayQueue
argument_list|<
name|DelayedWithTimeout
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TimeoutExecutorThread
parameter_list|(
specifier|final
name|ThreadGroup
name|group
parameter_list|)
block|{
name|super
argument_list|(
name|group
argument_list|,
literal|"ProcedureTimeoutExecutor"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendStopSignal
parameter_list|()
block|{
name|queue
operator|.
name|add
argument_list|(
name|DelayedUtil
operator|.
name|DELAYED_POISON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|boolean
name|isTraceEnabled
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
specifier|final
name|DelayedWithTimeout
name|task
init|=
name|DelayedUtil
operator|.
name|takeWithoutInterrupt
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
operator|||
name|task
operator|==
name|DelayedUtil
operator|.
name|DELAYED_POISON
condition|)
block|{
comment|// the executor may be shutting down,
comment|// and the task is just the shutdown request
continue|continue;
block|}
if|if
condition|(
name|isTraceEnabled
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Trying to start the execution of "
operator|+
name|task
argument_list|)
expr_stmt|;
block|}
comment|// execute the task
if|if
condition|(
name|task
operator|instanceof
name|InlineChore
condition|)
block|{
name|execInlineChore
argument_list|(
operator|(
name|InlineChore
operator|)
name|task
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|task
operator|instanceof
name|DelayedProcedure
condition|)
block|{
name|execDelayedProcedure
argument_list|(
operator|(
name|DelayedProcedure
operator|)
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"CODE-BUG unknown timeout task type "
operator|+
name|task
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|InlineChore
name|chore
parameter_list|)
block|{
name|chore
operator|.
name|refreshTimeout
argument_list|()
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|chore
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Procedure
name|procedure
parameter_list|)
block|{
assert|assert
name|procedure
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|WAITING_TIMEOUT
assert|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|DelayedProcedure
argument_list|(
name|procedure
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|Procedure
name|procedure
parameter_list|)
block|{
return|return
name|queue
operator|.
name|remove
argument_list|(
operator|new
name|DelayedProcedure
argument_list|(
name|procedure
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|execInlineChore
parameter_list|(
specifier|final
name|InlineChore
name|chore
parameter_list|)
block|{
name|chore
operator|.
name|run
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|chore
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|execDelayedProcedure
parameter_list|(
specifier|final
name|DelayedProcedure
name|delayed
parameter_list|)
block|{
comment|// TODO: treat this as a normal procedure, add it to the scheduler and
comment|// let one of the workers handle it.
comment|// Today we consider ProcedureInMemoryChore as InlineChores
specifier|final
name|Procedure
name|procedure
init|=
name|delayed
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|procedure
operator|instanceof
name|ProcedureInMemoryChore
condition|)
block|{
name|executeInMemoryChore
argument_list|(
operator|(
name|ProcedureInMemoryChore
operator|)
name|procedure
argument_list|)
expr_stmt|;
comment|// if the procedure is in a waiting state again, put it back in the queue
name|procedure
operator|.
name|updateTimestamp
argument_list|()
expr_stmt|;
if|if
condition|(
name|procedure
operator|.
name|isWaiting
argument_list|()
condition|)
block|{
name|delayed
operator|.
name|setTimeoutTimestamp
argument_list|(
name|procedure
operator|.
name|getTimeoutTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|delayed
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|executeTimedoutProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeInMemoryChore
parameter_list|(
specifier|final
name|ProcedureInMemoryChore
name|chore
parameter_list|)
block|{
if|if
condition|(
operator|!
name|chore
operator|.
name|isWaiting
argument_list|()
condition|)
return|return;
comment|// The ProcedureInMemoryChore is a special case, and it acts as a chore.
comment|// instead of bringing the Chore class in, we reuse this timeout thread for
comment|// this special case.
try|try
block|{
name|chore
operator|.
name|periodicExecute
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Ignoring "
operator|+
name|chore
operator|+
literal|" exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeTimedoutProcedure
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
comment|// The procedure received a timeout. if the procedure itself does not handle it,
comment|// call abort() and add the procedure back in the queue for rollback.
if|if
condition|(
name|proc
operator|.
name|setTimeoutFailure
argument_list|(
name|getEnvironment
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|rootProcId
init|=
name|Procedure
operator|.
name|getRootProcedureId
argument_list|(
name|procedures
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|RootProcedureState
name|procStack
init|=
name|rollbackStack
operator|.
name|get
argument_list|(
name|rootProcId
argument_list|)
decl_stmt|;
name|procStack
operator|.
name|abort
argument_list|()
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addFront
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|DelayedProcedure
extends|extends
name|DelayedUtil
operator|.
name|DelayedContainerWithTimestamp
argument_list|<
name|Procedure
argument_list|>
block|{
specifier|public
name|DelayedProcedure
parameter_list|(
specifier|final
name|Procedure
name|procedure
parameter_list|)
block|{
name|super
argument_list|(
name|procedure
argument_list|,
name|procedure
operator|.
name|getTimeoutTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|StoppableThread
extends|extends
name|Thread
block|{
specifier|public
name|StoppableThread
parameter_list|(
specifier|final
name|ThreadGroup
name|group
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|sendStopSignal
parameter_list|()
function_decl|;
specifier|public
name|void
name|awaitTermination
parameter_list|()
block|{
try|try
block|{
specifier|final
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|isAlive
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sendStopSignal
argument_list|()
expr_stmt|;
name|join
argument_list|(
literal|250
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
operator|(
name|i
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"waiting termination of thread "
operator|+
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getName
argument_list|()
operator|+
literal|" join wait got interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// ==========================================================================
comment|//  Inline Chores (executors internal chores)
comment|// ==========================================================================
specifier|private
specifier|static
specifier|abstract
class|class
name|InlineChore
extends|extends
name|DelayedUtil
operator|.
name|DelayedObject
implements|implements
name|Runnable
block|{
specifier|private
name|long
name|timeout
decl_stmt|;
specifier|public
specifier|abstract
name|int
name|getTimeoutInterval
parameter_list|()
function_decl|;
specifier|protected
name|void
name|refreshTimeout
parameter_list|()
block|{
name|this
operator|.
name|timeout
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|getTimeoutInterval
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimeoutTimestamp
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
block|}
comment|// ----------------------------------------------------------------------------
comment|// TODO-MAYBE: Should we provide a InlineChore to notify the store with the
comment|// full set of procedures pending and completed to write a compacted
comment|// version of the log (in case is a log)?
comment|// In theory no, procedures are have a short life, so at some point the store
comment|// will have the tracker saying everything is in the last log.
comment|// ----------------------------------------------------------------------------
specifier|private
specifier|final
class|class
name|WorkerMonitor
extends|extends
name|InlineChore
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_MONITOR_INTERVAL_CONF_KEY
init|=
literal|"hbase.procedure.worker.monitor.interval.msec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WORKER_MONITOR_INTERVAL
init|=
literal|5000
decl_stmt|;
comment|// 5sec
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_STUCK_THRESHOLD_CONF_KEY
init|=
literal|"hbase.procedure.worker.stuck.threshold.msec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WORKER_STUCK_THRESHOLD
init|=
literal|10000
decl_stmt|;
comment|// 10sec
specifier|public
specifier|static
specifier|final
name|String
name|WORKER_ADD_STUCK_PERCENTAGE_CONF_KEY
init|=
literal|"hbase.procedure.worker.add.stuck.percentage"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_WORKER_ADD_STUCK_PERCENTAGE
init|=
literal|0.5f
decl_stmt|;
comment|// 50% stuck
specifier|private
name|float
name|addWorkerStuckPercentage
init|=
name|DEFAULT_WORKER_ADD_STUCK_PERCENTAGE
decl_stmt|;
specifier|private
name|int
name|timeoutInterval
init|=
name|DEFAULT_WORKER_MONITOR_INTERVAL
decl_stmt|;
specifier|private
name|int
name|stuckThreshold
init|=
name|DEFAULT_WORKER_STUCK_THRESHOLD
decl_stmt|;
specifier|public
name|WorkerMonitor
parameter_list|()
block|{
name|refreshConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|int
name|stuckCount
init|=
name|checkForStuckWorkers
argument_list|()
decl_stmt|;
name|checkThreadCount
argument_list|(
name|stuckCount
argument_list|)
expr_stmt|;
comment|// refresh interval (poor man dynamic conf update)
name|refreshConfig
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|checkForStuckWorkers
parameter_list|()
block|{
comment|// check if any of the worker is stuck
name|int
name|stuckCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WorkerThread
name|worker
range|:
name|workerThreads
control|)
block|{
if|if
condition|(
name|worker
operator|.
name|getCurrentRunTime
argument_list|()
operator|<
name|stuckThreshold
condition|)
block|{
continue|continue;
block|}
comment|// WARN the worker is stuck
name|stuckCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"found worker stuck "
operator|+
name|worker
operator|+
literal|" run time "
operator|+
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|worker
operator|.
name|getCurrentRunTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|stuckCount
return|;
block|}
specifier|private
name|void
name|checkThreadCount
parameter_list|(
specifier|final
name|int
name|stuckCount
parameter_list|)
block|{
comment|// nothing to do if there are no runnable tasks
if|if
condition|(
name|stuckCount
operator|<
literal|1
operator|||
operator|!
name|scheduler
operator|.
name|hasRunnables
argument_list|()
condition|)
return|return;
comment|// add a new thread if the worker stuck percentage exceed the threshold limit
comment|// and every handler is active.
specifier|final
name|float
name|stuckPerc
init|=
operator|(
operator|(
name|float
operator|)
name|stuckCount
operator|)
operator|/
name|workerThreads
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|stuckPerc
operator|>=
name|addWorkerStuckPercentage
operator|&&
name|activeExecutorCount
operator|.
name|get
argument_list|()
operator|==
name|workerThreads
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|final
name|WorkerThread
name|worker
init|=
operator|new
name|WorkerThread
argument_list|(
name|threadGroup
argument_list|)
decl_stmt|;
name|workerThreads
operator|.
name|add
argument_list|(
name|worker
argument_list|)
expr_stmt|;
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"added a new worker thread "
operator|+
name|worker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|refreshConfig
parameter_list|()
block|{
name|addWorkerStuckPercentage
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|WORKER_ADD_STUCK_PERCENTAGE_CONF_KEY
argument_list|,
name|DEFAULT_WORKER_ADD_STUCK_PERCENTAGE
argument_list|)
expr_stmt|;
name|timeoutInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|WORKER_MONITOR_INTERVAL_CONF_KEY
argument_list|,
name|DEFAULT_WORKER_MONITOR_INTERVAL
argument_list|)
expr_stmt|;
name|stuckThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|WORKER_STUCK_THRESHOLD_CONF_KEY
argument_list|,
name|DEFAULT_WORKER_STUCK_THRESHOLD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTimeoutInterval
parameter_list|()
block|{
return|return
name|timeoutInterval
return|;
block|}
block|}
block|}
end_class

end_unit

