begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedTransferQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|queue
operator|.
name|CircularFifoQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStoreBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStoreTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|ByteSlot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
operator|.
name|ProcedureWALHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * WAL implementation of the ProcedureStore.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|WALProcedureStore
extends|extends
name|ProcedureStoreBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WALProcedureStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOG_PREFIX
init|=
literal|"pv2-"
decl_stmt|;
specifier|public
interface|interface
name|LeaseRecovery
block|{
name|void
name|recoverFileLease
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
specifier|static
specifier|final
name|String
name|WAL_COUNT_WARN_THRESHOLD_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.warn.threshold"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WAL_COUNT_WARN_THRESHOLD
init|=
literal|64
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXEC_WAL_CLEANUP_ON_LOAD_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.exec.cleanup.on.load"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_EXEC_WAL_CLEANUP_ON_LOAD_CONF_KEY
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_RETRIES_BEFORE_ROLL_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.max.retries.before.roll"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_RETRIES_BEFORE_ROLL
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WAIT_BEFORE_ROLL_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.wait.before.roll"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WAIT_BEFORE_ROLL
init|=
literal|500
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROLL_RETRIES_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.max.roll.retries"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ROLL_RETRIES
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_SYNC_FAILURE_ROLL_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.sync.failure.roll.max"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_SYNC_FAILURE_ROLL
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PERIODIC_ROLL_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.periodic.roll.msec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_PERIODIC_ROLL
init|=
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1h
specifier|public
specifier|static
specifier|final
name|String
name|SYNC_WAIT_MSEC_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.sync.wait.msec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SYNC_WAIT_MSEC
init|=
literal|100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USE_HSYNC_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.use.hsync"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_USE_HSYNC
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROLL_THRESHOLD_CONF_KEY
init|=
literal|"hbase.procedure.store.wal.roll.threshold"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_ROLL_THRESHOLD
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 32M
specifier|public
specifier|static
specifier|final
name|String
name|STORE_WAL_SYNC_STATS_COUNT
init|=
literal|"hbase.procedure.store.wal.sync.stats.count"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SYNC_STATS_COUNT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|ProcedureWALFile
argument_list|>
name|logs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ProcedureStoreTracker
name|holdingCleanupTracker
init|=
operator|new
name|ProcedureStoreTracker
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ProcedureStoreTracker
name|storeTracker
init|=
operator|new
name|ProcedureStoreTracker
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|waitCond
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|slotCond
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|syncCond
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LeaseRecovery
name|leaseRecovery
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|walDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|walArchiveDir
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|syncException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|loading
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|inSync
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|totalSynced
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|lastRollTs
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|syncId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|LinkedTransferQueue
argument_list|<
name|ByteSlot
argument_list|>
name|slotsCache
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ProcedureWALFile
argument_list|>
name|corruptedLogs
init|=
literal|null
decl_stmt|;
specifier|private
name|FSDataOutputStream
name|stream
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|runningProcCount
init|=
literal|1
decl_stmt|;
specifier|private
name|long
name|flushLogId
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|syncMaxSlot
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|slotIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|Thread
name|syncThread
decl_stmt|;
specifier|private
name|ByteSlot
index|[]
name|slots
decl_stmt|;
specifier|private
name|int
name|walCountWarnThreshold
decl_stmt|;
specifier|private
name|int
name|maxRetriesBeforeRoll
decl_stmt|;
specifier|private
name|int
name|maxSyncFailureRoll
decl_stmt|;
specifier|private
name|int
name|waitBeforeRoll
decl_stmt|;
specifier|private
name|int
name|rollRetries
decl_stmt|;
specifier|private
name|int
name|periodicRollMsec
decl_stmt|;
specifier|private
name|long
name|rollThreshold
decl_stmt|;
specifier|private
name|boolean
name|useHsync
decl_stmt|;
specifier|private
name|int
name|syncWaitMsec
decl_stmt|;
comment|// Variables used for UI display
specifier|private
name|CircularFifoQueue
name|syncMetricsQueue
decl_stmt|;
specifier|public
specifier|static
class|class
name|SyncMetrics
block|{
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|long
name|syncWaitMs
decl_stmt|;
specifier|private
name|long
name|totalSyncedBytes
decl_stmt|;
specifier|private
name|int
name|syncedEntries
decl_stmt|;
specifier|private
name|float
name|syncedPerSec
decl_stmt|;
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
specifier|public
name|long
name|getSyncWaitMs
parameter_list|()
block|{
return|return
name|syncWaitMs
return|;
block|}
specifier|public
name|long
name|getTotalSyncedBytes
parameter_list|()
block|{
return|return
name|totalSyncedBytes
return|;
block|}
specifier|public
name|long
name|getSyncedEntries
parameter_list|()
block|{
return|return
name|syncedEntries
return|;
block|}
specifier|public
name|float
name|getSyncedPerSec
parameter_list|()
block|{
return|return
name|syncedPerSec
return|;
block|}
block|}
specifier|public
name|WALProcedureStore
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|walDir
parameter_list|,
specifier|final
name|LeaseRecovery
name|leaseRecovery
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|walDir
argument_list|,
literal|null
argument_list|,
name|leaseRecovery
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WALProcedureStore
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|walDir
parameter_list|,
specifier|final
name|Path
name|walArchiveDir
parameter_list|,
specifier|final
name|LeaseRecovery
name|leaseRecovery
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|walDir
operator|=
name|walDir
expr_stmt|;
name|this
operator|.
name|walArchiveDir
operator|=
name|walArchiveDir
expr_stmt|;
name|this
operator|.
name|leaseRecovery
operator|=
name|leaseRecovery
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|int
name|numSlots
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|setRunning
argument_list|(
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Init buffer slots
name|loading
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|runningProcCount
operator|=
name|numSlots
expr_stmt|;
name|syncMaxSlot
operator|=
name|numSlots
expr_stmt|;
name|slots
operator|=
operator|new
name|ByteSlot
index|[
name|numSlots
index|]
expr_stmt|;
name|slotsCache
operator|=
operator|new
name|LinkedTransferQueue
argument_list|()
expr_stmt|;
while|while
condition|(
name|slotsCache
operator|.
name|size
argument_list|()
operator|<
name|numSlots
condition|)
block|{
name|slotsCache
operator|.
name|offer
argument_list|(
operator|new
name|ByteSlot
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Tunings
name|walCountWarnThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|WAL_COUNT_WARN_THRESHOLD_CONF_KEY
argument_list|,
name|DEFAULT_WAL_COUNT_WARN_THRESHOLD
argument_list|)
expr_stmt|;
name|maxRetriesBeforeRoll
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_RETRIES_BEFORE_ROLL_CONF_KEY
argument_list|,
name|DEFAULT_MAX_RETRIES_BEFORE_ROLL
argument_list|)
expr_stmt|;
name|maxSyncFailureRoll
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_SYNC_FAILURE_ROLL_CONF_KEY
argument_list|,
name|DEFAULT_MAX_SYNC_FAILURE_ROLL
argument_list|)
expr_stmt|;
name|waitBeforeRoll
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|WAIT_BEFORE_ROLL_CONF_KEY
argument_list|,
name|DEFAULT_WAIT_BEFORE_ROLL
argument_list|)
expr_stmt|;
name|rollRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|ROLL_RETRIES_CONF_KEY
argument_list|,
name|DEFAULT_ROLL_RETRIES
argument_list|)
expr_stmt|;
name|rollThreshold
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|ROLL_THRESHOLD_CONF_KEY
argument_list|,
name|DEFAULT_ROLL_THRESHOLD
argument_list|)
expr_stmt|;
name|periodicRollMsec
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|PERIODIC_ROLL_CONF_KEY
argument_list|,
name|DEFAULT_PERIODIC_ROLL
argument_list|)
expr_stmt|;
name|syncWaitMsec
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SYNC_WAIT_MSEC_CONF_KEY
argument_list|,
name|DEFAULT_SYNC_WAIT_MSEC
argument_list|)
expr_stmt|;
name|useHsync
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|USE_HSYNC_CONF_KEY
argument_list|,
name|DEFAULT_USE_HSYNC
argument_list|)
expr_stmt|;
comment|// WebUI
name|syncMetricsQueue
operator|=
operator|new
name|CircularFifoQueue
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|STORE_WAL_SYNC_STATS_COUNT
argument_list|,
name|DEFAULT_SYNC_STATS_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Init sync thread
name|syncThread
operator|=
operator|new
name|Thread
argument_list|(
literal|"WALProcedureStoreSyncThread"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|syncLoop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got an exception from the sync-loop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSyncAborted
argument_list|()
condition|)
block|{
name|sendAbortProcessSignal
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|syncThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create archive dir up front. Rename won't work w/o it up on HDFS.
if|if
condition|(
name|this
operator|.
name|walArchiveDir
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|mkdirs
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created Procedure Store WAL archive dir "
operator|+
name|this
operator|.
name|walArchiveDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed create of "
operator|+
name|this
operator|.
name|walArchiveDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
specifier|final
name|boolean
name|abort
parameter_list|)
block|{
if|if
condition|(
operator|!
name|setRunning
argument_list|(
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the WAL Procedure Store, isAbort="
operator|+
name|abort
operator|+
operator|(
name|isSyncAborted
argument_list|()
condition|?
literal|" (self aborting)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|sendStopSignal
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isSyncAborted
argument_list|()
condition|)
block|{
try|try
block|{
while|while
condition|(
name|syncThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|sendStopSignal
argument_list|()
expr_stmt|;
name|syncThread
operator|.
name|join
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"join interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Close the writer
name|closeCurrentLogStream
argument_list|()
expr_stmt|;
comment|// Close the old logs
comment|// they should be already closed, this is just in case the load fails
comment|// and we call start() and then stop()
for|for
control|(
name|ProcedureWALFile
name|log
range|:
name|logs
control|)
block|{
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|logs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|loading
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sendStopSignal
parameter_list|()
block|{
if|if
condition|(
name|lock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
try|try
block|{
name|waitCond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
name|syncCond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumThreads
parameter_list|()
block|{
return|return
name|slots
operator|==
literal|null
condition|?
literal|0
else|:
name|slots
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|setRunningProcedureCount
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|runningProcCount
operator|=
name|count
operator|>
literal|0
condition|?
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|slots
operator|.
name|length
argument_list|)
else|:
name|slots
operator|.
name|length
expr_stmt|;
return|return
name|this
operator|.
name|runningProcCount
return|;
block|}
specifier|public
name|ProcedureStoreTracker
name|getStoreTracker
parameter_list|()
block|{
return|return
name|storeTracker
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|ProcedureWALFile
argument_list|>
name|getActiveLogs
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|logs
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|ProcedureWALFile
argument_list|>
name|getCorruptedLogs
parameter_list|()
block|{
return|return
name|corruptedLogs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|recoverLease
parameter_list|()
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting WAL Procedure Store lease recovery"
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|oldLogs
init|=
name|getLogFiles
argument_list|()
decl_stmt|;
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
comment|// Get Log-MaxID and recover lease on old logs
try|try
block|{
name|flushLogId
operator|=
name|initOldLogs
argument_list|(
name|oldLogs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Someone else is active and deleted logs. retrying."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|oldLogs
operator|=
name|getLogFiles
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// Create new state-log
if|if
condition|(
operator|!
name|rollWriter
argument_list|(
name|flushLogId
operator|+
literal|1
argument_list|)
condition|)
block|{
comment|// someone else has already created this log
name|LOG
operator|.
name|debug
argument_list|(
literal|"Someone else has already created log "
operator|+
name|flushLogId
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// We have the lease on the log
name|oldLogs
operator|=
name|getLogFiles
argument_list|()
expr_stmt|;
if|if
condition|(
name|getMaxLogId
argument_list|(
name|oldLogs
argument_list|)
operator|>
name|flushLogId
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Someone else created new logs. Expected maxLogId< "
operator|+
name|flushLogId
argument_list|)
expr_stmt|;
block|}
name|logs
operator|.
name|getLast
argument_list|()
operator|.
name|removeFile
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Lease acquired for flushLogId: "
operator|+
name|flushLogId
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
specifier|final
name|ProcedureLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|logs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"recoverLease() must be called before loading data"
argument_list|)
throw|;
block|}
comment|// Nothing to do, If we have only the current log.
if|if
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No state logs to replay."
argument_list|)
expr_stmt|;
block|}
name|loader
operator|.
name|setMaxProcId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Load the old logs
specifier|final
name|Iterator
argument_list|<
name|ProcedureWALFile
argument_list|>
name|it
init|=
name|logs
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Skip the current log
name|ProcedureWALFormat
operator|.
name|load
argument_list|(
name|it
argument_list|,
name|storeTracker
argument_list|,
operator|new
name|ProcedureWALFormat
operator|.
name|Loader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setMaxProcId
parameter_list|(
name|long
name|maxProcId
parameter_list|)
block|{
name|loader
operator|.
name|setMaxProcId
argument_list|(
name|maxProcId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|loader
operator|.
name|load
argument_list|(
name|procIter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleCorrupted
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|loader
operator|.
name|handleCorrupted
argument_list|(
name|procIter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|markCorruptedWAL
parameter_list|(
name|ProcedureWALFile
name|log
parameter_list|,
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|corruptedLogs
operator|==
literal|null
condition|)
block|{
name|corruptedLogs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|corruptedLogs
operator|.
name|add
argument_list|(
name|log
argument_list|)
expr_stmt|;
comment|// TODO: sideline corrupted log
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
comment|// try to cleanup inactive wals and complete the operation
name|buildHoldingCleanupTracker
argument_list|()
expr_stmt|;
name|tryCleanupLogsOnLoad
argument_list|()
expr_stmt|;
name|loading
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|tryCleanupLogsOnLoad
parameter_list|()
block|{
comment|// nothing to cleanup.
if|if
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return;
comment|// the config says to not cleanup wals on load.
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|EXEC_WAL_CLEANUP_ON_LOAD_CONF_KEY
argument_list|,
name|DEFAULT_EXEC_WAL_CLEANUP_ON_LOAD_CONF_KEY
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"WALs cleanup on load is not enabled: "
operator|+
name|getActiveLogs
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|periodicRoll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to cleanup logs on load: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|,
specifier|final
name|Procedure
index|[]
name|subprocs
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Insert "
operator|+
name|proc
operator|+
literal|", subproc="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|subprocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteSlot
name|slot
init|=
name|acquireSlot
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Serialize the insert
name|long
index|[]
name|subProcIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subprocs
operator|!=
literal|null
condition|)
block|{
name|ProcedureWALFormat
operator|.
name|writeInsert
argument_list|(
name|slot
argument_list|,
name|proc
argument_list|,
name|subprocs
argument_list|)
expr_stmt|;
name|subProcIds
operator|=
operator|new
name|long
index|[
name|subprocs
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subprocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|subProcIds
index|[
name|i
index|]
operator|=
name|subprocs
index|[
name|i
index|]
operator|.
name|getProcId
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
operator|!
name|proc
operator|.
name|hasParent
argument_list|()
assert|;
name|ProcedureWALFormat
operator|.
name|writeInsert
argument_list|(
name|slot
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
comment|// Push the transaction data and wait until it is persisted
name|pushData
argument_list|(
name|PushType
operator|.
name|INSERT
argument_list|,
name|slot
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|subProcIds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We are not able to serialize the procedure.
comment|// this is a code error, and we are not able to go on.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to serialize one of the procedure: proc="
operator|+
name|proc
operator|+
literal|", subprocs="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|subprocs
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|Procedure
index|[]
name|procs
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Insert "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|procs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteSlot
name|slot
init|=
name|acquireSlot
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Serialize the insert
name|long
index|[]
name|procIds
init|=
operator|new
name|long
index|[
name|procs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
assert|assert
operator|!
name|procs
index|[
name|i
index|]
operator|.
name|hasParent
argument_list|()
assert|;
name|procIds
index|[
name|i
index|]
operator|=
name|procs
index|[
name|i
index|]
operator|.
name|getProcId
argument_list|()
expr_stmt|;
name|ProcedureWALFormat
operator|.
name|writeInsert
argument_list|(
name|slot
argument_list|,
name|procs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Push the transaction data and wait until it is persisted
name|pushData
argument_list|(
name|PushType
operator|.
name|INSERT
argument_list|,
name|slot
argument_list|,
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|,
name|procIds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We are not able to serialize the procedure.
comment|// this is a code error, and we are not able to go on.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to serialize one of the procedure: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|procs
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Update "
operator|+
name|proc
argument_list|)
expr_stmt|;
block|}
name|ByteSlot
name|slot
init|=
name|acquireSlot
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Serialize the update
name|ProcedureWALFormat
operator|.
name|writeUpdate
argument_list|(
name|slot
argument_list|,
name|proc
argument_list|)
expr_stmt|;
comment|// Push the transaction data and wait until it is persisted
name|pushData
argument_list|(
name|PushType
operator|.
name|UPDATE
argument_list|,
name|slot
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We are not able to serialize the procedure.
comment|// this is a code error, and we are not able to go on.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to serialize the procedure: "
operator|+
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Delete "
operator|+
name|procId
argument_list|)
expr_stmt|;
block|}
name|ByteSlot
name|slot
init|=
name|acquireSlot
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Serialize the delete
name|ProcedureWALFormat
operator|.
name|writeDelete
argument_list|(
name|slot
argument_list|,
name|procId
argument_list|)
expr_stmt|;
comment|// Push the transaction data and wait until it is persisted
name|pushData
argument_list|(
name|PushType
operator|.
name|DELETE
argument_list|,
name|slot
argument_list|,
name|procId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We are not able to serialize the procedure.
comment|// this is a code error, and we are not able to go on.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to serialize the procedure: "
operator|+
name|procId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|,
specifier|final
name|long
index|[]
name|subProcIds
parameter_list|)
block|{
assert|assert
name|proc
operator|!=
literal|null
operator|:
literal|"expected a non-null procedure"
assert|;
assert|assert
name|subProcIds
operator|!=
literal|null
operator|&&
name|subProcIds
operator|.
name|length
operator|>
literal|0
operator|:
literal|"expected subProcIds"
assert|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Update "
operator|+
name|proc
operator|+
literal|" and Delete "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|subProcIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteSlot
name|slot
init|=
name|acquireSlot
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Serialize the delete
name|ProcedureWALFormat
operator|.
name|writeDelete
argument_list|(
name|slot
argument_list|,
name|proc
argument_list|,
name|subProcIds
argument_list|)
expr_stmt|;
comment|// Push the transaction data and wait until it is persisted
name|pushData
argument_list|(
name|PushType
operator|.
name|DELETE
argument_list|,
name|slot
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
name|subProcIds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We are not able to serialize the procedure.
comment|// this is a code error, and we are not able to go on.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to serialize the procedure: "
operator|+
name|proc
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|long
index|[]
name|procIds
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|offset
operator|==
literal|0
operator|&&
name|count
operator|==
name|procIds
operator|.
name|length
condition|)
block|{
name|delete
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|1
condition|)
block|{
name|delete
argument_list|(
name|procIds
index|[
name|offset
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|procIds
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|delete
parameter_list|(
specifier|final
name|long
index|[]
name|procIds
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Delete "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|procIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteSlot
name|slot
init|=
name|acquireSlot
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Serialize the delete
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procIds
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ProcedureWALFormat
operator|.
name|writeDelete
argument_list|(
name|slot
argument_list|,
name|procIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Push the transaction data and wait until it is persisted
name|pushData
argument_list|(
name|PushType
operator|.
name|DELETE
argument_list|,
name|slot
argument_list|,
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|,
name|procIds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We are not able to serialize the procedure.
comment|// this is a code error, and we are not able to go on.
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to serialize the procedures: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|procIds
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ByteSlot
name|acquireSlot
parameter_list|()
block|{
name|ByteSlot
name|slot
init|=
name|slotsCache
operator|.
name|poll
argument_list|()
decl_stmt|;
return|return
name|slot
operator|!=
literal|null
condition|?
name|slot
else|:
operator|new
name|ByteSlot
argument_list|()
return|;
block|}
specifier|private
name|void
name|releaseSlot
parameter_list|(
specifier|final
name|ByteSlot
name|slot
parameter_list|)
block|{
name|slot
operator|.
name|reset
argument_list|()
expr_stmt|;
name|slotsCache
operator|.
name|offer
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
specifier|private
enum|enum
name|PushType
block|{
name|INSERT
block|,
name|UPDATE
block|,
name|DELETE
block|}
empty_stmt|;
specifier|private
name|long
name|pushData
parameter_list|(
specifier|final
name|PushType
name|type
parameter_list|,
specifier|final
name|ByteSlot
name|slot
parameter_list|,
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|long
index|[]
name|subProcIds
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"the store must be running before inserting data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|logs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"recoverLease() must be called before inserting data"
argument_list|)
throw|;
block|}
name|long
name|logId
init|=
operator|-
literal|1
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Wait for the sync to be completed
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"store no longer running"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|isSyncAborted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"sync aborted"
argument_list|,
name|syncException
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|inSync
operator|.
name|get
argument_list|()
condition|)
block|{
name|syncCond
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slotIndex
operator|>=
name|syncMaxSlot
condition|)
block|{
name|slotCond
operator|.
name|signal
argument_list|()
expr_stmt|;
name|syncCond
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
specifier|final
name|long
name|pushSyncId
init|=
name|syncId
operator|.
name|get
argument_list|()
decl_stmt|;
name|updateStoreTracker
argument_list|(
name|type
argument_list|,
name|procId
argument_list|,
name|subProcIds
argument_list|)
expr_stmt|;
name|slots
index|[
name|slotIndex
operator|++
index|]
operator|=
name|slot
expr_stmt|;
name|logId
operator|=
name|flushLogId
expr_stmt|;
comment|// Notify that there is new data
if|if
condition|(
name|slotIndex
operator|==
literal|1
condition|)
block|{
name|waitCond
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
comment|// Notify that the slots are full
if|if
condition|(
name|slotIndex
operator|==
name|syncMaxSlot
condition|)
block|{
name|waitCond
operator|.
name|signal
argument_list|()
expr_stmt|;
name|slotCond
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|pushSyncId
operator|==
name|syncId
operator|.
name|get
argument_list|()
operator|&&
name|isRunning
argument_list|()
condition|)
block|{
name|syncCond
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|sendAbortProcessSignal
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSyncAborted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"sync aborted"
argument_list|,
name|syncException
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|logId
return|;
block|}
specifier|private
name|void
name|updateStoreTracker
parameter_list|(
specifier|final
name|PushType
name|type
parameter_list|,
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|long
index|[]
name|subProcIds
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INSERT
case|:
if|if
condition|(
name|subProcIds
operator|==
literal|null
condition|)
block|{
name|storeTracker
operator|.
name|insert
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|procId
operator|==
name|Procedure
operator|.
name|NO_PROC_ID
condition|)
block|{
name|storeTracker
operator|.
name|insert
argument_list|(
name|subProcIds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeTracker
operator|.
name|insert
argument_list|(
name|procId
argument_list|,
name|subProcIds
argument_list|)
expr_stmt|;
name|holdingCleanupTracker
operator|.
name|setDeletedIfSet
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UPDATE
case|:
name|storeTracker
operator|.
name|update
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|holdingCleanupTracker
operator|.
name|setDeletedIfSet
argument_list|(
name|procId
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
if|if
condition|(
name|subProcIds
operator|!=
literal|null
operator|&&
name|subProcIds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|storeTracker
operator|.
name|delete
argument_list|(
name|subProcIds
argument_list|)
expr_stmt|;
name|holdingCleanupTracker
operator|.
name|setDeletedIfSet
argument_list|(
name|subProcIds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeTracker
operator|.
name|delete
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|holdingCleanupTracker
operator|.
name|setDeletedIfSet
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid push type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isSyncAborted
parameter_list|()
block|{
return|return
name|syncException
operator|.
name|get
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|private
name|void
name|syncLoop
parameter_list|()
throws|throws
name|Throwable
block|{
name|long
name|totalSyncedToStore
init|=
literal|0
decl_stmt|;
name|inSync
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Wait until new data is available
if|if
condition|(
name|slotIndex
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|loading
operator|.
name|get
argument_list|()
condition|)
block|{
name|periodicRoll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|float
name|rollTsSec
init|=
name|getMillisFromLastRoll
argument_list|()
operator|/
literal|1000.0f
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Waiting for data. flushed=%s (%s/sec)"
argument_list|,
name|StringUtils
operator|.
name|humanSize
argument_list|(
name|totalSynced
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|humanSize
argument_list|(
name|totalSynced
operator|.
name|get
argument_list|()
operator|/
name|rollTsSec
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitCond
operator|.
name|await
argument_list|(
name|getMillisToNextPeriodicRoll
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|slotIndex
operator|==
literal|0
condition|)
block|{
comment|// no data.. probably a stop() or a periodic roll
continue|continue;
block|}
block|}
comment|// Wait SYNC_WAIT_MSEC or the signal of "slots full" before flushing
name|syncMaxSlot
operator|=
name|runningProcCount
expr_stmt|;
assert|assert
name|syncMaxSlot
operator|>
literal|0
operator|:
literal|"unexpected syncMaxSlot="
operator|+
name|syncMaxSlot
assert|;
specifier|final
name|long
name|syncWaitSt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|slotIndex
operator|!=
name|syncMaxSlot
condition|)
block|{
name|slotCond
operator|.
name|await
argument_list|(
name|syncWaitMsec
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|currentTs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|long
name|syncWaitMs
init|=
name|currentTs
operator|-
name|syncWaitSt
decl_stmt|;
specifier|final
name|float
name|rollSec
init|=
name|getMillisFromLastRoll
argument_list|()
operator|/
literal|1000.0f
decl_stmt|;
specifier|final
name|float
name|syncedPerSec
init|=
name|totalSyncedToStore
operator|/
name|rollSec
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
operator|(
name|syncWaitMs
operator|>
literal|10
operator|||
name|slotIndex
operator|<
name|syncMaxSlot
operator|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Sync wait %s, slotIndex=%s , totalSynced=%s (%s/sec)"
argument_list|,
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|syncWaitMs
argument_list|)
argument_list|,
name|slotIndex
argument_list|,
name|StringUtils
operator|.
name|humanSize
argument_list|(
name|totalSyncedToStore
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|humanSize
argument_list|(
name|syncedPerSec
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// update webui circular buffers (TODO: get rid of allocations)
specifier|final
name|SyncMetrics
name|syncMetrics
init|=
operator|new
name|SyncMetrics
argument_list|()
decl_stmt|;
name|syncMetrics
operator|.
name|timestamp
operator|=
name|currentTs
expr_stmt|;
name|syncMetrics
operator|.
name|syncWaitMs
operator|=
name|syncWaitMs
expr_stmt|;
name|syncMetrics
operator|.
name|syncedEntries
operator|=
name|slotIndex
expr_stmt|;
name|syncMetrics
operator|.
name|totalSyncedBytes
operator|=
name|totalSyncedToStore
expr_stmt|;
name|syncMetrics
operator|.
name|syncedPerSec
operator|=
name|syncedPerSec
expr_stmt|;
name|syncMetricsQueue
operator|.
name|add
argument_list|(
name|syncMetrics
argument_list|)
expr_stmt|;
comment|// sync
name|inSync
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|slotSize
init|=
name|syncSlots
argument_list|()
decl_stmt|;
name|logs
operator|.
name|getLast
argument_list|()
operator|.
name|addToSize
argument_list|(
name|slotSize
argument_list|)
expr_stmt|;
name|totalSyncedToStore
operator|=
name|totalSynced
operator|.
name|addAndGet
argument_list|(
name|slotSize
argument_list|)
expr_stmt|;
name|slotIndex
operator|=
literal|0
expr_stmt|;
name|inSync
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|syncId
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|syncException
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sendAbortProcessSignal
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|syncException
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|sendAbortProcessSignal
argument_list|()
expr_stmt|;
throw|throw
name|t
throw|;
block|}
finally|finally
block|{
name|syncCond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|SyncMetrics
argument_list|>
name|getSyncMetrics
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|syncMetricsQueue
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|syncSlots
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
name|int
name|logRolled
init|=
literal|0
decl_stmt|;
name|long
name|totalSynced
init|=
literal|0
decl_stmt|;
do|do
block|{
try|try
block|{
name|totalSynced
operator|=
name|syncSlots
argument_list|(
name|stream
argument_list|,
name|slots
argument_list|,
literal|0
argument_list|,
name|slotIndex
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unable to sync slots, retry="
operator|+
name|retry
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|retry
operator|>=
name|maxRetriesBeforeRoll
condition|)
block|{
if|if
condition|(
name|logRolled
operator|>=
name|maxSyncFailureRoll
operator|&&
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Sync slots after log roll failed, abort."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|rollWriterWithRetries
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|logRolled
operator|++
expr_stmt|;
name|retry
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|isRunning
argument_list|()
condition|)
do|;
return|return
name|totalSynced
return|;
block|}
specifier|protected
name|long
name|syncSlots
parameter_list|(
specifier|final
name|FSDataOutputStream
name|stream
parameter_list|,
specifier|final
name|ByteSlot
index|[]
name|slots
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalSynced
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|ByteSlot
name|data
init|=
name|slots
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|data
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|totalSynced
operator|+=
name|data
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|syncStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|sendPostSyncSignal
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sync slots="
operator|+
name|count
operator|+
literal|'/'
operator|+
name|syncMaxSlot
operator|+
literal|", flushed="
operator|+
name|StringUtils
operator|.
name|humanSize
argument_list|(
name|totalSynced
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|totalSynced
return|;
block|}
specifier|protected
name|void
name|syncStream
parameter_list|(
specifier|final
name|FSDataOutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|useHsync
condition|)
block|{
name|stream
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|rollWriterWithRetries
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rollRetries
operator|&&
name|isRunning
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
name|waitBeforeRoll
operator|*
name|i
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|rollWriter
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to roll the log, attempt="
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to roll the log"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|tryRollWriter
parameter_list|()
block|{
try|try
block|{
return|return
name|rollWriter
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to roll the log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|long
name|getMillisToNextPeriodicRoll
parameter_list|()
block|{
if|if
condition|(
name|lastRollTs
operator|.
name|get
argument_list|()
operator|>
literal|0
operator|&&
name|periodicRollMsec
operator|>
literal|0
condition|)
block|{
return|return
name|periodicRollMsec
operator|-
name|getMillisFromLastRoll
argument_list|()
return|;
block|}
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
specifier|public
name|long
name|getMillisFromLastRoll
parameter_list|()
block|{
return|return
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastRollTs
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|periodicRollForTesting
parameter_list|()
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|periodicRoll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|boolean
name|rollWriterForTesting
parameter_list|()
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|rollWriter
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|removeInactiveLogsForTesting
parameter_list|()
throws|throws
name|Exception
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|removeInactiveLogs
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|periodicRoll
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|storeTracker
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"no active procedures"
argument_list|)
expr_stmt|;
block|}
name|tryRollWriter
argument_list|()
expr_stmt|;
name|removeAllLogs
argument_list|(
name|flushLogId
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|storeTracker
operator|.
name|isUpdated
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"all the active procedures are in the latest log"
argument_list|)
expr_stmt|;
block|}
name|removeAllLogs
argument_list|(
name|flushLogId
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// if the log size has exceeded the roll threshold
comment|// or the periodic roll timeout is expired, try to roll the wal.
if|if
condition|(
name|totalSynced
operator|.
name|get
argument_list|()
operator|>
name|rollThreshold
operator|||
name|getMillisToNextPeriodicRoll
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|tryRollWriter
argument_list|()
expr_stmt|;
block|}
name|removeInactiveLogs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|rollWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Create new state-log
if|if
condition|(
operator|!
name|rollWriter
argument_list|(
name|flushLogId
operator|+
literal|1
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"someone else has already created log "
operator|+
name|flushLogId
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// We have the lease on the log,
comment|// but we should check if someone else has created new files
if|if
condition|(
name|getMaxLogId
argument_list|(
name|getLogFiles
argument_list|()
argument_list|)
operator|>
name|flushLogId
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Someone else created new logs. Expected maxLogId< "
operator|+
name|flushLogId
argument_list|)
expr_stmt|;
name|logs
operator|.
name|getLast
argument_list|()
operator|.
name|removeFile
argument_list|(
name|this
operator|.
name|walArchiveDir
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// We have the lease on the log
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|rollWriter
parameter_list|(
specifier|final
name|long
name|logId
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|logId
operator|>
name|flushLogId
operator|:
literal|"logId="
operator|+
name|logId
operator|+
literal|" flushLogId="
operator|+
name|flushLogId
assert|;
assert|assert
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
operator|:
literal|"expected to be the lock owner. "
operator|+
name|lock
operator|.
name|isLocked
argument_list|()
assert|;
name|ProcedureWALHeader
name|header
init|=
name|ProcedureWALHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|ProcedureWALFormat
operator|.
name|HEADER_VERSION
argument_list|)
operator|.
name|setType
argument_list|(
name|ProcedureWALFormat
operator|.
name|LOG_TYPE_STREAM
argument_list|)
operator|.
name|setMinProcId
argument_list|(
name|storeTracker
operator|.
name|getActiveMinProcId
argument_list|()
argument_list|)
operator|.
name|setLogId
argument_list|(
name|logId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|newStream
init|=
literal|null
decl_stmt|;
name|Path
name|newLogFile
init|=
literal|null
decl_stmt|;
name|long
name|startPos
init|=
operator|-
literal|1
decl_stmt|;
name|newLogFile
operator|=
name|getLogFilePath
argument_list|(
name|logId
argument_list|)
expr_stmt|;
try|try
block|{
name|newStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|newLogFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Log file with id="
operator|+
name|logId
operator|+
literal|" already exists"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to create log file with id="
operator|+
name|logId
argument_list|,
name|re
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|ProcedureWALFormat
operator|.
name|writeHeader
argument_list|(
name|newStream
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|startPos
operator|=
name|newStream
operator|.
name|getPos
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception writing header"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|newStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|closeCurrentLogStream
argument_list|()
expr_stmt|;
name|storeTracker
operator|.
name|resetUpdates
argument_list|()
expr_stmt|;
name|stream
operator|=
name|newStream
expr_stmt|;
name|flushLogId
operator|=
name|logId
expr_stmt|;
name|totalSynced
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|long
name|rollTs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|lastRollTs
operator|.
name|set
argument_list|(
name|rollTs
argument_list|)
expr_stmt|;
name|logs
operator|.
name|add
argument_list|(
operator|new
name|ProcedureWALFile
argument_list|(
name|fs
argument_list|,
name|newLogFile
argument_list|,
name|header
argument_list|,
name|startPos
argument_list|,
name|rollTs
argument_list|)
argument_list|)
expr_stmt|;
comment|// if it's the first next WAL being added, build the holding cleanup tracker
if|if
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|buildHoldingCleanupTracker
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|>
name|walCountWarnThreshold
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"procedure WALs count="
operator|+
name|logs
operator|.
name|size
argument_list|()
operator|+
literal|" above the warning threshold "
operator|+
name|walCountWarnThreshold
operator|+
literal|". check running procedures to see if something is stuck."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Roll new state log: "
operator|+
name|logId
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|closeCurrentLogStream
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|ProcedureWALFile
name|log
init|=
name|logs
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|log
operator|.
name|setProcIds
argument_list|(
name|storeTracker
operator|.
name|getUpdatedMinProcId
argument_list|()
argument_list|,
name|storeTracker
operator|.
name|getUpdatedMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|updateLocalTracker
argument_list|(
name|storeTracker
argument_list|)
expr_stmt|;
name|long
name|trailerSize
init|=
name|ProcedureWALFormat
operator|.
name|writeTrailer
argument_list|(
name|stream
argument_list|,
name|storeTracker
argument_list|)
decl_stmt|;
name|log
operator|.
name|addToSize
argument_list|(
name|trailerSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to write the trailer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to close the stream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|stream
operator|=
literal|null
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Log Files cleaner helpers
comment|// ==========================================================================
specifier|private
name|void
name|removeInactiveLogs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We keep track of which procedures are holding the oldest WAL in 'holdingCleanupTracker'.
comment|// once there is nothing olding the oldest WAL we can remove it.
while|while
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|holdingCleanupTracker
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeLogFile
argument_list|(
name|logs
operator|.
name|getFirst
argument_list|()
argument_list|,
name|walArchiveDir
argument_list|)
expr_stmt|;
name|buildHoldingCleanupTracker
argument_list|()
expr_stmt|;
block|}
comment|// TODO: In case we are holding up a lot of logs for long time we should
comment|// rewrite old procedures (in theory parent procs) to the new WAL.
block|}
specifier|private
name|void
name|buildHoldingCleanupTracker
parameter_list|()
block|{
if|if
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
comment|// we only have one wal, so nothing to do
name|holdingCleanupTracker
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// compute the holding tracker.
comment|//  - the first WAL is used for the 'updates'
comment|//  - the other WALs are scanned to remove procs already in other wals.
comment|// TODO: exit early if holdingCleanupTracker.isEmpty()
name|holdingCleanupTracker
operator|.
name|resetTo
argument_list|(
name|logs
operator|.
name|getFirst
argument_list|()
operator|.
name|getTracker
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|holdingCleanupTracker
operator|.
name|setDeletedIfSet
argument_list|(
name|storeTracker
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|,
name|size
init|=
name|logs
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|holdingCleanupTracker
operator|.
name|setDeletedIfSet
argument_list|(
name|logs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTracker
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove all logs with logId<= {@code lastLogId}.    */
specifier|private
name|void
name|removeAllLogs
parameter_list|(
name|long
name|lastLogId
parameter_list|)
block|{
if|if
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Remove all state logs with ID less than "
operator|+
name|lastLogId
argument_list|)
expr_stmt|;
block|}
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|logs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|ProcedureWALFile
name|log
init|=
name|logs
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastLogId
operator|<
name|log
operator|.
name|getLogId
argument_list|()
condition|)
block|{
break|break;
block|}
name|removeLogFile
argument_list|(
name|log
argument_list|,
name|walArchiveDir
argument_list|)
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|removed
condition|)
block|{
name|buildHoldingCleanupTracker
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|removeLogFile
parameter_list|(
specifier|final
name|ProcedureWALFile
name|log
parameter_list|,
specifier|final
name|Path
name|walArchiveDir
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing log="
operator|+
name|log
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|removeFile
argument_list|(
name|walArchiveDir
argument_list|)
expr_stmt|;
name|logs
operator|.
name|remove
argument_list|(
name|log
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed log="
operator|+
name|log
operator|+
literal|", activeLogs="
operator|+
name|logs
argument_list|)
expr_stmt|;
block|}
assert|assert
name|logs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|:
literal|"expected at least one log"
assert|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove log: "
operator|+
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// ==========================================================================
comment|//  FileSystem Log Files helpers
comment|// ==========================================================================
specifier|public
name|Path
name|getWALDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|walDir
return|;
block|}
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|fs
return|;
block|}
specifier|protected
name|Path
name|getLogFilePath
parameter_list|(
specifier|final
name|long
name|logId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
name|walDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|LOG_PREFIX
operator|+
literal|"%020d.log"
argument_list|,
name|logId
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|getLogIdFromName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|int
name|end
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|".log"
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
decl_stmt|;
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|PathFilter
name|WALS_PATH_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|name
operator|.
name|startsWith
argument_list|(
name|LOG_PREFIX
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|".log"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
name|FILE_STATUS_ID_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileStatus
name|a
parameter_list|,
name|FileStatus
name|b
parameter_list|)
block|{
specifier|final
name|long
name|aId
init|=
name|getLogIdFromName
argument_list|(
name|a
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|bId
init|=
name|getLogIdFromName
argument_list|(
name|b
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|aId
argument_list|,
name|bId
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|FileStatus
index|[]
name|getLogFiles
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|walDir
argument_list|,
name|WALS_PATH_FILTER
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|files
argument_list|,
name|FILE_STATUS_ID_COMPARATOR
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Log directory not found: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|long
name|getMaxLogId
parameter_list|(
specifier|final
name|FileStatus
index|[]
name|logFiles
parameter_list|)
block|{
name|long
name|maxLogId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|logFiles
operator|!=
literal|null
operator|&&
name|logFiles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logFiles
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|maxLogId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLogId
argument_list|,
name|getLogIdFromName
argument_list|(
name|logFiles
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|maxLogId
return|;
block|}
comment|/**    * @return Max-LogID of the specified log file set    */
specifier|private
name|long
name|initOldLogs
parameter_list|(
specifier|final
name|FileStatus
index|[]
name|logFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|logs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|long
name|maxLogId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|logFiles
operator|!=
literal|null
operator|&&
name|logFiles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logFiles
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Path
name|logPath
init|=
name|logFiles
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|leaseRecovery
operator|.
name|recoverFileLease
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"wal aborting"
argument_list|)
throw|;
block|}
name|maxLogId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLogId
argument_list|,
name|getLogIdFromName
argument_list|(
name|logPath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ProcedureWALFile
name|log
init|=
name|initOldLog
argument_list|(
name|logFiles
index|[
name|i
index|]
argument_list|,
name|this
operator|.
name|walArchiveDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|logs
operator|.
name|add
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|this
operator|.
name|logs
argument_list|)
expr_stmt|;
name|initTrackerFromOldLogs
argument_list|()
expr_stmt|;
block|}
return|return
name|maxLogId
return|;
block|}
comment|/**    * If last log's tracker is not null, use it as {@link #storeTracker}.    * Otherwise, set storeTracker as partial, and let {@link ProcedureWALFormatReader} rebuild    * it using entries in the log.    */
specifier|private
name|void
name|initTrackerFromOldLogs
parameter_list|()
block|{
if|if
condition|(
name|logs
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|isRunning
argument_list|()
condition|)
return|return;
name|ProcedureWALFile
name|log
init|=
name|logs
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|log
operator|.
name|getTracker
argument_list|()
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|storeTracker
operator|.
name|resetTo
argument_list|(
name|log
operator|.
name|getTracker
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeTracker
operator|.
name|reset
argument_list|()
expr_stmt|;
name|storeTracker
operator|.
name|setPartialFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Loads given log file and it's tracker.    */
specifier|private
name|ProcedureWALFile
name|initOldLog
parameter_list|(
specifier|final
name|FileStatus
name|logFile
parameter_list|,
specifier|final
name|Path
name|walArchiveDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ProcedureWALFile
name|log
init|=
operator|new
name|ProcedureWALFile
argument_list|(
name|fs
argument_list|,
name|logFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|logFile
operator|.
name|getLen
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Remove uninitialized log: "
operator|+
name|logFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|removeFile
argument_list|(
name|walArchiveDir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opening Pv2 "
operator|+
name|logFile
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|log
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProcedureWALFormat
operator|.
name|InvalidWALDataException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Remove uninitialized log: "
operator|+
name|logFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|removeFile
argument_list|(
name|walArchiveDir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to read state log: "
operator|+
name|logFile
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|log
operator|.
name|readTracker
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|getTracker
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
name|log
operator|.
name|getTracker
argument_list|()
operator|.
name|setPartialFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to read tracker for "
operator|+
name|log
operator|+
literal|" - "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|log
return|;
block|}
block|}
end_class

end_unit

