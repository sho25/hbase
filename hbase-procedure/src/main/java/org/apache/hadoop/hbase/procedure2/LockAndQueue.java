begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Locking for mutual exclusion between procedures. Used only by procedure framework internally.  * {@link LockAndQueue} has two purposes:  *<ol>  *<li>Acquire/release exclusive/shared locks.</li>  *<li>Maintains a list of procedures waiting on this lock.  *      {@link LockAndQueue} extends {@link ProcedureDeque} class. Blocked Procedures are added  *      to our super Deque. Using inheritance over composition to keep the Deque of waiting  *      Procedures is unusual, but we do it this way because in certain cases, there will be  *      millions of regions. This layout uses less memory.  *</ol>  *  *<p>NOT thread-safe. Needs external concurrency control: e.g. uses in MasterProcedureScheduler are  * guarded by schedLock().  *<br>  * There is no need of 'volatile' keyword for member variables because of memory synchronization  * guarantees of locks (see 'Memory Synchronization',  * http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html)  *<br>  * We do not implement Lock interface because we need exclusive and shared locking, and also  * because try-lock functions require procedure id.  *<br>  * We do not use ReentrantReadWriteLock directly because of its high memory overhead.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|LockAndQueue
extends|extends
name|ProcedureDeque
implements|implements
name|LockStatus
block|{
specifier|private
name|Procedure
argument_list|<
name|?
argument_list|>
name|exclusiveLockOwnerProcedure
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|sharedLock
init|=
literal|0
decl_stmt|;
comment|// ======================================================================
comment|//  Lock Status
comment|// ======================================================================
annotation|@
name|Override
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|hasExclusiveLock
argument_list|()
operator|||
name|sharedLock
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasExclusiveLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|exclusiveLockOwnerProcedure
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLockOwner
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
return|return
name|getExclusiveLockProcIdOwner
argument_list|()
operator|==
name|procId
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasParentLock
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
return|return
name|proc
operator|.
name|hasParent
argument_list|()
operator|&&
operator|(
name|isLockOwner
argument_list|(
name|proc
operator|.
name|getParentProcId
argument_list|()
argument_list|)
operator|||
name|isLockOwner
argument_list|(
name|proc
operator|.
name|getRootProcId
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasLockAccess
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
return|return
name|isLockOwner
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
operator|||
name|hasParentLock
argument_list|(
name|proc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Procedure
argument_list|<
name|?
argument_list|>
name|getExclusiveLockOwnerProcedure
parameter_list|()
block|{
return|return
name|exclusiveLockOwnerProcedure
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExclusiveLockProcIdOwner
parameter_list|()
block|{
if|if
condition|(
name|exclusiveLockOwnerProcedure
operator|==
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
else|else
block|{
return|return
name|exclusiveLockOwnerProcedure
operator|.
name|getProcId
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSharedLockCount
parameter_list|()
block|{
return|return
name|sharedLock
return|;
block|}
comment|// ======================================================================
comment|//  try/release Shared/Exclusive lock
comment|// ======================================================================
specifier|public
name|boolean
name|trySharedLock
parameter_list|()
block|{
if|if
condition|(
name|hasExclusiveLock
argument_list|()
condition|)
return|return
literal|false
return|;
name|sharedLock
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|releaseSharedLock
parameter_list|()
block|{
return|return
operator|--
name|sharedLock
operator|==
literal|0
return|;
block|}
specifier|public
name|boolean
name|tryExclusiveLock
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|isLocked
argument_list|()
condition|)
return|return
name|hasLockAccess
argument_list|(
name|proc
argument_list|)
return|;
name|exclusiveLockOwnerProcedure
operator|=
name|proc
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * @return True if we released a lock.    */
specifier|public
name|boolean
name|releaseExclusiveLock
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|isLockOwner
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
condition|)
block|{
name|exclusiveLockOwnerProcedure
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exclusiveLockOwner="
operator|+
operator|(
name|hasExclusiveLock
argument_list|()
condition|?
name|getExclusiveLockProcIdOwner
argument_list|()
else|:
literal|"NONE"
operator|)
operator|+
literal|", sharedLockCount="
operator|+
name|getSharedLockCount
argument_list|()
operator|+
literal|", waitingProcCount="
operator|+
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

