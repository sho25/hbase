begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IdLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Internal cleaner that removes the completed procedure results after a TTL.  *<p/>  * NOTE: This is a special case handled in timeoutLoop().  *<p/>  * Since the client code looks more or less like:  *  *<pre>  *   procId = master.doOperation()  *   while (master.getProcResult(procId) == ProcInProgress);  *</pre>  *  * The master should not throw away the proc result as soon as the procedure is done but should wait  * a result request from the client (see executor.removeResult(procId)) The client will call  * something like master.isProcDone() or master.getProcResult() which will return the result/state  * to the client, and it will mark the completed proc as ready to delete. note that the client may  * not receive the response from the master (e.g. master failover) so, if we delay a bit the real  * deletion of the proc result the client will be able to get the result the next try.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|CompletedProcedureCleaner
parameter_list|<
name|TEnvironment
parameter_list|>
extends|extends
name|ProcedureInMemoryChore
argument_list|<
name|TEnvironment
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CompletedProcedureCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|CLEANER_INTERVAL_CONF_KEY
init|=
literal|"hbase.procedure.cleaner.interval"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CLEANER_INTERVAL
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
comment|// 30sec
specifier|private
specifier|static
specifier|final
name|String
name|BATCH_SIZE_CONF_KEY
init|=
literal|"hbase.procedure.cleaner.evict.batch.size"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BATCH_SIZE
init|=
literal|32
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|completed
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|NonceKey
argument_list|,
name|Long
argument_list|>
name|nonceKeysToProcIdsMap
decl_stmt|;
specifier|private
specifier|final
name|ProcedureStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|IdLock
name|procExecutionLock
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|CompletedProcedureCleaner
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ProcedureStore
name|store
parameter_list|,
name|IdLock
name|procExecutionLock
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|completedMap
parameter_list|,
name|Map
argument_list|<
name|NonceKey
argument_list|,
name|Long
argument_list|>
name|nonceKeysToProcIdsMap
parameter_list|)
block|{
comment|// set the timeout interval that triggers the periodic-procedure
name|super
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|CLEANER_INTERVAL_CONF_KEY
argument_list|,
name|DEFAULT_CLEANER_INTERVAL
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|completed
operator|=
name|completedMap
expr_stmt|;
name|this
operator|.
name|nonceKeysToProcIdsMap
operator|=
name|nonceKeysToProcIdsMap
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|procExecutionLock
operator|=
name|procExecutionLock
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|periodicExecute
parameter_list|(
specifier|final
name|TEnvironment
name|env
parameter_list|)
block|{
if|if
condition|(
name|completed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No completed procedures to cleanup."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|final
name|long
name|evictTtl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ProcedureExecutor
operator|.
name|EVICT_TTL_CONF_KEY
argument_list|,
name|ProcedureExecutor
operator|.
name|DEFAULT_EVICT_TTL
argument_list|)
decl_stmt|;
specifier|final
name|long
name|evictAckTtl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ProcedureExecutor
operator|.
name|EVICT_ACKED_TTL_CONF_KEY
argument_list|,
name|ProcedureExecutor
operator|.
name|DEFAULT_ACKED_EVICT_TTL
argument_list|)
decl_stmt|;
specifier|final
name|int
name|batchSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|BATCH_SIZE_CONF_KEY
argument_list|,
name|DEFAULT_BATCH_SIZE
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|batchIds
init|=
operator|new
name|long
index|[
name|batchSize
index|]
decl_stmt|;
name|int
name|batchCount
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
name|completed
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|store
operator|.
name|isRunning
argument_list|()
condition|)
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|CompletedProcedureRetainer
argument_list|<
name|TEnvironment
argument_list|>
name|retainer
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Procedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
name|retainer
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|IdLock
operator|.
name|Entry
name|lockEntry
decl_stmt|;
try|try
block|{
name|lockEntry
operator|=
name|procExecutionLock
operator|.
name|getLockEntry
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// can only happen if interrupted, so not a big deal to propagate it
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
comment|// TODO: Select TTL based on Procedure type
if|if
condition|(
name|retainer
operator|.
name|isExpired
argument_list|(
name|now
argument_list|,
name|evictTtl
argument_list|,
name|evictAckTtl
argument_list|)
condition|)
block|{
comment|// Failed procedures aren't persisted in WAL.
if|if
condition|(
operator|!
operator|(
name|proc
operator|instanceof
name|FailedProcedure
operator|)
condition|)
block|{
name|batchIds
index|[
name|batchCount
operator|++
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|batchCount
operator|==
name|batchIds
operator|.
name|length
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|batchIds
argument_list|,
literal|0
argument_list|,
name|batchCount
argument_list|)
expr_stmt|;
name|batchCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|final
name|NonceKey
name|nonceKey
init|=
name|proc
operator|.
name|getNonceKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|nonceKey
operator|!=
literal|null
condition|)
block|{
name|nonceKeysToProcIdsMap
operator|.
name|remove
argument_list|(
name|nonceKey
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Evict completed {}"
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|procExecutionLock
operator|.
name|releaseLockEntry
argument_list|(
name|lockEntry
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batchCount
operator|>
literal|0
condition|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|batchIds
argument_list|,
literal|0
argument_list|,
name|batchCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

