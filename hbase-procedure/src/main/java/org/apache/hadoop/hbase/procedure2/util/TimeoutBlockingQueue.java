begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|TimeoutBlockingQueue
parameter_list|<
name|E
parameter_list|>
block|{
specifier|public
specifier|static
interface|interface
name|TimeoutRetriever
parameter_list|<
name|T
parameter_list|>
block|{
name|long
name|getTimeout
parameter_list|(
name|T
name|object
parameter_list|)
function_decl|;
name|TimeUnit
name|getTimeUnit
parameter_list|(
name|T
name|object
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|waitCond
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TimeoutRetriever
argument_list|<
name|?
super|super
name|E
argument_list|>
name|timeoutRetriever
decl_stmt|;
specifier|private
name|E
index|[]
name|objects
decl_stmt|;
specifier|private
name|int
name|head
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|tail
init|=
literal|0
decl_stmt|;
specifier|public
name|TimeoutBlockingQueue
parameter_list|(
name|TimeoutRetriever
argument_list|<
name|?
super|super
name|E
argument_list|>
name|timeoutRetriever
parameter_list|)
block|{
name|this
argument_list|(
literal|32
argument_list|,
name|timeoutRetriever
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|TimeoutBlockingQueue
parameter_list|(
name|int
name|capacity
parameter_list|,
name|TimeoutRetriever
argument_list|<
name|?
super|super
name|E
argument_list|>
name|timeoutRetriever
parameter_list|)
block|{
name|this
operator|.
name|objects
operator|=
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
name|this
operator|.
name|timeoutRetriever
operator|=
name|timeoutRetriever
expr_stmt|;
block|}
specifier|public
name|void
name|dump
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|head
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"["
operator|+
name|objects
index|[
name|i
index|]
operator|+
literal|"] "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|tail
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"]"
operator|+
name|objects
index|[
name|i
index|]
operator|+
literal|"[ "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|objects
index|[
name|i
index|]
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|head
operator|!=
name|tail
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|head
init|;
name|i
operator|<
name|tail
condition|;
operator|++
name|i
control|)
block|{
name|objects
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|head
operator|=
literal|0
expr_stmt|;
name|tail
operator|=
literal|0
expr_stmt|;
name|waitCond
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|addElement
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|waitCond
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
literal|"WA_AWAIT_NOT_IN_LOOP"
argument_list|)
specifier|public
name|E
name|poll
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
name|waitCond
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|E
name|elem
init|=
name|objects
index|[
name|head
index|]
decl_stmt|;
name|long
name|nanos
init|=
name|getNanosTimeout
argument_list|(
name|elem
argument_list|)
decl_stmt|;
name|nanos
operator|=
name|waitCond
operator|.
name|awaitNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
return|return
name|nanos
operator|>
literal|0
condition|?
literal|null
else|:
name|removeFirst
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|tail
operator|-
name|head
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|(
name|tail
operator|-
name|head
operator|)
operator|==
literal|0
return|;
block|}
specifier|public
name|void
name|signalAll
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|waitCond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addElement
parameter_list|(
name|E
name|elem
parameter_list|)
block|{
name|int
name|size
init|=
operator|(
name|tail
operator|-
name|head
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|objects
operator|.
name|length
operator|-
name|size
operator|)
operator|==
literal|0
condition|)
block|{
name|int
name|capacity
init|=
name|size
operator|+
operator|(
operator|(
name|size
operator|<
literal|64
operator|)
condition|?
operator|(
name|size
operator|+
literal|2
operator|)
else|:
operator|(
name|size
operator|>>
literal|1
operator|)
operator|)
decl_stmt|;
name|E
index|[]
name|newObjects
init|=
operator|(
name|E
index|[]
operator|)
operator|new
name|Object
index|[
name|capacity
index|]
decl_stmt|;
if|if
condition|(
name|compareTimeouts
argument_list|(
name|objects
index|[
name|tail
operator|-
literal|1
index|]
argument_list|,
name|elem
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// Append
name|System
operator|.
name|arraycopy
argument_list|(
name|objects
argument_list|,
name|head
argument_list|,
name|newObjects
argument_list|,
literal|0
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|tail
operator|-=
name|head
expr_stmt|;
name|newObjects
index|[
name|tail
operator|++
index|]
operator|=
name|elem
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compareTimeouts
argument_list|(
name|objects
index|[
name|head
index|]
argument_list|,
name|elem
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// Prepend
name|System
operator|.
name|arraycopy
argument_list|(
name|objects
argument_list|,
name|head
argument_list|,
name|newObjects
argument_list|,
literal|1
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|newObjects
index|[
literal|0
index|]
operator|=
name|elem
expr_stmt|;
name|tail
operator|-=
operator|(
name|head
operator|-
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// Insert in the middle
name|int
name|index
init|=
name|upperBound
argument_list|(
name|head
argument_list|,
name|tail
operator|-
literal|1
argument_list|,
name|elem
argument_list|)
decl_stmt|;
name|int
name|newIndex
init|=
operator|(
name|index
operator|-
name|head
operator|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|objects
argument_list|,
name|head
argument_list|,
name|newObjects
argument_list|,
literal|0
argument_list|,
name|newIndex
argument_list|)
expr_stmt|;
name|newObjects
index|[
name|newIndex
index|]
operator|=
name|elem
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|objects
argument_list|,
name|index
argument_list|,
name|newObjects
argument_list|,
name|newIndex
operator|+
literal|1
argument_list|,
name|tail
operator|-
name|index
argument_list|)
expr_stmt|;
name|tail
operator|-=
operator|(
name|head
operator|-
literal|1
operator|)
expr_stmt|;
block|}
name|head
operator|=
literal|0
expr_stmt|;
name|objects
operator|=
name|newObjects
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tail
operator|==
name|objects
operator|.
name|length
condition|)
block|{
comment|// shift down |-----AAAAAAA|
name|tail
operator|-=
name|head
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|objects
argument_list|,
name|head
argument_list|,
name|objects
argument_list|,
literal|0
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|head
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|tail
operator|==
name|head
operator|||
name|compareTimeouts
argument_list|(
name|objects
index|[
name|tail
operator|-
literal|1
index|]
argument_list|,
name|elem
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// Append
name|objects
index|[
name|tail
operator|++
index|]
operator|=
name|elem
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|head
operator|>
literal|0
operator|&&
name|compareTimeouts
argument_list|(
name|objects
index|[
name|head
index|]
argument_list|,
name|elem
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// Prepend
name|objects
index|[
operator|--
name|head
index|]
operator|=
name|elem
expr_stmt|;
block|}
else|else
block|{
comment|// Insert in the middle
name|int
name|index
init|=
name|upperBound
argument_list|(
name|head
argument_list|,
name|tail
operator|-
literal|1
argument_list|,
name|elem
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|objects
argument_list|,
name|index
argument_list|,
name|objects
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|tail
operator|-
name|index
argument_list|)
expr_stmt|;
name|objects
index|[
name|index
index|]
operator|=
name|elem
expr_stmt|;
name|tail
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|E
name|removeFirst
parameter_list|()
block|{
name|E
name|elem
init|=
name|objects
index|[
name|head
index|]
decl_stmt|;
name|objects
index|[
name|head
index|]
operator|=
literal|null
expr_stmt|;
name|head
operator|=
operator|(
name|head
operator|+
literal|1
operator|)
operator|%
name|objects
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|head
operator|==
literal|0
condition|)
name|tail
operator|=
literal|0
expr_stmt|;
return|return
name|elem
return|;
block|}
specifier|private
name|int
name|upperBound
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|E
name|key
parameter_list|)
block|{
while|while
condition|(
name|start
operator|<
name|end
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|start
operator|+
name|end
operator|)
operator|>>>
literal|1
decl_stmt|;
name|E
name|mitem
init|=
name|objects
index|[
name|mid
index|]
decl_stmt|;
name|int
name|cmp
init|=
name|compareTimeouts
argument_list|(
name|mitem
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|end
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
name|start
return|;
block|}
specifier|private
name|int
name|compareTimeouts
parameter_list|(
specifier|final
name|E
name|a
parameter_list|,
specifier|final
name|E
name|b
parameter_list|)
block|{
name|long
name|t1
init|=
name|getNanosTimeout
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|long
name|t2
init|=
name|getNanosTimeout
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
operator|(
name|t1
operator|<
name|t2
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|t1
operator|>
name|t2
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
specifier|private
name|long
name|getNanosTimeout
parameter_list|(
specifier|final
name|E
name|obj
parameter_list|)
block|{
name|TimeUnit
name|unit
init|=
name|timeoutRetriever
operator|.
name|getTimeUnit
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
name|timeoutRetriever
operator|.
name|getTimeout
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
return|;
block|}
block|}
end_class

end_unit

