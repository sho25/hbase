begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
operator|.
name|SequentialProcedureData
import|;
end_import

begin_comment
comment|/**  * A SequentialProcedure describes one step in a procedure chain.  *   -&gt; Step 1 -&gt; Step 2 -&gt; Step 3  *  * The main difference from a base Procedure is that the execute() of a  * SequentialProcedure will be called only once, there will be no second  * execute() call once the child are finished. which means once the child  * of a SequentialProcedure are completed the SequentialProcedure is completed too.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|abstract
class|class
name|SequentialProcedure
parameter_list|<
name|TEnvironment
parameter_list|>
extends|extends
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
block|{
specifier|private
name|boolean
name|executed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Procedure
index|[]
name|doExecute
parameter_list|(
specifier|final
name|TEnvironment
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
name|updateTimestamp
argument_list|()
expr_stmt|;
try|try
block|{
name|Procedure
index|[]
name|children
init|=
operator|!
name|executed
condition|?
name|execute
argument_list|(
name|env
argument_list|)
else|:
literal|null
decl_stmt|;
name|executed
operator|=
operator|!
name|executed
expr_stmt|;
return|return
name|children
return|;
block|}
finally|finally
block|{
name|updateTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRollback
parameter_list|(
specifier|final
name|TEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|updateTimestamp
argument_list|()
expr_stmt|;
if|if
condition|(
name|executed
condition|)
block|{
try|try
block|{
name|rollback
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|executed
operator|=
operator|!
name|executed
expr_stmt|;
block|}
finally|finally
block|{
name|updateTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|SequentialProcedureData
operator|.
name|Builder
name|data
init|=
name|SequentialProcedureData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|data
operator|.
name|setExecuted
argument_list|(
name|executed
argument_list|)
expr_stmt|;
name|data
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|SequentialProcedureData
name|data
init|=
name|SequentialProcedureData
operator|.
name|parseDelimitedFrom
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|executed
operator|=
name|data
operator|.
name|getExecuted
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

