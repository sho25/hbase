begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_comment
comment|/**  * This class is used to track the active procedures when loading procedures from proc wal file.  *<p/>  * We will read proc wal files from new to old, but when reading a proc wal file, we will still read  * from top to bottom, so there are two groups of methods for this class.  *<p/>  * The first group is {@link #add(ProcedureProtos.Procedure)} and {@link #remove(long)}. It is used  * when reading a proc wal file. In these methods, for the same procedure, typically the one comes  * later should win, please see the comment for  * {@link #isIncreasing(ProcedureProtos.Procedure, ProcedureProtos.Procedure)} to see the  * exceptions.  *<p/>  * The second group is {@link #merge(WALProcedureMap)}. We will have a global  * {@link WALProcedureMap} to hold global the active procedures, and a local {@link WALProcedureMap}  * to hold the active procedures for the current proc wal file. And when we finish reading a proc  * wal file, we will merge the local one into the global one, by calling the  * {@link #merge(WALProcedureMap)} method of the global one and pass the local one in. In this  * method, for the same procedure, the one comes earlier will win, as we read the proc wal files  * from new to old(the reverse order).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|WALProcedureMap
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WALProcedureMap
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ProcedureProtos
operator|.
name|Procedure
argument_list|>
name|procMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|minModifiedProcId
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|long
name|maxModifiedProcId
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|private
name|void
name|trackProcId
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|minModifiedProcId
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minModifiedProcId
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|maxModifiedProcId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxModifiedProcId
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return True if this new procedure is 'richer' than the current one else false and we log this    *         incidence where it appears that the WAL has older entries appended after newer ones.    *         See HBASE-18152.    */
specifier|private
specifier|static
name|boolean
name|isIncreasing
parameter_list|(
name|ProcedureProtos
operator|.
name|Procedure
name|current
parameter_list|,
name|ProcedureProtos
operator|.
name|Procedure
name|candidate
parameter_list|)
block|{
comment|// Check that the procedures we see are 'increasing'. We used to compare
comment|// procedure id first and then update time but it can legitimately go backwards if the
comment|// procedure is failed or rolled back so that was unreliable. Was going to compare
comment|// state but lets see if comparing update time enough (unfortunately this issue only
comment|// seen under load...)
name|boolean
name|increasing
init|=
name|current
operator|.
name|getLastUpdate
argument_list|()
operator|<=
name|candidate
operator|.
name|getLastUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|increasing
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"NOT INCREASING! current="
operator|+
name|current
operator|+
literal|", candidate="
operator|+
name|candidate
argument_list|)
expr_stmt|;
block|}
return|return
name|increasing
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|ProcedureProtos
operator|.
name|Procedure
name|proc
parameter_list|)
block|{
name|procMap
operator|.
name|compute
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|,
parameter_list|(
name|procId
parameter_list|,
name|existingProc
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|existingProc
operator|==
literal|null
operator|||
name|isIncreasing
argument_list|(
name|existingProc
argument_list|,
name|proc
argument_list|)
condition|)
block|{
return|return
name|proc
return|;
block|}
else|else
block|{
return|return
name|existingProc
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|trackProcId
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|procMap
operator|.
name|remove
argument_list|(
name|procId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|procMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
return|return
name|procMap
operator|.
name|containsKey
argument_list|(
name|procId
argument_list|)
return|;
block|}
comment|/**    * Merge the given {@link WALProcedureMap} into this one. The {@link WALProcedureMap} passed in    * will be cleared after merging.    */
specifier|public
name|void
name|merge
parameter_list|(
name|WALProcedureMap
name|other
parameter_list|)
block|{
name|other
operator|.
name|procMap
operator|.
name|forEach
argument_list|(
name|procMap
operator|::
name|putIfAbsent
argument_list|)
expr_stmt|;
name|maxModifiedProcId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxModifiedProcId
argument_list|,
name|other
operator|.
name|maxModifiedProcId
argument_list|)
expr_stmt|;
name|minModifiedProcId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|minModifiedProcId
argument_list|,
name|other
operator|.
name|minModifiedProcId
argument_list|)
expr_stmt|;
name|other
operator|.
name|procMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|other
operator|.
name|maxModifiedProcId
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
name|other
operator|.
name|minModifiedProcId
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|ProcedureProtos
operator|.
name|Procedure
argument_list|>
name|getProcedures
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|procMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|long
name|getMinModifiedProcId
parameter_list|()
block|{
return|return
name|minModifiedProcId
return|;
block|}
specifier|public
name|long
name|getMaxModifiedProcId
parameter_list|()
block|{
return|return
name|maxModifiedProcId
return|;
block|}
block|}
end_class

end_unit

