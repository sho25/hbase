begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
operator|.
name|ProcedureWALEntry
import|;
end_import

begin_comment
comment|/**  * Helper class that loads the procedures stored in a WAL.  * @deprecated Since 2.3.0, will be removed in 4.0.0. Keep here only for rolling upgrading, now we  *             use the new region based procedure store.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ProcedureWALFormatReader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProcedureWALFormatReader
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * We will use the localProcedureMap to track the active procedures for the current proc wal file,    * and when we finished reading one proc wal file, we will merge he localProcedureMap to the    * procedureMap, which tracks the global active procedures.    *<p/>    * See the comments of {@link WALProcedureMap} for more details.    *<p/>    * After reading all the proc wal files, we will use the procedures in the procedureMap to build a    * {@link ProcedureTree}, and then give the result to the upper layer. See the comments of    * {@link ProcedureTree} and the code in {@link #finish()} for more details.    */
specifier|private
specifier|final
name|WALProcedureMap
name|localProcedureMap
init|=
operator|new
name|WALProcedureMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WALProcedureMap
name|procedureMap
init|=
operator|new
name|WALProcedureMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ProcedureWALFormat
operator|.
name|Loader
name|loader
decl_stmt|;
comment|/**    * Global tracker that will be used by the WALProcedureStore after load.    * If the last WAL was closed cleanly we already have a full tracker ready to be used.    * If the last WAL was truncated (e.g. master killed) the tracker will be empty    * and the 'partial' flag will be set. In this case, on WAL replay we are going    * to rebuild the tracker.    */
specifier|private
specifier|final
name|ProcedureStoreTracker
name|tracker
decl_stmt|;
comment|/**    * If tracker for a log file is partial (see {@link ProcedureStoreTracker#partial}), we re-build    * the list of procedures modified in that WAL because we need it for log cleaning purposes. If    * all procedures modified in a WAL are found to be obsolete, it can be safely deleted. (see    * {@link WALProcedureStore#removeInactiveLogs()}).    *<p/>    * Notice that, the deleted part for this tracker will not be global valid as we can only count    * the deletes in the current file, but it is not big problem as finally, the above tracker will    * have the global state of deleted, and it will also be used to build the cleanup tracker.    */
specifier|private
name|ProcedureStoreTracker
name|localTracker
decl_stmt|;
specifier|private
name|long
name|maxProcId
init|=
literal|0
decl_stmt|;
specifier|public
name|ProcedureWALFormatReader
parameter_list|(
specifier|final
name|ProcedureStoreTracker
name|tracker
parameter_list|,
name|ProcedureWALFormat
operator|.
name|Loader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|ProcedureWALFile
name|log
parameter_list|)
throws|throws
name|IOException
block|{
name|localTracker
operator|=
name|log
operator|.
name|getTracker
argument_list|()
expr_stmt|;
if|if
condition|(
name|localTracker
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rebuilding tracker for {}"
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
name|long
name|count
init|=
literal|0
decl_stmt|;
name|FSDataInputStream
name|stream
init|=
name|log
operator|.
name|getStream
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|hasMore
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|hasMore
condition|)
block|{
name|ProcedureWALEntry
name|entry
init|=
name|ProcedureWALFormat
operator|.
name|readEntry
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nothing left to decode. Exiting with missing EOF, log={}"
argument_list|,
name|log
argument_list|)
expr_stmt|;
break|break;
block|}
name|count
operator|++
expr_stmt|;
switch|switch
condition|(
name|entry
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PROCEDURE_WAL_INIT
case|:
name|readInitEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROCEDURE_WAL_INSERT
case|:
name|readInsertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROCEDURE_WAL_UPDATE
case|:
case|case
name|PROCEDURE_WAL_COMPACT
case|:
name|readUpdateEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROCEDURE_WAL_DELETE
case|:
name|readDeleteEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROCEDURE_WAL_EOF
case|:
name|hasMore
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|CorruptedWALProcedureStoreException
argument_list|(
literal|"Invalid entry: "
operator|+
name|entry
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Read {} entries in {}"
argument_list|,
name|count
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"While reading entry #{} in {}"
argument_list|,
name|count
argument_list|,
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|loader
operator|.
name|markCorruptedWAL
argument_list|(
name|log
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|localProcedureMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|setProcIds
argument_list|(
name|localProcedureMap
operator|.
name|getMinModifiedProcId
argument_list|()
argument_list|,
name|localProcedureMap
operator|.
name|getMaxModifiedProcId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|localTracker
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|localTracker
operator|.
name|setMinMaxModifiedProcIds
argument_list|(
name|localProcedureMap
operator|.
name|getMinModifiedProcId
argument_list|()
argument_list|,
name|localProcedureMap
operator|.
name|getMaxModifiedProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|procedureMap
operator|.
name|merge
argument_list|(
name|localProcedureMap
argument_list|)
expr_stmt|;
block|}
comment|// Do not reset the partial flag for local tracker, as here the local tracker only know the
comment|// procedures which are modified in this file.
block|}
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
comment|// notify the loader about the max proc ID
name|loader
operator|.
name|setMaxProcId
argument_list|(
name|maxProcId
argument_list|)
expr_stmt|;
comment|// build the procedure execution tree. When building we will verify that whether a procedure is
comment|// valid.
name|ProcedureTree
name|tree
init|=
name|ProcedureTree
operator|.
name|build
argument_list|(
name|procedureMap
operator|.
name|getProcedures
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|load
argument_list|(
name|tree
operator|.
name|getValidProcs
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|.
name|handleCorrupted
argument_list|(
name|tree
operator|.
name|getCorruptedProcs
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setDeletedIfPartial
parameter_list|(
name|ProcedureStoreTracker
name|tracker
parameter_list|,
name|long
name|procId
parameter_list|)
block|{
if|if
condition|(
name|tracker
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|tracker
operator|.
name|setDeleted
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|insertIfPartial
parameter_list|(
name|ProcedureStoreTracker
name|tracker
parameter_list|,
name|ProcedureProtos
operator|.
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|tracker
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|tracker
operator|.
name|insert
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadProcedure
parameter_list|(
name|ProcedureWALEntry
name|entry
parameter_list|,
name|ProcedureProtos
operator|.
name|Procedure
name|proc
parameter_list|)
block|{
name|maxProcId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxProcId
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRequired
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Read {} entry {}"
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|localProcedureMap
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|insertIfPartial
argument_list|(
name|tracker
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
name|insertIfPartial
argument_list|(
name|localTracker
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readInitEntry
parameter_list|(
name|ProcedureWALEntry
name|entry
parameter_list|)
block|{
assert|assert
name|entry
operator|.
name|getProcedureCount
argument_list|()
operator|==
literal|1
operator|:
literal|"Expected only one procedure"
assert|;
name|loadProcedure
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getProcedure
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readInsertEntry
parameter_list|(
name|ProcedureWALEntry
name|entry
parameter_list|)
block|{
assert|assert
name|entry
operator|.
name|getProcedureCount
argument_list|()
operator|>=
literal|1
operator|:
literal|"Expected one or more procedures"
assert|;
name|loadProcedure
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getProcedure
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|entry
operator|.
name|getProcedureCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|loadProcedure
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getProcedure
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|readUpdateEntry
parameter_list|(
name|ProcedureWALEntry
name|entry
parameter_list|)
block|{
assert|assert
name|entry
operator|.
name|getProcedureCount
argument_list|()
operator|==
literal|1
operator|:
literal|"Expected only one procedure"
assert|;
name|loadProcedure
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getProcedure
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readDeleteEntry
parameter_list|(
name|ProcedureWALEntry
name|entry
parameter_list|)
block|{
assert|assert
name|entry
operator|.
name|hasProcId
argument_list|()
operator|:
literal|"expected ProcID"
assert|;
if|if
condition|(
name|entry
operator|.
name|getChildIdCount
argument_list|()
operator|>
literal|0
condition|)
block|{
assert|assert
name|entry
operator|.
name|getProcedureCount
argument_list|()
operator|==
literal|1
operator|:
literal|"Expected only one procedure"
assert|;
comment|// update the parent procedure
name|loadProcedure
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getProcedure
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the child procedures of entry.getProcId()
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|count
init|=
name|entry
operator|.
name|getChildIdCount
argument_list|()
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|deleteEntry
argument_list|(
name|entry
operator|.
name|getChildId
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|entry
operator|.
name|getProcedureCount
argument_list|()
operator|==
literal|0
operator|:
literal|"Expected no procedures"
assert|;
comment|// delete the procedure
name|deleteEntry
argument_list|(
name|entry
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteEntry
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"delete entry {}"
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|maxProcId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxProcId
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|localProcedureMap
operator|.
name|remove
argument_list|(
name|procId
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|procedureMap
operator|.
name|contains
argument_list|(
name|procId
argument_list|)
assert|;
name|setDeletedIfPartial
argument_list|(
name|tracker
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|setDeletedIfPartial
argument_list|(
name|localTracker
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isDeleted
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
return|return
name|tracker
operator|.
name|isDeleted
argument_list|(
name|procId
argument_list|)
operator|==
name|ProcedureStoreTracker
operator|.
name|DeleteState
operator|.
name|YES
return|;
block|}
specifier|private
name|boolean
name|isRequired
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
return|return
operator|!
name|isDeleted
argument_list|(
name|procId
argument_list|)
operator|&&
operator|!
name|procedureMap
operator|.
name|contains
argument_list|(
name|procId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

