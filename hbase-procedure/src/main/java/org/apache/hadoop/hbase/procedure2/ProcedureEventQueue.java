begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Basic queue to store suspended procedures.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ProcedureEventQueue
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcedureEventQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ArrayDeque
argument_list|<
name|Procedure
argument_list|>
name|waitingProcedures
init|=
literal|null
decl_stmt|;
specifier|public
name|ProcedureEventQueue
parameter_list|()
block|{   }
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|synchronized
name|void
name|suspendProcedure
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|waitingProcedures
operator|==
literal|null
condition|)
block|{
name|waitingProcedures
operator|=
operator|new
name|ArrayDeque
argument_list|<
name|Procedure
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|waitingProcedures
operator|.
name|addLast
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|synchronized
name|void
name|removeProcedure
parameter_list|(
specifier|final
name|Procedure
name|proc
parameter_list|)
block|{
if|if
condition|(
name|waitingProcedures
operator|!=
literal|null
condition|)
block|{
name|waitingProcedures
operator|.
name|remove
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|synchronized
name|boolean
name|hasWaitingProcedures
parameter_list|()
block|{
return|return
name|waitingProcedures
operator|!=
literal|null
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|synchronized
name|Procedure
name|popWaitingProcedure
parameter_list|(
specifier|final
name|boolean
name|popFront
parameter_list|)
block|{
comment|// it will be nice to use IterableList on a procedure and avoid allocations...
name|Procedure
name|proc
init|=
name|popFront
condition|?
name|waitingProcedures
operator|.
name|removeFirst
argument_list|()
else|:
name|waitingProcedures
operator|.
name|removeLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitingProcedures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|waitingProcedures
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|proc
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|waitingProcedures
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|waitingProcedures
operator|!=
literal|null
condition|)
block|{
return|return
name|waitingProcedures
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

