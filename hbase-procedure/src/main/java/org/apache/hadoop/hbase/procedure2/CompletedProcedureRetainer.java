begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Hold the reference to a completed root procedure. Will be cleaned up after expired.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|CompletedProcedureRetainer
parameter_list|<
name|TEnvironment
parameter_list|>
block|{
specifier|private
specifier|final
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|procedure
decl_stmt|;
specifier|private
name|long
name|clientAckTime
decl_stmt|;
specifier|public
name|CompletedProcedureRetainer
parameter_list|(
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|procedure
parameter_list|)
block|{
name|this
operator|.
name|procedure
operator|=
name|procedure
expr_stmt|;
name|clientAckTime
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|Procedure
argument_list|<
name|TEnvironment
argument_list|>
name|getProcedure
parameter_list|()
block|{
return|return
name|procedure
return|;
block|}
specifier|public
name|boolean
name|hasClientAckTime
parameter_list|()
block|{
return|return
name|clientAckTime
operator|!=
operator|-
literal|1
return|;
block|}
specifier|public
name|long
name|getClientAckTime
parameter_list|()
block|{
return|return
name|clientAckTime
return|;
block|}
specifier|public
name|void
name|setClientAckTime
parameter_list|(
name|long
name|clientAckTime
parameter_list|)
block|{
name|this
operator|.
name|clientAckTime
operator|=
name|clientAckTime
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExpired
parameter_list|(
name|long
name|now
parameter_list|,
name|long
name|evictTtl
parameter_list|,
name|long
name|evictAckTtl
parameter_list|)
block|{
return|return
operator|(
name|hasClientAckTime
argument_list|()
operator|&&
operator|(
name|now
operator|-
name|getClientAckTime
argument_list|()
operator|)
operator|>=
name|evictAckTtl
operator|)
operator|||
operator|(
name|now
operator|-
name|procedure
operator|.
name|getLastUpdate
argument_list|()
operator|)
operator|>=
name|evictTtl
return|;
block|}
block|}
end_class

end_unit

