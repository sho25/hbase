begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|LoadCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|TestProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStressWALProcedureStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWALProcedureStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROCEDURE_STORE_SLOTS
init|=
literal|8
decl_stmt|;
specifier|private
name|WALProcedureStore
name|procStore
decl_stmt|;
specifier|private
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|testDir
decl_stmt|;
specifier|private
name|Path
name|logDir
decl_stmt|;
specifier|private
name|void
name|setupConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|WALProcedureStore
operator|.
name|USE_HSYNC_CONF_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|WALProcedureStore
operator|.
name|PERIODIC_ROLL_CONF_KEY
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|WALProcedureStore
operator|.
name|ROLL_THRESHOLD_CONF_KEY
argument_list|,
literal|128
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|setupConfiguration
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|testDir
operator|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDir
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"proc-logs"
argument_list|)
expr_stmt|;
name|procStore
operator|=
name|ProcedureTestingUtility
operator|.
name|createWalStore
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_STORE_SLOTS
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|procStore
operator|.
name|load
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertUpdateDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|LAST_PROC_ID
init|=
literal|19999
decl_stmt|;
specifier|final
name|Thread
index|[]
name|thread
init|=
operator|new
name|Thread
index|[
name|PROCEDURE_STORE_SLOTS
index|]
decl_stmt|;
specifier|final
name|AtomicLong
name|procCounter
init|=
operator|new
name|AtomicLong
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|100
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|thread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|TestProcedure
name|proc
decl_stmt|;
do|do
block|{
comment|// After HBASE-15579 there may be gap in the procId sequence, trying to simulate that.
name|long
name|procId
init|=
name|procCounter
operator|.
name|addAndGet
argument_list|(
literal|1
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|proc
operator|=
operator|new
name|TestProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
comment|// Insert
name|procStore
operator|.
name|insert
argument_list|(
name|proc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Update
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|nupdates
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
init|;
name|i
operator|<=
name|nupdates
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|0
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|procStore
operator|.
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
comment|// Delete
name|procStore
operator|.
name|delete
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|proc
operator|.
name|getProcId
argument_list|()
operator|<
name|LAST_PROC_ID
condition|)
do|;
block|}
block|}
expr_stmt|;
name|thread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|thread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|procStore
operator|.
name|getStoreTracker
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|procCounter
operator|.
name|get
argument_list|()
operator|>=
name|LAST_PROC_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procStore
operator|.
name|getStoreTracker
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
comment|// REENABLE after merge of
comment|// https://github.com/google/protobuf/issues/2228#issuecomment-252058282
specifier|public
name|void
name|testEntrySizeLimit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NITEMS
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NITEMS
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|256
operator|<<
name|i
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Writing %s"
argument_list|,
name|StringUtils
operator|.
name|humanSize
argument_list|(
name|data
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TestProcedure
name|proc
init|=
operator|new
name|TestProcedure
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// check that we are able to read the big proc-blobs
name|ProcedureTestingUtility
operator|.
name|storeRestartAndAssert
argument_list|(
name|procStore
argument_list|,
name|NITEMS
argument_list|,
name|NITEMS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

