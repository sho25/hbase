begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|NoopProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestLockAndQueue
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestLockAndQueue
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testHasLockAccess
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|NoopProcedure
argument_list|<
name|Void
argument_list|>
argument_list|>
name|procMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|NoopProcedure
argument_list|<
name|Void
argument_list|>
name|proc
init|=
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
decl_stmt|;
name|proc
operator|.
name|setProcId
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|proc
operator|.
name|setParentProcId
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setRootProcId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|procMap
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
name|LockAndQueue
name|laq
init|=
operator|new
name|LockAndQueue
argument_list|(
name|procMap
operator|::
name|get
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|laq
operator|.
name|hasLockAccess
argument_list|(
name|procMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|NoopProcedure
argument_list|<
name|Void
argument_list|>
name|procHasLock
init|=
name|procMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|laq
operator|.
name|tryExclusiveLock
argument_list|(
name|procHasLock
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|laq
operator|.
name|hasLockAccess
argument_list|(
name|procMap
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|j
init|=
name|i
init|;
name|j
operator|<=
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|laq
operator|.
name|hasLockAccess
argument_list|(
name|procMap
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|laq
operator|.
name|releaseExclusiveLock
argument_list|(
name|procHasLock
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

