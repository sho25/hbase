begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Exchanger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
operator|.
name|WALProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestProcedureCleanup
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestProcedureCleanup
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestProcedureCleanup
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROCEDURE_EXECUTOR_SLOTS
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|WALProcedureStore
name|procStore
decl_stmt|;
specifier|private
specifier|static
name|ProcedureExecutor
argument_list|<
name|Void
argument_list|>
name|procExecutor
decl_stmt|;
specifier|private
specifier|static
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|Path
name|testDir
decl_stmt|;
specifier|private
specifier|static
name|Path
name|logDir
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|void
name|createProcExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|procStore
operator|=
name|ProcedureTestingUtility
operator|.
name|createWalStore
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|procExecutor
operator|=
operator|new
name|ProcedureExecutor
argument_list|<>
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
name|procStore
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_EXECUTOR_SLOTS
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|initAndStartWorkers
argument_list|(
name|procExecutor
argument_list|,
name|PROCEDURE_EXECUTOR_SLOTS
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|WALProcedureStore
operator|.
name|EXEC_WAL_CLEANUP_ON_LOAD_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// NOTE: The executor will be created by each test
name|testDir
operator|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDir
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcedureShouldNotCleanOnLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|createProcExecutor
argument_list|()
expr_stmt|;
specifier|final
name|RootProcedure
name|proc
init|=
operator|new
name|RootProcedure
argument_list|()
decl_stmt|;
name|long
name|rootProc
init|=
name|procExecutor
operator|.
name|submitProcedure
argument_list|(
name|proc
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Begin to execute "
operator|+
name|rootProc
argument_list|)
expr_stmt|;
comment|// wait until the child procedure arrival
name|htu
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|procExecutor
operator|.
name|getProcedures
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|SuspendProcedure
name|suspendProcedure
init|=
operator|(
name|SuspendProcedure
operator|)
name|procExecutor
operator|.
name|getProcedures
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// wait until the suspendProcedure executed
name|suspendProcedure
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// roll the procedure log
name|LOG
operator|.
name|info
argument_list|(
literal|"Begin to roll log "
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finish to roll log "
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"begin to restart1 "
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finish to restart1 "
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procExecutor
operator|.
name|getProcedure
argument_list|(
name|rootProc
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"begin to restart2 "
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finish to restart2 "
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procExecutor
operator|.
name|getProcedure
argument_list|(
name|rootProc
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcedureUpdatedShouldClean
parameter_list|()
throws|throws
name|Exception
block|{
name|createProcExecutor
argument_list|()
expr_stmt|;
name|SuspendProcedure
name|suspendProcedure
init|=
operator|new
name|SuspendProcedure
argument_list|()
decl_stmt|;
name|long
name|suspendProc
init|=
name|procExecutor
operator|.
name|submitProcedure
argument_list|(
name|suspendProcedure
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Begin to execute "
operator|+
name|suspendProc
argument_list|)
expr_stmt|;
name|suspendProcedure
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"begin to restart1 "
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finish to restart1 "
argument_list|)
expr_stmt|;
name|htu
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|procExecutor
operator|.
name|getProcedure
argument_list|(
name|suspendProc
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Wait until the suspendProc executed after restart
name|suspendProcedure
operator|=
operator|(
name|SuspendProcedure
operator|)
name|procExecutor
operator|.
name|getProcedure
argument_list|(
name|suspendProc
argument_list|)
expr_stmt|;
name|suspendProcedure
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Should be 1 log since the suspendProcedure is updated in the new log
name|assertTrue
argument_list|(
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// restart procExecutor
name|LOG
operator|.
name|info
argument_list|(
literal|"begin to restart2"
argument_list|)
expr_stmt|;
comment|// Restart the executor but do not start the workers.
comment|// Otherwise, the suspendProcedure will soon be executed and the oldest log
comment|// will be cleaned, leaving only the newest log.
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finish to restart2"
argument_list|)
expr_stmt|;
comment|// There should be two active logs
name|assertTrue
argument_list|(
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|procExecutor
operator|.
name|startWorkers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcedureDeletedShouldClean
parameter_list|()
throws|throws
name|Exception
block|{
name|createProcExecutor
argument_list|()
expr_stmt|;
name|WaitProcedure
name|waitProcedure
init|=
operator|new
name|WaitProcedure
argument_list|()
decl_stmt|;
name|long
name|waitProce
init|=
name|procExecutor
operator|.
name|submitProcedure
argument_list|(
name|waitProcedure
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Begin to execute "
operator|+
name|waitProce
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"begin to restart1 "
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finish to restart1 "
argument_list|)
expr_stmt|;
name|htu
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
name|procExecutor
operator|.
name|getProcedure
argument_list|(
name|waitProce
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Wait until the suspendProc executed after restart
name|waitProcedure
operator|=
operator|(
name|WaitProcedure
operator|)
name|procExecutor
operator|.
name|getProcedure
argument_list|(
name|waitProce
argument_list|)
expr_stmt|;
name|waitProcedure
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Should be 1 log since the suspendProcedure is updated in the new log
name|assertTrue
argument_list|(
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// restart procExecutor
name|LOG
operator|.
name|info
argument_list|(
literal|"begin to restart2"
argument_list|)
expr_stmt|;
comment|// Restart the executor but do not start the workers.
comment|// Otherwise, the suspendProcedure will soon be executed and the oldest log
comment|// will be cleaned, leaving only the newest log.
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finish to restart2"
argument_list|)
expr_stmt|;
comment|// There should be two active logs
name|assertTrue
argument_list|(
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|procExecutor
operator|.
name|startWorkers
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|corrupt
parameter_list|(
name|FileStatus
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupt "
operator|+
name|file
argument_list|)
expr_stmt|;
name|Path
name|tmpFile
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|suffix
argument_list|(
literal|".tmp"
argument_list|)
decl_stmt|;
comment|// remove the last byte to make the trailer corrupted
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
init|;
name|FSDataOutputStream
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|tmpFile
argument_list|)
init|)
block|{
name|ByteStreams
operator|.
name|copy
argument_list|(
name|ByteStreams
operator|.
name|limit
argument_list|(
name|in
argument_list|,
name|file
operator|.
name|getLen
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|ExchangeProcedure
extends|extends
name|ProcedureTestingUtility
operator|.
name|NoopProcedure
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|Exchanger
argument_list|<
name|Boolean
argument_list|>
name|exchanger
init|=
operator|new
name|Exchanger
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|Void
argument_list|>
index|[]
name|execute
parameter_list|(
name|Void
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|exchanger
operator|.
name|exchange
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
return|return
operator|new
name|Procedure
index|[]
block|{
name|this
block|}
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResetDeleteWhenBuildingHoldingCleanupTracker
parameter_list|()
throws|throws
name|Exception
block|{
name|createProcExecutor
argument_list|()
expr_stmt|;
name|ExchangeProcedure
name|proc1
init|=
operator|new
name|ExchangeProcedure
argument_list|()
decl_stmt|;
name|ExchangeProcedure
name|proc2
init|=
operator|new
name|ExchangeProcedure
argument_list|()
decl_stmt|;
name|procExecutor
operator|.
name|submitProcedure
argument_list|(
name|proc1
argument_list|)
expr_stmt|;
name|long
name|procId2
init|=
name|procExecutor
operator|.
name|submitProcedure
argument_list|(
name|proc2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
name|proc1
operator|.
name|exchanger
operator|.
name|exchange
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|walFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|walFiles
argument_list|,
parameter_list|(
name|f1
parameter_list|,
name|f2
parameter_list|)
lambda|->
name|f1
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|f2
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// corrupt the first proc wal file, so we will have a partial tracker for it after restarting
name|corrupt
argument_list|(
name|walFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExecutor
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// also update proc2, which means that all the procedures in the first proc wal have been
comment|// updated and it should be deleted.
name|proc2
operator|=
operator|(
name|ExchangeProcedure
operator|)
name|procExecutor
operator|.
name|getProcedure
argument_list|(
name|procId2
argument_list|)
expr_stmt|;
name|proc2
operator|.
name|exchanger
operator|.
name|exchange
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|htu
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
parameter_list|()
lambda|->
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|walFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|WaitProcedure
extends|extends
name|ProcedureTestingUtility
operator|.
name|NoopProcedure
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|WaitProcedure
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|Void
argument_list|>
index|[]
name|execute
parameter_list|(
name|Void
name|env
parameter_list|)
throws|throws
name|ProcedureSuspendedException
block|{
comment|// Always wait here
name|LOG
operator|.
name|info
argument_list|(
literal|"wait here"
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{        }
name|LOG
operator|.
name|info
argument_list|(
literal|"finished"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SuspendProcedure
extends|extends
name|ProcedureTestingUtility
operator|.
name|NoopProcedure
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|SuspendProcedure
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|Void
argument_list|>
index|[]
name|execute
parameter_list|(
name|Void
name|env
parameter_list|)
throws|throws
name|ProcedureSuspendedException
block|{
comment|// Always suspend the procedure
name|LOG
operator|.
name|info
argument_list|(
literal|"suspend here"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ProcedureSuspendedException
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RootProcedure
extends|extends
name|ProcedureTestingUtility
operator|.
name|NoopProcedure
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
name|boolean
name|childSpwaned
init|=
literal|false
decl_stmt|;
specifier|public
name|RootProcedure
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Procedure
argument_list|<
name|Void
argument_list|>
index|[]
name|execute
parameter_list|(
name|Void
name|env
parameter_list|)
throws|throws
name|ProcedureSuspendedException
block|{
if|if
condition|(
operator|!
name|childSpwaned
condition|)
block|{
name|childSpwaned
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|Procedure
index|[]
block|{
operator|new
name|SuspendProcedure
argument_list|()
block|}
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

