begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestProcedureMetrics
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestProcedureMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestProcedureMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROCEDURE_EXECUTOR_SLOTS
init|=
literal|1
decl_stmt|;
specifier|private
name|TestProcEnv
name|procEnv
decl_stmt|;
specifier|private
specifier|static
name|ProcedureExecutor
argument_list|<
name|TestProcEnv
argument_list|>
name|procExecutor
decl_stmt|;
specifier|private
name|ProcedureStore
name|procStore
decl_stmt|;
specifier|private
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|testDir
decl_stmt|;
specifier|private
name|Path
name|logDir
decl_stmt|;
specifier|private
specifier|static
name|int
name|beginCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|successCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|failedCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|testDir
operator|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDir
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"proc-logs"
argument_list|)
expr_stmt|;
name|procEnv
operator|=
operator|new
name|TestProcEnv
argument_list|()
expr_stmt|;
name|procStore
operator|=
name|ProcedureTestingUtility
operator|.
name|createStore
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|procExecutor
operator|=
operator|new
name|ProcedureExecutor
argument_list|<
name|TestProcEnv
argument_list|>
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|procEnv
argument_list|,
name|procStore
argument_list|)
expr_stmt|;
name|procExecutor
operator|.
name|testing
operator|=
operator|new
name|ProcedureExecutor
operator|.
name|Testing
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_EXECUTOR_SLOTS
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|initAndStartWorkers
argument_list|(
name|procExecutor
argument_list|,
name|PROCEDURE_EXECUTOR_SLOTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|procExecutor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricForSimpleProcedure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// procedure that executes successfully
name|ProcedureMetrics
name|proc
init|=
operator|new
name|ProcedureMetrics
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"ProcId zero!"
argument_list|,
literal|0
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|beginCount
operator|++
expr_stmt|;
name|successCount
operator|++
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"beginCount doesn't match!"
argument_list|,
name|beginCount
argument_list|,
name|proc
operator|.
name|beginCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"successCount doesn't match!"
argument_list|,
name|successCount
argument_list|,
name|proc
operator|.
name|successCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failedCont doesn't match!"
argument_list|,
name|failedCount
argument_list|,
name|proc
operator|.
name|failedCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricsForFailedProcedure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// procedure that fails
name|ProcedureMetrics
name|proc
init|=
operator|new
name|ProcedureMetrics
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"ProcId zero!"
argument_list|,
literal|0
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|beginCount
operator|++
expr_stmt|;
name|failedCount
operator|++
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"beginCount doesn't match!"
argument_list|,
name|beginCount
argument_list|,
name|proc
operator|.
name|beginCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"successCount doesn't match!"
argument_list|,
name|successCount
argument_list|,
name|proc
operator|.
name|successCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failedCont doesn't match!"
argument_list|,
name|failedCount
argument_list|,
name|proc
operator|.
name|failedCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricForYieldProcedure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// procedure that yields
name|ProcedureMetrics
name|proc
init|=
operator|new
name|ProcedureMetrics
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"ProcId zero!"
argument_list|,
literal|0
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|beginCount
operator|++
expr_stmt|;
name|successCount
operator|++
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"beginCount doesn't match!"
argument_list|,
name|beginCount
argument_list|,
name|proc
operator|.
name|beginCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"successCount doesn't match!"
argument_list|,
name|successCount
argument_list|,
name|proc
operator|.
name|successCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failedCont doesn't match!"
argument_list|,
name|failedCount
argument_list|,
name|proc
operator|.
name|failedCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricForFailedYiledProcedure
parameter_list|()
block|{
comment|// procedure that yields and fails
name|ProcedureMetrics
name|proc
init|=
operator|new
name|ProcedureMetrics
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"ProcId zero!"
argument_list|,
literal|0
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|beginCount
operator|++
expr_stmt|;
name|failedCount
operator|++
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"beginCount doesn't match!"
argument_list|,
name|beginCount
argument_list|,
name|proc
operator|.
name|beginCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"successCount doesn't match!"
argument_list|,
name|successCount
argument_list|,
name|proc
operator|.
name|successCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failedCont doesn't match!"
argument_list|,
name|failedCount
argument_list|,
name|proc
operator|.
name|failedCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricForProcedureWithChildren
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Procedure that yileds with one of the sub-procedures that fail
name|int
name|subProcCount
init|=
literal|10
decl_stmt|;
name|int
name|failChildIndex
init|=
literal|2
decl_stmt|;
name|int
name|yiledChildIndex
init|=
operator|-
literal|1
decl_stmt|;
name|ProcedureMetrics
index|[]
name|subprocs
init|=
operator|new
name|ProcedureMetrics
index|[
name|subProcCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subProcCount
condition|;
operator|++
name|i
control|)
block|{
name|subprocs
index|[
name|i
index|]
operator|=
operator|new
name|ProcedureMetrics
argument_list|(
name|failChildIndex
operator|!=
name|i
argument_list|,
name|yiledChildIndex
operator|==
name|i
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
name|ProcedureMetrics
name|proc
init|=
operator|new
name|ProcedureMetrics
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
name|subprocs
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"ProcId zero!"
argument_list|,
literal|0
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|beginCount
operator|+=
name|subProcCount
operator|+
literal|1
expr_stmt|;
name|successCount
operator|+=
name|subProcCount
operator|-
operator|(
name|failChildIndex
operator|+
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|failChildIndex
operator|>=
literal|0
condition|)
block|{
name|failedCount
operator|+=
name|subProcCount
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|successCount
operator|++
expr_stmt|;
block|}
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"beginCount doesn't match!"
argument_list|,
name|beginCount
argument_list|,
name|proc
operator|.
name|beginCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"successCount doesn't match!"
argument_list|,
name|successCount
argument_list|,
name|proc
operator|.
name|successCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"failedCont doesn't match!"
argument_list|,
name|failedCount
argument_list|,
name|proc
operator|.
name|failedCount
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestProcEnv
block|{
specifier|public
name|boolean
name|toggleKillBeforeStoreUpdate
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|triggerRollbackOnChild
init|=
literal|false
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ProcedureMetrics
extends|extends
name|SequentialProcedure
argument_list|<
name|TestProcEnv
argument_list|>
block|{
specifier|public
specifier|static
name|long
name|beginCount
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|long
name|successCount
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|long
name|failedCount
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|boolean
name|yield
decl_stmt|;
specifier|private
name|int
name|yieldCount
decl_stmt|;
specifier|private
name|int
name|yieldNum
decl_stmt|;
specifier|private
name|ProcedureMetrics
index|[]
name|subprocs
init|=
literal|null
decl_stmt|;
specifier|public
name|ProcedureMetrics
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureMetrics
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
argument_list|(
name|success
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureMetrics
parameter_list|(
name|boolean
name|success
parameter_list|,
name|boolean
name|yield
parameter_list|)
block|{
name|this
argument_list|(
name|success
argument_list|,
name|yield
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureMetrics
parameter_list|(
name|boolean
name|success
parameter_list|,
name|boolean
name|yield
parameter_list|,
name|int
name|yieldCount
parameter_list|)
block|{
name|this
argument_list|(
name|success
argument_list|,
name|yield
argument_list|,
name|yieldCount
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureMetrics
parameter_list|(
name|boolean
name|success
parameter_list|,
name|ProcedureMetrics
index|[]
name|subprocs
parameter_list|)
block|{
name|this
argument_list|(
name|success
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|subprocs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureMetrics
parameter_list|(
name|boolean
name|success
parameter_list|,
name|boolean
name|yield
parameter_list|,
name|int
name|yieldCount
parameter_list|,
name|ProcedureMetrics
index|[]
name|subprocs
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|yield
operator|=
name|yield
expr_stmt|;
name|this
operator|.
name|yieldCount
operator|=
name|yieldCount
expr_stmt|;
name|this
operator|.
name|subprocs
operator|=
name|subprocs
expr_stmt|;
name|yieldNum
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateMetricsOnSubmit
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
block|{
name|beginCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Procedure
index|[]
name|execute
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
throws|throws
name|ProcedureYieldException
throws|,
name|ProcedureSuspendedException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|this
operator|.
name|yield
condition|)
block|{
if|if
condition|(
name|yieldNum
operator|<
name|yieldCount
condition|)
block|{
name|yieldNum
operator|++
expr_stmt|;
throw|throw
operator|new
name|ProcedureYieldException
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|success
condition|)
block|{
name|setFailure
argument_list|(
literal|"Failed"
argument_list|,
operator|new
name|InterruptedException
argument_list|(
literal|"Failed"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|subprocs
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{      }
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateMetricsOnFinish
parameter_list|(
specifier|final
name|TestProcEnv
name|env
parameter_list|,
specifier|final
name|long
name|time
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
if|if
condition|(
name|success
condition|)
block|{
name|successCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|failedCount
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

