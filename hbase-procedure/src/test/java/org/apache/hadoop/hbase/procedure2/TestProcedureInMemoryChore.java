begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|NoopProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestProcedureInMemoryChore
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestProcedureInMemoryChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestProcedureInMemoryChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROCEDURE_EXECUTOR_SLOTS
init|=
literal|1
decl_stmt|;
specifier|private
name|TestProcEnv
name|procEnv
decl_stmt|;
specifier|private
name|NoopProcedureStore
name|procStore
decl_stmt|;
specifier|private
name|ProcedureExecutor
argument_list|<
name|TestProcEnv
argument_list|>
name|procExecutor
decl_stmt|;
specifier|private
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|procEnv
operator|=
operator|new
name|TestProcEnv
argument_list|()
expr_stmt|;
name|procStore
operator|=
operator|new
name|NoopProcedureStore
argument_list|()
expr_stmt|;
name|procExecutor
operator|=
operator|new
name|ProcedureExecutor
argument_list|<>
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|procEnv
argument_list|,
name|procStore
argument_list|)
expr_stmt|;
name|procExecutor
operator|.
name|testing
operator|=
operator|new
name|ProcedureExecutor
operator|.
name|Testing
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_EXECUTOR_SLOTS
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|initAndStartWorkers
argument_list|(
name|procExecutor
argument_list|,
name|PROCEDURE_EXECUTOR_SLOTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|procExecutor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoreAddAndRemove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|timeoutMSec
init|=
literal|50
decl_stmt|;
specifier|final
name|int
name|nCountDown
init|=
literal|5
decl_stmt|;
comment|// submit the chore and wait for execution
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nCountDown
argument_list|)
decl_stmt|;
name|TestLatchChore
name|chore
init|=
operator|new
name|TestLatchChore
argument_list|(
name|timeoutMSec
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|procExecutor
operator|.
name|addChore
argument_list|(
name|chore
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|isWaiting
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// remove the chore and verify it is no longer executed
name|assertTrue
argument_list|(
name|chore
operator|.
name|isWaiting
argument_list|()
argument_list|)
expr_stmt|;
name|procExecutor
operator|.
name|removeChore
argument_list|(
name|chore
argument_list|)
expr_stmt|;
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|nCountDown
argument_list|)
expr_stmt|;
name|chore
operator|.
name|setLatch
argument_list|(
name|latch
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
name|timeoutMSec
operator|*
name|nCountDown
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"chore latch count="
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore
operator|.
name|isWaiting
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"latchCount="
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestLatchChore
extends|extends
name|ProcedureInMemoryChore
argument_list|<
name|TestProcEnv
argument_list|>
block|{
specifier|private
name|CountDownLatch
name|latch
decl_stmt|;
specifier|public
name|TestLatchChore
parameter_list|(
specifier|final
name|int
name|timeoutMSec
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|super
argument_list|(
name|timeoutMSec
argument_list|)
expr_stmt|;
name|setLatch
argument_list|(
name|latch
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLatch
parameter_list|(
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|periodicExecute
parameter_list|(
specifier|final
name|TestProcEnv
name|env
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"periodic execute "
operator|+
name|this
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestProcEnv
block|{   }
block|}
end_class

end_unit

