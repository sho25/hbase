begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestDelayedUtil
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestDelayedUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDelayedUtil
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDelayedContainerEquals
parameter_list|()
block|{
name|Object
name|o1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|o2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ZeroDelayContainer
argument_list|<
name|Long
argument_list|>
name|lnull
init|=
operator|new
name|ZeroDelayContainer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ZeroDelayContainer
argument_list|<
name|Long
argument_list|>
name|l10a
init|=
operator|new
name|ZeroDelayContainer
argument_list|<>
argument_list|(
literal|10L
argument_list|)
decl_stmt|;
name|ZeroDelayContainer
argument_list|<
name|Long
argument_list|>
name|l10b
init|=
operator|new
name|ZeroDelayContainer
argument_list|(
literal|10L
argument_list|)
decl_stmt|;
name|ZeroDelayContainer
argument_list|<
name|Long
argument_list|>
name|l15
init|=
operator|new
name|ZeroDelayContainer
argument_list|(
literal|15L
argument_list|)
decl_stmt|;
name|ZeroDelayContainer
argument_list|<
name|Object
argument_list|>
name|onull
init|=
operator|new
name|ZeroDelayContainer
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ZeroDelayContainer
argument_list|<
name|Object
argument_list|>
name|o1ca
init|=
operator|new
name|ZeroDelayContainer
argument_list|<>
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|ZeroDelayContainer
argument_list|<
name|Object
argument_list|>
name|o1cb
init|=
operator|new
name|ZeroDelayContainer
argument_list|<>
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|ZeroDelayContainer
argument_list|<
name|Object
argument_list|>
name|o2c
init|=
operator|new
name|ZeroDelayContainer
argument_list|<>
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|ZeroDelayContainer
index|[]
name|items
init|=
operator|new
name|ZeroDelayContainer
index|[]
block|{
name|lnull
block|,
name|l10a
block|,
name|l10b
block|,
name|l15
block|,
name|onull
block|,
name|o1ca
block|,
name|o1cb
block|,
name|o2c
block|,     }
decl_stmt|;
name|assertContainersEquals
argument_list|(
name|lnull
argument_list|,
name|items
argument_list|,
name|lnull
argument_list|,
name|onull
argument_list|)
expr_stmt|;
name|assertContainersEquals
argument_list|(
name|l10a
argument_list|,
name|items
argument_list|,
name|l10a
argument_list|,
name|l10b
argument_list|)
expr_stmt|;
name|assertContainersEquals
argument_list|(
name|l10b
argument_list|,
name|items
argument_list|,
name|l10a
argument_list|,
name|l10b
argument_list|)
expr_stmt|;
name|assertContainersEquals
argument_list|(
name|l15
argument_list|,
name|items
argument_list|,
name|l15
argument_list|)
expr_stmt|;
name|assertContainersEquals
argument_list|(
name|onull
argument_list|,
name|items
argument_list|,
name|lnull
argument_list|,
name|onull
argument_list|)
expr_stmt|;
name|assertContainersEquals
argument_list|(
name|o1ca
argument_list|,
name|items
argument_list|,
name|o1ca
argument_list|,
name|o1cb
argument_list|)
expr_stmt|;
name|assertContainersEquals
argument_list|(
name|o1cb
argument_list|,
name|items
argument_list|,
name|o1ca
argument_list|,
name|o1cb
argument_list|)
expr_stmt|;
name|assertContainersEquals
argument_list|(
name|o2c
argument_list|,
name|items
argument_list|,
name|o2c
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertContainersEquals
parameter_list|(
specifier|final
name|ZeroDelayContainer
name|src
parameter_list|,
specifier|final
name|ZeroDelayContainer
index|[]
name|items
parameter_list|,
specifier|final
name|ZeroDelayContainer
modifier|...
name|matches
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|boolean
name|shouldMatch
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|matches
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|items
index|[
name|i
index|]
operator|==
name|matches
index|[
name|j
index|]
condition|)
block|{
name|shouldMatch
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|isMatching
init|=
name|src
operator|.
name|equals
argument_list|(
name|items
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|src
operator|.
name|getObject
argument_list|()
operator|+
literal|" unexpectedly match "
operator|+
name|items
index|[
name|i
index|]
operator|.
name|getObject
argument_list|()
argument_list|,
name|shouldMatch
argument_list|,
name|isMatching
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ZeroDelayContainer
parameter_list|<
name|T
parameter_list|>
extends|extends
name|DelayedUtil
operator|.
name|DelayedContainer
argument_list|<
name|T
argument_list|>
block|{
specifier|public
name|ZeroDelayContainer
parameter_list|(
specifier|final
name|T
name|object
parameter_list|)
block|{
name|super
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

