begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestProcedureFairRunQueues
block|{
specifier|private
specifier|static
class|class
name|TestRunQueue
implements|implements
name|ProcedureFairRunQueues
operator|.
name|FairObject
block|{
specifier|private
specifier|final
name|int
name|priority
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|available
init|=
literal|true
decl_stmt|;
specifier|public
name|TestRunQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|private
name|void
name|setAvailable
parameter_list|(
name|boolean
name|available
parameter_list|)
block|{
name|this
operator|.
name|available
operator|=
name|available
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|available
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFairQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureFairRunQueues
argument_list|<
name|String
argument_list|,
name|TestRunQueue
argument_list|>
name|fairq
init|=
operator|new
name|ProcedureFairRunQueues
argument_list|<
name|String
argument_list|,
name|TestRunQueue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFairQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureFairRunQueues
argument_list|<
name|String
argument_list|,
name|TestRunQueue
argument_list|>
name|fairq
init|=
operator|new
name|ProcedureFairRunQueues
argument_list|<
name|String
argument_list|,
name|TestRunQueue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TestRunQueue
name|a
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"A"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestRunQueue
name|b
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"B"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestRunQueue
name|m
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"M"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"M"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFairQueuesNotAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureFairRunQueues
argument_list|<
name|String
argument_list|,
name|TestRunQueue
argument_list|>
name|fairq
init|=
operator|new
name|ProcedureFairRunQueues
argument_list|<
name|String
argument_list|,
name|TestRunQueue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TestRunQueue
name|a
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"A"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestRunQueue
name|b
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"B"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestRunQueue
name|m
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"M"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"M"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// m is not available
name|m
operator|.
name|setAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// m is available
name|m
operator|.
name|setAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// b is not available
name|b
operator|.
name|setAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAvailable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// m should be fetched next, but is no longer available
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|b
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFairQueuesDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureFairRunQueues
argument_list|<
name|String
argument_list|,
name|TestRunQueue
argument_list|>
name|fairq
init|=
operator|new
name|ProcedureFairRunQueues
argument_list|<
name|String
argument_list|,
name|TestRunQueue
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TestRunQueue
name|a
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"A"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"A"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestRunQueue
name|b
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"B"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestRunQueue
name|m
init|=
name|fairq
operator|.
name|add
argument_list|(
literal|"M"
argument_list|,
operator|new
name|TestRunQueue
argument_list|(
literal|"M"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// Fetch A and then remove it
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|fairq
operator|.
name|remove
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch B and then remove it
name|assertEquals
argument_list|(
name|b
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|fairq
operator|.
name|remove
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch M and then remove it
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|fairq
operator|.
name|remove
argument_list|(
literal|"M"
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing left
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|fairq
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

