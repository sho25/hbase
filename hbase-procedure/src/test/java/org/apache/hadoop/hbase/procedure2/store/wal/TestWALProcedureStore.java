begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|SequentialProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestWALProcedureStore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWALProcedureStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROCEDURE_STORE_SLOTS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Procedure
name|NULL_PROC
init|=
literal|null
decl_stmt|;
specifier|private
name|WALProcedureStore
name|procStore
decl_stmt|;
specifier|private
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|testDir
decl_stmt|;
specifier|private
name|Path
name|logDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|testDir
operator|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDir
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"proc-logs"
argument_list|)
expr_stmt|;
name|procStore
operator|=
name|ProcedureTestingUtility
operator|.
name|createWalStore
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_STORE_SLOTS
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iterator
argument_list|<
name|Procedure
argument_list|>
name|storeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_STORE_SLOTS
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
return|return
name|procStore
operator|.
name|load
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyLogLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|Procedure
argument_list|>
name|loader
init|=
name|storeRestart
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countProcedures
argument_list|(
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Insert something in the log
name|Procedure
name|proc1
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|proc1
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Procedure
name|proc2
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|Procedure
index|[]
name|child2
init|=
operator|new
name|Procedure
index|[
literal|2
index|]
decl_stmt|;
name|child2
index|[
literal|0
index|]
operator|=
operator|new
name|TestSequentialProcedure
argument_list|()
expr_stmt|;
name|child2
index|[
literal|1
index|]
operator|=
operator|new
name|TestSequentialProcedure
argument_list|()
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|child2
index|[
literal|0
index|]
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|child2
index|[
literal|1
index|]
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc2
argument_list|,
name|child2
argument_list|)
expr_stmt|;
comment|// Verify that everything is there
name|verifyProcIdsOnRestart
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
comment|// Update and delete something
name|procStore
operator|.
name|update
argument_list|(
name|proc1
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|child2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|delete
argument_list|(
name|child2
index|[
literal|1
index|]
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|remove
argument_list|(
name|child2
index|[
literal|1
index|]
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that everything is there
name|verifyProcIdsOnRestart
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
comment|// Remove 4 byte from the trailers
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|logs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|corruptLog
argument_list|(
name|logs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|verifyProcIdsOnRestart
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorruptedTrailer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Insert something
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|procStore
operator|.
name|insert
argument_list|(
operator|new
name|TestSequentialProcedure
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Stop the store
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Remove 4 byte from the trailer
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|length
argument_list|)
expr_stmt|;
name|corruptLog
argument_list|(
name|logs
index|[
literal|0
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|countProcedures
argument_list|(
name|storeRestart
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorruptedEntries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Insert something
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|procStore
operator|.
name|insert
argument_list|(
operator|new
name|TestSequentialProcedure
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Stop the store
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Remove some byte from the log
comment|// (enough to cut the trailer and corrupt some entries)
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|length
argument_list|)
expr_stmt|;
name|corruptLog
argument_list|(
name|logs
index|[
literal|0
index|]
argument_list|,
literal|1823
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|countProcedures
argument_list|(
name|storeRestart
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|procStore
operator|.
name|getCorruptedLogs
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procStore
operator|.
name|getCorruptedLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|85
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|corruptLog
parameter_list|(
specifier|final
name|FileStatus
name|logFile
parameter_list|,
specifier|final
name|long
name|dropBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|logFile
operator|.
name|getLen
argument_list|()
operator|>
name|dropBytes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"corrupt log "
operator|+
name|logFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" size="
operator|+
name|logFile
operator|.
name|getLen
argument_list|()
operator|+
literal|" drop="
operator|+
name|dropBytes
argument_list|)
expr_stmt|;
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"corrupted.log"
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|logFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|logFile
operator|.
name|getLen
argument_list|()
operator|-
name|dropBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|logFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyProcIdsOnRestart
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Procedure
argument_list|>
name|loader
init|=
name|storeRestart
argument_list|()
decl_stmt|;
while|while
condition|(
name|loader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Procedure
name|proc
init|=
name|loader
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading procId="
operator|+
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"procId="
operator|+
name|proc
operator|.
name|getProcId
argument_list|()
operator|+
literal|" unexpected"
argument_list|,
name|procIds
operator|.
name|contains
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|procIds
operator|.
name|size
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertIsEmpty
parameter_list|(
name|Iterator
argument_list|<
name|Procedure
argument_list|>
name|iterator
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countProcedures
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|countProcedures
parameter_list|(
name|Iterator
argument_list|<
name|Procedure
argument_list|>
name|iterator
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Procedure
name|proc
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"loading procId="
operator|+
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|assertEmptyLogDir
parameter_list|()
block|{
try|try
block|{
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected empty state-log dir"
argument_list|,
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"expected the state-log dir to be present: "
operator|+
name|logDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got en exception on state-log dir list: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestSequentialProcedure
extends|extends
name|SequentialProcedure
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|static
name|long
name|seqid
init|=
literal|0
decl_stmt|;
specifier|public
name|TestSequentialProcedure
parameter_list|()
block|{
name|setProcId
argument_list|(
operator|++
name|seqid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Procedure
index|[]
name|execute
parameter_list|(
name|Void
name|env
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|Void
name|env
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|Void
name|env
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|procId
init|=
name|getProcId
argument_list|()
decl_stmt|;
if|if
condition|(
name|procId
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|procId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|procId
init|=
name|getProcId
argument_list|()
decl_stmt|;
if|if
condition|(
name|procId
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|bProcId
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stream
operator|.
name|read
argument_list|(
name|bProcId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|procId
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|bProcId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

