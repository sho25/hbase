begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|TestProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|SequentialProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
operator|.
name|ProcedureIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestWALProcedureStore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWALProcedureStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROCEDURE_STORE_SLOTS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Procedure
name|NULL_PROC
init|=
literal|null
decl_stmt|;
specifier|private
name|WALProcedureStore
name|procStore
decl_stmt|;
specifier|private
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|testDir
decl_stmt|;
specifier|private
name|Path
name|logDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|testDir
operator|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDir
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"proc-logs"
argument_list|)
expr_stmt|;
name|procStore
operator|=
name|ProcedureTestingUtility
operator|.
name|createWalStore
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_STORE_SLOTS
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|load
argument_list|(
operator|new
name|LoadCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeRestart
parameter_list|(
name|ProcedureStore
operator|.
name|ProcedureLoader
name|loader
parameter_list|)
throws|throws
name|Exception
block|{
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_STORE_SLOTS
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|load
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyRoll
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|procStore
operator|.
name|periodicRollForTesting
argument_list|()
expr_stmt|;
block|}
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyLogLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Insert something in the log
name|Procedure
name|proc1
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|proc1
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Procedure
name|proc2
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|Procedure
index|[]
name|child2
init|=
operator|new
name|Procedure
index|[
literal|2
index|]
decl_stmt|;
name|child2
index|[
literal|0
index|]
operator|=
operator|new
name|TestSequentialProcedure
argument_list|()
expr_stmt|;
name|child2
index|[
literal|1
index|]
operator|=
operator|new
name|TestSequentialProcedure
argument_list|()
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|child2
index|[
literal|0
index|]
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|child2
index|[
literal|1
index|]
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc2
argument_list|,
name|child2
argument_list|)
expr_stmt|;
comment|// Verify that everything is there
name|verifyProcIdsOnRestart
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
comment|// Update and delete something
name|procStore
operator|.
name|update
argument_list|(
name|proc1
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|child2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|delete
argument_list|(
name|child2
index|[
literal|1
index|]
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|remove
argument_list|(
name|child2
index|[
literal|1
index|]
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that everything is there
name|verifyProcIdsOnRestart
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
comment|// Remove 4 byte from the trailers
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|logs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|corruptLog
argument_list|(
name|logs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|verifyProcIdsOnRestart
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoTrailerDoubleRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// log-0001: proc 0, 1 and 2 are inserted
name|Procedure
name|proc0
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Procedure
name|proc1
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Procedure
name|proc2
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
comment|// log-0002: proc 1 deleted
name|procStore
operator|.
name|delete
argument_list|(
name|proc1
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
comment|// log-0003: proc 2 is update
name|procStore
operator|.
name|update
argument_list|(
name|proc2
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
comment|// log-0004: proc 2 deleted
name|procStore
operator|.
name|delete
argument_list|(
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// stop the store and remove the trailer
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|logs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|corruptLog
argument_list|(
name|logs
index|[
name|i
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// Test Load 1
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test Load 2
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|LoadCounter
argument_list|()
expr_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove proc-0
name|procStore
operator|.
name|delete
argument_list|(
name|proc0
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|periodicRollForTesting
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorruptedTrailer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Insert something
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|procStore
operator|.
name|insert
argument_list|(
operator|new
name|TestSequentialProcedure
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Stop the store
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Remove 4 byte from the trailer
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|length
argument_list|)
expr_stmt|;
name|corruptLog
argument_list|(
name|logs
index|[
literal|0
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorruptedEntries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Insert something
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|procStore
operator|.
name|insert
argument_list|(
operator|new
name|TestSequentialProcedure
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Stop the store
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Remove some byte from the log
comment|// (enough to cut the trailer and corrupt some entries)
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|length
argument_list|)
expr_stmt|;
name|corruptLog
argument_list|(
name|logs
index|[
literal|0
index|]
argument_list|,
literal|1823
argument_list|)
expr_stmt|;
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procStore
operator|.
name|getCorruptedLogs
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procStore
operator|.
name|getCorruptedLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|85
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorruptedProcedures
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Insert root-procedures
name|TestProcedure
index|[]
name|rootProcs
init|=
operator|new
name|TestProcedure
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|rootProcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rootProcs
index|[
name|i
operator|-
literal|1
index|]
operator|=
operator|new
name|TestProcedure
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|rootProcs
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rootProcs
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|addStackId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|rootProcs
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// insert root-child txn
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|rootProcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TestProcedure
name|b
init|=
operator|new
name|TestProcedure
argument_list|(
name|rootProcs
operator|.
name|length
operator|+
name|i
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|rootProcs
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|addStackId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|rootProcs
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
operator|new
name|Procedure
index|[]
block|{
name|b
block|}
argument_list|)
expr_stmt|;
block|}
comment|// insert child updates
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|rootProcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|procStore
operator|.
name|update
argument_list|(
operator|new
name|TestProcedure
argument_list|(
name|rootProcs
operator|.
name|length
operator|+
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Stop the store
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// the first log was removed,
comment|// we have insert-txn and updates in the others so everything is fine
name|FileStatus
index|[]
name|logs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|logs
argument_list|)
argument_list|,
literal|2
argument_list|,
name|logs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|logs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileStatus
name|o1
parameter_list|,
name|FileStatus
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootProcs
operator|.
name|length
operator|*
literal|2
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the second log, we have lost all the root/parent references
name|fs
operator|.
name|delete
argument_list|(
name|logs
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|loader
operator|.
name|reset
argument_list|()
expr_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootProcs
operator|.
name|length
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Procedure
name|proc
range|:
name|loader
operator|.
name|getCorrupted
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|proc
operator|.
name|toString
argument_list|()
argument_list|,
name|proc
operator|.
name|getParentProcId
argument_list|()
operator|<=
name|rootProcs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|proc
operator|.
name|toString
argument_list|()
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
operator|>
name|rootProcs
operator|.
name|length
operator|&&
name|proc
operator|.
name|getProcId
argument_list|()
operator|<=
operator|(
name|rootProcs
operator|.
name|length
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testWalReplayOrder_AB_A
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * | A B | -> | A |      */
name|TestProcedure
name|a
init|=
operator|new
name|TestProcedure
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TestProcedure
name|b
init|=
operator|new
name|TestProcedure
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|a
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|a
operator|.
name|addStackId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|a
argument_list|,
operator|new
name|Procedure
index|[]
block|{
name|b
block|}
argument_list|)
expr_stmt|;
name|b
operator|.
name|addStackId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
name|a
operator|.
name|addStackId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|storeRestart
argument_list|(
operator|new
name|ProcedureStore
operator|.
name|ProcedureLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setMaxProcId
parameter_list|(
name|long
name|maxProcId
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|maxProcId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procIter
operator|.
name|nextAsProcedureInfo
argument_list|()
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|procIter
operator|.
name|nextAsProcedureInfo
argument_list|()
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleCorrupted
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testWalReplayOrder_ABC_BAD
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * | A B C | -> | B A D |      */
name|TestProcedure
name|a
init|=
operator|new
name|TestProcedure
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TestProcedure
name|b
init|=
operator|new
name|TestProcedure
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TestProcedure
name|c
init|=
operator|new
name|TestProcedure
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TestProcedure
name|d
init|=
operator|new
name|TestProcedure
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|a
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|a
operator|.
name|addStackId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|a
argument_list|,
operator|new
name|Procedure
index|[]
block|{
name|b
block|}
argument_list|)
expr_stmt|;
name|b
operator|.
name|addStackId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|b
argument_list|,
operator|new
name|Procedure
index|[]
block|{
name|c
block|}
argument_list|)
expr_stmt|;
name|b
operator|.
name|addStackId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
name|b
operator|.
name|addStackId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|a
operator|.
name|addStackId
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|d
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|d
operator|.
name|addStackId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|storeRestart
argument_list|(
operator|new
name|ProcedureStore
operator|.
name|ProcedureLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setMaxProcId
parameter_list|(
name|long
name|maxProcId
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|maxProcId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|procIter
operator|.
name|nextAsProcedureInfo
argument_list|()
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: This will be multiple call once we do fast-start
comment|//assertFalse(procIter.hasNext());
name|assertTrue
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procIter
operator|.
name|nextAsProcedureInfo
argument_list|()
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|procIter
operator|.
name|nextAsProcedureInfo
argument_list|()
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|procIter
operator|.
name|nextAsProcedureInfo
argument_list|()
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleCorrupted
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
name|procIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertUpdateDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NTHREAD
init|=
literal|2
decl_stmt|;
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.procedure.store.wal.use.hsync"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.procedure.store.wal.periodic.roll.msec"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.procedure.store.wal.roll.threshold"
argument_list|,
literal|128
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|procStore
operator|=
name|ProcedureTestingUtility
operator|.
name|createWalStore
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|NTHREAD
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|procStore
operator|.
name|load
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|LAST_PROC_ID
init|=
literal|9999
decl_stmt|;
specifier|final
name|Thread
index|[]
name|thread
init|=
operator|new
name|Thread
index|[
name|NTHREAD
index|]
decl_stmt|;
specifier|final
name|AtomicLong
name|procCounter
init|=
operator|new
name|AtomicLong
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|100
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|thread
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|TestProcedure
name|proc
decl_stmt|;
do|do
block|{
name|proc
operator|=
operator|new
name|TestProcedure
argument_list|(
name|procCounter
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert
name|procStore
operator|.
name|insert
argument_list|(
name|proc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Update
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|nupdates
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
init|;
name|i
operator|<=
name|nupdates
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|0
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|procStore
operator|.
name|update
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
comment|// Delete
name|procStore
operator|.
name|delete
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|proc
operator|.
name|getProcId
argument_list|()
operator|<
name|LAST_PROC_ID
condition|)
do|;
block|}
block|}
expr_stmt|;
name|thread
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|thread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|procStore
operator|.
name|getStoreTracker
argument_list|()
operator|.
name|dump
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|procCounter
operator|.
name|get
argument_list|()
operator|>=
name|LAST_PROC_ID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procStore
operator|.
name|getStoreTracker
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRollAndRemove
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Insert something in the log
name|Procedure
name|proc1
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Procedure
name|proc2
init|=
operator|new
name|TestSequentialProcedure
argument_list|()
decl_stmt|;
name|procStore
operator|.
name|insert
argument_list|(
name|proc2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// roll the log, now we have 2
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// everything will be up to date in the second log
comment|// so we can remove the first one
name|procStore
operator|.
name|update
argument_list|(
name|proc1
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|update
argument_list|(
name|proc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// roll the log, now we have 2
name|procStore
operator|.
name|rollWriterForTesting
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove everything active
comment|// so we can remove all the logs
name|procStore
operator|.
name|delete
argument_list|(
name|proc1
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procStore
operator|.
name|delete
argument_list|(
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|procStore
operator|.
name|getActiveLogs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|corruptLog
parameter_list|(
specifier|final
name|FileStatus
name|logFile
parameter_list|,
specifier|final
name|long
name|dropBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|logFile
operator|.
name|getLen
argument_list|()
operator|>
name|dropBytes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"corrupt log "
operator|+
name|logFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" size="
operator|+
name|logFile
operator|.
name|getLen
argument_list|()
operator|+
literal|" drop="
operator|+
name|dropBytes
argument_list|)
expr_stmt|;
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"corrupted.log"
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|logFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|logFile
operator|.
name|getLen
argument_list|()
operator|-
name|dropBytes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|logFile
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|verifyProcIdsOnRestart
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expected: "
operator|+
name|procIds
argument_list|)
expr_stmt|;
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|storeRestart
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|procIds
operator|.
name|size
argument_list|()
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmptyLogDir
parameter_list|()
block|{
try|try
block|{
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected empty state-log dir"
argument_list|,
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"expected the state-log dir to be present: "
operator|+
name|logDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"got en exception on state-log dir list: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestSequentialProcedure
extends|extends
name|SequentialProcedure
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|static
name|long
name|seqid
init|=
literal|0
decl_stmt|;
specifier|public
name|TestSequentialProcedure
parameter_list|()
block|{
name|setProcId
argument_list|(
operator|++
name|seqid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Procedure
index|[]
name|execute
parameter_list|(
name|Void
name|env
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|Void
name|env
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|Void
name|env
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|procId
init|=
name|getProcId
argument_list|()
decl_stmt|;
if|if
condition|(
name|procId
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|procId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|procId
init|=
name|getProcId
argument_list|()
decl_stmt|;
if|if
condition|(
name|procId
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|byte
index|[]
name|bProcId
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stream
operator|.
name|read
argument_list|(
name|bProcId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|procId
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|bProcId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|LoadCounter
implements|implements
name|ProcedureStore
operator|.
name|ProcedureLoader
block|{
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Procedure
argument_list|>
name|corrupted
init|=
operator|new
name|ArrayList
argument_list|<
name|Procedure
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Procedure
argument_list|>
name|loaded
init|=
operator|new
name|ArrayList
argument_list|<
name|Procedure
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
decl_stmt|;
specifier|private
name|long
name|maxProcId
init|=
literal|0
decl_stmt|;
specifier|public
name|LoadCounter
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LoadCounter
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
parameter_list|)
block|{
name|this
operator|.
name|procIds
operator|=
name|procIds
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|reset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
parameter_list|)
block|{
name|corrupted
operator|.
name|clear
argument_list|()
expr_stmt|;
name|loaded
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|procIds
operator|=
name|procIds
expr_stmt|;
name|this
operator|.
name|maxProcId
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxProcId
parameter_list|()
block|{
return|return
name|maxProcId
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Procedure
argument_list|>
name|getLoaded
parameter_list|()
block|{
return|return
name|loaded
return|;
block|}
specifier|public
name|int
name|getLoadedCount
parameter_list|()
block|{
return|return
name|loaded
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Procedure
argument_list|>
name|getCorrupted
parameter_list|()
block|{
return|return
name|corrupted
return|;
block|}
specifier|public
name|int
name|getCorruptedCount
parameter_list|()
block|{
return|return
name|corrupted
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMaxProcId
parameter_list|(
name|long
name|maxProcId
parameter_list|)
block|{
name|maxProcId
operator|=
name|maxProcId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Procedure
name|proc
init|=
name|procIter
operator|.
name|nextAsProcedure
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading procId="
operator|+
name|proc
operator|.
name|getProcId
argument_list|()
operator|+
literal|": "
operator|+
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
name|procIds
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"procId="
operator|+
name|proc
operator|.
name|getProcId
argument_list|()
operator|+
literal|" unexpected"
argument_list|,
name|procIds
operator|.
name|contains
argument_list|(
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|loaded
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleCorrupted
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Procedure
name|proc
init|=
name|procIter
operator|.
name|nextAsProcedure
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"corrupted procId="
operator|+
name|proc
operator|.
name|getProcId
argument_list|()
operator|+
literal|": "
operator|+
name|proc
argument_list|)
expr_stmt|;
name|corrupted
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

