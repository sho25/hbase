begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestProcedureRecovery
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestProcedureRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROCEDURE_EXECUTOR_SLOTS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|TestProcEnv
name|procEnv
decl_stmt|;
specifier|private
specifier|static
name|ProcedureExecutor
argument_list|<
name|TestProcEnv
argument_list|>
name|procExecutor
decl_stmt|;
specifier|private
specifier|static
name|ProcedureStore
name|procStore
decl_stmt|;
specifier|private
specifier|static
name|int
name|procSleepInterval
decl_stmt|;
specifier|private
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|testDir
decl_stmt|;
specifier|private
name|Path
name|logDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|testDir
operator|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
expr_stmt|;
name|fs
operator|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testDir
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"proc-logs"
argument_list|)
expr_stmt|;
name|procEnv
operator|=
operator|new
name|TestProcEnv
argument_list|()
expr_stmt|;
name|procStore
operator|=
name|ProcedureTestingUtility
operator|.
name|createStore
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|procExecutor
operator|=
operator|new
name|ProcedureExecutor
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|procEnv
argument_list|,
name|procStore
argument_list|)
expr_stmt|;
name|procExecutor
operator|.
name|testing
operator|=
operator|new
name|ProcedureExecutor
operator|.
name|Testing
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|start
argument_list|(
name|PROCEDURE_EXECUTOR_SLOTS
argument_list|)
expr_stmt|;
name|procExecutor
operator|.
name|start
argument_list|(
name|PROCEDURE_EXECUTOR_SLOTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|procSleepInterval
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|procExecutor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|procStore
operator|.
name|stop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|restart
parameter_list|()
throws|throws
name|Exception
block|{
name|dumpLogDirState
argument_list|()
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExecutor
argument_list|)
expr_stmt|;
name|dumpLogDirState
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestSingleStepProcedure
extends|extends
name|SequentialProcedure
argument_list|<
name|TestProcEnv
argument_list|>
block|{
specifier|private
name|int
name|step
init|=
literal|0
decl_stmt|;
specifier|public
name|TestSingleStepProcedure
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|protected
name|Procedure
index|[]
name|execute
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|env
operator|.
name|waitOnLatch
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"execute procedure "
operator|+
name|this
operator|+
literal|" step="
operator|+
name|step
argument_list|)
expr_stmt|;
name|step
operator|++
expr_stmt|;
name|setResult
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|step
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BaseTestStepProcedure
extends|extends
name|SequentialProcedure
argument_list|<
name|TestProcEnv
argument_list|>
block|{
specifier|private
name|AtomicBoolean
name|abort
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|int
name|step
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Procedure
index|[]
name|execute
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|env
operator|.
name|waitOnLatch
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"execute procedure "
operator|+
name|this
operator|+
literal|" step="
operator|+
name|step
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|toggleKillBeforeStoreUpdate
argument_list|(
name|procExecutor
argument_list|)
expr_stmt|;
name|step
operator|++
expr_stmt|;
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
name|procSleepInterval
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAborted
argument_list|()
condition|)
block|{
name|setFailure
argument_list|(
operator|new
name|RemoteProcedureException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ProcedureAbortedException
argument_list|(
literal|"got an abort at "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" step="
operator|+
name|step
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollback
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rollback procedure "
operator|+
name|this
operator|+
literal|" step="
operator|+
name|step
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|toggleKillBeforeStoreUpdate
argument_list|(
name|procExecutor
argument_list|)
expr_stmt|;
name|step
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
block|{
name|abort
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isAborted
parameter_list|()
block|{
name|boolean
name|aborted
init|=
name|abort
operator|.
name|get
argument_list|()
decl_stmt|;
name|BaseTestStepProcedure
name|proc
init|=
name|this
decl_stmt|;
while|while
condition|(
name|proc
operator|.
name|hasParent
argument_list|()
operator|&&
operator|!
name|aborted
condition|)
block|{
name|proc
operator|=
operator|(
name|BaseTestStepProcedure
operator|)
name|procExecutor
operator|.
name|getProcedure
argument_list|(
name|proc
operator|.
name|getParentProcId
argument_list|()
argument_list|)
expr_stmt|;
name|aborted
operator|=
name|proc
operator|.
name|isAborted
argument_list|()
expr_stmt|;
block|}
return|return
name|aborted
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TestMultiStepProcedure
extends|extends
name|BaseTestStepProcedure
block|{
specifier|public
name|TestMultiStepProcedure
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|public
name|Procedure
index|[]
name|execute
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|super
operator|.
name|execute
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
name|isFailed
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Procedure
index|[]
block|{
operator|new
name|Step1Procedure
argument_list|()
block|}
return|;
block|}
specifier|public
specifier|static
class|class
name|Step1Procedure
extends|extends
name|BaseTestStepProcedure
block|{
specifier|public
name|Step1Procedure
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|protected
name|Procedure
index|[]
name|execute
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|super
operator|.
name|execute
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
name|isFailed
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Procedure
index|[]
block|{
operator|new
name|Step2Procedure
argument_list|()
block|}
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Step2Procedure
extends|extends
name|BaseTestStepProcedure
block|{
specifier|public
name|Step2Procedure
parameter_list|()
block|{ }
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoopLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|restart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testSingleStepProcRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|Procedure
name|proc
init|=
operator|new
name|TestSingleStepProcedure
argument_list|()
decl_stmt|;
name|procExecutor
operator|.
name|testing
operator|.
name|killBeforeStoreUpdate
operator|=
literal|true
expr_stmt|;
name|long
name|procId
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|procExecutor
operator|.
name|testing
operator|.
name|killBeforeStoreUpdate
operator|=
literal|false
expr_stmt|;
comment|// Restart and verify that the procedures restart
name|long
name|restartTs
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|procExecutor
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getLastUpdate
argument_list|()
operator|>
name|restartTs
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|resultTs
init|=
name|result
operator|.
name|getLastUpdate
argument_list|()
decl_stmt|;
comment|// Verify that after another restart the result is still there
name|restart
argument_list|()
expr_stmt|;
name|result
operator|=
name|procExecutor
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultTs
argument_list|,
name|result
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testMultiStepProcRecovery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Step 0 - kill
name|Procedure
name|proc
init|=
operator|new
name|TestMultiStepProcedure
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 0 exec&& Step 1 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 1 exec&& step 2 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 2 exec
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// The procedure is completed
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|procExecutor
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testMultiStepRollbackRecovery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Step 0 - kill
name|Procedure
name|proc
init|=
operator|new
name|TestMultiStepProcedure
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 0 exec&& Step 1 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 1 exec&& step 2 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 2 exec - rollback - kill
name|procSleepInterval
operator|=
literal|2500
expr_stmt|;
name|restart
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|procExecutor
operator|.
name|abort
argument_list|(
name|procId
argument_list|)
argument_list|)
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// rollback - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// rollback - complete
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart the executor and get the result
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
comment|// The procedure is completed
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|procExecutor
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertIsAbortException
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestStateMachineProcedure
extends|extends
name|StateMachineProcedure
argument_list|<
name|TestProcEnv
argument_list|,
name|TestStateMachineProcedure
operator|.
name|State
argument_list|>
block|{
enum|enum
name|State
block|{
name|STATE_1
block|,
name|STATE_2
block|,
name|STATE_3
block|,
name|DONE
block|}
specifier|public
name|TestStateMachineProcedure
parameter_list|()
block|{}
specifier|public
name|TestStateMachineProcedure
parameter_list|(
specifier|final
name|boolean
name|testSubmitChildProc
parameter_list|)
block|{
name|this
operator|.
name|submitChildProc
operator|=
name|testSubmitChildProc
expr_stmt|;
block|}
specifier|private
name|AtomicBoolean
name|aborted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|int
name|iResult
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|submitChildProc
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|StateMachineProcedure
operator|.
name|Flow
name|executeFromState
parameter_list|(
name|TestProcEnv
name|env
parameter_list|,
name|State
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|STATE_1
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"execute step 1 "
operator|+
name|this
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|State
operator|.
name|STATE_2
argument_list|)
expr_stmt|;
name|iResult
operator|+=
literal|3
expr_stmt|;
break|break;
case|case
name|STATE_2
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"execute step 2 "
operator|+
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|submitChildProc
condition|)
block|{
name|addChildProcedure
argument_list|(
operator|new
name|TestStateMachineProcedure
argument_list|()
argument_list|,
operator|new
name|TestStateMachineProcedure
argument_list|()
argument_list|)
expr_stmt|;
name|setNextState
argument_list|(
name|State
operator|.
name|DONE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNextState
argument_list|(
name|State
operator|.
name|STATE_3
argument_list|)
expr_stmt|;
block|}
name|iResult
operator|+=
literal|5
expr_stmt|;
break|break;
case|case
name|STATE_3
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"execute step 3 "
operator|+
name|this
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
name|procSleepInterval
argument_list|)
expr_stmt|;
if|if
condition|(
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"aborted step 3 "
operator|+
name|this
argument_list|)
expr_stmt|;
name|setAbortFailure
argument_list|(
literal|"test"
argument_list|,
literal|"aborted"
argument_list|)
expr_stmt|;
break|break;
block|}
name|setNextState
argument_list|(
name|State
operator|.
name|DONE
argument_list|)
expr_stmt|;
name|iResult
operator|+=
literal|7
expr_stmt|;
break|break;
case|case
name|DONE
case|:
if|if
condition|(
name|submitChildProc
condition|)
block|{
name|addChildProcedure
argument_list|(
operator|new
name|TestStateMachineProcedure
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iResult
operator|+=
literal|11
expr_stmt|;
name|setResult
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|iResult
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Flow
operator|.
name|NO_MORE_STATE
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
return|return
name|Flow
operator|.
name|HAS_MORE_STATE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|rollbackState
parameter_list|(
name|TestProcEnv
name|env
parameter_list|,
specifier|final
name|State
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|STATE_1
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"rollback step 1 "
operator|+
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|STATE_2
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"rollback step 2 "
operator|+
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|STATE_3
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"rollback step 3 "
operator|+
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|State
name|getState
parameter_list|(
specifier|final
name|int
name|stateId
parameter_list|)
block|{
return|return
name|State
operator|.
name|values
argument_list|()
index|[
name|stateId
index|]
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getStateId
parameter_list|(
specifier|final
name|State
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|ordinal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|State
name|getInitialState
parameter_list|()
block|{
return|return
name|State
operator|.
name|STATE_1
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|abort
parameter_list|(
name|TestProcEnv
name|env
parameter_list|)
block|{
name|aborted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serializeStateData
parameter_list|(
specifier|final
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|serializeStateData
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|iResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|deserializeStateData
parameter_list|(
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|deserializeStateData
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|stream
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|iResult
operator|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testStateMachineMultipleLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|procId
init|=
name|procExecutor
operator|.
name|submitProcedure
argument_list|(
operator|new
name|TestStateMachineProcedure
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait the completion
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|procExecutor
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|procExecutor
operator|.
name|getLastProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testStateMachineRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureTestingUtility
operator|.
name|setToggleKillBeforeStoreUpdate
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillBeforeStoreUpdate
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Step 1 - kill
name|Procedure
name|proc
init|=
operator|new
name|TestStateMachineProcedure
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 1 exec&& Step 2 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 2 exec&& step 3 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 3 exec
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// The procedure is completed
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|procExecutor
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testStateMachineRollbackRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureTestingUtility
operator|.
name|setToggleKillBeforeStoreUpdate
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillBeforeStoreUpdate
argument_list|(
name|procExecutor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Step 1 - kill
name|Procedure
name|proc
init|=
operator|new
name|TestStateMachineProcedure
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExecutor
argument_list|,
name|proc
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 1 exec&& Step 2 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 2 exec&& step 3 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step 3 exec - rollback step 3 - kill
name|procSleepInterval
operator|=
literal|2500
expr_stmt|;
name|restart
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|procExecutor
operator|.
name|abort
argument_list|(
name|procId
argument_list|)
argument_list|)
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Rollback step 3 - rollback step 2 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
comment|// Rollback step 2 - step 1 - kill
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
comment|// Rollback step 1 - complete
name|restart
argument_list|()
expr_stmt|;
name|waitProcedure
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procExecutor
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// The procedure is completed
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|procExecutor
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertIsAbortException
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitProcedure
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|)
block|{
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExecutor
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|dumpLogDirState
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dumpLogDirState
parameter_list|()
block|{
try|try
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|assertTrue
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|file
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"log file "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" size="
operator|+
name|file
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"no files under: "
operator|+
name|logDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to dump "
operator|+
name|logDir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestProcEnv
block|{
specifier|private
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
comment|/**      * set/unset a latch. every procedure execute() step will wait on the latch if any.      */
specifier|public
name|void
name|setWaitLatch
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
specifier|public
name|void
name|waitOnLatch
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

