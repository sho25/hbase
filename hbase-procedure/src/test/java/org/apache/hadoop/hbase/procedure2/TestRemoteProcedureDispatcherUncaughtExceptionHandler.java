begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * Make sure the {@link UncaughtExceptionHandler} will be called when there are unchecked exceptions  * thrown in the task.  *<p/>  * See HBASE-21875 and HBASE-21890 for more details.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRemoteProcedureDispatcherUncaughtExceptionHandler
block|{
specifier|private
specifier|static
name|HBaseCommonTestingUtility
name|UTIL
init|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRemoteProcedureDispatcherUncaughtExceptionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|ExceptionHandler
implements|implements
name|UncaughtExceptionHandler
block|{
specifier|private
name|Throwable
name|error
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|e
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|get
parameter_list|()
throws|throws
name|Throwable
block|{
while|while
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
throw|throw
name|error
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Dispatcher
extends|extends
name|RemoteProcedureDispatcher
argument_list|<
name|Void
argument_list|,
name|Integer
argument_list|>
block|{
specifier|private
specifier|final
name|UncaughtExceptionHandler
name|handler
decl_stmt|;
specifier|public
name|Dispatcher
parameter_list|(
name|UncaughtExceptionHandler
name|handler
parameter_list|)
block|{
name|super
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|UncaughtExceptionHandler
name|getUncaughtExceptionHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|remoteDispatch
parameter_list|(
name|Integer
name|key
parameter_list|,
name|Set
argument_list|<
name|RemoteProcedure
argument_list|>
name|operations
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|protected
name|void
name|abortPendingOperations
parameter_list|(
name|Integer
name|key
parameter_list|,
name|Set
argument_list|<
name|RemoteProcedure
argument_list|>
name|operations
parameter_list|)
block|{     }
block|}
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
name|ExceptionHandler
name|handler
decl_stmt|;
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|handler
operator|=
operator|new
name|ExceptionHandler
argument_list|()
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|Dispatcher
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dispatcher
operator|=
literal|null
expr_stmt|;
name|handler
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubmit
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|message
init|=
literal|"inject error"
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|submitTask
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|handler
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelayedSubmit
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|message
init|=
literal|"inject error"
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|submitTask
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|handler
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

