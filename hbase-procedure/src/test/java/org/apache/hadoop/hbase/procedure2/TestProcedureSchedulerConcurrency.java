begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|NoopProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestProcedureSchedulerConcurrency
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestProcedureSchedulerConcurrency
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestProcedureEvents
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleProcedureScheduler
name|procSched
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|procSched
operator|=
operator|new
name|SimpleProcedureScheduler
argument_list|()
expr_stmt|;
name|procSched
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|procSched
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentWaitWake
parameter_list|()
throws|throws
name|Exception
block|{
name|testConcurrentWaitWake
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentWaitWakeBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|testConcurrentWaitWake
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testConcurrentWaitWake
parameter_list|(
specifier|final
name|boolean
name|useWakeBatch
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|WAIT_THRESHOLD
init|=
literal|2500
decl_stmt|;
specifier|final
name|int
name|NPROCS
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|NRUNS
init|=
literal|500
decl_stmt|;
specifier|final
name|ProcedureScheduler
name|sched
init|=
name|procSched
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NPROCS
condition|;
operator|++
name|i
control|)
block|{
name|sched
operator|.
name|addBack
argument_list|(
operator|new
name|TestProcedureWithEvent
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|4
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|waitCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|wakeCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ConcurrentSkipListSet
argument_list|<
name|TestProcedureWithEvent
argument_list|>
name|waitQueue
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|()
decl_stmt|;
name|threads
index|[
literal|0
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|lastUpdate
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|oldWakeCount
init|=
name|wakeCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|useWakeBatch
condition|)
block|{
name|ProcedureEvent
index|[]
name|ev
init|=
operator|new
name|ProcedureEvent
index|[
name|waitQueue
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ev
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ev
index|[
name|i
index|]
operator|=
name|waitQueue
operator|.
name|pollFirst
argument_list|()
operator|.
name|getEvent
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"WAKE BATCH "
operator|+
name|ev
index|[
name|i
index|]
operator|+
literal|" total="
operator|+
name|wakeCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ProcedureEvent
operator|.
name|wakeEvents
argument_list|(
operator|(
name|AbstractProcedureScheduler
operator|)
name|sched
argument_list|,
name|ev
argument_list|)
expr_stmt|;
name|wakeCount
operator|.
name|addAndGet
argument_list|(
name|ev
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|size
init|=
name|waitQueue
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|size
operator|--
operator|>
literal|0
condition|)
block|{
name|ProcedureEvent
name|ev
init|=
name|waitQueue
operator|.
name|pollFirst
argument_list|()
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|ev
operator|.
name|wake
argument_list|(
name|procSched
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"WAKE "
operator|+
name|ev
operator|+
literal|" total="
operator|+
name|wakeCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|wakeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wakeCount
operator|.
name|get
argument_list|()
operator|!=
name|oldWakeCount
condition|)
block|{
name|lastUpdate
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wakeCount
operator|.
name|get
argument_list|()
operator|>=
name|NRUNS
operator|&&
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastUpdate
operator|)
operator|>
name|WAIT_THRESHOLD
condition|)
block|{
break|break;
block|}
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|25
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|TestProcedureWithEvent
name|proc
init|=
operator|(
name|TestProcedureWithEvent
operator|)
name|sched
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
continue|continue;
name|proc
operator|.
name|getEvent
argument_list|()
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|waitQueue
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|proc
operator|.
name|getEvent
argument_list|()
operator|.
name|suspendIfNotReady
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"WAIT "
operator|+
name|proc
operator|.
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitCount
operator|.
name|incrementAndGet
argument_list|()
operator|>=
name|NRUNS
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|sched
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestProcedureWithEvent
extends|extends
name|NoopProcedure
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|ProcedureEvent
name|event
decl_stmt|;
specifier|public
name|TestProcedureWithEvent
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
name|setProcId
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|ProcedureEvent
argument_list|(
literal|"test-event procId="
operator|+
name|procId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureEvent
name|getEvent
parameter_list|()
block|{
return|return
name|event
return|;
block|}
block|}
block|}
end_class

end_unit

