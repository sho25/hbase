begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStoreTracker
operator|.
name|DeleteState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBitSetNode
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBitSetNode
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetActiveMaxMinProcId
parameter_list|()
block|{
name|BitSetNode
name|node
init|=
operator|new
name|BitSetNode
argument_list|(
literal|5L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|node
operator|.
name|getActiveMinProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|node
operator|.
name|getActiveMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|insertOrUpdate
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|node
operator|.
name|getActiveMinProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|node
operator|.
name|getActiveMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|insertOrUpdate
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|node
operator|.
name|getActiveMinProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|node
operator|.
name|getActiveMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|delete
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|node
operator|.
name|getActiveMinProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|node
operator|.
name|getActiveMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|delete
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|node
operator|.
name|getActiveMinProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|node
operator|.
name|getActiveMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|delete
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|,
name|node
operator|.
name|getActiveMinProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|,
name|node
operator|.
name|getActiveMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrow
parameter_list|()
block|{
name|BitSetNode
name|node
init|=
operator|new
name|BitSetNode
argument_list|(
literal|1000
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// contains, do not need to grow but should not fail
name|assertTrue
argument_list|(
name|node
operator|.
name|canGrow
argument_list|(
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|canGrow
argument_list|(
literal|900
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|canGrow
argument_list|(
literal|1100
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|canGrow
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|canGrow
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// grow to right
name|node
operator|.
name|grow
argument_list|(
literal|1100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|contains
argument_list|(
literal|1100
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isModified
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// grow to left
name|node
operator|.
name|grow
argument_list|(
literal|900
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|contains
argument_list|(
literal|900
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isModified
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
name|node
operator|.
name|getStart
argument_list|()
init|;
name|i
operator|<=
name|node
operator|.
name|getEnd
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|1000
condition|)
block|{
name|assertEquals
argument_list|(
name|DeleteState
operator|.
name|YES
argument_list|,
name|node
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|DeleteState
operator|.
name|NO
argument_list|,
name|node
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerge
parameter_list|()
block|{
name|BitSetNode
name|node
init|=
operator|new
name|BitSetNode
argument_list|(
literal|1000
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|canMerge
argument_list|(
operator|new
name|BitSetNode
argument_list|(
literal|1200
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|node
operator|.
name|canMerge
argument_list|(
operator|new
name|BitSetNode
argument_list|(
literal|10000
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BitSetNode
name|rightNode
init|=
operator|new
name|BitSetNode
argument_list|(
literal|1200
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|node
operator|.
name|merge
argument_list|(
name|rightNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isModified
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isModified
argument_list|(
literal|1200
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
name|node
operator|.
name|getStart
argument_list|()
init|;
name|i
operator|<=
name|node
operator|.
name|getEnd
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|1000
operator|&&
name|i
operator|!=
literal|1200
condition|)
block|{
name|assertEquals
argument_list|(
name|DeleteState
operator|.
name|YES
argument_list|,
name|node
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|DeleteState
operator|.
name|NO
argument_list|,
name|node
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

