begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Tracks the master Maintenance Mode via ZK.  *  * Unused. Used to be set by hbck to prevent concurrent splits/merges, but those use PV2 now and  * HBCK2 uses it's own service, so no longer an issue. Left in, in case we need to use this for  * the incomplete parts of HBCK2...  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MasterMaintenanceModeTracker
extends|extends
name|ZKListener
block|{
specifier|private
name|boolean
name|hasChildren
decl_stmt|;
specifier|public
name|MasterMaintenanceModeTracker
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
name|hasChildren
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInMaintenanceMode
parameter_list|()
block|{
return|return
name|hasChildren
return|;
block|}
specifier|private
name|void
name|update
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterMaintZNode
argument_list|)
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|update
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenAndWatchForNewChildren
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|masterMaintZNode
argument_list|)
decl_stmt|;
name|hasChildren
operator|=
operator|(
name|children
operator|!=
literal|null
operator|&&
name|children
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
comment|// Ignore the ZK keeper exception
name|hasChildren
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Starts the tracking of whether master is in Maintenance Mode.    */
specifier|public
name|void
name|start
parameter_list|()
block|{
name|watcher
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|update
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|update
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeChildrenChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|update
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

