begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Common methods and attributes used by SplitLogManager and SplitLogWorker running distributed  * splitting of WAL logs.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|ZKSplitLog
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKSplitLog
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ZKSplitLog
parameter_list|()
block|{   }
comment|/**    * Gets the full path node name for the log file being split.    * This method will url encode the filename.    * @param zkw zk reference    * @param filename log file name (only the basename)    */
specifier|public
specifier|static
name|String
name|getEncodedNodeName
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|splitLogZNode
argument_list|,
name|encode
argument_list|(
name|filename
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getFileName
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|String
name|basename
init|=
name|node
operator|.
name|substring
argument_list|(
name|node
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|decode
argument_list|(
name|basename
argument_list|)
return|;
block|}
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
name|s
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"URLENCODER doesn't support UTF-8"
argument_list|)
throw|;
block|}
block|}
specifier|static
name|String
name|decode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|s
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"URLDecoder doesn't support UTF-8"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getRescanNode
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|splitLogZNode
argument_list|,
literal|"RESCAN"
argument_list|)
return|;
block|}
comment|/**    * @param name the last part in path    * @return whether the node name represents a rescan node    */
specifier|public
specifier|static
name|boolean
name|isRescanNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|startsWith
argument_list|(
literal|"RESCAN"
argument_list|)
return|;
block|}
comment|/**    * Checks if the given path represents a rescan node.    *    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and constants    * @param path the absolute path, starts with '/'    * @return whether the path represents a rescan node    */
specifier|public
specifier|static
name|boolean
name|isRescanNode
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getRescanNode
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|<=
name|prefix
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefix
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|prefix
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|path
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|Path
name|getSplitLogDir
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|String
name|tmpname
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|HConstants
operator|.
name|SPLIT_LOGDIR_NAME
argument_list|)
argument_list|,
name|tmpname
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|markCorrupted
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|String
name|logFileName
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getSplitLogDir
argument_list|(
name|rootdir
argument_list|,
name|logFileName
argument_list|)
argument_list|,
literal|"corrupt"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|createNewFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not flag a log file as corrupted. Failed to create "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isCorrupted
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|String
name|logFileName
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getSplitLogDir
argument_list|(
name|rootdir
argument_list|,
name|logFileName
argument_list|)
argument_list|,
literal|"corrupt"
argument_list|)
decl_stmt|;
name|boolean
name|isCorrupt
decl_stmt|;
name|isCorrupt
operator|=
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|isCorrupt
return|;
block|}
block|}
end_class

end_unit

