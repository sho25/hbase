begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotCleanupProtos
import|;
end_import

begin_comment
comment|/**  * Tracks status of snapshot auto cleanup based on TTL  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SnapshotCleanupTracker
extends|extends
name|ZKNodeTracker
block|{
comment|/**    * Constructs a new ZK node tracker.    *    *<p>After construction, use {@link #start} to kick off tracking.    *    * @param watcher reference to the {@link ZKWatcher} which also contains configuration and    *   constants    * @param abortable used to abort if a fatal error occurs    */
specifier|public
name|SnapshotCleanupTracker
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|snapshotCleanupZNode
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the current state of the snapshot auto cleanup based on TTL    *    * @return<code>true</code> if the snapshot auto cleanup is enabled,    *<code>false</code> otherwise.    */
specifier|public
name|boolean
name|isSnapshotCleanupEnabled
parameter_list|()
block|{
name|byte
index|[]
name|snapshotCleanupZNodeData
init|=
name|super
operator|.
name|getData
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
comment|// if data in ZK is null, use default of on.
return|return
name|snapshotCleanupZNodeData
operator|==
literal|null
operator|||
name|parseFrom
argument_list|(
name|snapshotCleanupZNodeData
argument_list|)
operator|.
name|getSnapshotCleanupEnabled
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|dex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ZK state for Snapshot Cleanup could not be parsed "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|snapshotCleanupZNodeData
argument_list|)
argument_list|,
name|dex
argument_list|)
expr_stmt|;
comment|// return false to be safe.
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Set snapshot auto clean on/off    *    * @param snapshotCleanupEnabled true if the snapshot auto cleanup should be on,    *   false otherwise    * @throws KeeperException if ZooKeeper operation fails    */
specifier|public
name|void
name|setSnapshotCleanupEnabled
parameter_list|(
specifier|final
name|boolean
name|snapshotCleanupEnabled
parameter_list|)
throws|throws
name|KeeperException
block|{
name|byte
index|[]
name|snapshotCleanupZNodeData
init|=
name|toByteArray
argument_list|(
name|snapshotCleanupEnabled
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|setData
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|snapshotCleanupZNode
argument_list|,
name|snapshotCleanupZNodeData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|snapshotCleanupZNode
argument_list|,
name|snapshotCleanupZNodeData
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|nodeDataChanged
argument_list|(
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|snapshotCleanupZNode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|toByteArray
parameter_list|(
specifier|final
name|boolean
name|isSnapshotCleanupEnabled
parameter_list|)
block|{
name|SnapshotCleanupProtos
operator|.
name|SnapshotCleanupState
operator|.
name|Builder
name|builder
init|=
name|SnapshotCleanupProtos
operator|.
name|SnapshotCleanupState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSnapshotCleanupEnabled
argument_list|(
name|isSnapshotCleanupEnabled
argument_list|)
expr_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|SnapshotCleanupProtos
operator|.
name|SnapshotCleanupState
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|pbBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|pbBytes
argument_list|)
expr_stmt|;
name|SnapshotCleanupProtos
operator|.
name|SnapshotCleanupState
operator|.
name|Builder
name|builder
init|=
name|SnapshotCleanupProtos
operator|.
name|SnapshotCleanupState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|magicLen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|pbBytes
argument_list|,
name|magicLen
argument_list|,
name|pbBytes
operator|.
name|length
operator|-
name|magicLen
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

