begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotAllMetaRegionsOnlineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|MetaRegionServer
import|;
end_import

begin_comment
comment|/**  * Utility class to perform operation (get/wait for/verify/set/delete) on znode in ZooKeeper which  * keeps hbase:meta region server location.  *<p/>  * Stateless class with a bunch of static methods. Doesn't manage resources passed in (e.g.  * Connection, ZKWatcher etc).  *<p/>  * Meta region location is set by<code>RegionServerServices</code>. This class doesn't use ZK  * watchers, rather accesses ZK directly.  *<p/>  * TODO: rewrite using RPC calls to master to find out about hbase:meta.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|MetaTableLocator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetaTableLocator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MetaTableLocator
parameter_list|()
block|{   }
comment|/**    * @param zkw ZooKeeper watcher to be used    * @return meta table regions and their locations.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getMetaRegionsAndLocations
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|)
block|{
return|return
name|getMetaRegionsAndLocations
argument_list|(
name|zkw
argument_list|,
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
return|;
block|}
comment|/**    * Gets the meta regions and their locations for the given path and replica ID.    *    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and operation    * @param replicaId the ID of the replica    * @return meta table regions and their locations.    */
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getMetaRegionsAndLocations
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|int
name|replicaId
parameter_list|)
block|{
name|ServerName
name|serverName
init|=
name|getMetaRegionLocation
argument_list|(
name|zkw
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|replicaId
argument_list|)
argument_list|,
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|/**    * Gets the meta regions for the given path with the default replica ID.    *    * @param zkw ZooKeeper watcher to be used    * @return List of meta regions    */
specifier|public
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getMetaRegions
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|)
block|{
return|return
name|getMetaRegions
argument_list|(
name|zkw
argument_list|,
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
return|;
block|}
comment|/**    * Gets the meta regions for the given path and replica ID.    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and operation    * @param replicaId the ID of the replica    * @return List of meta regions    */
specifier|public
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getMetaRegions
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|int
name|replicaId
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|result
decl_stmt|;
name|result
operator|=
name|getMetaRegionsAndLocations
argument_list|(
name|zkw
argument_list|,
name|replicaId
argument_list|)
expr_stmt|;
return|return
name|getListOfRegionInfos
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getListOfRegionInfos
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
if|if
condition|(
name|pairs
operator|==
literal|null
operator|||
name|pairs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Gets the meta region location, if available.  Does not block.    * @param zkw zookeeper connection to use    * @return server name or null if we failed to get the data.    */
specifier|public
specifier|static
name|ServerName
name|getMetaRegionLocation
parameter_list|(
specifier|final
name|ZKWatcher
name|zkw
parameter_list|)
block|{
try|try
block|{
name|RegionState
name|state
init|=
name|getMetaRegionState
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
return|return
name|state
operator|.
name|isOpened
argument_list|()
condition|?
name|state
operator|.
name|getServerName
argument_list|()
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Gets the meta region location, if available.  Does not block.    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and operation    * @param replicaId the ID of the replica    * @return server name    */
specifier|public
specifier|static
name|ServerName
name|getMetaRegionLocation
parameter_list|(
specifier|final
name|ZKWatcher
name|zkw
parameter_list|,
name|int
name|replicaId
parameter_list|)
block|{
try|try
block|{
name|RegionState
name|state
init|=
name|getMetaRegionState
argument_list|(
name|zkw
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
return|return
name|state
operator|.
name|isOpened
argument_list|()
condition|?
name|state
operator|.
name|getServerName
argument_list|()
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Gets the meta region location, if available, and waits for up to the specified timeout if not    * immediately available. Given the zookeeper notification could be delayed, we will try to get    * the latest data.    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and operation    * @param timeout maximum time to wait, in millis    * @return server name for server hosting meta region formatted as per {@link ServerName}, or null    *         if none available    * @throws InterruptedException if interrupted while waiting    * @throws NotAllMetaRegionsOnlineException if a meta or root region is not online    */
specifier|public
specifier|static
name|ServerName
name|waitMetaRegionLocation
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|NotAllMetaRegionsOnlineException
block|{
return|return
name|waitMetaRegionLocation
argument_list|(
name|zkw
argument_list|,
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|,
name|timeout
argument_list|)
return|;
block|}
comment|/**    * Gets the meta region location, if available, and waits for up to the specified timeout if not    * immediately available. Given the zookeeper notification could be delayed, we will try to get    * the latest data.    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and operation    * @param replicaId the ID of the replica    * @param timeout maximum time to wait, in millis    * @return server name for server hosting meta region formatted as per {@link ServerName}, or null    *         if none available    * @throws InterruptedException if waiting for the socket operation fails    * @throws NotAllMetaRegionsOnlineException if a meta or root region is not online    */
specifier|public
specifier|static
name|ServerName
name|waitMetaRegionLocation
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|int
name|replicaId
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|NotAllMetaRegionsOnlineException
block|{
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|String
name|errorMsg
init|=
literal|"Check the value configured in 'zookeeper.znode.parent'. "
operator|+
literal|"There could be a mismatch with the one configured in the master."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"KeeperException while trying to check baseZNode:"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ServerName
name|sn
init|=
name|blockUntilAvailable
argument_list|(
name|zkw
argument_list|,
name|replicaId
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotAllMetaRegionsOnlineException
argument_list|(
literal|"Timed out; "
operator|+
name|timeout
operator|+
literal|"ms"
argument_list|)
throw|;
block|}
return|return
name|sn
return|;
block|}
comment|/**    * Sets the location of<code>hbase:meta</code> in ZooKeeper to the    * specified server address.    * @param zookeeper zookeeper reference    * @param serverName The server hosting<code>hbase:meta</code>    * @param state The region transition state    * @throws KeeperException unexpected zookeeper exception    */
specifier|public
specifier|static
name|void
name|setMetaLocation
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|RegionState
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|KeeperException
block|{
name|setMetaLocation
argument_list|(
name|zookeeper
argument_list|,
name|serverName
argument_list|,
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the location of<code>hbase:meta</code> in ZooKeeper to the specified server address.    * @param zookeeper reference to the {@link ZKWatcher} which also contains configuration and    *                  operation    * @param serverName the name of the server    * @param replicaId the ID of the replica    * @param state the state of the region    * @throws KeeperException if a ZooKeeper operation fails    */
specifier|public
specifier|static
name|void
name|setMetaLocation
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|int
name|replicaId
parameter_list|,
name|RegionState
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Tried to set null ServerName in hbase:meta; skipping -- ServerName required"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting hbase:meta (replicaId={}) location in ZooKeeper as {}"
argument_list|,
name|replicaId
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
comment|// Make the MetaRegionServer pb and then get its bytes and save this as
comment|// the znode content.
name|MetaRegionServer
name|pbrsr
init|=
name|MetaRegionServer
operator|.
name|newBuilder
argument_list|()
operator|.
name|setServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|.
name|setRpcVersion
argument_list|(
name|HConstants
operator|.
name|RPC_CURRENT_VERSION
argument_list|)
operator|.
name|setState
argument_list|(
name|state
operator|.
name|convert
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|pbrsr
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zookeeper
argument_list|,
name|zookeeper
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|getZNodeForReplica
argument_list|(
name|replicaId
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
if|if
condition|(
name|replicaId
operator|==
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"META region location doesn't exist, create it"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"META region location doesn't exist for replicaId="
operator|+
name|replicaId
operator|+
literal|", create it"
argument_list|)
expr_stmt|;
block|}
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|zookeeper
argument_list|,
name|zookeeper
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|getZNodeForReplica
argument_list|(
name|replicaId
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Load the meta region state from the meta server ZNode.    */
specifier|public
specifier|static
name|RegionState
name|getMetaRegionState
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|getMetaRegionState
argument_list|(
name|zkw
argument_list|,
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
return|;
block|}
comment|/**    * Load the meta region state from the meta region server ZNode.    *    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and operation    * @param replicaId the ID of the replica    * @return regionstate    * @throws KeeperException if a ZooKeeper operation fails    */
specifier|public
specifier|static
name|RegionState
name|getMetaRegionState
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|KeeperException
block|{
name|RegionState
name|regionState
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|getZNodeForReplica
argument_list|(
name|replicaId
argument_list|)
argument_list|)
decl_stmt|;
name|regionState
operator|=
name|ProtobufUtil
operator|.
name|parseMetaRegionStateFrom
argument_list|(
name|data
argument_list|,
name|replicaId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
name|ZKUtil
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
name|regionState
return|;
block|}
comment|/**    * Deletes the location of<code>hbase:meta</code> in ZooKeeper.    * @param zookeeper zookeeper reference    * @throws KeeperException unexpected zookeeper exception    */
specifier|public
specifier|static
name|void
name|deleteMetaLocation
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|)
throws|throws
name|KeeperException
block|{
name|deleteMetaLocation
argument_list|(
name|zookeeper
argument_list|,
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteMetaLocation
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|replicaId
operator|==
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting hbase:meta region location in ZooKeeper"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting hbase:meta for {} region location in ZooKeeper"
argument_list|,
name|replicaId
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Just delete the node.  Don't need any watches.
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zookeeper
argument_list|,
name|zookeeper
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|getZNodeForReplica
argument_list|(
name|replicaId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
comment|// Has already been deleted
block|}
block|}
comment|/**    * Wait until the primary meta region is available. Get the secondary locations as well but don't    * block for those.    *    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and operation    * @param timeout maximum time to wait in millis    * @param conf the {@link Configuration} to use    * @return ServerName or null if we timed out.    * @throws InterruptedException if waiting for the socket operation fails    */
specifier|public
specifier|static
name|List
argument_list|<
name|ServerName
argument_list|>
name|blockUntilAvailable
parameter_list|(
specifier|final
name|ZKWatcher
name|zkw
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|numReplicasConfigured
init|=
literal|1
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Make the blocking call first so that we do the wait to know
comment|// the znodes are all in place or timeout.
name|ServerName
name|server
init|=
name|blockUntilAvailable
argument_list|(
name|zkw
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|metaReplicaNodes
init|=
name|zkw
operator|.
name|getMetaReplicaNodes
argument_list|()
decl_stmt|;
name|numReplicasConfigured
operator|=
name|metaReplicaNodes
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got ZK exception {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|replicaId
init|=
literal|1
init|;
name|replicaId
operator|<
name|numReplicasConfigured
condition|;
name|replicaId
operator|++
control|)
block|{
comment|// return all replica locations for the meta
name|servers
operator|.
name|add
argument_list|(
name|getMetaRegionLocation
argument_list|(
name|zkw
argument_list|,
name|replicaId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
comment|/**    * Wait until the meta region is available and is not in transition.    * @param zkw zookeeper connection to use    * @param timeout maximum time to wait, in millis    * @return ServerName or null if we timed out.    * @throws InterruptedException if waiting for the socket operation fails    */
specifier|public
specifier|static
name|ServerName
name|blockUntilAvailable
parameter_list|(
specifier|final
name|ZKWatcher
name|zkw
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|blockUntilAvailable
argument_list|(
name|zkw
argument_list|,
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|,
name|timeout
argument_list|)
return|;
block|}
comment|/**    * Wait until the meta region is available and is not in transition.    * @param zkw reference to the {@link ZKWatcher} which also contains configuration and constants    * @param replicaId the ID of the replica    * @param timeout maximum time to wait in millis    * @return ServerName or null if we timed out.    * @throws InterruptedException if waiting for the socket operation fails    */
specifier|public
specifier|static
name|ServerName
name|blockUntilAvailable
parameter_list|(
specifier|final
name|ZKWatcher
name|zkw
parameter_list|,
name|int
name|replicaId
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|zkw
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|sn
operator|=
name|getMetaRegionLocation
argument_list|(
name|zkw
argument_list|,
name|replicaId
argument_list|)
expr_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
operator|||
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|>
name|timeout
operator|-
name|HConstants
operator|.
name|SOCKET_RETRY_WAIT_MS
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|HConstants
operator|.
name|SOCKET_RETRY_WAIT_MS
argument_list|)
expr_stmt|;
block|}
return|return
name|sn
return|;
block|}
block|}
end_class

end_unit

