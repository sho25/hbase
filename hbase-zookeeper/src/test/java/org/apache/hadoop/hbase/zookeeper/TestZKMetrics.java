begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ZKTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ZKTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestZKMetrics
block|{
annotation|@
name|Test
specifier|public
name|void
name|testRegisterExceptions
parameter_list|()
block|{
name|MetricsZooKeeperSource
name|zkSource
init|=
name|mock
argument_list|(
name|MetricsZooKeeperSourceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|ZKMetrics
name|metricsZK
init|=
operator|new
name|ZKMetrics
argument_list|(
name|zkSource
argument_list|)
decl_stmt|;
name|metricsZK
operator|.
name|registerAuthFailedException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerConnectionLossException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerConnectionLossException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerDataInconsistencyException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerInvalidACLException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerNoAuthException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerOperationTimeoutException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerOperationTimeoutException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerRuntimeInconsistencyException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerSessionExpiredException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerSystemErrorException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerSystemErrorException
argument_list|()
expr_stmt|;
name|metricsZK
operator|.
name|registerFailedZKCall
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|incrementAuthFailedCount
argument_list|()
expr_stmt|;
comment|// ConnectionLoss Exception was registered twice.
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|incrementConnectionLossCount
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|incrementDataInconsistencyCount
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|incrementInvalidACLCount
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|incrementNoAuthCount
argument_list|()
expr_stmt|;
comment|// OperationTimeout Exception was registered twice.
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|incrementOperationTimeoutCount
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|incrementRuntimeInconsistencyCount
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|incrementSessionExpiredCount
argument_list|()
expr_stmt|;
comment|// SystemError Exception was registered twice.
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|incrementSystemErrorCount
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|incrementTotalFailedZKCalls
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLatencyHistogramUpdates
parameter_list|()
block|{
name|MetricsZooKeeperSource
name|zkSource
init|=
name|mock
argument_list|(
name|MetricsZooKeeperSourceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|ZKMetrics
name|metricsZK
init|=
operator|new
name|ZKMetrics
argument_list|(
name|zkSource
argument_list|)
decl_stmt|;
name|long
name|latency
init|=
literal|100
decl_stmt|;
name|metricsZK
operator|.
name|registerReadOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
name|metricsZK
operator|.
name|registerReadOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
name|metricsZK
operator|.
name|registerWriteOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
name|metricsZK
operator|.
name|registerSyncOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
comment|// Read Operation Latency update was registered twice.
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|recordReadOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|recordWriteOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|zkSource
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|recordSyncOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

