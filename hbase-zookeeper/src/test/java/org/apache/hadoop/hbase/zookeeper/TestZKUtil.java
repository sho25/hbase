begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|Superusers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ZKTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Perms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ZKTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestZKUtil
block|{
annotation|@
name|Test
specifier|public
name|void
name|testUnsecure
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Superusers
operator|.
name|SUPERUSER_CONF_KEY
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|String
name|node
init|=
literal|"/hbase/testUnsecure"
decl_stmt|;
name|ZKWatcher
name|watcher
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
name|node
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|aclList
init|=
name|ZKUtil
operator|.
name|createACL
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclList
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecuritySingleSuperuser
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Superusers
operator|.
name|SUPERUSER_CONF_KEY
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|String
name|node
init|=
literal|"/hbase/testSecuritySingleSuperuser"
decl_stmt|;
name|ZKWatcher
name|watcher
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
name|node
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|aclList
init|=
name|ZKUtil
operator|.
name|createACL
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclList
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 1+1, since ACL will be set for the creator by default
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"user1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
name|Ids
operator|.
name|CREATOR_ALL_ACL
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateACL
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Superusers
operator|.
name|SUPERUSER_CONF_KEY
argument_list|,
literal|"user1,@group1,user2,@group2,user3"
argument_list|)
expr_stmt|;
name|String
name|node
init|=
literal|"/hbase/testCreateACL"
decl_stmt|;
name|ZKWatcher
name|watcher
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
name|node
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|aclList
init|=
name|ZKUtil
operator|.
name|createACL
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclList
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// 3+1, since ACL will be set for the creator by default
name|Assert
operator|.
name|assertFalse
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"@group1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"@group2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"user1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"user2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"user3"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateACLWithSameUser
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Superusers
operator|.
name|SUPERUSER_CONF_KEY
argument_list|,
literal|"user4,@group1,user5,user6"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"user4"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|node
init|=
literal|"/hbase/testCreateACL"
decl_stmt|;
name|ZKWatcher
name|watcher
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
name|node
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|aclList
init|=
name|ZKUtil
operator|.
name|createACL
argument_list|(
name|watcher
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclList
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// 3, since service user the same as one of superuser
name|Assert
operator|.
name|assertFalse
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"@group1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"auth"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"user5"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|aclList
operator|.
name|contains
argument_list|(
operator|new
name|ACL
argument_list|(
name|Perms
operator|.
name|ALL
argument_list|,
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
literal|"user6"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|KeeperException
operator|.
name|SystemErrorException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInterruptedDuringAction
parameter_list|()
throws|throws
name|ZooKeeperConnectionException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|RecoverableZooKeeper
name|recoverableZk
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RecoverableZooKeeper
operator|.
name|class
argument_list|)
decl_stmt|;
name|ZKWatcher
name|zkw
init|=
operator|new
name|ZKWatcher
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
literal|"unittest"
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RecoverableZooKeeper
name|getRecoverableZooKeeper
parameter_list|()
block|{
return|return
name|recoverableZk
return|;
block|}
block|}
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|recoverableZk
argument_list|)
operator|.
name|getChildren
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

