begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UserMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|RecordFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Implementation for {@link ModeStrategy} for client Mode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|ClientModeStrategy
implements|implements
name|ModeStrategy
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|FieldInfo
argument_list|>
name|fieldInfos
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|CLIENT
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|USER_COUNT
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|READ_REQUEST_COUNT_PER_SECOND
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|WRITE_REQUEST_COUNT_PER_SECOND
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|FILTERED_READ_REQUEST_COUNT_PER_SECOND
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RequestCountPerSecond
argument_list|>
name|requestCountPerSecondMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ClientModeStrategy
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldInfo
argument_list|>
name|getFieldInfos
parameter_list|()
block|{
return|return
name|fieldInfos
return|;
block|}
annotation|@
name|Override
specifier|public
name|Field
name|getDefaultSortField
parameter_list|()
block|{
return|return
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Record
argument_list|>
name|getRecords
parameter_list|(
name|ClusterMetrics
name|clusterMetrics
parameter_list|,
name|List
argument_list|<
name|RecordFilter
argument_list|>
name|pushDownFilters
parameter_list|)
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|records
init|=
name|createRecords
argument_list|(
name|clusterMetrics
argument_list|)
decl_stmt|;
return|return
name|aggregateRecordsAndAddDistinct
argument_list|(
name|ModeStrategyUtils
operator|.
name|applyFilterAndGet
argument_list|(
name|records
argument_list|,
name|pushDownFilters
argument_list|)
argument_list|,
name|Field
operator|.
name|CLIENT
argument_list|,
name|Field
operator|.
name|USER
argument_list|,
name|Field
operator|.
name|USER_COUNT
argument_list|)
return|;
block|}
name|List
argument_list|<
name|Record
argument_list|>
name|createRecords
parameter_list|(
name|ClusterMetrics
name|clusterMetrics
parameter_list|)
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerMetrics
name|serverMetrics
range|:
name|clusterMetrics
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|lastReportTimestamp
init|=
name|serverMetrics
operator|.
name|getLastReportTimestamp
argument_list|()
decl_stmt|;
name|serverMetrics
operator|.
name|getUserMetrics
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|um
lambda|->
name|um
operator|.
name|getClientMetrics
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|clientMetrics
lambda|->
name|ret
operator|.
name|add
argument_list|(
name|createRecord
argument_list|(
name|um
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|clientMetrics
argument_list|,
name|lastReportTimestamp
argument_list|,
name|serverMetrics
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Aggregate the records and count the unique values for the given distinctField    *    * @param records               records to be processed    * @param groupBy               Field on which group by needs to be done    * @param distinctField         Field whose unique values needs to be counted    * @param uniqueCountAssignedTo a target field to which the unique count is assigned to    * @return aggregated records    */
name|List
argument_list|<
name|Record
argument_list|>
name|aggregateRecordsAndAddDistinct
parameter_list|(
name|List
argument_list|<
name|Record
argument_list|>
name|records
parameter_list|,
name|Field
name|groupBy
parameter_list|,
name|Field
name|distinctField
parameter_list|,
name|Field
name|uniqueCountAssignedTo
parameter_list|)
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|records
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|r
lambda|->
name|r
operator|.
name|get
argument_list|(
name|groupBy
argument_list|)
argument_list|)
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|val
lambda|->
block|{
name|Set
argument_list|<
name|FieldValue
argument_list|>
name|distinctValues
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
block|;
name|Map
argument_list|<
name|Field
argument_list|,
name|FieldValue
argument_list|>
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
block|;
for|for
control|(
name|Record
name|record
range|:
name|val
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Field
argument_list|,
name|FieldValue
argument_list|>
name|field
range|:
name|record
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|distinctField
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|//We will not be adding the field in the new record whose distinct count is required
name|distinctValues
operator|.
name|add
argument_list|(
name|record
operator|.
name|get
argument_list|(
name|distinctField
argument_list|)
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
if|if
condition|(
name|field
operator|.
name|getKey
argument_list|()
operator|.
name|getFieldValueType
argument_list|()
operator|==
name|FieldValueType
operator|.
name|STRING
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|plus
argument_list|(
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|// Add unique count field
end_comment

begin_expr_stmt
name|map
operator|.
name|put
argument_list|(
name|uniqueCountAssignedTo
argument_list|,
name|uniqueCountAssignedTo
operator|.
name|newValue
argument_list|(
name|distinctValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|result
operator|.
name|add
argument_list|(
name|Record
operator|.
name|ofEntries
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|k
lambda|->
name|Record
operator|.
name|entry
argument_list|(
name|k
operator|.
name|getKey
argument_list|()
argument_list|,
name|k
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}    Record
name|createRecord
argument_list|(
name|String
name|user
argument_list|,
name|UserMetrics
operator|.
name|ClientMetrics
name|clientMetrics
argument_list|,
name|long
name|lastReportTimestamp
argument_list|,
name|String
name|server
argument_list|)
block|{
name|Record
operator|.
name|Builder
name|builder
operator|=
name|Record
operator|.
name|builder
argument_list|()
block|;
name|String
name|client
operator|=
name|clientMetrics
operator|.
name|getHostName
argument_list|()
block|;
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|CLIENT
argument_list|,
name|clientMetrics
operator|.
name|getHostName
argument_list|()
argument_list|)
block|;
name|String
name|mapKey
operator|=
name|client
operator|+
literal|"$"
operator|+
name|user
operator|+
literal|"$"
operator|+
name|server
block|;
name|RequestCountPerSecond
name|requestCountPerSecond
operator|=
name|requestCountPerSecondMap
operator|.
name|get
argument_list|(
name|mapKey
argument_list|)
block|;
if|if
condition|(
name|requestCountPerSecond
operator|==
literal|null
condition|)
block|{
name|requestCountPerSecond
operator|=
operator|new
name|RequestCountPerSecond
argument_list|()
expr_stmt|;
name|requestCountPerSecondMap
operator|.
name|put
argument_list|(
name|mapKey
argument_list|,
name|requestCountPerSecond
argument_list|)
expr_stmt|;
block|}
name|requestCountPerSecond
operator|.
name|refresh
argument_list|(
name|lastReportTimestamp
argument_list|,
name|clientMetrics
operator|.
name|getReadRequestsCount
argument_list|()
argument_list|,
name|clientMetrics
operator|.
name|getFilteredReadRequestsCount
argument_list|()
argument_list|,
name|clientMetrics
operator|.
name|getWriteRequestsCount
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
name|requestCountPerSecond
operator|.
name|getRequestCountPerSecond
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|READ_REQUEST_COUNT_PER_SECOND
argument_list|,
name|requestCountPerSecond
operator|.
name|getReadRequestCountPerSecond
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|WRITE_REQUEST_COUNT_PER_SECOND
argument_list|,
name|requestCountPerSecond
operator|.
name|getWriteRequestCountPerSecond
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|FILTERED_READ_REQUEST_COUNT_PER_SECOND
argument_list|,
name|requestCountPerSecond
operator|.
name|getFilteredReadRequestCountPerSecond
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|DrillDownInfo
name|drillDown
parameter_list|(
name|Record
name|selectedRecord
parameter_list|)
block|{
name|List
argument_list|<
name|RecordFilter
argument_list|>
name|initialFilters
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|CLIENT
argument_list|)
operator|.
name|doubleEquals
argument_list|(
name|selectedRecord
operator|.
name|get
argument_list|(
name|Field
operator|.
name|CLIENT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|DrillDownInfo
argument_list|(
name|Mode
operator|.
name|USER
argument_list|,
name|initialFilters
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

