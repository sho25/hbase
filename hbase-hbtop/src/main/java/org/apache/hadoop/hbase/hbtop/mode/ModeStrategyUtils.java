begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|RecordFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ModeStrategyUtils
block|{
specifier|private
name|ModeStrategyUtils
parameter_list|()
block|{    }
comment|/**    * Filter records as per the supplied filters,    * @param records records to be processed    * @param filters List of filters    * @return filtered records    */
specifier|public
specifier|static
name|List
argument_list|<
name|Record
argument_list|>
name|applyFilterAndGet
parameter_list|(
name|List
argument_list|<
name|Record
argument_list|>
name|records
parameter_list|,
name|List
argument_list|<
name|RecordFilter
argument_list|>
name|filters
parameter_list|)
block|{
if|if
condition|(
name|filters
operator|!=
literal|null
operator|&&
operator|!
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|records
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|filters
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|f
lambda|->
name|f
operator|.
name|execute
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
return|return
name|records
return|;
block|}
comment|/**    * Group by records on the basis of supplied groupBy field and    * Aggregate records using {@link Record#combine(Record)}    *    * @param records records needs to be processed    * @param groupBy Field to be used for group by    * @return aggregated records    */
specifier|public
specifier|static
name|List
argument_list|<
name|Record
argument_list|>
name|aggregateRecords
parameter_list|(
name|List
argument_list|<
name|Record
argument_list|>
name|records
parameter_list|,
name|Field
name|groupBy
parameter_list|)
block|{
return|return
name|records
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|r
lambda|->
name|r
operator|.
name|get
argument_list|(
name|groupBy
argument_list|)
argument_list|)
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|reduce
argument_list|(
name|Record
operator|::
name|combine
argument_list|)
operator|.
name|map
argument_list|(
name|Stream
operator|::
name|of
argument_list|)
operator|.
name|orElse
argument_list|(
name|Stream
operator|.
name|empty
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

