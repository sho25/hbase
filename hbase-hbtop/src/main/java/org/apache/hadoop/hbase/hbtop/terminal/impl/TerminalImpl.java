begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|impl
operator|.
name|EscapeSequences
operator|.
name|clearAll
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|impl
operator|.
name|EscapeSequences
operator|.
name|cursor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|impl
operator|.
name|EscapeSequences
operator|.
name|moveCursor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|impl
operator|.
name|EscapeSequences
operator|.
name|normal
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|CursorPosition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|KeyPress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|TerminalPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|TerminalSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The implementation of the {@link Terminal} interface.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TerminalImpl
implements|implements
name|Terminal
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TerminalImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TerminalSize
name|cachedTerminalSize
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|output
decl_stmt|;
specifier|private
specifier|final
name|ScreenBuffer
name|screenBuffer
decl_stmt|;
specifier|private
specifier|final
name|Queue
argument_list|<
name|KeyPress
argument_list|>
name|keyPressQueue
decl_stmt|;
specifier|private
specifier|final
name|KeyPressGenerator
name|keyPressGenerator
decl_stmt|;
specifier|public
name|TerminalImpl
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TerminalImpl
parameter_list|(
annotation|@
name|Nullable
name|String
name|title
parameter_list|)
block|{
name|output
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|sttyRaw
argument_list|()
expr_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
name|screenBuffer
operator|=
operator|new
name|ScreenBuffer
argument_list|()
expr_stmt|;
name|cachedTerminalSize
operator|=
name|queryTerminalSize
argument_list|()
expr_stmt|;
name|updateTerminalSize
argument_list|(
name|cachedTerminalSize
operator|.
name|getColumns
argument_list|()
argument_list|,
name|cachedTerminalSize
operator|.
name|getRows
argument_list|()
argument_list|)
expr_stmt|;
name|keyPressQueue
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
expr_stmt|;
name|keyPressGenerator
operator|=
operator|new
name|KeyPressGenerator
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|keyPressQueue
argument_list|)
expr_stmt|;
name|keyPressGenerator
operator|.
name|start
argument_list|()
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|output
operator|.
name|printf
argument_list|(
literal|"%s%s%s%s"
argument_list|,
name|moveCursor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|cursor
argument_list|(
literal|true
argument_list|)
argument_list|,
name|normal
argument_list|()
argument_list|,
name|clearAll
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|sttyCooked
argument_list|()
expr_stmt|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clear the terminal
name|output
operator|.
name|write
argument_list|(
name|clearAll
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|output
operator|.
name|write
argument_list|(
name|EscapeSequences
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateTerminalSize
parameter_list|(
name|int
name|columns
parameter_list|,
name|int
name|rows
parameter_list|)
block|{
name|screenBuffer
operator|.
name|reallocate
argument_list|(
name|columns
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|screenBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|screenBuffer
operator|.
name|flush
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TerminalSize
name|getSize
parameter_list|()
block|{
return|return
name|cachedTerminalSize
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|TerminalSize
name|doResizeIfNecessary
parameter_list|()
block|{
name|TerminalSize
name|currentTerminalSize
init|=
name|queryTerminalSize
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentTerminalSize
operator|.
name|equals
argument_list|(
name|cachedTerminalSize
argument_list|)
condition|)
block|{
name|cachedTerminalSize
operator|=
name|currentTerminalSize
expr_stmt|;
name|updateTerminalSize
argument_list|(
name|cachedTerminalSize
operator|.
name|getColumns
argument_list|()
argument_list|,
name|cachedTerminalSize
operator|.
name|getRows
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cachedTerminalSize
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|KeyPress
name|pollKeyPress
parameter_list|()
block|{
return|return
name|keyPressQueue
operator|.
name|poll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CursorPosition
name|getCursorPosition
parameter_list|()
block|{
return|return
name|screenBuffer
operator|.
name|getCursorPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCursorPosition
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|screenBuffer
operator|.
name|setCursorPosition
argument_list|(
name|column
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|hideCursor
parameter_list|()
block|{
name|screenBuffer
operator|.
name|hideCursor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TerminalPrinter
name|getTerminalPrinter
parameter_list|(
name|int
name|startRow
parameter_list|)
block|{
return|return
operator|new
name|TerminalPrinterImpl
argument_list|(
name|screenBuffer
argument_list|,
name|startRow
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|keyPressGenerator
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|TerminalSize
name|queryTerminalSize
parameter_list|()
block|{
name|String
name|sizeString
init|=
name|doStty
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|int
name|columns
init|=
literal|0
decl_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|sizeString
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|>
literal|0
condition|)
block|{
name|rows
operator|=
name|rc
expr_stmt|;
block|}
name|rc
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|>
literal|0
condition|)
block|{
name|columns
operator|=
name|rc
expr_stmt|;
block|}
return|return
operator|new
name|TerminalSize
argument_list|(
name|columns
argument_list|,
name|rows
argument_list|)
return|;
block|}
specifier|private
name|void
name|sttyRaw
parameter_list|()
block|{
name|doStty
argument_list|(
literal|"-ignbrk -brkint -parmrk -istrip -inlcr -igncr -icrnl -ixon -opost "
operator|+
literal|"-echo -echonl -icanon -isig -iexten -parenb cs8 min 1"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sttyCooked
parameter_list|()
block|{
name|doStty
argument_list|(
literal|"sane cooked"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|doStty
parameter_list|(
name|String
name|sttyOptionsString
parameter_list|)
block|{
name|String
index|[]
name|cmd
init|=
block|{
literal|"/bin/sh"
block|,
literal|"-c"
block|,
literal|"stty "
operator|+
name|sttyOptionsString
operator|+
literal|"< /dev/tty"
block|}
decl_stmt|;
try|try
block|{
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|String
name|ret
decl_stmt|;
comment|// stdout
try|try
init|(
name|BufferedReader
name|stdout
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|ret
operator|=
name|stdout
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
comment|// stderr
try|try
init|(
name|BufferedReader
name|stderr
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
init|=
name|stderr
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|line
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error output from stty: "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{       }
name|int
name|exitValue
init|=
name|process
operator|.
name|exitValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitValue
operator|!=
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"stty returned error code: "
operator|+
name|exitValue
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

