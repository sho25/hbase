begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|field
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|ScreenView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * The presentation logic for the field screen.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FieldScreenPresenter
block|{
annotation|@
name|FunctionalInterface
specifier|public
interface|interface
name|ResultListener
block|{
name|void
name|accept
parameter_list|(
name|Field
name|sortField
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|EnumMap
argument_list|<
name|Field
argument_list|,
name|Boolean
argument_list|>
name|fieldDisplayMap
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|final
name|FieldScreenView
name|fieldScreenView
decl_stmt|;
specifier|private
name|Field
name|sortField
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
decl_stmt|;
specifier|private
specifier|final
name|EnumMap
argument_list|<
name|Field
argument_list|,
name|Boolean
argument_list|>
name|fieldDisplayMap
decl_stmt|;
specifier|private
specifier|final
name|ResultListener
name|resultListener
decl_stmt|;
specifier|private
specifier|final
name|ScreenView
name|nextScreenView
decl_stmt|;
specifier|private
specifier|final
name|int
name|headerMaxLength
decl_stmt|;
specifier|private
specifier|final
name|int
name|descriptionMaxLength
decl_stmt|;
specifier|private
name|int
name|currentPosition
decl_stmt|;
specifier|private
name|boolean
name|moveMode
decl_stmt|;
specifier|public
name|FieldScreenPresenter
parameter_list|(
name|FieldScreenView
name|fieldScreenView
parameter_list|,
name|Field
name|sortField
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|EnumMap
argument_list|<
name|Field
argument_list|,
name|Boolean
argument_list|>
name|fieldDisplayMap
parameter_list|,
name|ResultListener
name|resultListener
parameter_list|,
name|ScreenView
name|nextScreenView
parameter_list|)
block|{
name|this
operator|.
name|fieldScreenView
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|fieldScreenView
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortField
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|sortField
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldDisplayMap
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|fieldDisplayMap
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|resultListener
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|resultListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextScreenView
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nextScreenView
argument_list|)
expr_stmt|;
name|int
name|headerLength
init|=
literal|0
decl_stmt|;
name|int
name|descriptionLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
name|sortField
condition|)
block|{
name|currentPosition
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|headerLength
operator|<
name|field
operator|.
name|getHeader
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|headerLength
operator|=
name|field
operator|.
name|getHeader
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|descriptionLength
operator|<
name|field
operator|.
name|getDescription
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|descriptionLength
operator|=
name|field
operator|.
name|getDescription
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|headerMaxLength
operator|=
name|headerLength
expr_stmt|;
name|descriptionMaxLength
operator|=
name|descriptionLength
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|fieldScreenView
operator|.
name|hideCursor
argument_list|()
expr_stmt|;
name|fieldScreenView
operator|.
name|clearTerminal
argument_list|()
expr_stmt|;
name|fieldScreenView
operator|.
name|showFieldScreen
argument_list|(
name|sortField
operator|.
name|getHeader
argument_list|()
argument_list|,
name|fields
argument_list|,
name|fieldDisplayMap
argument_list|,
name|currentPosition
argument_list|,
name|headerMaxLength
argument_list|,
name|descriptionMaxLength
argument_list|,
name|moveMode
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|arrowUp
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|>
literal|0
condition|)
block|{
name|currentPosition
operator|-=
literal|1
expr_stmt|;
if|if
condition|(
name|moveMode
condition|)
block|{
name|Field
name|tmp
init|=
name|fields
operator|.
name|remove
argument_list|(
name|currentPosition
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|currentPosition
operator|+
literal|1
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
name|showField
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|showField
argument_list|(
name|currentPosition
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|arrowDown
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|<
name|fields
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|currentPosition
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|moveMode
condition|)
block|{
name|Field
name|tmp
init|=
name|fields
operator|.
name|remove
argument_list|(
name|currentPosition
operator|-
literal|1
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|currentPosition
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
name|showField
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|showField
argument_list|(
name|currentPosition
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|pageUp
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|>
literal|0
operator|&&
operator|!
name|moveMode
condition|)
block|{
name|int
name|previousPosition
init|=
name|currentPosition
decl_stmt|;
name|currentPosition
operator|=
literal|0
expr_stmt|;
name|showField
argument_list|(
name|previousPosition
argument_list|)
expr_stmt|;
name|showField
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|pageDown
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|<
name|fields
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|moveMode
condition|)
block|{
name|int
name|previousPosition
init|=
name|currentPosition
decl_stmt|;
name|currentPosition
operator|=
name|fields
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|showField
argument_list|(
name|previousPosition
argument_list|)
expr_stmt|;
name|showField
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|turnOnMoveMode
parameter_list|()
block|{
name|moveMode
operator|=
literal|true
expr_stmt|;
name|showField
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|turnOffMoveMode
parameter_list|()
block|{
name|moveMode
operator|=
literal|false
expr_stmt|;
name|showField
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|switchFieldDisplay
parameter_list|()
block|{
if|if
condition|(
operator|!
name|moveMode
condition|)
block|{
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|currentPosition
argument_list|)
decl_stmt|;
name|fieldDisplayMap
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|!
name|fieldDisplayMap
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|showField
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|showField
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|fieldScreenView
operator|.
name|showField
argument_list|(
name|pos
argument_list|,
name|field
argument_list|,
name|fieldDisplayMap
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|,
name|pos
operator|==
name|currentPosition
argument_list|,
name|headerMaxLength
argument_list|,
name|descriptionMaxLength
argument_list|,
name|moveMode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSortField
parameter_list|()
block|{
if|if
condition|(
operator|!
name|moveMode
condition|)
block|{
name|Field
name|newSortField
init|=
name|fields
operator|.
name|get
argument_list|(
name|currentPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSortField
operator|!=
name|this
operator|.
name|sortField
condition|)
block|{
name|this
operator|.
name|sortField
operator|=
name|newSortField
expr_stmt|;
name|fieldScreenView
operator|.
name|showScreenDescription
argument_list|(
name|sortField
operator|.
name|getHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fieldScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ScreenView
name|transitionToNextScreen
parameter_list|()
block|{
name|resultListener
operator|.
name|accept
argument_list|(
name|sortField
argument_list|,
name|fields
argument_list|,
name|fieldDisplayMap
argument_list|)
expr_stmt|;
return|return
name|nextScreenView
return|;
block|}
block|}
end_class

end_unit

