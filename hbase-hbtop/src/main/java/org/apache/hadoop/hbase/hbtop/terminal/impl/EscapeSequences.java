begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Utility class for escape sequences.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|EscapeSequences
block|{
specifier|private
name|EscapeSequences
parameter_list|()
block|{   }
specifier|public
specifier|static
name|String
name|clearAll
parameter_list|()
block|{
return|return
literal|"\033[0;37;40m\033[2J"
return|;
block|}
specifier|public
specifier|static
name|String
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
return|return
literal|"\033]2;"
operator|+
name|title
operator|+
literal|"\007"
return|;
block|}
specifier|public
specifier|static
name|String
name|cursor
parameter_list|(
name|boolean
name|on
parameter_list|)
block|{
if|if
condition|(
name|on
condition|)
block|{
return|return
literal|"\033[?25h"
return|;
block|}
return|return
literal|"\033[?25l"
return|;
block|}
specifier|public
specifier|static
name|String
name|moveCursor
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|row
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"\033[%d;%dH"
argument_list|,
name|row
operator|+
literal|1
argument_list|,
name|column
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|clearRemainingLine
parameter_list|()
block|{
return|return
literal|"\033[0;37;40m\033[K"
return|;
block|}
specifier|public
specifier|static
name|String
name|color
parameter_list|(
name|Color
name|foregroundColor
parameter_list|,
name|Color
name|backgroundColor
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|reverse
parameter_list|,
name|boolean
name|blink
parameter_list|,
name|boolean
name|underline
parameter_list|)
block|{
name|int
name|foregroundColorValue
init|=
name|getColorValue
argument_list|(
name|foregroundColor
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|backgroundColorValue
init|=
name|getColorValue
argument_list|(
name|backgroundColor
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|bold
operator|&&
name|reverse
operator|&&
name|blink
operator|&&
operator|!
name|underline
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;1;7;5;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bold
operator|&&
name|reverse
operator|&&
operator|!
name|blink
operator|&&
operator|!
name|underline
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;1;7;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bold
operator|&&
name|reverse
operator|&&
name|blink
operator|&&
operator|!
name|underline
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;7;5;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bold
operator|&&
operator|!
name|reverse
operator|&&
name|blink
operator|&&
operator|!
name|underline
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;1;5;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bold
operator|&&
operator|!
name|reverse
operator|&&
operator|!
name|blink
operator|&&
operator|!
name|underline
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;1;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bold
operator|&&
name|reverse
operator|&&
operator|!
name|blink
operator|&&
operator|!
name|underline
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;7;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bold
operator|&&
operator|!
name|reverse
operator|&&
name|blink
operator|&&
operator|!
name|underline
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;5;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bold
operator|&&
name|reverse
operator|&&
name|blink
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;1;7;5;4;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bold
operator|&&
name|reverse
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;1;7;4;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bold
operator|&&
name|reverse
operator|&&
name|blink
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;7;5;4;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bold
operator|&&
name|blink
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;1;5;4;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bold
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;1;4;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reverse
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;7;4;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blink
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;5;4;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|underline
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;4;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\033[0;"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d;%dm"
argument_list|,
name|foregroundColorValue
argument_list|,
name|backgroundColorValue
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|int
name|getColorValue
parameter_list|(
name|Color
name|color
parameter_list|,
name|boolean
name|foreground
parameter_list|)
block|{
name|int
name|baseValue
decl_stmt|;
if|if
condition|(
name|foreground
condition|)
block|{
name|baseValue
operator|=
literal|30
expr_stmt|;
block|}
else|else
block|{
comment|// background
name|baseValue
operator|=
literal|40
expr_stmt|;
block|}
switch|switch
condition|(
name|color
condition|)
block|{
case|case
name|BLACK
case|:
return|return
name|baseValue
return|;
case|case
name|RED
case|:
return|return
name|baseValue
operator|+
literal|1
return|;
case|case
name|GREEN
case|:
return|return
name|baseValue
operator|+
literal|2
return|;
case|case
name|YELLOW
case|:
return|return
name|baseValue
operator|+
literal|3
return|;
case|case
name|BLUE
case|:
return|return
name|baseValue
operator|+
literal|4
return|;
case|case
name|MAGENTA
case|:
return|return
name|baseValue
operator|+
literal|5
return|;
case|case
name|CYAN
case|:
return|return
name|baseValue
operator|+
literal|6
return|;
case|case
name|WHITE
case|:
return|return
name|baseValue
operator|+
literal|7
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|normal
parameter_list|()
block|{
return|return
literal|"\033[0;37;40m"
return|;
block|}
block|}
end_class

end_unit

