begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|top
operator|.
name|TopScreenView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|KeyPress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|impl
operator|.
name|TerminalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This dispatches key presses and timers to the current {@link ScreenView}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Screen
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Screen
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_TIMEOUT_MILLISECONDS
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|Admin
name|admin
decl_stmt|;
specifier|private
specifier|final
name|Terminal
name|terminal
decl_stmt|;
specifier|private
name|ScreenView
name|currentScreenView
decl_stmt|;
specifier|private
name|Long
name|timerTimestamp
decl_stmt|;
specifier|public
name|Screen
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|initialRefreshDelay
parameter_list|,
name|Mode
name|initialMode
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
comment|// The first screen is the top screen
name|this
operator|.
name|terminal
operator|=
operator|new
name|TerminalImpl
argument_list|(
literal|"hbtop"
argument_list|)
expr_stmt|;
name|currentScreenView
operator|=
operator|new
name|TopScreenView
argument_list|(
name|this
argument_list|,
name|terminal
argument_list|,
name|initialRefreshDelay
argument_list|,
name|admin
argument_list|,
name|initialMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|terminal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|currentScreenView
operator|.
name|init
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|KeyPress
name|keyPress
init|=
name|terminal
operator|.
name|pollKeyPress
argument_list|()
decl_stmt|;
name|ScreenView
name|nextScreenView
decl_stmt|;
if|if
condition|(
name|keyPress
operator|!=
literal|null
condition|)
block|{
comment|// Dispatch the key press to the current screen
name|nextScreenView
operator|=
name|currentScreenView
operator|.
name|handleKeyPress
argument_list|(
name|keyPress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|timerTimestamp
operator|!=
literal|null
condition|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|timerTimestamp
operator|<=
name|now
condition|)
block|{
comment|// Dispatch the timer to the current screen
name|timerTimestamp
operator|=
literal|null
expr_stmt|;
name|nextScreenView
operator|=
name|currentScreenView
operator|.
name|handleTimer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|timerTimestamp
operator|-
name|now
operator|<
name|SLEEP_TIMEOUT_MILLISECONDS
condition|)
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|timerTimestamp
operator|-
name|now
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|SLEEP_TIMEOUT_MILLISECONDS
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
else|else
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|SLEEP_TIMEOUT_MILLISECONDS
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|// If the next screen is null, then exit
if|if
condition|(
name|nextScreenView
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// If the next screen is not the previous, then go to the next screen
if|if
condition|(
name|nextScreenView
operator|!=
name|currentScreenView
condition|)
block|{
name|currentScreenView
operator|=
name|nextScreenView
expr_stmt|;
name|currentScreenView
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Caught an exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setTimer
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|timerTimestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|delay
expr_stmt|;
block|}
specifier|public
name|void
name|cancelTimer
parameter_list|()
block|{
name|timerTimestamp
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

