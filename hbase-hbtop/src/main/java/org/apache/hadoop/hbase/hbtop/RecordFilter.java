begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Represents a filter that's filtering the metric {@link Record}s.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|RecordFilter
block|{
specifier|private
enum|enum
name|Operator
block|{
name|EQUAL
argument_list|(
literal|"="
argument_list|)
block|,
name|DOUBLE_EQUALS
argument_list|(
literal|"=="
argument_list|)
block|,
name|GREATER
argument_list|(
literal|">"
argument_list|)
block|,
name|GREATER_OR_EQUAL
argument_list|(
literal|">="
argument_list|)
block|,
name|LESS
argument_list|(
literal|"<"
argument_list|)
block|,
name|LESS_OR_EQUAL
argument_list|(
literal|"<="
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|operator
decl_stmt|;
name|Operator
parameter_list|(
name|String
name|operator
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
block|}
specifier|public
specifier|static
name|RecordFilter
name|parse
parameter_list|(
name|String
name|filterString
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|filterString
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Field
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|ignoreCase
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RecordFilter
name|parse
parameter_list|(
name|String
name|filterString
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|boolean
name|not
init|=
name|isNot
argument_list|(
name|filterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|not
condition|)
block|{
name|index
operator|+=
literal|1
expr_stmt|;
block|}
name|StringBuilder
name|fieldString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|filterString
operator|.
name|length
argument_list|()
operator|>
name|index
operator|&&
name|filterString
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|!=
literal|'<'
operator|&&
name|filterString
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|!=
literal|'>'
operator|&&
name|filterString
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|!=
literal|'='
condition|)
block|{
name|fieldString
operator|.
name|append
argument_list|(
name|filterString
operator|.
name|charAt
argument_list|(
name|index
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldString
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|filterString
operator|.
name|length
argument_list|()
operator|==
name|index
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Field
name|field
init|=
name|getField
argument_list|(
name|fields
argument_list|,
name|fieldString
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|operatorString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|filterString
operator|.
name|length
argument_list|()
operator|>
name|index
operator|&&
operator|(
name|filterString
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|'<'
operator|||
name|filterString
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|'>'
operator|||
name|filterString
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|'='
operator|)
condition|)
block|{
name|operatorString
operator|.
name|append
argument_list|(
name|filterString
operator|.
name|charAt
argument_list|(
name|index
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Operator
name|operator
init|=
name|getOperator
argument_list|(
name|operatorString
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|value
init|=
name|filterString
operator|.
name|substring
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|FieldValue
name|fieldValue
init|=
name|getFieldValue
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|RecordFilter
argument_list|(
name|ignoreCase
argument_list|,
name|not
argument_list|,
name|field
argument_list|,
name|operator
argument_list|,
name|fieldValue
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|FieldValue
name|getFieldValue
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isNot
parameter_list|(
name|String
name|filterString
parameter_list|)
block|{
return|return
name|filterString
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Field
name|getField
parameter_list|(
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|,
name|String
name|fieldString
parameter_list|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getHeader
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldString
argument_list|)
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Operator
name|getOperator
parameter_list|(
name|String
name|operatorString
parameter_list|)
block|{
for|for
control|(
name|Operator
name|o
range|:
name|Operator
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|operatorString
operator|.
name|equals
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|o
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|final
name|boolean
name|ignoreCase
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|not
decl_stmt|;
specifier|private
specifier|final
name|Field
name|field
decl_stmt|;
specifier|private
specifier|final
name|Operator
name|operator
decl_stmt|;
specifier|private
specifier|final
name|FieldValue
name|value
decl_stmt|;
specifier|private
name|RecordFilter
parameter_list|(
name|boolean
name|ignoreCase
parameter_list|,
name|boolean
name|not
parameter_list|,
name|Field
name|field
parameter_list|,
name|Operator
name|operator
parameter_list|,
name|FieldValue
name|value
parameter_list|)
block|{
name|this
operator|.
name|ignoreCase
operator|=
name|ignoreCase
expr_stmt|;
name|this
operator|.
name|not
operator|=
name|not
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|operator
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|operator
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|execute
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
name|FieldValue
name|fieldValue
init|=
name|record
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValue
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|EQUAL
condition|)
block|{
name|boolean
name|ret
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
name|ret
operator|=
name|fieldValue
operator|.
name|asString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|value
operator|.
name|asString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|fieldValue
operator|.
name|asString
argument_list|()
operator|.
name|contains
argument_list|(
name|value
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|not
operator|!=
name|ret
return|;
block|}
name|int
name|compare
init|=
name|ignoreCase
condition|?
name|fieldValue
operator|.
name|compareToIgnoreCase
argument_list|(
name|value
argument_list|)
else|:
name|fieldValue
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|boolean
name|ret
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|DOUBLE_EQUALS
case|:
name|ret
operator|=
name|compare
operator|==
literal|0
expr_stmt|;
break|break;
case|case
name|GREATER
case|:
name|ret
operator|=
name|compare
operator|>
literal|0
expr_stmt|;
break|break;
case|case
name|GREATER_OR_EQUAL
case|:
name|ret
operator|=
name|compare
operator|>=
literal|0
expr_stmt|;
break|break;
case|case
name|LESS
case|:
name|ret
operator|=
name|compare
operator|<
literal|0
expr_stmt|;
break|break;
case|case
name|LESS_OR_EQUAL
case|:
name|ret
operator|=
name|compare
operator|<=
literal|0
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
return|return
name|not
operator|!=
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|not
condition|?
literal|"!"
else|:
literal|""
operator|)
operator|+
name|field
operator|.
name|getHeader
argument_list|()
operator|+
name|operator
operator|+
name|value
operator|.
name|asString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|RecordFilter
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RecordFilter
name|filter
init|=
operator|(
name|RecordFilter
operator|)
name|o
decl_stmt|;
return|return
name|ignoreCase
operator|==
name|filter
operator|.
name|ignoreCase
operator|&&
name|not
operator|==
name|filter
operator|.
name|not
operator|&&
name|field
operator|==
name|filter
operator|.
name|field
operator|&&
name|operator
operator|==
name|filter
operator|.
name|operator
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|ignoreCase
argument_list|,
name|not
argument_list|,
name|field
argument_list|,
name|operator
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/*    * For FilterBuilder    */
specifier|public
specifier|static
name|FilterBuilder
name|newBuilder
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
return|return
operator|new
name|FilterBuilder
argument_list|(
name|field
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FilterBuilder
name|newBuilder
parameter_list|(
name|Field
name|field
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
return|return
operator|new
name|FilterBuilder
argument_list|(
name|field
argument_list|,
name|ignoreCase
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|FilterBuilder
block|{
specifier|private
specifier|final
name|Field
name|field
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|ignoreCase
decl_stmt|;
specifier|private
name|FilterBuilder
parameter_list|(
name|Field
name|field
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ignoreCase
operator|=
name|ignoreCase
expr_stmt|;
block|}
specifier|public
name|RecordFilter
name|equal
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|false
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|equal
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|equal
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notEqual
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|true
argument_list|,
name|Operator
operator|.
name|EQUAL
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notEqual
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|notEqual
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|doubleEquals
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|false
argument_list|,
name|Operator
operator|.
name|DOUBLE_EQUALS
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|doubleEquals
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|doubleEquals
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notDoubleEquals
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|true
argument_list|,
name|Operator
operator|.
name|DOUBLE_EQUALS
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notDoubleEquals
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|notDoubleEquals
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|greater
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|false
argument_list|,
name|Operator
operator|.
name|GREATER
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|greater
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|greater
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notGreater
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|true
argument_list|,
name|Operator
operator|.
name|GREATER
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notGreater
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|notGreater
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|greaterOrEqual
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|false
argument_list|,
name|Operator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|greaterOrEqual
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|greaterOrEqual
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notGreaterOrEqual
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|true
argument_list|,
name|Operator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notGreaterOrEqual
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|notGreaterOrEqual
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|less
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|false
argument_list|,
name|Operator
operator|.
name|LESS
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|less
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|less
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notLess
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|true
argument_list|,
name|Operator
operator|.
name|LESS
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notLess
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|notLess
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|lessOrEqual
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|false
argument_list|,
name|Operator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|lessOrEqual
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|lessOrEqual
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notLessOrEqual
parameter_list|(
name|FieldValue
name|value
parameter_list|)
block|{
return|return
name|newFilter
argument_list|(
literal|true
argument_list|,
name|Operator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|RecordFilter
name|notLessOrEqual
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|notLessOrEqual
argument_list|(
name|field
operator|.
name|newValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RecordFilter
name|newFilter
parameter_list|(
name|boolean
name|not
parameter_list|,
name|Operator
name|operator
parameter_list|,
name|FieldValue
name|value
parameter_list|)
block|{
return|return
operator|new
name|RecordFilter
argument_list|(
name|ignoreCase
argument_list|,
name|not
argument_list|,
name|field
argument_list|,
name|operator
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

