begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|top
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|time
operator|.
name|DateFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|RecordFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
operator|.
name|DrillDownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The data and business logic for the top screen.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TopScreenModel
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopScreenModel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Admin
name|admin
decl_stmt|;
specifier|private
name|Mode
name|currentMode
decl_stmt|;
specifier|private
name|Field
name|currentSortField
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldInfo
argument_list|>
name|fieldInfos
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Field
argument_list|>
name|fields
decl_stmt|;
specifier|private
name|Summary
name|summary
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Record
argument_list|>
name|records
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RecordFilter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|filterHistories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|ascendingSort
decl_stmt|;
specifier|public
name|TopScreenModel
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|Mode
name|initialMode
parameter_list|)
block|{
name|this
operator|.
name|admin
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|switchMode
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|initialMode
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|switchMode
parameter_list|(
name|Mode
name|nextMode
parameter_list|,
name|List
argument_list|<
name|RecordFilter
argument_list|>
name|initialFilters
parameter_list|,
name|boolean
name|keepSortFieldAndSortOrderIfPossible
parameter_list|)
block|{
name|currentMode
operator|=
name|nextMode
expr_stmt|;
name|fieldInfos
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|currentMode
operator|.
name|getFieldInfos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|currentMode
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldInfo
operator|::
name|getField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keepSortFieldAndSortOrderIfPossible
condition|)
block|{
name|boolean
name|match
init|=
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|f
lambda|->
name|f
operator|==
name|currentSortField
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|currentSortField
operator|=
name|nextMode
operator|.
name|getDefaultSortField
argument_list|()
expr_stmt|;
name|ascendingSort
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentSortField
operator|=
name|nextMode
operator|.
name|getDefaultSortField
argument_list|()
expr_stmt|;
name|ascendingSort
operator|=
literal|false
expr_stmt|;
block|}
name|clearFilters
argument_list|()
expr_stmt|;
if|if
condition|(
name|initialFilters
operator|!=
literal|null
condition|)
block|{
name|filters
operator|.
name|addAll
argument_list|(
name|initialFilters
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setSortFieldAndFields
parameter_list|(
name|Field
name|sortField
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|currentSortField
operator|=
name|sortField
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fields
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * HBTop only calls this from a single thread, and if that ever changes, this needs    * synchronization    */
specifier|public
name|void
name|refreshMetricsData
parameter_list|()
block|{
name|ClusterMetrics
name|clusterMetrics
decl_stmt|;
try|try
block|{
name|clusterMetrics
operator|=
name|admin
operator|.
name|getClusterMetrics
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unable to get cluster metrics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|refreshSummary
argument_list|(
name|clusterMetrics
argument_list|)
expr_stmt|;
name|refreshRecords
argument_list|(
name|clusterMetrics
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|refreshSummary
parameter_list|(
name|ClusterMetrics
name|clusterMetrics
parameter_list|)
block|{
name|String
name|currentTime
init|=
name|DateFormatUtils
operator|.
name|ISO_8601_EXTENDED_TIME_FORMAT
operator|.
name|format
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|clusterMetrics
operator|.
name|getHBaseVersion
argument_list|()
decl_stmt|;
name|String
name|clusterId
init|=
name|clusterMetrics
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|int
name|liveServers
init|=
name|clusterMetrics
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|deadServers
init|=
name|clusterMetrics
operator|.
name|getDeadServerNames
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|regionCount
init|=
name|clusterMetrics
operator|.
name|getRegionCount
argument_list|()
decl_stmt|;
name|int
name|ritCount
init|=
name|clusterMetrics
operator|.
name|getRegionStatesInTransition
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|averageLoad
init|=
name|clusterMetrics
operator|.
name|getAverageLoad
argument_list|()
decl_stmt|;
name|long
name|aggregateRequestPerSecond
init|=
name|clusterMetrics
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getRequestCountPerSecond
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
name|summary
operator|=
operator|new
name|Summary
argument_list|(
name|currentTime
argument_list|,
name|version
argument_list|,
name|clusterId
argument_list|,
name|liveServers
operator|+
name|deadServers
argument_list|,
name|liveServers
argument_list|,
name|deadServers
argument_list|,
name|regionCount
argument_list|,
name|ritCount
argument_list|,
name|averageLoad
argument_list|,
name|aggregateRequestPerSecond
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|refreshRecords
parameter_list|(
name|ClusterMetrics
name|clusterMetrics
parameter_list|)
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|records
init|=
name|currentMode
operator|.
name|getRecords
argument_list|(
name|clusterMetrics
argument_list|)
decl_stmt|;
comment|// Filter and sort
name|records
operator|=
name|records
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|filters
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|f
lambda|->
name|f
operator|.
name|execute
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
parameter_list|(
name|recordLeft
parameter_list|,
name|recordRight
parameter_list|)
lambda|->
block|{
name|FieldValue
name|left
operator|=
name|recordLeft
operator|.
name|get
argument_list|(
name|currentSortField
argument_list|)
argument_list|;
name|FieldValue
name|right
operator|=
name|recordRight
operator|.
name|get
argument_list|(
name|currentSortField
argument_list|)
argument_list|;         return
operator|(
name|ascendingSort
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
argument_list|;
block|}
block|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
end_class

begin_expr_stmt
name|this
operator|.
name|records
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|records
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
name|void
name|switchSortOrder
parameter_list|()
block|{
name|ascendingSort
operator|=
operator|!
name|ascendingSort
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|addFilter
parameter_list|(
name|String
name|filterString
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|RecordFilter
name|filter
init|=
name|RecordFilter
operator|.
name|parse
argument_list|(
name|filterString
argument_list|,
name|fields
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|filters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|filterHistories
operator|.
name|add
argument_list|(
name|filterString
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|clearFilters
parameter_list|()
block|{
name|filters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|drillDown
parameter_list|(
name|Record
name|selectedRecord
parameter_list|)
block|{
name|DrillDownInfo
name|drillDownInfo
init|=
name|currentMode
operator|.
name|drillDown
argument_list|(
name|selectedRecord
argument_list|)
decl_stmt|;
if|if
condition|(
name|drillDownInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|switchMode
argument_list|(
name|drillDownInfo
operator|.
name|getNextMode
argument_list|()
argument_list|,
name|drillDownInfo
operator|.
name|getInitialFilters
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
specifier|public
name|Mode
name|getCurrentMode
parameter_list|()
block|{
return|return
name|currentMode
return|;
block|}
end_function

begin_function
specifier|public
name|Field
name|getCurrentSortField
parameter_list|()
block|{
return|return
name|currentSortField
return|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|FieldInfo
argument_list|>
name|getFieldInfos
parameter_list|()
block|{
return|return
name|fieldInfos
return|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
end_function

begin_function
specifier|public
name|Summary
name|getSummary
parameter_list|()
block|{
return|return
name|summary
return|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|Record
argument_list|>
name|getRecords
parameter_list|()
block|{
return|return
name|records
return|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|RecordFilter
argument_list|>
name|getFilters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|filters
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFilterHistories
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|filterHistories
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

