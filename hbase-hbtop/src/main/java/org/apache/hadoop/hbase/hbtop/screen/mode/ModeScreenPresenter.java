begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|mode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|ScreenView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * The presentation logic for the mode screen.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ModeScreenPresenter
block|{
specifier|private
specifier|final
name|ModeScreenView
name|modeScreenView
decl_stmt|;
specifier|private
specifier|final
name|Mode
name|currentMode
decl_stmt|;
specifier|private
specifier|final
name|Consumer
argument_list|<
name|Mode
argument_list|>
name|resultListener
decl_stmt|;
specifier|private
specifier|final
name|ScreenView
name|nextScreenView
decl_stmt|;
specifier|private
specifier|final
name|int
name|modeHeaderMaxLength
decl_stmt|;
specifier|private
specifier|final
name|int
name|modeDescriptionMaxLength
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Mode
argument_list|>
name|modes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Mode
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
name|currentPosition
decl_stmt|;
specifier|public
name|ModeScreenPresenter
parameter_list|(
name|ModeScreenView
name|modeScreenView
parameter_list|,
name|Mode
name|currentMode
parameter_list|,
name|Consumer
argument_list|<
name|Mode
argument_list|>
name|resultListener
parameter_list|,
name|ScreenView
name|nextScreenView
parameter_list|)
block|{
name|this
operator|.
name|modeScreenView
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|modeScreenView
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentMode
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|currentMode
argument_list|)
expr_stmt|;
name|this
operator|.
name|resultListener
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|resultListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextScreenView
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nextScreenView
argument_list|)
expr_stmt|;
name|int
name|modeHeaderLength
init|=
literal|0
decl_stmt|;
name|int
name|modeDescriptionLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Mode
name|mode
init|=
name|modes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|currentMode
condition|)
block|{
name|currentPosition
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|modeHeaderLength
operator|<
name|mode
operator|.
name|getHeader
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|modeHeaderLength
operator|=
name|mode
operator|.
name|getHeader
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|modeDescriptionLength
operator|<
name|mode
operator|.
name|getDescription
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|modeDescriptionLength
operator|=
name|mode
operator|.
name|getDescription
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|modeHeaderMaxLength
operator|=
name|modeHeaderLength
expr_stmt|;
name|modeDescriptionMaxLength
operator|=
name|modeDescriptionLength
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|modeScreenView
operator|.
name|hideCursor
argument_list|()
expr_stmt|;
name|modeScreenView
operator|.
name|clearTerminal
argument_list|()
expr_stmt|;
name|modeScreenView
operator|.
name|showModeScreen
argument_list|(
name|currentMode
argument_list|,
name|modes
argument_list|,
name|currentPosition
argument_list|,
name|modeHeaderMaxLength
argument_list|,
name|modeDescriptionMaxLength
argument_list|)
expr_stmt|;
name|modeScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|arrowUp
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|>
literal|0
condition|)
block|{
name|currentPosition
operator|-=
literal|1
expr_stmt|;
name|showMode
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|showMode
argument_list|(
name|currentPosition
operator|+
literal|1
argument_list|)
expr_stmt|;
name|modeScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|arrowDown
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|<
name|modes
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|currentPosition
operator|+=
literal|1
expr_stmt|;
name|showMode
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|showMode
argument_list|(
name|currentPosition
operator|-
literal|1
argument_list|)
expr_stmt|;
name|modeScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|pageUp
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|>
literal|0
condition|)
block|{
name|int
name|previousPosition
init|=
name|currentPosition
decl_stmt|;
name|currentPosition
operator|=
literal|0
expr_stmt|;
name|showMode
argument_list|(
name|previousPosition
argument_list|)
expr_stmt|;
name|showMode
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|modeScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|pageDown
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|<
name|modes
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|int
name|previousPosition
init|=
name|currentPosition
decl_stmt|;
name|currentPosition
operator|=
name|modes
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|showMode
argument_list|(
name|previousPosition
argument_list|)
expr_stmt|;
name|showMode
argument_list|(
name|currentPosition
argument_list|)
expr_stmt|;
name|modeScreenView
operator|.
name|refreshTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|showMode
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|modeScreenView
operator|.
name|showMode
argument_list|(
name|pos
argument_list|,
name|modes
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|,
name|pos
operator|==
name|currentPosition
argument_list|,
name|modeHeaderMaxLength
argument_list|,
name|modeDescriptionMaxLength
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ScreenView
name|transitionToNextScreen
parameter_list|(
name|boolean
name|changeMode
parameter_list|)
block|{
name|Mode
name|selectedMode
init|=
name|modes
operator|.
name|get
argument_list|(
name|currentPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeMode
operator|&&
name|currentMode
operator|!=
name|selectedMode
condition|)
block|{
name|resultListener
operator|.
name|accept
argument_list|(
name|selectedMode
argument_list|)
expr_stmt|;
block|}
return|return
name|nextScreenView
return|;
block|}
block|}
end_class

end_unit

