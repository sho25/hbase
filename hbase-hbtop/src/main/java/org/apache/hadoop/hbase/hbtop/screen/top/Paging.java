begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|top
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Utility class for paging for the metrics.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Paging
block|{
specifier|private
name|int
name|currentPosition
decl_stmt|;
specifier|private
name|int
name|pageStartPosition
decl_stmt|;
specifier|private
name|int
name|pageEndPosition
decl_stmt|;
specifier|private
name|int
name|pageSize
decl_stmt|;
specifier|private
name|int
name|recordsSize
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
block|{
name|currentPosition
operator|=
literal|0
expr_stmt|;
name|pageStartPosition
operator|=
literal|0
expr_stmt|;
name|pageEndPosition
operator|=
name|Math
operator|.
name|min
argument_list|(
name|pageSize
argument_list|,
name|recordsSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updatePageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|this
operator|.
name|pageSize
operator|=
name|pageSize
expr_stmt|;
if|if
condition|(
name|pageSize
operator|==
literal|0
condition|)
block|{
name|pageStartPosition
operator|=
literal|0
expr_stmt|;
name|pageEndPosition
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|pageEndPosition
operator|=
name|pageStartPosition
operator|+
name|pageSize
expr_stmt|;
name|keepConsistent
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateRecordsSize
parameter_list|(
name|int
name|recordsSize
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|recordsSize
operator|==
literal|0
condition|)
block|{
name|currentPosition
operator|=
literal|0
expr_stmt|;
name|pageStartPosition
operator|=
literal|0
expr_stmt|;
name|pageEndPosition
operator|=
name|Math
operator|.
name|min
argument_list|(
name|pageSize
argument_list|,
name|recordsSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|recordsSize
operator|=
name|recordsSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recordsSize
operator|==
literal|0
condition|)
block|{
name|currentPosition
operator|=
literal|0
expr_stmt|;
name|pageStartPosition
operator|=
literal|0
expr_stmt|;
name|pageEndPosition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|recordsSize
operator|=
name|recordsSize
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|recordsSize
operator|=
name|recordsSize
expr_stmt|;
if|if
condition|(
name|pageSize
operator|>
literal|0
condition|)
block|{
name|pageEndPosition
operator|=
name|pageStartPosition
operator|+
name|pageSize
expr_stmt|;
name|keepConsistent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|arrowUp
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|>
literal|0
condition|)
block|{
name|currentPosition
operator|-=
literal|1
expr_stmt|;
if|if
condition|(
name|pageSize
operator|>
literal|0
condition|)
block|{
name|keepConsistent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|arrowDown
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|<
name|recordsSize
operator|-
literal|1
condition|)
block|{
name|currentPosition
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|pageSize
operator|>
literal|0
condition|)
block|{
name|keepConsistent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|pageUp
parameter_list|()
block|{
if|if
condition|(
name|pageSize
operator|>
literal|0
operator|&&
name|currentPosition
operator|>
literal|0
condition|)
block|{
name|currentPosition
operator|-=
name|pageSize
expr_stmt|;
if|if
condition|(
name|currentPosition
operator|<
literal|0
condition|)
block|{
name|currentPosition
operator|=
literal|0
expr_stmt|;
block|}
name|keepConsistent
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|pageDown
parameter_list|()
block|{
if|if
condition|(
name|pageSize
operator|>
literal|0
operator|&&
name|currentPosition
operator|<
name|recordsSize
operator|-
literal|1
condition|)
block|{
name|currentPosition
operator|=
name|currentPosition
operator|+
name|pageSize
expr_stmt|;
if|if
condition|(
name|currentPosition
operator|>=
name|recordsSize
condition|)
block|{
name|currentPosition
operator|=
name|recordsSize
operator|-
literal|1
expr_stmt|;
block|}
name|pageStartPosition
operator|=
name|currentPosition
expr_stmt|;
name|pageEndPosition
operator|=
name|pageStartPosition
operator|+
name|pageSize
expr_stmt|;
name|keepConsistent
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|keepConsistent
parameter_list|()
block|{
if|if
condition|(
name|currentPosition
operator|<
name|pageStartPosition
condition|)
block|{
name|pageStartPosition
operator|=
name|currentPosition
expr_stmt|;
name|pageEndPosition
operator|=
name|pageStartPosition
operator|+
name|pageSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentPosition
operator|>
name|recordsSize
operator|-
literal|1
condition|)
block|{
name|currentPosition
operator|=
name|recordsSize
operator|-
literal|1
expr_stmt|;
name|pageEndPosition
operator|=
name|recordsSize
expr_stmt|;
name|pageStartPosition
operator|=
name|pageEndPosition
operator|-
name|pageSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentPosition
operator|>
name|pageEndPosition
operator|-
literal|1
condition|)
block|{
name|pageEndPosition
operator|=
name|currentPosition
operator|+
literal|1
expr_stmt|;
name|pageStartPosition
operator|=
name|pageEndPosition
operator|-
name|pageSize
expr_stmt|;
block|}
if|if
condition|(
name|pageStartPosition
operator|<
literal|0
condition|)
block|{
name|pageStartPosition
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|pageEndPosition
operator|>
name|recordsSize
condition|)
block|{
name|pageEndPosition
operator|=
name|recordsSize
expr_stmt|;
name|pageStartPosition
operator|=
name|pageEndPosition
operator|-
name|pageSize
expr_stmt|;
if|if
condition|(
name|pageStartPosition
operator|<
literal|0
condition|)
block|{
name|pageStartPosition
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getCurrentPosition
parameter_list|()
block|{
return|return
name|currentPosition
return|;
block|}
specifier|public
name|int
name|getPageStartPosition
parameter_list|()
block|{
return|return
name|pageStartPosition
return|;
block|}
specifier|public
name|int
name|getPageEndPosition
parameter_list|()
block|{
return|return
name|pageEndPosition
return|;
block|}
block|}
end_class

end_unit

