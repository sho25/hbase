begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|top
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|Record
operator|.
name|entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|terminal
operator|.
name|TerminalSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TopScreenPresenterTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TopScreenPresenterTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|FieldInfo
argument_list|>
name|TEST_FIELD_INFOS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|REGION
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|FieldInfo
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Record
argument_list|>
name|TEST_RECORDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Record
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
name|Field
operator|.
name|REGION
argument_list|,
literal|"region1"
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
literal|1L
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|,
literal|0.3f
argument_list|)
argument_list|)
argument_list|,
name|Record
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
name|Field
operator|.
name|REGION
argument_list|,
literal|"region2"
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
literal|2L
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|,
literal|0.2f
argument_list|)
argument_list|)
argument_list|,
name|Record
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
name|Field
operator|.
name|REGION
argument_list|,
literal|"region3"
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
literal|3L
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|,
literal|0.1f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Summary
name|TEST_SUMMARY
init|=
operator|new
name|Summary
argument_list|(
literal|"00:00:01"
argument_list|,
literal|"3.0.0-SNAPSHOT"
argument_list|,
literal|"01234567-89ab-cdef-0123-456789abcdef"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|3.0
argument_list|,
literal|300
argument_list|)
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|TopScreenView
name|topScreenView
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|TopScreenModel
name|topScreenModel
decl_stmt|;
specifier|private
name|TopScreenPresenter
name|topScreenPresenter
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|when
argument_list|(
name|topScreenView
operator|.
name|getTerminalSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|TerminalSize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|topScreenView
operator|.
name|getPageSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|topScreenModel
operator|.
name|getFieldInfos
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_FIELD_INFOS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|topScreenModel
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_FIELD_INFOS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldInfo
operator|::
name|getField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|topScreenModel
operator|.
name|getRecords
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_RECORDS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|topScreenModel
operator|.
name|getSummary
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_SUMMARY
argument_list|)
expr_stmt|;
name|topScreenPresenter
operator|=
operator|new
name|TopScreenPresenter
argument_list|(
name|topScreenView
argument_list|,
literal|3000
argument_list|,
name|topScreenModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRefresh
parameter_list|()
block|{
name|topScreenPresenter
operator|.
name|init
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|topScreenView
argument_list|)
operator|.
name|showTopScreen
argument_list|(
name|argThat
argument_list|(
name|this
operator|::
name|assertSummary
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|this
operator|::
name|assertHeaders
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|this
operator|::
name|assertRecords
argument_list|)
argument_list|,
name|argThat
argument_list|(
name|selectedRecord
lambda|->
name|assertSelectedRecord
argument_list|(
name|selectedRecord
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerticalScrolling
parameter_list|()
block|{
name|topScreenPresenter
operator|.
name|init
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowDown
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowDown
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowDown
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowDown
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowDown
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowDown
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowUp
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowUp
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowUp
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|pageDown
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|pageDown
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|pageUp
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|pageUp
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|topScreenView
argument_list|)
decl_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyVerticalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyVerticalScrolling
parameter_list|(
name|InOrder
name|inOrder
parameter_list|,
name|int
name|expectedSelectedRecodeIndex
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|topScreenView
argument_list|)
operator|.
name|showTopScreen
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|argThat
argument_list|(
name|selectedRecord
lambda|->
name|assertSelectedRecord
argument_list|(
name|selectedRecord
argument_list|,
name|expectedSelectedRecodeIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHorizontalScrolling
parameter_list|()
block|{
name|topScreenPresenter
operator|.
name|init
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowRight
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowRight
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowRight
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowLeft
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowLeft
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|arrowLeft
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|end
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|end
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|home
argument_list|()
expr_stmt|;
name|topScreenPresenter
operator|.
name|home
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|topScreenView
argument_list|)
decl_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyHorizontalScrolling
argument_list|(
name|inOrder
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyHorizontalScrolling
parameter_list|(
name|InOrder
name|inOrder
parameter_list|,
name|int
name|expectedHeaderCount
parameter_list|)
block|{
name|inOrder
operator|.
name|verify
argument_list|(
name|topScreenView
argument_list|)
operator|.
name|showTopScreen
argument_list|(
name|any
argument_list|()
argument_list|,
name|argThat
argument_list|(
name|headers
lambda|->
name|headers
operator|.
name|size
argument_list|()
operator|==
name|expectedHeaderCount
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|assertSummary
parameter_list|(
name|Summary
name|actual
parameter_list|)
block|{
return|return
name|actual
operator|.
name|getCurrentTime
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_SUMMARY
operator|.
name|getCurrentTime
argument_list|()
argument_list|)
operator|&&
name|actual
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_SUMMARY
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|&&
name|actual
operator|.
name|getClusterId
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_SUMMARY
operator|.
name|getClusterId
argument_list|()
argument_list|)
operator|&&
name|actual
operator|.
name|getServers
argument_list|()
operator|==
name|TEST_SUMMARY
operator|.
name|getServers
argument_list|()
operator|&&
name|actual
operator|.
name|getLiveServers
argument_list|()
operator|==
name|TEST_SUMMARY
operator|.
name|getLiveServers
argument_list|()
operator|&&
name|actual
operator|.
name|getDeadServers
argument_list|()
operator|==
name|TEST_SUMMARY
operator|.
name|getDeadServers
argument_list|()
operator|&&
name|actual
operator|.
name|getRegionCount
argument_list|()
operator|==
name|TEST_SUMMARY
operator|.
name|getRegionCount
argument_list|()
operator|&&
name|actual
operator|.
name|getRitCount
argument_list|()
operator|==
name|TEST_SUMMARY
operator|.
name|getRitCount
argument_list|()
operator|&&
name|actual
operator|.
name|getAverageLoad
argument_list|()
operator|==
name|TEST_SUMMARY
operator|.
name|getAverageLoad
argument_list|()
operator|&&
name|actual
operator|.
name|getAggregateRequestPerSecond
argument_list|()
operator|==
name|TEST_SUMMARY
operator|.
name|getAggregateRequestPerSecond
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|assertHeaders
parameter_list|(
name|List
argument_list|<
name|Header
argument_list|>
name|actual
parameter_list|)
block|{
name|List
argument_list|<
name|Header
argument_list|>
name|expected
init|=
name|TEST_FIELD_INFOS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|fi
lambda|->
operator|new
name|Header
argument_list|(
name|fi
operator|.
name|getField
argument_list|()
argument_list|,
name|fi
operator|.
name|getDefaultLength
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|.
name|size
argument_list|()
operator|!=
name|expected
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actual
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getField
argument_list|()
operator|!=
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getField
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLength
argument_list|()
operator|!=
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLength
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|assertRecords
parameter_list|(
name|List
argument_list|<
name|Record
argument_list|>
name|actual
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|.
name|size
argument_list|()
operator|!=
name|TEST_RECORDS
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actual
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|assertRecord
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|TEST_RECORDS
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|assertSelectedRecord
parameter_list|(
name|Record
name|actual
parameter_list|,
name|int
name|expectedSelectedRecodeIndex
parameter_list|)
block|{
return|return
name|assertRecord
argument_list|(
name|actual
argument_list|,
name|TEST_RECORDS
operator|.
name|get
argument_list|(
name|expectedSelectedRecodeIndex
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|assertRecord
parameter_list|(
name|Record
name|actual
parameter_list|,
name|Record
name|expected
parameter_list|)
block|{
return|return
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REGION
argument_list|)
operator|.
name|equals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REGION
argument_list|)
argument_list|)
operator|&&
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|equals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
argument_list|)
operator|&&
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|)
operator|.
name|equals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

