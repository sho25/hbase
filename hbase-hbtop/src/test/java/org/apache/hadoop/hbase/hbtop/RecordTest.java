begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|Record
operator|.
name|entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RecordTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|RecordTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBuilder
parameter_list|()
block|{
name|Record
name|actual1
init|=
name|Record
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|,
literal|"tableName"
argument_list|)
operator|.
name|put
argument_list|(
name|entry
argument_list|(
name|Field
operator|.
name|REGION_COUNT
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
operator|.
name|newValue
argument_list|(
literal|100L
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual1
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual1
operator|.
name|get
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"tableName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual1
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REGION_COUNT
argument_list|)
operator|.
name|asInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual1
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
name|Record
name|actual2
init|=
name|Record
operator|.
name|builder
argument_list|()
operator|.
name|putAll
argument_list|(
name|actual1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actual2
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual2
operator|.
name|get
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"tableName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual2
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REGION_COUNT
argument_list|)
operator|.
name|asInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual2
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfEntries
parameter_list|()
block|{
name|Record
name|actual
init|=
name|Record
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|,
literal|"tableName"
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REGION_COUNT
argument_list|,
literal|3
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
literal|100L
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"tableName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REGION_COUNT
argument_list|)
operator|.
name|asInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCombine
parameter_list|()
block|{
name|Record
name|record1
init|=
name|Record
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|,
literal|"tableName"
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REGION_COUNT
argument_list|,
literal|3
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
literal|100L
argument_list|)
argument_list|)
decl_stmt|;
name|Record
name|record2
init|=
name|Record
operator|.
name|ofEntries
argument_list|(
name|entry
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|,
literal|"tableName"
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REGION_COUNT
argument_list|,
literal|5
argument_list|)
argument_list|,
name|entry
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
literal|500L
argument_list|)
argument_list|)
decl_stmt|;
name|Record
name|actual
init|=
name|record1
operator|.
name|combine
argument_list|(
name|record2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"tableName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REGION_COUNT
argument_list|)
operator|.
name|asInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|600L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

