begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|field
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|top
operator|.
name|TopScreenView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|FieldScreenPresenterTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|FieldScreenPresenterTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|FieldScreenView
name|fieldScreenView
decl_stmt|;
specifier|private
name|int
name|sortFieldPosition
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Field
argument_list|>
name|fields
decl_stmt|;
specifier|private
name|EnumMap
argument_list|<
name|Field
argument_list|,
name|Boolean
argument_list|>
name|fieldDisplayMap
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|FieldScreenPresenter
operator|.
name|ResultListener
name|resultListener
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|TopScreenView
name|topScreenView
decl_stmt|;
specifier|private
name|FieldScreenPresenter
name|fieldScreenPresenter
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|Field
name|sortField
init|=
name|Mode
operator|.
name|REGION
operator|.
name|getDefaultSortField
argument_list|()
decl_stmt|;
name|fields
operator|=
name|Mode
operator|.
name|REGION
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldInfo
operator|::
name|getField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|fieldDisplayMap
operator|=
name|Mode
operator|.
name|REGION
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
parameter_list|()
lambda|->
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|fi
parameter_list|)
lambda|->
name|r
operator|.
name|put
argument_list|(
name|fi
operator|.
name|getField
argument_list|()
argument_list|,
name|fi
operator|.
name|isDisplayByDefault
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|r1
parameter_list|,
name|r2
parameter_list|)
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|fieldScreenPresenter
operator|=
operator|new
name|FieldScreenPresenter
argument_list|(
name|fieldScreenView
argument_list|,
name|sortField
argument_list|,
name|fields
argument_list|,
name|fieldDisplayMap
argument_list|,
name|resultListener
argument_list|,
name|topScreenView
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
name|sortField
condition|)
block|{
name|sortFieldPosition
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInit
parameter_list|()
block|{
name|fieldScreenPresenter
operator|.
name|init
argument_list|()
expr_stmt|;
name|int
name|modeHeaderMaxLength
init|=
literal|"#COMPingCell"
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|modeDescriptionMaxLength
init|=
literal|"Filtered Read Request Count per second"
operator|.
name|length
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|fieldScreenView
argument_list|)
operator|.
name|showFieldScreen
argument_list|(
name|eq
argument_list|(
literal|"#REQ/S"
argument_list|)
argument_list|,
name|eq
argument_list|(
name|fields
argument_list|)
argument_list|,
name|eq
argument_list|(
name|fieldDisplayMap
argument_list|)
argument_list|,
name|eq
argument_list|(
name|sortFieldPosition
argument_list|)
argument_list|,
name|eq
argument_list|(
name|modeHeaderMaxLength
argument_list|)
argument_list|,
name|eq
argument_list|(
name|modeDescriptionMaxLength
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeSortField
parameter_list|()
block|{
name|fieldScreenPresenter
operator|.
name|arrowUp
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|setSortField
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|arrowDown
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|arrowDown
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|setSortField
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|pageUp
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|setSortField
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|pageDown
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|setSortField
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|fieldScreenView
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fieldScreenView
argument_list|)
operator|.
name|showScreenDescription
argument_list|(
name|eq
argument_list|(
literal|"LRS"
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fieldScreenView
argument_list|)
operator|.
name|showScreenDescription
argument_list|(
name|eq
argument_list|(
literal|"#READ/S"
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fieldScreenView
argument_list|)
operator|.
name|showScreenDescription
argument_list|(
name|eq
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fieldScreenView
argument_list|)
operator|.
name|showScreenDescription
argument_list|(
name|eq
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|fields
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSwitchFieldDisplay
parameter_list|()
block|{
name|fieldScreenPresenter
operator|.
name|switchFieldDisplay
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|switchFieldDisplay
argument_list|()
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|fieldScreenView
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fieldScreenView
argument_list|)
operator|.
name|showField
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|fieldScreenView
argument_list|)
operator|.
name|showField
argument_list|(
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeFieldsOrder
parameter_list|()
block|{
name|fieldScreenPresenter
operator|.
name|turnOnMoveMode
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|arrowUp
argument_list|()
expr_stmt|;
name|fieldScreenPresenter
operator|.
name|turnOffMoveMode
argument_list|()
expr_stmt|;
name|Field
name|removed
init|=
name|fields
operator|.
name|remove
argument_list|(
name|sortFieldPosition
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|sortFieldPosition
operator|-
literal|1
argument_list|,
name|removed
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldScreenPresenter
operator|.
name|transitionToNextScreen
argument_list|()
argument_list|,
name|is
argument_list|(
name|topScreenView
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|resultListener
argument_list|)
operator|.
name|accept
argument_list|(
name|any
argument_list|()
argument_list|,
name|eq
argument_list|(
name|fields
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

