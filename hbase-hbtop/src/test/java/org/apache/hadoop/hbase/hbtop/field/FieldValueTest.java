begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|FieldValueTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|FieldValueTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testParseAndAsSomethingMethod
parameter_list|()
block|{
comment|// String
name|FieldValue
name|stringFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|"aaa"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stringFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|1
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// Integer
name|FieldValue
name|integerFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|100
argument_list|,
name|FieldValueType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|integerFieldValue
operator|.
name|asInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|integerFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
literal|"100"
argument_list|,
name|FieldValueType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integerFieldValue
operator|.
name|asInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|"aaa"
argument_list|,
name|FieldValueType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// Long
name|FieldValue
name|longFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|100L
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|longFieldValue
operator|.
name|asLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
name|longFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
literal|"100"
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|longFieldValue
operator|.
name|asLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|"aaa"
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|100
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// Float
name|FieldValue
name|floatFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|1.0f
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|floatFieldValue
operator|.
name|asFloat
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|floatFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
literal|"1"
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|floatFieldValue
operator|.
name|asFloat
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|"aaa"
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|1
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// Size
name|FieldValue
name|sizeFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|100
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"100.0MB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asSize
argument_list|()
argument_list|,
name|is
argument_list|(
operator|new
name|Size
argument_list|(
literal|100
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
literal|"100MB"
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"100.0MB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asSize
argument_list|()
argument_list|,
name|is
argument_list|(
operator|new
name|Size
argument_list|(
literal|100
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|"100"
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|100
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
comment|// Percent
name|FieldValue
name|percentFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|100f
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"100.00%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentFieldValue
operator|.
name|asFloat
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100f
argument_list|)
argument_list|)
expr_stmt|;
name|percentFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
literal|"100%"
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"100.00%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentFieldValue
operator|.
name|asFloat
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100f
argument_list|)
argument_list|)
expr_stmt|;
name|percentFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
literal|"100"
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"100.00%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentFieldValue
operator|.
name|asFloat
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100f
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FieldValue
argument_list|(
literal|100
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareTo
parameter_list|()
block|{
comment|// String
name|FieldValue
name|stringAFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|"a"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|FieldValue
name|stringAFieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|"a"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|FieldValue
name|stringBFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|"b"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|FieldValue
name|stringCapitalAFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|"A"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stringAFieldValue
operator|.
name|compareTo
argument_list|(
name|stringAFieldValue2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stringBFieldValue
operator|.
name|compareTo
argument_list|(
name|stringAFieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stringAFieldValue
operator|.
name|compareTo
argument_list|(
name|stringBFieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stringAFieldValue
operator|.
name|compareTo
argument_list|(
name|stringCapitalAFieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
comment|// Integer
name|FieldValue
name|integer1FieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|1
argument_list|,
name|FieldValueType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|FieldValue
name|integer1FieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|1
argument_list|,
name|FieldValueType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|FieldValue
name|integer2FieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|2
argument_list|,
name|FieldValueType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|integer1FieldValue
operator|.
name|compareTo
argument_list|(
name|integer1FieldValue2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integer2FieldValue
operator|.
name|compareTo
argument_list|(
name|integer1FieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|integer1FieldValue
operator|.
name|compareTo
argument_list|(
name|integer2FieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Long
name|FieldValue
name|long1FieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|1L
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|FieldValue
name|long1FieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|1L
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|FieldValue
name|long2FieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|2L
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|long1FieldValue
operator|.
name|compareTo
argument_list|(
name|long1FieldValue2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|long2FieldValue
operator|.
name|compareTo
argument_list|(
name|long1FieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|long1FieldValue
operator|.
name|compareTo
argument_list|(
name|long2FieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Float
name|FieldValue
name|float1FieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|1.0f
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|FieldValue
name|float1FieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|1.0f
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|FieldValue
name|float2FieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|2.0f
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|float1FieldValue
operator|.
name|compareTo
argument_list|(
name|float1FieldValue2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|float2FieldValue
operator|.
name|compareTo
argument_list|(
name|float1FieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|float1FieldValue
operator|.
name|compareTo
argument_list|(
name|float2FieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Size
name|FieldValue
name|size100MBFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|100
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|FieldValue
name|size100MBFieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|100
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|FieldValue
name|size200MBFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|200
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|size100MBFieldValue
operator|.
name|compareTo
argument_list|(
name|size100MBFieldValue2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|size200MBFieldValue
operator|.
name|compareTo
argument_list|(
name|size100MBFieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|size100MBFieldValue
operator|.
name|compareTo
argument_list|(
name|size200MBFieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Percent
name|FieldValue
name|percent50FieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|50.0f
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
decl_stmt|;
name|FieldValue
name|percent50FieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|50.0f
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
decl_stmt|;
name|FieldValue
name|percent100FieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|100.0f
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percent50FieldValue
operator|.
name|compareTo
argument_list|(
name|percent50FieldValue2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percent100FieldValue
operator|.
name|compareTo
argument_list|(
name|percent50FieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percent50FieldValue
operator|.
name|compareTo
argument_list|(
name|percent100FieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlus
parameter_list|()
block|{
comment|// String
name|FieldValue
name|stringFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|"a"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|FieldValue
name|stringFieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|"b"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stringFieldValue
operator|.
name|plus
argument_list|(
name|stringFieldValue2
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Integer
name|FieldValue
name|integerFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|1
argument_list|,
name|FieldValueType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|FieldValue
name|integerFieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|2
argument_list|,
name|FieldValueType
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|integerFieldValue
operator|.
name|plus
argument_list|(
name|integerFieldValue2
argument_list|)
operator|.
name|asInt
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Long
name|FieldValue
name|longFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|1L
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|FieldValue
name|longFieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|2L
argument_list|,
name|FieldValueType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|longFieldValue
operator|.
name|plus
argument_list|(
name|longFieldValue2
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Float
name|FieldValue
name|floatFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|1.2f
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|FieldValue
name|floatFieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|2.2f
argument_list|,
name|FieldValueType
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|floatFieldValue
operator|.
name|plus
argument_list|(
name|floatFieldValue2
argument_list|)
operator|.
name|asFloat
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3.4f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Size
name|FieldValue
name|sizeFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|100
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|FieldValue
name|sizeFieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|200
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|plus
argument_list|(
name|sizeFieldValue2
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"300.0MB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|plus
argument_list|(
name|sizeFieldValue2
argument_list|)
operator|.
name|asSize
argument_list|()
argument_list|,
name|is
argument_list|(
operator|new
name|Size
argument_list|(
literal|300
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Percent
name|FieldValue
name|percentFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|30f
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
decl_stmt|;
name|FieldValue
name|percentFieldValue2
init|=
operator|new
name|FieldValue
argument_list|(
literal|60f
argument_list|,
name|FieldValueType
operator|.
name|PERCENT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|percentFieldValue
operator|.
name|plus
argument_list|(
name|percentFieldValue2
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"90.00%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percentFieldValue
operator|.
name|plus
argument_list|(
name|percentFieldValue2
argument_list|)
operator|.
name|asFloat
argument_list|()
argument_list|,
name|is
argument_list|(
literal|90f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToIgnoreCase
parameter_list|()
block|{
name|FieldValue
name|stringAFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|"a"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|FieldValue
name|stringCapitalAFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|"A"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|FieldValue
name|stringCapitalBFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
literal|"B"
argument_list|,
name|FieldValueType
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stringAFieldValue
operator|.
name|compareToIgnoreCase
argument_list|(
name|stringCapitalAFieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stringCapitalBFieldValue
operator|.
name|compareToIgnoreCase
argument_list|(
name|stringAFieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stringAFieldValue
operator|.
name|compareToIgnoreCase
argument_list|(
name|stringCapitalBFieldValue
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeSize
parameter_list|()
block|{
name|FieldValue
name|sizeFieldValue
init|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|1
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|BYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1.0B"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|BYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1.0KB"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|BYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2.0KB"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|KILOBYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2.0MB"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|KILOBYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1.0GB"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2.0TB"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|TERABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"2.0PB"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|TERABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1024.0PB"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|1
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|PETABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1.0PB"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeFieldValue
operator|=
operator|new
name|FieldValue
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|PETABYTE
argument_list|)
argument_list|,
name|FieldValueType
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|sizeFieldValue
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1024.0PB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

