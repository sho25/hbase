begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItems
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRecordFilter
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRecordFilter
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testParseAndBuilder
parameter_list|()
block|{
name|testParseAndBuilder
argument_list|(
literal|"REGION=region1"
argument_list|,
literal|false
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REGION
argument_list|)
operator|.
name|equal
argument_list|(
literal|"region1"
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"REGION="
argument_list|,
literal|false
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REGION
argument_list|)
operator|.
name|equal
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"!REGION=region1"
argument_list|,
literal|false
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REGION
argument_list|)
operator|.
name|notEqual
argument_list|(
literal|"region1"
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"REGION==region2"
argument_list|,
literal|true
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REGION
argument_list|,
literal|true
argument_list|)
operator|.
name|doubleEquals
argument_list|(
literal|"region2"
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"!REGION==region2"
argument_list|,
literal|true
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REGION
argument_list|,
literal|true
argument_list|)
operator|.
name|notDoubleEquals
argument_list|(
literal|"region2"
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"#REQ/S>100"
argument_list|,
literal|false
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|greater
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"!#REQ/S>100"
argument_list|,
literal|false
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|notGreater
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"SF>=50MB"
argument_list|,
literal|true
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|STORE_FILE_SIZE
argument_list|,
literal|true
argument_list|)
operator|.
name|greaterOrEqual
argument_list|(
literal|"50MB"
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"!SF>=50MB"
argument_list|,
literal|true
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|STORE_FILE_SIZE
argument_list|,
literal|true
argument_list|)
operator|.
name|notGreaterOrEqual
argument_list|(
literal|"50MB"
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"#REQ/S<20"
argument_list|,
literal|false
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|less
argument_list|(
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"!#REQ/S<20"
argument_list|,
literal|false
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|)
operator|.
name|notLess
argument_list|(
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"%COMP<=50%"
argument_list|,
literal|true
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|COMPACTION_PROGRESS
argument_list|,
literal|true
argument_list|)
operator|.
name|lessOrEqual
argument_list|(
literal|"50%"
argument_list|)
argument_list|)
expr_stmt|;
name|testParseAndBuilder
argument_list|(
literal|"!%COMP<=50%"
argument_list|,
literal|true
argument_list|,
name|RecordFilter
operator|.
name|newBuilder
argument_list|(
name|Field
operator|.
name|COMPACTION_PROGRESS
argument_list|,
literal|true
argument_list|)
operator|.
name|notLessOrEqual
argument_list|(
literal|"50%"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testParseAndBuilder
parameter_list|(
name|String
name|filterString
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|,
name|RecordFilter
name|expected
parameter_list|)
block|{
name|RecordFilter
name|actual
init|=
name|RecordFilter
operator|.
name|parse
argument_list|(
name|filterString
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expected
argument_list|,
name|is
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseFailure
parameter_list|()
block|{
name|RecordFilter
name|filter
init|=
name|RecordFilter
operator|.
name|parse
argument_list|(
literal|"REGIO=region1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|RecordFilter
operator|.
name|parse
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|RecordFilter
operator|.
name|parse
argument_list|(
literal|"#REQ/S==aaa"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|RecordFilter
operator|.
name|parse
argument_list|(
literal|"SF>=50"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|testToString
argument_list|(
literal|"REGION=region1"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"!REGION=region1"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"REGION==region2"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"!REGION==region2"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"#REQ/S>100"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"!#REQ/S>100"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"SF>=50.0MB"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"!SF>=50.0MB"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"#REQ/S<20"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"!#REQ/S<20"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"%COMP<=50.00%"
argument_list|)
expr_stmt|;
name|testToString
argument_list|(
literal|"!%COMP<=50.00%"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testToString
parameter_list|(
name|String
name|filterString
parameter_list|)
block|{
name|RecordFilter
name|filter
init|=
name|RecordFilter
operator|.
name|parse
argument_list|(
name|filterString
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|is
argument_list|(
name|notNullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filterString
argument_list|,
name|is
argument_list|(
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilters
parameter_list|()
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|records
init|=
name|createTestRecords
argument_list|()
decl_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"REGION=region"
argument_list|,
literal|false
argument_list|,
literal|"region1"
argument_list|,
literal|"region2"
argument_list|,
literal|"region3"
argument_list|,
literal|"region4"
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"!REGION=region"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"REGION=Region"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"REGION==region"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"REGION==region1"
argument_list|,
literal|false
argument_list|,
literal|"region1"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"!REGION==region1"
argument_list|,
literal|false
argument_list|,
literal|"region2"
argument_list|,
literal|"region3"
argument_list|,
literal|"region4"
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"#REQ/S==100"
argument_list|,
literal|false
argument_list|,
literal|"region1"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"#REQ/S>100"
argument_list|,
literal|false
argument_list|,
literal|"region2"
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"SF>=100MB"
argument_list|,
literal|false
argument_list|,
literal|"region1"
argument_list|,
literal|"region2"
argument_list|,
literal|"region4"
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"!#SF>=10"
argument_list|,
literal|false
argument_list|,
literal|"region1"
argument_list|,
literal|"region4"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"LOCALITY<0.5"
argument_list|,
literal|false
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"%COMP<=50%"
argument_list|,
literal|false
argument_list|,
literal|"region2"
argument_list|,
literal|"region3"
argument_list|,
literal|"region4"
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
name|testFilters
argument_list|(
name|records
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"SF>=100MB"
argument_list|,
literal|"#REQ/S>100"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"region2"
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
name|testFilters
argument_list|(
name|records
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"%COMP<=50%"
argument_list|,
literal|"!#SF>=10"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"region4"
argument_list|)
expr_stmt|;
name|testFilters
argument_list|(
name|records
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"!REGION==region1"
argument_list|,
literal|"LOCALITY<0.5"
argument_list|,
literal|"#REQ/S>100"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiltersIgnoreCase
parameter_list|()
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|records
init|=
name|createTestRecords
argument_list|()
decl_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"REGION=Region"
argument_list|,
literal|true
argument_list|,
literal|"region1"
argument_list|,
literal|"region2"
argument_list|,
literal|"region3"
argument_list|,
literal|"region4"
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
name|testFilter
argument_list|(
name|records
argument_list|,
literal|"REGION=REGION"
argument_list|,
literal|true
argument_list|,
literal|"region1"
argument_list|,
literal|"region2"
argument_list|,
literal|"region3"
argument_list|,
literal|"region4"
argument_list|,
literal|"region5"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Record
argument_list|>
name|createTestRecords
parameter_list|()
block|{
name|List
argument_list|<
name|Record
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|createTestRecord
argument_list|(
literal|"region1"
argument_list|,
literal|100L
argument_list|,
operator|new
name|Size
argument_list|(
literal|100
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1.0f
argument_list|,
literal|80f
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|createTestRecord
argument_list|(
literal|"region2"
argument_list|,
literal|120L
argument_list|,
operator|new
name|Size
argument_list|(
literal|100
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|GIGABYTE
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|0.5f
argument_list|,
literal|20f
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|createTestRecord
argument_list|(
literal|"region3"
argument_list|,
literal|50L
argument_list|,
operator|new
name|Size
argument_list|(
literal|500
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|KILOBYTE
argument_list|)
argument_list|,
literal|15
argument_list|,
literal|0.8f
argument_list|,
literal|50f
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|createTestRecord
argument_list|(
literal|"region4"
argument_list|,
literal|90L
argument_list|,
operator|new
name|Size
argument_list|(
literal|10
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|TERABYTE
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|0.9f
argument_list|,
literal|30f
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|createTestRecord
argument_list|(
literal|"region5"
argument_list|,
literal|200L
argument_list|,
operator|new
name|Size
argument_list|(
literal|1
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|PETABYTE
argument_list|)
argument_list|,
literal|13
argument_list|,
literal|0.1f
argument_list|,
literal|40f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|Record
name|createTestRecord
parameter_list|(
name|String
name|region
parameter_list|,
name|long
name|requestCountPerSecond
parameter_list|,
name|Size
name|storeFileSize
parameter_list|,
name|int
name|numStoreFiles
parameter_list|,
name|float
name|locality
parameter_list|,
name|float
name|compactionProgress
parameter_list|)
block|{
name|Record
operator|.
name|Builder
name|builder
init|=
name|Record
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|REGION
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|REQUEST_COUNT_PER_SECOND
argument_list|,
name|requestCountPerSecond
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|STORE_FILE_SIZE
argument_list|,
name|storeFileSize
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|NUM_STORE_FILES
argument_list|,
name|numStoreFiles
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|,
name|locality
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|Field
operator|.
name|COMPACTION_PROGRESS
argument_list|,
name|compactionProgress
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|testFilter
parameter_list|(
name|List
argument_list|<
name|Record
argument_list|>
name|records
parameter_list|,
name|String
name|filterString
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|,
name|String
modifier|...
name|expectedRegions
parameter_list|)
block|{
name|testFilters
argument_list|(
name|records
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|filterString
argument_list|)
argument_list|,
name|ignoreCase
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFilters
parameter_list|(
name|List
argument_list|<
name|Record
argument_list|>
name|records
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|filterStrings
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|,
name|String
modifier|...
name|expectedRegions
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|records
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|filterStrings
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|f
lambda|->
name|RecordFilter
operator|.
name|parse
argument_list|(
name|f
argument_list|,
name|ignoreCase
argument_list|)
argument_list|)
operator|.
name|allMatch
argument_list|(
name|f
lambda|->
name|f
operator|.
name|execute
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|r
lambda|->
name|r
operator|.
name|get
argument_list|(
name|Field
operator|.
name|REGION
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|actual
argument_list|,
name|hasItems
argument_list|(
name|expectedRegions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actual
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|expectedRegions
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

