begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRequestCountPerSecond
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRequestCountPerSecond
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|RequestCountPerSecond
name|requestCountPerSecond
init|=
operator|new
name|RequestCountPerSecond
argument_list|()
decl_stmt|;
name|requestCountPerSecond
operator|.
name|refresh
argument_list|(
literal|1000
argument_list|,
literal|300
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getReadRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getWriteRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getFilteredReadRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|requestCountPerSecond
operator|.
name|refresh
argument_list|(
literal|2000
argument_list|,
literal|1300
argument_list|,
literal|1100
argument_list|,
literal|1200
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getReadRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getFilteredReadRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1000L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getWriteRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1000L
argument_list|)
argument_list|)
expr_stmt|;
name|requestCountPerSecond
operator|.
name|refresh
argument_list|(
literal|12000
argument_list|,
literal|5300
argument_list|,
literal|3100
argument_list|,
literal|2200
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|500L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getReadRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|400L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getFilteredReadRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|200L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|requestCountPerSecond
operator|.
name|getWriteRequestCountPerSecond
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

