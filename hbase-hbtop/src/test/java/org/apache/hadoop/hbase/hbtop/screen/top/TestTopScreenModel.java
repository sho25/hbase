begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|screen
operator|.
name|top
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|RecordFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|field
operator|.
name|FieldValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|hbtop
operator|.
name|mode
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTopScreenModel
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestTopScreenModel
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Admin
name|admin
decl_stmt|;
specifier|private
name|TopScreenModel
name|topScreenModel
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Field
argument_list|>
name|fields
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|admin
operator|.
name|getClusterMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TestUtils
operator|.
name|createDummyClusterMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|topScreenModel
operator|=
operator|new
name|TopScreenModel
argument_list|(
name|admin
argument_list|,
name|Mode
operator|.
name|REGION
argument_list|)
expr_stmt|;
name|fields
operator|=
name|Mode
operator|.
name|REGION
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldInfo
operator|::
name|getField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSummary
parameter_list|()
block|{
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
name|Summary
name|summary
init|=
name|topScreenModel
operator|.
name|getSummary
argument_list|()
decl_stmt|;
name|TestUtils
operator|.
name|assertSummary
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecords
parameter_list|()
block|{
comment|// Region Mode
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
name|TestUtils
operator|.
name|assertRecordsInRegionMode
argument_list|(
name|topScreenModel
operator|.
name|getRecords
argument_list|()
argument_list|)
expr_stmt|;
comment|// Namespace Mode
name|topScreenModel
operator|.
name|switchMode
argument_list|(
name|Mode
operator|.
name|NAMESPACE
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
name|TestUtils
operator|.
name|assertRecordsInNamespaceMode
argument_list|(
name|topScreenModel
operator|.
name|getRecords
argument_list|()
argument_list|)
expr_stmt|;
comment|// Table Mode
name|topScreenModel
operator|.
name|switchMode
argument_list|(
name|Mode
operator|.
name|TABLE
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
name|TestUtils
operator|.
name|assertRecordsInTableMode
argument_list|(
name|topScreenModel
operator|.
name|getRecords
argument_list|()
argument_list|)
expr_stmt|;
comment|// Namespace Mode
name|topScreenModel
operator|.
name|switchMode
argument_list|(
name|Mode
operator|.
name|REGION_SERVER
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
name|TestUtils
operator|.
name|assertRecordsInRegionServerMode
argument_list|(
name|topScreenModel
operator|.
name|getRecords
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSort
parameter_list|()
block|{
comment|// The sort key is LOCALITY
name|topScreenModel
operator|.
name|setSortFieldAndFields
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|FieldValue
name|previous
init|=
literal|null
decl_stmt|;
comment|// Test for ascending sort
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
for|for
control|(
name|Record
name|record
range|:
name|topScreenModel
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|FieldValue
name|current
init|=
name|record
operator|.
name|get
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|current
operator|.
name|compareTo
argument_list|(
name|previous
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|current
expr_stmt|;
block|}
comment|// Test for descending sort
name|topScreenModel
operator|.
name|switchSortOrder
argument_list|()
expr_stmt|;
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
name|previous
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Record
name|record
range|:
name|topScreenModel
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|FieldValue
name|current
init|=
name|record
operator|.
name|get
argument_list|(
name|Field
operator|.
name|LOCALITY
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|current
operator|.
name|compareTo
argument_list|(
name|previous
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|current
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilters
parameter_list|()
block|{
name|topScreenModel
operator|.
name|addFilter
argument_list|(
literal|"TABLE==table1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
for|for
control|(
name|Record
name|record
range|:
name|topScreenModel
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|FieldValue
name|value
init|=
name|record
operator|.
name|get
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"table1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|topScreenModel
operator|.
name|clearFilters
argument_list|()
expr_stmt|;
name|topScreenModel
operator|.
name|addFilter
argument_list|(
literal|"TABLE==TABLE1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test for ignore case
name|topScreenModel
operator|.
name|clearFilters
argument_list|()
expr_stmt|;
name|topScreenModel
operator|.
name|addFilter
argument_list|(
literal|"TABLE==TABLE1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
for|for
control|(
name|Record
name|record
range|:
name|topScreenModel
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|FieldValue
name|value
init|=
name|record
operator|.
name|get
argument_list|(
name|Field
operator|.
name|TABLE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|value
operator|.
name|asString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"table1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterHistories
parameter_list|()
block|{
name|topScreenModel
operator|.
name|addFilter
argument_list|(
literal|"TABLE==table1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|addFilter
argument_list|(
literal|"TABLE==table2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|addFilter
argument_list|(
literal|"TABLE==table3"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getFilterHistories
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"TABLE==table1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getFilterHistories
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"TABLE==table2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getFilterHistories
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"TABLE==table3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSwitchMode
parameter_list|()
block|{
name|topScreenModel
operator|.
name|switchMode
argument_list|(
name|Mode
operator|.
name|TABLE
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getCurrentMode
argument_list|()
argument_list|,
name|is
argument_list|(
name|Mode
operator|.
name|TABLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test for initialFilters
name|List
argument_list|<
name|RecordFilter
argument_list|>
name|initialFilters
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|RecordFilter
operator|.
name|parse
argument_list|(
literal|"TABLE==table1"
argument_list|,
name|fields
argument_list|,
literal|true
argument_list|)
argument_list|,
name|RecordFilter
operator|.
name|parse
argument_list|(
literal|"TABLE==table2"
argument_list|,
name|fields
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|topScreenModel
operator|.
name|switchMode
argument_list|(
name|Mode
operator|.
name|TABLE
argument_list|,
name|initialFilters
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getFilters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|initialFilters
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topScreenModel
operator|.
name|getFilters
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getFilters
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|initialFilters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test when keepSortFieldAndSortOrderIfPossible is true
name|topScreenModel
operator|.
name|setSortFieldAndFields
argument_list|(
name|Field
operator|.
name|NAMESPACE
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|switchMode
argument_list|(
name|Mode
operator|.
name|NAMESPACE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getCurrentSortField
argument_list|()
argument_list|,
name|is
argument_list|(
name|Field
operator|.
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDrillDown
parameter_list|()
block|{
name|topScreenModel
operator|.
name|switchMode
argument_list|(
name|Mode
operator|.
name|TABLE
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|setSortFieldAndFields
argument_list|(
name|Field
operator|.
name|NAMESPACE
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|topScreenModel
operator|.
name|refreshMetricsData
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
name|topScreenModel
operator|.
name|drillDown
argument_list|(
name|topScreenModel
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|success
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getFilters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"NAMESPACE==namespace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getFilters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"TABLE==table3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topScreenModel
operator|.
name|getCurrentSortField
argument_list|()
argument_list|,
name|is
argument_list|(
name|Field
operator|.
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

