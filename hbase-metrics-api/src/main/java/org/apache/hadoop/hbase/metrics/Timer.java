begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A metric which encompasses a {@link Histogram} and {@link Meter}.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
interface|interface
name|Timer
extends|extends
name|Metric
block|{
comment|/**    * Update the timer with the given duration in given time unit.    * @param duration the duration of the event    * @param unit the time unit for the duration    */
name|void
name|update
parameter_list|(
name|long
name|duration
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
function_decl|;
comment|/**    * Update the timer with the given duration in milliseconds    * @param durationMillis the duration of the event in ms    */
specifier|default
name|void
name|updateMillis
parameter_list|(
name|long
name|durationMillis
parameter_list|)
block|{
name|update
argument_list|(
name|durationMillis
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the timer with the given duration in microseconds    * @param durationMicros the duration of the event in microseconds    */
specifier|default
name|void
name|updateMicros
parameter_list|(
name|long
name|durationMicros
parameter_list|)
block|{
name|update
argument_list|(
name|durationMicros
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the timer with the given duration in nanoseconds    * @param durationNanos the duration of the event in ns    */
specifier|default
name|void
name|updateNanos
parameter_list|(
name|long
name|durationNanos
parameter_list|)
block|{
name|update
argument_list|(
name|durationNanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
name|Histogram
name|getHistogram
parameter_list|()
function_decl|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
name|Meter
name|getMeter
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

