begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * HBase Metrics are grouped in different MetricRegistry'ies. All metrics that correspond to a  * subcomponent (like RPC, GC, WAL) are managed in a single MetricRegistry.  * This class holds the name and description and JMX related context names for such group of  * metrics.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricRegistryInfo
block|{
specifier|protected
specifier|final
name|String
name|metricsName
decl_stmt|;
specifier|protected
specifier|final
name|String
name|metricsDescription
decl_stmt|;
specifier|protected
specifier|final
name|String
name|metricsContext
decl_stmt|;
specifier|protected
specifier|final
name|String
name|metricsJmxContext
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|existingSource
decl_stmt|;
specifier|public
name|MetricRegistryInfo
parameter_list|(
name|String
name|metricsName
parameter_list|,
name|String
name|metricsDescription
parameter_list|,
name|String
name|metricsJmxContext
parameter_list|,
name|String
name|metricsContext
parameter_list|,
name|boolean
name|existingSource
parameter_list|)
block|{
name|this
operator|.
name|metricsName
operator|=
name|metricsName
expr_stmt|;
name|this
operator|.
name|metricsDescription
operator|=
name|metricsDescription
expr_stmt|;
name|this
operator|.
name|metricsContext
operator|=
name|metricsContext
expr_stmt|;
name|this
operator|.
name|metricsJmxContext
operator|=
name|metricsJmxContext
expr_stmt|;
name|this
operator|.
name|existingSource
operator|=
name|existingSource
expr_stmt|;
block|}
comment|/**    * Get the metrics context.  For hadoop metrics2 system this is usually an all lowercased string.    * eg. regionserver, master, thriftserver    *    * @return The string context used to register this source to hadoop's metrics2 system.    */
specifier|public
name|String
name|getMetricsContext
parameter_list|()
block|{
return|return
name|metricsContext
return|;
block|}
comment|/**    * Get the description of what this source exposes.    */
specifier|public
name|String
name|getMetricsDescription
parameter_list|()
block|{
return|return
name|metricsDescription
return|;
block|}
comment|/**    * Get the name of the context in JMX that this source will be exposed through.    * This is in ObjectName format. With the default context being Hadoop -&gt; HBase    */
specifier|public
name|String
name|getMetricsJmxContext
parameter_list|()
block|{
return|return
name|metricsJmxContext
return|;
block|}
comment|/**    * Get the name of the metrics that are being exported by this source.    * Eg. IPC, GC, WAL    */
specifier|public
name|String
name|getMetricsName
parameter_list|()
block|{
return|return
name|metricsName
return|;
block|}
comment|/**    * Returns whether or not this MetricRegistry is for an existing BaseSource    * @return true if this MetricRegistry is for an existing BaseSource.    */
specifier|public
name|boolean
name|isExistingSource
parameter_list|()
block|{
return|return
name|existingSource
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|MetricRegistryInfo
condition|)
block|{
return|return
name|this
operator|.
name|hashCode
argument_list|()
operator|==
name|obj
operator|.
name|hashCode
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|metricsName
argument_list|)
operator|.
name|append
argument_list|(
name|metricsDescription
argument_list|)
operator|.
name|append
argument_list|(
name|metricsContext
argument_list|)
operator|.
name|append
argument_list|(
name|metricsJmxContext
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

