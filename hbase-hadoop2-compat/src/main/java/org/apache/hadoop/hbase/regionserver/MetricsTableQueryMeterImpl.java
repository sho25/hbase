begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link MetricsTableQueryMeter} to track query per second for each table in  * a RegionServer.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsTableQueryMeterImpl
implements|implements
name|MetricsTableQueryMeter
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|TableMeters
argument_list|>
name|metersByTable
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MetricRegistry
name|metricRegistry
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TABLE_READ_QUERY_PER_SECOND
init|=
literal|"tableReadQueryPerSecond"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TABLE_WRITE_QUERY_PER_SECOND
init|=
literal|"tableWriteQueryPerSecond"
decl_stmt|;
specifier|public
name|MetricsTableQueryMeterImpl
parameter_list|(
name|MetricRegistry
name|metricRegistry
parameter_list|)
block|{
name|this
operator|.
name|metricRegistry
operator|=
name|metricRegistry
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TableMeters
block|{
specifier|final
name|Meter
name|tableReadQueryMeter
decl_stmt|;
specifier|final
name|Meter
name|tableWriteQueryMeter
decl_stmt|;
name|TableMeters
parameter_list|(
name|MetricRegistry
name|metricRegistry
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableReadQueryMeter
operator|=
name|metricRegistry
operator|.
name|meter
argument_list|(
name|qualifyMetricsName
argument_list|(
name|tableName
argument_list|,
name|TABLE_READ_QUERY_PER_SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableWriteQueryMeter
operator|=
name|metricRegistry
operator|.
name|meter
argument_list|(
name|qualifyMetricsName
argument_list|(
name|tableName
argument_list|,
name|TABLE_WRITE_QUERY_PER_SECOND
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateTableReadQueryMeter
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|tableReadQueryMeter
operator|.
name|mark
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateTableReadQueryMeter
parameter_list|()
block|{
name|tableReadQueryMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|updateTableWriteQueryMeter
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|tableWriteQueryMeter
operator|.
name|mark
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateTableWriteQueryMeter
parameter_list|()
block|{
name|tableWriteQueryMeter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|qualifyMetricsName
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|metric
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Namespace_"
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"_table_"
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"_metric_"
argument_list|)
operator|.
name|append
argument_list|(
name|metric
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|TableMeters
name|getOrCreateTableMeter
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|metersByTable
operator|.
name|computeIfAbsent
argument_list|(
name|tableName
argument_list|,
name|tbn
lambda|->
operator|new
name|TableMeters
argument_list|(
name|metricRegistry
argument_list|,
name|tbn
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTableReadQueryMeter
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|getOrCreateTableMeter
argument_list|(
name|tableName
argument_list|)
operator|.
name|updateTableReadQueryMeter
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTableReadQueryMeter
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|getOrCreateTableMeter
argument_list|(
name|tableName
argument_list|)
operator|.
name|updateTableReadQueryMeter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTableWriteQueryMeter
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|getOrCreateTableMeter
argument_list|(
name|tableName
argument_list|)
operator|.
name|updateTableWriteQueryMeter
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTableWriteQueryMeter
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|getOrCreateTableMeter
argument_list|(
name|tableName
argument_list|)
operator|.
name|updateTableWriteQueryMeter
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

