begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * Copyright 2016 Josh Elser  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is the adapter from "HBase Metrics Framework", implemented in hbase-metrics-api and  * hbase-metrics modules to the Hadoop Metrics2 framework. This adapter is not a metric source,  * but a helper to be able to collect all of the Metric's in the MetricRegistry using the  * MetricsCollector and MetricsRecordBuilder.  *  * Some of the code is forked from https://github.com/joshelser/dropwizard-hadoop-metrics2.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseMetrics2HadoopMetricsAdapter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HBaseMetrics2HadoopMetricsAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
specifier|public
name|HBaseMetrics2HadoopMetricsAdapter
parameter_list|()
block|{   }
comment|/**    * Iterates over the MetricRegistry and adds them to the {@code collector}.    *    * @param collector A metrics collector    */
specifier|public
name|void
name|snapshotAllMetrics
parameter_list|(
name|MetricRegistry
name|metricRegistry
parameter_list|,
name|MetricsCollector
name|collector
parameter_list|)
block|{
name|MetricRegistryInfo
name|info
init|=
name|metricRegistry
operator|.
name|getMetricRegistryInfo
argument_list|()
decl_stmt|;
name|MetricsRecordBuilder
name|builder
init|=
name|collector
operator|.
name|addRecord
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|info
operator|.
name|getMetricsName
argument_list|()
argument_list|,
name|info
operator|.
name|getMetricsDescription
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setContext
argument_list|(
name|info
operator|.
name|getMetricsContext
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotAllMetrics
argument_list|(
name|metricRegistry
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**    * Iterates over the MetricRegistry and adds them to the {@code builder}.    *    * @param builder A record builder    */
specifier|public
name|void
name|snapshotAllMetrics
parameter_list|(
name|MetricRegistry
name|metricRegistry
parameter_list|,
name|MetricsRecordBuilder
name|builder
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricRegistry
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|e
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Always capitalize the name
name|String
name|name
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Metric
name|metric
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|metric
operator|instanceof
name|Gauge
condition|)
block|{
name|addGauge
argument_list|(
name|name
argument_list|,
operator|(
name|Gauge
argument_list|<
name|?
argument_list|>
operator|)
name|metric
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Counter
condition|)
block|{
name|addCounter
argument_list|(
name|name
argument_list|,
operator|(
name|Counter
operator|)
name|metric
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Histogram
condition|)
block|{
name|addHistogram
argument_list|(
name|name
argument_list|,
operator|(
name|Histogram
operator|)
name|metric
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Meter
condition|)
block|{
name|addMeter
argument_list|(
name|name
argument_list|,
operator|(
name|Meter
operator|)
name|metric
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Timer
condition|)
block|{
name|addTimer
argument_list|(
name|name
argument_list|,
operator|(
name|Timer
operator|)
name|metric
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring unknown Metric class "
operator|+
name|metric
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|Gauge
argument_list|<
name|?
argument_list|>
name|gauge
parameter_list|,
name|MetricsRecordBuilder
name|builder
parameter_list|)
block|{
specifier|final
name|MetricsInfo
name|info
init|=
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|EMPTY_STRING
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|o
init|=
name|gauge
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Figure out which gauge types metrics2 supports and call the right method
if|if
condition|(
name|o
operator|instanceof
name|Integer
condition|)
block|{
name|builder
operator|.
name|addGauge
argument_list|(
name|info
argument_list|,
operator|(
name|int
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|builder
operator|.
name|addGauge
argument_list|(
name|info
argument_list|,
operator|(
name|long
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Float
condition|)
block|{
name|builder
operator|.
name|addGauge
argument_list|(
name|info
argument_list|,
operator|(
name|float
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Double
condition|)
block|{
name|builder
operator|.
name|addGauge
argument_list|(
name|info
argument_list|,
operator|(
name|double
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring Gauge ("
operator|+
name|name
operator|+
literal|") with unhandled type: "
operator|+
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|Counter
name|counter
parameter_list|,
name|MetricsRecordBuilder
name|builder
parameter_list|)
block|{
name|MetricsInfo
name|info
init|=
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|EMPTY_STRING
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addCounter
argument_list|(
name|info
argument_list|,
name|counter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add Histogram value-distribution data to a Hadoop-Metrics2 record building.    *    * @param builder A Hadoop-Metrics2 record builder.    * @param name A base name for this record.    * @param desc A description for this record.    * @param snapshot The distribution of measured values.    */
specifier|private
name|void
name|addHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|Histogram
name|histogram
parameter_list|,
name|MetricsRecordBuilder
name|builder
parameter_list|)
block|{
name|MutableHistogram
operator|.
name|snapshot
argument_list|(
name|name
argument_list|,
name|EMPTY_STRING
argument_list|,
name|histogram
argument_list|,
name|builder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add Dropwizard-Metrics rate information to a Hadoop-Metrics2 record builder, converting the    * rates to the appropriate unit.    *    * @param builder A Hadoop-Metrics2 record builder.    * @param name A base name for this record.    */
specifier|private
name|void
name|addMeter
parameter_list|(
name|String
name|name
parameter_list|,
name|Meter
name|meter
parameter_list|,
name|MetricsRecordBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|addGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
operator|+
literal|"_count"
argument_list|,
name|EMPTY_STRING
argument_list|)
argument_list|,
name|meter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
operator|+
literal|"_mean_rate"
argument_list|,
name|EMPTY_STRING
argument_list|)
argument_list|,
name|meter
operator|.
name|getMeanRate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
operator|+
literal|"_1min_rate"
argument_list|,
name|EMPTY_STRING
argument_list|)
argument_list|,
name|meter
operator|.
name|getOneMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
operator|+
literal|"_5min_rate"
argument_list|,
name|EMPTY_STRING
argument_list|)
argument_list|,
name|meter
operator|.
name|getFiveMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
operator|+
literal|"_15min_rate"
argument_list|,
name|EMPTY_STRING
argument_list|)
argument_list|,
name|meter
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Timer
name|timer
parameter_list|,
name|MetricsRecordBuilder
name|builder
parameter_list|)
block|{
name|addMeter
argument_list|(
name|name
argument_list|,
name|timer
operator|.
name|getMeter
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|addHistogram
argument_list|(
name|name
argument_list|,
name|timer
operator|.
name|getHistogram
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

