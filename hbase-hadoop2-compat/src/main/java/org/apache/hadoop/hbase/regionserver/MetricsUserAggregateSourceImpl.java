begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|BaseSourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsUserAggregateSourceImpl
extends|extends
name|BaseSourceImpl
implements|implements
name|MetricsUserAggregateSource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetricsUserAggregateSourceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MetricsUserSource
argument_list|>
name|userSources
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MetricsUserSource
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MetricsUserAggregateSourceImpl
parameter_list|()
block|{
name|this
argument_list|(
name|METRICS_NAME
argument_list|,
name|METRICS_DESCRIPTION
argument_list|,
name|METRICS_CONTEXT
argument_list|,
name|METRICS_JMX_CONTEXT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MetricsUserAggregateSourceImpl
parameter_list|(
name|String
name|metricsName
parameter_list|,
name|String
name|metricsDescription
parameter_list|,
name|String
name|metricsContext
parameter_list|,
name|String
name|metricsJmxContext
parameter_list|)
block|{
name|super
argument_list|(
name|metricsName
argument_list|,
name|metricsDescription
argument_list|,
name|metricsContext
argument_list|,
name|metricsJmxContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsUserSource
name|getOrCreateMetricsUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|MetricsUserSource
name|source
init|=
name|userSources
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
return|return
name|source
return|;
block|}
name|source
operator|=
operator|new
name|MetricsUserSourceImpl
argument_list|(
name|user
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|MetricsUserSource
name|prev
init|=
name|userSources
operator|.
name|putIfAbsent
argument_list|(
name|user
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
return|return
name|prev
return|;
block|}
else|else
block|{
comment|// register the new metrics now
name|register
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|MetricsUserSource
name|source
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|source
operator|.
name|register
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deregister
parameter_list|(
name|MetricsUserSource
name|toRemove
parameter_list|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|MetricsUserSource
name|source
init|=
name|userSources
operator|.
name|remove
argument_list|(
name|toRemove
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|deregister
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignored. If this errors out it means that someone is double
comment|// closing the user source and the user metrics is already nulled out.
name|LOG
operator|.
name|info
argument_list|(
literal|"Error trying to remove "
operator|+
name|toRemove
operator|+
literal|" from "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MetricsUserSource
argument_list|>
name|getUserSources
parameter_list|()
block|{
return|return
name|userSources
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|MetricsRecordBuilder
name|mrb
init|=
name|collector
operator|.
name|addRecord
argument_list|(
name|metricsName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userSources
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MetricsUserSource
name|userMetricSource
range|:
name|userSources
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|userMetricSource
operator|instanceof
name|MetricsUserSourceImpl
condition|)
block|{
operator|(
operator|(
name|MetricsUserSourceImpl
operator|)
name|userMetricSource
operator|)
operator|.
name|snapshot
argument_list|(
name|mrb
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
name|mrb
operator|.
name|addGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|NUM_USERS
argument_list|,
name|NUMBER_OF_USERS_DESC
argument_list|)
argument_list|,
name|userSources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRegistry
operator|.
name|snapshot
argument_list|(
name|mrb
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

