begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Interns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsStochasticBalancerSourceImpl
extends|extends
name|MetricsBalancerSourceImpl
implements|implements
name|MetricsStochasticBalancerSource
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_FUNCTION_SEP
init|=
literal|"_"
decl_stmt|;
comment|// Most Recently Used(MRU) cache
specifier|private
specifier|static
specifier|final
name|float
name|MRU_LOAD_FACTOR
init|=
literal|0.75f
decl_stmt|;
specifier|private
name|int
name|metricsSize
init|=
literal|1000
decl_stmt|;
specifier|private
name|int
name|mruCap
init|=
name|calcMruCap
argument_list|(
name|metricsSize
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|stochasticCosts
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|(
name|mruCap
argument_list|,
name|MRU_LOAD_FACTOR
argument_list|,
literal|true
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|8204713453436906599L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|mruCap
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|costFunctionDescs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Calculates the mru cache capacity from the metrics size    */
specifier|private
specifier|static
name|int
name|calcMruCap
parameter_list|(
name|int
name|metricsSize
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|metricsSize
operator|/
name|MRU_LOAD_FACTOR
argument_list|)
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMetricsSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|metricsSize
operator|=
name|size
expr_stmt|;
name|mruCap
operator|=
name|calcMruCap
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reports stochastic load balancer costs to JMX    */
specifier|public
name|void
name|updateStochasticCost
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|costFunctionName
parameter_list|,
name|String
name|functionDesc
parameter_list|,
name|Double
name|cost
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|costFunctionName
operator|==
literal|null
operator|||
name|cost
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|functionDesc
operator|!=
literal|null
condition|)
block|{
name|costFunctionDescs
operator|.
name|put
argument_list|(
name|costFunctionName
argument_list|,
name|functionDesc
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|stochasticCosts
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|costs
init|=
name|stochasticCosts
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|costs
operator|==
literal|null
condition|)
block|{
name|costs
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|costs
operator|.
name|put
argument_list|(
name|costFunctionName
argument_list|,
name|cost
argument_list|)
expr_stmt|;
name|stochasticCosts
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|costs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|metricsCollector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|MetricsRecordBuilder
name|metricsRecordBuilder
init|=
name|metricsCollector
operator|.
name|addRecord
argument_list|(
name|metricsName
argument_list|)
decl_stmt|;
if|if
condition|(
name|stochasticCosts
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|stochasticCosts
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|>
name|tableEntry
range|:
name|stochasticCosts
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|costEntry
range|:
name|tableEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|attrName
init|=
name|tableEntry
operator|.
name|getKey
argument_list|()
operator|+
name|TABLE_FUNCTION_SEP
operator|+
name|costEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Double
name|cost
init|=
name|costEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|functionDesc
init|=
name|costFunctionDescs
operator|.
name|get
argument_list|(
name|costEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionDesc
operator|==
literal|null
condition|)
block|{
name|functionDesc
operator|=
name|costEntry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
name|metricsRecordBuilder
operator|.
name|addGauge
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|attrName
argument_list|,
name|functionDesc
argument_list|)
argument_list|,
name|cost
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|metricsRegistry
operator|.
name|snapshot
argument_list|(
name|metricsRecordBuilder
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

