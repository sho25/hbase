begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLongArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_comment
comment|/**  * Extended histogram implementation with metric range counters.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|MutableRangeHistogram
extends|extends
name|MutableHistogram
block|{
specifier|public
name|MutableRangeHistogram
parameter_list|(
name|MetricsInfo
name|info
parameter_list|)
block|{
name|this
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|info
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MutableRangeHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the type of range histogram size or time     */
specifier|public
specifier|abstract
name|String
name|getRangeType
parameter_list|()
function_decl|;
comment|/**    * Returns the ranges to be counted     */
specifier|public
specifier|abstract
name|long
index|[]
name|getRange
parameter_list|()
function_decl|;
comment|/**    * Returns the range counts     */
specifier|public
specifier|abstract
name|AtomicLongArray
name|getRangeVals
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|updateBand
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateBand
parameter_list|(
specifier|final
name|long
name|val
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|getRange
argument_list|()
operator|.
name|length
operator|&&
name|val
operator|>
name|getRange
argument_list|()
index|[
name|i
index|]
condition|;
name|i
operator|++
control|)
empty_stmt|;
name|getRangeVals
argument_list|()
operator|.
name|incrementAndGet
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
name|MetricsRecordBuilder
name|metricsRecordBuilder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
name|all
operator|||
name|changed
argument_list|()
condition|)
block|{
name|clearChanged
argument_list|()
expr_stmt|;
name|updateSnapshotMetrics
argument_list|(
name|metricsRecordBuilder
argument_list|)
expr_stmt|;
name|updateSnapshotRangeMetrics
argument_list|(
name|metricsRecordBuilder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateSnapshotRangeMetrics
parameter_list|(
name|MetricsRecordBuilder
name|metricsRecordBuilder
parameter_list|)
block|{
name|long
name|prior
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getRange
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|val
init|=
name|getRangeVals
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|>
literal|0
condition|)
block|{
name|metricsRecordBuilder
operator|.
name|addCounter
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
operator|+
literal|"_"
operator|+
name|getRangeType
argument_list|()
operator|+
literal|"_"
operator|+
name|prior
operator|+
literal|"-"
operator|+
name|getRange
argument_list|()
index|[
name|i
index|]
argument_list|,
name|desc
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|prior
operator|=
name|getRange
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|long
name|val
init|=
name|getRangeVals
argument_list|()
operator|.
name|get
argument_list|(
name|getRange
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|>
literal|0
condition|)
block|{
name|metricsRecordBuilder
operator|.
name|addCounter
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
operator|+
literal|"_"
operator|+
name|getRangeType
argument_list|()
operator|+
literal|"_"
operator|+
name|getRange
argument_list|()
index|[
name|getRange
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|"-inf"
argument_list|,
name|desc
argument_list|)
argument_list|,
name|getRangeVals
argument_list|()
operator|.
name|get
argument_list|(
name|getRange
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

