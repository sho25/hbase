begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|MutableFastCounter
extends|extends
name|MutableCounter
block|{
specifier|private
specifier|final
name|LongAdder
name|counter
decl_stmt|;
specifier|protected
name|MutableFastCounter
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|iVal
parameter_list|)
block|{
name|super
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|counter
operator|=
operator|new
name|LongAdder
argument_list|()
expr_stmt|;
name|counter
operator|.
name|add
argument_list|(
name|iVal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incr
parameter_list|()
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
comment|/**    * Increment the value by a delta    * @param delta of the increment    */
specifier|public
name|void
name|incr
parameter_list|(
name|long
name|delta
parameter_list|)
block|{
name|counter
operator|.
name|add
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
name|MetricsRecordBuilder
name|builder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
name|all
operator|||
name|changed
argument_list|()
condition|)
block|{
name|builder
operator|.
name|addCounter
argument_list|(
name|info
argument_list|()
argument_list|,
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|clearChanged
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|value
parameter_list|()
block|{
return|return
name|counter
operator|.
name|sum
argument_list|()
return|;
block|}
block|}
end_class

end_unit

