begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_comment
comment|/**  * Factory providing static methods to create MutableMetrics classes.  * HBase uses this class rather than MetricsRegistry because MetricsRegistry does not  * allow metrics to be removed.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseMetricsFactory
block|{
comment|/**    * Create a new gauge    * @param name Name of the gauge    * @param desc Description of the gauge    * @param startingValue The starting value    * @return a new MutableGaugeLong that has a starting value.    */
specifier|public
specifier|static
name|MutableGaugeLong
name|newGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|long
name|startingValue
parameter_list|)
block|{
return|return
operator|new
name|MutableGaugeLong
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
argument_list|,
name|startingValue
argument_list|)
return|;
block|}
comment|/**    * Create a new counter.    * @param name Name of the counter.    * @param desc Description of the counter.    * @param startingValue The starting value.    * @return a new MutableCounterLong that has a starting value.    */
specifier|public
specifier|static
name|MutableCounterLong
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|long
name|startingValue
parameter_list|)
block|{
return|return
operator|new
name|MutableCounterLong
argument_list|(
name|Interns
operator|.
name|info
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
argument_list|,
name|startingValue
argument_list|)
return|;
block|}
block|}
end_class

end_unit

