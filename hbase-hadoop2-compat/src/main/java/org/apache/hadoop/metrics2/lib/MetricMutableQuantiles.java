begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MetricQuantile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MetricSampleQuantiles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_comment
comment|/**  * Watches a stream of long values, maintaining online estimates of specific quantiles with provably  * low error bounds. This is particularly useful for accurate high-percentile (e.g. 95th, 99th)  * latency metrics.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|MetricMutableQuantiles
extends|extends
name|MutableMetric
implements|implements
name|MetricHistogram
block|{
specifier|static
specifier|final
name|MetricQuantile
index|[]
name|quantiles
init|=
block|{
operator|new
name|MetricQuantile
argument_list|(
literal|0.50
argument_list|,
literal|0.050
argument_list|)
block|,
operator|new
name|MetricQuantile
argument_list|(
literal|0.75
argument_list|,
literal|0.025
argument_list|)
block|,
operator|new
name|MetricQuantile
argument_list|(
literal|0.90
argument_list|,
literal|0.010
argument_list|)
block|,
operator|new
name|MetricQuantile
argument_list|(
literal|0.95
argument_list|,
literal|0.005
argument_list|)
block|,
operator|new
name|MetricQuantile
argument_list|(
literal|0.99
argument_list|,
literal|0.001
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|final
name|MetricsInfo
name|numInfo
decl_stmt|;
specifier|private
specifier|final
name|MetricsInfo
index|[]
name|quantileInfos
decl_stmt|;
specifier|private
specifier|final
name|int
name|interval
decl_stmt|;
specifier|private
name|MetricSampleQuantiles
name|estimator
decl_stmt|;
specifier|private
name|long
name|previousCount
init|=
literal|0
decl_stmt|;
specifier|private
name|MetricsExecutor
name|executor
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|protected
name|Map
argument_list|<
name|MetricQuantile
argument_list|,
name|Long
argument_list|>
name|previousSnapshot
init|=
literal|null
decl_stmt|;
comment|/**    * Instantiates a new {@link MetricMutableQuantiles} for a metric that rolls itself over on the    * specified time interval.    *    * @param name        of the metric    * @param description long-form textual description of the metric    * @param sampleName  type of items in the stream (e.g., "Ops")    * @param valueName   type of the values    * @param interval    rollover interval (in seconds) of the estimator    */
specifier|public
name|MetricMutableQuantiles
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|sampleName
parameter_list|,
name|String
name|valueName
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
name|String
name|ucName
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|usName
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|sampleName
argument_list|)
decl_stmt|;
name|String
name|uvName
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|valueName
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|description
argument_list|)
decl_stmt|;
name|String
name|lsName
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|sampleName
argument_list|)
decl_stmt|;
name|String
name|lvName
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|valueName
argument_list|)
decl_stmt|;
name|numInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"Num"
operator|+
name|usName
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Number of %s for %s with %ds interval"
argument_list|,
name|lsName
argument_list|,
name|desc
argument_list|,
name|interval
argument_list|)
argument_list|)
expr_stmt|;
comment|// Construct the MetricsInfos for the quantiles, converting to percentiles
name|quantileInfos
operator|=
operator|new
name|MetricsInfo
index|[
name|quantiles
operator|.
name|length
index|]
expr_stmt|;
name|String
name|nameTemplate
init|=
name|ucName
operator|+
literal|"%dthPercentile"
operator|+
name|interval
operator|+
literal|"sInterval"
operator|+
name|uvName
decl_stmt|;
name|String
name|descTemplate
init|=
literal|"%d percentile "
operator|+
name|lvName
operator|+
literal|" with "
operator|+
name|interval
operator|+
literal|" second interval for "
operator|+
name|desc
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|quantiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|percentile
init|=
call|(
name|int
call|)
argument_list|(
literal|100
operator|*
name|quantiles
index|[
name|i
index|]
operator|.
name|quantile
argument_list|)
decl_stmt|;
name|quantileInfos
index|[
name|i
index|]
operator|=
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|nameTemplate
argument_list|,
name|percentile
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|descTemplate
argument_list|,
name|percentile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|estimator
operator|=
operator|new
name|MetricSampleQuantiles
argument_list|(
name|quantiles
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|MetricsExecutorImpl
argument_list|()
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|executor
operator|.
name|getExecutor
argument_list|()
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|RolloverSample
argument_list|(
name|this
argument_list|)
argument_list|,
name|interval
argument_list|,
name|interval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|snapshot
parameter_list|(
name|MetricsRecordBuilder
name|builder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
name|all
operator|||
name|changed
argument_list|()
condition|)
block|{
name|builder
operator|.
name|addGauge
argument_list|(
name|numInfo
argument_list|,
name|previousCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|quantiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|newValue
init|=
literal|0
decl_stmt|;
comment|// If snapshot is null, we failed to update since the window was empty
if|if
condition|(
name|previousSnapshot
operator|!=
literal|null
condition|)
block|{
name|newValue
operator|=
name|previousSnapshot
operator|.
name|get
argument_list|(
name|quantiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addGauge
argument_list|(
name|quantileInfos
index|[
name|i
index|]
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
argument_list|()
condition|)
block|{
name|clearChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|estimator
operator|.
name|insert
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getInterval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
comment|/** Runnable used to periodically roll over the internal {@link org.apache.hadoop.metrics2.util.MetricSampleQuantiles} every interval. */
specifier|private
specifier|static
class|class
name|RolloverSample
implements|implements
name|Runnable
block|{
name|MetricMutableQuantiles
name|parent
decl_stmt|;
specifier|public
name|RolloverSample
parameter_list|(
name|MetricMutableQuantiles
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|parent
init|)
block|{
try|try
block|{
name|parent
operator|.
name|previousCount
operator|=
name|parent
operator|.
name|estimator
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|parent
operator|.
name|previousSnapshot
operator|=
name|parent
operator|.
name|estimator
operator|.
name|snapshot
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Couldn't get a new snapshot because the window was empty
name|parent
operator|.
name|previousCount
operator|=
literal|0
expr_stmt|;
name|parent
operator|.
name|previousSnapshot
operator|=
literal|null
expr_stmt|;
block|}
name|parent
operator|.
name|estimator
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|parent
operator|.
name|setChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

