begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DefaultMetricsSystemHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultMetricsSystemHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Method
name|removeObjectMethod
decl_stmt|;
specifier|private
specifier|final
name|Field
name|sourceNamesField
decl_stmt|;
specifier|private
specifier|final
name|Field
name|mapField
decl_stmt|;
specifier|public
name|DefaultMetricsSystemHelper
parameter_list|()
block|{
name|Class
argument_list|<
name|?
extends|extends
name|DefaultMetricsSystem
argument_list|>
name|clazz
init|=
name|DefaultMetricsSystem
operator|.
name|INSTANCE
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Method
name|m
decl_stmt|;
try|try
block|{
name|m
operator|=
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
literal|"removeObjectName"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|m
operator|=
literal|null
expr_stmt|;
block|}
name|removeObjectMethod
operator|=
name|m
expr_stmt|;
name|Field
name|f1
decl_stmt|,
name|f2
decl_stmt|;
try|try
block|{
name|f1
operator|=
name|clazz
operator|.
name|getDeclaredField
argument_list|(
literal|"sourceNames"
argument_list|)
expr_stmt|;
name|f1
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f2
operator|=
name|UniqueNames
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"map"
argument_list|)
expr_stmt|;
name|f2
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|f1
operator|=
literal|null
expr_stmt|;
name|f2
operator|=
literal|null
expr_stmt|;
block|}
name|sourceNamesField
operator|=
name|f1
expr_stmt|;
name|mapField
operator|=
name|f2
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeObjectName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|removeObjectMethod
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|removeObjectMethod
operator|.
name|invoke
argument_list|(
name|DefaultMetricsSystem
operator|.
name|INSTANCE
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Unable to remove object name from cache: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Unfortunately Hadoop tries to be too-clever and permanently keeps track of all names registered    * so far as a Source, thus preventing further re-registration of the source with the same name.    * In case of dynamic metrics tied to region-lifecycles, this becomes a problem because we would    * like to be able to re-register and remove with the same name. Otherwise, it is resource leak.    * This ugly code manually removes the name from the UniqueNames map.    * TODO: May not be needed for Hadoop versions after YARN-5190.    */
specifier|public
name|void
name|removeSourceName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|sourceNamesField
operator|==
literal|null
operator|||
name|mapField
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Object
name|sourceNames
init|=
name|sourceNamesField
operator|.
name|get
argument_list|(
name|DefaultMetricsSystem
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|HashMap
name|map
init|=
operator|(
name|HashMap
operator|)
name|mapField
operator|.
name|get
argument_list|(
name|sourceNames
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|sourceNames
init|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Received exception while trying to access Hadoop Metrics classes via reflection."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

