begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Specifies a quantile (with error bounds) to be watched by a  * {@link MetricSampleQuantiles} object.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricQuantile
block|{
comment|/**    * The quantile to be watched by a {@link MetricSampleQuantiles}.    */
specifier|final
name|double
name|quantile
decl_stmt|;
comment|/**    * The error bounds for the {@link #quantile}.    */
specifier|final
name|double
name|error
decl_stmt|;
specifier|public
name|MetricQuantile
parameter_list|(
name|double
name|quantile
parameter_list|,
name|double
name|error
parameter_list|)
block|{
name|this
operator|.
name|quantile
operator|=
name|quantile
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|aThat
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|aThat
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|aThat
operator|instanceof
name|MetricQuantile
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MetricQuantile
name|that
init|=
operator|(
name|MetricQuantile
operator|)
name|aThat
decl_stmt|;
name|long
name|qbits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|quantile
argument_list|)
decl_stmt|;
name|long
name|ebits
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|error
argument_list|)
decl_stmt|;
return|return
name|qbits
operator|==
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|that
operator|.
name|quantile
argument_list|)
operator|&&
name|ebits
operator|==
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|that
operator|.
name|error
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|quantile
argument_list|)
operator|^
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|error
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

