begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Just copy data, do not do any kind of compression. Use for comparison and  * benchmarking.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CopyKeyDataBlockEncoder
extends|extends
name|BufferedDataBlockEncoder
block|{
annotation|@
name|Override
specifier|public
name|void
name|internalEncodeKeyValues
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|HFileBlockDefaultEncodingContext
name|encodingCtx
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|moveBufferToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getFirstKeyInBlock
parameter_list|(
name|ByteBuffer
name|block
parameter_list|)
block|{
name|int
name|keyLength
init|=
name|block
operator|.
name|getInt
argument_list|(
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
decl_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|block
operator|.
name|array
argument_list|()
argument_list|,
name|block
operator|.
name|arrayOffset
argument_list|()
operator|+
literal|3
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|,
name|keyLength
argument_list|)
operator|.
name|slice
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|CopyKeyDataBlockEncoder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EncodedSeeker
name|createSeeker
parameter_list|(
name|KVComparator
name|comparator
parameter_list|,
specifier|final
name|HFileBlockDecodingContext
name|decodingCtx
parameter_list|)
block|{
return|return
operator|new
name|BufferedEncodedSeeker
argument_list|<
name|SeekerState
argument_list|>
argument_list|(
name|comparator
argument_list|,
name|decodingCtx
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|decodeNext
parameter_list|()
block|{
name|current
operator|.
name|keyLength
operator|=
name|currentBuffer
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|current
operator|.
name|valueLength
operator|=
name|currentBuffer
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|current
operator|.
name|ensureSpaceForKey
argument_list|()
expr_stmt|;
name|currentBuffer
operator|.
name|get
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|keyLength
argument_list|)
expr_stmt|;
name|current
operator|.
name|valueOffset
operator|=
name|currentBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|currentBuffer
argument_list|,
name|current
operator|.
name|valueLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|includesTags
argument_list|()
condition|)
block|{
name|current
operator|.
name|tagLength
operator|=
name|currentBuffer
operator|.
name|getShort
argument_list|()
expr_stmt|;
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|currentBuffer
argument_list|,
name|current
operator|.
name|tagLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includesMvcc
argument_list|()
condition|)
block|{
name|current
operator|.
name|memstoreTS
operator|=
name|ByteBufferUtils
operator|.
name|readVLong
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|memstoreTS
operator|=
literal|0
expr_stmt|;
block|}
name|current
operator|.
name|nextKvOffset
operator|=
name|currentBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|decodeFirst
parameter_list|()
block|{
name|ByteBufferUtils
operator|.
name|skip
argument_list|(
name|currentBuffer
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|current
operator|.
name|lastCommonPrefix
operator|=
literal|0
expr_stmt|;
name|decodeNext
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|internalDecodeKeyValues
parameter_list|(
name|DataInputStream
name|source
parameter_list|,
name|int
name|allocateHeaderLength
parameter_list|,
name|int
name|skipLastBytes
parameter_list|,
name|HFileBlockDefaultDecodingContext
name|decodingCtx
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|decompressedSize
init|=
name|source
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|decompressedSize
operator|+
name|allocateHeaderLength
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|allocateHeaderLength
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromStreamToBuffer
argument_list|(
name|buffer
argument_list|,
name|source
argument_list|,
name|decompressedSize
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
block|}
end_class

end_unit

