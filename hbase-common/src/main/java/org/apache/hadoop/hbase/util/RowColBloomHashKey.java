begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * An hash key for ROWCOL bloom. This assumes the cells to be serialized in the Keyvalue  * serialization format with Empty column family. Note that the byte representing the family length  * is considered to be 0  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RowColBloomHashKey
extends|extends
name|CellHashKey
block|{
specifier|private
specifier|final
name|int
name|rowLength
decl_stmt|;
specifier|private
specifier|final
name|int
name|qualLength
decl_stmt|;
specifier|public
name|RowColBloomHashKey
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|super
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|rowLength
operator|=
name|cell
operator|.
name|getRowLength
argument_list|()
expr_stmt|;
comment|// We don't consider the family length for ROWCOL bloom. So subtract the famLen from the
comment|// length calculation. Timestamp and type are of no relevance here
name|qualLength
operator|=
name|cell
operator|.
name|getQualifierLength
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|get
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
comment|// For ROW_COL blooms we use bytes
comment|//<RK length> (2 bytes) ,<RK>, 0 (one byte CF length),<CQ>,<TS> (8 btes),<TYPE> ( 1 byte)
if|if
condition|(
name|offset
operator|<
name|Bytes
operator|.
name|SIZEOF_SHORT
condition|)
block|{
comment|// assign locally
name|int
name|rowlen
init|=
name|rowLength
decl_stmt|;
name|byte
name|b
init|=
operator|(
name|byte
operator|)
name|rowlen
decl_stmt|;
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
name|rowlen
operator|>>=
literal|8
expr_stmt|;
name|b
operator|=
operator|(
name|byte
operator|)
name|rowlen
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
name|int
name|refLen
init|=
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|+
name|rowLength
decl_stmt|;
if|if
condition|(
name|offset
operator|<
name|refLen
condition|)
block|{
return|return
name|PrivateCellUtil
operator|.
name|getRowByte
argument_list|(
name|t
argument_list|,
name|offset
operator|-
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|)
return|;
block|}
if|if
condition|(
name|offset
operator|==
name|refLen
condition|)
block|{
comment|// The fam length should return 0 assuming there is no column family.
comment|// Because for ROWCOL blooms family is not considered
return|return
literal|0
return|;
block|}
name|refLen
operator|+=
name|qualLength
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
expr_stmt|;
comment|// skip the family len because actual cells may have family also
if|if
condition|(
name|offset
operator|<
name|refLen
condition|)
block|{
return|return
name|PrivateCellUtil
operator|.
name|getQualifierByte
argument_list|(
name|t
argument_list|,
name|offset
operator|-
operator|(
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|+
name|rowLength
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|)
argument_list|)
return|;
block|}
comment|// TODO : check if ts and type can be removed
name|refLen
operator|+=
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
expr_stmt|;
if|if
condition|(
name|offset
operator|<
name|refLen
condition|)
block|{
return|return
name|LATEST_TS
index|[
name|offset
operator|-
operator|(
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|+
name|rowLength
operator|+
name|qualLength
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|)
index|]
return|;
block|}
return|return
name|MAX_TYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
comment|// For ROW_COL blooms we use bytes
comment|//<RK length> (2 bytes) ,<RK>, 0 (one byte CF length),<CQ>,<TS> (8 btes),<TYPE> ( 1 byte)
return|return
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|this
operator|.
name|t
operator|.
name|getRowLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|this
operator|.
name|t
operator|.
name|getQualifierLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
return|;
block|}
block|}
end_class

end_unit

