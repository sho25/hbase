begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBufferWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|nio
operator|.
name|ch
operator|.
name|DirectBuffer
import|;
end_import

begin_comment
comment|/**  * Utility functions for working with byte buffers, such as reading/writing  * variable-length long numbers.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"restriction"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|final
class|class
name|ByteBufferUtils
block|{
comment|// "Compressed integer" serialization helper constants.
specifier|public
specifier|final
specifier|static
name|int
name|VALUE_MASK
init|=
literal|0x7f
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|NEXT_BIT_SHIFT
init|=
literal|7
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|NEXT_BIT_MASK
init|=
literal|1
operator|<<
literal|7
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
specifier|static
name|boolean
name|UNSAFE_AVAIL
init|=
name|UnsafeAvailChecker
operator|.
name|isAvailable
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
specifier|static
name|boolean
name|UNSAFE_UNALIGNED
init|=
name|UnsafeAvailChecker
operator|.
name|unaligned
argument_list|()
decl_stmt|;
specifier|private
name|ByteBufferUtils
parameter_list|()
block|{   }
comment|/**    * Similar to {@link WritableUtils#writeVLong(java.io.DataOutput, long)},    * but writes to a {@link ByteBuffer}.    */
specifier|public
specifier|static
name|void
name|writeVLong
parameter_list|(
name|ByteBuffer
name|out
parameter_list|,
name|long
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
operator|-
literal|112
operator|&&
name|i
operator|<=
literal|127
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|len
init|=
operator|-
literal|112
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|i
operator|^=
operator|-
literal|1L
expr_stmt|;
comment|// take one's complement
name|len
operator|=
operator|-
literal|120
expr_stmt|;
block|}
name|long
name|tmp
init|=
name|i
decl_stmt|;
while|while
condition|(
name|tmp
operator|!=
literal|0
condition|)
block|{
name|tmp
operator|=
name|tmp
operator|>>
literal|8
expr_stmt|;
name|len
operator|--
expr_stmt|;
block|}
name|out
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
operator|(
name|len
operator|<
operator|-
literal|120
operator|)
condition|?
operator|-
operator|(
name|len
operator|+
literal|120
operator|)
else|:
operator|-
operator|(
name|len
operator|+
literal|112
operator|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
name|len
init|;
name|idx
operator|!=
literal|0
condition|;
name|idx
operator|--
control|)
block|{
name|int
name|shiftbits
init|=
operator|(
name|idx
operator|-
literal|1
operator|)
operator|*
literal|8
decl_stmt|;
name|long
name|mask
init|=
literal|0xFFL
operator|<<
name|shiftbits
decl_stmt|;
name|out
operator|.
name|put
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
name|mask
operator|)
operator|>>
name|shiftbits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Similar to {@link WritableUtils#readVLong(DataInput)} but reads from a    * {@link ByteBuffer}.    */
specifier|public
specifier|static
name|long
name|readVLong
parameter_list|(
name|ByteBuffer
name|in
parameter_list|)
block|{
name|byte
name|firstByte
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|1
condition|)
block|{
return|return
name|firstByte
return|;
block|}
name|long
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|len
operator|-
literal|1
condition|;
name|idx
operator|++
control|)
block|{
name|byte
name|b
init|=
name|in
operator|.
name|get
argument_list|()
decl_stmt|;
name|i
operator|=
name|i
operator|<<
literal|8
expr_stmt|;
name|i
operator|=
name|i
operator||
operator|(
name|b
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
return|return
operator|(
name|WritableUtils
operator|.
name|isNegativeVInt
argument_list|(
name|firstByte
argument_list|)
condition|?
operator|(
name|i
operator|^
operator|-
literal|1L
operator|)
else|:
name|i
operator|)
return|;
block|}
comment|/**    * Put in buffer integer using 7 bit encoding. For each written byte:    * 7 bits are used to store value    * 1 bit is used to indicate whether there is next bit.    * @param value Int to be compressed.    * @param out Where to put compressed data    * @return Number of bytes written.    * @throws IOException on stream error    */
specifier|public
specifier|static
name|int
name|putCompressedInt
parameter_list|(
name|OutputStream
name|out
parameter_list|,
specifier|final
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|tmpvalue
init|=
name|value
decl_stmt|;
do|do
block|{
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
name|tmpvalue
operator|&
name|VALUE_MASK
argument_list|)
decl_stmt|;
name|tmpvalue
operator|>>>=
name|NEXT_BIT_SHIFT
expr_stmt|;
if|if
condition|(
name|tmpvalue
operator|!=
literal|0
condition|)
block|{
name|b
operator||=
operator|(
name|byte
operator|)
name|NEXT_BIT_MASK
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|tmpvalue
operator|!=
literal|0
condition|)
do|;
return|return
name|i
return|;
block|}
comment|/**     * Put in output stream 32 bit integer (Big Endian byte order).     * @param out Where to put integer.     * @param value Value of integer.     * @throws IOException On stream error.     */
specifier|public
specifier|static
name|void
name|putInt
parameter_list|(
name|OutputStream
name|out
parameter_list|,
specifier|final
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We have writeInt in ByteBufferOutputStream so that it can directly write
comment|// int to underlying
comment|// ByteBuffer in one step.
if|if
condition|(
name|out
operator|instanceof
name|ByteBufferWriter
condition|)
block|{
operator|(
operator|(
name|ByteBufferWriter
operator|)
name|out
operator|)
operator|.
name|writeInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StreamUtils
operator|.
name|writeInt
argument_list|(
name|out
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|byte
name|toByte
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_AVAIL
condition|)
block|{
return|return
name|UnsafeAccess
operator|.
name|toByte
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|buffer
operator|.
name|get
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
comment|/**    * Copy the data to the output stream and update position in buffer.    * @param out the stream to write bytes to    * @param in the buffer to read bytes from    * @param length the number of bytes to copy    */
specifier|public
specifier|static
name|void
name|moveBufferToStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|skip
argument_list|(
name|in
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy data from a buffer to an output stream. Does not update the position    * in the buffer.    * @param out the stream to write bytes to    * @param in the buffer to read bytes from    * @param offset the offset in the buffer (from the buffer's array offset)    *      to start copying bytes from    * @param length the number of bytes to copy    */
specifier|public
specifier|static
name|void
name|copyBufferToStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|instanceof
name|ByteBufferWriter
condition|)
block|{
operator|(
operator|(
name|ByteBufferWriter
operator|)
name|out
operator|)
operator|.
name|write
argument_list|(
name|in
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|in
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
operator|+
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|toByte
argument_list|(
name|in
argument_list|,
name|offset
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|int
name|putLong
parameter_list|(
name|OutputStream
name|out
parameter_list|,
specifier|final
name|long
name|value
parameter_list|,
specifier|final
name|int
name|fitInBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|tmpValue
init|=
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fitInBytes
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|tmpValue
operator|&
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
name|tmpValue
operator|>>>=
literal|8
expr_stmt|;
block|}
return|return
name|fitInBytes
return|;
block|}
specifier|public
specifier|static
name|int
name|putByte
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_AVAIL
condition|)
block|{
return|return
name|UnsafeAccess
operator|.
name|putByte
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|b
argument_list|)
return|;
block|}
else|else
block|{
name|buffer
operator|.
name|put
argument_list|(
name|offset
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|offset
operator|+
literal|1
return|;
block|}
block|}
comment|/**    * Check how many bytes are required to store value.    * @param value Value which size will be tested.    * @return How many bytes are required to store value.    */
specifier|public
specifier|static
name|int
name|longFitsIn
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
literal|8
return|;
block|}
if|if
condition|(
name|value
operator|<
operator|(
literal|1l
operator|<<
literal|4
operator|*
literal|8
operator|)
condition|)
block|{
comment|// no more than 4 bytes
if|if
condition|(
name|value
operator|<
operator|(
literal|1l
operator|<<
literal|2
operator|*
literal|8
operator|)
condition|)
block|{
if|if
condition|(
name|value
operator|<
operator|(
literal|1l
operator|<<
literal|1
operator|*
literal|8
operator|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|2
return|;
block|}
if|if
condition|(
name|value
operator|<
operator|(
literal|1l
operator|<<
literal|3
operator|*
literal|8
operator|)
condition|)
block|{
return|return
literal|3
return|;
block|}
return|return
literal|4
return|;
block|}
comment|// more than 4 bytes
if|if
condition|(
name|value
operator|<
operator|(
literal|1l
operator|<<
literal|6
operator|*
literal|8
operator|)
condition|)
block|{
if|if
condition|(
name|value
operator|<
operator|(
literal|1l
operator|<<
literal|5
operator|*
literal|8
operator|)
condition|)
block|{
return|return
literal|5
return|;
block|}
return|return
literal|6
return|;
block|}
if|if
condition|(
name|value
operator|<
operator|(
literal|1l
operator|<<
literal|7
operator|*
literal|8
operator|)
condition|)
block|{
return|return
literal|7
return|;
block|}
return|return
literal|8
return|;
block|}
comment|/**    * Check how many bytes is required to store value.    * @param value Value which size will be tested.    * @return How many bytes are required to store value.    */
specifier|public
specifier|static
name|int
name|intFitsIn
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
literal|4
return|;
block|}
if|if
condition|(
name|value
operator|<
operator|(
literal|1
operator|<<
literal|2
operator|*
literal|8
operator|)
condition|)
block|{
if|if
condition|(
name|value
operator|<
operator|(
literal|1
operator|<<
literal|1
operator|*
literal|8
operator|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|2
return|;
block|}
if|if
condition|(
name|value
operator|<=
operator|(
literal|1
operator|<<
literal|3
operator|*
literal|8
operator|)
condition|)
block|{
return|return
literal|3
return|;
block|}
return|return
literal|4
return|;
block|}
comment|/**    * Read integer from stream coded in 7 bits and increment position.    * @return the integer that has been read    * @throws IOException    */
specifier|public
specifier|static
name|int
name|readCompressedInt
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|byte
name|b
decl_stmt|;
do|do
block|{
name|b
operator|=
operator|(
name|byte
operator|)
name|input
operator|.
name|read
argument_list|()
expr_stmt|;
name|result
operator|+=
operator|(
name|b
operator|&
name|VALUE_MASK
operator|)
operator|<<
operator|(
name|NEXT_BIT_SHIFT
operator|*
name|i
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Corrupted compressed int (too long: "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" bytes)"
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
literal|0
operator|!=
operator|(
name|b
operator|&
name|NEXT_BIT_MASK
operator|)
condition|)
do|;
return|return
name|result
return|;
block|}
comment|/**    * Read integer from buffer coded in 7 bits and increment position.    * @return Read integer.    */
specifier|public
specifier|static
name|int
name|readCompressedInt
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|byte
name|b
init|=
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
name|NEXT_BIT_MASK
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|(
name|b
operator|&
name|VALUE_MASK
operator|)
operator|+
operator|(
name|readCompressedInt
argument_list|(
name|buffer
argument_list|)
operator|<<
name|NEXT_BIT_SHIFT
operator|)
return|;
block|}
return|return
name|b
operator|&
name|VALUE_MASK
return|;
block|}
comment|/**    * Read long which was written to fitInBytes bytes and increment position.    * @param fitInBytes In how many bytes given long is stored.    * @return The value of parsed long.    * @throws IOException    */
specifier|public
specifier|static
name|long
name|readLong
parameter_list|(
name|InputStream
name|in
parameter_list|,
specifier|final
name|int
name|fitInBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|tmpLong
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fitInBytes
condition|;
operator|++
name|i
control|)
block|{
name|tmpLong
operator||=
operator|(
name|in
operator|.
name|read
argument_list|()
operator|&
literal|0xffl
operator|)
operator|<<
operator|(
literal|8
operator|*
name|i
operator|)
expr_stmt|;
block|}
return|return
name|tmpLong
return|;
block|}
comment|/**    * Read long which was written to fitInBytes bytes and increment position.    * @param fitInBytes In how many bytes given long is stored.    * @return The value of parsed long.    */
specifier|public
specifier|static
name|long
name|readLong
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
specifier|final
name|int
name|fitInBytes
parameter_list|)
block|{
name|long
name|tmpLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fitInBytes
condition|;
operator|++
name|i
control|)
block|{
name|tmpLength
operator||=
operator|(
name|in
operator|.
name|get
argument_list|()
operator|&
literal|0xffl
operator|)
operator|<<
operator|(
literal|8l
operator|*
name|i
operator|)
expr_stmt|;
block|}
return|return
name|tmpLength
return|;
block|}
comment|/**    * Copy the given number of bytes from the given stream and put it at the    * current position of the given buffer, updating the position in the buffer.    * @param out the buffer to write data to    * @param in the stream to read data from    * @param length the number of bytes to read/write    */
specifier|public
specifier|static
name|void
name|copyFromStreamToBuffer
parameter_list|(
name|ByteBuffer
name|out
parameter_list|,
name|DataInputStream
name|in
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|in
operator|.
name|readFully
argument_list|(
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|position
argument_list|()
operator|+
name|out
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|skip
argument_list|(
name|out
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|put
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Copy from the InputStream to a new heap ByteBuffer until the InputStream is exhausted.    */
specifier|public
specifier|static
name|ByteBuffer
name|drainInputStreamToBuffer
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|baos
argument_list|,
literal|4096
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
return|return
name|buffer
return|;
block|}
comment|/**    * Copy one buffer's whole data to another. Write starts at the current position of 'out' buffer.    * Note : This will advance the position marker of {@code out} and also change the position maker    * for {@code in}.    * @param in source buffer    * @param out destination buffer    */
specifier|public
specifier|static
name|void
name|copyFromBufferToBuffer
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|)
block|{
if|if
condition|(
name|in
operator|.
name|hasArray
argument_list|()
operator|&&
name|out
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|int
name|length
init|=
name|in
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|position
argument_list|(
name|out
operator|.
name|position
argument_list|()
operator|+
name|length
argument_list|)
expr_stmt|;
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UNSAFE_AVAIL
condition|)
block|{
name|int
name|length
init|=
name|in
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|UnsafeAccess
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|out
argument_list|,
name|out
operator|.
name|position
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|position
argument_list|(
name|out
operator|.
name|position
argument_list|()
operator|+
name|length
argument_list|)
expr_stmt|;
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|put
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copy from one buffer to another from given offset. This will be absolute positional copying and    * won't affect the position of any of the buffers.    * @param in    * @param out    * @param sourceOffset    * @param destinationOffset    * @param length    */
specifier|public
specifier|static
name|void
name|copyFromBufferToBuffer
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|destinationOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|in
operator|.
name|hasArray
argument_list|()
operator|&&
name|out
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|sourceOffset
operator|+
name|in
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|destinationOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UNSAFE_AVAIL
condition|)
block|{
name|UnsafeAccess
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|sourceOffset
argument_list|,
name|out
argument_list|,
name|destinationOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBuffer
name|outDup
init|=
name|out
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|outDup
operator|.
name|position
argument_list|(
name|destinationOffset
argument_list|)
expr_stmt|;
name|ByteBuffer
name|inDup
init|=
name|in
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|inDup
operator|.
name|position
argument_list|(
name|sourceOffset
argument_list|)
operator|.
name|limit
argument_list|(
name|sourceOffset
operator|+
name|length
argument_list|)
expr_stmt|;
name|outDup
operator|.
name|put
argument_list|(
name|inDup
argument_list|)
expr_stmt|;
block|}
comment|// We used to return a result but disabled; return destinationOffset + length;
block|}
comment|/**    * Copy from one buffer to another from given offset.    *<p>    * Note : This will advance the position marker of {@code out} but not change the position maker    * for {@code in}    * @param in source buffer    * @param out destination buffer    * @param sourceOffset offset in the source buffer    * @param length how many bytes to copy    */
specifier|public
specifier|static
name|void
name|copyFromBufferToBuffer
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|in
operator|.
name|hasArray
argument_list|()
operator|&&
name|out
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|sourceOffset
operator|+
name|in
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|position
argument_list|()
operator|+
name|out
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|skip
argument_list|(
name|out
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UNSAFE_AVAIL
condition|)
block|{
name|UnsafeAccess
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|sourceOffset
argument_list|,
name|out
argument_list|,
name|out
operator|.
name|position
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|skip
argument_list|(
name|out
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBuffer
name|inDup
init|=
name|in
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|inDup
operator|.
name|position
argument_list|(
name|sourceOffset
argument_list|)
operator|.
name|limit
argument_list|(
name|sourceOffset
operator|+
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|inDup
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Find length of common prefix of two parts in the buffer    * @param buffer Where parts are located.    * @param offsetLeft Offset of the first part.    * @param offsetRight Offset of the second part.    * @param limit Maximal length of common prefix.    * @return Length of prefix.    */
specifier|public
specifier|static
name|int
name|findCommonPrefix
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offsetLeft
parameter_list|,
name|int
name|offsetRight
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|int
name|prefix
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|prefix
operator|<
name|limit
condition|;
operator|++
name|prefix
control|)
block|{
if|if
condition|(
name|buffer
operator|.
name|get
argument_list|(
name|offsetLeft
operator|+
name|prefix
argument_list|)
operator|!=
name|buffer
operator|.
name|get
argument_list|(
name|offsetRight
operator|+
name|prefix
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|prefix
return|;
block|}
comment|/**    * Find length of common prefix in two arrays.    * @param left Array to be compared.    * @param leftOffset Offset in left array.    * @param leftLength Length of left array.    * @param right Array to be compared.    * @param rightOffset Offset in right array.    * @param rightLength Length of right array.    */
specifier|public
specifier|static
name|int
name|findCommonPrefix
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|leftOffset
parameter_list|,
name|int
name|leftLength
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|int
name|rightOffset
parameter_list|,
name|int
name|rightLength
parameter_list|)
block|{
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
name|leftLength
argument_list|,
name|rightLength
argument_list|)
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|result
operator|<
name|length
operator|&&
name|left
index|[
name|leftOffset
operator|+
name|result
index|]
operator|==
name|right
index|[
name|rightOffset
operator|+
name|result
index|]
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Find length of common prefix in two arrays.    * @param left ByteBuffer to be compared.    * @param leftOffset Offset in left ByteBuffer.    * @param leftLength Length of left ByteBuffer.    * @param right ByteBuffer to be compared.    * @param rightOffset Offset in right ByteBuffer.    * @param rightLength Length of right ByteBuffer.    */
specifier|public
specifier|static
name|int
name|findCommonPrefix
parameter_list|(
name|ByteBuffer
name|left
parameter_list|,
name|int
name|leftOffset
parameter_list|,
name|int
name|leftLength
parameter_list|,
name|ByteBuffer
name|right
parameter_list|,
name|int
name|rightOffset
parameter_list|,
name|int
name|rightLength
parameter_list|)
block|{
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
name|leftLength
argument_list|,
name|rightLength
argument_list|)
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|result
operator|<
name|length
operator|&&
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|left
argument_list|,
name|leftOffset
operator|+
name|result
argument_list|)
operator|==
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|right
argument_list|,
name|rightOffset
operator|+
name|result
argument_list|)
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Check whether two parts in the same buffer are equal.    * @param buffer In which buffer there are parts    * @param offsetLeft Beginning of first part.    * @param lengthLeft Length of the first part.    * @param offsetRight Beginning of the second part.    * @param lengthRight Length of the second part.    * @return True if equal    */
specifier|public
specifier|static
name|boolean
name|arePartsEqual
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offsetLeft
parameter_list|,
name|int
name|lengthLeft
parameter_list|,
name|int
name|offsetRight
parameter_list|,
name|int
name|lengthRight
parameter_list|)
block|{
if|if
condition|(
name|lengthLeft
operator|!=
name|lengthRight
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|buffer
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
literal|0
operator|==
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|offsetLeft
argument_list|,
name|lengthLeft
argument_list|,
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|offsetRight
argument_list|,
name|lengthRight
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lengthRight
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
operator|.
name|get
argument_list|(
name|offsetLeft
operator|+
name|i
argument_list|)
operator|!=
name|buffer
operator|.
name|get
argument_list|(
name|offsetRight
operator|+
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Increment position in buffer.    * @param buffer In this buffer.    * @param length By that many bytes.    */
specifier|public
specifier|static
name|void
name|skip
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|+
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|extendLimit
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|numBytes
parameter_list|)
block|{
name|buffer
operator|.
name|limit
argument_list|(
name|buffer
operator|.
name|limit
argument_list|()
operator|+
name|numBytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy the bytes from position to limit into a new byte[] of the exact length and sets the    * position and limit back to their original values (though not thread safe).    * @param buffer copy from here    * @param startPosition put buffer.get(startPosition) into byte[0]    * @return a new byte[] containing the bytes in the specified range    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|startPosition
parameter_list|)
block|{
name|int
name|originalPosition
init|=
name|buffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|limit
argument_list|()
operator|-
name|startPosition
index|]
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|startPosition
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|originalPosition
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * Copy the given number of bytes from specified offset into a new byte[]    * @param buffer    * @param offset    * @param length    * @return a new byte[] containing the bytes in the specified range    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
index|[
name|i
index|]
operator|=
name|buffer
operator|.
name|get
argument_list|(
name|offset
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|ByteBuffer
name|buf1
parameter_list|,
name|int
name|o1
parameter_list|,
name|int
name|l1
parameter_list|,
name|ByteBuffer
name|buf2
parameter_list|,
name|int
name|o2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|l1
operator|==
literal|0
operator|)
operator|||
operator|(
name|l2
operator|==
literal|0
operator|)
condition|)
block|{
comment|// both 0 length, return true, or else false
return|return
name|l1
operator|==
name|l2
return|;
block|}
comment|// Since we're often comparing adjacent sorted data,
comment|// it's usual to have equal arrays except for the very last byte
comment|// so check that first
if|if
condition|(
name|toByte
argument_list|(
name|buf1
argument_list|,
name|o1
operator|+
name|l1
operator|-
literal|1
argument_list|)
operator|!=
name|toByte
argument_list|(
name|buf2
argument_list|,
name|o2
operator|+
name|l2
operator|-
literal|1
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|compareTo
argument_list|(
name|buf1
argument_list|,
name|o1
argument_list|,
name|l1
argument_list|,
name|buf2
argument_list|,
name|o2
argument_list|,
name|l2
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * @param buf    *          ByteBuffer to hash    * @param offset    *          offset to start from    * @param length    *          length to hash    */
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|hash
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|=
operator|(
literal|31
operator|*
name|hash
operator|)
operator|+
operator|(
name|int
operator|)
name|toByte
argument_list|(
name|buf
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|ByteBuffer
name|buf1
parameter_list|,
name|int
name|o1
parameter_list|,
name|int
name|l1
parameter_list|,
name|ByteBuffer
name|buf2
parameter_list|,
name|int
name|o2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
name|long
name|offset1Adj
decl_stmt|,
name|offset2Adj
decl_stmt|;
name|Object
name|refObj1
init|=
literal|null
decl_stmt|,
name|refObj2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buf1
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|offset1Adj
operator|=
name|o1
operator|+
operator|(
operator|(
name|DirectBuffer
operator|)
name|buf1
operator|)
operator|.
name|address
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|offset1Adj
operator|=
name|o1
operator|+
name|buf1
operator|.
name|arrayOffset
argument_list|()
operator|+
name|UnsafeAccess
operator|.
name|BYTE_ARRAY_BASE_OFFSET
expr_stmt|;
name|refObj1
operator|=
name|buf1
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|buf2
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|offset2Adj
operator|=
name|o2
operator|+
operator|(
operator|(
name|DirectBuffer
operator|)
name|buf2
operator|)
operator|.
name|address
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|offset2Adj
operator|=
name|o2
operator|+
name|buf2
operator|.
name|arrayOffset
argument_list|()
operator|+
name|UnsafeAccess
operator|.
name|BYTE_ARRAY_BASE_OFFSET
expr_stmt|;
name|refObj2
operator|=
name|buf2
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
return|return
name|compareToUnsafe
argument_list|(
name|refObj1
argument_list|,
name|offset1Adj
argument_list|,
name|l1
argument_list|,
name|refObj2
argument_list|,
name|offset2Adj
argument_list|,
name|l2
argument_list|)
return|;
block|}
name|int
name|end1
init|=
name|o1
operator|+
name|l1
decl_stmt|;
name|int
name|end2
init|=
name|o2
operator|+
name|l2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|o1
init|,
name|j
init|=
name|o2
init|;
name|i
operator|<
name|end1
operator|&&
name|j
operator|<
name|end2
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|int
name|a
init|=
name|buf1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b
init|=
name|buf2
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
condition|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
block|}
return|return
name|l1
operator|-
name|l2
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|ByteBuffer
name|buf1
parameter_list|,
name|int
name|o1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|buf2
parameter_list|,
name|int
name|o2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|l1
operator|==
literal|0
operator|)
operator|||
operator|(
name|l2
operator|==
literal|0
operator|)
condition|)
block|{
comment|// both 0 length, return true, or else false
return|return
name|l1
operator|==
name|l2
return|;
block|}
comment|// Since we're often comparing adjacent sorted data,
comment|// it's usual to have equal arrays except for the very last byte
comment|// so check that first
if|if
condition|(
name|toByte
argument_list|(
name|buf1
argument_list|,
name|o1
operator|+
name|l1
operator|-
literal|1
argument_list|)
operator|!=
name|buf2
index|[
name|o2
operator|+
name|l2
operator|-
literal|1
index|]
condition|)
return|return
literal|false
return|;
return|return
name|compareTo
argument_list|(
name|buf1
argument_list|,
name|o1
argument_list|,
name|l1
argument_list|,
name|buf2
argument_list|,
name|o2
argument_list|,
name|l2
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|buf1
parameter_list|,
name|int
name|o1
parameter_list|,
name|int
name|l1
parameter_list|,
name|ByteBuffer
name|buf2
parameter_list|,
name|int
name|o2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
comment|// This method is nearly same as the compareTo that follows but hard sharing code given
comment|// byte array and bytebuffer types and this is a hot code path
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
name|long
name|offset2Adj
decl_stmt|;
name|Object
name|refObj2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buf2
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|offset2Adj
operator|=
name|o2
operator|+
operator|(
operator|(
name|DirectBuffer
operator|)
name|buf2
operator|)
operator|.
name|address
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|offset2Adj
operator|=
name|o2
operator|+
name|buf2
operator|.
name|arrayOffset
argument_list|()
operator|+
name|UnsafeAccess
operator|.
name|BYTE_ARRAY_BASE_OFFSET
expr_stmt|;
name|refObj2
operator|=
name|buf2
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
return|return
name|compareToUnsafe
argument_list|(
name|buf1
argument_list|,
name|o1
operator|+
name|UnsafeAccess
operator|.
name|BYTE_ARRAY_BASE_OFFSET
argument_list|,
name|l1
argument_list|,
name|refObj2
argument_list|,
name|offset2Adj
argument_list|,
name|l2
argument_list|)
return|;
block|}
name|int
name|end1
init|=
name|o1
operator|+
name|l1
decl_stmt|;
name|int
name|end2
init|=
name|o2
operator|+
name|l2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|o1
init|,
name|j
init|=
name|o2
init|;
name|i
operator|<
name|end1
operator|&&
name|j
operator|<
name|end2
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|int
name|a
init|=
name|buf1
index|[
name|i
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b
init|=
name|buf2
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
condition|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
block|}
return|return
name|l1
operator|-
name|l2
return|;
block|}
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|ByteBuffer
name|buf1
parameter_list|,
name|int
name|o1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|buf2
parameter_list|,
name|int
name|o2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
name|long
name|offset1Adj
decl_stmt|;
name|Object
name|refObj1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buf1
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|offset1Adj
operator|=
name|o1
operator|+
operator|(
operator|(
name|DirectBuffer
operator|)
name|buf1
operator|)
operator|.
name|address
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|offset1Adj
operator|=
name|o1
operator|+
name|buf1
operator|.
name|arrayOffset
argument_list|()
operator|+
name|UnsafeAccess
operator|.
name|BYTE_ARRAY_BASE_OFFSET
expr_stmt|;
name|refObj1
operator|=
name|buf1
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
return|return
name|compareToUnsafe
argument_list|(
name|refObj1
argument_list|,
name|offset1Adj
argument_list|,
name|l1
argument_list|,
name|buf2
argument_list|,
name|o2
operator|+
name|UnsafeAccess
operator|.
name|BYTE_ARRAY_BASE_OFFSET
argument_list|,
name|l2
argument_list|)
return|;
block|}
name|int
name|end1
init|=
name|o1
operator|+
name|l1
decl_stmt|;
name|int
name|end2
init|=
name|o2
operator|+
name|l2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|o1
init|,
name|j
init|=
name|o2
init|;
name|i
operator|<
name|end1
operator|&&
name|j
operator|<
name|end2
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|int
name|a
init|=
name|buf1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b
init|=
name|buf2
index|[
name|j
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
condition|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
block|}
return|return
name|l1
operator|-
name|l2
return|;
block|}
specifier|static
name|int
name|compareToUnsafe
parameter_list|(
name|Object
name|obj1
parameter_list|,
name|long
name|o1
parameter_list|,
name|int
name|l1
parameter_list|,
name|Object
name|obj2
parameter_list|,
name|long
name|o2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
specifier|final
name|int
name|stride
init|=
literal|8
decl_stmt|;
specifier|final
name|int
name|minLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
decl_stmt|;
name|int
name|strideLimit
init|=
name|minLength
operator|&
operator|~
operator|(
name|stride
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|i
decl_stmt|;
comment|/*      * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a time is no slower than      * comparing 4 bytes at a time even on 32-bit. On the other hand, it is substantially faster on      * 64-bit.      */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|strideLimit
condition|;
name|i
operator|+=
name|stride
control|)
block|{
name|long
name|lw
init|=
name|UnsafeAccess
operator|.
name|theUnsafe
operator|.
name|getLong
argument_list|(
name|obj1
argument_list|,
name|o1
operator|+
operator|(
name|long
operator|)
name|i
argument_list|)
decl_stmt|;
name|long
name|rw
init|=
name|UnsafeAccess
operator|.
name|theUnsafe
operator|.
name|getLong
argument_list|(
name|obj2
argument_list|,
name|o2
operator|+
operator|(
name|long
operator|)
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lw
operator|!=
name|rw
condition|)
block|{
if|if
condition|(
operator|!
name|UnsafeAccess
operator|.
name|littleEndian
condition|)
block|{
return|return
operator|(
operator|(
name|lw
operator|+
name|Long
operator|.
name|MIN_VALUE
operator|)
operator|<
operator|(
name|rw
operator|+
name|Long
operator|.
name|MIN_VALUE
operator|)
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
comment|/*          * We want to compare only the first index where left[index] != right[index]. This          * corresponds to the least significant nonzero byte in lw ^ rw, since lw and rw are          * little-endian. Long.numberOfTrailingZeros(diff) tells us the least significant          * nonzero bit, and zeroing out the first three bits of L.nTZ gives us the shift to get          * that least significant nonzero byte. This comparison logic is based on UnsignedBytes          * from guava v21          */
name|int
name|n
init|=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|lw
operator|^
name|rw
argument_list|)
operator|&
operator|~
literal|0x7
decl_stmt|;
return|return
operator|(
call|(
name|int
call|)
argument_list|(
operator|(
name|lw
operator|>>>
name|n
operator|)
operator|&
literal|0xFF
argument_list|)
operator|)
operator|-
operator|(
call|(
name|int
call|)
argument_list|(
operator|(
name|rw
operator|>>>
name|n
operator|)
operator|&
literal|0xFF
argument_list|)
operator|)
return|;
block|}
block|}
comment|// The epilogue to cover the last (minLength % stride) elements.
for|for
control|(
init|;
name|i
operator|<
name|minLength
condition|;
name|i
operator|++
control|)
block|{
name|int
name|il
init|=
operator|(
name|UnsafeAccess
operator|.
name|theUnsafe
operator|.
name|getByte
argument_list|(
name|obj1
argument_list|,
name|o1
operator|+
name|i
argument_list|)
operator|&
literal|0xFF
operator|)
decl_stmt|;
name|int
name|ir
init|=
operator|(
name|UnsafeAccess
operator|.
name|theUnsafe
operator|.
name|getByte
argument_list|(
name|obj2
argument_list|,
name|o2
operator|+
name|i
argument_list|)
operator|&
literal|0xFF
operator|)
decl_stmt|;
if|if
condition|(
name|il
operator|!=
name|ir
condition|)
block|{
return|return
name|il
operator|-
name|ir
return|;
block|}
block|}
return|return
name|l1
operator|-
name|l2
return|;
block|}
comment|/**    * Reads a short value at the given buffer's offset.    * @param buffer    * @param offset    * @return short value at offset    */
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
return|return
name|UnsafeAccess
operator|.
name|toShort
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|buffer
operator|.
name|getShort
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
comment|/**    * Reads an int value at the given buffer's current position. Also advances the buffer's position    */
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
name|int
name|i
init|=
name|UnsafeAccess
operator|.
name|toInt
argument_list|(
name|buffer
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
else|else
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|()
return|;
block|}
block|}
comment|/**    * Reads an int value at the given buffer's offset.    * @param buffer    * @param offset    * @return int value at offset    */
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
return|return
name|UnsafeAccess
operator|.
name|toInt
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|buffer
operator|.
name|getInt
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
comment|/**    * Converts a ByteBuffer to an int value    *    * @param buf The ByteBuffer    * @param offset Offset to int value    * @param length Number of bytes used to store the int value.    * @return the int value    * @throws IllegalArgumentException    *           if there's not enough bytes left in the buffer after the given offset    */
specifier|public
specifier|static
name|int
name|readAsInt
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|+
name|length
operator|>
name|buf
operator|.
name|limit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"offset ("
operator|+
name|offset
operator|+
literal|") + length ("
operator|+
name|length
operator|+
literal|") exceed the"
operator|+
literal|" limit of the buffer: "
operator|+
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
operator|(
name|offset
operator|+
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|<<=
literal|8
expr_stmt|;
name|n
operator|^=
name|toByte
argument_list|(
name|buf
argument_list|,
name|i
argument_list|)
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
comment|/**    * Reads a long value at the given buffer's offset.    * @param buffer    * @param offset    * @return long value at offset    */
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
return|return
name|UnsafeAccess
operator|.
name|toLong
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|buffer
operator|.
name|getLong
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
comment|/**    * Put an int value out to the given ByteBuffer's current position in big-endian format.    * This also advances the position in buffer by int size.    * @param buffer the ByteBuffer to write to    * @param val int to write out    */
specifier|public
specifier|static
name|void
name|putInt
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|val
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
name|int
name|newPos
init|=
name|UnsafeAccess
operator|.
name|putInt
argument_list|(
name|buffer
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|newPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|putInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|putInt
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|val
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
return|return
name|UnsafeAccess
operator|.
name|putInt
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
name|val
argument_list|)
return|;
block|}
name|buffer
operator|.
name|putInt
argument_list|(
name|index
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|index
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
return|;
block|}
comment|/**    * Reads a double value at the given buffer's offset.    * @param buffer    * @param offset offset where double is    * @return double value at offset    */
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|toLong
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Reads a BigDecimal value at the given buffer's offset.    * @param buffer    * @param offset    * @return BigDecimal value at offset    */
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
operator|||
name|length
operator|<
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
literal|1
operator|||
operator|(
name|offset
operator|+
name|length
operator|>
name|buffer
operator|.
name|limit
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|scale
init|=
name|toInt
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tcBytes
init|=
operator|new
name|byte
index|[
name|length
operator|-
name|Bytes
operator|.
name|SIZEOF_INT
index|]
decl_stmt|;
name|copyFromBufferToArray
argument_list|(
name|tcBytes
argument_list|,
name|buffer
argument_list|,
name|offset
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|,
literal|0
argument_list|,
name|length
operator|-
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
return|return
operator|new
name|BigDecimal
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|tcBytes
argument_list|)
argument_list|,
name|scale
argument_list|)
return|;
block|}
comment|/**    * Put a short value out to the given ByteBuffer's current position in big-endian format.    * This also advances the position in buffer by short size.    * @param buffer the ByteBuffer to write to    * @param val short to write out    */
specifier|public
specifier|static
name|void
name|putShort
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|short
name|val
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
name|int
name|newPos
init|=
name|UnsafeAccess
operator|.
name|putShort
argument_list|(
name|buffer
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|newPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|putShort
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|putShort
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|index
parameter_list|,
name|short
name|val
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
return|return
name|UnsafeAccess
operator|.
name|putShort
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
name|val
argument_list|)
return|;
block|}
name|buffer
operator|.
name|putShort
argument_list|(
name|index
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|index
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
return|;
block|}
specifier|public
specifier|static
name|int
name|putAsShort
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|buf
operator|.
name|put
argument_list|(
name|index
operator|+
literal|1
argument_list|,
operator|(
name|byte
operator|)
name|val
argument_list|)
expr_stmt|;
name|val
operator|>>=
literal|8
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|index
argument_list|,
operator|(
name|byte
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
name|index
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
return|;
block|}
comment|/**    * Put a long value out to the given ByteBuffer's current position in big-endian format.    * This also advances the position in buffer by long size.    * @param buffer the ByteBuffer to write to    * @param val long to write out    */
specifier|public
specifier|static
name|void
name|putLong
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
name|int
name|newPos
init|=
name|UnsafeAccess
operator|.
name|putLong
argument_list|(
name|buffer
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|newPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|putLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|putLong
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|index
parameter_list|,
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|UNSAFE_UNALIGNED
condition|)
block|{
return|return
name|UnsafeAccess
operator|.
name|putLong
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
name|val
argument_list|)
return|;
block|}
name|buffer
operator|.
name|putLong
argument_list|(
name|index
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|index
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
return|;
block|}
comment|/**    * Copies the bytes from given array's offset to length part into the given buffer. Puts the bytes    * to buffer's current position. This also advances the position in the 'out' buffer by 'length'    * @param out    * @param in    * @param inOffset    * @param length    */
specifier|public
specifier|static
name|void
name|copyFromArrayToBuffer
parameter_list|(
name|ByteBuffer
name|out
parameter_list|,
name|byte
index|[]
name|in
parameter_list|,
name|int
name|inOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|out
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|in
argument_list|,
name|inOffset
argument_list|,
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// Move the position in out by length
name|out
operator|.
name|position
argument_list|(
name|out
operator|.
name|position
argument_list|()
operator|+
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UNSAFE_AVAIL
condition|)
block|{
name|UnsafeAccess
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|inOffset
argument_list|,
name|out
argument_list|,
name|out
operator|.
name|position
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// Move the position in out by length
name|out
operator|.
name|position
argument_list|(
name|out
operator|.
name|position
argument_list|()
operator|+
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|put
argument_list|(
name|in
argument_list|,
name|inOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copies bytes from given array's offset to length part into the given buffer. Puts the bytes    * to buffer's given position. This doesn't affact the position of buffer.    * @param out    * @param in    * @param inOffset    * @param length    */
specifier|public
specifier|static
name|void
name|copyFromArrayToBuffer
parameter_list|(
name|ByteBuffer
name|out
parameter_list|,
name|int
name|outOffset
parameter_list|,
name|byte
index|[]
name|in
parameter_list|,
name|int
name|inOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|out
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|in
argument_list|,
name|inOffset
argument_list|,
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|outOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UNSAFE_AVAIL
condition|)
block|{
name|UnsafeAccess
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|inOffset
argument_list|,
name|out
argument_list|,
name|outOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBuffer
name|outDup
init|=
name|out
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|outDup
operator|.
name|position
argument_list|(
name|outOffset
argument_list|)
expr_stmt|;
name|outDup
operator|.
name|put
argument_list|(
name|in
argument_list|,
name|inOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copies specified number of bytes from given offset of 'in' ByteBuffer to    * the array. This doesn't affact the position of buffer.    * @param out    * @param in    * @param sourceOffset    * @param destinationOffset    * @param length    */
specifier|public
specifier|static
name|void
name|copyFromBufferToArray
parameter_list|(
name|byte
index|[]
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|int
name|sourceOffset
parameter_list|,
name|int
name|destinationOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|in
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|sourceOffset
operator|+
name|in
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|out
argument_list|,
name|destinationOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UNSAFE_AVAIL
condition|)
block|{
name|UnsafeAccess
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|sourceOffset
argument_list|,
name|out
argument_list|,
name|destinationOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBuffer
name|inDup
init|=
name|in
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|inDup
operator|.
name|position
argument_list|(
name|sourceOffset
argument_list|)
expr_stmt|;
name|inDup
operator|.
name|get
argument_list|(
name|out
argument_list|,
name|destinationOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Similar to  {@link Arrays#copyOfRange(byte[], int, int)}    * @param original the buffer from which the copy has to happen    * @param from the starting index    * @param to the ending index    * @return a byte[] created out of the copy    */
specifier|public
specifier|static
name|byte
index|[]
name|copyOfRange
parameter_list|(
name|ByteBuffer
name|original
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|int
name|newLength
init|=
name|to
operator|-
name|from
decl_stmt|;
if|if
condition|(
name|newLength
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|from
operator|+
literal|"> "
operator|+
name|to
argument_list|)
throw|;
name|byte
index|[]
name|copy
init|=
operator|new
name|byte
index|[
name|newLength
index|]
decl_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|copy
argument_list|,
name|original
argument_list|,
name|from
argument_list|,
literal|0
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
comment|// For testing purpose
specifier|public
specifier|static
name|String
name|toStringBinary
parameter_list|(
specifier|final
name|ByteBuffer
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Just in case we are passed a 'len' that is> buffer length...
if|if
condition|(
name|off
operator|>=
name|b
operator|.
name|capacity
argument_list|()
condition|)
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
if|if
condition|(
name|off
operator|+
name|len
operator|>
name|b
operator|.
name|capacity
argument_list|()
condition|)
name|len
operator|=
name|b
operator|.
name|capacity
argument_list|()
operator|-
name|off
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
name|off
operator|+
name|len
condition|;
operator|++
name|i
control|)
block|{
name|int
name|ch
init|=
name|b
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|ch
operator|>=
literal|'A'
operator|&&
name|ch
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|ch
operator|>=
literal|'a'
operator|&&
name|ch
operator|<=
literal|'z'
operator|)
operator|||
literal|" `~!@#$%^&*()-_=+[]{}|;:'\",.<>/?"
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\x%02X"
argument_list|,
name|ch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toStringBinary
parameter_list|(
specifier|final
name|ByteBuffer
name|b
parameter_list|)
block|{
return|return
name|toStringBinary
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|capacity
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

