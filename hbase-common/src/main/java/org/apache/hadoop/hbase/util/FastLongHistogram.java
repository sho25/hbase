begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * FastLongHistogram is a thread-safe class that estimate distribution of data and computes the  * quantiles.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|FastLongHistogram
block|{
comment|/**    * Default number of bins.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NBINS
init|=
literal|255
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
index|[]
name|DEFAULT_QUANTILES
init|=
operator|new
name|double
index|[]
block|{
literal|0.25
block|,
literal|0.5
block|,
literal|0.75
block|,
literal|0.90
block|,
literal|0.95
block|,
literal|0.98
block|,
literal|0.99
block|,
literal|0.999
block|}
decl_stmt|;
comment|/**    * Bins is a class containing a list of buckets(or bins) for estimation histogram of some data.    */
specifier|private
specifier|static
class|class
name|Bins
block|{
specifier|private
specifier|final
name|LongAdder
index|[]
name|counts
decl_stmt|;
comment|// inclusive
specifier|private
specifier|final
name|long
name|binsMin
decl_stmt|;
comment|// exclusive
specifier|private
specifier|final
name|long
name|binsMax
decl_stmt|;
specifier|private
specifier|final
name|long
name|bins10XMax
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|min
init|=
operator|new
name|AtomicLong
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|max
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LongAdder
name|count
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongAdder
name|total
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
comment|// set to true when any of data has been inserted to the Bins. It is set after the counts are
comment|// updated.
specifier|private
specifier|volatile
name|boolean
name|hasData
init|=
literal|false
decl_stmt|;
comment|/**      * The constructor for creating a Bins without any prior data.      */
specifier|public
name|Bins
parameter_list|(
name|int
name|numBins
parameter_list|)
block|{
name|counts
operator|=
name|createCounters
argument_list|(
name|numBins
argument_list|)
expr_stmt|;
name|this
operator|.
name|binsMin
operator|=
literal|1L
expr_stmt|;
comment|// These two numbers are total guesses
comment|// and should be treated as highly suspect.
name|this
operator|.
name|binsMax
operator|=
literal|1000
expr_stmt|;
name|this
operator|.
name|bins10XMax
operator|=
name|binsMax
operator|*
literal|10
expr_stmt|;
block|}
comment|/**      * The constructor for creating a Bins with last Bins.      */
specifier|public
name|Bins
parameter_list|(
name|Bins
name|last
parameter_list|,
name|int
name|numBins
parameter_list|,
name|double
name|minQ
parameter_list|,
name|double
name|maxQ
parameter_list|)
block|{
name|long
index|[]
name|values
init|=
name|last
operator|.
name|getQuantiles
argument_list|(
operator|new
name|double
index|[]
block|{
name|minQ
block|,
name|maxQ
block|}
argument_list|)
decl_stmt|;
name|long
name|wd
init|=
name|values
index|[
literal|1
index|]
operator|-
name|values
index|[
literal|0
index|]
operator|+
literal|1
decl_stmt|;
comment|// expand minQ and maxQ in two ends back assuming uniform distribution
name|this
operator|.
name|binsMin
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|values
index|[
literal|0
index|]
operator|-
name|wd
operator|*
name|minQ
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|binsMax
init|=
call|(
name|long
call|)
argument_list|(
name|values
index|[
literal|1
index|]
operator|+
name|wd
operator|*
operator|(
literal|1
operator|-
name|maxQ
operator|)
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// make sure each of bins is at least of width 1
name|this
operator|.
name|binsMax
operator|=
name|Math
operator|.
name|max
argument_list|(
name|binsMax
argument_list|,
name|this
operator|.
name|binsMin
operator|+
name|numBins
argument_list|)
expr_stmt|;
name|this
operator|.
name|bins10XMax
operator|=
name|Math
operator|.
name|max
argument_list|(
call|(
name|long
call|)
argument_list|(
name|values
index|[
literal|1
index|]
operator|+
operator|(
name|binsMax
operator|-
literal|1
operator|)
operator|*
literal|9
argument_list|)
argument_list|,
name|this
operator|.
name|binsMax
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|counts
operator|=
name|createCounters
argument_list|(
name|numBins
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LongAdder
index|[]
name|createCounters
parameter_list|(
name|int
name|numBins
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|generate
argument_list|(
name|LongAdder
operator|::
operator|new
argument_list|)
operator|.
name|limit
argument_list|(
name|numBins
operator|+
literal|3
argument_list|)
operator|.
name|toArray
argument_list|(
name|LongAdder
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
specifier|private
name|int
name|getIndex
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
name|this
operator|.
name|binsMin
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|>
name|this
operator|.
name|bins10XMax
condition|)
block|{
return|return
name|this
operator|.
name|counts
operator|.
name|length
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|>=
name|this
operator|.
name|binsMax
condition|)
block|{
return|return
name|this
operator|.
name|counts
operator|.
name|length
operator|-
literal|2
return|;
block|}
comment|// compute the position
return|return
literal|1
operator|+
call|(
name|int
call|)
argument_list|(
operator|(
name|value
operator|-
name|this
operator|.
name|binsMin
operator|)
operator|*
operator|(
name|this
operator|.
name|counts
operator|.
name|length
operator|-
literal|3
operator|)
operator|/
operator|(
name|this
operator|.
name|binsMax
operator|-
name|this
operator|.
name|binsMin
operator|)
argument_list|)
return|;
block|}
comment|/**      * Adds a value to the histogram.      */
specifier|public
name|void
name|add
parameter_list|(
name|long
name|value
parameter_list|,
name|long
name|count
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
comment|// The whole computation is completely thrown off if there are negative numbers
comment|//
comment|// Normally we would throw an IllegalArgumentException however this is the metrics
comment|// system and it should be completely safe at all times.
comment|// So silently throw it away.
return|return;
block|}
name|AtomicUtils
operator|.
name|updateMin
argument_list|(
name|min
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|AtomicUtils
operator|.
name|updateMax
argument_list|(
name|max
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|total
operator|.
name|add
argument_list|(
name|value
operator|*
name|count
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|getIndex
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|this
operator|.
name|counts
index|[
name|pos
index|]
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// hasData needs to be updated as last
name|this
operator|.
name|hasData
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Computes the quantiles give the ratios.      */
specifier|public
name|long
index|[]
name|getQuantiles
parameter_list|(
name|double
index|[]
name|quantiles
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasData
condition|)
block|{
comment|// No data yet.
return|return
operator|new
name|long
index|[
name|quantiles
operator|.
name|length
index|]
return|;
block|}
comment|// Make a snapshot of lowerCounter, higherCounter and bins.counts to counts.
comment|// This is not synchronized, but since the counter are accumulating, the result is a good
comment|// estimation of a snapshot.
name|long
index|[]
name|counts
init|=
operator|new
name|long
index|[
name|this
operator|.
name|counts
operator|.
name|length
index|]
decl_stmt|;
name|long
name|total
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|counts
index|[
name|i
index|]
operator|=
name|this
operator|.
name|counts
index|[
name|i
index|]
operator|.
name|sum
argument_list|()
expr_stmt|;
name|total
operator|+=
name|counts
index|[
name|i
index|]
expr_stmt|;
block|}
name|int
name|rIndex
init|=
literal|0
decl_stmt|;
name|double
name|qCount
init|=
name|total
operator|*
name|quantiles
index|[
literal|0
index|]
decl_stmt|;
name|long
name|cum
init|=
literal|0L
decl_stmt|;
name|long
index|[]
name|res
init|=
operator|new
name|long
index|[
name|quantiles
operator|.
name|length
index|]
decl_stmt|;
name|countsLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// mn and mx define a value range
name|long
name|mn
decl_stmt|,
name|mx
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|mn
operator|=
name|this
operator|.
name|min
operator|.
name|get
argument_list|()
expr_stmt|;
name|mx
operator|=
name|this
operator|.
name|binsMin
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|counts
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|mn
operator|=
name|this
operator|.
name|bins10XMax
expr_stmt|;
name|mx
operator|=
name|this
operator|.
name|max
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|counts
operator|.
name|length
operator|-
literal|2
condition|)
block|{
name|mn
operator|=
name|this
operator|.
name|binsMax
expr_stmt|;
name|mx
operator|=
name|this
operator|.
name|bins10XMax
expr_stmt|;
block|}
else|else
block|{
name|mn
operator|=
name|this
operator|.
name|binsMin
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
operator|*
operator|(
name|this
operator|.
name|binsMax
operator|-
name|this
operator|.
name|binsMin
operator|)
operator|/
operator|(
name|this
operator|.
name|counts
operator|.
name|length
operator|-
literal|3
operator|)
expr_stmt|;
name|mx
operator|=
name|this
operator|.
name|binsMin
operator|+
name|i
operator|*
operator|(
name|this
operator|.
name|binsMax
operator|-
name|this
operator|.
name|binsMin
operator|)
operator|/
operator|(
name|this
operator|.
name|counts
operator|.
name|length
operator|-
literal|3
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|mx
operator|<
name|this
operator|.
name|min
operator|.
name|get
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|mn
operator|>
name|this
operator|.
name|max
operator|.
name|get
argument_list|()
condition|)
block|{
break|break;
block|}
name|mn
operator|=
name|Math
operator|.
name|max
argument_list|(
name|mn
argument_list|,
name|this
operator|.
name|min
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|mx
operator|=
name|Math
operator|.
name|min
argument_list|(
name|mx
argument_list|,
name|this
operator|.
name|max
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// lastCum/cum are the corresponding counts to mn/mx
name|double
name|lastCum
init|=
name|cum
decl_stmt|;
name|cum
operator|+=
name|counts
index|[
name|i
index|]
expr_stmt|;
comment|// fill the results for qCount is within current range.
while|while
condition|(
name|qCount
operator|<=
name|cum
condition|)
block|{
if|if
condition|(
name|cum
operator|==
name|lastCum
condition|)
block|{
name|res
index|[
name|rIndex
index|]
operator|=
name|mn
expr_stmt|;
block|}
else|else
block|{
name|res
index|[
name|rIndex
index|]
operator|=
call|(
name|long
call|)
argument_list|(
operator|(
name|qCount
operator|-
name|lastCum
operator|)
operator|*
operator|(
name|mx
operator|-
name|mn
operator|)
operator|/
operator|(
name|cum
operator|-
name|lastCum
operator|)
operator|+
name|mn
argument_list|)
expr_stmt|;
block|}
comment|// move to next quantile
name|rIndex
operator|++
expr_stmt|;
if|if
condition|(
name|rIndex
operator|>=
name|quantiles
operator|.
name|length
condition|)
block|{
break|break
name|countsLoop
break|;
block|}
name|qCount
operator|=
name|total
operator|*
name|quantiles
index|[
name|rIndex
index|]
expr_stmt|;
block|}
block|}
comment|// In case quantiles contains values>= 100%
for|for
control|(
init|;
name|rIndex
operator|<
name|quantiles
operator|.
name|length
condition|;
name|rIndex
operator|++
control|)
block|{
name|res
index|[
name|rIndex
index|]
operator|=
name|this
operator|.
name|max
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
name|long
name|getNumAtOrBelow
parameter_list|(
name|long
name|val
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|counts
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|c
lambda|->
name|c
operator|.
name|sum
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|getIndex
argument_list|(
name|val
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
block|}
comment|// The bins counting values. It is replaced with a new one in calling of reset().
specifier|private
specifier|volatile
name|Bins
name|bins
decl_stmt|;
comment|/**    * Constructor.    */
specifier|public
name|FastLongHistogram
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_NBINS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param numOfBins the number of bins for the histogram. A larger value results in more precise    *          results but with lower efficiency, and vice versus.    */
specifier|public
name|FastLongHistogram
parameter_list|(
name|int
name|numOfBins
parameter_list|)
block|{
name|this
operator|.
name|bins
operator|=
operator|new
name|Bins
argument_list|(
name|numOfBins
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor setting the bins assuming a uniform distribution within a range.    * @param numOfBins the number of bins for the histogram. A larger value results in more precise    *          results but with lower efficiency, and vice versus.    * @param min lower bound of the region, inclusive.    * @param max higher bound of the region, inclusive.    */
specifier|public
name|FastLongHistogram
parameter_list|(
name|int
name|numOfBins
parameter_list|,
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|this
argument_list|(
name|numOfBins
argument_list|)
expr_stmt|;
name|Bins
name|bins
init|=
operator|new
name|Bins
argument_list|(
name|numOfBins
argument_list|)
decl_stmt|;
name|bins
operator|.
name|add
argument_list|(
name|min
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bins
operator|.
name|add
argument_list|(
name|max
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|bins
operator|=
operator|new
name|Bins
argument_list|(
name|bins
argument_list|,
name|numOfBins
argument_list|,
literal|0.01
argument_list|,
literal|0.999
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FastLongHistogram
parameter_list|(
name|Bins
name|bins
parameter_list|)
block|{
name|this
operator|.
name|bins
operator|=
name|bins
expr_stmt|;
block|}
comment|/**    * Adds a value to the histogram.    */
specifier|public
name|void
name|add
parameter_list|(
name|long
name|value
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|this
operator|.
name|bins
operator|.
name|add
argument_list|(
name|value
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Computes the quantiles give the ratios.    */
specifier|public
name|long
index|[]
name|getQuantiles
parameter_list|(
name|double
index|[]
name|quantiles
parameter_list|)
block|{
return|return
name|this
operator|.
name|bins
operator|.
name|getQuantiles
argument_list|(
name|quantiles
argument_list|)
return|;
block|}
specifier|public
name|long
index|[]
name|getQuantiles
parameter_list|()
block|{
return|return
name|this
operator|.
name|bins
operator|.
name|getQuantiles
argument_list|(
name|DEFAULT_QUANTILES
argument_list|)
return|;
block|}
specifier|public
name|long
name|getMin
parameter_list|()
block|{
name|long
name|min
init|=
name|this
operator|.
name|bins
operator|.
name|min
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|min
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|?
literal|0
else|:
name|min
return|;
comment|// in case it is not initialized
block|}
specifier|public
name|long
name|getMax
parameter_list|()
block|{
return|return
name|this
operator|.
name|bins
operator|.
name|max
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|bins
operator|.
name|count
operator|.
name|sum
argument_list|()
return|;
block|}
specifier|public
name|long
name|getMean
parameter_list|()
block|{
name|Bins
name|bins
init|=
name|this
operator|.
name|bins
decl_stmt|;
name|long
name|count
init|=
name|bins
operator|.
name|count
operator|.
name|sum
argument_list|()
decl_stmt|;
name|long
name|total
init|=
name|bins
operator|.
name|total
operator|.
name|sum
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|total
operator|/
name|count
return|;
block|}
specifier|public
name|long
name|getNumAtOrBelow
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
name|this
operator|.
name|bins
operator|.
name|getNumAtOrBelow
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Resets the histogram for new counting.    */
specifier|public
name|FastLongHistogram
name|reset
parameter_list|()
block|{
name|Bins
name|oldBins
init|=
name|this
operator|.
name|bins
decl_stmt|;
name|this
operator|.
name|bins
operator|=
operator|new
name|Bins
argument_list|(
name|this
operator|.
name|bins
argument_list|,
name|this
operator|.
name|bins
operator|.
name|counts
operator|.
name|length
operator|-
literal|3
argument_list|,
literal|0.01
argument_list|,
literal|0.99
argument_list|)
expr_stmt|;
return|return
operator|new
name|FastLongHistogram
argument_list|(
name|oldBins
argument_list|)
return|;
block|}
block|}
end_class

end_unit

