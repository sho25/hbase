begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A utility class to manage a set of locks. Each lock is identified by a String which serves  * as a key. Typical usage is:<pre>  * class Example {  *   private final static KeyLocker&lt;String&gt; locker = new Locker&lt;String&gt;();  *   public void foo(String s){  *     Lock lock = locker.acquireLock(s);  *     try {  *       // whatever  *     }finally{  *       lock.unlock();  *     }  *   }  * }  *</pre>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|KeyLocker
parameter_list|<
name|K
parameter_list|>
block|{
comment|// The number of lock we want to easily support. It's not a maximum.
specifier|private
specifier|static
specifier|final
name|int
name|NB_CONCURRENT_LOCKS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|WeakObjectPool
argument_list|<
name|K
argument_list|,
name|ReentrantLock
argument_list|>
name|lockPool
init|=
operator|new
name|WeakObjectPool
argument_list|<>
argument_list|(
operator|new
name|ObjectPool
operator|.
name|ObjectFactory
argument_list|<
name|K
argument_list|,
name|ReentrantLock
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReentrantLock
name|createObject
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
operator|new
name|ReentrantLock
argument_list|()
return|;
block|}
block|}
argument_list|,
name|NB_CONCURRENT_LOCKS
argument_list|)
decl_stmt|;
comment|/**    * Return a lock for the given key. The lock is already locked.    *    * @param key    */
specifier|public
name|ReentrantLock
name|acquireLock
parameter_list|(
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"key must not be null"
argument_list|)
throw|;
name|lockPool
operator|.
name|purge
argument_list|()
expr_stmt|;
name|ReentrantLock
name|lock
init|=
name|lockPool
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|lock
return|;
block|}
comment|/**    * Acquire locks for a set of keys. The keys will be    * sorted internally to avoid possible deadlock.    *    * @throws ClassCastException if the given {@code keys}    *    contains elements that are not mutually comparable    */
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|Lock
argument_list|>
name|acquireLocks
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|keys
parameter_list|)
block|{
name|Object
index|[]
name|keyArray
init|=
name|keys
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keyArray
argument_list|)
expr_stmt|;
name|lockPool
operator|.
name|purge
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|Lock
argument_list|>
name|locks
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|keyArray
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|keyArray
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|K
name|key
init|=
operator|(
name|K
operator|)
name|o
decl_stmt|;
name|ReentrantLock
name|lock
init|=
name|lockPool
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Lock
name|lock
range|:
name|locks
operator|.
name|values
argument_list|()
control|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
return|return
name|locks
return|;
block|}
block|}
end_class

end_unit

