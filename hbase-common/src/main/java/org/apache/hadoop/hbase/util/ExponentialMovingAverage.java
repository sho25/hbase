begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * EMA is similar to {@link WeightedMovingAverage} in weighted, but the weighting factor decrease  * exponentially. It brings benefits that it is more sensitive, and can see the trends easily.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ExponentialMovingAverage
extends|extends
name|WindowMovingAverage
block|{
specifier|private
name|double
name|alpha
decl_stmt|;
specifier|private
name|double
name|previousAverage
decl_stmt|;
specifier|private
name|double
name|currentAverage
decl_stmt|;
specifier|public
name|ExponentialMovingAverage
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|this
argument_list|(
name|label
argument_list|,
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExponentialMovingAverage
parameter_list|(
name|String
name|label
parameter_list|,
name|double
name|alpha
parameter_list|)
block|{
name|this
argument_list|(
name|label
argument_list|,
name|DEFAULT_SIZE
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExponentialMovingAverage
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
argument_list|(
name|label
argument_list|,
name|size
argument_list|,
operator|(
name|double
operator|)
literal|2
operator|/
operator|(
literal|1
operator|+
name|size
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExponentialMovingAverage
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|size
parameter_list|,
name|double
name|alpha
parameter_list|)
block|{
name|super
argument_list|(
name|label
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|previousAverage
operator|=
operator|-
literal|1.0
expr_stmt|;
name|this
operator|.
name|currentAverage
operator|=
literal|0.0
expr_stmt|;
name|this
operator|.
name|alpha
operator|=
name|alpha
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMostRecentTime
parameter_list|(
name|long
name|elapsed
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enoughStatistics
argument_list|()
condition|)
block|{
name|previousAverage
operator|=
name|super
operator|.
name|getAverageTime
argument_list|()
expr_stmt|;
name|super
operator|.
name|updateMostRecentTime
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enoughStatistics
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
comment|// CurrentEMA = α * currentValue + (1 - α) * previousEMA =>
comment|// CurrentEMA = (currentValue - previousEMA) * α + previousEMA
comment|// This will reduce multiplication.
name|currentAverage
operator|=
operator|(
name|elapsed
operator|-
name|previousAverage
operator|)
operator|*
name|alpha
operator|+
name|previousAverage
expr_stmt|;
name|previousAverage
operator|=
name|currentAverage
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getAverageTime
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enoughStatistics
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|getAverageTime
argument_list|()
return|;
block|}
return|return
name|currentAverage
return|;
block|}
name|double
name|getPrevious
parameter_list|()
block|{
return|return
name|previousAverage
return|;
block|}
block|}
end_class

end_unit

