begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|HTraceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HBaseHTraceConfiguration
extends|extends
name|HTraceConfiguration
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseHTraceConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PREFIX
init|=
literal|"hbase.htrace."
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|void
name|handleDeprecation
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|oldKey
init|=
literal|"hbase."
operator|+
name|key
decl_stmt|;
name|String
name|newKey
init|=
name|KEY_PREFIX
operator|+
name|key
decl_stmt|;
name|String
name|oldValue
init|=
name|conf
operator|.
name|get
argument_list|(
name|oldKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning: using deprecated configuration key "
operator|+
name|oldKey
operator|+
literal|".  Please use "
operator|+
name|newKey
operator|+
literal|" instead."
argument_list|)
expr_stmt|;
name|String
name|newValue
init|=
name|conf
operator|.
name|get
argument_list|(
name|newKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValue
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|newKey
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Conflicting values for "
operator|+
name|newKey
operator|+
literal|" and "
operator|+
name|oldKey
operator|+
literal|".  Using "
operator|+
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|HBaseHTraceConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"local-file-span-receiver.path"
argument_list|)
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"local-file-span-receiver.capacity"
argument_list|)
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"sampler.frequency"
argument_list|)
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"sampler.fraction"
argument_list|)
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"zipkin.collector-hostname"
argument_list|)
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"zipkin.collector-port"
argument_list|)
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"zipkin.num-threads"
argument_list|)
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"zipkin.traced-service-hostname"
argument_list|)
expr_stmt|;
name|handleDeprecation
argument_list|(
literal|"zipkin.traced-service-port"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|KEY_PREFIX
operator|+
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|KEY_PREFIX
operator|+
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|KEY_PREFIX
operator|+
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
block|}
end_class

end_unit

