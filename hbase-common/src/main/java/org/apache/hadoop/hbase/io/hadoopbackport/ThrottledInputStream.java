begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hadoopbackport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PositionedReadable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * The ThrottleInputStream provides bandwidth throttling on a specified  * InputStream. It is implemented as a wrapper on top of another InputStream  * instance.  * The throttling works by examining the number of bytes read from the underlying  * InputStream from the beginning, and sleep()ing for a time interval if  * the byte-transfer is found exceed the specified tolerable maximum.  * (Thus, while the read-rate might exceed the maximum for a given short interval,  * the average tends towards the specified maximum, overall.)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ThrottledInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|InputStream
name|rawStream
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxBytesPerSec
decl_stmt|;
specifier|private
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|totalSleepTime
init|=
literal|0
decl_stmt|;
specifier|public
name|ThrottledInputStream
parameter_list|(
name|InputStream
name|rawStream
parameter_list|)
block|{
name|this
argument_list|(
name|rawStream
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ThrottledInputStream
parameter_list|(
name|InputStream
name|rawStream
parameter_list|,
name|long
name|maxBytesPerSec
parameter_list|)
block|{
assert|assert
name|maxBytesPerSec
operator|>
literal|0
operator|:
literal|"Bandwidth "
operator|+
name|maxBytesPerSec
operator|+
literal|" is invalid"
assert|;
name|this
operator|.
name|rawStream
operator|=
name|rawStream
expr_stmt|;
name|this
operator|.
name|maxBytesPerSec
operator|=
name|maxBytesPerSec
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|rawStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|throttle
argument_list|()
expr_stmt|;
name|int
name|data
init|=
name|rawStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
operator|-
literal|1
condition|)
block|{
name|bytesRead
operator|++
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|throttle
argument_list|()
expr_stmt|;
name|int
name|readLen
init|=
name|rawStream
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|readLen
operator|!=
operator|-
literal|1
condition|)
block|{
name|bytesRead
operator|+=
name|readLen
expr_stmt|;
block|}
return|return
name|readLen
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|throttle
argument_list|()
expr_stmt|;
name|int
name|readLen
init|=
name|rawStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|readLen
operator|!=
operator|-
literal|1
condition|)
block|{
name|bytesRead
operator|+=
name|readLen
expr_stmt|;
block|}
return|return
name|readLen
return|;
block|}
comment|/**    * Read bytes starting from the specified position. This requires rawStream is    * an instance of {@link PositionedReadable}.    * @param position    * @param buffer    * @param offset    * @param length    * @return the number of bytes read    */
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|rawStream
operator|instanceof
name|PositionedReadable
operator|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"positioned read is not supported by the internal stream"
argument_list|)
throw|;
block|}
name|throttle
argument_list|()
expr_stmt|;
name|int
name|readLen
init|=
operator|(
operator|(
name|PositionedReadable
operator|)
name|rawStream
operator|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|readLen
operator|!=
operator|-
literal|1
condition|)
block|{
name|bytesRead
operator|+=
name|readLen
expr_stmt|;
block|}
return|return
name|readLen
return|;
block|}
specifier|private
name|long
name|calSleepTimeMs
parameter_list|()
block|{
return|return
name|calSleepTimeMs
argument_list|(
name|bytesRead
argument_list|,
name|maxBytesPerSec
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|long
name|calSleepTimeMs
parameter_list|(
name|long
name|bytesRead
parameter_list|,
name|long
name|maxBytesPerSec
parameter_list|,
name|long
name|elapsed
parameter_list|)
block|{
assert|assert
name|elapsed
operator|>
literal|0
operator|:
literal|"The elapsed time should be greater than zero"
assert|;
if|if
condition|(
name|bytesRead
operator|<=
literal|0
operator|||
name|maxBytesPerSec
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// We use this class to load the single source file, so the bytesRead
comment|// and maxBytesPerSec aren't greater than Double.MAX_VALUE.
comment|// We can get the precise sleep time by using the double value.
name|long
name|rval
init|=
call|(
name|long
call|)
argument_list|(
operator|(
operator|(
operator|(
name|double
operator|)
name|bytesRead
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|maxBytesPerSec
operator|)
operator|)
operator|*
literal|1000
operator|-
name|elapsed
argument_list|)
decl_stmt|;
if|if
condition|(
name|rval
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|rval
return|;
block|}
block|}
specifier|private
name|void
name|throttle
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
name|long
name|sleepTime
init|=
name|calSleepTimeMs
argument_list|()
decl_stmt|;
name|totalSleepTime
operator|+=
name|sleepTime
expr_stmt|;
try|try
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Thread aborted"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Getter for the number of bytes read from this stream, since creation.    * @return The number of bytes.    */
specifier|public
name|long
name|getTotalBytesRead
parameter_list|()
block|{
return|return
name|bytesRead
return|;
block|}
comment|/**    * Getter for the read-rate from this stream, since creation.    * Calculated as bytesRead/elapsedTimeSinceStart.    * @return Read rate, in bytes/sec.    */
specifier|public
name|long
name|getBytesPerSec
parameter_list|()
block|{
name|long
name|elapsed
init|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
decl_stmt|;
if|if
condition|(
name|elapsed
operator|==
literal|0
condition|)
block|{
return|return
name|bytesRead
return|;
block|}
else|else
block|{
return|return
name|bytesRead
operator|/
name|elapsed
return|;
block|}
block|}
comment|/**    * Getter the total time spent in sleep.    * @return Number of milliseconds spent in sleep.    */
specifier|public
name|long
name|getTotalSleepTime
parameter_list|()
block|{
return|return
name|totalSleepTime
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ThrottledInputStream{"
operator|+
literal|"bytesRead="
operator|+
name|bytesRead
operator|+
literal|", maxBytesPerSec="
operator|+
name|maxBytesPerSec
operator|+
literal|", bytesPerSec="
operator|+
name|getBytesPerSec
argument_list|()
operator|+
literal|", totalSleepTime="
operator|+
name|totalSleepTime
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

