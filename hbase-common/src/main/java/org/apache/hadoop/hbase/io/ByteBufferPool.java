begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Like Hadoops' ByteBufferPool only you do not specify desired size when getting a ByteBuffer. This  * pool keeps an upper bound on the count of ByteBuffers in the pool and a fixed size of ByteBuffer  * that it will create. When requested, if a free ByteBuffer is already present, it will return  * that. And when no free ByteBuffer available and we are below the max count, it will create a new  * one and return that.  *  *<p>  * Note: This pool returns off heap ByteBuffers by default. If on heap ByteBuffers to be pooled,  * pass 'directByteBuffer' as false while construction of the pool.  *<p>  * This class is thread safe.  *  * @see ByteBufferListOutputStream  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ByteBufferPool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ByteBufferPool
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO better config names?
comment|// hbase.ipc.server.reservoir.initial.max -> hbase.ipc.server.reservoir.max.buffer.count
comment|// hbase.ipc.server.reservoir.initial.buffer.size -> hbase.ipc.server.reservoir.buffer.size
specifier|public
specifier|static
specifier|final
name|String
name|MAX_POOL_SIZE_KEY
init|=
literal|"hbase.ipc.server.reservoir.initial.max"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BUFFER_SIZE_KEY
init|=
literal|"hbase.ipc.server.reservoir.initial.buffer.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
comment|// 64 KB. Making it same as the chunk size
comment|// what we will write/read to/from the
comment|// socket channel.
specifier|private
specifier|final
name|Queue
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxPoolSize
decl_stmt|;
specifier|private
name|AtomicInteger
name|count
decl_stmt|;
comment|// Count of the BBs created already for this pool.
specifier|private
specifier|final
name|boolean
name|directByteBuffer
decl_stmt|;
comment|//Whether this pool should return DirectByteBuffers
specifier|private
name|boolean
name|maxPoolSizeInfoLevelLogged
init|=
literal|false
decl_stmt|;
comment|/**    * @param bufferSize Size of each buffer created by this pool.    * @param maxPoolSize Max number of buffers to keep in this pool.    */
specifier|public
name|ByteBufferPool
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|int
name|maxPoolSize
parameter_list|)
block|{
name|this
argument_list|(
name|bufferSize
argument_list|,
name|maxPoolSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param bufferSize Size of each buffer created by this pool.    * @param maxPoolSize Max number of buffers to keep in this pool.    * @param directByteBuffer Whether to create direct ByteBuffer or on heap ByteBuffer.    */
specifier|public
name|ByteBufferPool
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|int
name|maxPoolSize
parameter_list|,
name|boolean
name|directByteBuffer
parameter_list|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|maxPoolSize
operator|=
name|maxPoolSize
expr_stmt|;
name|this
operator|.
name|directByteBuffer
operator|=
name|directByteBuffer
expr_stmt|;
comment|// TODO can add initialPoolSize config also and make those many BBs ready for use.
name|LOG
operator|.
name|info
argument_list|(
literal|"Created ByteBufferPool with bufferSize : "
operator|+
name|bufferSize
operator|+
literal|" and maxPoolSize : "
operator|+
name|maxPoolSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return One free ByteBuffer from the pool. If no free ByteBuffer and we have not reached the    *         maximum pool size, it will create a new one and return. In case of max pool size also    *         reached, will return null. When pool returned a ByteBuffer, make sure to return it back    *         to pool after use.    * @see #putbackBuffer(ByteBuffer)    */
specifier|public
name|ByteBuffer
name|getBuffer
parameter_list|()
block|{
name|ByteBuffer
name|bb
init|=
name|buffers
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|bb
operator|!=
literal|null
condition|)
block|{
comment|// Clear sets limit == capacity. Position == 0.
name|bb
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|bb
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|c
init|=
name|this
operator|.
name|count
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|>=
name|this
operator|.
name|maxPoolSize
condition|)
block|{
if|if
condition|(
name|maxPoolSizeInfoLevelLogged
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pool already reached its max capacity : "
operator|+
name|this
operator|.
name|maxPoolSize
operator|+
literal|" and no free buffers now. Consider increasing the value for '"
operator|+
name|MAX_POOL_SIZE_KEY
operator|+
literal|"' ?"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Pool already reached its max capacity : "
operator|+
name|this
operator|.
name|maxPoolSize
operator|+
literal|" and no free buffers now. Consider increasing the value for '"
operator|+
name|MAX_POOL_SIZE_KEY
operator|+
literal|"' ?"
argument_list|)
expr_stmt|;
name|maxPoolSizeInfoLevelLogged
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|count
operator|.
name|compareAndSet
argument_list|(
name|c
argument_list|,
name|c
operator|+
literal|1
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating a new offheap ByteBuffer of size: "
operator|+
name|this
operator|.
name|bufferSize
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|directByteBuffer
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|this
operator|.
name|bufferSize
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|this
operator|.
name|bufferSize
argument_list|)
return|;
block|}
block|}
comment|/**    * Return back a ByteBuffer after its use. Do not try to return put back a ByteBuffer, not    * obtained from this pool.    * @param buf ByteBuffer to return.    */
specifier|public
name|void
name|putbackBuffer
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|.
name|capacity
argument_list|()
operator|!=
name|this
operator|.
name|bufferSize
operator|||
operator|(
name|this
operator|.
name|directByteBuffer
operator|^
name|buf
operator|.
name|isDirect
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to put a buffer, not created by this pool! Will be just ignored"
argument_list|)
expr_stmt|;
return|return;
block|}
name|buffers
operator|.
name|offer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|bufferSize
return|;
block|}
comment|/**    * @return Number of free buffers    */
annotation|@
name|VisibleForTesting
specifier|public
name|int
name|getQueueSize
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

