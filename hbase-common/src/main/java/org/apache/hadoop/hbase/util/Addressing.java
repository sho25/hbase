begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet4Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_comment
comment|/**  * Utility for network addresses, resolving and naming.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Addressing
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VALID_PORT_REGEX
init|=
literal|"[\\d]+"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HOSTNAME_PORT_SEPARATOR
init|=
literal|":"
decl_stmt|;
comment|/**    * HostAndPort Comparator.    * Does compare on HostAndPort instances. This comparator says that instances that have same    * host and port are the same. This is a little different than HostAndPort#equals. It does    * NOT consider two ipv6 HostAndPort instances the same if they have the same hostname    * and port and they differ only in the fact that one provided brackets around the ipv6    * hostname while the other did not: i.e. HostAndPort does NOT equate    * {@code HostAndPort.fromParts("[2001:db8::1]", 888);} and    * {@code HostAndPort.fromParts("2001:db8::1", 888);}.    */
specifier|public
specifier|static
class|class
name|HostAndPortComparable
implements|implements
name|Comparator
argument_list|<
name|HostAndPort
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HostAndPort
name|left
parameter_list|,
name|HostAndPort
name|right
parameter_list|)
block|{
name|int
name|compare
init|=
name|left
operator|.
name|getHostText
argument_list|()
operator|.
name|compareTo
argument_list|(
name|right
operator|.
name|getHostText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
return|return
name|compare
return|;
return|return
name|left
operator|.
name|getPort
argument_list|()
operator|-
name|right
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
comment|/**    * @param hostAndPort Formatted as<code>&lt;hostname&gt; ':'&lt;port&gt;</code>    * @return An InetSocketInstance    */
specifier|public
specifier|static
name|InetSocketAddress
name|createInetSocketAddressFromHostAndPortStr
parameter_list|(
specifier|final
name|String
name|hostAndPort
parameter_list|)
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|parseHostname
argument_list|(
name|hostAndPort
argument_list|)
argument_list|,
name|parsePort
argument_list|(
name|hostAndPort
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param hostname Server hostname    * @param port Server port    * @return Returns a concatenation of<code>hostname</code> and    *<code>port</code> in following    * form:<code>&lt;hostname&gt; ':'&lt;port&gt;</code>.  For example, if hostname    * is<code>example.org</code> and port is 1234, this method will return    *<code>example.org:1234</code>    */
specifier|public
specifier|static
name|String
name|createHostAndPortStr
parameter_list|(
specifier|final
name|String
name|hostname
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
block|{
return|return
name|hostname
operator|+
name|HOSTNAME_PORT_SEPARATOR
operator|+
name|port
return|;
block|}
comment|/**    * @param hostAndPort Formatted as<code>&lt;hostname&gt; ':'&lt;port&gt;</code>    * @return The hostname portion of<code>hostAndPort</code>    */
specifier|public
specifier|static
name|String
name|parseHostname
parameter_list|(
specifier|final
name|String
name|hostAndPort
parameter_list|)
block|{
name|int
name|colonIndex
init|=
name|hostAndPort
operator|.
name|lastIndexOf
argument_list|(
name|HOSTNAME_PORT_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonIndex
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a host:port pair: "
operator|+
name|hostAndPort
argument_list|)
throw|;
block|}
return|return
name|hostAndPort
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonIndex
argument_list|)
return|;
block|}
comment|/**    * @param hostAndPort Formatted as<code>&lt;hostname&gt; ':'&lt;port&gt;</code>    * @return The port portion of<code>hostAndPort</code>    */
specifier|public
specifier|static
name|int
name|parsePort
parameter_list|(
specifier|final
name|String
name|hostAndPort
parameter_list|)
block|{
name|int
name|colonIndex
init|=
name|hostAndPort
operator|.
name|lastIndexOf
argument_list|(
name|HOSTNAME_PORT_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonIndex
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a host:port pair: "
operator|+
name|hostAndPort
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|hostAndPort
operator|.
name|substring
argument_list|(
name|colonIndex
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InetAddress
name|getIpAddress
parameter_list|()
throws|throws
name|SocketException
block|{
return|return
name|getIpAddress
argument_list|(
operator|new
name|AddressSelectionCondition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isAcceptableAddress
parameter_list|(
name|InetAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|instanceof
name|Inet4Address
operator|||
name|addr
operator|instanceof
name|Inet6Address
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InetAddress
name|getIp4Address
parameter_list|()
throws|throws
name|SocketException
block|{
return|return
name|getIpAddress
argument_list|(
operator|new
name|AddressSelectionCondition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isAcceptableAddress
parameter_list|(
name|InetAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|instanceof
name|Inet4Address
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InetAddress
name|getIp6Address
parameter_list|()
throws|throws
name|SocketException
block|{
return|return
name|getIpAddress
argument_list|(
operator|new
name|AddressSelectionCondition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isAcceptableAddress
parameter_list|(
name|InetAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|instanceof
name|Inet6Address
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|InetAddress
name|getIpAddress
parameter_list|(
name|AddressSelectionCondition
name|condition
parameter_list|)
throws|throws
name|SocketException
block|{
comment|// Before we connect somewhere, we cannot be sure about what we'd be bound to; however,
comment|// we only connect when the message where client ID is, is long constructed. Thus,
comment|// just use whichever IP address we can find.
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|interfaces
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
while|while
condition|(
name|interfaces
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|current
init|=
name|interfaces
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isUp
argument_list|()
operator|||
name|current
operator|.
name|isLoopback
argument_list|()
operator|||
name|current
operator|.
name|isVirtual
argument_list|()
condition|)
continue|continue;
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|addresses
init|=
name|current
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
while|while
condition|(
name|addresses
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|addresses
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|condition
operator|.
name|isAcceptableAddress
argument_list|(
name|addr
argument_list|)
condition|)
block|{
return|return
name|addr
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|SocketException
argument_list|(
literal|"Can't get our ip address, interfaces are: "
operator|+
name|interfaces
argument_list|)
throw|;
block|}
comment|/**    * Given an InetAddress, checks to see if the address is a local address, by comparing the address    * with all the interfaces on the node.    * @param addr address to check if it is local node's address    * @return true if the address corresponds to the local node    */
specifier|public
specifier|static
name|boolean
name|isLocalAddress
parameter_list|(
name|InetAddress
name|addr
parameter_list|)
block|{
comment|// Check if the address is any local or loop back
name|boolean
name|local
init|=
name|addr
operator|.
name|isAnyLocalAddress
argument_list|()
operator|||
name|addr
operator|.
name|isLoopbackAddress
argument_list|()
decl_stmt|;
comment|// Check if the address is defined on any interface
if|if
condition|(
operator|!
name|local
condition|)
block|{
try|try
block|{
name|local
operator|=
name|NetworkInterface
operator|.
name|getByInetAddress
argument_list|(
name|addr
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
name|local
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|local
return|;
block|}
comment|/**    * Interface for AddressSelectionCondition to check if address is acceptable    */
specifier|public
interface|interface
name|AddressSelectionCondition
block|{
comment|/**      * Condition on which to accept inet address      * @param address to check      * @return true to accept this address      */
specifier|public
name|boolean
name|isAcceptableAddress
parameter_list|(
name|InetAddress
name|address
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

