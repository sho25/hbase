begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|LockInfo
block|{
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
enum|enum
name|ResourceType
block|{
name|SERVER
block|,
name|NAMESPACE
block|,
name|TABLE
block|,
name|REGION
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
enum|enum
name|LockType
block|{
name|EXCLUSIVE
block|,
name|SHARED
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|static
class|class
name|WaitingProcedure
block|{
specifier|private
name|LockType
name|lockType
decl_stmt|;
specifier|private
name|ProcedureInfo
name|procedure
decl_stmt|;
specifier|public
name|WaitingProcedure
parameter_list|()
block|{     }
specifier|public
name|LockType
name|getLockType
parameter_list|()
block|{
return|return
name|lockType
return|;
block|}
specifier|public
name|void
name|setLockType
parameter_list|(
name|LockType
name|lockType
parameter_list|)
block|{
name|this
operator|.
name|lockType
operator|=
name|lockType
expr_stmt|;
block|}
specifier|public
name|ProcedureInfo
name|getProcedure
parameter_list|()
block|{
return|return
name|procedure
return|;
block|}
specifier|public
name|void
name|setProcedure
parameter_list|(
name|ProcedureInfo
name|procedure
parameter_list|)
block|{
name|this
operator|.
name|procedure
operator|=
name|procedure
expr_stmt|;
block|}
block|}
specifier|private
name|ResourceType
name|resourceType
decl_stmt|;
specifier|private
name|String
name|resourceName
decl_stmt|;
specifier|private
name|LockType
name|lockType
decl_stmt|;
specifier|private
name|ProcedureInfo
name|exclusiveLockOwnerProcedure
decl_stmt|;
specifier|private
name|int
name|sharedLockCount
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|WaitingProcedure
argument_list|>
name|waitingProcedures
decl_stmt|;
specifier|public
name|LockInfo
parameter_list|()
block|{
name|waitingProcedures
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ResourceType
name|getResourceType
parameter_list|()
block|{
return|return
name|resourceType
return|;
block|}
specifier|public
name|void
name|setResourceType
parameter_list|(
name|ResourceType
name|resourceType
parameter_list|)
block|{
name|this
operator|.
name|resourceType
operator|=
name|resourceType
expr_stmt|;
block|}
specifier|public
name|String
name|getResourceName
parameter_list|()
block|{
return|return
name|resourceName
return|;
block|}
specifier|public
name|void
name|setResourceName
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
name|this
operator|.
name|resourceName
operator|=
name|resourceName
expr_stmt|;
block|}
specifier|public
name|LockType
name|getLockType
parameter_list|()
block|{
return|return
name|lockType
return|;
block|}
specifier|public
name|void
name|setLockType
parameter_list|(
name|LockType
name|lockType
parameter_list|)
block|{
name|this
operator|.
name|lockType
operator|=
name|lockType
expr_stmt|;
block|}
specifier|public
name|ProcedureInfo
name|getExclusiveLockOwnerProcedure
parameter_list|()
block|{
return|return
name|exclusiveLockOwnerProcedure
return|;
block|}
specifier|public
name|void
name|setExclusiveLockOwnerProcedure
parameter_list|(
name|ProcedureInfo
name|exclusiveLockOwnerProcedure
parameter_list|)
block|{
name|this
operator|.
name|exclusiveLockOwnerProcedure
operator|=
name|exclusiveLockOwnerProcedure
expr_stmt|;
block|}
specifier|public
name|int
name|getSharedLockCount
parameter_list|()
block|{
return|return
name|sharedLockCount
return|;
block|}
specifier|public
name|void
name|setSharedLockCount
parameter_list|(
name|int
name|sharedLockCount
parameter_list|)
block|{
name|this
operator|.
name|sharedLockCount
operator|=
name|sharedLockCount
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|WaitingProcedure
argument_list|>
name|getWaitingProcedures
parameter_list|()
block|{
return|return
name|waitingProcedures
return|;
block|}
specifier|public
name|void
name|setWaitingProcedures
parameter_list|(
name|List
argument_list|<
name|WaitingProcedure
argument_list|>
name|waitingProcedures
parameter_list|)
block|{
name|this
operator|.
name|waitingProcedures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|waitingProcedures
operator|.
name|addAll
argument_list|(
name|waitingProcedures
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWaitingProcedure
parameter_list|(
name|WaitingProcedure
name|waitingProcedure
parameter_list|)
block|{
name|waitingProcedures
operator|.
name|add
argument_list|(
name|waitingProcedure
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

