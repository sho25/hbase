begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|HBaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|PrettyPrinter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrettyPrinter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INTERVAL_REGEX
init|=
literal|"((\\d+)\\s*SECONDS?\\s*\\()?\\s*"
operator|+
literal|"((\\d+)\\s*DAYS?)?\\s*((\\d+)\\s*HOURS?)?\\s*"
operator|+
literal|"((\\d+)\\s*MINUTES?)?\\s*((\\d+)\\s*SECONDS?)?\\s*\\)?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|INTERVAL_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|INTERVAL_REGEX
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
specifier|public
enum|enum
name|Unit
block|{
name|TIME_INTERVAL
block|,
name|LONG
block|,
name|BOOLEAN
block|,
name|NONE
block|}
specifier|public
specifier|static
name|String
name|format
parameter_list|(
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|Unit
name|unit
parameter_list|)
block|{
name|StringBuilder
name|human
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|TIME_INTERVAL
case|:
name|human
operator|.
name|append
argument_list|(
name|humanReadableTTL
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|byte
index|[]
name|longBytes
init|=
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|human
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|longBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|byte
index|[]
name|booleanBytes
init|=
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|human
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toBoolean
argument_list|(
name|booleanBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|human
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|human
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert a human readable string to its value.    * @see org.apache.hadoop.hbase.util.PrettyPrinter#format(String, Unit)    * @param pretty    * @param unit    * @return the value corresponding to the human readable string    */
specifier|public
specifier|static
name|String
name|valueOf
parameter_list|(
specifier|final
name|String
name|pretty
parameter_list|,
specifier|final
name|Unit
name|unit
parameter_list|)
throws|throws
name|HBaseException
block|{
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|unit
condition|)
block|{
case|case
name|TIME_INTERVAL
case|:
name|value
operator|.
name|append
argument_list|(
name|humanReadableIntervalToSec
argument_list|(
name|pretty
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|value
operator|.
name|append
argument_list|(
name|pretty
argument_list|)
expr_stmt|;
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"ICAST_INTEGER_MULTIPLY_CAST_TO_LONG"
argument_list|,
name|justification
operator|=
literal|"Will not overflow"
argument_list|)
specifier|private
specifier|static
name|String
name|humanReadableTTL
parameter_list|(
specifier|final
name|long
name|interval
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|days
decl_stmt|,
name|hours
decl_stmt|,
name|minutes
decl_stmt|,
name|seconds
decl_stmt|;
comment|// edge cases first
if|if
condition|(
name|interval
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"FOREVER"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|interval
operator|<
name|HConstants
operator|.
name|MINUTE_IN_SECONDS
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" SECOND"
argument_list|)
operator|.
name|append
argument_list|(
name|interval
operator|==
literal|1
condition|?
literal|""
else|:
literal|"S"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|days
operator|=
call|(
name|int
call|)
argument_list|(
name|interval
operator|/
name|HConstants
operator|.
name|DAY_IN_SECONDS
argument_list|)
expr_stmt|;
name|hours
operator|=
call|(
name|int
call|)
argument_list|(
name|interval
operator|-
name|HConstants
operator|.
name|DAY_IN_SECONDS
operator|*
name|days
argument_list|)
operator|/
name|HConstants
operator|.
name|HOUR_IN_SECONDS
expr_stmt|;
name|minutes
operator|=
call|(
name|int
call|)
argument_list|(
name|interval
operator|-
name|HConstants
operator|.
name|DAY_IN_SECONDS
operator|*
name|days
operator|-
name|HConstants
operator|.
name|HOUR_IN_SECONDS
operator|*
name|hours
argument_list|)
operator|/
name|HConstants
operator|.
name|MINUTE_IN_SECONDS
expr_stmt|;
name|seconds
operator|=
call|(
name|int
call|)
argument_list|(
name|interval
operator|-
name|HConstants
operator|.
name|DAY_IN_SECONDS
operator|*
name|days
operator|-
name|HConstants
operator|.
name|HOUR_IN_SECONDS
operator|*
name|hours
operator|-
name|HConstants
operator|.
name|MINUTE_IN_SECONDS
operator|*
name|minutes
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" SECONDS ("
argument_list|)
expr_stmt|;
if|if
condition|(
name|days
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|days
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" DAY"
argument_list|)
operator|.
name|append
argument_list|(
name|days
operator|==
literal|1
condition|?
literal|""
else|:
literal|"S"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hours
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|days
operator|>
literal|0
condition|?
literal|" "
else|:
literal|""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|hours
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" HOUR"
argument_list|)
operator|.
name|append
argument_list|(
name|hours
operator|==
literal|1
condition|?
literal|""
else|:
literal|"S"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minutes
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|days
operator|+
name|hours
operator|>
literal|0
condition|?
literal|" "
else|:
literal|""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|minutes
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" MINUTE"
argument_list|)
operator|.
name|append
argument_list|(
name|minutes
operator|==
literal|1
condition|?
literal|""
else|:
literal|"S"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|seconds
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|days
operator|+
name|hours
operator|+
name|minutes
operator|>
literal|0
condition|?
literal|" "
else|:
literal|""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|seconds
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" SECOND"
argument_list|)
operator|.
name|append
argument_list|(
name|minutes
operator|==
literal|1
condition|?
literal|""
else|:
literal|"S"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert a human readable time interval to seconds. Examples of the human readable    * time intervals are: 50 DAYS 1 HOUR 30 MINUTES , 25000 SECONDS etc.    * The units of time specified can be in uppercase as well as lowercase. Also, if a    * single number is specified without any time unit, it is assumed to be in seconds.    * @param humanReadableInterval    * @return value in seconds    */
specifier|private
specifier|static
name|long
name|humanReadableIntervalToSec
parameter_list|(
specifier|final
name|String
name|humanReadableInterval
parameter_list|)
throws|throws
name|HBaseException
block|{
if|if
condition|(
name|humanReadableInterval
operator|==
literal|null
operator|||
name|humanReadableInterval
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"FOREVER"
argument_list|)
condition|)
block|{
return|return
name|HConstants
operator|.
name|FOREVER
return|;
block|}
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|humanReadableInterval
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Given interval value is not a number, parsing for human readable format"
argument_list|)
expr_stmt|;
block|}
name|String
name|days
init|=
literal|null
decl_stmt|;
name|String
name|hours
init|=
literal|null
decl_stmt|;
name|String
name|minutes
init|=
literal|null
decl_stmt|;
name|String
name|seconds
init|=
literal|null
decl_stmt|;
name|String
name|expectedTtl
init|=
literal|null
decl_stmt|;
name|long
name|ttl
decl_stmt|;
name|Matcher
name|matcher
init|=
name|PrettyPrinter
operator|.
name|INTERVAL_PATTERN
operator|.
name|matcher
argument_list|(
name|humanReadableInterval
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|expectedTtl
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|days
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|hours
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|minutes
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|seconds
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|ttl
operator|=
literal|0
expr_stmt|;
name|ttl
operator|+=
name|days
operator|!=
literal|null
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|days
argument_list|)
operator|*
name|HConstants
operator|.
name|DAY_IN_SECONDS
else|:
literal|0
expr_stmt|;
name|ttl
operator|+=
name|hours
operator|!=
literal|null
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|hours
argument_list|)
operator|*
name|HConstants
operator|.
name|HOUR_IN_SECONDS
else|:
literal|0
expr_stmt|;
name|ttl
operator|+=
name|minutes
operator|!=
literal|null
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|minutes
argument_list|)
operator|*
name|HConstants
operator|.
name|MINUTE_IN_SECONDS
else|:
literal|0
expr_stmt|;
name|ttl
operator|+=
name|seconds
operator|!=
literal|null
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|seconds
argument_list|)
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|expectedTtl
operator|!=
literal|null
operator|&&
name|Long
operator|.
name|parseLong
argument_list|(
name|expectedTtl
argument_list|)
operator|!=
name|ttl
condition|)
block|{
throw|throw
operator|new
name|HBaseException
argument_list|(
literal|"Malformed TTL string: TTL values in seconds and human readable"
operator|+
literal|"format do not match"
argument_list|)
throw|;
block|}
return|return
name|ttl
return|;
block|}
block|}
end_class

end_unit

