begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|public
class|class
name|ArrayUtils
block|{
specifier|public
specifier|static
name|int
name|length
parameter_list|(
name|byte
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|a
operator|.
name|length
return|;
block|}
specifier|public
specifier|static
name|int
name|length
parameter_list|(
name|long
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|a
operator|.
name|length
return|;
block|}
specifier|public
specifier|static
name|int
name|length
parameter_list|(
name|Object
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|a
operator|.
name|length
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|byte
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|a
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|long
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|a
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|Object
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|a
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|long
name|getFirst
parameter_list|(
name|long
index|[]
name|a
parameter_list|)
block|{
return|return
name|a
index|[
literal|0
index|]
return|;
block|}
specifier|public
specifier|static
name|long
name|getLast
parameter_list|(
name|long
index|[]
name|a
parameter_list|)
block|{
return|return
name|a
index|[
name|a
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
specifier|public
specifier|static
name|int
name|getTotalLengthOfArrays
parameter_list|(
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|arrays
parameter_list|)
block|{
if|if
condition|(
name|arrays
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|bytes
range|:
name|arrays
control|)
block|{
name|length
operator|+=
name|length
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|toList
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
name|int
name|length
init|=
name|length
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|growIfNecessary
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|minLength
parameter_list|,
name|int
name|numAdditionalBytes
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|>=
name|minLength
condition|)
block|{
return|return
name|array
return|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|array
argument_list|,
name|minLength
operator|+
name|numAdditionalBytes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
index|[]
name|growIfNecessary
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|minLength
parameter_list|,
name|int
name|numAdditionalInts
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|>=
name|minLength
condition|)
block|{
return|return
name|array
return|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|array
argument_list|,
name|minLength
operator|+
name|numAdditionalInts
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
index|[]
name|growIfNecessary
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|minLength
parameter_list|,
name|int
name|numAdditionalLongs
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|>=
name|minLength
condition|)
block|{
return|return
name|array
return|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|array
argument_list|,
name|minLength
operator|+
name|numAdditionalLongs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

