begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Utility methods for reading, and building the ZooKeeper configuration.  *  * The order and priority for reading the config are as follows:  * (1). Property with "hbase.zookeeper.property." prefix from HBase XML  * (2). other zookeeper related properties in HBASE XML  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|ZKConfig
block|{
specifier|private
specifier|static
specifier|final
name|String
name|VARIABLE_START
init|=
literal|"${"
decl_stmt|;
specifier|private
name|ZKConfig
parameter_list|()
block|{   }
comment|/**    * Make a Properties object holding ZooKeeper config.    * Parses the corresponding config options from the HBase XML configs    * and generates the appropriate ZooKeeper properties.    * @param conf Configuration to read from.    * @return Properties holding mappings representing ZooKeeper config file.    */
specifier|public
specifier|static
name|Properties
name|makeZKProps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|makeZKPropsFromHbaseConfig
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Make a Properties object holding ZooKeeper config.    * Parses the corresponding config options from the HBase XML configs    * and generates the appropriate ZooKeeper properties.    *    * @param conf Configuration to read from.    * @return Properties holding mappings representing ZooKeeper config file.    */
specifier|private
specifier|static
name|Properties
name|makeZKPropsFromHbaseConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Properties
name|zkProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Directly map all of the hbase.zookeeper.property.KEY properties.
comment|// Synchronize on conf so no loading of configs while we iterate
synchronized|synchronized
init|(
name|conf
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|HConstants
operator|.
name|ZK_CFG_PROPERTY_PREFIX
argument_list|)
condition|)
block|{
name|String
name|zkKey
init|=
name|key
operator|.
name|substring
argument_list|(
name|HConstants
operator|.
name|ZK_CFG_PROPERTY_PREFIX_LEN
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// If the value has variables substitutions, need to do a get.
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
name|VARIABLE_START
argument_list|)
condition|)
block|{
name|value
operator|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|zkProperties
operator|.
name|setProperty
argument_list|(
name|zkKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If clientPort is not set, assign the default.
if|if
condition|(
name|zkProperties
operator|.
name|getProperty
argument_list|(
name|HConstants
operator|.
name|CLIENT_PORT_STR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|zkProperties
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|CLIENT_PORT_STR
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEPER_CLIENT_PORT
argument_list|)
expr_stmt|;
block|}
comment|// Create the server.X properties.
name|int
name|peerPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.peerport"
argument_list|,
literal|2888
argument_list|)
decl_stmt|;
name|int
name|leaderPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.leaderport"
argument_list|,
literal|3888
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|serverHosts
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|HConstants
operator|.
name|LOCALHOST
argument_list|)
decl_stmt|;
name|String
name|serverHost
decl_stmt|;
name|String
name|address
decl_stmt|;
name|String
name|key
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|serverHosts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|serverHosts
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|serverHost
operator|=
name|serverHosts
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|serverHosts
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverHost
operator|=
name|serverHosts
index|[
name|i
index|]
expr_stmt|;
block|}
name|address
operator|=
name|serverHost
operator|+
literal|":"
operator|+
name|peerPort
operator|+
literal|":"
operator|+
name|leaderPort
expr_stmt|;
name|key
operator|=
literal|"server."
operator|+
name|i
expr_stmt|;
name|zkProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
return|return
name|zkProperties
return|;
block|}
comment|/**    * Return the ZK Quorum servers string given the specified configuration    *    * @param conf    * @return Quorum servers String    */
specifier|private
specifier|static
name|String
name|getZKQuorumServersStringFromHbaseConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|defaultClientPort
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEPER_CLIENT_PORT
argument_list|)
argument_list|)
decl_stmt|;
comment|// Build the ZK quorum server string with "server:clientport" list, separated by ','
specifier|final
name|String
index|[]
name|serverHosts
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|HConstants
operator|.
name|LOCALHOST
argument_list|)
decl_stmt|;
return|return
name|buildZKQuorumServerString
argument_list|(
name|serverHosts
argument_list|,
name|defaultClientPort
argument_list|)
return|;
block|}
comment|/**    * Return the ZK Quorum servers string given the specified configuration.    * @return Quorum servers    */
specifier|public
specifier|static
name|String
name|getZKQuorumServersString
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getZKQuorumServersStringFromHbaseConfig
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Build the ZK quorum server string with "server:clientport" list, separated by ','    *    * @param serverHosts a list of servers for ZK quorum    * @param clientPort the default client port    * @return the string for a list of "server:port" separated by ","    */
specifier|public
specifier|static
name|String
name|buildZKQuorumServerString
parameter_list|(
name|String
index|[]
name|serverHosts
parameter_list|,
name|String
name|clientPort
parameter_list|)
block|{
name|StringBuilder
name|quorumStringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|serverHost
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|serverHosts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|serverHosts
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|serverHost
operator|=
name|serverHosts
index|[
name|i
index|]
expr_stmt|;
comment|// just use the port specified from the input
block|}
else|else
block|{
name|serverHost
operator|=
name|serverHosts
index|[
name|i
index|]
operator|+
literal|":"
operator|+
name|clientPort
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|quorumStringBuilder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|quorumStringBuilder
operator|.
name|append
argument_list|(
name|serverHost
argument_list|)
expr_stmt|;
block|}
return|return
name|quorumStringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Verifies that the given key matches the expected format for a ZooKeeper cluster key.    * The Quorum for the ZK cluster can have one the following formats (see examples below):    *    *<ol>    *<li>s1,s2,s3 (no client port in the list, the client port could be obtained from    *       clientPort)</li>    *<li>s1:p1,s2:p2,s3:p3 (with client port, which could be same or different for each server,    *       in this case, the clientPort would be ignored)</li>    *<li>s1:p1,s2,s3:p3 (mix of (1) and (2) - if port is not specified in a server, it would use    *       the clientPort; otherwise, it would use the specified port)</li>    *</ol>    *    * @param key the cluster key to validate    * @throws IOException if the key could not be parsed    */
specifier|public
specifier|static
name|void
name|validateClusterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|transformClusterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Separate the given key into the three configurations it should contain:    * hbase.zookeeper.quorum, hbase.zookeeper.client.port    * and zookeeper.znode.parent    * @param key    * @return the three configuration in the described order    * @throws IOException    */
specifier|public
specifier|static
name|ZKClusterKey
name|transformClusterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|parts
init|=
name|key
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
condition|)
block|{
if|if
condition|(
operator|!
name|parts
index|[
literal|2
index|]
operator|.
name|matches
argument_list|(
literal|"/.*[^/]"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster key passed "
operator|+
name|key
operator|+
literal|" is invalid, the format should be:"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
operator|+
literal|":"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
operator|+
literal|":"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
throw|;
block|}
return|return
operator|new
name|ZKClusterKey
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
return|;
block|}
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|3
condition|)
block|{
comment|// The quorum could contain client port in server:clientport format, try to transform more.
name|String
name|zNodeParent
init|=
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|zNodeParent
operator|.
name|matches
argument_list|(
literal|"/.*[^/]"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster key passed "
operator|+
name|key
operator|+
literal|" is invalid, the format should be:"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
operator|+
literal|":"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
operator|+
literal|":"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
throw|;
block|}
name|String
name|clientPort
init|=
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
comment|// The first part length is the total length minus the lengths of other parts and minus 2 ":"
name|int
name|endQuorumIndex
init|=
name|key
operator|.
name|length
argument_list|()
operator|-
name|zNodeParent
operator|.
name|length
argument_list|()
operator|-
name|clientPort
operator|.
name|length
argument_list|()
operator|-
literal|2
decl_stmt|;
name|String
name|quorumStringInput
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endQuorumIndex
argument_list|)
decl_stmt|;
name|String
index|[]
name|serverHosts
init|=
name|quorumStringInput
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// The common case is that every server has its own client port specified - this means
comment|// that (total parts - the ZNodeParent part - the ClientPort part) is equal to
comment|// (the number of "," + 1) - "+ 1" because the last server has no ",".
if|if
condition|(
operator|(
name|parts
operator|.
name|length
operator|-
literal|2
operator|)
operator|==
operator|(
name|serverHosts
operator|.
name|length
operator|+
literal|1
operator|)
condition|)
block|{
return|return
operator|new
name|ZKClusterKey
argument_list|(
name|quorumStringInput
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|clientPort
argument_list|)
argument_list|,
name|zNodeParent
argument_list|)
return|;
block|}
comment|// For the uncommon case that some servers has no port specified, we need to build the
comment|// server:clientport list using default client port for servers without specified port.
return|return
operator|new
name|ZKClusterKey
argument_list|(
name|buildZKQuorumServerString
argument_list|(
name|serverHosts
argument_list|,
name|clientPort
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|clientPort
argument_list|)
argument_list|,
name|zNodeParent
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster key passed "
operator|+
name|key
operator|+
literal|" is invalid, the format should be:"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
operator|+
literal|":"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
operator|+
literal|":"
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
throw|;
block|}
comment|/**    * Get the key to the ZK ensemble for this configuration without    * adding a name at the end    * @param conf Configuration to use to build the key    * @return ensemble key without a name    */
specifier|public
specifier|static
name|String
name|getZooKeeperClusterKey
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getZooKeeperClusterKey
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get the key to the ZK ensemble for this configuration and append    * a name at the end    * @param conf Configuration to use to build the key    * @param name Name that should be appended at the end if not empty or null    * @return ensemble key with a name (if any)    */
specifier|public
specifier|static
name|String
name|getZooKeeperClusterKey
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|ensemble
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[\\t\\n\\x0B\\f\\r]"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|ensemble
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Standardize the ZK quorum string: make it a "server:clientport" list, separated by ','    * @param quorumStringInput a string contains a list of servers for ZK quorum    * @param clientPort the default client port    * @return the string for a list of "server:port" separated by ","    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|String
name|standardizeZKQuorumServerString
parameter_list|(
name|String
name|quorumStringInput
parameter_list|,
name|String
name|clientPort
parameter_list|)
block|{
name|String
index|[]
name|serverHosts
init|=
name|quorumStringInput
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
return|return
name|buildZKQuorumServerString
argument_list|(
name|serverHosts
argument_list|,
name|clientPort
argument_list|)
return|;
block|}
comment|// The Quorum for the ZK cluster can have one the following format (see examples below):
comment|// (1). s1,s2,s3 (no client port in the list, the client port could be obtained from clientPort)
comment|// (2). s1:p1,s2:p2,s3:p3 (with client port, which could be same or different for each server,
comment|//      in this case, the clientPort would be ignored)
comment|// (3). s1:p1,s2,s3:p3 (mix of (1) and (2) - if port is not specified in a server, it would use
comment|//      the clientPort; otherwise, it would use the specified port)
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
class|class
name|ZKClusterKey
block|{
specifier|private
name|String
name|quorumString
decl_stmt|;
specifier|private
name|int
name|clientPort
decl_stmt|;
specifier|private
name|String
name|znodeParent
decl_stmt|;
name|ZKClusterKey
parameter_list|(
name|String
name|quorumString
parameter_list|,
name|int
name|clientPort
parameter_list|,
name|String
name|znodeParent
parameter_list|)
block|{
name|this
operator|.
name|quorumString
operator|=
name|quorumString
expr_stmt|;
name|this
operator|.
name|clientPort
operator|=
name|clientPort
expr_stmt|;
name|this
operator|.
name|znodeParent
operator|=
name|znodeParent
expr_stmt|;
block|}
specifier|public
name|String
name|getQuorumString
parameter_list|()
block|{
return|return
name|quorumString
return|;
block|}
specifier|public
name|int
name|getClientPort
parameter_list|()
block|{
return|return
name|clientPort
return|;
block|}
specifier|public
name|String
name|getZnodeParent
parameter_list|()
block|{
return|return
name|znodeParent
return|;
block|}
block|}
block|}
end_class

end_unit

