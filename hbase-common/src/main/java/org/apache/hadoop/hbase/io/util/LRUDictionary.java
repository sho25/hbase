begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * WALDictionary using an LRU eviction algorithm. Uses a linked list running  * through a hashtable.  Currently has max of 2^15 entries.  Will start  * evicting if exceeds this number  The maximum memory we expect this dictionary  * to take in the worst case is about:  *<code>(2 ^ 15) * 5 (Regionname, Row key, CF, Column qual, table) * 100 bytes   * (these are some big names) = ~16MB</code>.  * If you want to get silly, even at 1kb entries, it maxes out at 160 megabytes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|LRUDictionary
implements|implements
name|Dictionary
block|{
name|BidirectionalLRUMap
name|backingStore
decl_stmt|;
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEntry
parameter_list|(
name|short
name|idx
parameter_list|)
block|{
return|return
name|backingStore
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|int
name|initialSize
parameter_list|)
block|{
name|backingStore
operator|=
operator|new
name|BidirectionalLRUMap
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|findEntry
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|short
name|ret
init|=
name|backingStore
operator|.
name|findIdx
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|NOT_IN_DICTIONARY
condition|)
block|{
name|addEntry
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|addEntry
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
return|return
name|NOT_IN_DICTIONARY
return|;
return|return
name|backingStore
operator|.
name|put
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|backingStore
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/*    * Internal class used to implement LRU eviction and dual lookup (by key and    * value).    *     * This is not thread safe. Don't use in multi-threaded applications.    */
specifier|static
class|class
name|BidirectionalLRUMap
block|{
specifier|private
name|int
name|currSize
init|=
literal|0
decl_stmt|;
comment|// Head and tail of the LRU list.
specifier|private
name|Node
name|head
decl_stmt|;
specifier|private
name|Node
name|tail
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Short
argument_list|>
name|nodeToIndex
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Short
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Node
index|[]
name|indexToNode
decl_stmt|;
specifier|private
name|int
name|initSize
init|=
literal|0
decl_stmt|;
specifier|public
name|BidirectionalLRUMap
parameter_list|(
name|int
name|initialSize
parameter_list|)
block|{
name|initSize
operator|=
name|initialSize
expr_stmt|;
name|indexToNode
operator|=
operator|new
name|Node
index|[
name|initialSize
index|]
expr_stmt|;
block|}
specifier|private
name|short
name|put
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// We copy the bytes we want, otherwise we might be holding references to
comment|// massive arrays in our dictionary (or those arrays might change)
name|byte
index|[]
name|stored
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|Bytes
operator|.
name|putBytes
argument_list|(
name|stored
argument_list|,
literal|0
argument_list|,
name|array
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|currSize
operator|<
name|initSize
condition|)
block|{
comment|// There is space to add without evicting.
if|if
condition|(
name|indexToNode
index|[
name|currSize
index|]
operator|==
literal|null
condition|)
block|{
name|indexToNode
index|[
name|currSize
index|]
operator|=
operator|new
name|Node
argument_list|()
expr_stmt|;
block|}
name|indexToNode
index|[
name|currSize
index|]
operator|.
name|setContents
argument_list|(
name|stored
argument_list|,
literal|0
argument_list|,
name|stored
operator|.
name|length
argument_list|)
expr_stmt|;
name|setHead
argument_list|(
name|indexToNode
index|[
name|currSize
index|]
argument_list|)
expr_stmt|;
name|short
name|ret
init|=
operator|(
name|short
operator|)
name|currSize
operator|++
decl_stmt|;
name|nodeToIndex
operator|.
name|put
argument_list|(
name|indexToNode
index|[
name|ret
index|]
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
name|short
name|s
init|=
name|nodeToIndex
operator|.
name|remove
argument_list|(
name|tail
argument_list|)
decl_stmt|;
name|tail
operator|.
name|setContents
argument_list|(
name|stored
argument_list|,
literal|0
argument_list|,
name|stored
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// we need to rehash this.
name|nodeToIndex
operator|.
name|put
argument_list|(
name|tail
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|moveToHead
argument_list|(
name|tail
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
specifier|private
name|short
name|findIdx
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|Short
name|s
decl_stmt|;
specifier|final
name|Node
name|comparisonNode
init|=
operator|new
name|Node
argument_list|()
decl_stmt|;
name|comparisonNode
operator|.
name|setContents
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|s
operator|=
name|nodeToIndex
operator|.
name|get
argument_list|(
name|comparisonNode
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|moveToHead
argument_list|(
name|indexToNode
index|[
name|s
index|]
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|private
name|byte
index|[]
name|get
parameter_list|(
name|short
name|idx
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkElementIndex
argument_list|(
name|idx
argument_list|,
name|currSize
argument_list|)
expr_stmt|;
name|moveToHead
argument_list|(
name|indexToNode
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
return|return
name|indexToNode
index|[
name|idx
index|]
operator|.
name|container
return|;
block|}
specifier|private
name|void
name|moveToHead
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
if|if
condition|(
name|head
operator|==
name|n
condition|)
block|{
comment|// no-op -- it's already the head.
return|return;
block|}
comment|// At this point we definitely have prev, since it's not the head.
assert|assert
name|n
operator|.
name|prev
operator|!=
literal|null
assert|;
comment|// Unlink prev.
name|n
operator|.
name|prev
operator|.
name|next
operator|=
name|n
operator|.
name|next
expr_stmt|;
comment|// Unlink next
if|if
condition|(
name|n
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|n
operator|.
name|next
operator|.
name|prev
operator|=
name|n
operator|.
name|prev
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|n
operator|==
name|tail
assert|;
name|tail
operator|=
name|n
operator|.
name|prev
expr_stmt|;
block|}
comment|// Node is now removed from the list. Re-add it at the head.
name|setHead
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setHead
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
comment|// assume it's already unlinked from the list at this point.
name|n
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
name|n
operator|.
name|next
operator|=
name|head
expr_stmt|;
if|if
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
assert|assert
name|head
operator|.
name|prev
operator|==
literal|null
assert|;
name|head
operator|.
name|prev
operator|=
name|n
expr_stmt|;
block|}
name|head
operator|=
name|n
expr_stmt|;
comment|// First entry
if|if
condition|(
name|tail
operator|==
literal|null
condition|)
block|{
name|tail
operator|=
name|n
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currSize
condition|;
name|i
operator|++
control|)
block|{
name|indexToNode
index|[
name|i
index|]
operator|.
name|next
operator|=
literal|null
expr_stmt|;
name|indexToNode
index|[
name|i
index|]
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
name|indexToNode
index|[
name|i
index|]
operator|.
name|container
operator|=
literal|null
expr_stmt|;
block|}
name|currSize
operator|=
literal|0
expr_stmt|;
name|nodeToIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tail
operator|=
literal|null
expr_stmt|;
name|head
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Node
block|{
name|byte
index|[]
name|container
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
name|Node
name|next
decl_stmt|;
comment|// link towards the tail
name|Node
name|prev
decl_stmt|;
comment|// link towards the head
specifier|public
name|Node
parameter_list|()
block|{       }
specifier|private
name|void
name|setContents
parameter_list|(
name|byte
index|[]
name|container
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|hashCode
argument_list|(
name|container
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|Node
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Node
name|casted
init|=
operator|(
name|Node
operator|)
name|other
decl_stmt|;
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|container
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|casted
operator|.
name|container
argument_list|,
name|casted
operator|.
name|offset
argument_list|,
name|casted
operator|.
name|length
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

