begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A helper for building {@link Struct} instances.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|StructBuilder
block|{
specifier|protected
specifier|final
name|List
argument_list|<
name|DataType
argument_list|<
name|?
argument_list|>
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Create an empty {@code StructBuilder}.    */
specifier|public
name|StructBuilder
parameter_list|()
block|{}
comment|/**    * Append {@code field} to the sequence of accumulated fields.    */
specifier|public
name|StructBuilder
name|add
parameter_list|(
name|DataType
argument_list|<
name|?
argument_list|>
name|field
parameter_list|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Retrieve the {@link Struct} represented by {@code this}.    */
specifier|public
name|Struct
name|toStruct
parameter_list|()
block|{
return|return
operator|new
name|Struct
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|DataType
argument_list|<
name|?
argument_list|>
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Reset the sequence of accumulated fields.    */
specifier|public
name|StructBuilder
name|reset
parameter_list|()
block|{
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

