begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingOptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * Common base class used for HBase command-line tools. Simplifies workflow and  * command-line argument parsing.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|AbstractHBaseTool
implements|implements
name|Tool
implements|,
name|Configurable
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|EXIT_SUCCESS
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|EXIT_FAILURE
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|HELP_OPTION
init|=
operator|new
name|Option
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Prints help for this tool."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractHBaseTool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
specifier|protected
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
index|[]
name|cmdLineArgs
init|=
literal|null
decl_stmt|;
comment|// To print options in order they were added in help text.
specifier|private
name|HashMap
argument_list|<
name|Option
argument_list|,
name|Integer
argument_list|>
name|optionsOrder
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|optionsCount
init|=
literal|0
decl_stmt|;
specifier|private
class|class
name|OptionsOrderComparator
implements|implements
name|Comparator
argument_list|<
name|Option
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Option
name|o1
parameter_list|,
name|Option
name|o2
parameter_list|)
block|{
return|return
name|optionsOrder
operator|.
name|get
argument_list|(
name|o1
argument_list|)
operator|-
name|optionsOrder
operator|.
name|get
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
comment|/**    * Override this to add command-line options using {@link #addOptWithArg}    * and similar methods.    */
specifier|protected
specifier|abstract
name|void
name|addOptions
parameter_list|()
function_decl|;
comment|/**    * This method is called to process the options after they have been parsed.    */
specifier|protected
specifier|abstract
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
function_decl|;
comment|/** The "main function" of the tool */
specifier|protected
specifier|abstract
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * For backward compatibility. DO NOT use it for new tools.    * We have options in existing tools which can't be ported to Apache CLI's {@link Option}.    * (because they don't pass validation, for e.g. "-copy-to". "-" means short name    * which doesn't allow '-' in name). This function is to allow tools to have, for time being,    * parameters which can't be parsed using {@link Option}.    * Overrides should consume all valid legacy arguments. If the param 'args' is not empty on    * return, it means there were invalid options, in which case we'll exit from the tool.    * Note that it's called before {@link #processOptions(CommandLine)}, which means new options'    * values will override old ones'.    */
specifier|protected
name|void
name|processOldArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{   }
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|cmdLineArgs
operator|=
name|args
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Tool configuration is not initialized"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"conf"
argument_list|)
throw|;
block|}
name|CommandLine
name|cmd
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
comment|// For backward compatibility of args which can't be parsed as Option. See javadoc for
comment|// processOldArgs(..)
name|processOldArgs
argument_list|(
name|argsList
argument_list|)
expr_stmt|;
try|try
block|{
name|addOptions
argument_list|()
expr_stmt|;
if|if
condition|(
name|isHelpCommand
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
name|String
index|[]
name|remainingArgs
init|=
operator|new
name|String
index|[
name|argsList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|argsList
operator|.
name|toArray
argument_list|(
name|remainingArgs
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|DefaultParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|remainingArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingOptionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Use -h or --help for usage instructions."
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when parsing command-line arguments"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Use -h or --help for usage instructions."
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|processOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|int
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|doWork
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error running command-line tool"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|isHelpCommand
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|Options
name|helpOption
init|=
operator|new
name|Options
argument_list|()
operator|.
name|addOption
argument_list|(
name|HELP_OPTION
argument_list|)
decl_stmt|;
comment|// this parses the command line but doesn't throw an exception on unknown options
name|CommandLine
name|cl
init|=
operator|new
name|DefaultParser
argument_list|()
operator|.
name|parse
argument_list|(
name|helpOption
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|cl
operator|.
name|getOptions
argument_list|()
operator|.
name|length
operator|!=
literal|0
return|;
block|}
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|printUsage
argument_list|(
literal|"bin/hbase "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"<options>"
argument_list|,
literal|"Options:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|printUsage
parameter_list|(
specifier|final
name|String
name|usageStr
parameter_list|,
specifier|final
name|String
name|usageHeader
parameter_list|,
specifier|final
name|String
name|usageFooter
parameter_list|)
block|{
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|setWidth
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setOptionComparator
argument_list|(
operator|new
name|OptionsOrderComparator
argument_list|()
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
name|usageStr
argument_list|,
name|usageHeader
argument_list|,
name|options
argument_list|,
name|usageFooter
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addOption
parameter_list|(
name|Option
name|option
parameter_list|)
block|{
name|options
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|optionsOrder
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|optionsCount
operator|++
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addRequiredOption
parameter_list|(
name|Option
name|option
parameter_list|)
block|{
name|option
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addRequiredOptWithArg
parameter_list|(
name|String
name|opt
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|Option
name|option
init|=
operator|new
name|Option
argument_list|(
name|opt
argument_list|,
literal|true
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addRequiredOptWithArg
parameter_list|(
name|String
name|shortOpt
parameter_list|,
name|String
name|longOpt
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|Option
name|option
init|=
operator|new
name|Option
argument_list|(
name|shortOpt
argument_list|,
name|longOpt
argument_list|,
literal|true
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|option
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addOptNoArg
parameter_list|(
name|String
name|opt
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|opt
argument_list|,
literal|false
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addOptNoArg
parameter_list|(
name|String
name|shortOpt
parameter_list|,
name|String
name|longOpt
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|shortOpt
argument_list|,
name|longOpt
argument_list|,
literal|false
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addOptWithArg
parameter_list|(
name|String
name|opt
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|opt
argument_list|,
literal|true
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addOptWithArg
parameter_list|(
name|String
name|shortOpt
parameter_list|,
name|String
name|longOpt
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|shortOpt
argument_list|,
name|longOpt
argument_list|,
literal|true
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getOptionAsInt
parameter_list|(
name|CommandLine
name|cmd
parameter_list|,
name|String
name|opt
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|opt
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|opt
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
block|}
specifier|public
name|double
name|getOptionAsDouble
parameter_list|(
name|CommandLine
name|cmd
parameter_list|,
name|String
name|opt
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|opt
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|opt
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
block|}
comment|/**    * Parse a number and enforce a range.    */
specifier|public
specifier|static
name|long
name|parseLong
parameter_list|(
name|String
name|s
parameter_list|,
name|long
name|minValue
parameter_list|,
name|long
name|maxValue
parameter_list|)
block|{
name|long
name|l
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
argument_list|<
name|minValue
operator|||
name|l
argument_list|>
name|maxValue
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The value "
operator|+
name|l
operator|+
literal|" is out of range ["
operator|+
name|minValue
operator|+
literal|", "
operator|+
name|maxValue
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|l
return|;
block|}
specifier|public
specifier|static
name|int
name|parseInt
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|minValue
parameter_list|,
name|int
name|maxValue
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|parseLong
argument_list|(
name|s
argument_list|,
name|minValue
argument_list|,
name|maxValue
argument_list|)
return|;
block|}
comment|/** Call this from the concrete tool class's main function. */
specifier|protected
name|void
name|doStaticMain
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|this
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error running command-line tool"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|ret
operator|=
name|EXIT_FAILURE
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

