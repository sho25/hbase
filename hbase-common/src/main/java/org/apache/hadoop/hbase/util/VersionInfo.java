begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|VersionAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * This class finds the package info for hbase and the VersionAnnotation  * information.  Taken from hadoop.  Only name of annotation is different.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|VersionInfo
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VersionInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Package
name|myPackage
decl_stmt|;
specifier|private
specifier|static
name|VersionAnnotation
name|version
decl_stmt|;
static|static
block|{
name|myPackage
operator|=
name|VersionAnnotation
operator|.
name|class
operator|.
name|getPackage
argument_list|()
expr_stmt|;
name|version
operator|=
name|myPackage
operator|.
name|getAnnotation
argument_list|(
name|VersionAnnotation
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the meta-data for the hbase package.    * @return package    */
specifier|static
name|Package
name|getPackage
parameter_list|()
block|{
return|return
name|myPackage
return|;
block|}
comment|/**    * Get the hbase version.    * @return the hbase version string, eg. "0.6.3-dev"    */
specifier|public
specifier|static
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
operator|!=
literal|null
condition|?
name|version
operator|.
name|version
argument_list|()
else|:
literal|"Unknown"
return|;
block|}
comment|/**    * Get the subversion revision number for the root directory    * @return the revision number, eg. "451451"    */
specifier|public
specifier|static
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|version
operator|!=
literal|null
condition|?
name|version
operator|.
name|revision
argument_list|()
else|:
literal|"Unknown"
return|;
block|}
comment|/**    * The date that hbase was compiled.    * @return the compilation date in unix date format    */
specifier|public
specifier|static
name|String
name|getDate
parameter_list|()
block|{
return|return
name|version
operator|!=
literal|null
condition|?
name|version
operator|.
name|date
argument_list|()
else|:
literal|"Unknown"
return|;
block|}
comment|/**    * The user that compiled hbase.    * @return the username of the user    */
specifier|public
specifier|static
name|String
name|getUser
parameter_list|()
block|{
return|return
name|version
operator|!=
literal|null
condition|?
name|version
operator|.
name|user
argument_list|()
else|:
literal|"Unknown"
return|;
block|}
comment|/**    * Get the subversion URL for the root hbase directory.    * @return the url    */
specifier|public
specifier|static
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|version
operator|!=
literal|null
condition|?
name|version
operator|.
name|url
argument_list|()
else|:
literal|"Unknown"
return|;
block|}
specifier|static
name|String
index|[]
name|versionReport
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"HBase "
operator|+
name|getVersion
argument_list|()
block|,
literal|"Source code repository "
operator|+
name|getUrl
argument_list|()
operator|+
literal|" -r "
operator|+
name|getRevision
argument_list|()
block|,
literal|"Compiled by "
operator|+
name|getUser
argument_list|()
operator|+
literal|" on "
operator|+
name|getDate
argument_list|()
block|,
literal|"From source with checksum "
operator|+
name|getSrcChecksum
argument_list|()
block|}
return|;
block|}
comment|/**    * Get the checksum of the source files from which Hadoop was compiled.    * @return a string that uniquely identifies the source    **/
specifier|public
specifier|static
name|String
name|getSrcChecksum
parameter_list|()
block|{
return|return
name|version
operator|!=
literal|null
condition|?
name|version
operator|.
name|srcChecksum
argument_list|()
else|:
literal|"Unknown"
return|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
for|for
control|(
name|String
name|line
range|:
name|versionReport
argument_list|()
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|logVersion
parameter_list|()
block|{
for|for
control|(
name|String
name|line
range|:
name|versionReport
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|logVersion
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

