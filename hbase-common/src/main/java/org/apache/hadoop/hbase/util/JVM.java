begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|OperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This class is a wrapper for the implementation of  * com.sun.management.UnixOperatingSystemMXBean  * It will decide to use the sun api or its own implementation  * depending on the runtime (vendor) used.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|JVM
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JVM
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|OperatingSystemMXBean
name|osMbean
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|ibmvendor
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|windows
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|linux
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JVMVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
decl_stmt|;
comment|/**    * Constructor. Get the running Operating System instance    */
specifier|public
name|JVM
parameter_list|()
block|{
name|this
operator|.
name|osMbean
operator|=
name|ManagementFactory
operator|.
name|getOperatingSystemMXBean
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check if the OS is unix.     *     * @return whether this is unix or not.    */
specifier|public
specifier|static
name|boolean
name|isUnix
parameter_list|()
block|{
if|if
condition|(
name|windows
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|ibmvendor
condition|?
name|linux
else|:
literal|true
operator|)
return|;
block|}
comment|/**    * Check if the finish() method of GZIPOutputStream is broken    *     * @return whether GZIPOutputStream.finish() is broken.    */
specifier|public
specifier|static
name|boolean
name|isGZIPOutputStreamFinishBroken
parameter_list|()
block|{
return|return
name|ibmvendor
operator|&&
name|JVMVersion
operator|.
name|contains
argument_list|(
literal|"1.6.0"
argument_list|)
return|;
block|}
comment|/**    * Load the implementation of UnixOperatingSystemMXBean for Oracle jvm    * and runs the desired method.     * @param mBeanMethodName : method to run from the interface UnixOperatingSystemMXBean    * @return the method result    */
specifier|private
name|Long
name|runUnixMXBeanMethod
parameter_list|(
name|String
name|mBeanMethodName
parameter_list|)
block|{
name|Object
name|unixos
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|classRef
decl_stmt|;
name|Method
name|mBeanMethod
decl_stmt|;
try|try
block|{
name|classRef
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.management.UnixOperatingSystemMXBean"
argument_list|)
expr_stmt|;
if|if
condition|(
name|classRef
operator|.
name|isInstance
argument_list|(
name|osMbean
argument_list|)
condition|)
block|{
name|mBeanMethod
operator|=
name|classRef
operator|.
name|getDeclaredMethod
argument_list|(
name|mBeanMethodName
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|unixos
operator|=
name|classRef
operator|.
name|cast
argument_list|(
name|osMbean
argument_list|)
expr_stmt|;
return|return
operator|(
name|Long
operator|)
name|mBeanMethod
operator|.
name|invoke
argument_list|(
name|unixos
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to load class or method for com.sun.managment.UnixOperatingSystemMXBean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the number of opened filed descriptor for the runtime jvm.    * If Oracle java, it will use the com.sun.management interfaces.    * Otherwise, this methods implements it (linux only).      * @return number of open file descriptors for the jvm    */
specifier|public
name|long
name|getOpenFileDescriptorCount
parameter_list|()
block|{
name|Long
name|ofdc
decl_stmt|;
if|if
condition|(
operator|!
name|ibmvendor
condition|)
block|{
name|ofdc
operator|=
name|runUnixMXBeanMethod
argument_list|(
literal|"getOpenFileDescriptorCount"
argument_list|)
expr_stmt|;
return|return
operator|(
name|ofdc
operator|!=
literal|null
condition|?
name|ofdc
operator|.
name|longValue
argument_list|()
else|:
operator|-
literal|1
operator|)
return|;
block|}
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//need to get the PID number of the process first
name|RuntimeMXBean
name|rtmbean
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
name|String
name|rtname
init|=
name|rtmbean
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
index|[]
name|pidhost
init|=
name|rtname
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
comment|//using linux bash commands to retrieve info
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"ls /proc/"
operator|+
name|pidhost
index|[
literal|0
index|]
operator|+
literal|"/fdinfo | wc -l"
block|}
argument_list|)
decl_stmt|;
name|in
operator|=
name|p
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|output
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|openFileDesCount
decl_stmt|;
if|if
condition|(
operator|(
name|openFileDesCount
operator|=
name|output
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|openFileDesCount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to get the number of open file descriptors"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to close the InputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to close the InputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Get the number of the maximum file descriptors the system can use.    * If Oracle java, it will use the com.sun.management interfaces.    * Otherwise, this methods implements it (linux only).      * @return max number of file descriptors the operating system can use.    */
specifier|public
name|long
name|getMaxFileDescriptorCount
parameter_list|()
block|{
name|Long
name|mfdc
decl_stmt|;
if|if
condition|(
operator|!
name|ibmvendor
condition|)
block|{
name|mfdc
operator|=
name|runUnixMXBeanMethod
argument_list|(
literal|"getMaxFileDescriptorCount"
argument_list|)
expr_stmt|;
return|return
operator|(
name|mfdc
operator|!=
literal|null
condition|?
name|mfdc
operator|.
name|longValue
argument_list|()
else|:
operator|-
literal|1
operator|)
return|;
block|}
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//using linux bash commands to retrieve info
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"ulimit -n"
block|}
argument_list|)
decl_stmt|;
name|in
operator|=
name|p
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|output
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|maxFileDesCount
decl_stmt|;
if|if
condition|(
operator|(
name|maxFileDesCount
operator|=
name|output
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|maxFileDesCount
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to get the max number of file descriptors"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to close the reader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to close the InputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

