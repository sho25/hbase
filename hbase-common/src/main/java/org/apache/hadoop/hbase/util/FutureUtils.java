begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|TimeoutIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_comment
comment|/**  * Helper class for processing futures.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|FutureUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FutureUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FutureUtils
parameter_list|()
block|{   }
comment|/**    * This is method is used when you just want to add a listener to the given future. We will call    * {@link CompletableFuture#whenComplete(BiConsumer)} to register the {@code action} to the    * {@code future}. Ignoring the return value of a Future is considered as a bad practice as it may    * suppress exceptions thrown from the code that completes the future, and this method will catch    * all the exception thrown from the {@code action} to catch possible code bugs.    *<p/>    * And the error phone check will always report FutureReturnValueIgnored because every method in    * the {@link CompletableFuture} class will return a new {@link CompletableFuture}, so you always    * have one future that has not been checked. So we introduce this method and add a suppress    * warnings annotation here.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"FutureReturnValueIgnored"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addListener
parameter_list|(
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
name|BiConsumer
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
super|super
name|Throwable
argument_list|>
name|action
parameter_list|)
block|{
name|future
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|resp
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
try|try
block|{
comment|// See this post on stack overflow(shorten since the url is too long),
comment|// https://s.apache.org/completionexception
comment|// For a chain of CompleableFuture, only the first child CompletableFuture can get the
comment|// original exception, others will get a CompletionException, which wraps the original
comment|// exception. So here we unwrap it before passing it to the callback action.
name|action
operator|.
name|accept
argument_list|(
name|resp
argument_list|,
name|unwrapCompletionException
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected error caught when processing CompletableFuture"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Almost the same with {@link #addListener(CompletableFuture, BiConsumer)} method above, the only    * exception is that we will call    * {@link CompletableFuture#whenCompleteAsync(BiConsumer, Executor)}.    * @see #addListener(CompletableFuture, BiConsumer)    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"FutureReturnValueIgnored"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addListener
parameter_list|(
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
name|BiConsumer
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
super|super
name|Throwable
argument_list|>
name|action
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|future
operator|.
name|whenCompleteAsync
argument_list|(
parameter_list|(
name|resp
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
try|try
block|{
name|action
operator|.
name|accept
argument_list|(
name|resp
argument_list|,
name|unwrapCompletionException
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected error caught when processing CompletableFuture"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a {@link CompletableFuture} which is same with the given {@code future}, but execute all    * the callbacks in the given {@code executor}.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|wrapFuture
parameter_list|(
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|wrappedFuture
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|future
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|wrappedFuture
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wrappedFuture
operator|.
name|complete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|executor
argument_list|)
expr_stmt|;
return|return
name|wrappedFuture
return|;
block|}
comment|/**    * Get the cause of the {@link Throwable} if it is a {@link CompletionException}.    */
specifier|public
specifier|static
name|Throwable
name|unwrapCompletionException
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|instanceof
name|CompletionException
condition|)
block|{
name|Throwable
name|cause
init|=
name|error
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
return|return
name|cause
return|;
block|}
block|}
return|return
name|error
return|;
block|}
comment|/**    * A helper class for getting the result of a Future, and convert the error to an    * {@link IOException}.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Future
argument_list|<
name|T
argument_list|>
name|future
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|cause
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper class for getting the result of a Future with timeout, and convert the error to an    * {@link IOException}.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Future
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|cause
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TimeoutIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a CompletableFuture that is already completed exceptionally with the given exception.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|failedFuture
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
end_class

end_unit

