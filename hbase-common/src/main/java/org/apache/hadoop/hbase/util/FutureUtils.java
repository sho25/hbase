begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper class for processing futures.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|FutureUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FutureUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FutureUtils
parameter_list|()
block|{   }
comment|/**    * This is method is used when you just want to add a listener to the given future. We will call    * {@link CompletableFuture#whenComplete(BiConsumer)} to register the {@code action} to the    * {@code future}. Ignoring the return value of a Future is considered as a bad practice as it may    * suppress exceptions thrown from the code that completes the future, and this method will catch    * all the exception thrown from the {@code action} to catch possible code bugs.    *<p/>    * And the error phone check will always report FutureReturnValueIgnored because every method in    * the {@link CompletableFuture} class will return a new {@link CompletableFuture}, so you always    * have one future that has not been checked. So we introduce this method and add a suppress    * warnings annotation here.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"FutureReturnValueIgnored"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addListener
parameter_list|(
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
name|BiConsumer
argument_list|<
name|?
super|super
name|T
argument_list|,
name|?
super|super
name|Throwable
argument_list|>
name|action
parameter_list|)
block|{
name|future
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|resp
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
try|try
block|{
name|action
operator|.
name|accept
argument_list|(
name|resp
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected error caught when processing CompletableFuture"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

