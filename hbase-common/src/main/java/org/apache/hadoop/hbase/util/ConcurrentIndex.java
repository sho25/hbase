begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multiset
import|;
end_import

begin_comment
comment|/**  * A simple concurrent map of sets. This is similar in concept to  * {@link Multiset}, with the following exceptions:  *<ul>  *<li>The set is thread-safe and concurrent: no external locking or  *   synchronization is required. This is important for the use case where  *   this class is used to index cached blocks by filename for their  *   efficient eviction from cache when the file is closed or compacted.</li>  *<li>The expectation is that all entries may only be removed for a key  *   once no more additions of values are being made under that key.</li>  *</ul>  * @param<K> Key type  * @param<V> Value type  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ConcurrentIndex
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
comment|/** Container for the sets, indexed by key */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|Set
argument_list|<
name|V
argument_list|>
argument_list|>
name|container
decl_stmt|;
comment|/**    * A factory that constructs new instances of the sets if no set is    * associated with a given key.    */
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Set
argument_list|<
name|V
argument_list|>
argument_list|>
name|valueSetFactory
decl_stmt|;
comment|/**    * Creates an instance with a specified factory object for sets to be    * associated with a given key.    * @param valueSetFactory The factory instance    */
specifier|public
name|ConcurrentIndex
parameter_list|(
name|Supplier
argument_list|<
name|Set
argument_list|<
name|V
argument_list|>
argument_list|>
name|valueSetFactory
parameter_list|)
block|{
name|this
operator|.
name|valueSetFactory
operator|=
name|valueSetFactory
expr_stmt|;
name|this
operator|.
name|container
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|Set
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates an instance using the DefaultValueSetFactory for sets,    * which in turn creates instances of {@link ConcurrentSkipListSet}    * @param valueComparator A {@link Comparator} for value types    */
specifier|public
name|ConcurrentIndex
parameter_list|(
name|Comparator
argument_list|<
name|V
argument_list|>
name|valueComparator
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|DefaultValueSetFactory
argument_list|<
name|V
argument_list|>
argument_list|(
name|valueComparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Associate a new unique value with a specified key. Under the covers, the    * method employs optimistic concurrency: if no set is associated with a    * given key, we create a new set; if another thread comes in, creates,    * and associates a set with the same key in the mean-time, we simply add    * the value to the already created set.    * @param key The key    * @param value An additional unique value we want to associate with a key    */
specifier|public
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|Set
argument_list|<
name|V
argument_list|>
name|set
init|=
name|container
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
name|valueSetFactory
operator|.
name|get
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|V
argument_list|>
name|existing
init|=
name|container
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|set
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// If a set is already associated with a key, that means another
comment|// writer has already come in and created the set for the given key.
comment|// Pursuant to an optimistic concurrency policy, in this case we will
comment|// simply add the value to the existing set associated with the key.
name|existing
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get all values associated with a specified key or null if no values are    * associated.<b>Note:</b> if the caller wishes to add or removes values    * to under the specified as they're iterating through the returned value,    * they should make a defensive copy; otherwise, a    * {@link ConcurrentModificationException} may be thrown.    * @param key The key    * @return All values associated with the specified key or null if no values    *         are associated with the key.    */
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|values
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|container
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Removes the association between a specified key and value. If as a    * result of removing a value a set becomes empty, we remove the given    * set from the mapping as well.    * @param key The specified key    * @param value The value to disassociate with the key    */
specifier|public
name|boolean
name|remove
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|Set
argument_list|<
name|V
argument_list|>
name|set
init|=
name|container
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
name|success
operator|=
name|set
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|container
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
comment|/**    * Default factory class for the sets associated with given keys. Creates    * a {@link ConcurrentSkipListSet} using the comparator passed into the    * constructor.    * @see ConcurrentSkipListSet    * @see Supplier    * @param<V> The value type. Should match value type of the    *           ConcurrentIndex instances of this object are passed to.    */
specifier|private
specifier|static
class|class
name|DefaultValueSetFactory
parameter_list|<
name|V
parameter_list|>
implements|implements
name|Supplier
argument_list|<
name|Set
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|Comparator
argument_list|<
name|V
argument_list|>
name|comparator
decl_stmt|;
comment|/**      * Creates an instance that passes a specified comparator to the      * {@link ConcurrentSkipListSet}      * @param comparator The specified comparator      */
specifier|public
name|DefaultValueSetFactory
parameter_list|(
name|Comparator
argument_list|<
name|V
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
comment|/**      * Creates a new {@link ConcurrentSkipListSet} instance using the      * comparator specified when the class instance was constructed.      * @return The instantiated {@link ConcurrentSkipListSet} object      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|get
parameter_list|()
block|{
return|return
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|V
argument_list|>
argument_list|(
name|comparator
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

