begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TagCompressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A default implementation of {@link HFileBlockEncodingContext}. It will  * compress the data section as one continuous buffer.  *  * @see HFileBlockDefaultDecodingContext for the decompression part  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HFileBlockDefaultEncodingContext
implements|implements
name|HFileBlockEncodingContext
block|{
specifier|private
name|BlockType
name|blockType
decl_stmt|;
specifier|private
specifier|final
name|DataBlockEncoding
name|encodingAlgo
decl_stmt|;
specifier|private
name|byte
index|[]
name|dummyHeader
decl_stmt|;
comment|// Compression state
comment|/** Compressor, which is also reused between consecutive blocks. */
specifier|private
name|Compressor
name|compressor
decl_stmt|;
comment|/** Compression output stream */
specifier|private
name|CompressionOutputStream
name|compressionStream
decl_stmt|;
comment|/** Underlying stream to write compressed bytes to */
specifier|private
name|ByteArrayOutputStream
name|compressedByteStream
decl_stmt|;
specifier|private
name|HFileContext
name|fileContext
decl_stmt|;
specifier|private
name|TagCompressionContext
name|tagCompressionContext
decl_stmt|;
comment|// Encryption state
comment|/** Underlying stream to write encrypted bytes to */
specifier|private
name|ByteArrayOutputStream
name|cryptoByteStream
decl_stmt|;
comment|/** Initialization vector */
specifier|private
name|byte
index|[]
name|iv
decl_stmt|;
specifier|private
name|EncodingState
name|encoderState
decl_stmt|;
comment|/**    * @param encoding encoding used    * @param headerBytes dummy header bytes    * @param fileContext HFile meta data    */
specifier|public
name|HFileBlockDefaultEncodingContext
parameter_list|(
name|DataBlockEncoding
name|encoding
parameter_list|,
name|byte
index|[]
name|headerBytes
parameter_list|,
name|HFileContext
name|fileContext
parameter_list|)
block|{
name|this
operator|.
name|encodingAlgo
operator|=
name|encoding
expr_stmt|;
name|this
operator|.
name|fileContext
operator|=
name|fileContext
expr_stmt|;
name|Compression
operator|.
name|Algorithm
name|compressionAlgorithm
init|=
name|fileContext
operator|.
name|getCompression
argument_list|()
operator|==
literal|null
condition|?
name|NONE
else|:
name|fileContext
operator|.
name|getCompression
argument_list|()
decl_stmt|;
if|if
condition|(
name|compressionAlgorithm
operator|!=
name|NONE
condition|)
block|{
name|compressor
operator|=
name|compressionAlgorithm
operator|.
name|getCompressor
argument_list|()
expr_stmt|;
name|compressedByteStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
try|try
block|{
name|compressionStream
operator|=
name|compressionAlgorithm
operator|.
name|createPlainCompressionStream
argument_list|(
name|compressedByteStream
argument_list|,
name|compressor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create compression stream for algorithm "
operator|+
name|compressionAlgorithm
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|Encryption
operator|.
name|Context
name|cryptoContext
init|=
name|fileContext
operator|.
name|getEncryptionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|cryptoContext
operator|!=
name|Encryption
operator|.
name|Context
operator|.
name|NONE
condition|)
block|{
name|cryptoByteStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|iv
operator|=
operator|new
name|byte
index|[
name|cryptoContext
operator|.
name|getCipher
argument_list|()
operator|.
name|getIvLength
argument_list|()
index|]
expr_stmt|;
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|iv
argument_list|)
expr_stmt|;
block|}
name|dummyHeader
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|headerBytes
argument_list|,
literal|"Please pass HConstants.HFILEBLOCK_DUMMY_HEADER instead of null for param headerBytes"
argument_list|)
expr_stmt|;
block|}
comment|/**    * prepare to start a new encoding.    * @throws IOException    */
specifier|public
name|void
name|prepareEncoding
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encodingAlgo
operator|!=
literal|null
operator|&&
name|encodingAlgo
operator|!=
name|DataBlockEncoding
operator|.
name|NONE
condition|)
block|{
name|encodingAlgo
operator|.
name|writeIdInBytes
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postEncoding
parameter_list|(
name|BlockType
name|blockType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|blockType
operator|=
name|blockType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Bytes
name|compressAndEncrypt
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|compressAfterEncoding
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|dummyHeader
argument_list|)
return|;
block|}
specifier|private
name|Bytes
name|compressAfterEncoding
parameter_list|(
name|byte
index|[]
name|uncompressedBytesWithHeaderBuffer
parameter_list|,
name|int
name|uncompressedBytesWithHeaderOffset
parameter_list|,
name|int
name|uncompressedBytesWithHeaderLength
parameter_list|,
name|byte
index|[]
name|headerBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|Encryption
operator|.
name|Context
name|cryptoContext
init|=
name|fileContext
operator|.
name|getEncryptionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|cryptoContext
operator|!=
name|Encryption
operator|.
name|Context
operator|.
name|NONE
condition|)
block|{
comment|// Encrypted block format:
comment|// +--------------------------+
comment|// | byte iv length           |
comment|// +--------------------------+
comment|// | iv data ...              |
comment|// +--------------------------+
comment|// | encrypted block data ... |
comment|// +--------------------------+
name|cryptoByteStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Write the block header (plaintext)
name|cryptoByteStream
operator|.
name|write
argument_list|(
name|headerBytes
argument_list|)
expr_stmt|;
name|InputStream
name|in
decl_stmt|;
name|int
name|plaintextLength
decl_stmt|;
comment|// Run any compression before encryption
if|if
condition|(
name|fileContext
operator|.
name|getCompression
argument_list|()
operator|!=
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
name|compressedByteStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|compressionStream
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|compressionStream
operator|.
name|write
argument_list|(
name|uncompressedBytesWithHeaderBuffer
argument_list|,
name|headerBytes
operator|.
name|length
operator|+
name|uncompressedBytesWithHeaderOffset
argument_list|,
name|uncompressedBytesWithHeaderLength
operator|-
name|headerBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressionStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|compressionStream
operator|.
name|finish
argument_list|()
expr_stmt|;
name|byte
index|[]
name|plaintext
init|=
name|compressedByteStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|plaintextLength
operator|=
name|plaintext
operator|.
name|length
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|plaintext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plaintextLength
operator|=
name|uncompressedBytesWithHeaderLength
operator|-
name|headerBytes
operator|.
name|length
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|uncompressedBytesWithHeaderBuffer
argument_list|,
name|headerBytes
operator|.
name|length
operator|+
name|uncompressedBytesWithHeaderOffset
argument_list|,
name|plaintextLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|plaintextLength
operator|>
literal|0
condition|)
block|{
comment|// Set up the cipher
name|Cipher
name|cipher
init|=
name|cryptoContext
operator|.
name|getCipher
argument_list|()
decl_stmt|;
name|Encryptor
name|encryptor
init|=
name|cipher
operator|.
name|getEncryptor
argument_list|()
decl_stmt|;
name|encryptor
operator|.
name|setKey
argument_list|(
name|cryptoContext
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set up the IV
name|int
name|ivLength
init|=
name|iv
operator|.
name|length
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ivLength
operator|<=
name|Byte
operator|.
name|MAX_VALUE
argument_list|,
literal|"IV length out of range"
argument_list|)
expr_stmt|;
name|cryptoByteStream
operator|.
name|write
argument_list|(
name|ivLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|ivLength
operator|>
literal|0
condition|)
block|{
name|encryptor
operator|.
name|setIv
argument_list|(
name|iv
argument_list|)
expr_stmt|;
name|cryptoByteStream
operator|.
name|write
argument_list|(
name|iv
argument_list|)
expr_stmt|;
block|}
comment|// Encrypt the data
name|Encryption
operator|.
name|encrypt
argument_list|(
name|cryptoByteStream
argument_list|,
name|in
argument_list|,
name|encryptor
argument_list|)
expr_stmt|;
comment|// Increment the IV given the final block size
name|Encryption
operator|.
name|incrementIv
argument_list|(
name|iv
argument_list|,
literal|1
operator|+
operator|(
name|cryptoByteStream
operator|.
name|size
argument_list|()
operator|/
name|encryptor
operator|.
name|getBlockSize
argument_list|()
operator|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Bytes
argument_list|(
name|cryptoByteStream
operator|.
name|getBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cryptoByteStream
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|cryptoByteStream
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|Bytes
argument_list|(
name|cryptoByteStream
operator|.
name|getBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cryptoByteStream
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|fileContext
operator|.
name|getCompression
argument_list|()
operator|!=
name|NONE
condition|)
block|{
name|compressedByteStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|compressedByteStream
operator|.
name|write
argument_list|(
name|headerBytes
argument_list|)
expr_stmt|;
name|compressionStream
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|compressionStream
operator|.
name|write
argument_list|(
name|uncompressedBytesWithHeaderBuffer
argument_list|,
name|headerBytes
operator|.
name|length
operator|+
name|uncompressedBytesWithHeaderOffset
argument_list|,
name|uncompressedBytesWithHeaderLength
operator|-
name|headerBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressionStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|compressionStream
operator|.
name|finish
argument_list|()
expr_stmt|;
return|return
operator|new
name|Bytes
argument_list|(
name|compressedByteStream
operator|.
name|getBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|compressedByteStream
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|blockType
return|;
block|}
comment|/**    * Releases the compressor this writer uses to compress blocks into the    * compressor pool.    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fileContext
operator|.
name|getCompression
argument_list|()
operator|.
name|returnCompressor
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
name|compressor
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataBlockEncoding
name|getDataBlockEncoding
parameter_list|()
block|{
return|return
name|this
operator|.
name|encodingAlgo
return|;
block|}
annotation|@
name|Override
specifier|public
name|HFileContext
name|getHFileContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileContext
return|;
block|}
specifier|public
name|TagCompressionContext
name|getTagCompressionContext
parameter_list|()
block|{
return|return
name|tagCompressionContext
return|;
block|}
specifier|public
name|void
name|setTagCompressionContext
parameter_list|(
name|TagCompressionContext
name|tagCompressionContext
parameter_list|)
block|{
name|this
operator|.
name|tagCompressionContext
operator|=
name|tagCompressionContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EncodingState
name|getEncodingState
parameter_list|()
block|{
return|return
name|this
operator|.
name|encoderState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEncodingState
parameter_list|(
name|EncodingState
name|state
parameter_list|)
block|{
name|this
operator|.
name|encoderState
operator|=
name|state
expr_stmt|;
block|}
block|}
end_class

end_unit

