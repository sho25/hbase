begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A default implementation of {@link HFileBlockEncodingContext}. It will  * compress the data section as one continuous buffer.  *  * @see HFileBlockDefaultDecodingContext for the decompression part  *  */
end_comment

begin_class
specifier|public
class|class
name|HFileBlockDefaultEncodingContext
implements|implements
name|HFileBlockEncodingContext
block|{
specifier|private
name|byte
index|[]
name|onDiskBytesWithHeader
decl_stmt|;
specifier|private
name|byte
index|[]
name|uncompressedBytesWithHeader
decl_stmt|;
specifier|private
name|BlockType
name|blockType
decl_stmt|;
specifier|private
specifier|final
name|DataBlockEncoding
name|encodingAlgo
decl_stmt|;
comment|/** Compressor, which is also reused between consecutive blocks. */
specifier|private
name|Compressor
name|compressor
decl_stmt|;
comment|/** Compression output stream */
specifier|private
name|CompressionOutputStream
name|compressionStream
decl_stmt|;
comment|/** Underlying stream to write compressed bytes to */
specifier|private
name|ByteArrayOutputStream
name|compressedByteStream
decl_stmt|;
comment|/** Compression algorithm for all blocks this instance writes. */
specifier|private
specifier|final
name|Compression
operator|.
name|Algorithm
name|compressionAlgorithm
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|encodedStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|private
name|DataOutputStream
name|dataOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|encodedStream
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|dummyHeader
decl_stmt|;
comment|/**    * @param compressionAlgorithm compression algorithm used    * @param encoding encoding used    * @param headerBytes dummy header bytes    */
specifier|public
name|HFileBlockDefaultEncodingContext
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|compressionAlgorithm
parameter_list|,
name|DataBlockEncoding
name|encoding
parameter_list|,
name|byte
index|[]
name|headerBytes
parameter_list|)
block|{
name|this
operator|.
name|encodingAlgo
operator|=
name|encoding
expr_stmt|;
name|this
operator|.
name|compressionAlgorithm
operator|=
name|compressionAlgorithm
operator|==
literal|null
condition|?
name|NONE
else|:
name|compressionAlgorithm
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|compressionAlgorithm
operator|!=
name|NONE
condition|)
block|{
name|compressor
operator|=
name|compressionAlgorithm
operator|.
name|getCompressor
argument_list|()
expr_stmt|;
name|compressedByteStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
try|try
block|{
name|compressionStream
operator|=
name|compressionAlgorithm
operator|.
name|createPlainCompressionStream
argument_list|(
name|compressedByteStream
argument_list|,
name|compressor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create compression stream for algorithm "
operator|+
name|compressionAlgorithm
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|dummyHeader
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|headerBytes
argument_list|,
literal|"Please pass HFileBlock.HFILEBLOCK_DUMMY_HEADER instead of null for param headerBytes"
argument_list|)
expr_stmt|;
block|}
comment|/**    * prepare to start a new encoding.    * @throws IOException    */
specifier|public
name|void
name|prepareEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|encodedStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dataOut
operator|.
name|write
argument_list|(
name|dummyHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|encodingAlgo
operator|!=
literal|null
operator|&&
name|encodingAlgo
operator|!=
name|DataBlockEncoding
operator|.
name|NONE
condition|)
block|{
name|encodingAlgo
operator|.
name|writeIdInBytes
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postEncoding
parameter_list|(
name|BlockType
name|blockType
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|compressAfterEncoding
argument_list|(
name|encodedStream
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|blockType
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockType
operator|=
name|blockType
expr_stmt|;
block|}
comment|/**    * @param uncompressedBytesWithHeader    * @param blockType    * @throws IOException    */
specifier|public
name|void
name|compressAfterEncoding
parameter_list|(
name|byte
index|[]
name|uncompressedBytesWithHeader
parameter_list|,
name|BlockType
name|blockType
parameter_list|)
throws|throws
name|IOException
block|{
name|compressAfterEncoding
argument_list|(
name|uncompressedBytesWithHeader
argument_list|,
name|blockType
argument_list|,
name|dummyHeader
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param uncompressedBytesWithHeader    * @param blockType    * @param headerBytes    * @throws IOException    */
specifier|protected
name|void
name|compressAfterEncoding
parameter_list|(
name|byte
index|[]
name|uncompressedBytesWithHeader
parameter_list|,
name|BlockType
name|blockType
parameter_list|,
name|byte
index|[]
name|headerBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|uncompressedBytesWithHeader
operator|=
name|uncompressedBytesWithHeader
expr_stmt|;
if|if
condition|(
name|compressionAlgorithm
operator|!=
name|NONE
condition|)
block|{
name|compressedByteStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|compressedByteStream
operator|.
name|write
argument_list|(
name|headerBytes
argument_list|)
expr_stmt|;
name|compressionStream
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|compressionStream
operator|.
name|write
argument_list|(
name|uncompressedBytesWithHeader
argument_list|,
name|headerBytes
operator|.
name|length
argument_list|,
name|uncompressedBytesWithHeader
operator|.
name|length
operator|-
name|headerBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressionStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|compressionStream
operator|.
name|finish
argument_list|()
expr_stmt|;
name|onDiskBytesWithHeader
operator|=
name|compressedByteStream
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|onDiskBytesWithHeader
operator|=
name|uncompressedBytesWithHeader
expr_stmt|;
block|}
name|this
operator|.
name|blockType
operator|=
name|blockType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getOnDiskBytesWithHeader
parameter_list|()
block|{
return|return
name|onDiskBytesWithHeader
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getUncompressedBytesWithHeader
parameter_list|()
block|{
return|return
name|uncompressedBytesWithHeader
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|blockType
return|;
block|}
comment|/**    * Releases the compressor this writer uses to compress blocks into the    * compressor pool.    */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
name|compressionAlgorithm
operator|.
name|returnCompressor
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
name|compressor
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Algorithm
name|getCompression
parameter_list|()
block|{
return|return
name|this
operator|.
name|compressionAlgorithm
return|;
block|}
specifier|public
name|DataOutputStream
name|getOutputStreamForEncoder
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataOut
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataBlockEncoding
name|getDataBlockEncoding
parameter_list|()
block|{
return|return
name|this
operator|.
name|encodingAlgo
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getHeaderSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|dummyHeader
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

