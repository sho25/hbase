begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * When deal with OutputStream which is not ByteBufferWriter type, wrap it with this class. We will  * have to write offheap ByteBuffer (DBB) data into the OS. This class is having a temp byte array  * to which we can copy the DBB data for writing to the OS.  *<br>  * This is used while writing Cell data to WAL. In case of AsyncWAL, the OS created there is  * ByteBufferWriter. But in case of FSHLog, the OS passed by DFS client, is not of type  * ByteBufferWriter. We will need this temp solution until DFS client supports writing ByteBuffer  * directly to the OS it creates.  *<br>  * Note: This class is not thread safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ByteBufferWriterOutputStream
extends|extends
name|OutputStream
implements|implements
name|ByteBufferWriter
block|{
specifier|private
specifier|static
specifier|final
name|int
name|TEMP_BUF_LENGTH
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|OutputStream
name|os
decl_stmt|;
specifier|private
name|byte
index|[]
name|tempBuf
init|=
literal|null
decl_stmt|;
specifier|public
name|ByteBufferWriterOutputStream
parameter_list|(
name|OutputStream
name|os
parameter_list|)
block|{
name|this
operator|.
name|os
operator|=
name|os
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuffer
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|TEMP_BUF_LENGTH
condition|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|tempBuf
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|tempBuf
operator|=
operator|new
name|byte
index|[
name|TEMP_BUF_LENGTH
index|]
expr_stmt|;
block|}
name|buf
operator|=
name|this
operator|.
name|tempBuf
expr_stmt|;
block|}
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|buf
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamUtils
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|os
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

