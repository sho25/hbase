begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|BaseConfigurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Provide an instance of a user. Allows custom {@link User} creation.  */
end_comment

begin_class
specifier|public
class|class
name|UserProvider
extends|extends
name|BaseConfigurable
block|{
specifier|private
specifier|static
specifier|final
name|String
name|USER_PROVIDER_CONF_KEY
init|=
literal|"hbase.client.userprovider.class"
decl_stmt|;
comment|/**    * Instantiate the {@link UserProvider} specified in the configuration and set the passed    * configuration via {@link UserProvider#setConf(Configuration)}    * @param conf to read and set on the created {@link UserProvider}    * @return a {@link UserProvider} ready for use.    */
specifier|public
specifier|static
name|UserProvider
name|instantiate
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|UserProvider
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|USER_PROVIDER_CONF_KEY
argument_list|,
name|UserProvider
operator|.
name|class
argument_list|,
name|UserProvider
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Set the {@link UserProvider} in the given configuration that should be instantiated    * @param conf to update    * @param provider class of the provider to set    */
specifier|public
specifier|static
name|void
name|setUserProviderForTesting
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UserProvider
argument_list|>
name|provider
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|USER_PROVIDER_CONF_KEY
argument_list|,
name|provider
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the userName for the current logged-in user.    * @throws IOException if the underlying user cannot be obtained    */
specifier|public
name|String
name|getCurrentUserName
parameter_list|()
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getCurrent
argument_list|()
decl_stmt|;
return|return
name|user
operator|==
literal|null
condition|?
literal|null
else|:
name|user
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * @return<tt>true</tt> if security is enabled,<tt>false</tt> otherwise    */
specifier|public
name|boolean
name|isHBaseSecurityEnabled
parameter_list|()
block|{
return|return
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|this
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return whether or not Kerberos authentication is configured for Hadoop. For non-secure Hadoop,    *         this always returns<code>false</code>. For secure Hadoop, it will return the value    *         from {@code UserGroupInformation.isSecurityEnabled()}.    */
specifier|public
name|boolean
name|isHadoopSecurityEnabled
parameter_list|()
block|{
return|return
name|User
operator|.
name|isSecurityEnabled
argument_list|()
return|;
block|}
comment|/**    * @return the current user within the current execution context    * @throws IOException if the user cannot be loaded    */
specifier|public
name|User
name|getCurrent
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|User
operator|.
name|getCurrent
argument_list|()
return|;
block|}
comment|/**    * Wraps an underlying {@code UserGroupInformation} instance.    * @param ugi The base Hadoop user    * @return User    */
specifier|public
name|User
name|create
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
return|return
name|User
operator|.
name|create
argument_list|(
name|ugi
argument_list|)
return|;
block|}
comment|/**    * Log in the current process using the given configuration keys for the credential file and login    * principal.    *<p>    *<strong>This is only applicable when running on secure Hadoop</strong> -- see    * org.apache.hadoop.security.SecurityUtil#login(Configuration,String,String,String). On regular    * Hadoop (without security features), this will safely be ignored.    *</p>    * @param conf The configuration data to use    * @param fileConfKey Property key used to configure path to the credential file    * @param principalConfKey Property key used to configure login principal    * @param localhost Current hostname to use in any credentials    * @throws IOException underlying exception from SecurityUtil.login() call    */
specifier|public
name|void
name|login
parameter_list|(
name|String
name|fileConfKey
parameter_list|,
name|String
name|principalConfKey
parameter_list|,
name|String
name|localhost
parameter_list|)
throws|throws
name|IOException
block|{
name|User
operator|.
name|login
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|fileConfKey
argument_list|,
name|principalConfKey
argument_list|,
name|localhost
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

