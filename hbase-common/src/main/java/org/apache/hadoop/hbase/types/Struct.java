begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PositionedByteRange
import|;
end_import

begin_comment
comment|/**  *<p>  * {@code Struct} is a simple {@link DataType} for implementing "compound  * rowkey" and "compound qualifier" schema design strategies.  *</p>  *<h3>Encoding</h3>  *<p>  * {@code Struct} member values are encoded onto the target byte[] in the order  * in which they are declared. A {@code Struct} may be used as a member of  * another {@code Struct}. {@code Struct}s are not {@code nullable} but their  * component fields may be.  *</p>  *<h3>Sort Order</h3>  *<p>  * {@code Struct} instances sort according to the composite order of their  * fields, that is, left-to-right and depth-first. This can also be thought of  * as lexicographic comparison of concatenated members.  *</p>  *<p>  * {@link StructIterator} is provided as a convenience for consuming the  * sequence of values. Users may find it more appropriate to provide their own  * custom {@link DataType} for encoding application objects rather than using  * this {@code Object[]} implementation. Examples are provided in test.  *</p>  * @see StructIterator  * @see DataType#isNullable()  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|Struct
implements|implements
name|DataType
argument_list|<
name|Object
index|[]
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
specifier|final
name|DataType
index|[]
name|fields
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|isOrderPreserving
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|isSkippable
decl_stmt|;
comment|/**    * Create a new {@code Struct} instance defined as the sequence of    * {@code HDataType}s in {@code memberTypes}.    *<p>    * A {@code Struct} is {@code orderPreserving} when all of its fields    * are {@code orderPreserving}. A {@code Struct} is {@code skippable} when    * all of its fields are {@code skippable}.    *</p>    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Struct
parameter_list|(
name|DataType
index|[]
name|memberTypes
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|memberTypes
expr_stmt|;
comment|// a Struct is not orderPreserving when any of its fields are not.
name|boolean
name|preservesOrder
init|=
literal|true
decl_stmt|;
comment|// a Struct is not skippable when any of its fields are not.
name|boolean
name|skippable
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DataType
name|dt
init|=
name|this
operator|.
name|fields
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|dt
operator|.
name|isOrderPreserving
argument_list|()
condition|)
name|preservesOrder
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|this
operator|.
name|fields
operator|.
name|length
operator|-
literal|2
operator|&&
operator|!
name|dt
operator|.
name|isSkippable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field in position "
operator|+
name|i
operator|+
literal|" is not skippable. Non-right-most struct fields must be skippable."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dt
operator|.
name|isSkippable
argument_list|()
condition|)
name|skippable
operator|=
literal|false
expr_stmt|;
block|}
name|this
operator|.
name|isOrderPreserving
operator|=
name|preservesOrder
expr_stmt|;
name|this
operator|.
name|isSkippable
operator|=
name|skippable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOrderPreserving
parameter_list|()
block|{
return|return
name|isOrderPreserving
return|;
block|}
annotation|@
name|Override
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNullable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSkippable
parameter_list|()
block|{
return|return
name|isSkippable
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|int
name|encodedLength
parameter_list|(
name|Object
index|[]
name|val
parameter_list|)
block|{
assert|assert
name|fields
operator|.
name|length
operator|==
name|val
operator|.
name|length
assert|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|sum
operator|+=
name|fields
index|[
name|i
index|]
operator|.
name|encodedLength
argument_list|(
name|val
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|sum
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|Object
index|[]
argument_list|>
name|encodedClass
parameter_list|()
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
comment|/**    * Retrieve an {@link Iterator} over the values encoded in {@code src}.    * {@code src}'s position is consumed by consuming this iterator.    */
specifier|public
name|StructIterator
name|iterator
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
return|return
operator|new
name|StructIterator
argument_list|(
name|src
argument_list|,
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|skip
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
name|StructIterator
name|it
init|=
name|iterator
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|int
name|skipped
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|skipped
operator|+=
name|it
operator|.
name|skip
argument_list|()
expr_stmt|;
return|return
name|skipped
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|decode
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|ret
init|=
operator|new
name|Object
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|iterator
argument_list|(
name|src
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Read the field at {@code index}. {@code src}'s position is not affected.    */
specifier|public
name|Object
name|decode
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|,
name|int
name|index
parameter_list|)
block|{
assert|assert
name|index
operator|>=
literal|0
assert|;
name|StructIterator
name|it
init|=
name|iterator
argument_list|(
name|src
operator|.
name|shallowCopy
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|index
operator|>
literal|0
condition|;
name|index
operator|--
control|)
name|it
operator|.
name|skip
argument_list|()
expr_stmt|;
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|int
name|encode
parameter_list|(
name|PositionedByteRange
name|dst
parameter_list|,
name|Object
index|[]
name|val
parameter_list|)
block|{
assert|assert
name|fields
operator|.
name|length
operator|==
name|val
operator|.
name|length
assert|;
name|int
name|written
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|written
operator|+=
name|fields
index|[
name|i
index|]
operator|.
name|encode
argument_list|(
name|dst
argument_list|,
name|val
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|written
return|;
block|}
block|}
end_class

end_unit

