begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This wraps the key portion of a Cell. Key includes rowkey, family, qualifier, timestamp and type  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CellKey
block|{
specifier|private
name|byte
index|[]
name|rowArray
decl_stmt|;
specifier|private
name|int
name|rowOffset
decl_stmt|;
specifier|private
name|int
name|rowLength
decl_stmt|;
specifier|private
name|byte
index|[]
name|familyArray
decl_stmt|;
specifier|private
name|int
name|familyOffset
decl_stmt|;
specifier|private
name|int
name|familyLength
decl_stmt|;
specifier|private
name|byte
index|[]
name|qualifierArray
decl_stmt|;
specifier|private
name|int
name|qualifierOffset
decl_stmt|;
specifier|private
name|int
name|qualifierLength
decl_stmt|;
specifier|private
name|long
name|ts
decl_stmt|;
specifier|private
name|byte
name|type
decl_stmt|;
specifier|public
name|CellKey
parameter_list|(
name|byte
index|[]
name|rowArray
parameter_list|,
name|int
name|rowOffset
parameter_list|,
name|int
name|rowLength
parameter_list|,
name|byte
index|[]
name|familyArray
parameter_list|,
name|int
name|familyOffset
parameter_list|,
name|int
name|familyLength
parameter_list|,
name|byte
index|[]
name|qualifierArray
parameter_list|,
name|int
name|qualifierOffset
parameter_list|,
name|int
name|qualifierLength
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
name|this
operator|.
name|rowArray
operator|=
name|rowArray
expr_stmt|;
name|this
operator|.
name|rowOffset
operator|=
name|rowOffset
expr_stmt|;
name|this
operator|.
name|rowLength
operator|=
name|rowLength
expr_stmt|;
name|this
operator|.
name|familyArray
operator|=
name|familyArray
expr_stmt|;
name|this
operator|.
name|familyOffset
operator|=
name|familyOffset
expr_stmt|;
name|this
operator|.
name|familyLength
operator|=
name|familyLength
expr_stmt|;
name|this
operator|.
name|qualifierArray
operator|=
name|qualifierArray
expr_stmt|;
name|this
operator|.
name|qualifierOffset
operator|=
name|qualifierOffset
expr_stmt|;
name|this
operator|.
name|qualifierLength
operator|=
name|qualifierLength
expr_stmt|;
name|this
operator|.
name|ts
operator|=
name|ts
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|row
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|rowArray
argument_list|,
name|rowOffset
argument_list|,
name|rowLength
argument_list|)
decl_stmt|;
name|String
name|family
init|=
operator|(
name|familyLength
operator|==
literal|0
operator|)
condition|?
literal|""
else|:
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|familyArray
argument_list|,
name|familyOffset
argument_list|,
name|familyLength
argument_list|)
decl_stmt|;
name|String
name|qualifier
init|=
operator|(
name|qualifierLength
operator|==
literal|0
operator|)
condition|?
literal|""
else|:
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|qualifierArray
argument_list|,
name|qualifierOffset
argument_list|,
name|qualifierLength
argument_list|)
decl_stmt|;
return|return
name|row
operator|+
literal|"/"
operator|+
name|family
operator|+
operator|(
name|family
operator|!=
literal|null
operator|&&
name|family
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|":"
else|:
literal|""
operator|)
operator|+
name|qualifier
operator|+
literal|"/"
operator|+
name|KeyValue
operator|.
name|humanReadableTimestamp
argument_list|(
name|ts
argument_list|)
operator|+
literal|"/"
operator|+
name|Type
operator|.
name|codeToType
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

