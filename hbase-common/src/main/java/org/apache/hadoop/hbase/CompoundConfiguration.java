begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Do a shallow merge of multiple KV configuration pools. This is a very useful  * utility class to easily add per-object configurations in addition to wider  * scope settings. This is different from Configuration.addResource()  * functionality, which performs a deep merge and mutates the common data  * structure.  *<p>  * The iterator on CompoundConfiguration is unmodifiable. Obtaining iterator is an expensive  * operation.  *<p>  * For clarity: the shallow merge allows the user to mutate either of the  * configuration objects and have changes reflected everywhere. In contrast to a  * deep merge, that requires you to explicitly know all applicable copies to  * propagate changes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CompoundConfiguration
extends|extends
name|Configuration
block|{
comment|/**    * Default Constructor. Initializes empty configuration    */
specifier|public
name|CompoundConfiguration
parameter_list|()
block|{   }
comment|// Devs: these APIs are the same contract as their counterparts in
comment|// Configuration.java
specifier|private
specifier|static
interface|interface
name|ImmutableConfigMap
extends|extends
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
block|{
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
name|String
name|getRaw
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
name|Class
argument_list|<
name|?
argument_list|>
name|getClassByName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
function_decl|;
name|int
name|size
parameter_list|()
function_decl|;
block|}
specifier|protected
name|List
argument_list|<
name|ImmutableConfigMap
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|ImmutableConfigMap
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Add Hadoop Configuration object to config list.    * The added configuration overrides the previous ones if there are name collisions.    * @param conf configuration object    * @return this, for builder pattern    */
specifier|public
name|CompoundConfiguration
name|add
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|instanceof
name|CompoundConfiguration
condition|)
block|{
name|this
operator|.
name|configs
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|CompoundConfiguration
operator|)
name|conf
operator|)
operator|.
name|configs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// put new config at the front of the list (top priority)
name|this
operator|.
name|configs
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|ImmutableConfigMap
argument_list|()
block|{
name|Configuration
name|c
init|=
name|conf
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|c
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|c
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRaw
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|c
operator|.
name|getRaw
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClassByName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
return|return
name|c
operator|.
name|getClassByName
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|c
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|c
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add ImmutableBytesWritable map to config list. This map is generally    * created by HTableDescriptor or HColumnDescriptor, but can be abstractly    * used. The added configuration overrides the previous ones if there are    * name collisions.    *    * @param map    *          ImmutableBytesWritable map    * @return this, for builder pattern    */
specifier|public
name|CompoundConfiguration
name|addWritableMap
parameter_list|(
specifier|final
name|Map
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|map
parameter_list|)
block|{
comment|// put new map at the front of the list (top priority)
name|this
operator|.
name|configs
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|ImmutableConfigMap
argument_list|()
block|{
name|Map
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|m
init|=
name|map
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|ImmutableBytesWritable
name|ibw
init|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|containsKey
argument_list|(
name|ibw
argument_list|)
condition|)
return|return
literal|null
return|;
name|ImmutableBytesWritable
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|ibw
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRaw
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClassByName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|m
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|m
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add String map to config list. This map is generally created by HTableDescriptor    * or HColumnDescriptor, but can be abstractly used. The added configuration    * overrides the previous ones if there are name collisions.    *    * @return this, for builder pattern    */
specifier|public
name|CompoundConfiguration
name|addStringMap
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
comment|// put new map at the front of the list (top priority)
name|this
operator|.
name|configs
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|ImmutableConfigMap
argument_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|map
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRaw
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClassByName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|m
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|m
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"CompoundConfiguration: "
operator|+
name|this
operator|.
name|configs
operator|.
name|size
argument_list|()
operator|+
literal|" configs"
argument_list|)
expr_stmt|;
for|for
control|(
name|ImmutableConfigMap
name|m
range|:
name|this
operator|.
name|configs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|configs
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|ImmutableConfigMap
name|m
range|:
name|this
operator|.
name|configs
control|)
block|{
name|String
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRaw
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|ImmutableConfigMap
name|m
range|:
name|this
operator|.
name|configs
control|)
block|{
name|String
name|value
init|=
name|m
operator|.
name|getRaw
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClassByName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
for|for
control|(
name|ImmutableConfigMap
name|m
range|:
name|this
operator|.
name|configs
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|value
init|=
name|m
operator|.
name|getClassByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
block|}
throw|throw
operator|new
name|ClassNotFoundException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ImmutableConfigMap
name|m
range|:
name|this
operator|.
name|configs
control|)
block|{
name|ret
operator|+=
name|m
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/***************************************************************************    * You should just ignore everything below this line unless there's a bug in    * Configuration.java...    *    * Below get APIs are directly copied from Configuration.java Oh, how I wish    * this wasn't so! A tragically-sad example of why you use interfaces instead    * of inheritance.    *    * Why the duplication? We basically need to override Configuration.getProps    * or we'd need protected access to Configuration.properties so we can modify    * that pointer. There are a bunch of functions in the base Configuration that    * call getProps() and we need to use our derived version instead of the base    * version. We need to make a generic implementation that works across all    * HDFS versions. We should modify Configuration.properties in HDFS 1.0 to be    * protected, but we still need to have this code until that patch makes it to    * all the HDFS versions we support.    ***************************************************************************/
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|ret
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|String
name|valueString
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
return|return
name|defaultValue
return|;
try|try
block|{
name|String
name|hexString
init|=
name|getHexDigits
argument_list|(
name|valueString
argument_list|)
decl_stmt|;
if|if
condition|(
name|hexString
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|hexString
argument_list|,
literal|16
argument_list|)
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|valueString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|String
name|valueString
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
return|return
name|defaultValue
return|;
try|try
block|{
name|String
name|hexString
init|=
name|getHexDigits
argument_list|(
name|valueString
argument_list|)
decl_stmt|;
if|if
condition|(
name|hexString
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|hexString
argument_list|,
literal|16
argument_list|)
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|valueString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
specifier|protected
name|String
name|getHexDigits
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|boolean
name|negative
init|=
literal|false
decl_stmt|;
name|String
name|str
init|=
name|value
decl_stmt|;
name|String
name|hexString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|negative
operator|=
literal|true
expr_stmt|;
name|str
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
literal|"0x"
argument_list|)
operator|||
name|str
operator|.
name|startsWith
argument_list|(
literal|"0X"
argument_list|)
condition|)
block|{
name|hexString
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|negative
condition|)
block|{
name|hexString
operator|=
literal|"-"
operator|+
name|hexString
expr_stmt|;
block|}
return|return
name|hexString
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|defaultValue
parameter_list|)
block|{
name|String
name|valueString
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
return|return
name|defaultValue
return|;
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|valueString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|valueString
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|valueString
argument_list|)
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|valueString
argument_list|)
condition|)
return|return
literal|false
return|;
else|else
return|return
name|defaultValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|IntegerRanges
name|getRange
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
operator|new
name|IntegerRanges
argument_list|(
name|get
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getStringCollection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|valueString
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|valueString
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getStrings
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|valueString
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|valueString
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getStrings
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|defaultValue
parameter_list|)
block|{
name|String
name|valueString
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
else|else
block|{
return|return
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|valueString
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getClasses
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|defaultValue
parameter_list|)
block|{
name|String
index|[]
name|classnames
init|=
name|getStrings
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|classnames
operator|==
literal|null
condition|)
return|return
name|defaultValue
return|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
name|classnames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classnames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|classes
index|[
name|i
index|]
operator|=
name|getClassByName
argument_list|(
name|classnames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|classes
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|defaultValue
parameter_list|)
block|{
name|String
name|valueString
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
return|return
name|defaultValue
return|;
try|try
block|{
return|return
name|getClassByName
argument_list|(
name|valueString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|U
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|U
argument_list|>
name|getClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|U
argument_list|>
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|U
argument_list|>
name|xface
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|theClass
init|=
name|getClass
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|theClass
operator|!=
literal|null
operator|&&
operator|!
name|xface
operator|.
name|isAssignableFrom
argument_list|(
name|theClass
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|+
literal|" not "
operator|+
name|xface
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
elseif|else
if|if
condition|(
name|theClass
operator|!=
literal|null
condition|)
return|return
name|theClass
operator|.
name|asSubclass
argument_list|(
name|xface
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*******************************************************************    * This class is immutable. Quickly abort any attempts to alter it *    *******************************************************************/
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|configs
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|ImmutableConfigMap
name|map
init|=
name|configs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|UnmodifiableIterator
operator|.
name|decorate
argument_list|(
name|ret
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setIfUnset
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInt
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLong
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBoolean
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBooleanIfUnset
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStrings
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|theClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|xface
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeXml
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Immutable Configuration"
argument_list|)
throw|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

