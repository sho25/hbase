begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PositionedByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SimplePositionedByteRange
import|;
end_import

begin_comment
comment|/**  * Wraps an existing {@code DataType} implementation as a terminated  * version of itself. This has the useful side-effect of turning an existing  * {@code DataType} which is not {@code skippable} into a  * {@code skippable} variant.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|TerminatedWrapper
parameter_list|<
name|T
parameter_list|>
implements|implements
name|DataType
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
specifier|final
name|DataType
argument_list|<
name|T
argument_list|>
name|wrapped
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|term
decl_stmt|;
comment|/**    * Create a terminated version of the {@code wrapped}.    * @throws IllegalArgumentException when {@code term} is null or empty.    */
specifier|public
name|TerminatedWrapper
parameter_list|(
name|DataType
argument_list|<
name|T
argument_list|>
name|wrapped
parameter_list|,
name|byte
index|[]
name|term
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|term
operator|||
name|term
operator|.
name|length
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"terminator must be non-null and non-empty."
argument_list|)
throw|;
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
name|wrapped
operator|.
name|getOrder
argument_list|()
operator|.
name|apply
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
comment|/**    * Create a terminated version of the {@code wrapped}.    * {@code term} is converted to a {@code byte[]} using    * {@link Bytes#toBytes(String)}.    * @throws IllegalArgumentException when {@code term} is null or empty.    */
specifier|public
name|TerminatedWrapper
parameter_list|(
name|DataType
argument_list|<
name|T
argument_list|>
name|wrapped
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|this
argument_list|(
name|wrapped
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOrderPreserving
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|isOrderPreserving
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getOrder
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNullable
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|isNullable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSkippable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|encodedLength
parameter_list|(
name|T
name|val
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|encodedLength
argument_list|(
name|val
argument_list|)
operator|+
name|term
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|encodedClass
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|encodedClass
argument_list|()
return|;
block|}
comment|/**    * Return the position at which {@code term} begins within {@code src},    * or {@code -1} if {@code term} is not found.    */
specifier|protected
name|int
name|terminatorPosition
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
name|byte
index|[]
name|a
init|=
name|src
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|src
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
name|SKIP
label|:
for|for
control|(
name|i
operator|=
name|src
operator|.
name|getPosition
argument_list|()
init|;
name|i
operator|<
name|src
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|a
index|[
name|offset
operator|+
name|i
index|]
operator|!=
name|term
index|[
literal|0
index|]
condition|)
continue|continue;
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
literal|1
init|;
name|j
operator|<
name|term
operator|.
name|length
operator|&&
name|offset
operator|+
name|j
operator|<
name|src
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|a
index|[
name|offset
operator|+
name|i
operator|+
name|j
index|]
operator|!=
name|term
index|[
name|j
index|]
condition|)
continue|continue
name|SKIP
continue|;
block|}
if|if
condition|(
name|j
operator|==
name|term
operator|.
name|length
condition|)
return|return
name|i
return|;
comment|// success
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Skip {@code src}'s position forward over one encoded value.    * @param src the buffer containing the encoded value.    * @return number of bytes skipped.    * @throws IllegalArgumentException when the terminator sequence is not found.    */
annotation|@
name|Override
specifier|public
name|int
name|skip
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
if|if
condition|(
name|wrapped
operator|.
name|isSkippable
argument_list|()
condition|)
block|{
name|int
name|ret
init|=
name|wrapped
operator|.
name|skip
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|src
operator|.
name|setPosition
argument_list|(
name|src
operator|.
name|getPosition
argument_list|()
operator|+
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
operator|+
name|term
operator|.
name|length
return|;
block|}
else|else
block|{
comment|// find the terminator position
specifier|final
name|int
name|start
init|=
name|src
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|int
name|skipped
init|=
name|terminatorPosition
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|skipped
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Terminator sequence not found."
argument_list|)
throw|;
name|skipped
operator|+=
name|term
operator|.
name|length
expr_stmt|;
name|src
operator|.
name|setPosition
argument_list|(
name|skipped
argument_list|)
expr_stmt|;
return|return
name|skipped
operator|-
name|start
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|T
name|decode
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
if|if
condition|(
name|wrapped
operator|.
name|isSkippable
argument_list|()
condition|)
block|{
name|T
name|ret
init|=
name|wrapped
operator|.
name|decode
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|src
operator|.
name|setPosition
argument_list|(
name|src
operator|.
name|getPosition
argument_list|()
operator|+
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
comment|// find the terminator position
name|int
name|term
init|=
name|terminatorPosition
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|term
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Terminator sequence not found."
argument_list|)
throw|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|term
operator|-
name|src
operator|.
name|getPosition
argument_list|()
index|]
decl_stmt|;
name|src
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// TODO: should we assert that b.position == b.length?
name|T
name|ret
init|=
name|wrapped
operator|.
name|decode
argument_list|(
operator|new
name|SimplePositionedByteRange
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
name|src
operator|.
name|get
argument_list|(
name|this
operator|.
name|term
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
comment|/**    * Write instance {@code val} into buffer {@code dst}.    * @throws IllegalArgumentException when the encoded representation of    *           {@code val} contains the {@code term} sequence.    */
annotation|@
name|Override
specifier|public
name|int
name|encode
parameter_list|(
name|PositionedByteRange
name|dst
parameter_list|,
name|T
name|val
parameter_list|)
block|{
specifier|final
name|int
name|start
init|=
name|dst
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|int
name|written
init|=
name|wrapped
operator|.
name|encode
argument_list|(
name|dst
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|PositionedByteRange
name|b
init|=
name|dst
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|b
operator|.
name|setLength
argument_list|(
name|dst
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setPosition
argument_list|(
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
literal|1
operator|!=
name|terminatorPosition
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|dst
operator|.
name|setPosition
argument_list|(
name|start
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Encoded value contains terminator sequence."
argument_list|)
throw|;
block|}
name|dst
operator|.
name|put
argument_list|(
name|term
argument_list|)
expr_stmt|;
return|return
name|written
operator|+
name|term
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

