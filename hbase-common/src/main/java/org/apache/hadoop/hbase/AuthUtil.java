begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility methods for helping with security tasks. Downstream users  * may rely on this class to handle authenticating via keytab where  * long running services need access to a secure HBase cluster.  *  * Callers must ensure:  *  *<ul>  *<li>HBase configuration files are in the Classpath  *<li>hbase.client.keytab.file points to a valid keytab on the local filesystem  *<li>hbase.client.kerberos.principal gives the Kerberos principal to use  *</ul>  *  *<pre>  * {@code  *   ChoreService choreService = null;  *   // Presumes HBase configuration files are on the classpath  *   final Configuration conf = HBaseConfiguration.create();  *   final ScheduledChore authChore = AuthUtil.getAuthChore(conf);  *   if (authChore != null) {  *     choreService = new ChoreService("MY_APPLICATION");  *     choreService.scheduleChore(authChore);  *   }  *   try {  *     // do application work  *   } finally {  *     if (choreService != null) {  *       choreService.shutdown();  *     }  *   }  * }  *</pre>  *  * See the "Running Canary in a Kerberos-enabled Cluster" section of the HBase Reference Guide for  * an example of configuring a user of this Auth Chore to run on a secure cluster.  *<pre>  *</pre>  * This class will be internal use only from 2.2.0 version, and will transparently work  * for kerberized applications. For more, please refer  *<a href="http://hbase.apache.org/book.html#hbase.secure.configuration">Client-side Configuration for Secure Operation</a>  *  * @deprecated since 2.2.0, to be removed in hbase-3.0.0.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|final
class|class
name|AuthUtil
block|{
comment|// TODO: Mark this class InterfaceAudience.Private from 3.0.0
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Prefix character to denote group names */
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_PREFIX
init|=
literal|"@"
decl_stmt|;
comment|/** Client keytab file */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_KEYTAB_FILE
init|=
literal|"hbase.client.keytab.file"
decl_stmt|;
comment|/** Client principal */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
init|=
literal|"hbase.client.keytab.principal"
decl_stmt|;
specifier|private
name|AuthUtil
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * For kerberized cluster, return login user (from kinit or from keytab if specified).    * For non-kerberized cluster, return system user.    * @param conf configuartion file    * @return user    * @throws IOException login exception    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|User
name|loginClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserProvider
name|provider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|provider
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
name|boolean
name|securityOn
init|=
name|provider
operator|.
name|isHBaseSecurityEnabled
argument_list|()
operator|&&
name|provider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|securityOn
condition|)
block|{
name|boolean
name|fromKeytab
init|=
name|provider
operator|.
name|shouldLoginFromKeytab
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getUGI
argument_list|()
operator|.
name|hasKerberosCredentials
argument_list|()
condition|)
block|{
comment|// There's already a login user.
comment|// But we should avoid misuse credentials which is a dangerous security issue,
comment|// so here check whether user specified a keytab and a principal:
comment|// 1. Yes, check if user principal match.
comment|//    a. match, just return.
comment|//    b. mismatch, login using keytab.
comment|// 2. No, user may login through kinit, this is the old way, also just return.
if|if
condition|(
name|fromKeytab
condition|)
block|{
return|return
name|checkPrincipalMatch
argument_list|(
name|conf
argument_list|,
name|user
operator|.
name|getUGI
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|?
name|user
else|:
name|loginFromKeytabAndReturnUser
argument_list|(
name|provider
argument_list|)
return|;
block|}
return|return
name|user
return|;
block|}
elseif|else
if|if
condition|(
name|fromKeytab
condition|)
block|{
comment|// Kerberos is on and client specify a keytab and principal, but client doesn't login yet.
return|return
name|loginFromKeytabAndReturnUser
argument_list|(
name|provider
argument_list|)
return|;
block|}
block|}
return|return
name|user
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkPrincipalMatch
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|loginUserName
parameter_list|)
block|{
name|String
name|configuredUserName
init|=
name|conf
operator|.
name|get
argument_list|(
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
name|configuredUserName
operator|.
name|equals
argument_list|(
name|loginUserName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to login with a different user: {}, existed user is {}."
argument_list|,
name|configuredUserName
argument_list|,
name|loginUserName
argument_list|)
expr_stmt|;
block|}
return|return
name|match
return|;
block|}
specifier|private
specifier|static
name|User
name|loginFromKeytabAndReturnUser
parameter_list|(
name|UserProvider
name|provider
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|provider
operator|.
name|login
argument_list|(
name|HBASE_CLIENT_KEYTAB_FILE
argument_list|,
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while trying to login as user {} through {}, with message: {}."
argument_list|,
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
argument_list|,
name|HBASE_CLIENT_KEYTAB_FILE
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
return|return
name|provider
operator|.
name|getCurrent
argument_list|()
return|;
block|}
comment|/**    * For kerberized cluster, return login user (from kinit or from keytab).    * Principal should be the following format: name/fully.qualified.domain.name@REALM.    * For non-kerberized cluster, return system user.    *<p>    * NOT recommend to use to method unless you're sure what you're doing, it is for canary only.    * Please use User#loginClient.    * @param conf configuration file    * @return user    * @throws IOException login exception    */
specifier|private
specifier|static
name|User
name|loginClientAsService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserProvider
name|provider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|.
name|isHBaseSecurityEnabled
argument_list|()
operator|&&
name|provider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|provider
operator|.
name|shouldLoginFromKeytab
argument_list|()
condition|)
block|{
name|String
name|host
init|=
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.client.dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.client.dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|provider
operator|.
name|login
argument_list|(
name|HBASE_CLIENT_KEYTAB_FILE
argument_list|,
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error resolving host name: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while trying to perform the initial login: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|provider
operator|.
name|getCurrent
argument_list|()
return|;
block|}
comment|/**    * Checks if security is enabled and if so, launches chore for refreshing kerberos ticket.    * @return a ScheduledChore for renewals.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|ScheduledChore
name|getAuthRenewalChore
parameter_list|(
specifier|final
name|UserGroupInformation
name|user
parameter_list|)
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|hasKerberosCredentials
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Stoppable
name|stoppable
init|=
name|createDummyStoppable
argument_list|()
decl_stmt|;
comment|// if you're in debug mode this is useful to avoid getting spammed by the getTGT()
comment|// you can increase this, keeping in mind that the default refresh window is 0.8
comment|// e.g. 5min tgt * 0.8 = 4min refresh so interval is better be way less than 1min
specifier|final
name|int
name|CHECK_TGT_INTERVAL
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
comment|// 30sec
return|return
operator|new
name|ScheduledChore
argument_list|(
literal|"RefreshCredentials"
argument_list|,
name|stoppable
argument_list|,
name|CHECK_TGT_INTERVAL
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
name|user
operator|.
name|checkTGTAndReloginFromKeytab
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception while trying to refresh credentials: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
comment|/**    * Checks if security is enabled and if so, launches chore for refreshing kerberos ticket.    * @param conf the hbase service configuration    * @return a ScheduledChore for renewals, if needed, and null otherwise.    * @deprecated Deprecated since 2.2.0, this method will be internal use only after 3.0.0.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|ScheduledChore
name|getAuthChore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Mark this method InterfaceAudience.Private from 3.0.0
name|User
name|user
init|=
name|loginClientAsService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|getAuthRenewalChore
argument_list|(
name|user
operator|.
name|getUGI
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Stoppable
name|createDummyStoppable
parameter_list|()
block|{
return|return
operator|new
name|Stoppable
argument_list|()
block|{
specifier|private
specifier|volatile
name|boolean
name|isStopped
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|isStopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|isStopped
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns whether or not the given name should be interpreted as a group    * principal.  Currently this simply checks if the name starts with the    * special group prefix character ("@").    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|boolean
name|isGroupPrincipal
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
name|GROUP_PREFIX
argument_list|)
return|;
block|}
comment|/**    * Returns the actual name for a group principal (stripped of the    * group prefix).    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|String
name|getGroupName
parameter_list|(
name|String
name|aclKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isGroupPrincipal
argument_list|(
name|aclKey
argument_list|)
condition|)
block|{
return|return
name|aclKey
return|;
block|}
return|return
name|aclKey
operator|.
name|substring
argument_list|(
name|GROUP_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the group entry with the group prefix for a group principal.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|String
name|toGroupEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|GROUP_PREFIX
operator|+
name|name
return|;
block|}
block|}
end_class

end_unit

