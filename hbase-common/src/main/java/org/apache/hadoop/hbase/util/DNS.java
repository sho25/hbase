begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|NonNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Wrapper around Hadoop's DNS class to hide reflection.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"REC_CATCH_EXCEPTION"
argument_list|,
name|justification
operator|=
literal|"If exception, presume HAS_NEW_DNS_GET_DEFAULT_HOST_API false"
argument_list|)
specifier|public
specifier|final
class|class
name|DNS
block|{
comment|// key to the config parameter of server hostname
comment|// the specification of server hostname is optional. The hostname should be resolvable from
comment|// both master and region server
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|RS_HOSTNAME_KEY
init|=
literal|"hbase.regionserver.hostname"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|CONFIG
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_HOSTNAME_KEY
init|=
literal|"hbase.master.hostname"
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|HAS_NEW_DNS_GET_DEFAULT_HOST_API
decl_stmt|;
specifier|private
specifier|static
name|Method
name|GET_DEFAULT_HOST_METHOD
decl_stmt|;
static|static
block|{
try|try
block|{
name|GET_DEFAULT_HOST_METHOD
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getDefaultHost"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|HAS_NEW_DNS_GET_DEFAULT_HOST_API
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|HAS_NEW_DNS_GET_DEFAULT_HOST_API
operator|=
literal|false
expr_stmt|;
comment|// FindBugs: Causes REC_CATCH_EXCEPTION. Suppressed
block|}
block|}
specifier|public
enum|enum
name|ServerType
block|{
name|MASTER
argument_list|(
literal|"master"
argument_list|)
block|,
name|REGIONSERVER
argument_list|(
literal|"regionserver"
argument_list|)
block|;
specifier|private
name|String
name|name
decl_stmt|;
name|ServerType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
specifier|private
name|DNS
parameter_list|()
block|{}
comment|/**    * Wrapper around DNS.getDefaultHost(String, String), calling    * DNS.getDefaultHost(String, String, boolean) when available.    *    * @param strInterface The network interface to query.    * @param nameserver The DNS host name.    * @return The default host names associated with IPs bound to the network interface.    */
specifier|public
specifier|static
name|String
name|getDefaultHost
parameter_list|(
name|String
name|strInterface
parameter_list|,
name|String
name|nameserver
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|HAS_NEW_DNS_GET_DEFAULT_HOST_API
condition|)
block|{
try|try
block|{
comment|// Hadoop-2.8 includes a String, String, boolean variant of getDefaultHost
comment|// which properly handles multi-homed systems with Kerberos.
return|return
operator|(
name|String
operator|)
name|GET_DEFAULT_HOST_METHOD
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|strInterface
argument_list|,
name|nameserver
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// If we can't invoke the method as it should exist, throw an exception
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to invoke DNS.getDefaultHost via reflection"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|strInterface
argument_list|,
name|nameserver
argument_list|)
return|;
block|}
block|}
comment|/**    * Get the configured hostname for a given ServerType. Gets the default hostname if not specified    * in the configuration.    * @param conf Configuration to look up.    * @param serverType ServerType to look up in the configuration for overrides.    */
specifier|public
specifier|static
name|String
name|getHostname
parameter_list|(
annotation|@
name|NonNull
name|Configuration
name|conf
parameter_list|,
annotation|@
name|NonNull
name|ServerType
name|serverType
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|String
name|hostname
decl_stmt|;
switch|switch
condition|(
name|serverType
condition|)
block|{
case|case
name|MASTER
case|:
name|hostname
operator|=
name|conf
operator|.
name|get
argument_list|(
name|MASTER_HOSTNAME_KEY
argument_list|)
expr_stmt|;
break|break;
case|case
name|REGIONSERVER
case|:
name|hostname
operator|=
name|conf
operator|.
name|get
argument_list|(
name|RS_HOSTNAME_KEY
argument_list|)
expr_stmt|;
break|break;
default|default:
name|hostname
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|hostname
operator|==
literal|null
operator|||
name|hostname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase."
operator|+
name|serverType
operator|.
name|getName
argument_list|()
operator|+
literal|".dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase."
operator|+
name|serverType
operator|.
name|getName
argument_list|()
operator|+
literal|".dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|hostname
return|;
block|}
block|}
block|}
end_class

end_unit

