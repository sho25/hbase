begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|aes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|CryptoCipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|crypto
operator|.
name|utils
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|ShortBufferException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|IvParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidAlgorithmParameterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * AES encryption and decryption.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|CryptoAES
block|{
specifier|private
specifier|final
name|CryptoCipher
name|encryptor
decl_stmt|;
specifier|private
specifier|final
name|CryptoCipher
name|decryptor
decl_stmt|;
specifier|private
specifier|final
name|Integrity
name|integrity
decl_stmt|;
specifier|public
name|CryptoAES
parameter_list|(
name|String
name|transformation
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|byte
index|[]
name|inKey
parameter_list|,
name|byte
index|[]
name|outKey
parameter_list|,
name|byte
index|[]
name|inIv
parameter_list|,
name|byte
index|[]
name|outIv
parameter_list|)
throws|throws
name|IOException
block|{
name|checkTransformation
argument_list|(
name|transformation
argument_list|)
expr_stmt|;
comment|// encryptor
name|encryptor
operator|=
name|Utils
operator|.
name|getCipherInstance
argument_list|(
name|transformation
argument_list|,
name|properties
argument_list|)
expr_stmt|;
try|try
block|{
name|SecretKeySpec
name|outKEYSpec
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|outKey
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|IvParameterSpec
name|outIVSpec
init|=
operator|new
name|IvParameterSpec
argument_list|(
name|outIv
argument_list|)
decl_stmt|;
name|encryptor
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|outKEYSpec
argument_list|,
name|outIVSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
decl||
name|InvalidAlgorithmParameterException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to initialize encryptor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// decryptor
name|decryptor
operator|=
name|Utils
operator|.
name|getCipherInstance
argument_list|(
name|transformation
argument_list|,
name|properties
argument_list|)
expr_stmt|;
try|try
block|{
name|SecretKeySpec
name|inKEYSpec
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|inKey
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|IvParameterSpec
name|inIVSpec
init|=
operator|new
name|IvParameterSpec
argument_list|(
name|inIv
argument_list|)
decl_stmt|;
name|decryptor
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|inKEYSpec
argument_list|,
name|inIVSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
decl||
name|InvalidAlgorithmParameterException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to initialize decryptor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|integrity
operator|=
operator|new
name|Integrity
argument_list|(
name|outKey
argument_list|,
name|inKey
argument_list|)
expr_stmt|;
block|}
comment|/**    * Encrypts input data. The result composes of (msg, padding if needed, mac) and sequence num.    * @param data the input byte array    * @param offset the offset in input where the input starts    * @param len the input length    * @return the new encrypted byte array.    * @throws SaslException if error happens    */
specifier|public
name|byte
index|[]
name|wrap
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SaslException
block|{
comment|// mac
name|byte
index|[]
name|mac
init|=
name|integrity
operator|.
name|getHMAC
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|integrity
operator|.
name|incMySeqNum
argument_list|()
expr_stmt|;
comment|// encrypt
name|byte
index|[]
name|encrypted
init|=
operator|new
name|byte
index|[
name|len
operator|+
literal|10
index|]
decl_stmt|;
try|try
block|{
name|int
name|n
init|=
name|encryptor
operator|.
name|update
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|encrypted
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|encryptor
operator|.
name|update
argument_list|(
name|mac
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|encrypted
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ShortBufferException
name|sbe
parameter_list|)
block|{
comment|// this should not happen
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Error happens during encrypt data"
argument_list|,
name|sbe
argument_list|)
throw|;
block|}
comment|// append seqNum used for mac
name|byte
index|[]
name|wrapped
init|=
operator|new
name|byte
index|[
name|encrypted
operator|.
name|length
operator|+
literal|4
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|encrypted
argument_list|,
literal|0
argument_list|,
name|wrapped
argument_list|,
literal|0
argument_list|,
name|encrypted
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|integrity
operator|.
name|getSeqNum
argument_list|()
argument_list|,
literal|0
argument_list|,
name|wrapped
argument_list|,
name|encrypted
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|wrapped
return|;
block|}
comment|/**    * Decrypts input data. The input composes of (msg, padding if needed, mac) and sequence num.    * The result is msg.    * @param data the input byte array    * @param offset the offset in input where the input starts    * @param len the input length    * @return the new decrypted byte array.    * @throws SaslException if error happens    */
specifier|public
name|byte
index|[]
name|unwrap
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SaslException
block|{
comment|// get plaintext and seqNum
name|byte
index|[]
name|decrypted
init|=
operator|new
name|byte
index|[
name|len
operator|-
literal|4
index|]
decl_stmt|;
name|byte
index|[]
name|peerSeqNum
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
try|try
block|{
name|decryptor
operator|.
name|update
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
operator|-
literal|4
argument_list|,
name|decrypted
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ShortBufferException
name|sbe
parameter_list|)
block|{
comment|// this should not happen
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Error happens during decrypt data"
argument_list|,
name|sbe
argument_list|)
throw|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|offset
operator|+
name|decrypted
operator|.
name|length
argument_list|,
name|peerSeqNum
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// get msg and mac
name|byte
index|[]
name|msg
init|=
operator|new
name|byte
index|[
name|decrypted
operator|.
name|length
operator|-
literal|10
index|]
decl_stmt|;
name|byte
index|[]
name|mac
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|decrypted
argument_list|,
literal|0
argument_list|,
name|msg
argument_list|,
literal|0
argument_list|,
name|msg
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|decrypted
argument_list|,
name|msg
operator|.
name|length
argument_list|,
name|mac
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// check mac integrity and msg sequence
if|if
condition|(
operator|!
name|integrity
operator|.
name|compareHMAC
argument_list|(
name|mac
argument_list|,
name|peerSeqNum
argument_list|,
name|msg
argument_list|,
literal|0
argument_list|,
name|msg
operator|.
name|length
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Unmatched MAC"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|integrity
operator|.
name|comparePeerSeqNum
argument_list|(
name|peerSeqNum
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Out of order sequencing of messages. Got: "
operator|+
name|integrity
operator|.
name|byteToInt
argument_list|(
name|peerSeqNum
argument_list|)
operator|+
literal|" Expected: "
operator|+
name|integrity
operator|.
name|peerSeqNum
argument_list|)
throw|;
block|}
name|integrity
operator|.
name|incPeerSeqNum
argument_list|()
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|private
name|void
name|checkTransformation
parameter_list|(
name|String
name|transformation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"AES/CTR/NoPadding"
operator|.
name|equalsIgnoreCase
argument_list|(
name|transformation
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"AES cipher transformation is not supported: "
operator|+
name|transformation
argument_list|)
throw|;
block|}
comment|/**    * Helper class for providing integrity protection.    */
specifier|private
specifier|static
class|class
name|Integrity
block|{
specifier|private
name|int
name|mySeqNum
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|peerSeqNum
init|=
literal|0
decl_stmt|;
specifier|private
name|byte
index|[]
name|seqNum
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
specifier|private
name|byte
index|[]
name|myKey
decl_stmt|;
specifier|private
name|byte
index|[]
name|peerKey
decl_stmt|;
name|Integrity
parameter_list|(
name|byte
index|[]
name|outKey
parameter_list|,
name|byte
index|[]
name|inKey
parameter_list|)
throws|throws
name|IOException
block|{
name|myKey
operator|=
name|outKey
expr_stmt|;
name|peerKey
operator|=
name|inKey
expr_stmt|;
block|}
name|byte
index|[]
name|getHMAC
parameter_list|(
name|byte
index|[]
name|msg
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SaslException
block|{
name|intToByte
argument_list|(
name|mySeqNum
argument_list|)
expr_stmt|;
return|return
name|calculateHMAC
argument_list|(
name|myKey
argument_list|,
name|seqNum
argument_list|,
name|msg
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
name|boolean
name|compareHMAC
parameter_list|(
name|byte
index|[]
name|expectedHMAC
parameter_list|,
name|byte
index|[]
name|peerSeqNum
parameter_list|,
name|byte
index|[]
name|msg
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SaslException
block|{
name|byte
index|[]
name|mac
init|=
name|calculateHMAC
argument_list|(
name|peerKey
argument_list|,
name|peerSeqNum
argument_list|,
name|msg
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|mac
argument_list|,
name|expectedHMAC
argument_list|)
return|;
block|}
name|boolean
name|comparePeerSeqNum
parameter_list|(
name|byte
index|[]
name|peerSeqNum
parameter_list|)
block|{
return|return
name|this
operator|.
name|peerSeqNum
operator|==
name|byteToInt
argument_list|(
name|peerSeqNum
argument_list|)
return|;
block|}
name|byte
index|[]
name|getSeqNum
parameter_list|()
block|{
return|return
name|seqNum
return|;
block|}
name|void
name|incMySeqNum
parameter_list|()
block|{
name|mySeqNum
operator|++
expr_stmt|;
block|}
name|void
name|incPeerSeqNum
parameter_list|()
block|{
name|peerSeqNum
operator|++
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|calculateHMAC
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|seqNum
parameter_list|,
name|byte
index|[]
name|msg
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SaslException
block|{
name|byte
index|[]
name|seqAndMsg
init|=
operator|new
name|byte
index|[
literal|4
operator|+
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|seqNum
argument_list|,
literal|0
argument_list|,
name|seqAndMsg
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|msg
argument_list|,
name|start
argument_list|,
name|seqAndMsg
argument_list|,
literal|4
argument_list|,
name|len
argument_list|)
expr_stmt|;
try|try
block|{
name|SecretKey
name|keyKi
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|key
argument_list|,
literal|"HmacMD5"
argument_list|)
decl_stmt|;
name|Mac
name|m
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacMD5"
argument_list|)
decl_stmt|;
name|m
operator|.
name|init
argument_list|(
name|keyKi
argument_list|)
expr_stmt|;
name|m
operator|.
name|update
argument_list|(
name|seqAndMsg
argument_list|)
expr_stmt|;
name|byte
index|[]
name|hMAC_MD5
init|=
name|m
operator|.
name|doFinal
argument_list|()
decl_stmt|;
comment|/* First 10 bytes of HMAC_MD5 digest */
name|byte
name|macBuffer
index|[]
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|hMAC_MD5
argument_list|,
literal|0
argument_list|,
name|macBuffer
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
name|macBuffer
return|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Invalid bytes used for key of HMAC-MD5 hash."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Error creating instance of MD5 MAC algorithm"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|intToByte
parameter_list|(
name|int
name|num
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|seqNum
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|num
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|num
operator|>>>=
literal|8
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|byteToInt
parameter_list|(
name|byte
index|[]
name|seqNum
parameter_list|)
block|{
name|int
name|answer
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|answer
operator|<<=
literal|8
expr_stmt|;
name|answer
operator||=
operator|(
operator|(
name|int
operator|)
name|seqNum
index|[
name|i
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
block|}
end_class

end_unit

