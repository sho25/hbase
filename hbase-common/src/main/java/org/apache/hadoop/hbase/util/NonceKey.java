begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**    * This implementation is not smart and just treats nonce group and nonce as random bits.    */
end_comment

begin_comment
comment|// TODO: we could use pure byte arrays, but then we wouldn't be able to use hash map.
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NonceKey
block|{
specifier|private
name|long
name|group
decl_stmt|;
specifier|private
name|long
name|nonce
decl_stmt|;
specifier|public
name|NonceKey
parameter_list|(
name|long
name|group
parameter_list|,
name|long
name|nonce
parameter_list|)
block|{
assert|assert
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
assert|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|nonce
operator|=
name|nonce
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|NonceKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NonceKey
name|nk
init|=
operator|(
operator|(
name|NonceKey
operator|)
name|obj
operator|)
decl_stmt|;
return|return
name|this
operator|.
name|nonce
operator|==
name|nk
operator|.
name|nonce
operator|&&
name|this
operator|.
name|group
operator|==
name|nk
operator|.
name|group
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|group
operator|>>
literal|32
operator|)
operator|^
name|group
operator|^
operator|(
name|nonce
operator|>>
literal|32
operator|)
operator|^
name|nonce
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|group
operator|+
literal|":"
operator|+
name|nonce
operator|+
literal|"]"
return|;
block|}
specifier|public
name|long
name|getNonceGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
specifier|public
name|long
name|getNonce
parameter_list|()
block|{
return|return
name|nonce
return|;
block|}
block|}
end_class

end_unit

