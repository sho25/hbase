begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|IndividualBytesFieldCell
implements|implements
name|ExtendedCell
block|{
specifier|private
specifier|static
specifier|final
name|long
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|align
argument_list|(
comment|// do alignment(padding gap)
name|ClassSize
operator|.
name|OBJECT
comment|// object header
operator|+
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
comment|// timestamp and type
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
comment|// sequence id
operator|+
literal|5
operator|*
name|ClassSize
operator|.
name|REFERENCE
argument_list|)
decl_stmt|;
comment|// references to all byte arrays: row, family, qualifier, value, tags
comment|// The following fields are backed by individual byte arrays
specifier|private
name|byte
index|[]
name|row
decl_stmt|;
specifier|private
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
name|byte
index|[]
name|qualifier
decl_stmt|;
specifier|private
name|byte
index|[]
name|value
decl_stmt|;
specifier|private
name|byte
index|[]
name|tags
decl_stmt|;
comment|// A byte array, rather than an array of org.apache.hadoop.hbase.Tag
comment|// Other fields
specifier|private
name|long
name|timestamp
decl_stmt|;
specifier|private
name|byte
name|type
decl_stmt|;
comment|// A byte, rather than org.apache.hadoop.hbase.KeyValue.Type
specifier|private
name|long
name|seqId
decl_stmt|;
specifier|public
name|IndividualBytesFieldCell
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|KeyValue
operator|.
name|Type
name|type
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
literal|0L
comment|/* sequence id */
argument_list|,
name|value
argument_list|,
literal|null
comment|/* tags */
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndividualBytesFieldCell
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|KeyValue
operator|.
name|Type
name|type
parameter_list|,
name|long
name|seqId
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
comment|// Check row, family, qualifier and value
name|KeyValue
operator|.
name|checkParameters
argument_list|(
name|row
argument_list|,
operator|(
name|row
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|row
operator|.
name|length
argument_list|,
comment|// row and row length
name|family
argument_list|,
operator|(
name|family
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|family
operator|.
name|length
argument_list|,
comment|// family and family length
operator|(
name|qualifier
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|qualifier
operator|.
name|length
argument_list|,
comment|// qualifier length
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// value length
comment|// Check timestamp
if|if
condition|(
name|timestamp
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Timestamp cannot be negative. ts="
operator|+
name|timestamp
argument_list|)
throw|;
block|}
comment|// Check tags
name|TagUtil
operator|.
name|checkForTagsLength
argument_list|(
operator|(
name|tags
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|tags
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// No local copy is made, but reference to the input directly
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
comment|// Set others
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|this
operator|.
name|seqId
operator|=
name|seqId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|withTags
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Key length and then value length
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|KeyValueUtil
operator|.
name|keyLength
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Key
name|CellUtil
operator|.
name|writeFlatKey
argument_list|(
name|this
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// Value
name|out
operator|.
name|write
argument_list|(
name|getValueArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Tags length and tags byte array
if|if
condition|(
name|withTags
operator|&&
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Tags length
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|tags
operator|.
name|length
operator|>>
literal|8
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
name|tags
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tags byte array
name|out
operator|.
name|write
argument_list|(
name|tags
argument_list|)
expr_stmt|;
block|}
return|return
name|getSerializedSize
argument_list|(
name|withTags
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|KeyValueUtil
operator|.
name|appendTo
argument_list|(
name|this
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|(
name|boolean
name|withTags
parameter_list|)
block|{
return|return
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|getRowLength
argument_list|()
argument_list|,
name|getFamilyLength
argument_list|()
argument_list|,
name|getQualifierLength
argument_list|()
argument_list|,
name|getValueLength
argument_list|()
argument_list|,
name|getTagsLength
argument_list|()
argument_list|,
name|withTags
argument_list|)
return|;
block|}
specifier|private
name|long
name|heapOverhead
parameter_list|()
block|{
return|return
name|FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|ARRAY
comment|// row      , can not be null
operator|+
operator|(
operator|(
name|family
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ClassSize
operator|.
name|ARRAY
operator|)
comment|// family   , can be null
operator|+
operator|(
operator|(
name|qualifier
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ClassSize
operator|.
name|ARRAY
operator|)
comment|// qualifier, can be null
operator|+
operator|(
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ClassSize
operator|.
name|ARRAY
operator|)
comment|// value    , can be null
operator|+
operator|(
operator|(
name|tags
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ClassSize
operator|.
name|ARRAY
operator|)
return|;
comment|// tags     , can be null
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|deepClone
parameter_list|()
block|{
comment|// When being added to the memstore, deepClone() is called and KeyValue has less heap overhead.
return|return
operator|new
name|KeyValue
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Implement Cell interface    */
comment|// 1) Row
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
comment|// If row is null, the constructor will reject it, by {@link KeyValue#checkParameters()},
comment|// so it is safe to return row without checking.
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
comment|// If row is null or row.length is invalid, the constructor will reject it, by {@link KeyValue#checkParameters()},
comment|// so it is safe to call row.length and make the type conversion.
return|return
call|(
name|short
call|)
argument_list|(
name|row
operator|.
name|length
argument_list|)
return|;
block|}
comment|// 2) Family
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
comment|// Family could be null
return|return
operator|(
name|family
operator|==
literal|null
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|family
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
comment|// If family.length is invalid, the constructor will reject it, by {@link KeyValue#checkParameters()},
comment|// so it is safe to make the type conversion.
comment|// But need to consider the condition when family is null.
return|return
operator|(
name|family
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
call|(
name|byte
call|)
argument_list|(
name|family
operator|.
name|length
argument_list|)
return|;
block|}
comment|// 3) Qualifier
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
comment|// Qualifier could be null
return|return
operator|(
name|qualifier
operator|==
literal|null
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|qualifier
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
comment|// Qualifier could be null
return|return
operator|(
name|qualifier
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|qualifier
operator|.
name|length
return|;
block|}
comment|// 4) Timestamp
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
comment|//5) Type
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|//6) Sequence id
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
name|seqId
return|;
block|}
comment|//7) Value
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
comment|// Value could be null
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
comment|// Value could be null
return|return
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|value
operator|.
name|length
return|;
block|}
comment|// 8) Tags
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
comment|// Tags can could null
return|return
operator|(
name|tags
operator|==
literal|null
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|tags
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
comment|// Tags could be null
return|return
operator|(
name|tags
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|tags
operator|.
name|length
return|;
block|}
comment|/**    * Implement HeapSize interface    */
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
comment|// Size of array headers are already included into overhead, so do not need to include it for each byte array
return|return
name|heapOverhead
argument_list|()
comment|// overhead, with array headers included
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|getRowLength
argument_list|()
argument_list|)
comment|// row
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|getFamilyLength
argument_list|()
argument_list|)
comment|// family
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|getQualifierLength
argument_list|()
argument_list|)
comment|// qualifier
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|getValueLength
argument_list|()
argument_list|)
comment|// value
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|getTagsLength
argument_list|()
argument_list|)
return|;
comment|// tags
block|}
comment|/**    * Implement Cloneable interface    */
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
comment|// only a shadow copy
block|}
comment|/**    * Implement SettableSequenceId interface    */
annotation|@
name|Override
specifier|public
name|void
name|setSequenceId
parameter_list|(
name|long
name|seqId
parameter_list|)
block|{
if|if
condition|(
name|seqId
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Sequence Id cannot be negative. ts="
operator|+
name|seqId
argument_list|)
throw|;
block|}
name|this
operator|.
name|seqId
operator|=
name|seqId
expr_stmt|;
block|}
comment|/**    * Implement SettableTimestamp interface    */
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
if|if
condition|(
name|ts
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Timestamp cannot be negative. ts="
operator|+
name|ts
argument_list|)
throw|;
block|}
name|this
operator|.
name|timestamp
operator|=
name|ts
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|byte
index|[]
name|ts
parameter_list|,
name|int
name|tsOffset
parameter_list|)
block|{
name|setTimestamp
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|ts
argument_list|,
name|tsOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

