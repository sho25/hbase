begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ErrorHandlingProtos
operator|.
name|ForeignExceptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
operator|.
name|ProcedureState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ForeignExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_comment
comment|/**  * Procedure information  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ProcedureInfo
implements|implements
name|Cloneable
block|{
specifier|private
specifier|final
name|long
name|procId
decl_stmt|;
specifier|private
specifier|final
name|String
name|procName
decl_stmt|;
specifier|private
specifier|final
name|String
name|procOwner
decl_stmt|;
specifier|private
specifier|final
name|ProcedureState
name|procState
decl_stmt|;
specifier|private
specifier|final
name|long
name|parentId
decl_stmt|;
specifier|private
specifier|final
name|ForeignExceptionMessage
name|exception
decl_stmt|;
specifier|private
specifier|final
name|long
name|lastUpdate
decl_stmt|;
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|result
decl_stmt|;
specifier|private
name|NonceKey
name|nonceKey
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|clientAckTime
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|ProcedureInfo
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|String
name|procName
parameter_list|,
specifier|final
name|String
name|procOwner
parameter_list|,
specifier|final
name|ProcedureState
name|procState
parameter_list|,
specifier|final
name|long
name|parentId
parameter_list|,
specifier|final
name|ForeignExceptionMessage
name|exception
parameter_list|,
specifier|final
name|long
name|lastUpdate
parameter_list|,
specifier|final
name|long
name|startTime
parameter_list|,
specifier|final
name|byte
index|[]
name|result
parameter_list|)
block|{
name|this
operator|.
name|procId
operator|=
name|procId
expr_stmt|;
name|this
operator|.
name|procName
operator|=
name|procName
expr_stmt|;
name|this
operator|.
name|procOwner
operator|=
name|procOwner
expr_stmt|;
name|this
operator|.
name|procState
operator|=
name|procState
expr_stmt|;
name|this
operator|.
name|parentId
operator|=
name|parentId
expr_stmt|;
name|this
operator|.
name|lastUpdate
operator|=
name|lastUpdate
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
comment|// If the procedure is completed, we should treat exception and result differently
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"CN_IDIOM_NO_SUPER_CALL"
argument_list|,
name|justification
operator|=
literal|"Intentional; calling super class clone doesn't make sense here."
argument_list|)
specifier|public
name|ProcedureInfo
name|clone
parameter_list|()
block|{
return|return
operator|new
name|ProcedureInfo
argument_list|(
name|procId
argument_list|,
name|procName
argument_list|,
name|procOwner
argument_list|,
name|procState
argument_list|,
name|parentId
argument_list|,
name|exception
argument_list|,
name|lastUpdate
argument_list|,
name|startTime
argument_list|,
name|result
argument_list|)
return|;
block|}
specifier|public
name|long
name|getProcId
parameter_list|()
block|{
return|return
name|procId
return|;
block|}
specifier|public
name|String
name|getProcName
parameter_list|()
block|{
return|return
name|procName
return|;
block|}
specifier|public
name|String
name|getProcOwner
parameter_list|()
block|{
return|return
name|procOwner
return|;
block|}
specifier|public
name|ProcedureState
name|getProcState
parameter_list|()
block|{
return|return
name|procState
return|;
block|}
specifier|public
name|boolean
name|hasParentId
parameter_list|()
block|{
return|return
operator|(
name|parentId
operator|!=
operator|-
literal|1
operator|)
return|;
block|}
specifier|public
name|long
name|getParentId
parameter_list|()
block|{
return|return
name|parentId
return|;
block|}
specifier|public
name|NonceKey
name|getNonceKey
parameter_list|()
block|{
return|return
name|nonceKey
return|;
block|}
specifier|public
name|void
name|setNonceKey
parameter_list|(
name|NonceKey
name|nonceKey
parameter_list|)
block|{
name|this
operator|.
name|nonceKey
operator|=
name|nonceKey
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|exception
operator|!=
literal|null
return|;
block|}
specifier|public
name|IOException
name|getException
parameter_list|()
block|{
if|if
condition|(
name|isFailed
argument_list|()
condition|)
block|{
return|return
name|ForeignExceptionUtil
operator|.
name|toIOException
argument_list|(
name|exception
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|ForeignExceptionMessage
name|getForeignExceptionMessage
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
specifier|public
name|String
name|getExceptionCause
parameter_list|()
block|{
assert|assert
name|isFailed
argument_list|()
assert|;
return|return
name|exception
operator|.
name|getGenericException
argument_list|()
operator|.
name|getClassName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getExceptionMessage
parameter_list|()
block|{
assert|assert
name|isFailed
argument_list|()
assert|;
return|return
name|exception
operator|.
name|getGenericException
argument_list|()
operator|.
name|getMessage
argument_list|()
return|;
block|}
specifier|public
name|String
name|getExceptionFullMessage
parameter_list|()
block|{
assert|assert
name|isFailed
argument_list|()
assert|;
return|return
name|getExceptionCause
argument_list|()
operator|+
literal|" - "
operator|+
name|getExceptionMessage
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasResultData
parameter_list|()
block|{
return|return
name|result
operator|!=
literal|null
return|;
block|}
specifier|public
name|byte
index|[]
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
specifier|public
name|long
name|getLastUpdate
parameter_list|()
block|{
return|return
name|lastUpdate
return|;
block|}
specifier|public
name|long
name|executionTime
parameter_list|()
block|{
return|return
name|lastUpdate
operator|-
name|startTime
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|boolean
name|hasClientAckTime
parameter_list|()
block|{
return|return
name|clientAckTime
operator|>
literal|0
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|long
name|getClientAckTime
parameter_list|()
block|{
return|return
name|clientAckTime
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|void
name|setClientAckTime
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|clientAckTime
operator|=
name|timestamp
expr_stmt|;
block|}
comment|/**    * @return Convert the current {@link ProcedureInfo} into a Protocol Buffers Procedure    * instance.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|ProcedureProtos
operator|.
name|Procedure
name|convertToProcedureProto
parameter_list|(
specifier|final
name|ProcedureInfo
name|procInfo
parameter_list|)
block|{
name|ProcedureProtos
operator|.
name|Procedure
operator|.
name|Builder
name|builder
init|=
name|ProcedureProtos
operator|.
name|Procedure
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setClassName
argument_list|(
name|procInfo
operator|.
name|getProcName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProcId
argument_list|(
name|procInfo
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStartTime
argument_list|(
name|procInfo
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|procInfo
operator|.
name|getProcState
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLastUpdate
argument_list|(
name|procInfo
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|procInfo
operator|.
name|hasParentId
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setParentId
argument_list|(
name|procInfo
operator|.
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|procInfo
operator|.
name|getProcOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOwner
argument_list|(
name|procInfo
operator|.
name|getProcOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|procInfo
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setException
argument_list|(
name|procInfo
operator|.
name|getForeignExceptionMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|procInfo
operator|.
name|hasResultData
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|procInfo
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Helper to convert the protobuf object.    * @return Convert the current Protocol Buffers Procedure to {@link ProcedureInfo}    * instance.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|ProcedureInfo
name|convert
parameter_list|(
specifier|final
name|ProcedureProtos
operator|.
name|Procedure
name|procProto
parameter_list|)
block|{
return|return
operator|new
name|ProcedureInfo
argument_list|(
name|procProto
operator|.
name|getProcId
argument_list|()
argument_list|,
name|procProto
operator|.
name|getClassName
argument_list|()
argument_list|,
name|procProto
operator|.
name|getOwner
argument_list|()
argument_list|,
name|procProto
operator|.
name|getState
argument_list|()
argument_list|,
name|procProto
operator|.
name|hasParentId
argument_list|()
condition|?
name|procProto
operator|.
name|getParentId
argument_list|()
else|:
operator|-
literal|1
argument_list|,
name|procProto
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|ROLLEDBACK
condition|?
name|procProto
operator|.
name|getException
argument_list|()
else|:
literal|null
argument_list|,
name|procProto
operator|.
name|getLastUpdate
argument_list|()
argument_list|,
name|procProto
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|procProto
operator|.
name|getState
argument_list|()
operator|==
name|ProcedureState
operator|.
name|FINISHED
condition|?
name|procProto
operator|.
name|getResult
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
comment|/**    * Check if the user is this procedure's owner    * @param procInfo the procedure to check    * @param user the user    * @return true if the user is the owner of the procedure,    *   false otherwise or the owner is unknown.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|boolean
name|isProcedureOwner
parameter_list|(
specifier|final
name|ProcedureInfo
name|procInfo
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|procOwner
init|=
name|procInfo
operator|.
name|getProcOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|procOwner
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|procOwner
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

