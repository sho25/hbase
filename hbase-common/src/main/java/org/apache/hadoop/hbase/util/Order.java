begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Used to describe or modify the lexicographical sort order of a  * {@code byte[]}. Default ordering is considered {@code ASCENDING}. The order  * of a {@code byte[]} can be inverted, resulting in {@code DESCENDING} order,  * by replacing each byte with its 1's compliment.  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
enum|enum
name|Order
block|{
name|ASCENDING
block|{
annotation|@
name|Override
specifier|public
name|int
name|cmp
parameter_list|(
name|int
name|cmp
parameter_list|)
block|{
comment|/* noop */
return|return
name|cmp
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|apply
parameter_list|(
name|byte
name|val
parameter_list|)
block|{
comment|/* noop */
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
block|{
comment|/* noop */
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|byte
index|[]
name|val
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|/* noop */
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ASCENDING"
return|;
block|}
block|}
block|,
name|DESCENDING
block|{
comment|/**      * A {@code byte} value is inverted by taking its 1's Complement, achieved      * via {@code xor} with {@code 0xff}.      */
specifier|private
specifier|static
specifier|final
name|byte
name|MASK
init|=
operator|(
name|byte
operator|)
literal|0xff
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|cmp
parameter_list|(
name|int
name|cmp
parameter_list|)
block|{
return|return
operator|-
literal|1
operator|*
name|cmp
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|apply
parameter_list|(
name|byte
name|val
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|val
operator|^
name|MASK
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|val
index|[
name|i
index|]
operator|^=
name|MASK
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|apply
parameter_list|(
name|byte
index|[]
name|val
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|val
index|[
name|offset
operator|+
name|i
index|]
operator|^=
name|MASK
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DESCENDING"
return|;
block|}
block|}
block|;
comment|/**    * Returns the adjusted trichotomous value according to the ordering imposed by this    * {@code Order}.    */
specifier|public
specifier|abstract
name|int
name|cmp
parameter_list|(
name|int
name|cmp
parameter_list|)
function_decl|;
comment|/**    * Apply order to the byte {@code val}.    */
specifier|public
specifier|abstract
name|byte
name|apply
parameter_list|(
name|byte
name|val
parameter_list|)
function_decl|;
comment|/**    * Apply order to the byte array {@code val}.    */
specifier|public
specifier|abstract
name|void
name|apply
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
function_decl|;
comment|/**    * Apply order to a range within the byte array {@code val}.    */
specifier|public
specifier|abstract
name|void
name|apply
parameter_list|(
name|byte
index|[]
name|val
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
block|}
end_enum

end_unit

