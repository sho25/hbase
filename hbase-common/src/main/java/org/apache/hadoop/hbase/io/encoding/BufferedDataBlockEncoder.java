begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|SamePrefixComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Base class for all data block encoders that use a buffer.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|abstract
class|class
name|BufferedDataBlockEncoder
implements|implements
name|DataBlockEncoder
block|{
specifier|private
specifier|static
name|int
name|INITIAL_KEY_BUFFER_SIZE
init|=
literal|512
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|decodeKeyValues
parameter_list|(
name|DataInputStream
name|source
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|decodeKeyValues
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|includesMemstoreTS
argument_list|)
return|;
block|}
specifier|protected
specifier|static
class|class
name|SeekerState
block|{
specifier|protected
name|int
name|valueOffset
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|int
name|keyLength
decl_stmt|;
specifier|protected
name|int
name|valueLength
decl_stmt|;
specifier|protected
name|int
name|lastCommonPrefix
decl_stmt|;
comment|/** We need to store a copy of the key. */
specifier|protected
name|byte
index|[]
name|keyBuffer
init|=
operator|new
name|byte
index|[
name|INITIAL_KEY_BUFFER_SIZE
index|]
decl_stmt|;
specifier|protected
name|long
name|memstoreTS
decl_stmt|;
specifier|protected
name|int
name|nextKvOffset
decl_stmt|;
specifier|protected
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|valueOffset
operator|!=
operator|-
literal|1
return|;
block|}
specifier|protected
name|void
name|invalidate
parameter_list|()
block|{
name|valueOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|protected
name|void
name|ensureSpaceForKey
parameter_list|()
block|{
if|if
condition|(
name|keyLength
operator|>
name|keyBuffer
operator|.
name|length
condition|)
block|{
comment|// rare case, but we need to handle arbitrary length of key
name|int
name|newKeyBufferLength
init|=
name|Math
operator|.
name|max
argument_list|(
name|keyBuffer
operator|.
name|length
argument_list|,
literal|1
argument_list|)
operator|*
literal|2
decl_stmt|;
while|while
condition|(
name|keyLength
operator|>
name|newKeyBufferLength
condition|)
block|{
name|newKeyBufferLength
operator|*=
literal|2
expr_stmt|;
block|}
name|byte
index|[]
name|newKeyBuffer
init|=
operator|new
name|byte
index|[
name|newKeyBufferLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|newKeyBuffer
argument_list|,
literal|0
argument_list|,
name|keyBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|keyBuffer
operator|=
name|newKeyBuffer
expr_stmt|;
block|}
block|}
comment|/**      * Copy the state from the next one into this instance (the previous state      * placeholder). Used to save the previous state when we are advancing the      * seeker to the next key/value.      */
specifier|protected
name|void
name|copyFromNext
parameter_list|(
name|SeekerState
name|nextState
parameter_list|)
block|{
if|if
condition|(
name|keyBuffer
operator|.
name|length
operator|!=
name|nextState
operator|.
name|keyBuffer
operator|.
name|length
condition|)
block|{
name|keyBuffer
operator|=
name|nextState
operator|.
name|keyBuffer
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
comment|// Note: we can only call isValid before we override our state, so this
comment|// comes before all the assignments at the end of this method.
name|System
operator|.
name|arraycopy
argument_list|(
name|nextState
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|nextState
operator|.
name|keyLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// don't copy the common prefix between this key and the previous one
name|System
operator|.
name|arraycopy
argument_list|(
name|nextState
operator|.
name|keyBuffer
argument_list|,
name|nextState
operator|.
name|lastCommonPrefix
argument_list|,
name|keyBuffer
argument_list|,
name|nextState
operator|.
name|lastCommonPrefix
argument_list|,
name|nextState
operator|.
name|keyLength
operator|-
name|nextState
operator|.
name|lastCommonPrefix
argument_list|)
expr_stmt|;
block|}
name|valueOffset
operator|=
name|nextState
operator|.
name|valueOffset
expr_stmt|;
name|keyLength
operator|=
name|nextState
operator|.
name|keyLength
expr_stmt|;
name|valueLength
operator|=
name|nextState
operator|.
name|valueLength
expr_stmt|;
name|lastCommonPrefix
operator|=
name|nextState
operator|.
name|lastCommonPrefix
expr_stmt|;
name|nextKvOffset
operator|=
name|nextState
operator|.
name|nextKvOffset
expr_stmt|;
name|memstoreTS
operator|=
name|nextState
operator|.
name|memstoreTS
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
specifier|static
class|class
name|BufferedEncodedSeeker
parameter_list|<
name|STATE
extends|extends
name|SeekerState
parameter_list|>
implements|implements
name|EncodedSeeker
block|{
specifier|protected
specifier|final
name|KVComparator
name|comparator
decl_stmt|;
specifier|protected
specifier|final
name|SamePrefixComparator
argument_list|<
name|byte
index|[]
argument_list|>
name|samePrefixComparator
decl_stmt|;
specifier|protected
name|ByteBuffer
name|currentBuffer
decl_stmt|;
specifier|protected
name|STATE
name|current
init|=
name|createSeekerState
argument_list|()
decl_stmt|;
comment|// always valid
specifier|protected
name|STATE
name|previous
init|=
name|createSeekerState
argument_list|()
decl_stmt|;
comment|// may not be valid
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|BufferedEncodedSeeker
parameter_list|(
name|KVComparator
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
if|if
condition|(
name|comparator
operator|instanceof
name|SamePrefixComparator
condition|)
block|{
name|this
operator|.
name|samePrefixComparator
operator|=
operator|(
name|SamePrefixComparator
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|comparator
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|samePrefixComparator
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCurrentBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|currentBuffer
operator|=
name|buffer
expr_stmt|;
name|decodeFirst
argument_list|()
expr_stmt|;
name|previous
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getKeyDeepCopy
parameter_list|()
block|{
name|ByteBuffer
name|keyBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|current
operator|.
name|keyLength
argument_list|)
decl_stmt|;
name|keyBuffer
operator|.
name|put
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|keyLength
argument_list|)
expr_stmt|;
return|return
name|keyBuffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getValueShallowCopy
parameter_list|()
block|{
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|currentBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|currentBuffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|current
operator|.
name|valueOffset
argument_list|,
name|current
operator|.
name|valueLength
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getKeyValueBuffer
parameter_list|()
block|{
name|ByteBuffer
name|kvBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
name|current
operator|.
name|keyLength
operator|+
name|current
operator|.
name|valueLength
argument_list|)
decl_stmt|;
name|kvBuffer
operator|.
name|putInt
argument_list|(
name|current
operator|.
name|keyLength
argument_list|)
expr_stmt|;
name|kvBuffer
operator|.
name|putInt
argument_list|(
name|current
operator|.
name|valueLength
argument_list|)
expr_stmt|;
name|kvBuffer
operator|.
name|put
argument_list|(
name|current
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|keyLength
argument_list|)
expr_stmt|;
name|kvBuffer
operator|.
name|put
argument_list|(
name|currentBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|currentBuffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|current
operator|.
name|valueOffset
argument_list|,
name|current
operator|.
name|valueLength
argument_list|)
expr_stmt|;
return|return
name|kvBuffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyValue
name|getKeyValue
parameter_list|()
block|{
name|ByteBuffer
name|kvBuf
init|=
name|getKeyValueBuffer
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|kvBuf
operator|.
name|array
argument_list|()
argument_list|,
name|kvBuf
operator|.
name|arrayOffset
argument_list|()
argument_list|)
decl_stmt|;
name|kv
operator|.
name|setMvccVersion
argument_list|(
name|current
operator|.
name|memstoreTS
argument_list|)
expr_stmt|;
return|return
name|kv
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rewind
parameter_list|()
block|{
name|currentBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|decodeFirst
argument_list|()
expr_stmt|;
name|previous
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|decodeNext
argument_list|()
expr_stmt|;
name|previous
operator|.
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|seekToKeyInBlock
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|seekBefore
parameter_list|)
block|{
name|int
name|commonPrefix
init|=
literal|0
decl_stmt|;
name|previous
operator|.
name|invalidate
argument_list|()
expr_stmt|;
do|do
block|{
name|int
name|comp
decl_stmt|;
if|if
condition|(
name|samePrefixComparator
operator|!=
literal|null
condition|)
block|{
name|commonPrefix
operator|=
name|Math
operator|.
name|min
argument_list|(
name|commonPrefix
argument_list|,
name|current
operator|.
name|lastCommonPrefix
argument_list|)
expr_stmt|;
comment|// extend commonPrefix
name|commonPrefix
operator|+=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
name|key
argument_list|,
name|offset
operator|+
name|commonPrefix
argument_list|,
name|length
operator|-
name|commonPrefix
argument_list|,
name|current
operator|.
name|keyBuffer
argument_list|,
name|commonPrefix
argument_list|,
name|current
operator|.
name|keyLength
operator|-
name|commonPrefix
argument_list|)
expr_stmt|;
name|comp
operator|=
name|samePrefixComparator
operator|.
name|compareIgnoringPrefix
argument_list|(
name|commonPrefix
argument_list|,
name|key
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|current
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|keyLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
name|comparator
operator|.
name|compareFlatKey
argument_list|(
name|key
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|current
operator|.
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|keyLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
comment|// exact match
if|if
condition|(
name|seekBefore
condition|)
block|{
if|if
condition|(
operator|!
name|previous
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// The caller (seekBefore) has to ensure that we are not at the
comment|// first key in the block.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot seekBefore if "
operator|+
literal|"positioned at the first key in the block: key="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|key
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
throw|;
block|}
name|moveToPrevious
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
if|if
condition|(
name|comp
operator|<
literal|0
condition|)
block|{
comment|// already too large, check previous
if|if
condition|(
name|previous
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|moveToPrevious
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|HConstants
operator|.
name|INDEX_KEY_MAGIC
return|;
comment|// using optimized index key
block|}
return|return
literal|1
return|;
block|}
comment|// move to next, if more data is available
if|if
condition|(
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|previous
operator|.
name|copyFromNext
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|decodeNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
comment|// we hit the end of the block, not an exact match
return|return
literal|1
return|;
block|}
specifier|private
name|void
name|moveToPrevious
parameter_list|()
block|{
if|if
condition|(
operator|!
name|previous
operator|.
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can move back only once and not in first key in the block."
argument_list|)
throw|;
block|}
name|STATE
name|tmp
init|=
name|previous
decl_stmt|;
name|previous
operator|=
name|current
expr_stmt|;
name|current
operator|=
name|tmp
expr_stmt|;
comment|// move after last key value
name|currentBuffer
operator|.
name|position
argument_list|(
name|current
operator|.
name|nextKvOffset
argument_list|)
expr_stmt|;
name|previous
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|STATE
name|createSeekerState
parameter_list|()
block|{
comment|// This will fail for non-default seeker state if the subclass does not
comment|// override this method.
return|return
operator|(
name|STATE
operator|)
operator|new
name|SeekerState
argument_list|()
return|;
block|}
specifier|abstract
specifier|protected
name|void
name|decodeFirst
parameter_list|()
function_decl|;
specifier|abstract
specifier|protected
name|void
name|decodeNext
parameter_list|()
function_decl|;
block|}
specifier|protected
specifier|final
name|void
name|afterEncodingKeyValue
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|DataOutputStream
name|out
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
if|if
condition|(
name|includesMemstoreTS
condition|)
block|{
comment|// Copy memstore timestamp from the byte buffer to the output stream.
name|long
name|memstoreTS
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|memstoreTS
operator|=
name|ByteBufferUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|memstoreTS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to copy memstore timestamp "
operator|+
name|memstoreTS
operator|+
literal|" after encoding a key/value"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
specifier|final
name|void
name|afterDecodingKeyValue
parameter_list|(
name|DataInputStream
name|source
parameter_list|,
name|ByteBuffer
name|dest
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
if|if
condition|(
name|includesMemstoreTS
condition|)
block|{
name|long
name|memstoreTS
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
comment|// Copy memstore timestamp from the data input stream to the byte
comment|// buffer.
name|memstoreTS
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|writeVLong
argument_list|(
name|dest
argument_list|,
name|memstoreTS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to copy memstore timestamp "
operator|+
name|memstoreTS
operator|+
literal|" after decoding a key/value"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|HFileBlockEncodingContext
name|newDataBlockEncodingContext
parameter_list|(
name|Algorithm
name|compressionAlgorithm
parameter_list|,
name|DataBlockEncoding
name|encoding
parameter_list|,
name|byte
index|[]
name|header
parameter_list|)
block|{
return|return
operator|new
name|HFileBlockDefaultEncodingContext
argument_list|(
name|compressionAlgorithm
argument_list|,
name|encoding
argument_list|,
name|header
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HFileBlockDecodingContext
name|newDataBlockDecodingContext
parameter_list|(
name|Algorithm
name|compressionAlgorithm
parameter_list|)
block|{
return|return
operator|new
name|HFileBlockDefaultDecodingContext
argument_list|(
name|compressionAlgorithm
argument_list|)
return|;
block|}
comment|/**    * Compress KeyValues and write them to output buffer.    * @param out Where to write compressed data.    * @param in Source of KeyValue for compression.    * @param includesMemstoreTS true if including memstore timestamp after every    *          key-value pair    * @throws IOException If there is an error writing to output stream.    */
specifier|public
specifier|abstract
name|void
name|internalEncodeKeyValues
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|ByteBuffer
name|in
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|encodeKeyValues
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|boolean
name|includesMemstoreTS
parameter_list|,
name|HFileBlockEncodingContext
name|blkEncodingCtx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blkEncodingCtx
operator|.
name|getClass
argument_list|()
operator|!=
name|HFileBlockDefaultEncodingContext
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" only accepts "
operator|+
name|HFileBlockDefaultEncodingContext
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" as the "
operator|+
literal|"encoding context."
argument_list|)
throw|;
block|}
name|HFileBlockDefaultEncodingContext
name|encodingCtx
init|=
operator|(
name|HFileBlockDefaultEncodingContext
operator|)
name|blkEncodingCtx
decl_stmt|;
name|encodingCtx
operator|.
name|prepareEncoding
argument_list|()
expr_stmt|;
name|DataOutputStream
name|dataOut
init|=
operator|(
operator|(
name|HFileBlockDefaultEncodingContext
operator|)
name|encodingCtx
operator|)
operator|.
name|getOutputStreamForEncoder
argument_list|()
decl_stmt|;
name|internalEncodeKeyValues
argument_list|(
name|dataOut
argument_list|,
name|in
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
if|if
condition|(
name|encodingCtx
operator|.
name|getDataBlockEncoding
argument_list|()
operator|!=
name|DataBlockEncoding
operator|.
name|NONE
condition|)
block|{
name|encodingCtx
operator|.
name|postEncoding
argument_list|(
name|BlockType
operator|.
name|ENCODED_DATA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encodingCtx
operator|.
name|postEncoding
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that there is at least the given amount of unfilled space    * remaining in the given buffer.    * @param out typically, the buffer we are writing to    * @param length the required space in the buffer    * @throws EncoderBufferTooSmallException If there are no enough bytes.    */
specifier|protected
specifier|static
name|void
name|ensureSpace
parameter_list|(
name|ByteBuffer
name|out
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|EncoderBufferTooSmallException
block|{
if|if
condition|(
name|out
operator|.
name|position
argument_list|()
operator|+
name|length
operator|>
name|out
operator|.
name|limit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EncoderBufferTooSmallException
argument_list|(
literal|"Buffer position="
operator|+
name|out
operator|.
name|position
argument_list|()
operator|+
literal|", buffer limit="
operator|+
name|out
operator|.
name|limit
argument_list|()
operator|+
literal|", length to be written="
operator|+
name|length
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

