begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Instead of calculate a whole time average, this class focus on the last N.  * The last N is stored in a circle array.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|WindowMovingAverage
extends|extends
name|MovingAverage
block|{
specifier|protected
specifier|final
specifier|static
name|int
name|DEFAULT_SIZE
init|=
literal|5
decl_stmt|;
comment|// The last n statistics.
specifier|protected
name|long
index|[]
name|lastN
decl_stmt|;
comment|// The index of the most recent statistics.
specifier|protected
name|int
name|mostRecent
decl_stmt|;
comment|// If it travels a round.
specifier|protected
name|boolean
name|oneRound
decl_stmt|;
specifier|public
name|WindowMovingAverage
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WindowMovingAverage
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|lastN
operator|=
operator|new
name|long
index|[
name|size
operator|<=
literal|0
condition|?
name|DEFAULT_SIZE
else|:
name|size
index|]
expr_stmt|;
name|this
operator|.
name|mostRecent
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|oneRound
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateMostRecentTime
parameter_list|(
name|long
name|elapsed
parameter_list|)
block|{
name|int
name|index
init|=
name|moveForwardMostRecentPosistion
argument_list|()
decl_stmt|;
name|lastN
index|[
name|index
index|]
operator|=
name|elapsed
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getAverageTime
parameter_list|()
block|{
return|return
name|enoughStatistics
argument_list|()
condition|?
operator|(
name|double
operator|)
name|sum
argument_list|(
name|getNumberOfStatistics
argument_list|()
argument_list|)
operator|/
name|getNumberOfStatistics
argument_list|()
else|:
operator|(
name|double
operator|)
name|sum
argument_list|(
name|getMostRecentPosistion
argument_list|()
operator|+
literal|1
argument_list|)
operator|/
operator|(
name|getMostRecentPosistion
argument_list|()
operator|+
literal|1
operator|)
return|;
block|}
comment|/**    * Check if there are enough statistics.    * @return true if lastN is full    */
specifier|protected
name|boolean
name|enoughStatistics
parameter_list|()
block|{
return|return
name|oneRound
return|;
block|}
comment|/**    * @return number of statistics    */
specifier|protected
name|int
name|getNumberOfStatistics
parameter_list|()
block|{
return|return
name|lastN
operator|.
name|length
return|;
block|}
comment|/**    * Get statistics at index.    * @param index index of bar    * @return statistics    */
specifier|protected
name|long
name|getStatisticsAtIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|getNumberOfStatistics
argument_list|()
condition|)
block|{
comment|// This case should not happen, but a prudent check.
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
return|return
name|lastN
index|[
name|index
index|]
return|;
block|}
comment|/**    * @return index of most recent    */
specifier|protected
name|int
name|getMostRecentPosistion
parameter_list|()
block|{
return|return
name|mostRecent
return|;
block|}
comment|/**    * Move forward the most recent index.    * @return the most recent index    */
specifier|protected
name|int
name|moveForwardMostRecentPosistion
parameter_list|()
block|{
name|int
name|index
init|=
operator|++
name|mostRecent
decl_stmt|;
if|if
condition|(
operator|!
name|oneRound
operator|&&
name|index
operator|==
name|getNumberOfStatistics
argument_list|()
condition|)
block|{
comment|// Back to the head of the lastN, from now on will
comment|// start to evict oldest value.
name|oneRound
operator|=
literal|true
expr_stmt|;
block|}
name|mostRecent
operator|=
name|index
operator|%
name|getNumberOfStatistics
argument_list|()
expr_stmt|;
return|return
name|mostRecent
return|;
block|}
specifier|private
name|long
name|sum
parameter_list|(
name|int
name|bound
parameter_list|)
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bound
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|getStatisticsAtIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
block|}
end_class

end_unit

