begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A simple barrier that can be used by classes that need to wait for some operations to  * finish before stopping/closing/etc. forever.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DrainBarrier
block|{
comment|/**    * Contains the number of outstanding operations, as well as flags.    * Initially, the number of operations is 1. Each beginOp increments, and endOp decrements it.    * beginOp does not proceed when it sees the draining flag. When stop is called, it atomically    * decrements the number of operations (the initial 1) and sets the draining flag. If stop did    * the decrement to zero, that means there are no more operations outstanding, so stop is done.    * Otherwise, stop blocks, and the endOp that decrements the count to 0 unblocks it.    */
specifier|private
specifier|final
name|AtomicLong
name|valueAndFlags
init|=
operator|new
name|AtomicLong
argument_list|(
name|inc
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|long
name|DRAINING_FLAG
init|=
literal|0x1
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|FLAG_BIT_COUNT
init|=
literal|1
decl_stmt|;
comment|/**    * Tries to start an operation.    * @return false iff the stop is in progress, and the operation cannot be started.    */
specifier|public
name|boolean
name|beginOp
parameter_list|()
block|{
name|long
name|oldValAndFlags
decl_stmt|;
do|do
block|{
name|oldValAndFlags
operator|=
name|valueAndFlags
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDraining
argument_list|(
name|oldValAndFlags
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
do|while
condition|(
operator|!
name|valueAndFlags
operator|.
name|compareAndSet
argument_list|(
name|oldValAndFlags
argument_list|,
name|inc
argument_list|(
name|oldValAndFlags
argument_list|)
argument_list|)
condition|)
do|;
return|return
literal|true
return|;
block|}
comment|/**    * Ends the operation. Unblocks the blocked caller of stop, if necessary.    */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NN_NAKED_NOTIFY"
argument_list|,
name|justification
operator|=
literal|"First, we do change the state before notify, 2nd, it doesn't even matter"
argument_list|)
specifier|public
name|void
name|endOp
parameter_list|()
block|{
name|long
name|oldValAndFlags
decl_stmt|;
do|do
block|{
name|oldValAndFlags
operator|=
name|valueAndFlags
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|unacceptableCount
init|=
name|isDraining
argument_list|(
name|oldValAndFlags
argument_list|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|getValue
argument_list|(
name|oldValAndFlags
argument_list|)
operator|==
name|unacceptableCount
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"endOp called without corresponding beginOp call ("
operator|+
literal|"the current count is "
operator|+
name|unacceptableCount
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
operator|!
name|valueAndFlags
operator|.
name|compareAndSet
argument_list|(
name|oldValAndFlags
argument_list|,
name|dec
argument_list|(
name|oldValAndFlags
argument_list|)
argument_list|)
condition|)
do|;
if|if
condition|(
name|getValue
argument_list|(
name|oldValAndFlags
argument_list|)
operator|==
literal|1
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Blocks new operations from starting, waits for the current ones to drain.    * If someone already called it, returns immediately, which is currently unavoidable as    * most of the users stop and close things right and left, and hope for the best.    * stopAndWaitForOpsOnce asserts instead.    * @throws InterruptedException the wait for operations has been interrupted.    */
specifier|public
name|void
name|stopAndDrainOps
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|stopAndDrainOps
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Blocks new operations from starting, waits for the current ones to drain.    * Can only be called once.    * @throws InterruptedException the wait for operations has been interrupted.    */
specifier|public
name|void
name|stopAndDrainOpsOnce
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|stopAndDrainOps
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param ignoreRepeatedCalls If this is true and somebody already called stop, this method    *                            will return immediately if true; if this is false and somebody    *                            already called stop, it will assert.    */
comment|// Justification for warnings - wait is not unconditional, and contrary to what WA_NOT_IN_LOOP
comment|// description says we are not waiting on multiple conditions.
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
block|{
literal|"UW_UNCOND_WAIT"
block|,
literal|"WA_NOT_IN_LOOP"
block|}
argument_list|)
specifier|private
name|void
name|stopAndDrainOps
parameter_list|(
name|boolean
name|ignoreRepeatedCalls
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|oldValAndFlags
decl_stmt|;
do|do
block|{
name|oldValAndFlags
operator|=
name|valueAndFlags
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDraining
argument_list|(
name|oldValAndFlags
argument_list|)
condition|)
block|{
if|if
condition|(
name|ignoreRepeatedCalls
condition|)
return|return;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"stopAndWaitForOpsOnce called more than once"
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
operator|!
name|valueAndFlags
operator|.
name|compareAndSet
argument_list|(
name|oldValAndFlags
argument_list|,
name|dec
argument_list|(
name|oldValAndFlags
argument_list|)
operator||
name|DRAINING_FLAG
argument_list|)
condition|)
do|;
if|if
condition|(
name|getValue
argument_list|(
name|oldValAndFlags
argument_list|)
operator|==
literal|1
condition|)
return|return;
comment|// There were no operations outstanding.
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Helper methods.
specifier|private
specifier|static
specifier|final
name|boolean
name|isDraining
parameter_list|(
name|long
name|valueAndFlags
parameter_list|)
block|{
return|return
operator|(
name|valueAndFlags
operator|&
name|DRAINING_FLAG
operator|)
operator|==
name|DRAINING_FLAG
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|getValue
parameter_list|(
name|long
name|valueAndFlags
parameter_list|)
block|{
return|return
name|valueAndFlags
operator|>>
name|FLAG_BIT_COUNT
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|inc
parameter_list|(
name|long
name|valueAndFlags
parameter_list|)
block|{
return|return
name|valueAndFlags
operator|+
operator|(
literal|1
operator|<<
name|FLAG_BIT_COUNT
operator|)
return|;
comment|// Not checking for overflow.
block|}
specifier|private
specifier|static
specifier|final
name|long
name|dec
parameter_list|(
name|long
name|valueAndFlags
parameter_list|)
block|{
return|return
name|valueAndFlags
operator|-
operator|(
literal|1
operator|<<
name|FLAG_BIT_COUNT
operator|)
return|;
comment|// Negative overflow checked outside.
block|}
block|}
end_class

end_unit

