begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  *  A read only version of the {@link ByteRange}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|SimpleByteRange
extends|extends
name|AbstractByteRange
block|{
specifier|public
name|SimpleByteRange
parameter_list|()
block|{   }
specifier|public
name|SimpleByteRange
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|byte
index|[
name|capacity
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new {@code ByteRange} over the provided {@code bytes}.    * @param bytes The array to wrap.    */
specifier|public
name|SimpleByteRange
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|set
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new {@code ByteRange} over the provided {@code bytes}.    * @param bytes The array to wrap.    * @param offset The offset into {@code bytes} considered the beginning    *          of this range.    * @param length The length of this range.    */
specifier|public
name|SimpleByteRange
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|set
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// methods for managing the backing array and range viewport
comment|//
annotation|@
name|Override
specifier|public
name|ByteRange
name|unset
parameter_list|()
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|set
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|bytes
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
return|return
name|super
operator|.
name|set
argument_list|(
name|capacity
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|bytes
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
return|return
name|super
operator|.
name|set
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|bytes
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
return|return
name|super
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|//
comment|// methods for retrieving data
comment|//
annotation|@
name|Override
specifier|public
name|ByteRange
name|put
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|put
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
index|[]
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|put
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
index|[]
name|val
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
comment|//
comment|// methods for duplicating the current instance
comment|//
annotation|@
name|Override
specifier|public
name|ByteRange
name|shallowCopy
parameter_list|()
block|{
name|SimpleByteRange
name|clone
init|=
operator|new
name|SimpleByteRange
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHashCached
argument_list|()
condition|)
block|{
name|clone
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|shallowCopySubRange
parameter_list|(
name|int
name|innerOffset
parameter_list|,
name|int
name|copyLength
parameter_list|)
block|{
name|SimpleByteRange
name|clone
init|=
operator|new
name|SimpleByteRange
argument_list|(
name|bytes
argument_list|,
name|offset
operator|+
name|innerOffset
argument_list|,
name|copyLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHashCached
argument_list|()
condition|)
block|{
name|clone
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|thatObject
parameter_list|)
block|{
if|if
condition|(
name|thatObject
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|==
name|thatObject
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|hashCode
argument_list|()
operator|!=
name|thatObject
operator|.
name|hashCode
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|thatObject
operator|instanceof
name|SimpleByteRange
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SimpleByteRange
name|that
init|=
operator|(
name|SimpleByteRange
operator|)
name|thatObject
decl_stmt|;
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|that
operator|.
name|bytes
argument_list|,
name|that
operator|.
name|offset
argument_list|,
name|that
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|deepCopy
parameter_list|()
block|{
name|SimpleByteRange
name|clone
init|=
operator|new
name|SimpleByteRange
argument_list|(
name|deepCopyToNewArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHashCached
argument_list|()
condition|)
block|{
name|clone
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|putInt
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|putLong
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ByteRange
name|putShort
parameter_list|(
name|int
name|index
parameter_list|,
name|short
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|putVLong
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|ReadOnlyByteRangeException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

