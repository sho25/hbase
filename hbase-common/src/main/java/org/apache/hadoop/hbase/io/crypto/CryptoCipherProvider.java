begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|aes
operator|.
name|CommonsCryptoAES
import|;
end_import

begin_comment
comment|/**  * The default cipher provider. Supports AES via the Commons Crypto.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|final
class|class
name|CryptoCipherProvider
implements|implements
name|CipherProvider
block|{
specifier|private
specifier|static
name|CryptoCipherProvider
name|instance
decl_stmt|;
specifier|public
specifier|static
name|CryptoCipherProvider
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
return|return
name|instance
return|;
block|}
name|instance
operator|=
operator|new
name|CryptoCipherProvider
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
specifier|private
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Prevent instantiation
specifier|private
name|CryptoCipherProvider
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"commons"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cipher
name|getCipher
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"AES"
argument_list|)
condition|)
block|{
return|return
operator|new
name|CommonsCryptoAES
argument_list|(
name|this
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cipher '"
operator|+
name|name
operator|+
literal|"' is not supported by provider '"
operator|+
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getSupportedCiphers
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"AES"
block|}
return|;
block|}
block|}
end_class

end_unit

