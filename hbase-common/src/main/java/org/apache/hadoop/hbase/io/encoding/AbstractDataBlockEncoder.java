begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ByteBufferedKeyOnlyKeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|AbstractDataBlockEncoder
implements|implements
name|DataBlockEncoder
block|{
annotation|@
name|Override
specifier|public
name|HFileBlockEncodingContext
name|newDataBlockEncodingContext
parameter_list|(
name|DataBlockEncoding
name|encoding
parameter_list|,
name|byte
index|[]
name|header
parameter_list|,
name|HFileContext
name|meta
parameter_list|)
block|{
return|return
operator|new
name|HFileBlockDefaultEncodingContext
argument_list|(
name|encoding
argument_list|,
name|header
argument_list|,
name|meta
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HFileBlockDecodingContext
name|newDataBlockDecodingContext
parameter_list|(
name|HFileContext
name|meta
parameter_list|)
block|{
return|return
operator|new
name|HFileBlockDefaultDecodingContext
argument_list|(
name|meta
argument_list|)
return|;
block|}
specifier|protected
name|void
name|postEncoding
parameter_list|(
name|HFileBlockEncodingContext
name|encodingCtx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encodingCtx
operator|.
name|getDataBlockEncoding
argument_list|()
operator|!=
name|DataBlockEncoding
operator|.
name|NONE
condition|)
block|{
name|encodingCtx
operator|.
name|postEncoding
argument_list|(
name|BlockType
operator|.
name|ENCODED_DATA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encodingCtx
operator|.
name|postEncoding
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Cell
name|createFirstKeyCell
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|int
name|keyLength
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
operator|new
name|KeyValue
operator|.
name|KeyOnlyKeyValue
argument_list|(
name|key
operator|.
name|array
argument_list|()
argument_list|,
name|key
operator|.
name|arrayOffset
argument_list|()
operator|+
name|key
operator|.
name|position
argument_list|()
argument_list|,
name|keyLength
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ByteBufferedKeyOnlyKeyValue
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|position
argument_list|()
argument_list|,
name|keyLength
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|abstract
specifier|static
class|class
name|AbstractEncodedSeeker
implements|implements
name|EncodedSeeker
block|{
specifier|protected
name|HFileBlockDecodingContext
name|decodingCtx
decl_stmt|;
specifier|protected
specifier|final
name|CellComparator
name|comparator
decl_stmt|;
specifier|public
name|AbstractEncodedSeeker
parameter_list|(
name|CellComparator
name|comparator
parameter_list|,
name|HFileBlockDecodingContext
name|decodingCtx
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|decodingCtx
operator|=
name|decodingCtx
expr_stmt|;
block|}
specifier|protected
name|boolean
name|includesMvcc
parameter_list|()
block|{
return|return
name|this
operator|.
name|decodingCtx
operator|.
name|getHFileContext
argument_list|()
operator|.
name|isIncludesMvcc
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|includesTags
parameter_list|()
block|{
return|return
name|this
operator|.
name|decodingCtx
operator|.
name|getHFileContext
argument_list|()
operator|.
name|isIncludesTags
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

