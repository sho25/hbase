begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Operation retry accounting.  * Use to calculate wait period, {@link #getBackoffTimeAndIncrementAttempts()}}, or for performing  * wait, {@link #sleepUntilNextRetry()}, in accordance with a {@link RetryConfig}, initial  * settings, and a Retry Policy, (See org.apache.hadoop.io.retry.RetryPolicy).  * Like<a href=https://github.com/rholder/guava-retrying>guava-retrying</a>.  * @since 0.92.0  * @see RetryCounterFactory  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RetryCounter
block|{
comment|/**    *  Configuration for a retry counter    */
specifier|public
specifier|static
class|class
name|RetryConfig
block|{
specifier|private
name|int
name|maxAttempts
decl_stmt|;
specifier|private
name|long
name|sleepInterval
decl_stmt|;
specifier|private
name|long
name|maxSleepTime
decl_stmt|;
specifier|private
name|TimeUnit
name|timeUnit
decl_stmt|;
specifier|private
name|BackoffPolicy
name|backoffPolicy
decl_stmt|;
specifier|private
name|float
name|jitter
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BackoffPolicy
name|DEFAULT_BACKOFF_POLICY
init|=
operator|new
name|ExponentialBackoffPolicy
argument_list|()
decl_stmt|;
specifier|public
name|RetryConfig
parameter_list|()
block|{
name|maxAttempts
operator|=
literal|1
expr_stmt|;
name|sleepInterval
operator|=
literal|1000
expr_stmt|;
name|maxSleepTime
operator|=
operator|-
literal|1
expr_stmt|;
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
expr_stmt|;
name|backoffPolicy
operator|=
name|DEFAULT_BACKOFF_POLICY
expr_stmt|;
name|jitter
operator|=
literal|0.0f
expr_stmt|;
block|}
specifier|public
name|RetryConfig
parameter_list|(
name|int
name|maxAttempts
parameter_list|,
name|long
name|sleepInterval
parameter_list|,
name|long
name|maxSleepTime
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|BackoffPolicy
name|backoffPolicy
parameter_list|)
block|{
name|this
operator|.
name|maxAttempts
operator|=
name|maxAttempts
expr_stmt|;
name|this
operator|.
name|sleepInterval
operator|=
name|sleepInterval
expr_stmt|;
name|this
operator|.
name|maxSleepTime
operator|=
name|maxSleepTime
expr_stmt|;
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
name|this
operator|.
name|backoffPolicy
operator|=
name|backoffPolicy
expr_stmt|;
block|}
specifier|public
name|RetryConfig
name|setBackoffPolicy
parameter_list|(
name|BackoffPolicy
name|backoffPolicy
parameter_list|)
block|{
name|this
operator|.
name|backoffPolicy
operator|=
name|backoffPolicy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RetryConfig
name|setMaxAttempts
parameter_list|(
name|int
name|maxAttempts
parameter_list|)
block|{
name|this
operator|.
name|maxAttempts
operator|=
name|maxAttempts
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RetryConfig
name|setMaxSleepTime
parameter_list|(
name|long
name|maxSleepTime
parameter_list|)
block|{
name|this
operator|.
name|maxSleepTime
operator|=
name|maxSleepTime
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RetryConfig
name|setSleepInterval
parameter_list|(
name|long
name|sleepInterval
parameter_list|)
block|{
name|this
operator|.
name|sleepInterval
operator|=
name|sleepInterval
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RetryConfig
name|setTimeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RetryConfig
name|setJitter
parameter_list|(
name|float
name|jitter
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|jitter
operator|>=
literal|0.0f
operator|&&
name|jitter
operator|<
literal|1.0f
argument_list|,
literal|"Invalid jitter: %s, should be in range [0.0, 1.0)"
argument_list|,
name|jitter
argument_list|)
expr_stmt|;
name|this
operator|.
name|jitter
operator|=
name|jitter
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getMaxAttempts
parameter_list|()
block|{
return|return
name|maxAttempts
return|;
block|}
specifier|public
name|long
name|getMaxSleepTime
parameter_list|()
block|{
return|return
name|maxSleepTime
return|;
block|}
specifier|public
name|long
name|getSleepInterval
parameter_list|()
block|{
return|return
name|sleepInterval
return|;
block|}
specifier|public
name|TimeUnit
name|getTimeUnit
parameter_list|()
block|{
return|return
name|timeUnit
return|;
block|}
specifier|public
name|float
name|getJitter
parameter_list|()
block|{
return|return
name|jitter
return|;
block|}
specifier|public
name|BackoffPolicy
name|getBackoffPolicy
parameter_list|()
block|{
return|return
name|backoffPolicy
return|;
block|}
block|}
specifier|private
specifier|static
name|long
name|addJitter
parameter_list|(
name|long
name|interval
parameter_list|,
name|float
name|jitter
parameter_list|)
block|{
name|long
name|jitterInterval
init|=
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
name|jitter
argument_list|)
decl_stmt|;
return|return
name|interval
operator|+
name|jitterInterval
return|;
block|}
comment|/**    * Policy for calculating sleeping intervals between retry attempts    */
specifier|public
specifier|static
class|class
name|BackoffPolicy
block|{
specifier|public
name|long
name|getBackoffTime
parameter_list|(
name|RetryConfig
name|config
parameter_list|,
name|int
name|attempts
parameter_list|)
block|{
return|return
name|addJitter
argument_list|(
name|config
operator|.
name|getSleepInterval
argument_list|()
argument_list|,
name|config
operator|.
name|getJitter
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ExponentialBackoffPolicy
extends|extends
name|BackoffPolicy
block|{
annotation|@
name|Override
specifier|public
name|long
name|getBackoffTime
parameter_list|(
name|RetryConfig
name|config
parameter_list|,
name|int
name|attempts
parameter_list|)
block|{
name|long
name|backoffTime
init|=
call|(
name|long
call|)
argument_list|(
name|config
operator|.
name|getSleepInterval
argument_list|()
operator|*
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|attempts
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addJitter
argument_list|(
name|backoffTime
argument_list|,
name|config
operator|.
name|getJitter
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ExponentialBackoffPolicyWithLimit
extends|extends
name|ExponentialBackoffPolicy
block|{
annotation|@
name|Override
specifier|public
name|long
name|getBackoffTime
parameter_list|(
name|RetryConfig
name|config
parameter_list|,
name|int
name|attempts
parameter_list|)
block|{
name|long
name|backoffTime
init|=
name|super
operator|.
name|getBackoffTime
argument_list|(
name|config
argument_list|,
name|attempts
argument_list|)
decl_stmt|;
return|return
name|config
operator|.
name|getMaxSleepTime
argument_list|()
operator|>
literal|0
condition|?
name|Math
operator|.
name|min
argument_list|(
name|backoffTime
argument_list|,
name|config
operator|.
name|getMaxSleepTime
argument_list|()
argument_list|)
else|:
name|backoffTime
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetryCounter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RetryConfig
name|retryConfig
decl_stmt|;
specifier|private
name|int
name|attempts
decl_stmt|;
specifier|public
name|RetryCounter
parameter_list|(
name|int
name|maxAttempts
parameter_list|,
name|long
name|sleepInterval
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|RetryConfig
argument_list|(
name|maxAttempts
argument_list|,
name|sleepInterval
argument_list|,
operator|-
literal|1
argument_list|,
name|timeUnit
argument_list|,
operator|new
name|ExponentialBackoffPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RetryCounter
parameter_list|(
name|RetryConfig
name|retryConfig
parameter_list|)
block|{
name|this
operator|.
name|attempts
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|retryConfig
operator|=
name|retryConfig
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxAttempts
parameter_list|()
block|{
return|return
name|retryConfig
operator|.
name|getMaxAttempts
argument_list|()
return|;
block|}
comment|/**    * Sleep for a back off time as supplied by the backoff policy, and increases the attempts    */
specifier|public
name|void
name|sleepUntilNextRetry
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|attempts
init|=
name|getAttemptTimes
argument_list|()
decl_stmt|;
name|long
name|sleepTime
init|=
name|getBackoffTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sleeping {} ms before retry #{}..."
argument_list|,
name|sleepTime
argument_list|,
name|attempts
argument_list|)
expr_stmt|;
name|retryConfig
operator|.
name|getTimeUnit
argument_list|()
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|useRetry
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|shouldRetry
parameter_list|()
block|{
return|return
name|attempts
operator|<
name|retryConfig
operator|.
name|getMaxAttempts
argument_list|()
return|;
block|}
specifier|public
name|void
name|useRetry
parameter_list|()
block|{
name|attempts
operator|++
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRetry
parameter_list|()
block|{
return|return
name|attempts
operator|>
literal|0
return|;
block|}
specifier|public
name|int
name|getAttemptTimes
parameter_list|()
block|{
return|return
name|attempts
return|;
block|}
specifier|public
name|long
name|getBackoffTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|retryConfig
operator|.
name|backoffPolicy
operator|.
name|getBackoffTime
argument_list|(
name|this
operator|.
name|retryConfig
argument_list|,
name|getAttemptTimes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|long
name|getBackoffTimeAndIncrementAttempts
parameter_list|()
block|{
name|long
name|backoffTime
init|=
name|getBackoffTime
argument_list|()
decl_stmt|;
name|useRetry
argument_list|()
expr_stmt|;
return|return
name|backoffTime
return|;
block|}
block|}
end_class

end_unit

