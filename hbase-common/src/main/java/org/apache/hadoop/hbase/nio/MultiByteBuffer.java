begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|BufferOverflowException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|BufferUnderflowException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|InvalidMarkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Provides a unified view of all the underlying ByteBuffers and will look as if a bigger  * sequential buffer. This class provides similar APIs as in {@link ByteBuffer} to put/get int,  * short, long etc and doing operations like mark, reset, slice etc. This has to be used when  * data is split across multiple byte buffers and we don't want copy them to single buffer  * for reading from it.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MultiByteBuffer
block|{
specifier|private
specifier|final
name|ByteBuffer
index|[]
name|items
decl_stmt|;
comment|// Pointer to the current item in the MBB
specifier|private
name|ByteBuffer
name|curItem
init|=
literal|null
decl_stmt|;
comment|// Index of the current item in the MBB
specifier|private
name|int
name|curItemIndex
init|=
literal|0
decl_stmt|;
comment|/**    * An indicator that helps in short circuiting some of the APIs functionality    * if the MBB is backed by single item    */
specifier|private
specifier|final
name|boolean
name|singleItem
decl_stmt|;
specifier|private
name|int
name|limit
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|limitedItemIndex
decl_stmt|;
specifier|private
name|int
name|markedItemIndex
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|itemBeginPos
decl_stmt|;
specifier|public
name|MultiByteBuffer
parameter_list|(
name|ByteBuffer
modifier|...
name|items
parameter_list|)
block|{
assert|assert
name|items
operator|!=
literal|null
assert|;
assert|assert
name|items
operator|.
name|length
operator|>
literal|0
assert|;
name|this
operator|.
name|items
operator|=
name|items
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
name|this
operator|.
name|singleItem
operator|=
name|items
operator|.
name|length
operator|==
literal|1
expr_stmt|;
comment|// See below optimization in getInt(int) where we check whether the given index land in current
comment|// item. For this we need to check whether the passed index is less than the next item begin
comment|// offset. To handle this effectively for the last item buffer, we add an extra item into this
comment|// array.
name|itemBeginPos
operator|=
operator|new
name|int
index|[
name|items
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|item
init|=
name|items
index|[
name|i
index|]
decl_stmt|;
name|item
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|itemBeginPos
index|[
name|i
index|]
operator|=
name|offset
expr_stmt|;
name|int
name|l
init|=
name|item
operator|.
name|limit
argument_list|()
operator|-
name|item
operator|.
name|position
argument_list|()
decl_stmt|;
name|offset
operator|+=
name|l
expr_stmt|;
block|}
name|this
operator|.
name|limit
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|itemBeginPos
index|[
name|items
operator|.
name|length
index|]
operator|=
name|offset
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|limitedItemIndex
operator|=
name|this
operator|.
name|items
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
specifier|private
name|MultiByteBuffer
parameter_list|(
name|ByteBuffer
index|[]
name|items
parameter_list|,
name|int
index|[]
name|itemBeginPos
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|limitedIndex
parameter_list|,
name|int
name|curItemIndex
parameter_list|,
name|int
name|markedIndex
parameter_list|)
block|{
name|this
operator|.
name|items
operator|=
name|items
expr_stmt|;
name|this
operator|.
name|curItemIndex
operator|=
name|curItemIndex
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
name|this
operator|.
name|singleItem
operator|=
name|items
operator|.
name|length
operator|==
literal|1
expr_stmt|;
name|this
operator|.
name|itemBeginPos
operator|=
name|itemBeginPos
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|limitedItemIndex
operator|=
name|limitedIndex
expr_stmt|;
name|this
operator|.
name|markedItemIndex
operator|=
name|markedIndex
expr_stmt|;
block|}
comment|/**    * @return the underlying array if this MultiByteBuffer is made up of single on heap ByteBuffer.    * @throws UnsupportedOperationException - if the MBB is not made up of single item    * or if the single item is a Direct Byte Buffer    */
specifier|public
name|byte
index|[]
name|array
parameter_list|()
block|{
if|if
condition|(
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|array
argument_list|()
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * @return the array offset of the item ByteBuffer if the MBB is made up of    * single on heap ByteBuffer    * @throws UnsupportedOperationException if the MBB is not made up of single item or    * the single item is a Direct byte Buffer    */
specifier|public
name|int
name|arrayOffset
parameter_list|()
block|{
if|if
condition|(
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|arrayOffset
argument_list|()
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * @return true if the MBB is made up of single item and that single item is an    * on heap Byte Buffer    */
specifier|public
name|boolean
name|hasArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|singleItem
operator|&&
name|this
operator|.
name|curItem
operator|.
name|hasArray
argument_list|()
return|;
block|}
comment|/**    * @return the total capacity of this MultiByteBuffer.    */
specifier|public
name|int
name|capacity
parameter_list|()
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|item
range|:
name|this
operator|.
name|items
control|)
block|{
name|c
operator|+=
name|item
operator|.
name|capacity
argument_list|()
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
comment|/**    * Fetches the byte at the given index. Does not change position of the underlying ByteBuffers    * @param index    * @return the byte at the given index    */
specifier|public
name|byte
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|singleItem
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
name|int
name|itemIndex
init|=
name|getItemIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|items
index|[
name|itemIndex
index|]
operator|.
name|get
argument_list|(
name|index
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|itemIndex
index|]
argument_list|)
return|;
block|}
comment|/*    * Returns in which sub ByteBuffer, the given element index will be available.    */
specifier|private
name|int
name|getItemIndex
parameter_list|(
name|int
name|elemIndex
parameter_list|)
block|{
name|int
name|index
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|elemIndex
operator|>
name|this
operator|.
name|itemBeginPos
index|[
name|index
index|]
condition|)
block|{
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|this
operator|.
name|itemBeginPos
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
block|}
return|return
name|index
operator|-
literal|1
return|;
block|}
comment|/*    * Returns in which sub ByteBuffer, the given element index will be available. In this case we are    * sure that the item will be after MBB's current position    */
specifier|private
name|int
name|getItemIndexFromCurItemIndex
parameter_list|(
name|int
name|elemIndex
parameter_list|)
block|{
name|int
name|index
init|=
name|this
operator|.
name|curItemIndex
decl_stmt|;
while|while
condition|(
name|elemIndex
operator|<
name|this
operator|.
name|itemBeginPos
index|[
name|index
index|]
condition|)
block|{
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|this
operator|.
name|itemBeginPos
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
block|}
return|return
name|index
operator|-
literal|1
return|;
block|}
comment|/**    * Fetches the short at the given index. Does not change position of the underlying ByteBuffers    * @param index    * @return the short value at the given index    */
specifier|public
name|short
name|getShort
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|singleItem
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toShort
argument_list|(
name|curItem
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|// Mostly the index specified will land within this current item. Short circuit for that
name|int
name|itemIndex
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
index|]
operator|<=
name|index
operator|&&
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
operator|+
literal|1
index|]
operator|>
name|index
condition|)
block|{
name|itemIndex
operator|=
name|this
operator|.
name|curItemIndex
expr_stmt|;
block|}
else|else
block|{
name|itemIndex
operator|=
name|getItemIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|item
init|=
name|items
index|[
name|itemIndex
index|]
decl_stmt|;
name|int
name|offsetInItem
init|=
name|index
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|itemIndex
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|limit
argument_list|()
operator|-
name|offsetInItem
operator|>=
name|Bytes
operator|.
name|SIZEOF_SHORT
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toShort
argument_list|(
name|item
argument_list|,
name|offsetInItem
argument_list|)
return|;
block|}
if|if
condition|(
name|items
operator|.
name|length
operator|-
literal|1
operator|==
name|itemIndex
condition|)
block|{
comment|// means cur item is the last one and we wont be able to read a int. Throw exception
throw|throw
operator|new
name|BufferUnderflowException
argument_list|()
throw|;
block|}
name|ByteBuffer
name|nextItem
init|=
name|items
index|[
name|itemIndex
operator|+
literal|1
index|]
decl_stmt|;
comment|// Get available one byte from this item and remaining one from next
name|short
name|n
init|=
literal|0
decl_stmt|;
name|n
operator|^=
name|item
operator|.
name|get
argument_list|(
name|offsetInItem
argument_list|)
operator|&
literal|0xFF
expr_stmt|;
name|n
operator|<<=
literal|8
expr_stmt|;
name|n
operator|^=
name|nextItem
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|&
literal|0xFF
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**    * Fetches the int at the given index. Does not change position of the underlying ByteBuffers    * @param index    * @return the int value at the given index    */
specifier|public
name|int
name|getInt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|singleItem
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toInt
argument_list|(
name|this
operator|.
name|curItem
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|// Mostly the index specified will land within this current item. Short circuit for that
name|int
name|itemIndex
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
index|]
operator|<=
name|index
operator|&&
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
operator|+
literal|1
index|]
operator|>
name|index
condition|)
block|{
name|itemIndex
operator|=
name|this
operator|.
name|curItemIndex
expr_stmt|;
block|}
else|else
block|{
name|itemIndex
operator|=
name|getItemIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|getInt
argument_list|(
name|index
argument_list|,
name|itemIndex
argument_list|)
return|;
block|}
comment|/**    * Fetches the int at the given index. Does not change position of the underlying ByteBuffers. The    * difference for this API from {@link #getInt(int)} is the caller is sure that the index will be    * after the current position of this MBB.    *    * @param index    * @return the int value at the given index    */
specifier|public
name|int
name|getIntStrictlyForward
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|singleItem
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toInt
argument_list|(
name|this
operator|.
name|curItem
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|// Mostly the index specified will land within this current item. Short circuit for that
name|int
name|itemIndex
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
operator|+
literal|1
index|]
operator|>
name|index
condition|)
block|{
name|itemIndex
operator|=
name|this
operator|.
name|curItemIndex
expr_stmt|;
block|}
else|else
block|{
name|itemIndex
operator|=
name|getItemIndexFromCurItemIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|getInt
argument_list|(
name|index
argument_list|,
name|itemIndex
argument_list|)
return|;
block|}
specifier|private
name|int
name|getInt
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|itemIndex
parameter_list|)
block|{
name|ByteBuffer
name|item
init|=
name|items
index|[
name|itemIndex
index|]
decl_stmt|;
name|int
name|offsetInItem
init|=
name|index
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|itemIndex
index|]
decl_stmt|;
name|int
name|remainingLen
init|=
name|item
operator|.
name|limit
argument_list|()
operator|-
name|offsetInItem
decl_stmt|;
if|if
condition|(
name|remainingLen
operator|>=
name|Bytes
operator|.
name|SIZEOF_INT
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toInt
argument_list|(
name|item
argument_list|,
name|offsetInItem
argument_list|)
return|;
block|}
if|if
condition|(
name|items
operator|.
name|length
operator|-
literal|1
operator|==
name|itemIndex
condition|)
block|{
comment|// means cur item is the last one and we wont be able to read a int. Throw exception
throw|throw
operator|new
name|BufferUnderflowException
argument_list|()
throw|;
block|}
name|ByteBuffer
name|nextItem
init|=
name|items
index|[
name|itemIndex
operator|+
literal|1
index|]
decl_stmt|;
comment|// Get available bytes from this item and remaining from next
name|int
name|l
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offsetInItem
init|;
name|i
operator|<
name|item
operator|.
name|capacity
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|<<=
literal|8
expr_stmt|;
name|l
operator|^=
name|item
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Bytes
operator|.
name|SIZEOF_INT
operator|-
name|remainingLen
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|<<=
literal|8
expr_stmt|;
name|l
operator|^=
name|nextItem
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/**    * Fetches the long at the given index. Does not change position of the underlying ByteBuffers    * @param index    * @return the long value at the given index    */
specifier|public
name|long
name|getLong
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|singleItem
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|getLong
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// Mostly the index specified will land within this current item. Short circuit for that
name|int
name|itemIndex
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
index|]
operator|<=
name|index
operator|&&
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
operator|+
literal|1
index|]
operator|>
name|index
condition|)
block|{
name|itemIndex
operator|=
name|this
operator|.
name|curItemIndex
expr_stmt|;
block|}
else|else
block|{
name|itemIndex
operator|=
name|getItemIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|item
init|=
name|items
index|[
name|itemIndex
index|]
decl_stmt|;
name|int
name|offsetInItem
init|=
name|index
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|itemIndex
index|]
decl_stmt|;
name|int
name|remainingLen
init|=
name|item
operator|.
name|limit
argument_list|()
operator|-
name|offsetInItem
decl_stmt|;
if|if
condition|(
name|remainingLen
operator|>=
name|Bytes
operator|.
name|SIZEOF_LONG
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toLong
argument_list|(
name|item
argument_list|,
name|offsetInItem
argument_list|)
return|;
block|}
if|if
condition|(
name|items
operator|.
name|length
operator|-
literal|1
operator|==
name|itemIndex
condition|)
block|{
comment|// means cur item is the last one and we wont be able to read a long. Throw exception
throw|throw
operator|new
name|BufferUnderflowException
argument_list|()
throw|;
block|}
name|ByteBuffer
name|nextItem
init|=
name|items
index|[
name|itemIndex
operator|+
literal|1
index|]
decl_stmt|;
comment|// Get available bytes from this item and remaining from next
name|long
name|l
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offsetInItem
init|;
name|i
operator|<
name|item
operator|.
name|capacity
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|<<=
literal|8
expr_stmt|;
name|l
operator|^=
name|item
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Bytes
operator|.
name|SIZEOF_LONG
operator|-
name|remainingLen
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|<<=
literal|8
expr_stmt|;
name|l
operator|^=
name|nextItem
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/**    * @return this MBB's current position    */
specifier|public
name|int
name|position
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
return|return
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|()
return|;
return|return
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
index|]
operator|+
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|()
return|;
block|}
comment|/**    * Sets this MBB's position to the given value.    * @param position    * @return this object    */
specifier|public
name|MultiByteBuffer
name|position
parameter_list|(
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
name|position
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Short circuit for positioning within the cur item. Mostly that is the case.
if|if
condition|(
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
index|]
operator|<=
name|position
operator|&&
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
operator|+
literal|1
index|]
operator|>
name|position
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
name|position
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|int
name|itemIndex
init|=
name|getItemIndex
argument_list|(
name|position
argument_list|)
decl_stmt|;
comment|// All items from 0 - curItem-1 set position at end.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemIndex
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|position
argument_list|(
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// All items after curItem set position at begin
for|for
control|(
name|int
name|i
init|=
name|itemIndex
operator|+
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|itemIndex
index|]
expr_stmt|;
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
name|position
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|itemIndex
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|curItemIndex
operator|=
name|itemIndex
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Rewinds this MBB and the position is set to 0    * @return this object    */
specifier|public
name|MultiByteBuffer
name|rewind
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|curItemIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
name|this
operator|.
name|markedItemIndex
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Marks the current position of the MBB    * @return this object    */
specifier|public
name|MultiByteBuffer
name|mark
parameter_list|()
block|{
name|this
operator|.
name|markedItemIndex
operator|=
name|this
operator|.
name|curItemIndex
expr_stmt|;
name|this
operator|.
name|curItem
operator|.
name|mark
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Similar to {@link ByteBuffer}.reset(), ensures that this MBB    * is reset back to last marked position.    * @return This MBB    */
specifier|public
name|MultiByteBuffer
name|reset
parameter_list|()
block|{
comment|// when the buffer is moved to the next one.. the reset should happen on the previous marked
comment|// item and the new one should be taken as the base
if|if
condition|(
name|this
operator|.
name|markedItemIndex
operator|<
literal|0
condition|)
throw|throw
operator|new
name|InvalidMarkException
argument_list|()
throw|;
name|ByteBuffer
name|markedItem
init|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|markedItemIndex
index|]
decl_stmt|;
name|markedItem
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|markedItem
expr_stmt|;
comment|// All items after the marked position upto the current item should be reset to 0
for|for
control|(
name|int
name|i
init|=
name|this
operator|.
name|curItemIndex
init|;
name|i
operator|>
name|this
operator|.
name|markedItemIndex
condition|;
name|i
operator|--
control|)
block|{
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|curItemIndex
operator|=
name|this
operator|.
name|markedItemIndex
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Returns the number of elements between the current position and the    * limit.    * @return the remaining elements in this MBB    */
specifier|public
name|int
name|remaining
parameter_list|()
block|{
name|int
name|remain
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|curItemIndex
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|remain
operator|+=
name|items
index|[
name|i
index|]
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
return|return
name|remain
return|;
block|}
comment|/**    * Returns true if there are elements between the current position and the limt    * @return true if there are elements, false otherwise    */
specifier|public
specifier|final
name|boolean
name|hasRemaining
parameter_list|()
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|hasRemaining
argument_list|()
operator|||
name|this
operator|.
name|curItemIndex
operator|<
name|this
operator|.
name|items
operator|.
name|length
operator|-
literal|1
return|;
block|}
comment|/**    * A relative method that returns byte at the current position.  Increments the    * current position by the size of a byte.    * @return the byte at the current position    */
specifier|public
name|byte
name|get
parameter_list|()
block|{
if|if
condition|(
operator|!
name|singleItem
operator|&&
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|items
operator|.
name|length
operator|-
literal|1
operator|==
name|this
operator|.
name|curItemIndex
condition|)
block|{
comment|// means cur item is the last one and we wont be able to read a long. Throw exception
throw|throw
operator|new
name|BufferUnderflowException
argument_list|()
throw|;
block|}
name|this
operator|.
name|curItemIndex
operator|++
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
block|}
return|return
name|this
operator|.
name|curItem
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the short value at the current position. Also advances the position by the size    * of short    *    * @return the short value at the current position    */
specifier|public
name|short
name|getShort
parameter_list|()
block|{
if|if
condition|(
name|singleItem
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|getShort
argument_list|()
return|;
block|}
name|int
name|remaining
init|=
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>=
name|Bytes
operator|.
name|SIZEOF_SHORT
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|getShort
argument_list|()
return|;
block|}
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|items
operator|.
name|length
operator|-
literal|1
operator|==
name|this
operator|.
name|curItemIndex
condition|)
block|{
comment|// means cur item is the last one and we wont be able to read a long. Throw exception
throw|throw
operator|new
name|BufferUnderflowException
argument_list|()
throw|;
block|}
name|this
operator|.
name|curItemIndex
operator|++
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
return|return
name|this
operator|.
name|curItem
operator|.
name|getShort
argument_list|()
return|;
block|}
name|short
name|n
init|=
literal|0
decl_stmt|;
name|n
operator|^=
name|get
argument_list|()
operator|&
literal|0xFF
expr_stmt|;
name|n
operator|<<=
literal|8
expr_stmt|;
name|n
operator|^=
name|get
argument_list|()
operator|&
literal|0xFF
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**    * Returns the int value at the current position. Also advances the position by the size of int    *    * @return the int value at the current position    */
specifier|public
name|int
name|getInt
parameter_list|()
block|{
if|if
condition|(
name|singleItem
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|getInt
argument_list|()
return|;
block|}
name|int
name|remaining
init|=
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>=
name|Bytes
operator|.
name|SIZEOF_INT
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|getInt
argument_list|()
return|;
block|}
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|items
operator|.
name|length
operator|-
literal|1
operator|==
name|this
operator|.
name|curItemIndex
condition|)
block|{
comment|// means cur item is the last one and we wont be able to read a long. Throw exception
throw|throw
operator|new
name|BufferUnderflowException
argument_list|()
throw|;
block|}
name|this
operator|.
name|curItemIndex
operator|++
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
return|return
name|this
operator|.
name|curItem
operator|.
name|getInt
argument_list|()
return|;
block|}
comment|// Get available bytes from this item and remaining from next
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Bytes
operator|.
name|SIZEOF_INT
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|<<=
literal|8
expr_stmt|;
name|n
operator|^=
name|get
argument_list|()
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
comment|/**    * Returns the long value at the current position. Also advances the position by the size of long    *    * @return the long value at the current position    */
specifier|public
name|long
name|getLong
parameter_list|()
block|{
if|if
condition|(
name|singleItem
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|getLong
argument_list|()
return|;
block|}
name|int
name|remaining
init|=
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>=
name|Bytes
operator|.
name|SIZEOF_LONG
condition|)
block|{
return|return
name|this
operator|.
name|curItem
operator|.
name|getLong
argument_list|()
return|;
block|}
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|items
operator|.
name|length
operator|-
literal|1
operator|==
name|this
operator|.
name|curItemIndex
condition|)
block|{
comment|// means cur item is the last one and we wont be able to read a long. Throw exception
throw|throw
operator|new
name|BufferUnderflowException
argument_list|()
throw|;
block|}
name|this
operator|.
name|curItemIndex
operator|++
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
return|return
name|this
operator|.
name|curItem
operator|.
name|getLong
argument_list|()
return|;
block|}
comment|// Get available bytes from this item and remaining from next
name|long
name|l
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Bytes
operator|.
name|SIZEOF_LONG
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|<<=
literal|8
expr_stmt|;
name|l
operator|^=
name|get
argument_list|()
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/**    * Returns the long value, stored as variable long at the current position of this    * MultiByteBuffer. Also advances it's position accordingly.    * This is similar to {@link WritableUtils#readVLong(DataInput)} but reads from a    * {@link MultiByteBuffer}    *    * @return the long value at the current position    */
specifier|public
name|long
name|getVLong
parameter_list|()
block|{
name|byte
name|firstByte
init|=
name|get
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|1
condition|)
block|{
return|return
name|firstByte
return|;
block|}
name|long
name|i
init|=
literal|0
decl_stmt|;
name|byte
name|b
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|len
operator|-
literal|1
condition|;
name|idx
operator|++
control|)
block|{
name|b
operator|=
name|get
argument_list|()
expr_stmt|;
name|i
operator|=
name|i
operator|<<
literal|8
expr_stmt|;
name|i
operator|=
name|i
operator||
operator|(
name|b
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
return|return
operator|(
name|WritableUtils
operator|.
name|isNegativeVInt
argument_list|(
name|firstByte
argument_list|)
condition|?
operator|(
name|i
operator|^
operator|-
literal|1L
operator|)
else|:
name|i
operator|)
return|;
block|}
comment|/**    * Copies the content from this MBB's current position to the byte array and fills it. Also    * advances the position of the MBB by the length of the byte[].    * @param dst    * @return this object    */
specifier|public
name|MultiByteBuffer
name|get
parameter_list|(
name|byte
index|[]
name|dst
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|dst
argument_list|,
literal|0
argument_list|,
name|dst
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Copies the specified number of bytes from this MBB's current position to the byte[]'s offset.    * Also advances the position of the MBB by the given length.    * @param dst    * @param offset within the current array    * @param length upto which the bytes to be copied    * @return this object    */
specifier|public
name|MultiByteBuffer
name|get
parameter_list|(
name|byte
index|[]
name|dst
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|get
argument_list|(
name|dst
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|toRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|curItem
operator|.
name|get
argument_list|(
name|dst
argument_list|,
name|offset
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|length
operator|-=
name|toRead
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
break|break;
name|this
operator|.
name|curItemIndex
operator|++
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
name|offset
operator|+=
name|toRead
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**    * Marks the limit of this MBB.    * @param limit    * @return This MBB    */
specifier|public
name|MultiByteBuffer
name|limit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
if|if
condition|(
name|singleItem
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Normally the limit will try to limit within the last BB item
name|int
name|limitedIndexBegin
init|=
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|limitedItemIndex
index|]
decl_stmt|;
if|if
condition|(
name|limit
operator|>=
name|limitedIndexBegin
operator|&&
name|limit
operator|<
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|limitedItemIndex
operator|+
literal|1
index|]
condition|)
block|{
name|this
operator|.
name|items
index|[
name|this
operator|.
name|limitedItemIndex
index|]
operator|.
name|limit
argument_list|(
name|limit
operator|-
name|limitedIndexBegin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|int
name|itemIndex
init|=
name|getItemIndex
argument_list|(
name|limit
argument_list|)
decl_stmt|;
name|int
name|beginOffset
init|=
name|this
operator|.
name|itemBeginPos
index|[
name|itemIndex
index|]
decl_stmt|;
name|int
name|offsetInItem
init|=
name|limit
operator|-
name|beginOffset
decl_stmt|;
name|ByteBuffer
name|item
init|=
name|items
index|[
name|itemIndex
index|]
decl_stmt|;
name|item
operator|.
name|limit
argument_list|(
name|offsetInItem
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|this
operator|.
name|limitedItemIndex
init|;
name|i
operator|<
name|itemIndex
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|limit
argument_list|(
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|limitedItemIndex
operator|=
name|itemIndex
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|itemIndex
operator|+
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|limit
argument_list|(
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Returns the limit of this MBB    * @return limit of the MBB    */
specifier|public
name|int
name|limit
parameter_list|()
block|{
return|return
name|this
operator|.
name|limit
return|;
block|}
comment|/**    * Returns an MBB which is a sliced version of this MBB. The position, limit and mark    * of the new MBB will be independent than that of the original MBB.    * The content of the new MBB will start at this MBB's current position    * @return a sliced MBB    */
specifier|public
name|MultiByteBuffer
name|slice
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
block|{
return|return
operator|new
name|MultiByteBuffer
argument_list|(
name|curItem
operator|.
name|slice
argument_list|()
argument_list|)
return|;
block|}
name|ByteBuffer
index|[]
name|copy
init|=
operator|new
name|ByteBuffer
index|[
name|this
operator|.
name|limitedItemIndex
operator|-
name|this
operator|.
name|curItemIndex
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|curItemIndex
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<=
name|this
operator|.
name|limitedItemIndex
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|copy
index|[
name|j
index|]
operator|=
name|this
operator|.
name|items
index|[
name|i
index|]
operator|.
name|slice
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|MultiByteBuffer
argument_list|(
name|copy
argument_list|)
return|;
block|}
comment|/**    * Returns an MBB which is a duplicate version of this MBB. The position, limit and mark    * of the new MBB will be independent than that of the original MBB.    * The content of the new MBB will start at this MBB's current position    * The position, limit and mark of the new MBB would be identical to this MBB in terms of    * values.    * @return a sliced MBB    */
specifier|public
name|MultiByteBuffer
name|duplicate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
block|{
return|return
operator|new
name|MultiByteBuffer
argument_list|(
operator|new
name|ByteBuffer
index|[]
block|{
name|curItem
operator|.
name|duplicate
argument_list|()
block|}
argument_list|,
name|this
operator|.
name|itemBeginPos
argument_list|,
name|this
operator|.
name|limit
argument_list|,
name|this
operator|.
name|limitedItemIndex
argument_list|,
name|this
operator|.
name|curItemIndex
argument_list|,
name|this
operator|.
name|markedItemIndex
argument_list|)
return|;
block|}
name|ByteBuffer
index|[]
name|itemsCopy
init|=
operator|new
name|ByteBuffer
index|[
name|this
operator|.
name|items
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|itemsCopy
index|[
name|i
index|]
operator|=
name|items
index|[
name|i
index|]
operator|.
name|duplicate
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|MultiByteBuffer
argument_list|(
name|itemsCopy
argument_list|,
name|this
operator|.
name|itemBeginPos
argument_list|,
name|this
operator|.
name|limit
argument_list|,
name|this
operator|.
name|limitedItemIndex
argument_list|,
name|this
operator|.
name|curItemIndex
argument_list|,
name|this
operator|.
name|markedItemIndex
argument_list|)
return|;
block|}
comment|/**    * Writes a byte to this MBB at the current position and increments the position    * @param b    * @return this object    */
specifier|public
name|MultiByteBuffer
name|put
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|singleItem
operator|&&
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|curItemIndex
operator|==
name|this
operator|.
name|items
operator|.
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|BufferOverflowException
argument_list|()
throw|;
block|}
name|this
operator|.
name|curItemIndex
operator|++
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
block|}
name|this
operator|.
name|curItem
operator|.
name|put
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Writes a byte to this MBB at the given index    * @param index    * @param b    * @return this object    */
specifier|public
name|MultiByteBuffer
name|put
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|int
name|itemIndex
init|=
name|getItemIndex
argument_list|(
name|limit
argument_list|)
decl_stmt|;
name|ByteBuffer
name|item
init|=
name|items
index|[
name|itemIndex
index|]
decl_stmt|;
name|item
operator|.
name|put
argument_list|(
name|index
operator|-
name|itemBeginPos
index|[
name|itemIndex
index|]
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Copies from a src MBB to this MBB.    * @param offset the position in this MBB to which the copy should happen    * @param src the src MBB    * @param srcOffset the offset in the src MBB from where the elements should be read    * @param length the length upto which the copy should happen    */
specifier|public
name|void
name|put
parameter_list|(
name|int
name|offset
parameter_list|,
name|MultiByteBuffer
name|src
parameter_list|,
name|int
name|srcOffset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|src
operator|.
name|hasArray
argument_list|()
operator|&&
name|this
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|src
operator|.
name|array
argument_list|()
argument_list|,
name|srcOffset
operator|+
name|src
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|this
operator|.
name|array
argument_list|()
argument_list|,
name|this
operator|.
name|arrayOffset
argument_list|()
operator|+
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|destItemIndex
init|=
name|getItemIndex
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|int
name|srcItemIndex
init|=
name|getItemIndex
argument_list|(
name|srcOffset
argument_list|)
decl_stmt|;
name|ByteBuffer
name|destItem
init|=
name|this
operator|.
name|items
index|[
name|destItemIndex
index|]
decl_stmt|;
name|offset
operator|=
name|offset
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|destItemIndex
index|]
expr_stmt|;
name|ByteBuffer
name|srcItem
init|=
name|src
operator|.
name|items
index|[
name|srcItemIndex
index|]
decl_stmt|;
name|srcOffset
operator|=
name|srcOffset
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|srcItemIndex
index|]
expr_stmt|;
name|int
name|toRead
decl_stmt|,
name|toWrite
decl_stmt|,
name|toMove
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|toWrite
operator|=
name|destItem
operator|.
name|limit
argument_list|()
operator|-
name|offset
expr_stmt|;
name|toRead
operator|=
name|srcItem
operator|.
name|limit
argument_list|()
operator|-
name|srcOffset
expr_stmt|;
name|toMove
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|toRead
argument_list|,
name|toWrite
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToBuffer
argument_list|(
name|destItem
argument_list|,
name|srcItem
argument_list|,
name|srcOffset
argument_list|,
name|offset
argument_list|,
name|toMove
argument_list|)
expr_stmt|;
name|length
operator|-=
name|toMove
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
break|break;
if|if
condition|(
name|toRead
operator|<
name|toWrite
condition|)
block|{
name|srcItem
operator|=
name|src
operator|.
name|items
index|[
operator|++
name|srcItemIndex
index|]
expr_stmt|;
name|srcOffset
operator|=
literal|0
expr_stmt|;
name|offset
operator|+=
name|toMove
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toRead
operator|>
name|toWrite
condition|)
block|{
name|destItem
operator|=
name|this
operator|.
name|items
index|[
operator|++
name|destItemIndex
index|]
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|srcOffset
operator|+=
name|toMove
expr_stmt|;
block|}
else|else
block|{
comment|// toRead = toWrite case
name|srcItem
operator|=
name|src
operator|.
name|items
index|[
operator|++
name|srcItemIndex
index|]
expr_stmt|;
name|srcOffset
operator|=
literal|0
expr_stmt|;
name|destItem
operator|=
name|this
operator|.
name|items
index|[
operator|++
name|destItemIndex
index|]
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Writes an int to this MBB at its current position. Also advances the position by size of int    * @param val Int value to write    * @return this object    */
specifier|public
name|MultiByteBuffer
name|putInt
parameter_list|(
name|int
name|val
parameter_list|)
block|{
if|if
condition|(
name|singleItem
operator|||
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
operator|>=
name|Bytes
operator|.
name|SIZEOF_INT
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|putInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|this
operator|.
name|curItemIndex
operator|==
name|this
operator|.
name|items
operator|.
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|BufferOverflowException
argument_list|()
throw|;
block|}
comment|// During read, we will read as byte by byte for this case. So just write in Big endian
name|put
argument_list|(
name|int3
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|int2
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|int1
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|int0
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
specifier|static
name|byte
name|int3
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|24
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|int2
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|16
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|int1
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|8
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|int0
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
argument_list|)
return|;
block|}
comment|/**    * Copies from the given byte[] to this MBB    * @param src    * @return this MBB    */
specifier|public
specifier|final
name|MultiByteBuffer
name|put
parameter_list|(
name|byte
index|[]
name|src
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|src
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Copies from the given byte[] to this MBB    * @param src    * @param offset the position in the byte array from which the copy should be done    * @param length the length upto which the copy should happen    * @return this MBB    */
specifier|public
name|MultiByteBuffer
name|put
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|singleItem
operator|||
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
operator|>=
name|length
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyFromArrayToBuffer
argument_list|(
name|this
operator|.
name|curItem
argument_list|,
name|src
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|int
name|end
init|=
name|offset
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|put
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * Writes a long to this MBB at its current position. Also advances the position by size of long    * @param val Long value to write    * @return this object    */
specifier|public
name|MultiByteBuffer
name|putLong
parameter_list|(
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|singleItem
operator|||
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
operator|>=
name|Bytes
operator|.
name|SIZEOF_LONG
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|putLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|this
operator|.
name|curItemIndex
operator|==
name|this
operator|.
name|items
operator|.
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|BufferOverflowException
argument_list|()
throw|;
block|}
comment|// During read, we will read as byte by byte for this case. So just write in Big endian
name|put
argument_list|(
name|long7
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long6
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long5
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long4
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long3
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long2
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long1
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|long0
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
specifier|static
name|byte
name|long7
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|56
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|long6
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|48
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|long5
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|40
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|long4
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|32
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|long3
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|24
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|long2
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|16
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|long1
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
operator|>>
literal|8
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|long0
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|x
argument_list|)
return|;
block|}
comment|/**    * Jumps the current position of this MBB by specified length.    * @param length    */
specifier|public
name|void
name|skip
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|()
operator|+
name|length
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Get available bytes from this item and remaining from next
name|int
name|jump
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|jump
operator|=
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
expr_stmt|;
if|if
condition|(
name|jump
operator|>=
name|length
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|()
operator|+
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|()
operator|+
name|jump
argument_list|)
expr_stmt|;
name|length
operator|-=
name|jump
expr_stmt|;
name|this
operator|.
name|curItemIndex
operator|++
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|this
operator|.
name|curItemIndex
index|]
expr_stmt|;
block|}
block|}
comment|/**    * Jumps back the current position of this MBB by specified length.    * @param length    */
specifier|public
name|void
name|moveBack
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
block|{
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
name|curItem
operator|.
name|position
argument_list|()
operator|-
name|length
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|length
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|length
operator|>
name|curItem
operator|.
name|position
argument_list|()
condition|)
block|{
name|length
operator|-=
name|curItem
operator|.
name|position
argument_list|()
expr_stmt|;
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|curItemIndex
operator|--
expr_stmt|;
name|this
operator|.
name|curItem
operator|=
name|this
operator|.
name|items
index|[
name|curItemIndex
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|curItem
operator|.
name|position
argument_list|(
name|curItem
operator|.
name|position
argument_list|()
operator|-
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Returns bytes from current position till length specified, as a single ByteButter. When all    * these bytes happen to be in a single ByteBuffer, which this object wraps, that ByteBuffer item    * as such will be returned. So users are warned not to change the position or limit of this    * returned ByteBuffer. The position of the returned byte buffer is at the begin of the required    * bytes. When the required bytes happen to span across multiple ByteBuffers, this API will copy    * the bytes to a newly created ByteBuffer of required size and return that.    *    * @param length number of bytes required.    * @return bytes from current position till length specified, as a single ByteButter.    */
specifier|public
name|ByteBuffer
name|asSubBuffer
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
operator|||
name|this
operator|.
name|curItem
operator|.
name|remaining
argument_list|()
operator|>=
name|length
condition|)
block|{
return|return
name|this
operator|.
name|curItem
return|;
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|dupB
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|locCurItemIndex
init|=
name|curItemIndex
decl_stmt|;
name|ByteBuffer
name|locCurItem
init|=
name|curItem
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|toRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|locCurItem
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|dupB
argument_list|,
name|locCurItem
argument_list|,
name|locCurItem
operator|.
name|position
argument_list|()
argument_list|,
name|offset
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|length
operator|-=
name|toRead
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
break|break;
name|locCurItemIndex
operator|++
expr_stmt|;
name|locCurItem
operator|=
name|this
operator|.
name|items
index|[
name|locCurItemIndex
index|]
expr_stmt|;
name|offset
operator|+=
name|toRead
expr_stmt|;
block|}
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dupB
argument_list|)
return|;
block|}
comment|/**    * Returns bytes from given offset till length specified, as a single ByteButter. When all these    * bytes happen to be in a single ByteBuffer, which this object wraps, that ByteBuffer item as    * such will be returned (with offset in this ByteBuffer where the bytes starts). So users are    * warned not to change the position or limit of this returned ByteBuffer. When the required bytes    * happen to span across multiple ByteBuffers, this API will copy the bytes to a newly created    * ByteBuffer of required size and return that.    *    * @param offset the offset in this MBB from where the subBuffer should be created    * @param length the length of the subBuffer    * @return a pair of bytes from current position till length specified, as a single ByteButter and    *         offset in that Buffer where the bytes starts.    */
specifier|public
name|Pair
argument_list|<
name|ByteBuffer
argument_list|,
name|Integer
argument_list|>
name|asSubBuffer
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|singleItem
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|ByteBuffer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|this
operator|.
name|curItem
argument_list|,
name|offset
argument_list|)
return|;
block|}
if|if
condition|(
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
index|]
operator|<=
name|offset
condition|)
block|{
name|int
name|relOffsetInCurItem
init|=
name|offset
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|this
operator|.
name|curItemIndex
index|]
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|curItem
operator|.
name|limit
argument_list|()
operator|-
name|relOffsetInCurItem
operator|>=
name|length
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|ByteBuffer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|this
operator|.
name|curItem
argument_list|,
name|relOffsetInCurItem
argument_list|)
return|;
block|}
block|}
name|int
name|itemIndex
init|=
name|getItemIndex
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|ByteBuffer
name|item
init|=
name|this
operator|.
name|items
index|[
name|itemIndex
index|]
decl_stmt|;
name|offset
operator|=
name|offset
operator|-
name|this
operator|.
name|itemBeginPos
index|[
name|itemIndex
index|]
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|limit
argument_list|()
operator|-
name|offset
operator|>=
name|length
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|ByteBuffer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|item
argument_list|,
name|offset
argument_list|)
return|;
block|}
name|byte
index|[]
name|dst
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|destOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|toRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|item
operator|.
name|limit
argument_list|()
operator|-
name|offset
argument_list|)
decl_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|dst
argument_list|,
name|item
argument_list|,
name|offset
argument_list|,
name|destOffset
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|length
operator|-=
name|toRead
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
break|break;
name|itemIndex
operator|++
expr_stmt|;
name|item
operator|=
name|this
operator|.
name|items
index|[
name|itemIndex
index|]
expr_stmt|;
name|destOffset
operator|+=
name|toRead
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|ByteBuffer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Compares two MBBs    *    * @param buf1 the first MBB    * @param o1 the offset in the first MBB from where the compare has to happen    * @param len1 the length in the first MBB upto which the compare has to happen    * @param buf2 the second MBB    * @param o2 the offset in the second MBB from where the compare has to happen    * @param len2 the length in the second MBB upto which the compare has to happen    * @return Positive if buf1 is bigger than buf2, 0 if they are equal, and negative if buf1 is    *         smaller than buf2.    */
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|MultiByteBuffer
name|buf1
parameter_list|,
name|int
name|o1
parameter_list|,
name|int
name|len1
parameter_list|,
name|MultiByteBuffer
name|buf2
parameter_list|,
name|int
name|o2
parameter_list|,
name|int
name|len2
parameter_list|)
block|{
if|if
condition|(
name|buf1
operator|.
name|hasArray
argument_list|()
operator|&&
name|buf2
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buf1
operator|.
name|array
argument_list|()
argument_list|,
name|buf1
operator|.
name|arrayOffset
argument_list|()
operator|+
name|o1
argument_list|,
name|len1
argument_list|,
name|buf2
operator|.
name|array
argument_list|()
argument_list|,
name|buf2
operator|.
name|arrayOffset
argument_list|()
operator|+
name|o2
argument_list|,
name|len2
argument_list|)
return|;
block|}
name|int
name|end1
init|=
name|o1
operator|+
name|len1
decl_stmt|;
name|int
name|end2
init|=
name|o2
operator|+
name|len2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|o1
init|,
name|j
init|=
name|o2
init|;
name|i
operator|<
name|end1
operator|&&
name|j
operator|<
name|end2
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|int
name|a
init|=
name|buf1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b
init|=
name|buf2
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
condition|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
block|}
return|return
name|len1
operator|-
name|len2
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|MultiByteBuffer
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
name|MultiByteBuffer
name|that
init|=
operator|(
name|MultiByteBuffer
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|capacity
argument_list|()
operator|!=
name|that
operator|.
name|capacity
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|compareTo
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|capacity
argument_list|()
argument_list|,
name|that
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|capacity
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|b
range|:
name|this
operator|.
name|items
control|)
block|{
name|hash
operator|+=
name|b
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
block|}
end_class

end_unit

