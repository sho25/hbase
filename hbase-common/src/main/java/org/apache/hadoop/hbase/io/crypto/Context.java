begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Crypto context. Encapsulates an encryption algorithm and its key material.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|Context
implements|implements
name|Configurable
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Cipher
name|cipher
decl_stmt|;
specifier|private
name|Key
name|key
decl_stmt|;
specifier|private
name|String
name|keyHash
decl_stmt|;
name|Context
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
name|Context
parameter_list|()
block|{
name|this
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"cipher="
operator|+
operator|(
name|cipher
operator|!=
literal|null
condition|?
name|cipher
operator|.
name|getName
argument_list|()
else|:
literal|"NONE"
operator|)
operator|+
literal|" keyHash="
operator|+
operator|(
name|keyHash
operator|!=
literal|null
condition|?
name|keyHash
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
operator|+
literal|"..."
else|:
literal|"NONE"
operator|)
return|;
block|}
specifier|public
name|Cipher
name|getCipher
parameter_list|()
block|{
return|return
name|cipher
return|;
block|}
specifier|public
name|Context
name|setCipher
parameter_list|(
name|Cipher
name|cipher
parameter_list|)
block|{
name|this
operator|.
name|cipher
operator|=
name|cipher
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|byte
index|[]
name|getKeyBytes
parameter_list|()
block|{
return|return
name|key
operator|.
name|getEncoded
argument_list|()
return|;
block|}
specifier|public
name|String
name|getKeyBytesHash
parameter_list|()
block|{
return|return
name|keyHash
return|;
block|}
specifier|public
name|String
name|getKeyFormat
parameter_list|()
block|{
return|return
name|key
operator|.
name|getFormat
argument_list|()
return|;
block|}
specifier|public
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|Context
name|setKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|cipher
argument_list|,
literal|"Context does not have a cipher"
argument_list|)
expr_stmt|;
comment|// validate the key length
name|byte
index|[]
name|encoded
init|=
name|key
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoded
operator|.
name|length
operator|!=
name|cipher
operator|.
name|getKeyLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Illegal key length, have="
operator|+
name|encoded
operator|.
name|length
operator|+
literal|", want="
operator|+
name|cipher
operator|.
name|getKeyLength
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|keyHash
operator|=
name|MD5Hash
operator|.
name|getMD5AsHex
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

