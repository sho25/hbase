begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Encodes and decodes to and from Base64 notation.  *  *<p>  * Homepage:<a href="http://iharder.net/base64">http://iharder.net/base64</a>.  *</p>  *  *<p>  * Change Log:  *</p>  *<ul>  *<li>v2.2.1 - Fixed bug using URL_SAFE and ORDERED encodings. Fixed bug  *     when using very small files (~&lt; 40 bytes).</li>  *<li>v2.2 - Added some helper methods for encoding/decoding directly from  *     one file to the next. Also added a main() method to support command  *     line encoding/decoding from one file to the next. Also added these  *     Base64 dialects:  *<ol>  *<li>The default is RFC3548 format.</li>  *<li>Using Base64.URLSAFE generates URL and file name friendly format as  *         described in Section 4 of RFC3548.  *         http://www.faqs.org/rfcs/rfc3548.html</li>  *<li>Using Base64.ORDERED generates URL and file name friendly format  *         that preserves lexical ordering as described in  *         http://www.faqs.org/qa/rfcc-1940.html</li>  *</ol>  *<p>  *     Special thanks to Jim Kellerman at<a href="http://www.powerset.com/">  *     http://www.powerset.com/</a> for contributing the new Base64 dialects.  *</li>  *  *<li>v2.1 - Cleaned up javadoc comments and unused variables and methods.  *     Added some convenience methods for reading and writing to and from files.  *</li>  *<li>v2.0.2 - Now specifies UTF-8 encoding in places where the code fails on  *     systems with other encodings (like EBCDIC).</li>  *<li>v2.0.1 - Fixed an error when decoding a single byte, that is, when the  *     encoded data was a single byte.</li>  *<li>v2.0 - I got rid of methods that used booleans to set options. Now  *     everything is more consolidated and cleaner. The code now detects when  *     data that's being decoded is gzip-compressed and will decompress it  *     automatically. Generally things are cleaner. You'll probably have to  *     change some method calls that you were making to support the new options  *     format (<tt>int</tt>s that you "OR" together).</li>  *<li>v1.5.1 - Fixed bug when decompressing and decoding to a byte[] using  *<tt>decode( String s, boolean gzipCompressed )</tt>. Added the ability to  *     "suspend" encoding in the Output Stream so you can turn on and off the  *     encoding if you need to embed base64 data in an otherwise "normal" stream  *     (like an XML file).</li>  *<li>v1.5 - Output stream pases on flush() command but doesn't do anything  *     itself. This helps when using GZIP streams. Added the ability to  *     GZip-compress objects before encoding them.</li>  *<li>v1.4 - Added helper methods to read/write files.</li>  *<li>v1.3.6 - Fixed OutputStream.flush() so that 'position' is reset.</li>  *<li>v1.3.5 - Added flag to turn on and off line breaks. Fixed bug in input  *     stream where last buffer being read, if not completely full, was not  *     returned.</li>  *<li>v1.3.4 - Fixed when "improperly padded stream" error was thrown at the  *     wrong time.</li>  *<li>v1.3.3 - Fixed I/O streams which were totally messed up.</li>  *</ul>  *  *<p>  * I am placing this code in the Public Domain. Do with it as you will. This  * software comes with no guarantees or warranties but with plenty of  * well-wishing instead!  *<p>  * Please visit<a href="http://iharder.net/base64">http://iharder.net/base64</a>  * periodically to check for updates or to contribute improvements.  *<p>  * author: Robert Harder, rob@iharder.net  *<br>  * version: 2.2.1  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|Base64
block|{
comment|/* ******** P U B L I C   F I E L D S ******** */
comment|/** No options specified. Value is zero. */
specifier|public
specifier|final
specifier|static
name|int
name|NO_OPTIONS
init|=
literal|0
decl_stmt|;
comment|/** Specify encoding. */
specifier|public
specifier|final
specifier|static
name|int
name|ENCODE
init|=
literal|1
decl_stmt|;
comment|/** Specify decoding. */
specifier|public
specifier|final
specifier|static
name|int
name|DECODE
init|=
literal|0
decl_stmt|;
comment|/** Specify that data should be gzip-compressed. */
specifier|public
specifier|final
specifier|static
name|int
name|GZIP
init|=
literal|2
decl_stmt|;
comment|/** Don't break lines when encoding (violates strict Base64 specification) */
specifier|public
specifier|final
specifier|static
name|int
name|DONT_BREAK_LINES
init|=
literal|8
decl_stmt|;
comment|/**    * Encode using Base64-like encoding that is URL and Filename safe as    * described in Section 4 of RFC3548:    *<a href="http://www.faqs.org/rfcs/rfc3548.html">    * http://www.faqs.org/rfcs/rfc3548.html</a>.    * It is important to note that data encoded this way is<em>not</em>    * officially valid Base64, or at the very least should not be called Base64    * without also specifying that is was encoded using the URL and    * Filename safe dialect.    */
specifier|public
specifier|final
specifier|static
name|int
name|URL_SAFE
init|=
literal|16
decl_stmt|;
comment|/**    * Encode using the special "ordered" dialect of Base64 described here:    *<a href="http://www.faqs.org/qa/rfcc-1940.html">    * http://www.faqs.org/qa/rfcc-1940.html</a>.    */
specifier|public
specifier|final
specifier|static
name|int
name|ORDERED
init|=
literal|32
decl_stmt|;
comment|/* ******** P R I V A T E   F I E L D S ******** */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Base64
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Maximum line length (76) of Base64 output. */
specifier|private
specifier|final
specifier|static
name|int
name|MAX_LINE_LENGTH
init|=
literal|76
decl_stmt|;
comment|/** The equals sign (=) as a byte. */
specifier|private
specifier|final
specifier|static
name|byte
name|EQUALS_SIGN
init|=
operator|(
name|byte
operator|)
literal|'='
decl_stmt|;
comment|/** The new line character (\n) as a byte. */
specifier|private
specifier|final
specifier|static
name|byte
name|NEW_LINE
init|=
operator|(
name|byte
operator|)
literal|'\n'
decl_stmt|;
comment|/** Preferred encoding. */
specifier|private
specifier|final
specifier|static
name|String
name|PREFERRED_ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|WHITE_SPACE_ENC
init|=
operator|-
literal|5
decl_stmt|;
comment|// Indicates white space
specifier|private
specifier|final
specifier|static
name|byte
name|EQUALS_SIGN_ENC
init|=
operator|-
literal|1
decl_stmt|;
comment|// Indicates equals sign
comment|/* ******** S T A N D A R D   B A S E 6 4   A L P H A B E T ******** */
comment|/** The 64 valid Base64 values. */
comment|/*    * Host platform may be something funny like EBCDIC, so we hardcode these    * values.    */
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|_STANDARD_ALPHABET
init|=
block|{
operator|(
name|byte
operator|)
literal|'A'
block|,
operator|(
name|byte
operator|)
literal|'B'
block|,
operator|(
name|byte
operator|)
literal|'C'
block|,
operator|(
name|byte
operator|)
literal|'D'
block|,
operator|(
name|byte
operator|)
literal|'E'
block|,
operator|(
name|byte
operator|)
literal|'F'
block|,
operator|(
name|byte
operator|)
literal|'G'
block|,
operator|(
name|byte
operator|)
literal|'H'
block|,
operator|(
name|byte
operator|)
literal|'I'
block|,
operator|(
name|byte
operator|)
literal|'J'
block|,
operator|(
name|byte
operator|)
literal|'K'
block|,
operator|(
name|byte
operator|)
literal|'L'
block|,
operator|(
name|byte
operator|)
literal|'M'
block|,
operator|(
name|byte
operator|)
literal|'N'
block|,
operator|(
name|byte
operator|)
literal|'O'
block|,
operator|(
name|byte
operator|)
literal|'P'
block|,
operator|(
name|byte
operator|)
literal|'Q'
block|,
operator|(
name|byte
operator|)
literal|'R'
block|,
operator|(
name|byte
operator|)
literal|'S'
block|,
operator|(
name|byte
operator|)
literal|'T'
block|,
operator|(
name|byte
operator|)
literal|'U'
block|,
operator|(
name|byte
operator|)
literal|'V'
block|,
operator|(
name|byte
operator|)
literal|'W'
block|,
operator|(
name|byte
operator|)
literal|'X'
block|,
operator|(
name|byte
operator|)
literal|'Y'
block|,
operator|(
name|byte
operator|)
literal|'Z'
block|,
operator|(
name|byte
operator|)
literal|'a'
block|,
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|,
operator|(
name|byte
operator|)
literal|'d'
block|,
operator|(
name|byte
operator|)
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|'f'
block|,
operator|(
name|byte
operator|)
literal|'g'
block|,
operator|(
name|byte
operator|)
literal|'h'
block|,
operator|(
name|byte
operator|)
literal|'i'
block|,
operator|(
name|byte
operator|)
literal|'j'
block|,
operator|(
name|byte
operator|)
literal|'k'
block|,
operator|(
name|byte
operator|)
literal|'l'
block|,
operator|(
name|byte
operator|)
literal|'m'
block|,
operator|(
name|byte
operator|)
literal|'n'
block|,
operator|(
name|byte
operator|)
literal|'o'
block|,
operator|(
name|byte
operator|)
literal|'p'
block|,
operator|(
name|byte
operator|)
literal|'q'
block|,
operator|(
name|byte
operator|)
literal|'r'
block|,
operator|(
name|byte
operator|)
literal|'s'
block|,
operator|(
name|byte
operator|)
literal|'t'
block|,
operator|(
name|byte
operator|)
literal|'u'
block|,
operator|(
name|byte
operator|)
literal|'v'
block|,
operator|(
name|byte
operator|)
literal|'w'
block|,
operator|(
name|byte
operator|)
literal|'x'
block|,
operator|(
name|byte
operator|)
literal|'y'
block|,
operator|(
name|byte
operator|)
literal|'z'
block|,
operator|(
name|byte
operator|)
literal|'0'
block|,
operator|(
name|byte
operator|)
literal|'1'
block|,
operator|(
name|byte
operator|)
literal|'2'
block|,
operator|(
name|byte
operator|)
literal|'3'
block|,
operator|(
name|byte
operator|)
literal|'4'
block|,
operator|(
name|byte
operator|)
literal|'5'
block|,
operator|(
name|byte
operator|)
literal|'6'
block|,
operator|(
name|byte
operator|)
literal|'7'
block|,
operator|(
name|byte
operator|)
literal|'8'
block|,
operator|(
name|byte
operator|)
literal|'9'
block|,
operator|(
name|byte
operator|)
literal|'+'
block|,
operator|(
name|byte
operator|)
literal|'/'
block|}
decl_stmt|;
comment|/**    * Translates a Base64 value to either its 6-bit reconstruction value or a    * negative number indicating some other meaning.    */
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|_STANDARD_DECODABET
init|=
block|{
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 0 - 8
operator|-
literal|5
block|,
operator|-
literal|5
block|,
comment|// Whitespace: Tab, Newline
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 11 - 12
operator|-
literal|5
block|,
comment|// Whitespace: Return
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 14 - 26
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 27 - 31
operator|-
literal|5
block|,
comment|// Whitespace: Space
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 33 - 42
literal|62
block|,
comment|// Plus sign at decimal 43
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 44 - 46
literal|63
block|,
comment|// Slash at decimal 47
literal|52
block|,
literal|53
block|,
literal|54
block|,
literal|55
block|,
literal|56
block|,
literal|57
block|,
literal|58
block|,
literal|59
block|,
literal|60
block|,
literal|61
block|,
comment|// Numbers zero - nine
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 58 - 60
operator|-
literal|1
block|,
comment|// Equals sign at decimal 61
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 62 - 64
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
comment|// Letters 'A' - 'N'
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|,
literal|20
block|,
literal|21
block|,
literal|22
block|,
literal|23
block|,
literal|24
block|,
literal|25
block|,
comment|// Letters 'O' - 'Z'
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 91 - 96
literal|26
block|,
literal|27
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|,
literal|32
block|,
literal|33
block|,
literal|34
block|,
literal|35
block|,
literal|36
block|,
literal|37
block|,
literal|38
block|,
comment|// Letters 'a' - 'm'
literal|39
block|,
literal|40
block|,
literal|41
block|,
literal|42
block|,
literal|43
block|,
literal|44
block|,
literal|45
block|,
literal|46
block|,
literal|47
block|,
literal|48
block|,
literal|49
block|,
literal|50
block|,
literal|51
block|,
comment|// Letters 'n' -'z'
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
comment|// Decimal 123 - 126
block|}
decl_stmt|;
comment|/* ******** U R L   S A F E   B A S E 6 4   A L P H A B E T ******** */
comment|/**    * Used in the URL and Filename safe dialect described in Section 4 of RFC3548    *<a href="http://www.faqs.org/rfcs/rfc3548.html">    * http://www.faqs.org/rfcs/rfc3548.html</a>.    * Notice that the last two bytes become "hyphen" and "underscore" instead of    * "plus" and "slash."    */
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|_URL_SAFE_ALPHABET
init|=
block|{
operator|(
name|byte
operator|)
literal|'A'
block|,
operator|(
name|byte
operator|)
literal|'B'
block|,
operator|(
name|byte
operator|)
literal|'C'
block|,
operator|(
name|byte
operator|)
literal|'D'
block|,
operator|(
name|byte
operator|)
literal|'E'
block|,
operator|(
name|byte
operator|)
literal|'F'
block|,
operator|(
name|byte
operator|)
literal|'G'
block|,
operator|(
name|byte
operator|)
literal|'H'
block|,
operator|(
name|byte
operator|)
literal|'I'
block|,
operator|(
name|byte
operator|)
literal|'J'
block|,
operator|(
name|byte
operator|)
literal|'K'
block|,
operator|(
name|byte
operator|)
literal|'L'
block|,
operator|(
name|byte
operator|)
literal|'M'
block|,
operator|(
name|byte
operator|)
literal|'N'
block|,
operator|(
name|byte
operator|)
literal|'O'
block|,
operator|(
name|byte
operator|)
literal|'P'
block|,
operator|(
name|byte
operator|)
literal|'Q'
block|,
operator|(
name|byte
operator|)
literal|'R'
block|,
operator|(
name|byte
operator|)
literal|'S'
block|,
operator|(
name|byte
operator|)
literal|'T'
block|,
operator|(
name|byte
operator|)
literal|'U'
block|,
operator|(
name|byte
operator|)
literal|'V'
block|,
operator|(
name|byte
operator|)
literal|'W'
block|,
operator|(
name|byte
operator|)
literal|'X'
block|,
operator|(
name|byte
operator|)
literal|'Y'
block|,
operator|(
name|byte
operator|)
literal|'Z'
block|,
operator|(
name|byte
operator|)
literal|'a'
block|,
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|,
operator|(
name|byte
operator|)
literal|'d'
block|,
operator|(
name|byte
operator|)
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|'f'
block|,
operator|(
name|byte
operator|)
literal|'g'
block|,
operator|(
name|byte
operator|)
literal|'h'
block|,
operator|(
name|byte
operator|)
literal|'i'
block|,
operator|(
name|byte
operator|)
literal|'j'
block|,
operator|(
name|byte
operator|)
literal|'k'
block|,
operator|(
name|byte
operator|)
literal|'l'
block|,
operator|(
name|byte
operator|)
literal|'m'
block|,
operator|(
name|byte
operator|)
literal|'n'
block|,
operator|(
name|byte
operator|)
literal|'o'
block|,
operator|(
name|byte
operator|)
literal|'p'
block|,
operator|(
name|byte
operator|)
literal|'q'
block|,
operator|(
name|byte
operator|)
literal|'r'
block|,
operator|(
name|byte
operator|)
literal|'s'
block|,
operator|(
name|byte
operator|)
literal|'t'
block|,
operator|(
name|byte
operator|)
literal|'u'
block|,
operator|(
name|byte
operator|)
literal|'v'
block|,
operator|(
name|byte
operator|)
literal|'w'
block|,
operator|(
name|byte
operator|)
literal|'x'
block|,
operator|(
name|byte
operator|)
literal|'y'
block|,
operator|(
name|byte
operator|)
literal|'z'
block|,
operator|(
name|byte
operator|)
literal|'0'
block|,
operator|(
name|byte
operator|)
literal|'1'
block|,
operator|(
name|byte
operator|)
literal|'2'
block|,
operator|(
name|byte
operator|)
literal|'3'
block|,
operator|(
name|byte
operator|)
literal|'4'
block|,
operator|(
name|byte
operator|)
literal|'5'
block|,
operator|(
name|byte
operator|)
literal|'6'
block|,
operator|(
name|byte
operator|)
literal|'7'
block|,
operator|(
name|byte
operator|)
literal|'8'
block|,
operator|(
name|byte
operator|)
literal|'9'
block|,
operator|(
name|byte
operator|)
literal|'-'
block|,
operator|(
name|byte
operator|)
literal|'_'
block|}
decl_stmt|;
comment|/**    * Used in decoding URL and Filename safe dialects of Base64.    */
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|_URL_SAFE_DECODABET
init|=
block|{
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 0 - 8
operator|-
literal|5
block|,
operator|-
literal|5
block|,
comment|// Whitespace: Tab, Newline
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 11 - 12
operator|-
literal|5
block|,
comment|// Whitespace: Return
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 14 - 26
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 27 - 31
operator|-
literal|5
block|,
comment|// Whitespace: Space
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 33 - 42
operator|-
literal|9
block|,
comment|// Plus sign at 43
operator|-
literal|9
block|,
comment|// Decimal 44
literal|62
block|,
comment|// Minus sign at 45
operator|-
literal|9
block|,
comment|// Decimal 46
operator|-
literal|9
block|,
comment|// Slash at 47
literal|52
block|,
literal|53
block|,
literal|54
block|,
literal|55
block|,
literal|56
block|,
literal|57
block|,
literal|58
block|,
literal|59
block|,
literal|60
block|,
literal|61
block|,
comment|// Numbers 0 - 9
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 58 - 60
operator|-
literal|1
block|,
comment|// Equals sign at 61
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 62 - 64
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
comment|// Letters 'A' - 'N'
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|,
literal|20
block|,
literal|21
block|,
literal|22
block|,
literal|23
block|,
literal|24
block|,
literal|25
block|,
comment|// Letters 'O' - 'Z'
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 91 - 94
literal|63
block|,
comment|// Underscore at 95
operator|-
literal|9
block|,
comment|// Decimal 96
literal|26
block|,
literal|27
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|,
literal|32
block|,
literal|33
block|,
literal|34
block|,
literal|35
block|,
literal|36
block|,
literal|37
block|,
literal|38
block|,
comment|// Letters 'a' - 'm'
literal|39
block|,
literal|40
block|,
literal|41
block|,
literal|42
block|,
literal|43
block|,
literal|44
block|,
literal|45
block|,
literal|46
block|,
literal|47
block|,
literal|48
block|,
literal|49
block|,
literal|50
block|,
literal|51
block|,
comment|// Letters 'n' - 'z'
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
comment|// Decimal 123 - 126
block|}
decl_stmt|;
comment|/* ******** O R D E R E D   B A S E 6 4   A L P H A B E T ******** */
comment|/**    * In addition to being URL and file name friendly, this encoding preserves    * the sort order of encoded values. Whatever is input, be it string or    * just an array of bytes, when you use this encoding, the encoded value sorts    * exactly the same as the input value. It is described in the RFC change    * request:<a href="http://www.faqs.org/qa/rfcc-1940.html">    * http://www.faqs.org/qa/rfcc-1940.html</a>.    *    * It replaces "plus" and "slash" with "hyphen" and "underscore" and    * rearranges the alphabet so that the characters are in their natural sort    * order.    */
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|_ORDERED_ALPHABET
init|=
block|{
operator|(
name|byte
operator|)
literal|'-'
block|,
operator|(
name|byte
operator|)
literal|'0'
block|,
operator|(
name|byte
operator|)
literal|'1'
block|,
operator|(
name|byte
operator|)
literal|'2'
block|,
operator|(
name|byte
operator|)
literal|'3'
block|,
operator|(
name|byte
operator|)
literal|'4'
block|,
operator|(
name|byte
operator|)
literal|'5'
block|,
operator|(
name|byte
operator|)
literal|'6'
block|,
operator|(
name|byte
operator|)
literal|'7'
block|,
operator|(
name|byte
operator|)
literal|'8'
block|,
operator|(
name|byte
operator|)
literal|'9'
block|,
operator|(
name|byte
operator|)
literal|'A'
block|,
operator|(
name|byte
operator|)
literal|'B'
block|,
operator|(
name|byte
operator|)
literal|'C'
block|,
operator|(
name|byte
operator|)
literal|'D'
block|,
operator|(
name|byte
operator|)
literal|'E'
block|,
operator|(
name|byte
operator|)
literal|'F'
block|,
operator|(
name|byte
operator|)
literal|'G'
block|,
operator|(
name|byte
operator|)
literal|'H'
block|,
operator|(
name|byte
operator|)
literal|'I'
block|,
operator|(
name|byte
operator|)
literal|'J'
block|,
operator|(
name|byte
operator|)
literal|'K'
block|,
operator|(
name|byte
operator|)
literal|'L'
block|,
operator|(
name|byte
operator|)
literal|'M'
block|,
operator|(
name|byte
operator|)
literal|'N'
block|,
operator|(
name|byte
operator|)
literal|'O'
block|,
operator|(
name|byte
operator|)
literal|'P'
block|,
operator|(
name|byte
operator|)
literal|'Q'
block|,
operator|(
name|byte
operator|)
literal|'R'
block|,
operator|(
name|byte
operator|)
literal|'S'
block|,
operator|(
name|byte
operator|)
literal|'T'
block|,
operator|(
name|byte
operator|)
literal|'U'
block|,
operator|(
name|byte
operator|)
literal|'V'
block|,
operator|(
name|byte
operator|)
literal|'W'
block|,
operator|(
name|byte
operator|)
literal|'X'
block|,
operator|(
name|byte
operator|)
literal|'Y'
block|,
operator|(
name|byte
operator|)
literal|'Z'
block|,
operator|(
name|byte
operator|)
literal|'_'
block|,
operator|(
name|byte
operator|)
literal|'a'
block|,
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|,
operator|(
name|byte
operator|)
literal|'d'
block|,
operator|(
name|byte
operator|)
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|'f'
block|,
operator|(
name|byte
operator|)
literal|'g'
block|,
operator|(
name|byte
operator|)
literal|'h'
block|,
operator|(
name|byte
operator|)
literal|'i'
block|,
operator|(
name|byte
operator|)
literal|'j'
block|,
operator|(
name|byte
operator|)
literal|'k'
block|,
operator|(
name|byte
operator|)
literal|'l'
block|,
operator|(
name|byte
operator|)
literal|'m'
block|,
operator|(
name|byte
operator|)
literal|'n'
block|,
operator|(
name|byte
operator|)
literal|'o'
block|,
operator|(
name|byte
operator|)
literal|'p'
block|,
operator|(
name|byte
operator|)
literal|'q'
block|,
operator|(
name|byte
operator|)
literal|'r'
block|,
operator|(
name|byte
operator|)
literal|'s'
block|,
operator|(
name|byte
operator|)
literal|'t'
block|,
operator|(
name|byte
operator|)
literal|'u'
block|,
operator|(
name|byte
operator|)
literal|'v'
block|,
operator|(
name|byte
operator|)
literal|'w'
block|,
operator|(
name|byte
operator|)
literal|'x'
block|,
operator|(
name|byte
operator|)
literal|'y'
block|,
operator|(
name|byte
operator|)
literal|'z'
block|}
decl_stmt|;
comment|/**    * Used in decoding the "ordered" dialect of Base64.    */
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|_ORDERED_DECODABET
init|=
block|{
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 0 - 8
operator|-
literal|5
block|,
operator|-
literal|5
block|,
comment|// Whitespace: Tab, Newline
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 11 - 12
operator|-
literal|5
block|,
comment|// Whitespace: Return
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 14 - 26
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 27 - 31
operator|-
literal|5
block|,
comment|// Whitespace: Space
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 33 - 42
operator|-
literal|9
block|,
comment|// Plus sign at 43
operator|-
literal|9
block|,
comment|// Decimal 44
literal|0
block|,
comment|// Minus sign at 45
operator|-
literal|9
block|,
comment|// Decimal 46
operator|-
literal|9
block|,
comment|// Slash at decimal 47
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
comment|// Numbers 0 - 9
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 58 - 60
operator|-
literal|1
block|,
comment|// Equals sign at 61
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 62 - 64
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|,
literal|20
block|,
literal|21
block|,
literal|22
block|,
literal|23
block|,
comment|// Letters 'A' - 'M'
literal|24
block|,
literal|25
block|,
literal|26
block|,
literal|27
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|,
literal|32
block|,
literal|33
block|,
literal|34
block|,
literal|35
block|,
literal|36
block|,
comment|// Letters 'N' - 'Z'
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
comment|// Decimal 91 - 94
literal|37
block|,
comment|// Underscore at 95
operator|-
literal|9
block|,
comment|// Decimal 96
literal|38
block|,
literal|39
block|,
literal|40
block|,
literal|41
block|,
literal|42
block|,
literal|43
block|,
literal|44
block|,
literal|45
block|,
literal|46
block|,
literal|47
block|,
literal|48
block|,
literal|49
block|,
literal|50
block|,
comment|// Letters 'a' - 'm'
literal|51
block|,
literal|52
block|,
literal|53
block|,
literal|54
block|,
literal|55
block|,
literal|56
block|,
literal|57
block|,
literal|58
block|,
literal|59
block|,
literal|60
block|,
literal|61
block|,
literal|62
block|,
literal|63
block|,
comment|// Letters 'n' - 'z'
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
block|,
operator|-
literal|9
comment|// Decimal 123 - 126
block|}
decl_stmt|;
comment|/* ******** D E T E R M I N E   W H I C H   A L H A B E T ******** */
comment|/**    * Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options    * specified. It's possible, though silly, to specify ORDERED and URLSAFE in    * which case one of them will be picked, though there is no guarantee as to    * which one will be picked.    *    * @param options URL_SAFE or ORDERED    * @return alphabet array to use    */
specifier|protected
specifier|static
name|byte
index|[]
name|getAlphabet
parameter_list|(
name|int
name|options
parameter_list|)
block|{
if|if
condition|(
operator|(
name|options
operator|&
name|URL_SAFE
operator|)
operator|==
name|URL_SAFE
condition|)
block|{
return|return
name|_URL_SAFE_ALPHABET
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|options
operator|&
name|ORDERED
operator|)
operator|==
name|ORDERED
condition|)
block|{
return|return
name|_ORDERED_ALPHABET
return|;
block|}
else|else
block|{
return|return
name|_STANDARD_ALPHABET
return|;
block|}
block|}
comment|// end getAlphabet
comment|/**    * Returns one of the _SOMETHING_DECODABET byte arrays depending on the    * options specified. It's possible, though silly, to specify ORDERED and    * URL_SAFE in which case one of them will be picked, though there is no    * guarantee as to which one will be picked.    * @param options URL_SAFE or ORDERED    * @return alphabet array to use    */
specifier|protected
specifier|static
name|byte
index|[]
name|getDecodabet
parameter_list|(
name|int
name|options
parameter_list|)
block|{
if|if
condition|(
operator|(
name|options
operator|&
name|URL_SAFE
operator|)
operator|==
name|URL_SAFE
condition|)
block|{
return|return
name|_URL_SAFE_DECODABET
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|options
operator|&
name|ORDERED
operator|)
operator|==
name|ORDERED
condition|)
block|{
return|return
name|_ORDERED_DECODABET
return|;
block|}
else|else
block|{
return|return
name|_STANDARD_DECODABET
return|;
block|}
block|}
comment|// end getDecodabet
comment|/** Defeats instantiation. */
specifier|private
name|Base64
parameter_list|()
block|{}
comment|/**    * Main program. Used for testing.    *    * Encodes or decodes two files from the command line    *    * @param args command arguments    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|usage
argument_list|(
literal|"Not enough arguments."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|flag
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|infile
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|String
name|outfile
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|flag
operator|.
name|equals
argument_list|(
literal|"-e"
argument_list|)
condition|)
block|{
comment|// encode
name|encodeFileToFile
argument_list|(
name|infile
argument_list|,
name|outfile
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flag
operator|.
name|equals
argument_list|(
literal|"-d"
argument_list|)
condition|)
block|{
comment|// decode
name|decodeFileToFile
argument_list|(
name|infile
argument_list|,
name|outfile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|usage
argument_list|(
literal|"Unknown flag: "
operator|+
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end main
comment|/**    * Prints command line usage.    *    * @param msg A message to include with usage info.    */
specifier|private
specifier|static
name|void
name|usage
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java Base64 -e|-d inputfile outputfile"
argument_list|)
expr_stmt|;
block|}
comment|// end usage
comment|/* ******** E N C O D I N G   M E T H O D S ******** */
comment|/**    * Encodes up to the first three bytes of array<var>threeBytes</var> and    * returns a four-byte array in Base64 notation. The actual number of    * significant bytes in your array is given by<var>numSigBytes</var>. The    * array<var>threeBytes</var> needs only be as big as<var>numSigBytes</var>.    * Code can reuse a byte array by passing a four-byte array as<var>b4</var>.    *    * @param b4 A reusable byte array to reduce array instantiation    * @param threeBytes the array to convert    * @param numSigBytes the number of significant bytes in your array    * @param options options for get alphabet    * @return four byte array in Base64 notation.    * @since 1.5.1    */
specifier|protected
specifier|static
name|byte
index|[]
name|encode3to4
parameter_list|(
name|byte
index|[]
name|b4
parameter_list|,
name|byte
index|[]
name|threeBytes
parameter_list|,
name|int
name|numSigBytes
parameter_list|,
name|int
name|options
parameter_list|)
block|{
name|encode3to4
argument_list|(
name|threeBytes
argument_list|,
literal|0
argument_list|,
name|numSigBytes
argument_list|,
name|b4
argument_list|,
literal|0
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|b4
return|;
block|}
comment|// end encode3to4
comment|/**    * Encodes up to three bytes of the array<var>source</var> and writes the    * resulting four Base64 bytes to<var>destination</var>. The source and    * destination arrays can be manipulated anywhere along their length by    * specifying<var>srcOffset</var> and<var>destOffset</var>. This method    * does not check to make sure your arrays are large enough to accomodate    *<var>srcOffset</var> + 3 for the<var>source</var> array or    *<var>destOffset</var> + 4 for the<var>destination</var> array. The    * actual number of significant bytes in your array is given by    *<var>numSigBytes</var>.    *<p>    * This is the lowest level of the encoding methods with all possible    * parameters.    *    * @param source the array to convert    * @param srcOffset the index where conversion begins    * @param numSigBytes the number of significant bytes in your array    * @param destination the array to hold the conversion    * @param destOffset the index where output will be put    * @param options options for get alphabet    * @return the<var>destination</var> array    * @since 1.3    */
specifier|protected
specifier|static
name|byte
index|[]
name|encode3to4
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|srcOffset
parameter_list|,
name|int
name|numSigBytes
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destOffset
parameter_list|,
name|int
name|options
parameter_list|)
block|{
name|byte
index|[]
name|ALPHABET
init|=
name|getAlphabet
argument_list|(
name|options
argument_list|)
decl_stmt|;
comment|//           1         2         3
comment|// 01234567890123456789012345678901 Bit position
comment|// --------000000001111111122222222 Array position from threeBytes
comment|// --------|    ||    ||    ||    | Six bit groups to index ALPHABET
comment|//>>18>>12>> 6>> 0  Right shift necessary
comment|//                0x3f  0x3f  0x3f  Additional AND
comment|// Create buffer with zero-padding if there are only one or two
comment|// significant bytes passed in the array.
comment|// We have to shift left 24 in order to flush out the 1's that appear
comment|// when Java treats a value as negative that is cast from a byte to an int.
name|int
name|inBuff
init|=
operator|(
name|numSigBytes
operator|>
literal|0
condition|?
operator|(
operator|(
name|source
index|[
name|srcOffset
index|]
operator|<<
literal|24
operator|)
operator|>>>
literal|8
operator|)
else|:
literal|0
operator|)
operator||
operator|(
name|numSigBytes
operator|>
literal|1
condition|?
operator|(
operator|(
name|source
index|[
name|srcOffset
operator|+
literal|1
index|]
operator|<<
literal|24
operator|)
operator|>>>
literal|16
operator|)
else|:
literal|0
operator|)
operator||
operator|(
name|numSigBytes
operator|>
literal|2
condition|?
operator|(
operator|(
name|source
index|[
name|srcOffset
operator|+
literal|2
index|]
operator|<<
literal|24
operator|)
operator|>>>
literal|24
operator|)
else|:
literal|0
operator|)
decl_stmt|;
switch|switch
condition|(
name|numSigBytes
condition|)
block|{
case|case
literal|3
case|:
name|destination
index|[
name|destOffset
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|>>>
literal|18
operator|)
index|]
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|1
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|>>>
literal|12
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|2
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|>>>
literal|6
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|3
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
return|return
name|destination
return|;
case|case
literal|2
case|:
name|destination
index|[
name|destOffset
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|>>>
literal|18
operator|)
index|]
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|1
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|>>>
literal|12
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|2
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|>>>
literal|6
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|3
index|]
operator|=
name|EQUALS_SIGN
expr_stmt|;
return|return
name|destination
return|;
case|case
literal|1
case|:
name|destination
index|[
name|destOffset
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|>>>
literal|18
operator|)
index|]
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|1
index|]
operator|=
name|ALPHABET
index|[
operator|(
name|inBuff
operator|>>>
literal|12
operator|)
operator|&
literal|0x3f
index|]
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|2
index|]
operator|=
name|EQUALS_SIGN
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|3
index|]
operator|=
name|EQUALS_SIGN
expr_stmt|;
return|return
name|destination
return|;
default|default:
return|return
name|destination
return|;
block|}
comment|// end switch
block|}
comment|// end encode3to4
comment|/**    * Serializes an object and returns the Base64-encoded version of that    * serialized object. If the object cannot be serialized or there is another    * error, the method will return<tt>null</tt>. The object is not    * GZip-compressed before being encoded.    *    * @param serializableObject The object to encode    * @return The Base64-encoded object    * @since 1.4    */
specifier|public
specifier|static
name|String
name|encodeObject
parameter_list|(
name|Serializable
name|serializableObject
parameter_list|)
block|{
return|return
name|encodeObject
argument_list|(
name|serializableObject
argument_list|,
name|NO_OPTIONS
argument_list|)
return|;
block|}
comment|// end encodeObject
comment|/**    * Serializes an object and returns the Base64-encoded version of that    * serialized object. If the object cannot be serialized or there is another    * error, the method will return<tt>null</tt>.    *<p>    * Valid options:    *<ul>    *<li>GZIP: gzip-compresses object before encoding it.</li>    *<li>DONT_BREAK_LINES: don't break lines at 76 characters.<i>Note:    *     Technically, this makes your encoding non-compliant.</i></li>    *</ul>    *<p>    * Example:<code>encodeObject( myObj, Base64.GZIP )</code> or    *<p>    * Example:    *<code>encodeObject( myObj, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>    *    * @param serializableObject The object to encode    * @param options Specified options    * @see Base64#GZIP    * @see Base64#DONT_BREAK_LINES    * @return The Base64-encoded object    * @since 2.0    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"ConstantConditions"
block|}
argument_list|)
specifier|public
specifier|static
name|String
name|encodeObject
parameter_list|(
name|Serializable
name|serializableObject
parameter_list|,
name|int
name|options
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|b64os
init|=
literal|null
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream
name|b64os
operator|=
operator|new
name|Base64OutputStream
argument_list|(
name|baos
argument_list|,
name|ENCODE
operator||
name|options
argument_list|)
expr_stmt|;
name|oos
operator|=
operator|(
operator|(
name|options
operator|&
name|GZIP
operator|)
operator|==
name|GZIP
operator|)
condition|?
operator|new
name|ObjectOutputStream
argument_list|(
operator|new
name|GZIPOutputStream
argument_list|(
name|b64os
argument_list|)
argument_list|)
else|:
operator|new
name|ObjectOutputStream
argument_list|(
name|b64os
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|serializableObject
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|PREFERRED_ENCODING
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uue
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error encoding object"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|oos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing ObjectOutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|b64os
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|b64os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing Base64OutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing ByteArrayOutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// end finally
block|}
comment|// end encode
comment|/**    * Encodes a byte array into Base64 notation. Does not GZip-compress data.    *    * @param source The data to convert    * @return encoded byte array    * @since 1.4    */
specifier|public
specifier|static
name|String
name|encodeBytes
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|encodeBytes
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|,
name|NO_OPTIONS
argument_list|)
return|;
block|}
comment|// end encodeBytes
comment|/**    * Encodes a byte array into Base64 notation.    *<p>    * Valid options:    *<ul>    *<li>GZIP: gzip-compresses object before encoding it.</li>    *<li>DONT_BREAK_LINES: don't break lines at 76 characters.<i>Note:    *     Technically, this makes your encoding non-compliant.</i></li>    *</ul>    *    *<p>    * Example:<code>encodeBytes( myData, Base64.GZIP )</code> or    *<p>    * Example:    *<code>encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>    *    * @param source The data to convert    * @param options Specified options    * @see Base64#GZIP    * @see Base64#DONT_BREAK_LINES    * @see Base64#URL_SAFE    * @see Base64#ORDERED    * @return encoded byte array    * @since 2.0    */
specifier|public
specifier|static
name|String
name|encodeBytes
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|options
parameter_list|)
block|{
return|return
name|encodeBytes
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|,
name|options
argument_list|)
return|;
block|}
comment|// end encodeBytes
comment|/**    * Encodes a byte array into Base64 notation. Does not GZip-compress data.    *    * @param source The data to convert    * @param off Offset in array where conversion should begin    * @param len Length of data to convert    * @return encoded byte array    * @since 1.4    */
specifier|public
specifier|static
name|String
name|encodeBytes
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|encodeBytes
argument_list|(
name|source
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|NO_OPTIONS
argument_list|)
return|;
block|}
comment|// end encodeBytes
comment|/**    * Encodes a byte array into Base64 notation.    *<p>    * Valid options:    *<ul>    *<li>GZIP: gzip-compresses object before encoding it.</li>    *<li>DONT_BREAK_LINES: don't break lines at 76 characters.<i>Note:    *     Technically, this makes your encoding non-compliant.</i></li>    *</ul>    *    *<p>    * Example:<code>encodeBytes( myData, Base64.GZIP )</code> or    *<p>    * Example:    *<code>encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>    *    * @param source The data to convert    * @param off Offset in array where conversion should begin    * @param len Length of data to convert    * @param options Specified options    * @see Base64#GZIP    * @see Base64#DONT_BREAK_LINES    * @see Base64#URL_SAFE    * @see Base64#ORDERED    * @return encoded byte array    * @since 2.0    */
specifier|public
specifier|static
name|String
name|encodeBytes
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|options
parameter_list|)
block|{
if|if
condition|(
operator|(
name|options
operator|&
name|GZIP
operator|)
operator|==
name|GZIP
condition|)
block|{
comment|// Compress?
comment|// GZip -> Base64 -> ByteArray
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPOutputStream
name|gzos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gzos
operator|=
operator|new
name|GZIPOutputStream
argument_list|(
operator|new
name|Base64OutputStream
argument_list|(
name|baos
argument_list|,
name|ENCODE
operator||
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|gzos
operator|.
name|write
argument_list|(
name|source
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|gzos
operator|.
name|close
argument_list|()
expr_stmt|;
name|gzos
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|PREFERRED_ENCODING
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uue
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error encoding byte array"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|gzos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|gzos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing GZIPOutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing ByteArrayOutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// end finally
block|}
comment|// end Compress
comment|// Don't compress. Better not to use streams at all then.
name|boolean
name|breakLines
init|=
operator|(
operator|(
name|options
operator|&
name|DONT_BREAK_LINES
operator|)
operator|==
literal|0
operator|)
decl_stmt|;
name|int
name|len43
init|=
name|len
operator|*
literal|4
operator|/
literal|3
decl_stmt|;
name|byte
index|[]
name|outBuff
init|=
operator|new
name|byte
index|[
operator|(
name|len43
operator|)
comment|// Main 4:3
operator|+
operator|(
operator|(
name|len
operator|%
literal|3
operator|)
operator|>
literal|0
condition|?
literal|4
else|:
literal|0
operator|)
comment|// padding
operator|+
operator|(
name|breakLines
condition|?
operator|(
name|len43
operator|/
name|MAX_LINE_LENGTH
operator|)
else|:
literal|0
operator|)
index|]
decl_stmt|;
comment|// New lines
name|int
name|d
init|=
literal|0
decl_stmt|;
name|int
name|e
init|=
literal|0
decl_stmt|;
name|int
name|len2
init|=
name|len
operator|-
literal|2
decl_stmt|;
name|int
name|lineLength
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|d
operator|<
name|len2
condition|;
name|d
operator|+=
literal|3
operator|,
name|e
operator|+=
literal|4
control|)
block|{
name|encode3to4
argument_list|(
name|source
argument_list|,
name|d
operator|+
name|off
argument_list|,
literal|3
argument_list|,
name|outBuff
argument_list|,
name|e
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|lineLength
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|breakLines
operator|&&
name|lineLength
operator|==
name|MAX_LINE_LENGTH
condition|)
block|{
name|outBuff
index|[
name|e
operator|+
literal|4
index|]
operator|=
name|NEW_LINE
expr_stmt|;
name|e
operator|++
expr_stmt|;
name|lineLength
operator|=
literal|0
expr_stmt|;
block|}
comment|// end if: end of line
block|}
comment|// end for: each piece of array
if|if
condition|(
name|d
operator|<
name|len
condition|)
block|{
name|encode3to4
argument_list|(
name|source
argument_list|,
name|d
operator|+
name|off
argument_list|,
name|len
operator|-
name|d
argument_list|,
name|outBuff
argument_list|,
name|e
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|e
operator|+=
literal|4
expr_stmt|;
block|}
comment|// end if: some padding needed
comment|// Return value according to relevant encoding.
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|outBuff
argument_list|,
literal|0
argument_list|,
name|e
argument_list|,
name|PREFERRED_ENCODING
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uue
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|outBuff
argument_list|,
literal|0
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
comment|// end encodeBytes
comment|/* ******** D E C O D I N G   M E T H O D S ******** */
comment|/**    * Decodes four bytes from array<var>source</var> and writes the resulting    * bytes (up to three of them) to<var>destination</var>. The source and    * destination arrays can be manipulated anywhere along their length by    * specifying<var>srcOffset</var> and<var>destOffset</var>. This method    * does not check to make sure your arrays are large enough to accomodate    *<var>srcOffset</var> + 4 for the<var>source</var> array or    *<var>destOffset</var> + 3 for the<var>destination</var> array. This    * method returns the actual number of bytes that were converted from the    * Base64 encoding.    *<p>    * This is the lowest level of the decoding methods with all possible    * parameters.    *</p>    *    * @param source the array to convert    * @param srcOffset the index where conversion begins    * @param destination the array to hold the conversion    * @param destOffset the index where output will be put    * @param options options for getDecoabet    * @see Base64#URL_SAFE    * @see Base64#ORDERED    * @return the number of decoded bytes converted    * @since 1.3    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"ConstantConditions"
block|}
argument_list|)
specifier|protected
specifier|static
name|int
name|decode4to3
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|srcOffset
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destOffset
parameter_list|,
name|int
name|options
parameter_list|)
block|{
name|byte
index|[]
name|DECODABET
init|=
name|getDecodabet
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
index|[
name|srcOffset
operator|+
literal|2
index|]
operator|==
name|EQUALS_SIGN
condition|)
block|{
comment|// Example: Dk==
comment|// Two ways to do the same thing. Don't know which way I like best.
comment|// int outBuff = ( ( DECODABET[ source[ srcOffset ] ]<< 24 )>>> 6 )
comment|// | ( ( DECODABET[ source[ srcOffset + 1] ]<< 24 )>>> 12 );
name|int
name|outBuff
init|=
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|18
operator|)
operator||
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|1
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|12
operator|)
decl_stmt|;
name|destination
index|[
name|destOffset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|outBuff
operator|>>>
literal|16
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|source
index|[
name|srcOffset
operator|+
literal|3
index|]
operator|==
name|EQUALS_SIGN
condition|)
block|{
comment|// Example: DkL=
comment|// Two ways to do the same thing. Don't know which way I like best.
comment|// int outBuff = ( ( DECODABET[ source[ srcOffset ] ]<< 24 )>>> 6 )
comment|// | ( ( DECODABET[ source[ srcOffset + 1 ] ]<< 24 )>>> 12 )
comment|// | ( ( DECODABET[ source[ srcOffset + 2 ] ]<< 24 )>>> 18 );
name|int
name|outBuff
init|=
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|18
operator|)
operator||
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|1
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|2
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|6
operator|)
decl_stmt|;
name|destination
index|[
name|destOffset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|outBuff
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|outBuff
operator|>>>
literal|8
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
else|else
block|{
comment|// Example: DkLE
try|try
block|{
comment|// Two ways to do the same thing. Don't know which way I like best.
comment|// int outBuff = ( ( DECODABET[ source[ srcOffset ] ]<< 24 )>>> 6 )
comment|// | ( ( DECODABET[ source[ srcOffset + 1 ] ]<< 24 )>>> 12 )
comment|// | ( ( DECODABET[ source[ srcOffset + 2 ] ]<< 24 )>>> 18 )
comment|// | ( ( DECODABET[ source[ srcOffset + 3 ] ]<< 24 )>>> 24 );
name|int
name|outBuff
init|=
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|18
operator|)
operator||
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|1
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|2
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|3
index|]
index|]
operator|&
literal|0xFF
operator|)
operator|)
decl_stmt|;
name|destination
index|[
name|destOffset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|outBuff
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|outBuff
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|destination
index|[
name|destOffset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|outBuff
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error decoding bytes at "
operator|+
name|source
index|[
name|srcOffset
index|]
operator|+
literal|": "
operator|+
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
index|]
index|]
operator|)
operator|+
literal|", "
operator|+
name|source
index|[
name|srcOffset
operator|+
literal|1
index|]
operator|+
literal|": "
operator|+
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|1
index|]
index|]
operator|)
operator|+
literal|", "
operator|+
name|source
index|[
name|srcOffset
operator|+
literal|2
index|]
operator|+
literal|": "
operator|+
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|2
index|]
index|]
operator|)
operator|+
literal|", "
operator|+
name|source
index|[
name|srcOffset
operator|+
literal|3
index|]
operator|+
literal|": "
operator|+
operator|(
name|DECODABET
index|[
name|source
index|[
name|srcOffset
operator|+
literal|3
index|]
index|]
operator|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// end catch
block|}
block|}
comment|// end decodeToBytes
comment|/**    * Very low-level access to decoding ASCII characters in the form of a byte    * array. Does not support automatically gunzipping or any other "fancy"    * features.    *    * @param source The Base64 encoded data    * @param off The offset of where to begin decoding    * @param len The length of characters to decode    * @param options options for getDecodabet    * @see Base64#URL_SAFE    * @see Base64#ORDERED    * @return decoded data    * @since 1.3    */
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|options
parameter_list|)
block|{
name|byte
index|[]
name|DECODABET
init|=
name|getDecodabet
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|int
name|len34
init|=
name|len
operator|*
literal|3
operator|/
literal|4
decl_stmt|;
name|byte
index|[]
name|outBuff
init|=
operator|new
name|byte
index|[
name|len34
index|]
decl_stmt|;
comment|// Upper limit on size of output
name|int
name|outBuffPosn
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|b4
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|b4Posn
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
name|byte
name|sbiCrop
decl_stmt|;
name|byte
name|sbiDecode
decl_stmt|;
for|for
control|(
name|i
operator|=
name|off
init|;
name|i
operator|<
name|off
operator|+
name|len
condition|;
name|i
operator|++
control|)
block|{
name|sbiCrop
operator|=
call|(
name|byte
call|)
argument_list|(
name|source
index|[
name|i
index|]
operator|&
literal|0x7f
argument_list|)
expr_stmt|;
comment|// Only the low seven bits
name|sbiDecode
operator|=
name|DECODABET
index|[
name|sbiCrop
index|]
expr_stmt|;
if|if
condition|(
name|sbiDecode
operator|>=
name|WHITE_SPACE_ENC
condition|)
block|{
comment|// Whitespace, Equals or better
if|if
condition|(
name|sbiDecode
operator|>=
name|EQUALS_SIGN_ENC
condition|)
block|{
comment|// Equals or better
name|b4
index|[
name|b4Posn
operator|++
index|]
operator|=
name|sbiCrop
expr_stmt|;
if|if
condition|(
name|b4Posn
operator|>
literal|3
condition|)
block|{
name|outBuffPosn
operator|+=
name|decode4to3
argument_list|(
name|b4
argument_list|,
literal|0
argument_list|,
name|outBuff
argument_list|,
name|outBuffPosn
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|b4Posn
operator|=
literal|0
expr_stmt|;
comment|// If that was the equals sign, break out of 'for' loop
if|if
condition|(
name|sbiCrop
operator|==
name|EQUALS_SIGN
condition|)
break|break;
block|}
comment|// end if: quartet built
block|}
comment|// end if: equals sign or better
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Bad Base64 input character at "
operator|+
name|i
operator|+
literal|": "
operator|+
name|source
index|[
name|i
index|]
operator|+
literal|"(decimal)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// end else:
block|}
comment|// each input character
name|byte
index|[]
name|out
init|=
operator|new
name|byte
index|[
name|outBuffPosn
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|outBuff
argument_list|,
literal|0
argument_list|,
name|out
argument_list|,
literal|0
argument_list|,
name|outBuffPosn
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
comment|// end decode
comment|/**    * Decodes data from Base64 notation, automatically detecting gzip-compressed    * data and decompressing it.    *    * @param s the string to decode    * @return the decoded data    * @since 1.4    */
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|decode
argument_list|(
name|s
argument_list|,
name|NO_OPTIONS
argument_list|)
return|;
block|}
comment|/**    * Decodes data from Base64 notation, automatically detecting gzip-compressed    * data and decompressing it.    *    * @param s the string to decode    * @param options options for decode    * @see Base64#URL_SAFE    * @see Base64#ORDERED    * @return the decoded data    * @since 1.4    */
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|options
parameter_list|)
block|{
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|s
operator|.
name|getBytes
argument_list|(
name|PREFERRED_ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|bytes
operator|=
name|s
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
comment|// end catch
comment|// Decode
name|bytes
operator|=
name|decode
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// Check to see if it's gzip-compressed
comment|// GZIP Magic Two-Byte Number: 0x8b1f (35615)
if|if
condition|(
name|bytes
operator|!=
literal|null
operator|&&
name|bytes
operator|.
name|length
operator|>=
literal|4
condition|)
block|{
name|int
name|head
init|=
operator|(
name|bytes
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator|&
literal|0xff00
operator|)
decl_stmt|;
if|if
condition|(
name|GZIPInputStream
operator|.
name|GZIP_MAGIC
operator|==
name|head
condition|)
block|{
name|GZIPInputStream
name|gzis
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|gzis
operator|=
operator|new
name|GZIPInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
for|for
control|(
name|int
name|length
init|;
operator|(
name|length
operator|=
name|gzis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|;
control|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|// end while: reading input
comment|// No error? Get new bytes.
name|bytes
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Just return originally-decoded bytes
block|}
finally|finally
block|{
try|try
block|{
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing ByteArrayOutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gzis
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|gzis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing GZIPInputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
block|}
comment|// end if: gzipped
block|}
comment|// end if: bytes.length>= 2
return|return
name|bytes
return|;
block|}
comment|// end decode
comment|/**    * Attempts to decode Base64 data and deserialize a Java Object within.    * Returns<tt>null</tt> if there was an error.    *    * @param encodedObject The Base64 data to decode    * @return The decoded and deserialized object    * @since 1.5    */
specifier|public
specifier|static
name|Object
name|decodeToObject
parameter_list|(
name|String
name|encodedObject
parameter_list|)
block|{
comment|// Decode and gunzip if necessary
name|byte
index|[]
name|objBytes
init|=
name|decode
argument_list|(
name|encodedObject
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
literal|null
decl_stmt|;
name|ObjectInputStream
name|ois
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|objBytes
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|=
name|ois
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error decoding object"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error decoding object"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ois
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ois
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing ObjectInputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
return|return
name|obj
return|;
block|}
comment|// end decodeObject
comment|/**    * Convenience method for encoding data to a file.    *    * @param dataToEncode byte array of data to encode in base64 form    * @param filename Filename for saving encoded data    * @return<tt>true</tt> if successful,<tt>false</tt> otherwise    *    * @since 2.1    */
specifier|public
specifier|static
name|boolean
name|encodeToFile
parameter_list|(
name|byte
index|[]
name|dataToEncode
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Base64OutputStream
name|bos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bos
operator|=
operator|new
name|Base64OutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
argument_list|,
name|ENCODE
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|dataToEncode
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error encoding file: "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing Base64OutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
return|return
name|success
return|;
block|}
comment|// end encodeToFile
comment|/**    * Convenience method for decoding data to a file.    *    * @param dataToDecode Base64-encoded data as a string    * @param filename Filename for saving decoded data    * @return<tt>true</tt> if successful,<tt>false</tt> otherwise    *    * @since 2.1    */
specifier|public
specifier|static
name|boolean
name|decodeToFile
parameter_list|(
name|String
name|dataToDecode
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Base64OutputStream
name|bos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bos
operator|=
operator|new
name|Base64OutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
argument_list|,
name|DECODE
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|dataToDecode
operator|.
name|getBytes
argument_list|(
name|PREFERRED_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error decoding to file: "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing Base64OutputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
return|return
name|success
return|;
block|}
comment|// end decodeToFile
comment|/**    * Convenience method for reading a base64-encoded file and decoding it.    *    * @param filename Filename for reading encoded data    * @return decoded byte array or null if unsuccessful    *    * @since 2.1    */
specifier|public
specifier|static
name|byte
index|[]
name|decodeFromFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|byte
index|[]
name|decodedData
init|=
literal|null
decl_stmt|;
name|BufferedInputStream
name|bufferedInputStream
init|=
literal|null
decl_stmt|;
name|FileInputStream
name|fileInputStream
init|=
literal|null
decl_stmt|;
name|Base64InputStream
name|base64InputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
decl_stmt|;
comment|// Check the size of file
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"File is too big for this convenience method ("
operator|+
name|file
operator|.
name|length
argument_list|()
operator|+
literal|" bytes)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// end if: file too big for int index
name|buffer
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|file
operator|.
name|length
argument_list|()
index|]
expr_stmt|;
comment|// Open a stream
name|fileInputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|bufferedInputStream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
name|base64InputStream
operator|=
operator|new
name|Base64InputStream
argument_list|(
name|bufferedInputStream
argument_list|,
name|DECODE
argument_list|)
expr_stmt|;
comment|// Read until done
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|numBytes
init|;
operator|(
name|numBytes
operator|=
name|base64InputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|length
argument_list|,
literal|4096
argument_list|)
operator|)
operator|>=
literal|0
condition|;
control|)
block|{
name|length
operator|+=
name|numBytes
expr_stmt|;
block|}
comment|// Save in a variable to return
name|decodedData
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|decodedData
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error decoding from file "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileInputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing FileInputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bufferedInputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bufferedInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing BufferedInputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|base64InputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|base64InputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing Base64InputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
return|return
name|decodedData
return|;
block|}
comment|// end decodeFromFile
comment|/**    * Convenience method for reading a binary file and base64-encoding it.    *    * @param filename Filename for reading binary data    * @return base64-encoded string or null if unsuccessful    *    * @since 2.1    */
specifier|public
specifier|static
name|String
name|encodeFromFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|String
name|encodedData
init|=
literal|null
decl_stmt|;
name|FileInputStream
name|fileInputStream
init|=
literal|null
decl_stmt|;
name|BufferedInputStream
name|bufferedInputStream
init|=
literal|null
decl_stmt|;
name|Base64InputStream
name|base64InputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
comment|// Need max() for math on small files (v2.2.1)
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
call|(
name|int
call|)
argument_list|(
name|file
operator|.
name|length
argument_list|()
operator|*
literal|1.4
argument_list|)
argument_list|,
literal|40
argument_list|)
index|]
decl_stmt|;
comment|// Open a stream
name|fileInputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|bufferedInputStream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
name|base64InputStream
operator|=
operator|new
name|Base64InputStream
argument_list|(
name|bufferedInputStream
argument_list|,
name|ENCODE
argument_list|)
expr_stmt|;
comment|// Read until done
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|numBytes
init|;
operator|(
name|numBytes
operator|=
name|base64InputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|length
argument_list|,
literal|4096
argument_list|)
operator|)
operator|>=
literal|0
condition|;
control|)
block|{
name|length
operator|+=
name|numBytes
expr_stmt|;
block|}
comment|// Save in a variable to return
name|encodedData
operator|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|,
name|PREFERRED_ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error encoding from file "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Can't leak exceptions but still need to clean things up.
if|if
condition|(
name|fileInputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing FileInputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bufferedInputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bufferedInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing BufferedInputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|base64InputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|base64InputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing Base64InputStream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
return|return
name|encodedData
return|;
block|}
comment|// end encodeFromFile
comment|/**    * Reads<tt>infile</tt> and encodes it to<tt>outfile</tt>.    *    * @param infile Input file    * @param outfile Output file    * @since 2.2    */
specifier|public
specifier|static
name|void
name|encodeFileToFile
parameter_list|(
name|String
name|infile
parameter_list|,
name|String
name|outfile
parameter_list|)
block|{
name|String
name|encoded
init|=
name|encodeFromFile
argument_list|(
name|infile
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outfile
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|encoded
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Strict, 7-bit output.
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error encoding from file "
operator|+
name|infile
operator|+
literal|" to "
operator|+
name|outfile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing "
operator|+
name|outfile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
block|}
comment|// end encodeFileToFile
comment|/**    * Reads<tt>infile</tt> and decodes it to<tt>outfile</tt>.    *    * @param infile Input file    * @param outfile Output file    * @since 2.2    */
specifier|public
specifier|static
name|void
name|decodeFileToFile
parameter_list|(
name|String
name|infile
parameter_list|,
name|String
name|outfile
parameter_list|)
block|{
name|byte
index|[]
name|decoded
init|=
name|decodeFromFile
argument_list|(
name|infile
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outfile
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|decoded
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error decoding from file "
operator|+
name|infile
operator|+
literal|" to "
operator|+
name|outfile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error closing "
operator|+
name|outfile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// end finally
block|}
comment|// end decodeFileToFile
comment|/* ******** I N N E R   C L A S S   I N P U T S T R E A M ******** */
comment|/**    * A {@link Base64.Base64InputStream} will read data from another    *<tt>InputStream</tt>, given in the constructor, and    * encode/decode to/from Base64 notation on the fly.    *    * @see Base64    * @since 1.3    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|static
class|class
name|Base64InputStream
extends|extends
name|FilterInputStream
block|{
specifier|private
name|boolean
name|encode
decl_stmt|;
comment|// Encoding or decoding
specifier|private
name|int
name|position
decl_stmt|;
comment|// Current position in the buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
comment|// Buffer holding converted data
specifier|private
name|int
name|bufferLength
decl_stmt|;
comment|// Length of buffer (3 or 4)
specifier|private
name|int
name|numSigBytes
decl_stmt|;
comment|// Meaningful bytes in the buffer
specifier|private
name|int
name|lineLength
decl_stmt|;
specifier|private
name|boolean
name|breakLines
decl_stmt|;
comment|// Break lines at< 80 characters
specifier|private
name|int
name|options
decl_stmt|;
comment|// Record options
specifier|private
name|byte
index|[]
name|decodabet
decl_stmt|;
comment|// Local copy avoids method calls
comment|/**      * Constructs a {@link Base64InputStream} in DECODE mode.      *      * @param in the<tt>InputStream</tt> from which to read data.      * @since 1.3      */
specifier|public
name|Base64InputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
name|in
argument_list|,
name|DECODE
argument_list|)
expr_stmt|;
block|}
comment|// end constructor
comment|/**      * Constructs a {@link Base64.Base64InputStream} in either ENCODE or DECODE mode.      *<p>      * Valid options:      *      *<pre>      *   ENCODE or DECODE: Encode or Decode as data is read.      *   DONT_BREAK_LINES: don't break lines at 76 characters      *     (only meaningful when encoding)      *&lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;      *</pre>      *      *<p>      * Example:<code>new Base64.Base64InputStream( in, Base64.DECODE )</code>      *      *      * @param in the<tt>InputStream</tt> from which to read data.      * @param options Specified options      * @see Base64#ENCODE      * @see Base64#DECODE      * @see Base64#DONT_BREAK_LINES      * @since 2.0      */
specifier|public
name|Base64InputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|breakLines
operator|=
operator|(
name|options
operator|&
name|DONT_BREAK_LINES
operator|)
operator|!=
name|DONT_BREAK_LINES
expr_stmt|;
name|this
operator|.
name|encode
operator|=
operator|(
name|options
operator|&
name|ENCODE
operator|)
operator|==
name|ENCODE
expr_stmt|;
name|this
operator|.
name|bufferLength
operator|=
name|encode
condition|?
literal|4
else|:
literal|3
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferLength
index|]
expr_stmt|;
name|this
operator|.
name|position
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|lineLength
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
comment|// Record for later, mostly to determine which
comment|// alphabet to use
name|this
operator|.
name|decodabet
operator|=
name|getDecodabet
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
comment|// end constructor
comment|/**      * Reads enough of the input stream to convert to/from Base64 and returns      * the next byte.      *      * @return next byte      * @since 1.3      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do we need to get data?
if|if
condition|(
name|position
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|encode
condition|)
block|{
name|byte
index|[]
name|b3
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|numBinaryBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|int
name|b
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// If end of stream, b is -1.
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
block|{
name|b3
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|numBinaryBytes
operator|++
expr_stmt|;
block|}
comment|// end if: not end of stream
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Only a problem if we got no data at all.
if|if
condition|(
name|i
operator|==
literal|0
condition|)
throw|throw
name|e
throw|;
block|}
comment|// end catch
block|}
comment|// end for: each needed input byte
if|if
condition|(
name|numBinaryBytes
operator|>
literal|0
condition|)
block|{
name|encode3to4
argument_list|(
name|b3
argument_list|,
literal|0
argument_list|,
name|numBinaryBytes
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|numSigBytes
operator|=
literal|4
expr_stmt|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// end else
block|}
else|else
block|{
name|byte
index|[]
name|b4
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Read four "meaningful" bytes:
name|int
name|b
decl_stmt|;
do|do
block|{
name|b
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|b
operator|>=
literal|0
operator|&&
name|decodabet
index|[
name|b
operator|&
literal|0x7f
index|]
operator|<=
name|WHITE_SPACE_ENC
condition|)
do|;
if|if
condition|(
name|b
operator|<
literal|0
condition|)
block|{
break|break;
comment|// Reads a -1 if end of stream
block|}
name|b4
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
comment|// end for: each needed input byte
if|if
condition|(
name|i
operator|==
literal|4
condition|)
block|{
name|numSigBytes
operator|=
name|decode4to3
argument_list|(
name|b4
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
comment|// Must have broken out from above.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Improperly padded Base64 input."
argument_list|)
throw|;
block|}
comment|// end
block|}
comment|// end else: decode
block|}
comment|// end else: get data
comment|// Got data?
if|if
condition|(
name|position
operator|>=
literal|0
condition|)
block|{
comment|// End of relevant data?
if|if
condition|(
comment|/* !encode&& */
name|position
operator|>=
name|numSigBytes
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|encode
operator|&&
name|breakLines
operator|&&
name|lineLength
operator|>=
name|MAX_LINE_LENGTH
condition|)
block|{
name|lineLength
operator|=
literal|0
expr_stmt|;
return|return
literal|'\n'
return|;
block|}
name|lineLength
operator|++
expr_stmt|;
comment|// This isn't important when decoding
comment|// but throwing an extra "if" seems
comment|// just as wasteful.
name|int
name|b
init|=
name|buffer
index|[
name|position
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|position
operator|>=
name|bufferLength
condition|)
name|position
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|b
operator|&
literal|0xFF
return|;
comment|// This is how you "cast" a byte that's
comment|// intended to be unsigned.
block|}
comment|// When JDK1.4 is more accepted, use an assertion here.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error in Base64 code reading stream."
argument_list|)
throw|;
block|}
comment|// end read
comment|/**      * Calls {@link #read()} repeatedly until the end of stream is reached or      *<var>len</var> bytes are read. Returns number of bytes read into array      * or -1 if end of stream is encountered.      *      * @param dest array to hold values      * @param off offset for array      * @param len max number of bytes to read into array      * @return bytes read into array or -1 if end of stream is encountered.      * @since 1.3      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|dest
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
decl_stmt|;
name|int
name|b
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|=
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|>=
literal|0
condition|)
block|{
name|dest
index|[
name|off
operator|+
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
break|break;
comment|// Out of 'for' loop
block|}
block|}
comment|// end for: each byte read
return|return
name|i
return|;
block|}
comment|// end read
block|}
comment|// end inner class InputStream
comment|/* ******** I N N E R   C L A S S   O U T P U T S T R E A M ******** */
comment|/**    * A {@link Base64.Base64OutputStream} will write data to another    *<tt>OutputStream</tt>, given in the constructor, and    * encode/decode to/from Base64 notation on the fly.    *    * @see Base64    * @since 1.3    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|static
class|class
name|Base64OutputStream
extends|extends
name|FilterOutputStream
block|{
specifier|private
name|boolean
name|encode
decl_stmt|;
specifier|private
name|int
name|position
decl_stmt|;
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
specifier|private
name|int
name|bufferLength
decl_stmt|;
specifier|private
name|int
name|lineLength
decl_stmt|;
specifier|private
name|boolean
name|breakLines
decl_stmt|;
specifier|private
name|byte
index|[]
name|b4
decl_stmt|;
comment|// Scratch used in a few places
specifier|private
name|boolean
name|suspendEncoding
decl_stmt|;
specifier|private
name|int
name|options
decl_stmt|;
comment|// Record for later
specifier|private
name|byte
index|[]
name|decodabet
decl_stmt|;
comment|// Local copy avoids method calls
comment|/**      * Constructs a {@link Base64OutputStream} in ENCODE mode.      *      * @param out the<tt>OutputStream</tt> to which data will be written.      * @since 1.3      */
specifier|public
name|Base64OutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|ENCODE
argument_list|)
expr_stmt|;
block|}
comment|// end constructor
comment|/**      * Constructs a {@link Base64OutputStream} in either ENCODE or DECODE mode.      *<p>      * Valid options:      *      *<ul>      *<li>ENCODE or DECODE: Encode or Decode as data is read.</li>      *<li>DONT_BREAK_LINES: don't break lines at 76 characters (only      *     meaningful when encoding)<i>Note: Technically, this makes your      *     encoding non-compliant.</i></li>      *</ul>      *      *<p>      * Example:<code>new Base64.Base64OutputStream( out, Base64.ENCODE )</code>      *      * @param out the<tt>OutputStream</tt> to which data will be written.      * @param options Specified options.      * @see Base64#ENCODE      * @see Base64#DECODE      * @see Base64#DONT_BREAK_LINES      * @since 1.3      */
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
name|Base64OutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|breakLines
operator|=
operator|(
name|options
operator|&
name|DONT_BREAK_LINES
operator|)
operator|!=
name|DONT_BREAK_LINES
expr_stmt|;
name|this
operator|.
name|encode
operator|=
operator|(
name|options
operator|&
name|ENCODE
operator|)
operator|==
name|ENCODE
expr_stmt|;
name|this
operator|.
name|bufferLength
operator|=
name|encode
condition|?
literal|3
else|:
literal|4
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferLength
index|]
expr_stmt|;
name|this
operator|.
name|position
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|lineLength
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|suspendEncoding
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|b4
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|decodabet
operator|=
name|getDecodabet
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
comment|// end constructor
comment|/**      * Writes the byte to the output stream after converting to/from Base64      * notation. When encoding, bytes are buffered three at a time before the      * output stream actually gets a write() call. When decoding, bytes are      * buffered four at a time.      *      * @param theByte the byte to write      * @since 1.3      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|theByte
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Encoding suspended?
if|if
condition|(
name|suspendEncoding
condition|)
block|{
name|super
operator|.
name|out
operator|.
name|write
argument_list|(
name|theByte
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// end if: supsended
comment|// Encode?
if|if
condition|(
name|encode
condition|)
block|{
name|buffer
index|[
name|position
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|theByte
expr_stmt|;
if|if
condition|(
name|position
operator|>=
name|bufferLength
condition|)
block|{
comment|// Enough to encode.
name|out
operator|.
name|write
argument_list|(
name|encode3to4
argument_list|(
name|b4
argument_list|,
name|buffer
argument_list|,
name|bufferLength
argument_list|,
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|lineLength
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|breakLines
operator|&&
name|lineLength
operator|>=
name|MAX_LINE_LENGTH
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
name|lineLength
operator|=
literal|0
expr_stmt|;
block|}
comment|// end if: end of line
name|position
operator|=
literal|0
expr_stmt|;
block|}
comment|// end if: enough to output
block|}
else|else
block|{
comment|// Meaningful Base64 character?
if|if
condition|(
name|decodabet
index|[
name|theByte
operator|&
literal|0x7f
index|]
operator|>
name|WHITE_SPACE_ENC
condition|)
block|{
name|buffer
index|[
name|position
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|theByte
expr_stmt|;
if|if
condition|(
name|position
operator|>=
name|bufferLength
condition|)
block|{
comment|// Enough to output.
name|int
name|len
init|=
name|decode4to3
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|b4
argument_list|,
literal|0
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b4
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
block|}
comment|// end if: enough to output
block|}
elseif|else
if|if
condition|(
name|decodabet
index|[
name|theByte
operator|&
literal|0x7f
index|]
operator|!=
name|WHITE_SPACE_ENC
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid character in Base64 data."
argument_list|)
throw|;
block|}
comment|// end else: not white space either
block|}
comment|// end else: decoding
block|}
comment|// end write
comment|/**      * Calls {@link #write(int)} repeatedly until<var>len</var> bytes are      * written.      *      * @param theBytes array from which to read bytes      * @param off offset for array      * @param len max number of bytes to read into array      * @since 1.3      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|theBytes
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Encoding suspended?
if|if
condition|(
name|suspendEncoding
condition|)
block|{
name|super
operator|.
name|out
operator|.
name|write
argument_list|(
name|theBytes
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// end if: supsended
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
name|theBytes
index|[
name|off
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// end for: each byte written
block|}
comment|// end write
comment|/**      * Method added by PHIL. [Thanks, PHIL. -Rob] This pads the buffer without      * closing the stream.      *      * @throws IOException e      */
specifier|public
name|void
name|flushBase64
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|encode
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|encode3to4
argument_list|(
name|b4
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|,
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Base64 input not properly padded."
argument_list|)
throw|;
block|}
comment|// end else: decoding
block|}
comment|// end if: buffer partially full
block|}
comment|// end flush
comment|/**      * Flushes and closes (I think, in the superclass) the stream.      *      * @since 1.3      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 1. Ensure that pending characters are written
name|flushBase64
argument_list|()
expr_stmt|;
comment|// 2. Actually close the stream
comment|// Base class both flushes and closes.
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
comment|// end close
comment|/**      * Suspends encoding of the stream. May be helpful if you need to embed a      * piece of base640-encoded data in a stream.      *      * @throws IOException e      * @since 1.5.1      */
specifier|public
name|void
name|suspendEncoding
parameter_list|()
throws|throws
name|IOException
block|{
name|flushBase64
argument_list|()
expr_stmt|;
name|this
operator|.
name|suspendEncoding
operator|=
literal|true
expr_stmt|;
block|}
comment|// end suspendEncoding
comment|/**      * Resumes encoding of the stream. May be helpful if you need to embed a      * piece of base640-encoded data in a stream.      *      * @since 1.5.1      */
specifier|public
name|void
name|resumeEncoding
parameter_list|()
block|{
name|this
operator|.
name|suspendEncoding
operator|=
literal|false
expr_stmt|;
block|}
comment|// end resumeEncoding
block|}
comment|// end inner class OutputStream
block|}
end_class

begin_comment
comment|// end class Base64
end_comment

end_unit

