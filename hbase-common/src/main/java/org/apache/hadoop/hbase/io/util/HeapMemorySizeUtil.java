begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HeapMemorySizeUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_SIZE_KEY
init|=
literal|"hbase.regionserver.global.memstore.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_SIZE_OLD_KEY
init|=
literal|"hbase.regionserver.global.memstore.upperLimit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_SIZE_LOWER_LIMIT_KEY
init|=
literal|"hbase.regionserver.global.memstore.size.lower.limit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_SIZE_LOWER_LIMIT_OLD_KEY
init|=
literal|"hbase.regionserver.global.memstore.lowerLimit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_MEMSTORE_SIZE
init|=
literal|0.4f
decl_stmt|;
comment|// Default lower water mark limit is 95% size of memstore size.
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_MEMSTORE_SIZE_LOWER_LIMIT
init|=
literal|0.95f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HeapMemorySizeUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// a constant to convert a fraction to a percentage
specifier|private
specifier|static
specifier|final
name|int
name|CONVERT_TO_PERCENTAGE
init|=
literal|100
decl_stmt|;
comment|/**    * Checks whether we have enough heap memory left out after portion for Memstore and Block cache.    * We need atleast 20% of heap left out for other RS functions.    * @param conf    */
specifier|public
specifier|static
name|void
name|checkForClusterFreeMemoryLimit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|MEMSTORE_SIZE_OLD_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MEMSTORE_SIZE_OLD_KEY
operator|+
literal|" is deprecated by "
operator|+
name|MEMSTORE_SIZE_KEY
argument_list|)
expr_stmt|;
block|}
name|float
name|globalMemstoreSize
init|=
name|getGlobalMemStorePercent
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|gml
init|=
call|(
name|int
call|)
argument_list|(
name|globalMemstoreSize
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
decl_stmt|;
name|float
name|blockCacheUpperLimit
init|=
name|getBlockCacheHeapPercent
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|bcul
init|=
call|(
name|int
call|)
argument_list|(
name|blockCacheUpperLimit
operator|*
name|CONVERT_TO_PERCENTAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|CONVERT_TO_PERCENTAGE
operator|-
operator|(
name|gml
operator|+
name|bcul
operator|)
operator|<
call|(
name|int
call|)
argument_list|(
name|CONVERT_TO_PERCENTAGE
operator|*
name|HConstants
operator|.
name|HBASE_CLUSTER_MINIMUM_MEMORY_THRESHOLD
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Current heap configuration for MemStore and BlockCache exceeds "
operator|+
literal|"the threshold required for successful cluster operation. "
operator|+
literal|"The combined value cannot exceed 0.8. Please check "
operator|+
literal|"the settings for hbase.regionserver.global.memstore.size and "
operator|+
literal|"hfile.block.cache.size in your configuration. "
operator|+
literal|"hbase.regionserver.global.memstore.size is "
operator|+
name|globalMemstoreSize
operator|+
literal|" hfile.block.cache.size is "
operator|+
name|blockCacheUpperLimit
argument_list|)
throw|;
block|}
block|}
comment|/**    * Retrieve global memstore configured size as percentage of total heap.    * @param c    * @param logInvalid    */
specifier|public
specifier|static
name|float
name|getGlobalMemStorePercent
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|boolean
name|logInvalid
parameter_list|)
block|{
name|float
name|limit
init|=
name|c
operator|.
name|getFloat
argument_list|(
name|MEMSTORE_SIZE_KEY
argument_list|,
name|c
operator|.
name|getFloat
argument_list|(
name|MEMSTORE_SIZE_OLD_KEY
argument_list|,
name|DEFAULT_MEMSTORE_SIZE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0.8f
operator|||
name|limit
operator|<
literal|0.05f
condition|)
block|{
if|if
condition|(
name|logInvalid
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting global memstore limit to default of "
operator|+
name|DEFAULT_MEMSTORE_SIZE
operator|+
literal|" because supplied value outside allowed range of 0.05 -> 0.8"
argument_list|)
expr_stmt|;
block|}
name|limit
operator|=
name|DEFAULT_MEMSTORE_SIZE
expr_stmt|;
block|}
return|return
name|limit
return|;
block|}
comment|/**    * Retrieve configured size for global memstore lower water mark as percentage of total heap.    * @param c    * @param globalMemStorePercent    */
specifier|public
specifier|static
name|float
name|getGlobalMemStoreLowerMark
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
name|float
name|globalMemStorePercent
parameter_list|)
block|{
name|String
name|lowMarkPercentStr
init|=
name|c
operator|.
name|get
argument_list|(
name|MEMSTORE_SIZE_LOWER_LIMIT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowMarkPercentStr
operator|!=
literal|null
condition|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|lowMarkPercentStr
argument_list|)
return|;
block|}
name|String
name|lowerWaterMarkOldValStr
init|=
name|c
operator|.
name|get
argument_list|(
name|MEMSTORE_SIZE_LOWER_LIMIT_OLD_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerWaterMarkOldValStr
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MEMSTORE_SIZE_LOWER_LIMIT_OLD_KEY
operator|+
literal|" is deprecated. Instead use "
operator|+
name|MEMSTORE_SIZE_LOWER_LIMIT_KEY
argument_list|)
expr_stmt|;
name|float
name|lowerWaterMarkOldVal
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|lowerWaterMarkOldValStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerWaterMarkOldVal
operator|>
name|globalMemStorePercent
condition|)
block|{
name|lowerWaterMarkOldVal
operator|=
name|globalMemStorePercent
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting globalMemStoreLimitLowMark == globalMemStoreLimit "
operator|+
literal|"because supplied "
operator|+
name|MEMSTORE_SIZE_LOWER_LIMIT_OLD_KEY
operator|+
literal|" was> "
operator|+
name|MEMSTORE_SIZE_OLD_KEY
argument_list|)
expr_stmt|;
block|}
return|return
name|lowerWaterMarkOldVal
operator|/
name|globalMemStorePercent
return|;
block|}
return|return
name|DEFAULT_MEMSTORE_SIZE_LOWER_LIMIT
return|;
block|}
comment|/**    * Retrieve configured size for on heap block cache as percentage of total heap.    * @param conf    */
specifier|public
specifier|static
name|float
name|getBlockCacheHeapPercent
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
comment|// L1 block cache is always on heap
name|float
name|l1CachePercent
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|float
name|l2CachePercent
init|=
name|getL2BlockCacheHeapPercent
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|l1CachePercent
operator|+
name|l2CachePercent
return|;
block|}
comment|/**    * @param conf    * @return The on heap size for L2 block cache.    */
specifier|public
specifier|static
name|float
name|getL2BlockCacheHeapPercent
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|float
name|l2CachePercent
init|=
literal|0.0F
decl_stmt|;
name|String
name|bucketCacheIOEngineName
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|BUCKET_CACHE_IOENGINE_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// L2 block cache can be on heap when IOEngine is "heap"
if|if
condition|(
name|bucketCacheIOEngineName
operator|!=
literal|null
operator|&&
name|bucketCacheIOEngineName
operator|.
name|startsWith
argument_list|(
literal|"heap"
argument_list|)
condition|)
block|{
name|float
name|bucketCachePercentage
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|HConstants
operator|.
name|BUCKET_CACHE_SIZE_KEY
argument_list|,
literal|0F
argument_list|)
decl_stmt|;
name|MemoryUsage
name|mu
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
operator|.
name|getHeapMemoryUsage
argument_list|()
decl_stmt|;
name|l2CachePercent
operator|=
name|bucketCachePercentage
operator|<
literal|1
condition|?
name|bucketCachePercentage
else|:
operator|(
name|bucketCachePercentage
operator|*
literal|1024
operator|*
literal|1024
operator|)
operator|/
name|mu
operator|.
name|getMax
argument_list|()
expr_stmt|;
block|}
return|return
name|l2CachePercent
return|;
block|}
block|}
end_class

end_unit

