begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PositionedByteRange
import|;
end_import

begin_comment
comment|/**  * An {@link Iterator} over encoded {@code Struct} members.  *<p>  * This iterates over each serialized {@code Struct} field from the specified  * {@code DataTypes<?>[]} definition. It allows you to read the field or skip  * over its serialized bytes using {@link #next()} and {@link #skip()},  * respectively. This is in contrast to the {@code Struct} method which allow  * you to {@link Struct#decode(PositionedByteRange)} or  * {@link Struct#skip(PositionedByteRange)} over the entire {@code Struct} at  * once.  *</p>  *<p>  * This iterator may also be used to read bytes from any {@code Struct} for  * which the specified {@code DataType<?>[]} is a prefix. For example, if the  * specified {@code Struct} definition has a {@link RawInteger} and a  * {@link RawStringTerminated} field, you may parse the serialized output  * of a {@code Struct} whose fields are {@link RawInteger},  * {@link RawStringTerminated}, and {@link RawBytes}. The iterator would  * return a number followed by a {@code String}. The trailing {@code byte[]}  * would be ignored.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|StructIterator
implements|implements
name|Iterator
argument_list|<
name|Object
argument_list|>
block|{
specifier|protected
specifier|final
name|PositionedByteRange
name|src
decl_stmt|;
specifier|protected
name|int
name|idx
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
specifier|final
name|DataType
index|[]
name|types
decl_stmt|;
comment|/**    * Construct {@code StructIterator} over the values encoded in {@code src}    * using the specified {@code types} definition.    * @param src The buffer from which to read encoded values.    * @param types The sequence of types to use as the schema for this    *          {@code Struct}.    */
specifier|public
name|StructIterator
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|DataType
index|[]
name|types
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
comment|// hasNext can return true when position == length in the case of a
comment|// nullable field trailing a struct.
return|return
name|idx
operator|<
name|types
operator|.
name|length
operator|&&
name|src
operator|.
name|getPosition
argument_list|()
operator|<=
name|src
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
name|DataType
argument_list|<
name|?
argument_list|>
name|t
init|=
name|types
index|[
name|idx
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|getPosition
argument_list|()
operator|==
name|src
operator|.
name|getLength
argument_list|()
operator|&&
name|t
operator|.
name|isNullable
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|t
operator|.
name|decode
argument_list|(
name|src
argument_list|)
return|;
block|}
comment|/**    * Bypass the next encoded value.    * @return the number of bytes skipped.    */
specifier|public
name|int
name|skip
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
name|DataType
argument_list|<
name|?
argument_list|>
name|t
init|=
name|types
index|[
name|idx
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|getPosition
argument_list|()
operator|==
name|src
operator|.
name|getLength
argument_list|()
operator|&&
name|t
operator|.
name|isNullable
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|t
operator|.
name|skip
argument_list|(
name|src
argument_list|)
return|;
block|}
block|}
end_class

end_unit

