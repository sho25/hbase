begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A common interface for a cryptographic algorithm.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|abstract
class|class
name|Cipher
block|{
specifier|private
specifier|final
name|CipherProvider
name|provider
decl_stmt|;
specifier|public
name|Cipher
parameter_list|(
name|CipherProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
comment|/**    * Return the provider for this Cipher    */
specifier|public
name|CipherProvider
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
comment|/**    * Return this Cipher's name    */
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**    * Return the key length required by this cipher, in bytes    */
specifier|public
specifier|abstract
name|int
name|getKeyLength
parameter_list|()
function_decl|;
comment|/**    * Return the expected initialization vector length, in bytes, or 0 if not applicable    */
specifier|public
specifier|abstract
name|int
name|getIvLength
parameter_list|()
function_decl|;
comment|/**    * Create a random symmetric key    * @return the random symmetric key    */
specifier|public
specifier|abstract
name|Key
name|getRandomKey
parameter_list|()
function_decl|;
comment|/**    * Get an encryptor for encrypting data.    */
specifier|public
specifier|abstract
name|Encryptor
name|getEncryptor
parameter_list|()
function_decl|;
comment|/**    * Return a decryptor for decrypting data.    */
specifier|public
specifier|abstract
name|Decryptor
name|getDecryptor
parameter_list|()
function_decl|;
comment|/**    * Create an encrypting output stream given a context and IV    * @param out the output stream to wrap    * @param context the encryption context    * @param iv initialization vector    * @return the encrypting wrapper    * @throws IOException    */
specifier|public
specifier|abstract
name|OutputStream
name|createEncryptionStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Context
name|context
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Create an encrypting output stream given an initialized encryptor    * @param out the output stream to wrap    * @param encryptor the encryptor    * @return the encrypting wrapper    * @throws IOException    */
specifier|public
specifier|abstract
name|OutputStream
name|createEncryptionStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Encryptor
name|encryptor
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Create a decrypting input stream given a context and IV    * @param in the input stream to wrap    * @param context the encryption context    * @param iv initialization vector    * @return the decrypting wrapper    * @throws IOException    */
specifier|public
specifier|abstract
name|InputStream
name|createDecryptionStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Context
name|context
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Create a decrypting output stream given an initialized decryptor    * @param in the input stream to wrap    * @param decryptor the decryptor    * @return the decrypting wrapper    * @throws IOException    */
specifier|public
specifier|abstract
name|InputStream
name|createDecryptionStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decryptor
name|decryptor
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

