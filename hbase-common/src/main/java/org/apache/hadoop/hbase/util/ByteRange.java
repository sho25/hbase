begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Lightweight, reusable class for specifying ranges of byte[]'s. CompareTo and equals methods are  * lexicographic, which is native to HBase.  *<p/>  * This class differs from ByteBuffer:  *<li/>On-heap bytes only  *<li/>Implements equals, hashCode, and compareTo so that it can be used in standard java  * Collections, similar to String.  *<li/>Does not maintain mark/position iterator state inside the class. Doing so leads to many bugs  * in complex applications.  *<li/>Allows the addition of simple core methods like this.copyTo(that, offset).  *<li/>Can be reused in tight loops like a major compaction which can save significant amounts of  * garbage.  *<li/>(Without reuse, we throw off garbage like this thing:  * http://www.youtube.com/watch?v=lkmBH-MjZF4  *<p/>  * Mutable, and always evaluates equals, hashCode, and compareTo based on the current contents.  *<p/>  * Can contain convenience methods for comparing, printing, cloning, spawning new arrays, copying to  * other arrays, etc. Please place non-core methods into {@link ByteRangeTool}.  *<p/>  * We may consider converting this to an interface and creating separate implementations for a  * single byte[], a paged byte[] (growable byte[][]), a ByteBuffer, etc  */
end_comment

begin_class
specifier|public
class|class
name|ByteRange
implements|implements
name|Comparable
argument_list|<
name|ByteRange
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|UNSET_HASH_VALUE
init|=
operator|-
literal|1
decl_stmt|;
comment|/********************** fields *****************************/
comment|// Do not make these final, as the intention is to reuse objects of this class
comment|/**    * The array containing the bytes in this range.  It will be>= length.    */
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
comment|/**    * The index of the first byte in this range.  ByteRange.get(0) will return bytes[offset].    */
specifier|private
name|int
name|offset
decl_stmt|;
comment|/**    * The number of bytes in the range.  Offset + length must be<= bytes.length    */
specifier|private
name|int
name|length
decl_stmt|;
comment|/**    * Variable for lazy-caching the hashCode of this range.  Useful for frequently used ranges,    * long-lived ranges, or long ranges.    */
specifier|private
name|int
name|hash
init|=
name|UNSET_HASH_VALUE
decl_stmt|;
comment|/********************** construct ***********************/
specifier|public
name|ByteRange
parameter_list|()
block|{
name|set
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|//Could probably get away with a null array if the need arises.
block|}
specifier|public
name|ByteRange
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|set
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteRange
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|set
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/********************** write methods *************************/
specifier|public
name|ByteRange
name|clear
parameter_list|()
block|{
name|clearHashCache
argument_list|()
expr_stmt|;
name|bytes
operator|=
literal|null
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ByteRange
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|clearHashCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|ArrayUtils
operator|.
name|length
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ByteRange
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|clearHashCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|clearHashCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/*********** read methods (add non-core methods to ByteRangeUtils) *************/
comment|/**    * @param index zero-based index    * @return single byte at index    */
specifier|public
name|byte
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|bytes
index|[
name|offset
operator|+
name|index
index|]
return|;
block|}
comment|/**    * Instantiate a new byte[] with exact length, which is at least 24 bytes + length.  Copy the    * contents of this range into it.    * @return The newly cloned byte[].    */
specifier|public
name|byte
index|[]
name|deepCopyToNewArray
parameter_list|()
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Create a new ByteRange with new backing byte[] and copy the state of this range into the new    * range.  Copy the hash over if it is already calculated.    * @return Deep copy    */
specifier|public
name|ByteRange
name|deepCopy
parameter_list|()
block|{
name|ByteRange
name|clone
init|=
operator|new
name|ByteRange
argument_list|(
name|deepCopyToNewArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHashCached
argument_list|()
condition|)
block|{
name|clone
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
return|return
name|clone
return|;
block|}
comment|/**    * Wrapper for System.arraycopy.  Copy the contents of this range into the provided array.    * @param destination Copy to this array    * @param destinationOffset First index in the destination array.    */
specifier|public
name|void
name|deepCopyTo
parameter_list|(
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wrapper for System.arraycopy. Copy the contents of this range into the provided array.    * @param innerOffset Start copying from this index in this source ByteRange. First byte copied is    *          bytes[offset + innerOffset]    * @param copyLength Copy this many bytes    * @param destination Copy to this array    * @param destinationOffset First index in the destination array.    */
specifier|public
name|void
name|deepCopySubRangeTo
parameter_list|(
name|int
name|innerOffset
parameter_list|,
name|int
name|copyLength
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|offset
operator|+
name|innerOffset
argument_list|,
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|copyLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new ByteRange that points at this range's byte[]. The new range can have different    * values for offset and length, but modifying the shallowCopy will modify the bytes in this    * range's array. Pass over the hash code if it is already cached.    * @param innerOffset First byte of clone will be this.offset + copyOffset.    * @param copyLength Number of bytes in the clone.    * @return new ByteRange object referencing this range's byte[].    */
specifier|public
name|ByteRange
name|shallowCopySubRange
parameter_list|(
name|int
name|innerOffset
parameter_list|,
name|int
name|copyLength
parameter_list|)
block|{
name|ByteRange
name|clone
init|=
operator|new
name|ByteRange
argument_list|(
name|bytes
argument_list|,
name|offset
operator|+
name|innerOffset
argument_list|,
name|copyLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHashCached
argument_list|()
condition|)
block|{
name|clone
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
return|return
name|clone
return|;
block|}
comment|//TODO move to ByteRangeUtils because it is non-core method
specifier|public
name|int
name|numEqualPrefixBytes
parameter_list|(
name|ByteRange
name|that
parameter_list|,
name|int
name|thatInnerOffset
parameter_list|)
block|{
name|int
name|maxCompares
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|that
operator|.
name|length
operator|-
name|thatInnerOffset
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxCompares
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|bytes
index|[
name|offset
operator|+
name|i
index|]
operator|!=
name|that
operator|.
name|bytes
index|[
name|that
operator|.
name|offset
operator|+
name|thatInnerOffset
operator|+
name|i
index|]
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
name|maxCompares
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|bytes
return|;
block|}
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|isEmpty
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|notEmpty
parameter_list|()
block|{
return|return
name|notEmpty
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/******************* static methods ************************/
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|==
literal|null
operator|||
name|range
operator|.
name|length
operator|==
literal|0
return|;
block|}
specifier|public
specifier|static
name|boolean
name|notEmpty
parameter_list|(
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|!=
literal|null
operator|&&
name|range
operator|.
name|length
operator|>
literal|0
return|;
block|}
comment|/******************* standard methods *********************/
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|thatObject
parameter_list|)
block|{
if|if
condition|(
name|thatObject
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|==
name|thatObject
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|hashCode
argument_list|()
operator|!=
name|thatObject
operator|.
name|hashCode
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|thatObject
operator|instanceof
name|ByteRange
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ByteRange
name|that
init|=
operator|(
name|ByteRange
operator|)
name|thatObject
decl_stmt|;
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|that
operator|.
name|bytes
argument_list|,
name|that
operator|.
name|offset
argument_list|,
name|that
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|isHashCached
argument_list|()
condition|)
block|{
comment|// hash is already calculated and cached
return|return
name|hash
return|;
block|}
if|if
condition|(
name|this
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// return 0 for empty ByteRange
name|hash
operator|=
literal|0
expr_stmt|;
return|return
name|hash
return|;
block|}
name|int
name|off
init|=
name|offset
decl_stmt|;
name|hash
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|bytes
index|[
name|off
operator|++
index|]
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
specifier|private
name|boolean
name|isHashCached
parameter_list|()
block|{
return|return
name|hash
operator|!=
name|UNSET_HASH_VALUE
return|;
block|}
specifier|private
name|void
name|clearHashCache
parameter_list|()
block|{
name|hash
operator|=
name|UNSET_HASH_VALUE
expr_stmt|;
block|}
comment|/**    * Bitwise comparison of each byte in the array.  Unsigned comparison, not paying attention to    * java's signed bytes.    */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ByteRange
name|other
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|other
operator|.
name|bytes
argument_list|,
name|other
operator|.
name|offset
argument_list|,
name|other
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
end_class

end_unit

