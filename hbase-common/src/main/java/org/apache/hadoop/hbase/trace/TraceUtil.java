begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|HTraceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|SpanReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Tracer
import|;
end_import

begin_comment
comment|/**  * This wrapper class provides functions for accessing htrace 4+ functionality in a simplified way.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TraceUtil
block|{
specifier|private
specifier|static
name|HTraceConfiguration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|Tracer
name|tracer
decl_stmt|;
specifier|private
name|TraceUtil
parameter_list|()
block|{   }
specifier|public
specifier|static
name|void
name|initTracer
parameter_list|(
name|Configuration
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HBaseHTraceConfiguration
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tracer
operator|==
literal|null
operator|&&
name|conf
operator|!=
literal|null
condition|)
block|{
name|tracer
operator|=
operator|new
name|Tracer
operator|.
name|Builder
argument_list|(
literal|"Tracer"
argument_list|)
operator|.
name|conf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wrapper method to create new TraceScope with the given description    * @return TraceScope or null when not tracing    */
specifier|public
specifier|static
name|TraceScope
name|createTrace
parameter_list|(
name|String
name|description
parameter_list|)
block|{
return|return
operator|(
name|tracer
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|tracer
operator|.
name|newScope
argument_list|(
name|description
argument_list|)
return|;
block|}
comment|/**    * Wrapper method to create new child TraceScope with the given description    * and parent scope's spanId    * @param span parent span    * @return TraceScope or null when not tracing    */
specifier|public
specifier|static
name|TraceScope
name|createTrace
parameter_list|(
name|String
name|description
parameter_list|,
name|Span
name|span
parameter_list|)
block|{
if|if
condition|(
name|span
operator|==
literal|null
condition|)
return|return
name|createTrace
argument_list|(
name|description
argument_list|)
return|;
return|return
operator|(
name|tracer
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|tracer
operator|.
name|newScope
argument_list|(
name|description
argument_list|,
name|span
operator|.
name|getSpanId
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Wrapper method to add new sampler to the default tracer    * @return true if added, false if it was already added    */
specifier|public
specifier|static
name|boolean
name|addSampler
parameter_list|(
name|Sampler
name|sampler
parameter_list|)
block|{
if|if
condition|(
name|sampler
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|tracer
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|tracer
operator|.
name|addSampler
argument_list|(
name|sampler
argument_list|)
return|;
block|}
comment|/**    * Wrapper method to add key-value pair to TraceInfo of actual span    */
specifier|public
specifier|static
name|void
name|addKVAnnotation
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Span
name|span
init|=
name|Tracer
operator|.
name|getCurrentSpan
argument_list|()
decl_stmt|;
if|if
condition|(
name|span
operator|!=
literal|null
condition|)
block|{
name|span
operator|.
name|addKVAnnotation
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wrapper method to add receiver to actual tracerpool    * @return true if successfull, false if it was already added    */
specifier|public
specifier|static
name|boolean
name|addReceiver
parameter_list|(
name|SpanReceiver
name|rcvr
parameter_list|)
block|{
return|return
operator|(
name|tracer
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|tracer
operator|.
name|getTracerPool
argument_list|()
operator|.
name|addReceiver
argument_list|(
name|rcvr
argument_list|)
return|;
block|}
comment|/**    * Wrapper method to remove receiver from actual tracerpool    * @return true if removed, false if doesn't exist    */
specifier|public
specifier|static
name|boolean
name|removeReceiver
parameter_list|(
name|SpanReceiver
name|rcvr
parameter_list|)
block|{
return|return
operator|(
name|tracer
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|tracer
operator|.
name|getTracerPool
argument_list|()
operator|.
name|removeReceiver
argument_list|(
name|rcvr
argument_list|)
return|;
block|}
comment|/**    * Wrapper method to add timeline annotiation to current span with given message    */
specifier|public
specifier|static
name|void
name|addTimelineAnnotation
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|Span
name|span
init|=
name|Tracer
operator|.
name|getCurrentSpan
argument_list|()
decl_stmt|;
if|if
condition|(
name|span
operator|!=
literal|null
condition|)
block|{
name|span
operator|.
name|addTimelineAnnotation
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wrap runnable with current tracer and description    * @param runnable to wrap    * @return wrapped runnable or original runnable when not tracing    */
specifier|public
specifier|static
name|Runnable
name|wrap
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
operator|(
name|tracer
operator|==
literal|null
operator|)
condition|?
name|runnable
else|:
name|tracer
operator|.
name|wrap
argument_list|(
name|runnable
argument_list|,
name|description
argument_list|)
return|;
block|}
block|}
end_class

end_unit

