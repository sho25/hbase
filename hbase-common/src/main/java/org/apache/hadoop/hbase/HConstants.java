begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
operator|.
name|MAGIC_LENGTH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * HConstants holds a bunch of HBase-related constants  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|final
class|class
name|HConstants
block|{
comment|// NOTICE!!!! Please do not add a constants here, unless they are referenced by a lot of classes.
comment|//Bytes.UTF8_ENCODING should be updated if this changed
comment|/** When we encode strings, we always specify UTF8 encoding */
specifier|public
specifier|static
specifier|final
name|String
name|UTF8_ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
comment|//Bytes.UTF8_CHARSET should be updated if this changed
comment|/** When we encode strings, we always specify UTF8 encoding */
specifier|public
specifier|static
specifier|final
name|Charset
name|UTF8_CHARSET
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
comment|/**    * Default block size for an HFile.    */
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_BLOCKSIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
comment|/** Used as a magic return value while optimized index key feature enabled(HBASE-7845) */
specifier|public
specifier|final
specifier|static
name|int
name|INDEX_KEY_MAGIC
init|=
operator|-
literal|2
decl_stmt|;
comment|/*      * Name of directory that holds recovered edits written by the wal log      * splitting code, one per region      */
specifier|public
specifier|static
specifier|final
name|String
name|RECOVERED_EDITS_DIR
init|=
literal|"recovered.edits"
decl_stmt|;
comment|/**    * The first four bytes of Hadoop RPC connections    */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|RPC_HEADER
init|=
operator|new
name|byte
index|[]
block|{
literal|'H'
block|,
literal|'B'
block|,
literal|'a'
block|,
literal|'s'
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|RPC_CURRENT_VERSION
init|=
literal|0
decl_stmt|;
comment|// HFileBlock constants. TODO!!!! THESE DEFINES BELONG IN HFILEBLOCK, NOT UP HERE.
comment|// Needed down in hbase-common though by encoders but these encoders should not be dealing
comment|// in the internals of hfileblocks. Fix encapsulation.
comment|/** The size data structures with minor version is 0 */
specifier|public
specifier|static
specifier|final
name|int
name|HFILEBLOCK_HEADER_SIZE_NO_CHECKSUM
init|=
name|MAGIC_LENGTH
operator|+
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
decl_stmt|;
comment|/** The size of a version 2 HFile block header, minor version 1.    * There is a 1 byte checksum type, followed by a 4 byte bytesPerChecksum    * followed by another 4 byte value to store sizeofDataOnDisk.    */
specifier|public
specifier|static
specifier|final
name|int
name|HFILEBLOCK_HEADER_SIZE
init|=
name|HFILEBLOCK_HEADER_SIZE_NO_CHECKSUM
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|+
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
decl_stmt|;
comment|/** Just an array of bytes of the right size. */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|HFILEBLOCK_DUMMY_HEADER
init|=
operator|new
name|byte
index|[
name|HFILEBLOCK_HEADER_SIZE
index|]
decl_stmt|;
comment|//End HFileBlockConstants.
comment|/**    * Status codes used for return values of bulk operations.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
enum|enum
name|OperationStatusCode
block|{
name|NOT_RUN
block|,
name|SUCCESS
block|,
name|BAD_FAMILY
block|,
name|SANITY_CHECK_FAILURE
block|,
name|FAILURE
block|;   }
comment|/** long constant for zero */
specifier|public
specifier|static
specifier|final
name|Long
name|ZERO_L
init|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NINES
init|=
literal|"99999999999999"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZEROES
init|=
literal|"00000000000000"
decl_stmt|;
comment|// For migration
comment|/** name of version file */
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_FILE_NAME
init|=
literal|"hbase.version"
decl_stmt|;
comment|/**    * Current version of file system.    * Version 4 supports only one kind of bloom filter.    * Version 5 changes versions in catalog table regions.    * Version 6 enables blockcaching on catalog tables.    * Version 7 introduces hfile -- hbase 0.19 to 0.20..    * Version 8 introduces namespace    */
comment|// public static final String FILE_SYSTEM_VERSION = "6";
specifier|public
specifier|static
specifier|final
name|String
name|FILE_SYSTEM_VERSION
init|=
literal|"8"
decl_stmt|;
comment|// Configuration parameters
comment|//TODO: Is having HBase homed on port 60k OK?
comment|/** Cluster is in distributed mode or not */
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_DISTRIBUTED
init|=
literal|"hbase.cluster.distributed"
decl_stmt|;
comment|/** Config for pluggable load balancers */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_MASTER_LOADBALANCER_CLASS
init|=
literal|"hbase.master.loadbalancer.class"
decl_stmt|;
comment|/** Config for balancing the cluster by table */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_MASTER_LOADBALANCE_BYTABLE
init|=
literal|"hbase.master.loadbalance.bytable"
decl_stmt|;
comment|/** Config for the max percent of regions in transition */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_MASTER_BALANCER_MAX_RIT_PERCENT
init|=
literal|"hbase.master.balancer.maxRitPercent"
decl_stmt|;
comment|/** Default value for the max percent of regions in transition */
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_HBASE_MASTER_BALANCER_MAX_RIT_PERCENT
init|=
literal|1.0
decl_stmt|;
comment|/** Config for the max balancing time */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_BALANCER_MAX_BALANCING
init|=
literal|"hbase.balancer.max.balancing"
decl_stmt|;
comment|/** Config for the balancer period */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_BALANCER_PERIOD
init|=
literal|"hbase.balancer.period"
decl_stmt|;
comment|/** Default value for the balancer period */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_BALANCER_PERIOD
init|=
literal|300000
decl_stmt|;
comment|/** The name of the ensemble table */
specifier|public
specifier|static
specifier|final
name|TableName
name|ENSEMBLE_TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"hbase:ensemble"
argument_list|)
decl_stmt|;
comment|/** Config for pluggable region normalizer */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_MASTER_NORMALIZER_CLASS
init|=
literal|"hbase.master.normalizer.class"
decl_stmt|;
comment|/** Cluster is standalone or pseudo-distributed */
specifier|public
specifier|static
specifier|final
name|boolean
name|CLUSTER_IS_LOCAL
init|=
literal|false
decl_stmt|;
comment|/** Cluster is fully-distributed */
specifier|public
specifier|static
specifier|final
name|boolean
name|CLUSTER_IS_DISTRIBUTED
init|=
literal|true
decl_stmt|;
comment|/** Default value for cluster distributed mode */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CLUSTER_DISTRIBUTED
init|=
name|CLUSTER_IS_LOCAL
decl_stmt|;
comment|/** default host address */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_HOST
init|=
literal|"0.0.0.0"
decl_stmt|;
comment|/** Parameter name for port master listens on. */
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_PORT
init|=
literal|"hbase.master.port"
decl_stmt|;
comment|/** default port that the master listens on */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MASTER_PORT
init|=
literal|16000
decl_stmt|;
comment|/** default port for master web api */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MASTER_INFOPORT
init|=
literal|16010
decl_stmt|;
comment|/** Configuration key for master web API port */
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_INFO_PORT
init|=
literal|"hbase.master.info.port"
decl_stmt|;
comment|/** Parameter name for the master type being backup (waits for primary to go inactive). */
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_TYPE_BACKUP
init|=
literal|"hbase.master.backup"
decl_stmt|;
comment|/**    * by default every master is a possible primary master unless the conf explicitly overrides it    */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_MASTER_TYPE_BACKUP
init|=
literal|false
decl_stmt|;
comment|/** Name of ZooKeeper quorum configuration parameter. */
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_QUORUM
init|=
literal|"hbase.zookeeper.quorum"
decl_stmt|;
comment|/** Common prefix of ZooKeeper configuration properties */
specifier|public
specifier|static
specifier|final
name|String
name|ZK_CFG_PROPERTY_PREFIX
init|=
literal|"hbase.zookeeper.property."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ZK_CFG_PROPERTY_PREFIX_LEN
init|=
name|ZK_CFG_PROPERTY_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
comment|/**    * The ZK client port key in the ZK properties map. The name reflects the    * fact that this is not an HBase configuration key.    */
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_PORT_STR
init|=
literal|"clientPort"
decl_stmt|;
comment|/** Parameter name for the client port that the zookeeper listens on */
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_CLIENT_PORT
init|=
name|ZK_CFG_PROPERTY_PREFIX
operator|+
name|CLIENT_PORT_STR
decl_stmt|;
comment|/** Default client port that the zookeeper listens on */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ZOOKEPER_CLIENT_PORT
init|=
literal|2181
decl_stmt|;
comment|/**    * Parameter name for the wait time for the recoverable zookeeper    */
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_RECOVERABLE_WAITTIME
init|=
literal|"hbase.zookeeper.recoverable.waittime"
decl_stmt|;
comment|/** Default wait time for the recoverable zookeeper */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_ZOOKEPER_RECOVERABLE_WAITIME
init|=
literal|10000
decl_stmt|;
comment|/** Parameter name for the root dir in ZK for this cluster */
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_ZNODE_PARENT
init|=
literal|"zookeeper.znode.parent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ZOOKEEPER_ZNODE_PARENT
init|=
literal|"/hbase"
decl_stmt|;
comment|/**    * Parameter name for the limit on concurrent client-side zookeeper    * connections    */
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_MAX_CLIENT_CNXNS
init|=
name|ZK_CFG_PROPERTY_PREFIX
operator|+
literal|"maxClientCnxns"
decl_stmt|;
comment|/** Parameter name for the ZK data directory */
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_DATA_DIR
init|=
name|ZK_CFG_PROPERTY_PREFIX
operator|+
literal|"dataDir"
decl_stmt|;
comment|/** Parameter name for the ZK tick time */
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_TICK_TIME
init|=
name|ZK_CFG_PROPERTY_PREFIX
operator|+
literal|"tickTime"
decl_stmt|;
comment|/** Default limit on concurrent client-side zookeeper connections */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ZOOKEPER_MAX_CLIENT_CNXNS
init|=
literal|300
decl_stmt|;
comment|/** Configuration key for ZooKeeper session timeout */
specifier|public
specifier|static
specifier|final
name|String
name|ZK_SESSION_TIMEOUT
init|=
literal|"zookeeper.session.timeout"
decl_stmt|;
comment|/** Default value for ZooKeeper session timeout */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ZK_SESSION_TIMEOUT
init|=
literal|180
operator|*
literal|1000
decl_stmt|;
comment|/** Parameter name for port region server listens on. */
specifier|public
specifier|static
specifier|final
name|String
name|REGIONSERVER_PORT
init|=
literal|"hbase.regionserver.port"
decl_stmt|;
comment|/** Default port region server listens on. */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGIONSERVER_PORT
init|=
literal|16020
decl_stmt|;
comment|/** default port for region server web api */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGIONSERVER_INFOPORT
init|=
literal|16030
decl_stmt|;
comment|/** A configuration key for regionserver info port */
specifier|public
specifier|static
specifier|final
name|String
name|REGIONSERVER_INFO_PORT
init|=
literal|"hbase.regionserver.info.port"
decl_stmt|;
comment|/** A flag that enables automatic selection of regionserver info port */
specifier|public
specifier|static
specifier|final
name|String
name|REGIONSERVER_INFO_PORT_AUTO
init|=
name|REGIONSERVER_INFO_PORT
operator|+
literal|".auto"
decl_stmt|;
comment|/** Parameter name for what region server implementation to use. */
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SERVER_IMPL
init|=
literal|"hbase.regionserver.impl"
decl_stmt|;
comment|/** Parameter name for what master implementation to use. */
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_IMPL
init|=
literal|"hbase.master.impl"
decl_stmt|;
comment|/** Parameter name for what hbase client implementation to use. */
specifier|public
specifier|static
specifier|final
name|String
name|HBASECLIENT_IMPL
init|=
literal|"hbase.hbaseclient.impl"
decl_stmt|;
comment|/** Parameter name for how often threads should wake up */
specifier|public
specifier|static
specifier|final
name|String
name|THREAD_WAKE_FREQUENCY
init|=
literal|"hbase.server.thread.wakefrequency"
decl_stmt|;
comment|/** Default value for thread wake frequency */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_THREAD_WAKE_FREQUENCY
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|/** Parameter name for how often we should try to write a version file, before failing */
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_FILE_WRITE_ATTEMPTS
init|=
literal|"hbase.server.versionfile.writeattempts"
decl_stmt|;
comment|/** Parameter name for how often we should try to write a version file, before failing */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_VERSION_FILE_WRITE_ATTEMPTS
init|=
literal|3
decl_stmt|;
comment|/** Parameter name for how often a region should should perform a major compaction */
specifier|public
specifier|static
specifier|final
name|String
name|MAJOR_COMPACTION_PERIOD
init|=
literal|"hbase.hregion.majorcompaction"
decl_stmt|;
comment|/** Parameter name for the maximum batch of KVs to be used in flushes and compactions */
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_KV_MAX
init|=
literal|"hbase.hstore.compaction.kv.max"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COMPACTION_KV_MAX_DEFAULT
init|=
literal|10
decl_stmt|;
comment|/** Parameter name for HBase instance root directory */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_DIR
init|=
literal|"hbase.rootdir"
decl_stmt|;
comment|/** Parameter name for HBase client IPC pool type */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_IPC_POOL_TYPE
init|=
literal|"hbase.client.ipc.pool.type"
decl_stmt|;
comment|/** Parameter name for HBase client IPC pool size */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_IPC_POOL_SIZE
init|=
literal|"hbase.client.ipc.pool.size"
decl_stmt|;
comment|/** Parameter name for HBase client operation timeout. */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_OPERATION_TIMEOUT
init|=
literal|"hbase.client.operation.timeout"
decl_stmt|;
comment|/** Parameter name for HBase client operation timeout. */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_META_OPERATION_TIMEOUT
init|=
literal|"hbase.client.meta.operation.timeout"
decl_stmt|;
comment|/** Default HBase client operation timeout, which is tantamount to a blocking call */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
init|=
literal|1200000
decl_stmt|;
comment|/** Parameter name for HBase client meta replica scan call timeout. */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_META_REPLICA_SCAN_TIMEOUT
init|=
literal|"hbase.client.meta.replica.scan.timeout"
decl_stmt|;
comment|/** Default HBase client meta replica scan call timeout, 1 second */
specifier|public
specifier|static
specifier|final
name|int
name|HBASE_CLIENT_META_REPLICA_SCAN_TIMEOUT_DEFAULT
init|=
literal|1000000
decl_stmt|;
comment|/** Used to construct the name of the log directory for a region server */
specifier|public
specifier|static
specifier|final
name|String
name|HREGION_LOGDIR_NAME
init|=
literal|"WALs"
decl_stmt|;
comment|/** Used to construct the name of the splitlog directory for a region server */
specifier|public
specifier|static
specifier|final
name|String
name|SPLIT_LOGDIR_NAME
init|=
literal|"splitWAL"
decl_stmt|;
comment|/** Like the previous, but for old logs that are about to be deleted */
specifier|public
specifier|static
specifier|final
name|String
name|HREGION_OLDLOGDIR_NAME
init|=
literal|"oldWALs"
decl_stmt|;
comment|/** Staging dir used by bulk load */
specifier|public
specifier|static
specifier|final
name|String
name|BULKLOAD_STAGING_DIR_NAME
init|=
literal|"staging"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CORRUPT_DIR_NAME
init|=
literal|"corrupt"
decl_stmt|;
comment|/** Used by HBCK to sideline backup data */
specifier|public
specifier|static
specifier|final
name|String
name|HBCK_SIDELINEDIR_NAME
init|=
literal|".hbck"
decl_stmt|;
comment|/** Any artifacts left from migration can be moved here */
specifier|public
specifier|static
specifier|final
name|String
name|MIGRATION_NAME
init|=
literal|".migration"
decl_stmt|;
comment|/**    * The directory from which co-processor/custom filter jars can be loaded    * dynamically by the region servers. This value can be overridden by the    * hbase.dynamic.jars.dir config.    */
specifier|public
specifier|static
specifier|final
name|String
name|LIB_DIR
init|=
literal|"lib"
decl_stmt|;
comment|/** Used to construct the name of the compaction directory during compaction */
specifier|public
specifier|static
specifier|final
name|String
name|HREGION_COMPACTIONDIR_NAME
init|=
literal|"compaction.dir"
decl_stmt|;
comment|/** Conf key for the max file size after which we split the region */
specifier|public
specifier|static
specifier|final
name|String
name|HREGION_MAX_FILESIZE
init|=
literal|"hbase.hregion.max.filesize"
decl_stmt|;
comment|/** Default maximum file size */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_MAX_FILE_SIZE
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
comment|/**    * Max size of single row for Get's or Scan's without in-row scanning flag set.    */
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_MAX_ROWSIZE_KEY
init|=
literal|"hbase.table.max.rowsize"
decl_stmt|;
comment|/**    * Default max row size (1 Gb).    */
specifier|public
specifier|static
specifier|final
name|long
name|TABLE_MAX_ROWSIZE_DEFAULT
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
comment|/**    * The max number of threads used for opening and closing stores or store    * files in parallel    */
specifier|public
specifier|static
specifier|final
name|String
name|HSTORE_OPEN_AND_CLOSE_THREADS_MAX
init|=
literal|"hbase.hstore.open.and.close.threads.max"
decl_stmt|;
comment|/**    * The default number for the max number of threads used for opening and    * closing stores or store files in parallel    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HSTORE_OPEN_AND_CLOSE_THREADS_MAX
init|=
literal|1
decl_stmt|;
comment|/**    * Block updates if memstore has hbase.hregion.memstore.block.multiplier    * times hbase.hregion.memstore.flush.size bytes.  Useful preventing    * runaway memstore during spikes in update traffic.    */
specifier|public
specifier|static
specifier|final
name|String
name|HREGION_MEMSTORE_BLOCK_MULTIPLIER
init|=
literal|"hbase.hregion.memstore.block.multiplier"
decl_stmt|;
comment|/**    * Default value for hbase.hregion.memstore.block.multiplier    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HREGION_MEMSTORE_BLOCK_MULTIPLIER
init|=
literal|4
decl_stmt|;
comment|/** Conf key for the memstore size at which we flush the memstore */
specifier|public
specifier|static
specifier|final
name|String
name|HREGION_MEMSTORE_FLUSH_SIZE
init|=
literal|"hbase.hregion.memstore.flush.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HREGION_EDITS_REPLAY_SKIP_ERRORS
init|=
literal|"hbase.hregion.edits.replay.skip.errors"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_HREGION_EDITS_REPLAY_SKIP_ERRORS
init|=
literal|false
decl_stmt|;
comment|/** Maximum value length, enforced on KeyValue construction */
specifier|public
specifier|static
specifier|final
name|int
name|MAXIMUM_VALUE_LENGTH
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
decl_stmt|;
comment|/** name of the file for unique cluster ID */
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_ID_FILE_NAME
init|=
literal|"hbase.id"
decl_stmt|;
comment|/** Default value for cluster ID */
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_ID_DEFAULT
init|=
literal|"default-cluster"
decl_stmt|;
comment|/** Parameter name for # days to keep MVCC values during a major compaction */
specifier|public
specifier|static
specifier|final
name|String
name|KEEP_SEQID_PERIOD
init|=
literal|"hbase.hstore.compaction.keep.seqId.period"
decl_stmt|;
comment|/** At least to keep MVCC values in hfiles for 5 days */
specifier|public
specifier|static
specifier|final
name|int
name|MIN_KEEP_SEQID_PERIOD
init|=
literal|5
decl_stmt|;
comment|// Always store the location of the root table's HRegion.
comment|// This HRegion is never split.
comment|// region name = table + startkey + regionid. This is the row key.
comment|// each row in the root and meta tables describes exactly 1 region
comment|// Do we ever need to know all the information that we are storing?
comment|// Note that the name of the root table starts with "-" and the name of the
comment|// meta table starts with "." Why? it's a trick. It turns out that when we
comment|// store region names in memory, we use a SortedMap. Since "-" sorts before
comment|// "." (and since no other table name can start with either of these
comment|// characters, the root region will always be the first entry in such a Map,
comment|// followed by all the meta regions (which will be ordered by their starting
comment|// row key as well), followed by all user tables. So when the Master is
comment|// choosing regions to assign, it will always choose the root region first,
comment|// followed by the meta regions, followed by user regions. Since the root
comment|// and meta regions always need to be on-line, this ensures that they will
comment|// be the first to be reassigned if the server(s) they are being served by
comment|// should go down.
comment|/**    * The hbase:meta table's name.    * @deprecated For upgrades of 0.94 to 0.96    */
annotation|@
name|Deprecated
comment|// for compat from 0.94 -> 0.96.
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|META_TABLE_NAME
init|=
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BASE_NAMESPACE_DIR
init|=
literal|"data"
decl_stmt|;
comment|/** delimiter used between portions of a region name */
specifier|public
specifier|static
specifier|final
name|int
name|META_ROW_DELIMITER
init|=
literal|','
decl_stmt|;
comment|/** The catalog family as a string*/
specifier|public
specifier|static
specifier|final
name|String
name|CATALOG_FAMILY_STR
init|=
literal|"info"
decl_stmt|;
comment|/** The catalog family */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|CATALOG_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|CATALOG_FAMILY_STR
argument_list|)
decl_stmt|;
comment|/** The replication barrier family as a string*/
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_BARRIER_FAMILY_STR
init|=
literal|"rep_barrier"
decl_stmt|;
comment|/** The replication barrier family */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|REPLICATION_BARRIER_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|REPLICATION_BARRIER_FAMILY_STR
argument_list|)
decl_stmt|;
comment|/** The replication position family as a string*/
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_POSITION_FAMILY_STR
init|=
literal|"rep_position"
decl_stmt|;
comment|/** The replication position family */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|REPLICATION_POSITION_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|REPLICATION_POSITION_FAMILY_STR
argument_list|)
decl_stmt|;
comment|/** The replication meta family as a string*/
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_META_FAMILY_STR
init|=
literal|"rep_meta"
decl_stmt|;
comment|/** The replication meta family */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|REPLICATION_META_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|REPLICATION_META_FAMILY_STR
argument_list|)
decl_stmt|;
comment|/** The RegionInfo qualifier as a string */
specifier|public
specifier|static
specifier|final
name|String
name|REGIONINFO_QUALIFIER_STR
init|=
literal|"regioninfo"
decl_stmt|;
comment|/** The regioninfo column qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|REGIONINFO_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|REGIONINFO_QUALIFIER_STR
argument_list|)
decl_stmt|;
comment|/** The server column qualifier */
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_QUALIFIER_STR
init|=
literal|"server"
decl_stmt|;
comment|/** The server column qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|SERVER_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SERVER_QUALIFIER_STR
argument_list|)
decl_stmt|;
comment|/** The startcode column qualifier */
specifier|public
specifier|static
specifier|final
name|String
name|STARTCODE_QUALIFIER_STR
init|=
literal|"serverstartcode"
decl_stmt|;
comment|/** The startcode column qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|STARTCODE_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|STARTCODE_QUALIFIER_STR
argument_list|)
decl_stmt|;
comment|/** The open seqnum column qualifier */
specifier|public
specifier|static
specifier|final
name|String
name|SEQNUM_QUALIFIER_STR
init|=
literal|"seqnumDuringOpen"
decl_stmt|;
comment|/** The open seqnum column qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|SEQNUM_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SEQNUM_QUALIFIER_STR
argument_list|)
decl_stmt|;
comment|/** The state column qualifier */
specifier|public
specifier|static
specifier|final
name|String
name|STATE_QUALIFIER_STR
init|=
literal|"state"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|STATE_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|STATE_QUALIFIER_STR
argument_list|)
decl_stmt|;
comment|/**    * The serverName column qualifier. Its the server where the region is    * transitioning on, while column server is the server where the region is    * opened on. They are the same when the region is in state OPEN.    */
specifier|public
specifier|static
specifier|final
name|String
name|SERVERNAME_QUALIFIER_STR
init|=
literal|"sn"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|SERVERNAME_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SERVERNAME_QUALIFIER_STR
argument_list|)
decl_stmt|;
comment|/** The lower-half split region column qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|SPLITA_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"splitA"
argument_list|)
decl_stmt|;
comment|/** The upper-half split region column qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|SPLITB_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"splitB"
argument_list|)
decl_stmt|;
comment|/** The lower-half merge region column qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|MERGEA_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mergeA"
argument_list|)
decl_stmt|;
comment|/** The upper-half merge region column qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|MERGEB_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mergeB"
argument_list|)
decl_stmt|;
comment|/** The catalog family as a string*/
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_FAMILY_STR
init|=
literal|"table"
decl_stmt|;
comment|/** The catalog family */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLE_FAMILY_STR
argument_list|)
decl_stmt|;
comment|/** The serialized table state qualifier */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_STATE_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
comment|/**    * The meta table version column qualifier.    * We keep current version of the meta table in this column in<code>-ROOT-</code>    * table: i.e. in the 'info:v' column.    */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|META_VERSION_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
decl_stmt|;
comment|/**    * The current version of the meta table.    * - pre-hbase 0.92.  There is no META_VERSION column in the root table    * in this case. The meta has HTableDescriptor serialized into the HRegionInfo;    * - version 0 is 0.92 and 0.94. Meta data has serialized HRegionInfo's using    * Writable serialization, and HRegionInfo's does not contain HTableDescriptors.    * - version 1 for 0.96+ keeps HRegionInfo data structures, but changes the    * byte[] serialization from Writables to Protobuf.    * See HRegionInfo.VERSION    */
specifier|public
specifier|static
specifier|final
name|short
name|META_VERSION
init|=
literal|1
decl_stmt|;
comment|// Other constants
comment|/**    * An empty instance.    */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTE_ARRAY
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ByteBuffer
name|EMPTY_BYTE_BUFFER
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
comment|/**    * Used by scanners, etc when they want to start at the beginning of a region    */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_START_ROW
init|=
name|EMPTY_BYTE_ARRAY
decl_stmt|;
comment|/**    * Last row in a table.    */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_END_ROW
init|=
name|EMPTY_START_ROW
decl_stmt|;
comment|/**     * Used by scanners and others when they're trying to detect the end of a     * table     */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|LAST_ROW
init|=
name|EMPTY_BYTE_ARRAY
decl_stmt|;
comment|/**    * Max length a row can have because of the limitation in TFile.    */
specifier|public
specifier|static
specifier|final
name|int
name|MAX_ROW_LENGTH
init|=
name|Short
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Timestamp to use when we want to refer to the latest cell.    * This is the timestamp sent by clients when no timestamp is specified on    * commit.    */
specifier|public
specifier|static
specifier|final
name|long
name|LATEST_TIMESTAMP
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Timestamp to use when we want to refer to the oldest cell.    * Special! Used in fake Cells only. Should never be the timestamp on an actual Cell returned to    * a client.    * @deprecated Should not be public since hbase-1.3.0. For internal use only. Move internal to    * Scanners flagged as special timestamp value never to be returned as timestamp on a Cell.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|long
name|OLDEST_TIMESTAMP
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
comment|/**    * LATEST_TIMESTAMP in bytes form    */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|LATEST_TIMESTAMP_BYTES
init|=
block|{
comment|// big-endian
call|(
name|byte
call|)
argument_list|(
name|LATEST_TIMESTAMP
operator|>>>
literal|56
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|LATEST_TIMESTAMP
operator|>>>
literal|48
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|LATEST_TIMESTAMP
operator|>>>
literal|40
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|LATEST_TIMESTAMP
operator|>>>
literal|32
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|LATEST_TIMESTAMP
operator|>>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|LATEST_TIMESTAMP
operator|>>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|LATEST_TIMESTAMP
operator|>>>
literal|8
argument_list|)
block|,
operator|(
name|byte
operator|)
name|LATEST_TIMESTAMP
block|,   }
decl_stmt|;
comment|/**    * Define for 'return-all-versions'.    */
specifier|public
specifier|static
specifier|final
name|int
name|ALL_VERSIONS
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Unlimited time-to-live.    */
comment|//  public static final int FOREVER = -1;
specifier|public
specifier|static
specifier|final
name|int
name|FOREVER
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Seconds in a week    */
specifier|public
specifier|static
specifier|final
name|int
name|WEEK_IN_SECONDS
init|=
literal|7
operator|*
literal|24
operator|*
literal|3600
decl_stmt|;
comment|/**    * Seconds in a day, hour and minute    */
specifier|public
specifier|static
specifier|final
name|int
name|DAY_IN_SECONDS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HOUR_IN_SECONDS
init|=
literal|60
operator|*
literal|60
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MINUTE_IN_SECONDS
init|=
literal|60
decl_stmt|;
comment|//TODO: although the following are referenced widely to format strings for
comment|//      the shell. They really aren't a part of the public API. It would be
comment|//      nice if we could put them somewhere where they did not need to be
comment|//      public. They could have package visibility
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"NAME"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VERSIONS
init|=
literal|"VERSIONS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IN_MEMORY
init|=
literal|"IN_MEMORY"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|METADATA
init|=
literal|"METADATA"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION
init|=
literal|"CONFIGURATION"
decl_stmt|;
comment|/**    * Retrying we multiply hbase.client.pause setting by what we have in this array until we    * run out of array items.  Retries beyond this use the last number in the array.  So, for    * example, if hbase.client.pause is 1 second, and maximum retries count    * hbase.client.retries.number is 10, we will retry at the following intervals:    * 1, 2, 3, 5, 10, 20, 40, 100, 100, 100.    * With 100ms, a back-off of 200 means 20s    */
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|RETRY_BACKOFF
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|10
block|,
literal|20
block|,
literal|40
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|200
block|,
literal|200
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REGION_IMPL
init|=
literal|"hbase.hregion.impl"
decl_stmt|;
comment|/** modifyTable op for replacing the table descriptor */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
enum|enum
name|Modify
block|{
name|CLOSE_REGION
block|,
name|TABLE_COMPACT
block|,
name|TABLE_FLUSH
block|,
name|TABLE_MAJOR_COMPACT
block|,
name|TABLE_SET_HTD
block|,
name|TABLE_SPLIT
block|}
comment|/**    * Scope tag for locally scoped data.    * This data will not be replicated.    */
specifier|public
specifier|static
specifier|final
name|int
name|REPLICATION_SCOPE_LOCAL
init|=
literal|0
decl_stmt|;
comment|/**    * Scope tag for globally scoped data.    * This data will be replicated to all peers.    */
specifier|public
specifier|static
specifier|final
name|int
name|REPLICATION_SCOPE_GLOBAL
init|=
literal|1
decl_stmt|;
comment|/**    * Scope tag for serially scoped data    * This data will be replicated to all peers by the order of sequence id.    */
specifier|public
specifier|static
specifier|final
name|int
name|REPLICATION_SCOPE_SERIAL
init|=
literal|2
decl_stmt|;
comment|/**    * Default cluster ID, cannot be used to identify a cluster so a key with    * this value means it wasn't meant for replication.    */
specifier|public
specifier|static
specifier|final
name|UUID
name|DEFAULT_CLUSTER_ID
init|=
operator|new
name|UUID
argument_list|(
literal|0L
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
comment|/**    * Parameter name for maximum number of bytes returned when calling a scanner's next method.    * Controlled by the client.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY
init|=
literal|"hbase.client.scanner.max.result.size"
decl_stmt|;
comment|/**    * Parameter name for maximum number of bytes returned when calling a scanner's next method.    * Controlled by the server.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SERVER_SCANNER_MAX_RESULT_SIZE_KEY
init|=
literal|"hbase.server.scanner.max.result.size"
decl_stmt|;
comment|/**    * Maximum number of bytes returned when calling a scanner's next method.    * Note that when a single row is larger than this limit the row is still    * returned completely.    *    * The default value is 2MB.    */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/**    * Maximum number of bytes returned when calling a scanner's next method.    * Note that when a single row is larger than this limit the row is still    * returned completely.    * Safety setting to protect the region server.    *    * The default value is 100MB. (a client would rarely request larger chunks on purpose)    */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_HBASE_SERVER_SCANNER_MAX_RESULT_SIZE
init|=
literal|100
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/**    * Parameter name for client pause value, used mostly as value to wait    * before running a retry of a failed get, region lookup, etc.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_PAUSE
init|=
literal|"hbase.client.pause"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_CLIENT_PAUSE}.    */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_HBASE_CLIENT_PAUSE
init|=
literal|100
decl_stmt|;
comment|/**    * Parameter name for client pause value for special case such as call queue too big, etc.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_PAUSE_FOR_CQTBE
init|=
literal|"hbase.client.pause.cqtbe"
decl_stmt|;
comment|/**    * The maximum number of concurrent connections the client will maintain.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_MAX_TOTAL_TASKS
init|=
literal|"hbase.client.max.total.tasks"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_CLIENT_MAX_TOTAL_TASKS}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_CLIENT_MAX_TOTAL_TASKS
init|=
literal|100
decl_stmt|;
comment|/**    * The maximum number of concurrent connections the client will maintain to a single    * RegionServer.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_MAX_PERSERVER_TASKS
init|=
literal|"hbase.client.max.perserver.tasks"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_CLIENT_MAX_PERSERVER_TASKS}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_CLIENT_MAX_PERSERVER_TASKS
init|=
literal|2
decl_stmt|;
comment|/**    * The maximum number of concurrent connections the client will maintain to a single    * Region.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_MAX_PERREGION_TASKS
init|=
literal|"hbase.client.max.perregion.tasks"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_CLIENT_MAX_PERREGION_TASKS}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_CLIENT_MAX_PERREGION_TASKS
init|=
literal|1
decl_stmt|;
comment|/**    * The maximum number of concurrent pending RPC requests for one server in process level.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_PERSERVER_REQUESTS_THRESHOLD
init|=
literal|"hbase.client.perserver.requests.threshold"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_CLIENT_PERSERVER_REQUESTS_THRESHOLD}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_CLIENT_PERSERVER_REQUESTS_THRESHOLD
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Parameter name for server pause value, used mostly as value to wait before    * running a retry of a failed operation.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SERVER_PAUSE
init|=
literal|"hbase.server.pause"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_SERVER_PAUSE}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_SERVER_PAUSE
init|=
literal|1000
decl_stmt|;
comment|/**    * Parameter name for maximum retries, used as maximum for all retryable    * operations such as fetching of the root region from root region server,    * getting a cell's value, starting a row update, etc.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_RETRIES_NUMBER
init|=
literal|"hbase.client.retries.number"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_CLIENT_RETRIES_NUMBER}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
init|=
literal|31
decl_stmt|;
comment|/**    * Parameter name to set the default scanner caching for all clients.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_SCANNER_CACHING
init|=
literal|"hbase.client.scanner.caching"
decl_stmt|;
comment|/**    * Default value for {@link #HBASE_CLIENT_SCANNER_CACHING}    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_CLIENT_SCANNER_CACHING
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * Parameter name for number of rows that will be fetched when calling next on    * a scanner if it is not served from memory. Higher caching values will    * enable faster scanners but will eat up more memory and some calls of next    * may take longer and longer times when the cache is empty.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_META_SCANNER_CACHING
init|=
literal|"hbase.meta.scanner.caching"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_META_SCANNER_CACHING}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_META_SCANNER_CACHING
init|=
literal|100
decl_stmt|;
comment|/**    * Parameter name for number of versions, kept by meta table.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_META_VERSIONS
init|=
literal|"hbase.meta.versions"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_META_VERSIONS}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_META_VERSIONS
init|=
literal|3
decl_stmt|;
comment|/**    * Parameter name for number of versions, kept by meta table.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_META_BLOCK_SIZE
init|=
literal|"hbase.meta.blocksize"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_META_BLOCK_SIZE}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_META_BLOCK_SIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
comment|/**    * Parameter name for unique identifier for this {@link org.apache.hadoop.conf.Configuration}    * instance. If there are two or more {@link org.apache.hadoop.conf.Configuration} instances that,    * for all intents and purposes, are the same except for their instance ids, then they will not be    * able to share the same org.apache.hadoop.hbase.client.HConnection instance. On the other hand,    * even if the instance ids are the same, it could result in non-shared    * org.apache.hadoop.hbase.client.HConnection instances if some of the other connection parameters    * differ.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_INSTANCE_ID
init|=
literal|"hbase.client.instance.id"
decl_stmt|;
comment|/**    * The client scanner timeout period in milliseconds.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
init|=
literal|"hbase.client.scanner.timeout.period"
decl_stmt|;
comment|/**    * Use {@link #HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD} instead.    * @deprecated This config option is deprecated. Will be removed at later releases after 0.96.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_REGIONSERVER_LEASE_PERIOD_KEY
init|=
literal|"hbase.regionserver.lease.period"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD}.    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
init|=
literal|60000
decl_stmt|;
comment|/**    * timeout for each RPC    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_RPC_TIMEOUT_KEY
init|=
literal|"hbase.rpc.timeout"
decl_stmt|;
comment|/**    * timeout for each read RPC    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_RPC_READ_TIMEOUT_KEY
init|=
literal|"hbase.rpc.read.timeout"
decl_stmt|;
comment|/**    * timeout for each write RPC    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_RPC_WRITE_TIMEOUT_KEY
init|=
literal|"hbase.rpc.write.timeout"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_RPC_TIMEOUT_KEY}    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_RPC_TIMEOUT
init|=
literal|60000
decl_stmt|;
comment|/**    * timeout for short operation RPC    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_RPC_SHORTOPERATION_TIMEOUT_KEY
init|=
literal|"hbase.rpc.shortoperation.timeout"
decl_stmt|;
comment|/**    * Default value of {@link #HBASE_RPC_SHORTOPERATION_TIMEOUT_KEY}    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HBASE_RPC_SHORTOPERATION_TIMEOUT
init|=
literal|10000
decl_stmt|;
comment|/**    * Value indicating the server name was saved with no sequence number.    */
specifier|public
specifier|static
specifier|final
name|long
name|NO_SEQNUM
init|=
operator|-
literal|1
decl_stmt|;
comment|/*    * cluster replication constants.    */
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_SOURCE_SERVICE_CLASSNAME
init|=
literal|"hbase.replication.source.service"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_SINK_SERVICE_CLASSNAME
init|=
literal|"hbase.replication.sink.service"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_SERVICE_CLASSNAME_DEFAULT
init|=
literal|"org.apache.hadoop.hbase.replication.regionserver.Replication"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_BULKLOAD_ENABLE_KEY
init|=
literal|"hbase.replication.bulkload.enabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|REPLICATION_BULKLOAD_ENABLE_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/** Replication cluster id of source cluster which uniquely identifies itself with peer cluster */
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_CLUSTER_ID
init|=
literal|"hbase.replication.cluster.id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_SERIALLY_WAITING_KEY
init|=
literal|"hbase.serial.replication.waitingMs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|REPLICATION_SERIALLY_WAITING_DEFAULT
init|=
literal|10000
decl_stmt|;
comment|/**    * Max total size of buffered entries in all replication peers. It will prevent server getting    * OOM if there are many peers. Default value is 256MB which is four times to default    * replication.source.size.capacity.    */
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_SOURCE_TOTAL_BUFFER_KEY
init|=
literal|"replication.total.buffer.quota"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|REPLICATION_SOURCE_TOTAL_BUFFER_DFAULT
init|=
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/**    * Directory where the source cluster file system client configuration are placed which is used by    * sink cluster to copy HFiles from source cluster file system    */
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_CONF_DIR
init|=
literal|"hbase.replication.conf.dir"
decl_stmt|;
comment|/** Maximum time to retry for a failed bulk load request */
specifier|public
specifier|static
specifier|final
name|String
name|BULKLOAD_MAX_RETRIES_NUMBER
init|=
literal|"hbase.bulkload.retries.number"
decl_stmt|;
comment|/** HBCK special code name used as server name when manipulating ZK nodes */
specifier|public
specifier|static
specifier|final
name|String
name|HBCK_CODE_NAME
init|=
literal|"HBCKServerName"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_FOR_HOSTNAME_SEEN_BY_MASTER
init|=
literal|"hbase.regionserver.hostname.seen.by.master"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_MASTER_LOGCLEANER_PLUGINS
init|=
literal|"hbase.master.logcleaner.plugins"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_REGION_SPLIT_POLICY_KEY
init|=
literal|"hbase.regionserver.region.split.policy"
decl_stmt|;
comment|/** Whether nonces are enabled; default is true. */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_RS_NONCES_ENABLED
init|=
literal|"hbase.regionserver.nonces.enabled"
decl_stmt|;
comment|/**    * Configuration key for the size of the block cache    */
specifier|public
specifier|static
specifier|final
name|String
name|HFILE_BLOCK_CACHE_SIZE_KEY
init|=
literal|"hfile.block.cache.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|HFILE_BLOCK_CACHE_SIZE_DEFAULT
init|=
literal|0.4f
decl_stmt|;
comment|/*     * Minimum percentage of free heap necessary for a successful cluster startup.     */
specifier|public
specifier|static
specifier|final
name|float
name|HBASE_CLUSTER_MINIMUM_MEMORY_THRESHOLD
init|=
literal|0.2f
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|CP_HTD_ATTR_KEY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^coprocessor\\$([0-9]+)$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
comment|/**    *<pre>    * Pattern that matches a coprocessor specification. Form is:    * {@code<coprocessor jar file location> '|'<class name> ['|'<priority> ['|'<arguments>]]}    * where arguments are {@code<KEY> '='<VALUE> [,...]}    * For example: {@code hdfs:///foo.jar|com.foo.FooRegionObserver|1001|arg1=1,arg2=2}    *</pre>    */
specifier|public
specifier|static
specifier|final
name|Pattern
name|CP_HTD_ATTR_VALUE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(^[^\\|]*)\\|([^\\|]+)\\|[\\s]*([\\d]*)[\\s]*(\\|.*)?$"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CP_HTD_ATTR_VALUE_PARAM_KEY_PATTERN
init|=
literal|"[^=,]+"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CP_HTD_ATTR_VALUE_PARAM_VALUE_PATTERN
init|=
literal|"[^,]+"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|CP_HTD_ATTR_VALUE_PARAM_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"("
operator|+
name|CP_HTD_ATTR_VALUE_PARAM_KEY_PATTERN
operator|+
literal|")=("
operator|+
name|CP_HTD_ATTR_VALUE_PARAM_VALUE_PATTERN
operator|+
literal|"),?"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CP_HTD_ATTR_INCLUSION_KEY
init|=
literal|"hbase.coprocessor.classloader.included.classes"
decl_stmt|;
comment|/** The delay when re-trying a socket operation in a loop (HBASE-4712) */
specifier|public
specifier|static
specifier|final
name|int
name|SOCKET_RETRY_WAIT_MS
init|=
literal|200
decl_stmt|;
comment|/** Host name of the local machine */
specifier|public
specifier|static
specifier|final
name|String
name|LOCALHOST
init|=
literal|"localhost"
decl_stmt|;
comment|/**    * If this parameter is set to true, then hbase will read    * data and then verify checksums. Checksum verification    * inside hdfs will be switched off.  However, if the hbase-checksum    * verification fails, then it will switch back to using    * hdfs checksums for verifiying data that is being read from storage.    *    * If this parameter is set to false, then hbase will not    * verify any checksums, instead it will depend on checksum verification    * being done in the hdfs client.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CHECKSUM_VERIFICATION
init|=
literal|"hbase.regionserver.checksum.verify"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOCALHOST_IP
init|=
literal|"127.0.0.1"
decl_stmt|;
comment|/** Conf key that enables unflushed WAL edits directly being replayed to region servers */
specifier|public
specifier|static
specifier|final
name|String
name|DISTRIBUTED_LOG_REPLAY_KEY
init|=
literal|"hbase.master.distributed.log.replay"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_DISTRIBUTED_LOG_REPLAY_CONFIG
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DISALLOW_WRITES_IN_RECOVERING
init|=
literal|"hbase.regionserver.disallow.writes.when.recovering"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_DISALLOW_WRITES_IN_RECOVERING_CONFIG
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SERVER_HANDLER_COUNT
init|=
literal|"hbase.regionserver.handler.count"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGION_SERVER_HANDLER_COUNT
init|=
literal|30
decl_stmt|;
comment|/*    * REGION_SERVER_HANDLER_ABORT_ON_ERROR_PERCENT:    * -1  => Disable aborting    * 0   => Abort if even a single handler has died    * 0.x => Abort only when this percent of handlers have died    * 1   => Abort only all of the handers have died    */
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SERVER_HANDLER_ABORT_ON_ERROR_PERCENT
init|=
literal|"hbase.regionserver.handler.abort.on.error.percent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_REGION_SERVER_HANDLER_ABORT_ON_ERROR_PERCENT
init|=
literal|0.5
decl_stmt|;
comment|//High priority handlers to deal with admin requests and system table operation requests
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT
init|=
literal|"hbase.regionserver.metahandler.count"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT
init|=
literal|20
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SERVER_REPLICATION_HANDLER_COUNT
init|=
literal|"hbase.regionserver.replication.handler.count"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGION_SERVER_REPLICATION_HANDLER_COUNT
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MASTER_HANDLER_COUNT
init|=
literal|"hbase.master.handler.count"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MASTER_HANLDER_COUNT
init|=
literal|25
decl_stmt|;
comment|/** Conf key that specifies timeout value to wait for a region ready */
specifier|public
specifier|static
specifier|final
name|String
name|LOG_REPLAY_WAIT_REGION_TIMEOUT
init|=
literal|"hbase.master.log.replay.wait.region.timeout"
decl_stmt|;
comment|/** Conf key for enabling meta replication */
specifier|public
specifier|static
specifier|final
name|String
name|USE_META_REPLICAS
init|=
literal|"hbase.meta.replicas.use"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_USE_META_REPLICAS
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|META_REPLICAS_NUM
init|=
literal|"hbase.meta.replica.count"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_META_REPLICA_NUM
init|=
literal|1
decl_stmt|;
comment|/**    * The name of the configuration parameter that specifies    * the number of bytes in a newly created checksum chunk.    */
specifier|public
specifier|static
specifier|final
name|String
name|BYTES_PER_CHECKSUM
init|=
literal|"hbase.hstore.bytes.per.checksum"
decl_stmt|;
comment|/**    * The name of the configuration parameter that specifies    * the name of an algorithm that is used to compute checksums    * for newly created blocks.    */
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUM_TYPE_NAME
init|=
literal|"hbase.hstore.checksum.algorithm"
decl_stmt|;
comment|/** Enable file permission modification from standard hbase */
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_DATA_FILE_UMASK
init|=
literal|"hbase.data.umask.enable"
decl_stmt|;
comment|/** File permission umask to use when creating hbase data files */
specifier|public
specifier|static
specifier|final
name|String
name|DATA_FILE_UMASK_KEY
init|=
literal|"hbase.data.umask"
decl_stmt|;
comment|/** Configuration name of WAL Compression */
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_WAL_COMPRESSION
init|=
literal|"hbase.regionserver.wal.enablecompression"
decl_stmt|;
comment|/** Configuration name of WAL storage policy    * Valid values are: HOT, COLD, WARM, ALL_SSD, ONE_SSD, LAZY_PERSIST    * See http://hadoop.apache.org/docs/r2.7.3/hadoop-project-dist/hadoop-hdfs/ArchivalStorage.html*/
specifier|public
specifier|static
specifier|final
name|String
name|WAL_STORAGE_POLICY
init|=
literal|"hbase.wal.storage.policy"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_WAL_STORAGE_POLICY
init|=
literal|"HOT"
decl_stmt|;
comment|/** Region in Transition metrics threshold time */
specifier|public
specifier|static
specifier|final
name|String
name|METRICS_RIT_STUCK_WARNING_THRESHOLD
init|=
literal|"hbase.metrics.rit.stuck.warning.threshold"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOAD_BALANCER_SLOP_KEY
init|=
literal|"hbase.regions.slop"
decl_stmt|;
comment|/** delimiter used between portions of a region name */
specifier|public
specifier|static
specifier|final
name|int
name|DELIMITER
init|=
literal|','
decl_stmt|;
comment|/**    * QOS attributes: these attributes are used to demarcate RPC call processing    * by different set of handlers. For example, HIGH_QOS tagged methods are    * handled by high priority handlers.    */
comment|// normal_QOS< replication_QOS< replay_QOS< QOS_threshold< admin_QOS< high_QOS
specifier|public
specifier|static
specifier|final
name|int
name|PRIORITY_UNSET
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NORMAL_QOS
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|REPLICATION_QOS
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|REPLAY_QOS
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|QOS_THRESHOLD
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ADMIN_QOS
init|=
literal|100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HIGH_QOS
init|=
literal|200
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SYSTEMTABLE_QOS
init|=
name|HIGH_QOS
decl_stmt|;
comment|/** Directory under /hbase where archived hfiles are stored */
specifier|public
specifier|static
specifier|final
name|String
name|HFILE_ARCHIVE_DIRECTORY
init|=
literal|"archive"
decl_stmt|;
comment|/**    * Name of the directory to store all snapshots. See SnapshotDescriptionUtils for    * remaining snapshot constants; this is here to keep HConstants dependencies at a minimum and    * uni-directional.    */
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_DIR_NAME
init|=
literal|".hbase-snapshot"
decl_stmt|;
comment|/* Name of old snapshot directory. See HBASE-8352 for details on why it needs to be renamed */
specifier|public
specifier|static
specifier|final
name|String
name|OLD_SNAPSHOT_DIR_NAME
init|=
literal|".snapshot"
decl_stmt|;
comment|/** Temporary directory used for table creation and deletion */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_TEMP_DIRECTORY
init|=
literal|".tmp"
decl_stmt|;
comment|/**    * The period (in milliseconds) between computing region server point in time metrics    */
specifier|public
specifier|static
specifier|final
name|String
name|REGIONSERVER_METRICS_PERIOD
init|=
literal|"hbase.regionserver.metrics.period"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_REGIONSERVER_METRICS_PERIOD
init|=
literal|5000
decl_stmt|;
comment|/** Directories that are not HBase table directories */
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|HBASE_NON_TABLE_DIRS
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|HBCK_SIDELINEDIR_NAME
block|,
name|HBASE_TEMP_DIRECTORY
block|,
name|MIGRATION_NAME
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Directories that are not HBase user table directories */
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|HBASE_NON_USER_TABLE_DIRS
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|String
index|[]
operator|)
name|ArrayUtils
operator|.
name|addAll
argument_list|(
operator|new
name|String
index|[]
block|{
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
block|}
argument_list|,
name|HBASE_NON_TABLE_DIRS
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Health script related settings. */
specifier|public
specifier|static
specifier|final
name|String
name|HEALTH_SCRIPT_LOC
init|=
literal|"hbase.node.health.script.location"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEALTH_SCRIPT_TIMEOUT
init|=
literal|"hbase.node.health.script.timeout"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEALTH_CHORE_WAKE_FREQ
init|=
literal|"hbase.node.health.script.frequency"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_HEALTH_SCRIPT_TIMEOUT
init|=
literal|60000
decl_stmt|;
comment|/**    * The maximum number of health check failures a server can encounter consecutively.    */
specifier|public
specifier|static
specifier|final
name|String
name|HEALTH_FAILURE_THRESHOLD
init|=
literal|"hbase.node.health.failure.threshold"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HEALTH_FAILURE_THRESHOLD
init|=
literal|3
decl_stmt|;
comment|/**    * Setting to activate, or not, the publication of the status by the master. Default    *  notification is by a multicast message.    */
specifier|public
specifier|static
specifier|final
name|String
name|STATUS_PUBLISHED
init|=
literal|"hbase.status.published"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|STATUS_PUBLISHED_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**    * IP to use for the multicast status messages between the master and the clients.    * The default address is chosen as one among others within the ones suitable for multicast    * messages.    */
specifier|public
specifier|static
specifier|final
name|String
name|STATUS_MULTICAST_ADDRESS
init|=
literal|"hbase.status.multicast.address.ip"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_STATUS_MULTICAST_ADDRESS
init|=
literal|"226.1.1.3"
decl_stmt|;
comment|/**    * The address to use for binding the local socket for receiving multicast. Defaults to    * 0.0.0.0.    * @see<a href="https://issues.apache.org/jira/browse/HBASE-9961">HBASE-9961</a>    */
specifier|public
specifier|static
specifier|final
name|String
name|STATUS_MULTICAST_BIND_ADDRESS
init|=
literal|"hbase.status.multicast.bind.address.ip"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_STATUS_MULTICAST_BIND_ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
comment|/**    * The port to use for the multicast messages.    */
specifier|public
specifier|static
specifier|final
name|String
name|STATUS_MULTICAST_PORT
init|=
literal|"hbase.status.multicast.address.port"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_STATUS_MULTICAST_PORT
init|=
literal|16100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|NO_NONCE
init|=
literal|0
decl_stmt|;
comment|/** Default cipher for encryption */
specifier|public
specifier|static
specifier|final
name|String
name|CIPHER_AES
init|=
literal|"AES"
decl_stmt|;
comment|/** Configuration key for the crypto algorithm provider, a class name */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_CIPHERPROVIDER_CONF_KEY
init|=
literal|"hbase.crypto.cipherprovider"
decl_stmt|;
comment|/** Configuration key for the crypto key provider, a class name */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_KEYPROVIDER_CONF_KEY
init|=
literal|"hbase.crypto.keyprovider"
decl_stmt|;
comment|/** Configuration key for the crypto key provider parameters */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_KEYPROVIDER_PARAMETERS_KEY
init|=
literal|"hbase.crypto.keyprovider.parameters"
decl_stmt|;
comment|/** Configuration key for the name of the master key for the cluster, a string */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_MASTERKEY_NAME_CONF_KEY
init|=
literal|"hbase.crypto.master.key.name"
decl_stmt|;
comment|/** Configuration key for the name of the alternate master key for the cluster, a string */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_MASTERKEY_ALTERNATE_NAME_CONF_KEY
init|=
literal|"hbase.crypto.master.alternate.key.name"
decl_stmt|;
comment|/** Configuration key for the algorithm to use when encrypting the WAL, a string */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_WAL_ALGORITHM_CONF_KEY
init|=
literal|"hbase.crypto.wal.algorithm"
decl_stmt|;
comment|/** Configuration key for the name of the master WAL encryption key for the cluster, a string */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_WAL_KEY_NAME_CONF_KEY
init|=
literal|"hbase.crypto.wal.key.name"
decl_stmt|;
comment|/** Configuration key for the algorithm used for creating jks key, a string */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_KEY_ALGORITHM_CONF_KEY
init|=
literal|"hbase.crypto.key.algorithm"
decl_stmt|;
comment|/** Configuration key for the name of the alternate cipher algorithm for the cluster, a string */
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_ALTERNATE_KEY_ALGORITHM_CONF_KEY
init|=
literal|"hbase.crypto.alternate.key.algorithm"
decl_stmt|;
comment|/** Configuration key for enabling WAL encryption, a boolean */
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_WAL_ENCRYPTION
init|=
literal|"hbase.regionserver.wal.encryption"
decl_stmt|;
comment|/** Configuration key for setting RPC codec class name */
specifier|public
specifier|static
specifier|final
name|String
name|RPC_CODEC_CONF_KEY
init|=
literal|"hbase.client.rpc.codec"
decl_stmt|;
comment|/** Configuration key for setting replication codec class name */
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_CODEC_CONF_KEY
init|=
literal|"hbase.replication.rpc.codec"
decl_stmt|;
comment|/** Maximum number of threads used by the replication source for shipping edits to the sinks */
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_SOURCE_MAXTHREADS_KEY
init|=
literal|"hbase.replication.source.maxthreads"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|REPLICATION_SOURCE_MAXTHREADS_DEFAULT
init|=
literal|10
decl_stmt|;
comment|/** Config for pluggable consensus provider */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_COORDINATED_STATE_MANAGER_CLASS
init|=
literal|"hbase.coordinated.state.manager.class"
decl_stmt|;
comment|/** Configuration key for SplitLog manager timeout */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SPLITLOG_MANAGER_TIMEOUT
init|=
literal|"hbase.splitlog.manager.timeout"
decl_stmt|;
comment|/**    * Configuration keys for Bucket cache    */
comment|// TODO moving these bucket cache implementation specific configs to this level is violation of
comment|// encapsulation. But as these has to be referred from hbase-common and bucket cache
comment|// sits in hbase-server, there were no other go! Can we move the cache implementation to
comment|// hbase-common?
comment|/**    * Current ioengine options in include: heap, offheap and file:PATH (where PATH is the path    * to the file that will host the file-based cache.  See BucketCache#getIOEngineFromName() for    * list of supported ioengine options.    *<p>Set this option and a non-zero {@link #BUCKET_CACHE_SIZE_KEY} to enable bucket cache.    */
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_CACHE_IOENGINE_KEY
init|=
literal|"hbase.bucketcache.ioengine"
decl_stmt|;
comment|/**    * When using bucket cache, this is a float that EITHER represents a percentage of total heap    * memory size to give to the cache (if&lt; 1.0) OR, it is the capacity in    * megabytes of the cache.    */
specifier|public
specifier|static
specifier|final
name|String
name|BUCKET_CACHE_SIZE_KEY
init|=
literal|"hbase.bucketcache.size"
decl_stmt|;
comment|/**    * HConstants for fast fail on the client side follow    */
comment|/**    * Config for enabling/disabling the fast fail mode.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_FAST_FAIL_MODE_ENABLED
init|=
literal|"hbase.client.fast.fail.mode.enabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|HBASE_CLIENT_ENABLE_FAST_FAIL_MODE_DEFAULT
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_FAST_FAIL_THREASHOLD_MS
init|=
literal|"hbase.client.fastfail.threshold"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|HBASE_CLIENT_FAST_FAIL_THREASHOLD_MS_DEFAULT
init|=
literal|60000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_FAST_FAIL_CLEANUP_MS_DURATION_MS
init|=
literal|"hbase.client.fast.fail.cleanup.duration"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|HBASE_CLIENT_FAST_FAIL_CLEANUP_DURATION_MS_DEFAULT
init|=
literal|600000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_FAST_FAIL_INTERCEPTOR_IMPL
init|=
literal|"hbase.client.fast.fail.interceptor.impl"
decl_stmt|;
comment|/** Config key for if the server should send backpressure and if the client should listen to    * that backpressure from the server */
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_CLIENT_BACKPRESSURE
init|=
literal|"hbase.client.backpressure.enabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ENABLE_CLIENT_BACKPRESSURE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEAP_OCCUPANCY_LOW_WATERMARK_KEY
init|=
literal|"hbase.heap.occupancy.low_water_mark"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_HEAP_OCCUPANCY_LOW_WATERMARK
init|=
literal|0.95f
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEAP_OCCUPANCY_HIGH_WATERMARK_KEY
init|=
literal|"hbase.heap.occupancy.high_water_mark"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_HEAP_OCCUPANCY_HIGH_WATERMARK
init|=
literal|0.98f
decl_stmt|;
comment|/**    * The max number of threads used for splitting storefiles in parallel during    * the region split process.    */
specifier|public
specifier|static
specifier|final
name|String
name|REGION_SPLIT_THREADS_MAX
init|=
literal|"hbase.regionserver.region.split.threads.max"
decl_stmt|;
comment|/** Canary config keys */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CANARY_WRITE_DATA_TTL_KEY
init|=
literal|"hbase.canary.write.data.ttl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CANARY_WRITE_PERSERVER_REGIONS_LOWERLIMIT_KEY
init|=
literal|"hbase.canary.write.perserver.regions.lowerLimit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CANARY_WRITE_PERSERVER_REGIONS_UPPERLIMIT_KEY
init|=
literal|"hbase.canary.write.perserver.regions.upperLimit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CANARY_WRITE_VALUE_SIZE_KEY
init|=
literal|"hbase.canary.write.value.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CANARY_WRITE_TABLE_CHECK_PERIOD_KEY
init|=
literal|"hbase.canary.write.table.check.period"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CANARY_READ_RAW_SCAN_KEY
init|=
literal|"hbase.canary.read.raw.enabled"
decl_stmt|;
comment|/**    * Configuration keys for programmatic JAAS configuration for secured ZK interaction    */
specifier|public
specifier|static
specifier|final
name|String
name|ZK_CLIENT_KEYTAB_FILE
init|=
literal|"hbase.zookeeper.client.keytab.file"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZK_CLIENT_KERBEROS_PRINCIPAL
init|=
literal|"hbase.zookeeper.client.kerberos.principal"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZK_SERVER_KEYTAB_FILE
init|=
literal|"hbase.zookeeper.server.keytab.file"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZK_SERVER_KERBEROS_PRINCIPAL
init|=
literal|"hbase.zookeeper.server.kerberos.principal"
decl_stmt|;
comment|/** Config key for hbase temporary directory in hdfs */
specifier|public
specifier|static
specifier|final
name|String
name|TEMPORARY_FS_DIRECTORY_KEY
init|=
literal|"hbase.fs.tmp.dir"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TEMPORARY_HDFS_DIRECTORY
init|=
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
operator|+
literal|"/hbase-staging"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_RESTORE_TAKE_FAILSAFE_SNAPSHOT
init|=
literal|"hbase.snapshot.restore.take.failsafe.snapshot"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SNAPSHOT_RESTORE_TAKE_FAILSAFE_SNAPSHOT
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_RESTORE_FAILSAFE_NAME
init|=
literal|"hbase.snapshot.restore.failsafe.name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SNAPSHOT_RESTORE_FAILSAFE_NAME
init|=
literal|"hbase-failsafe-{snapshot.name}-{restore.timestamp}"
decl_stmt|;
specifier|private
name|HConstants
parameter_list|()
block|{
comment|// Can't be instantiated with this ctor.
block|}
block|}
end_class

end_unit

