begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IterableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|cell
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|KeyValueTestUtil
block|{
specifier|public
specifier|static
name|KeyValue
name|create
parameter_list|(
name|String
name|row
parameter_list|,
name|String
name|family
parameter_list|,
name|String
name|qualifier
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyValue
name|create
parameter_list|(
name|String
name|row
parameter_list|,
name|String
name|family
parameter_list|,
name|String
name|qualifier
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|KeyValue
operator|.
name|Type
name|type
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifier
argument_list|)
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteBuffer
name|toByteBufferAndRewind
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|KeyValue
argument_list|>
name|kvs
parameter_list|,
name|boolean
name|includeMemstoreTS
parameter_list|)
block|{
name|int
name|totalBytes
init|=
name|KeyValueTool
operator|.
name|totalLengthWithMvccVersion
argument_list|(
name|kvs
argument_list|,
name|includeMemstoreTS
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|totalBytes
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|IterableUtils
operator|.
name|nullSafe
argument_list|(
name|kvs
argument_list|)
control|)
block|{
name|KeyValueTool
operator|.
name|appendToByteBuffer
argument_list|(
name|bb
argument_list|,
name|kv
argument_list|,
name|includeMemstoreTS
argument_list|)
expr_stmt|;
block|}
name|bb
operator|.
name|rewind
argument_list|()
expr_stmt|;
return|return
name|bb
return|;
block|}
comment|/**    * Checks whether KeyValues from kvCollection2 are contained in kvCollection1.    *     * The comparison is made without distinguishing MVCC version of the KeyValues    *     * @param kvCollection1    * @param kvCollection2    * @return true if KeyValues from kvCollection2 are contained in kvCollection1    */
specifier|public
specifier|static
name|boolean
name|containsIgnoreMvccVersion
parameter_list|(
name|Collection
argument_list|<
name|KeyValue
argument_list|>
name|kvCollection1
parameter_list|,
name|Collection
argument_list|<
name|KeyValue
argument_list|>
name|kvCollection2
parameter_list|)
block|{
for|for
control|(
name|KeyValue
name|kv1
range|:
name|kvCollection1
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv2
range|:
name|kvCollection2
control|)
block|{
if|if
condition|(
name|CellComparator
operator|.
name|equalsIgnoreMvccVersion
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
condition|)
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|KeyValue
argument_list|>
name|rewindThenToList
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|,
specifier|final
name|boolean
name|includesMemstoreTS
parameter_list|)
block|{
name|bb
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|kv
operator|=
name|KeyValueTool
operator|.
name|nextShallowCopy
argument_list|(
name|bb
argument_list|,
name|includesMemstoreTS
argument_list|)
expr_stmt|;
if|if
condition|(
name|kv
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|kvs
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
return|return
name|kvs
return|;
block|}
comment|/********************* toString ************************************/
specifier|public
specifier|static
name|String
name|toStringWithPadding
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|KeyValue
argument_list|>
name|kvs
parameter_list|,
specifier|final
name|boolean
name|includeMeta
parameter_list|)
block|{
name|int
name|maxRowStringLength
init|=
literal|0
decl_stmt|;
name|int
name|maxFamilyStringLength
init|=
literal|0
decl_stmt|;
name|int
name|maxQualifierStringLength
init|=
literal|0
decl_stmt|;
name|int
name|maxTimestampLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|maxRowStringLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxRowStringLength
argument_list|,
name|getRowString
argument_list|(
name|kv
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|maxFamilyStringLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxFamilyStringLength
argument_list|,
name|getFamilyString
argument_list|(
name|kv
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|maxQualifierStringLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxQualifierStringLength
argument_list|,
name|getQualifierString
argument_list|(
name|kv
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|maxTimestampLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxTimestampLength
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|row
init|=
name|toStringWithPadding
argument_list|(
name|kv
argument_list|,
name|maxRowStringLength
argument_list|,
name|maxFamilyStringLength
argument_list|,
name|maxQualifierStringLength
argument_list|,
name|maxTimestampLength
argument_list|,
name|includeMeta
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|String
name|toStringWithPadding
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|,
specifier|final
name|int
name|maxRowLength
parameter_list|,
name|int
name|maxFamilyLength
parameter_list|,
name|int
name|maxQualifierLength
parameter_list|,
name|int
name|maxTimestampLength
parameter_list|,
name|boolean
name|includeMeta
parameter_list|)
block|{
name|String
name|leadingLengths
init|=
literal|""
decl_stmt|;
name|String
name|familyLength
init|=
name|kv
operator|.
name|getFamilyLength
argument_list|()
operator|+
literal|" "
decl_stmt|;
if|if
condition|(
name|includeMeta
condition|)
block|{
name|leadingLengths
operator|+=
name|Strings
operator|.
name|padFront
argument_list|(
name|kv
operator|.
name|getKeyLength
argument_list|()
operator|+
literal|""
argument_list|,
literal|'0'
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|leadingLengths
operator|+=
literal|" "
expr_stmt|;
name|leadingLengths
operator|+=
name|Strings
operator|.
name|padFront
argument_list|(
name|kv
operator|.
name|getValueLength
argument_list|()
operator|+
literal|""
argument_list|,
literal|'0'
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|leadingLengths
operator|+=
literal|" "
expr_stmt|;
name|leadingLengths
operator|+=
name|Strings
operator|.
name|padFront
argument_list|(
name|kv
operator|.
name|getRowLength
argument_list|()
operator|+
literal|""
argument_list|,
literal|'0'
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|leadingLengths
operator|+=
literal|" "
expr_stmt|;
block|}
name|int
name|spacesAfterRow
init|=
name|maxRowLength
operator|-
name|getRowString
argument_list|(
name|kv
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|2
decl_stmt|;
name|int
name|spacesAfterFamily
init|=
name|maxFamilyLength
operator|-
name|getFamilyString
argument_list|(
name|kv
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|2
decl_stmt|;
name|int
name|spacesAfterQualifier
init|=
name|maxQualifierLength
operator|-
name|getQualifierString
argument_list|(
name|kv
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|spacesAfterTimestamp
init|=
name|maxTimestampLength
operator|-
name|Long
operator|.
name|valueOf
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
return|return
name|leadingLengths
operator|+
name|getRowString
argument_list|(
name|kv
argument_list|)
operator|+
name|Strings
operator|.
name|repeat
argument_list|(
literal|' '
argument_list|,
name|spacesAfterRow
argument_list|)
operator|+
name|familyLength
operator|+
name|getFamilyString
argument_list|(
name|kv
argument_list|)
operator|+
name|Strings
operator|.
name|repeat
argument_list|(
literal|' '
argument_list|,
name|spacesAfterFamily
argument_list|)
operator|+
name|getQualifierString
argument_list|(
name|kv
argument_list|)
operator|+
name|Strings
operator|.
name|repeat
argument_list|(
literal|' '
argument_list|,
name|spacesAfterQualifier
argument_list|)
operator|+
name|getTimestampString
argument_list|(
name|kv
argument_list|)
operator|+
name|Strings
operator|.
name|repeat
argument_list|(
literal|' '
argument_list|,
name|spacesAfterTimestamp
argument_list|)
operator|+
name|getTypeString
argument_list|(
name|kv
argument_list|)
operator|+
literal|" "
operator|+
name|getValueString
argument_list|(
name|kv
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getRowString
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getFamilyString
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|kv
operator|.
name|getFamily
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getQualifierString
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|kv
operator|.
name|getQualifier
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getTimestampString
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|""
return|;
block|}
specifier|protected
specifier|static
name|String
name|getTypeString
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|kv
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|String
name|getValueString
parameter_list|(
specifier|final
name|KeyValue
name|kv
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

