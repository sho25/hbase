begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndex
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Unsafe
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Utility class that handles byte arrays, conversions to/from other types,  * comparisons, hash code generation, manufacturing keys for HashMaps or  * HashSets, and can be used as key in maps or trees.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS"
argument_list|,
name|justification
operator|=
literal|"It has been like this forever"
argument_list|)
specifier|public
class|class
name|Bytes
implements|implements
name|Comparable
argument_list|<
name|Bytes
argument_list|>
block|{
comment|//HConstants.UTF8_ENCODING should be updated if this changed
comment|/** When we encode strings, we always specify UTF8 encoding */
specifier|private
specifier|static
specifier|final
name|String
name|UTF8_ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
comment|//HConstants.UTF8_CHARSET should be updated if this changed
comment|/** When we encode strings, we always specify UTF8 encoding */
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8_CHARSET
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|UTF8_ENCODING
argument_list|)
decl_stmt|;
comment|//HConstants.EMPTY_BYTE_ARRAY should be updated if this changed
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTE_ARRAY
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Bytes
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Size of boolean in bytes    */
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_BOOLEAN
init|=
name|Byte
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|/**    * Size of byte in bytes    */
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_BYTE
init|=
name|SIZEOF_BOOLEAN
decl_stmt|;
comment|/**    * Size of char in bytes    */
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_CHAR
init|=
name|Character
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|/**    * Size of double in bytes    */
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_DOUBLE
init|=
name|Double
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|/**    * Size of float in bytes    */
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_FLOAT
init|=
name|Float
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|/**    * Size of int in bytes    */
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_INT
init|=
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|/**    * Size of long in bytes    */
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_LONG
init|=
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|/**    * Size of short in bytes    */
specifier|public
specifier|static
specifier|final
name|int
name|SIZEOF_SHORT
init|=
name|Short
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
comment|/**    * Estimate of size cost to pay beyond payload in jvm for instance of byte [].    * Estimate based on study of jhat and jprofiler numbers.    */
comment|// JHat says BU is 56 bytes.
comment|// SizeOf which uses java.lang.instrument says 24 bytes. (3 longs?)
specifier|public
specifier|static
specifier|final
name|int
name|ESTIMATED_HEAP_TAX
init|=
literal|16
decl_stmt|;
comment|/**    * Returns length of the byte array, returning 0 if the array is null.    * Useful for calculating sizes.    * @param b byte array, which can be null    * @return 0 if b is null, otherwise returns length    */
specifier|final
specifier|public
specifier|static
name|int
name|len
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
condition|?
literal|0
else|:
name|b
operator|.
name|length
return|;
block|}
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|length
decl_stmt|;
comment|/**    * Create a zero-size sequence.    */
specifier|public
name|Bytes
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a Bytes using the byte array as the initial value.    * @param bytes This array becomes the backing storage for the object.    */
specifier|public
name|Bytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|this
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the new Bytes to the contents of the passed    *<code>ibw</code>.    * @param ibw the value to set this Bytes to.    */
specifier|public
name|Bytes
parameter_list|(
specifier|final
name|Bytes
name|ibw
parameter_list|)
block|{
name|this
argument_list|(
name|ibw
operator|.
name|get
argument_list|()
argument_list|,
name|ibw
operator|.
name|getOffset
argument_list|()
argument_list|,
name|ibw
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the value to a given byte range    * @param bytes the new byte range to set to    * @param offset the offset in newData to start at    * @param length the number of bytes in the range    */
specifier|public
name|Bytes
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/**    * Copy bytes from ByteString instance.    * @param byteString copy from    */
specifier|public
name|Bytes
parameter_list|(
specifier|final
name|ByteString
name|byteString
parameter_list|)
block|{
name|this
argument_list|(
name|byteString
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the data from the Bytes.    * @return The data is only valid between offset and offset+length.    */
specifier|public
name|byte
index|[]
name|get
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|bytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Uninitialiized. Null constructor "
operator|+
literal|"called w/o accompaying readFields invocation"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|bytes
return|;
block|}
comment|/**    * @param b Use passed bytes as backing array for this instance.    */
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
name|set
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param b Use passed bytes as backing array for this instance.    * @param offset    * @param length    */
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/**    * @return the number of valid bytes in the buffer    * @deprecated use {@link #getLength()} instead    */
annotation|@
name|Deprecated
specifier|public
name|int
name|getSize
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|bytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Uninitialiized. Null constructor "
operator|+
literal|"called w/o accompaying readFields invocation"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|length
return|;
block|}
comment|/**    * @return the number of valid bytes in the buffer    */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|bytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Uninitialiized. Null constructor "
operator|+
literal|"called w/o accompaying readFields invocation"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|length
return|;
block|}
comment|/**    * @return offset    */
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|offset
return|;
block|}
specifier|public
name|ByteString
name|toByteString
parameter_list|()
block|{
return|return
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|this
operator|.
name|bytes
argument_list|,
name|this
operator|.
name|offset
argument_list|,
name|this
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|hashCode
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * Define the sort order of the Bytes.    * @param that The other bytes writable    * @return Positive if left is bigger than right, 0 if they are equal, and    *         negative if left is smaller than right.    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Bytes
name|that
parameter_list|)
block|{
return|return
name|BYTES_RAWCOMPARATOR
operator|.
name|compare
argument_list|(
name|this
operator|.
name|bytes
argument_list|,
name|this
operator|.
name|offset
argument_list|,
name|this
operator|.
name|length
argument_list|,
name|that
operator|.
name|bytes
argument_list|,
name|that
operator|.
name|offset
argument_list|,
name|that
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Compares the bytes in this object to the specified byte array    * @param that    * @return Positive if left is bigger than right, 0 if they are equal, and    *         negative if left is smaller than right.    */
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|byte
index|[]
name|that
parameter_list|)
block|{
return|return
name|BYTES_RAWCOMPARATOR
operator|.
name|compare
argument_list|(
name|this
operator|.
name|bytes
argument_list|,
name|this
operator|.
name|offset
argument_list|,
name|this
operator|.
name|length
argument_list|,
name|that
argument_list|,
literal|0
argument_list|,
name|that
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * @see Object#equals(Object)    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|right_obj
parameter_list|)
block|{
if|if
condition|(
name|right_obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|right_obj
argument_list|)
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|right_obj
operator|instanceof
name|Bytes
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|Bytes
operator|)
name|right_obj
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @see Object#toString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * @param array List of byte [].    * @return Array of byte [].    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|toArray
parameter_list|(
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|array
parameter_list|)
block|{
comment|// List#toArray doesn't work on lists of byte [].
name|byte
index|[]
index|[]
name|results
init|=
operator|new
name|byte
index|[
name|array
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Returns a copy of the bytes referred to by this writable    */
specifier|public
name|byte
index|[]
name|copyBytes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|)
return|;
block|}
comment|/**    * Byte array comparator class.    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|static
class|class
name|ByteArrayComparator
implements|implements
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
block|{
comment|/**      * Constructor      */
specifier|public
name|ByteArrayComparator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
return|return
name|LexicographicalComparerHolder
operator|.
name|BEST_COMPARER
operator|.
name|compareTo
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|l1
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
return|;
block|}
block|}
comment|/**    * A {@link ByteArrayComparator} that treats the empty array as the largest value.    * This is useful for comparing row end keys for regions.    */
comment|// TODO: unfortunately, HBase uses byte[0] as both start and end keys for region
comment|// boundaries. Thus semantically, we should treat empty byte array as the smallest value
comment|// while comparing row keys, start keys etc; but as the largest value for comparing
comment|// region boundaries for endKeys.
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|static
class|class
name|RowEndKeyComparator
extends|extends
name|ByteArrayComparator
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|left
argument_list|,
literal|0
argument_list|,
name|left
operator|.
name|length
argument_list|,
name|right
argument_list|,
literal|0
argument_list|,
name|right
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
if|if
condition|(
name|b1
operator|==
name|b2
operator|&&
name|s1
operator|==
name|s2
operator|&&
name|l1
operator|==
name|l2
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|l1
operator|==
literal|0
condition|)
block|{
return|return
name|l2
return|;
comment|//0 or positive
block|}
if|if
condition|(
name|l2
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|super
operator|.
name|compare
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|l1
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
return|;
block|}
block|}
comment|/**    * Pass this to TreeMaps where byte [] are keys.    */
specifier|public
specifier|final
specifier|static
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|BYTES_COMPARATOR
init|=
operator|new
name|ByteArrayComparator
argument_list|()
decl_stmt|;
comment|/**    * Use comparing byte arrays, byte-by-byte    */
specifier|public
specifier|final
specifier|static
name|RawComparator
argument_list|<
name|byte
index|[]
argument_list|>
name|BYTES_RAWCOMPARATOR
init|=
operator|new
name|ByteArrayComparator
argument_list|()
decl_stmt|;
comment|/**    * Read byte-array written with a WritableableUtils.vint prefix.    * @param in Input to read from.    * @return byte array read off<code>in</code>    * @throws IOException e    */
specifier|public
specifier|static
name|byte
index|[]
name|readByteArray
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|NegativeArraySizeException
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|len
argument_list|)
argument_list|)
throw|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Read byte-array written with a WritableableUtils.vint prefix.    * IOException is converted to a RuntimeException.    * @param in Input to read from.    * @return byte array read off<code>in</code>    */
specifier|public
specifier|static
name|byte
index|[]
name|readByteArrayThrowsRuntime
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|)
block|{
try|try
block|{
return|return
name|readByteArray
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Write byte-array with a WritableableUtils.vint prefix.    * @param out output stream to be written to    * @param b array to write    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|writeByteArray
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Write byte-array to out with a vint length prefix.    * @param out output stream    * @param b array    * @param offset offset into array    * @param length length past offset    * @throws IOException e    */
specifier|public
specifier|static
name|void
name|writeByteArray
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write byte-array from src to tgt with a vint length prefix.    * @param tgt target array    * @param tgtOffset offset into target array    * @param src source array    * @param srcOffset source offset    * @param srcLength source length    * @return New offset in src array.    */
specifier|public
specifier|static
name|int
name|writeByteArray
parameter_list|(
specifier|final
name|byte
index|[]
name|tgt
parameter_list|,
specifier|final
name|int
name|tgtOffset
parameter_list|,
specifier|final
name|byte
index|[]
name|src
parameter_list|,
specifier|final
name|int
name|srcOffset
parameter_list|,
specifier|final
name|int
name|srcLength
parameter_list|)
block|{
name|byte
index|[]
name|vint
init|=
name|vintToBytes
argument_list|(
name|srcLength
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|vint
argument_list|,
literal|0
argument_list|,
name|tgt
argument_list|,
name|tgtOffset
argument_list|,
name|vint
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|tgtOffset
operator|+
name|vint
operator|.
name|length
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|srcOffset
argument_list|,
name|tgt
argument_list|,
name|offset
argument_list|,
name|srcLength
argument_list|)
expr_stmt|;
return|return
name|offset
operator|+
name|srcLength
return|;
block|}
comment|/**    * Put bytes at the specified byte array position.    * @param tgtBytes the byte array    * @param tgtOffset position in the array    * @param srcBytes array to write out    * @param srcOffset source offset    * @param srcLength source length    * @return incremented offset    */
specifier|public
specifier|static
name|int
name|putBytes
parameter_list|(
name|byte
index|[]
name|tgtBytes
parameter_list|,
name|int
name|tgtOffset
parameter_list|,
name|byte
index|[]
name|srcBytes
parameter_list|,
name|int
name|srcOffset
parameter_list|,
name|int
name|srcLength
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|srcBytes
argument_list|,
name|srcOffset
argument_list|,
name|tgtBytes
argument_list|,
name|tgtOffset
argument_list|,
name|srcLength
argument_list|)
expr_stmt|;
return|return
name|tgtOffset
operator|+
name|srcLength
return|;
block|}
comment|/**    * Write a single byte out to the specified byte array position.    * @param bytes the byte array    * @param offset position in the array    * @param b byte to write out    * @return incremented offset    */
specifier|public
specifier|static
name|int
name|putByte
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
name|bytes
index|[
name|offset
index|]
operator|=
name|b
expr_stmt|;
return|return
name|offset
operator|+
literal|1
return|;
block|}
comment|/**    * Add the whole content of the ByteBuffer to the bytes arrays. The ByteBuffer is modified.    * @param bytes the byte array    * @param offset position in the array    * @param buf ByteBuffer to write out    * @return incremented offset    */
specifier|public
specifier|static
name|int
name|putByteBuffer
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|)
block|{
name|int
name|len
init|=
name|buf
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|offset
operator|+
name|len
return|;
block|}
comment|/**    * Returns a new byte array, copied from the given {@code buf},    * from the index 0 (inclusive) to the limit (exclusive),    * regardless of the current position.    * The position and the other index parameters are not changed.    *    * @param buf a byte buffer    * @return the byte array    * @see #getBytes(ByteBuffer)    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
name|ByteBuffer
name|dup
init|=
name|buf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|dup
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|readBytes
argument_list|(
name|dup
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|readBytes
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param b Presumed UTF-8 encoded byte array.    * @return String made from<code>b</code>    */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|toString
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Joins two byte arrays together using a separator.    * @param b1 The first byte array.    * @param sep The separator to use.    * @param b2 The second byte array.    */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|byte
index|[]
name|b1
parameter_list|,
name|String
name|sep
parameter_list|,
specifier|final
name|byte
index|[]
name|b2
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|b1
argument_list|,
literal|0
argument_list|,
name|b1
operator|.
name|length
argument_list|)
operator|+
name|sep
operator|+
name|toString
argument_list|(
name|b2
argument_list|,
literal|0
argument_list|,
name|b2
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * This method will convert utf8 encoded bytes into a string. If    * the given byte array is null, this method will return null.    *    * @param b Presumed UTF-8 encoded byte array.    * @param off offset into array    * @return String made from<code>b</code> or null    */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len
init|=
name|b
operator|.
name|length
operator|-
name|off
decl_stmt|;
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|UTF8_CHARSET
argument_list|)
return|;
block|}
comment|/**    * This method will convert utf8 encoded bytes into a string. If    * the given byte array is null, this method will return null.    *    * @param b Presumed UTF-8 encoded byte array.    * @param off offset into array    * @param len length of utf-8 sequence    * @return String made from<code>b</code> or null    */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|UTF8_CHARSET
argument_list|)
return|;
block|}
comment|/**    * Write a printable representation of a byte array.    *    * @param b byte array    * @return string    * @see #toStringBinary(byte[], int, int)    */
specifier|public
specifier|static
name|String
name|toStringBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
return|return
literal|"null"
return|;
return|return
name|toStringBinary
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Converts the given byte buffer to a printable representation,    * from the index 0 (inclusive) to the limit (exclusive),    * regardless of the current position.    * The position and the other index parameters are not changed.    *    * @param buf a byte buffer    * @return a string representation of the buffer's binary contents    * @see #toBytes(ByteBuffer)    * @see #getBytes(ByteBuffer)    */
specifier|public
specifier|static
name|String
name|toStringBinary
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
return|return
literal|"null"
return|;
if|if
condition|(
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|toStringBinary
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|buf
operator|.
name|limit
argument_list|()
argument_list|)
return|;
block|}
return|return
name|toStringBinary
argument_list|(
name|toBytes
argument_list|(
name|buf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Write a printable representation of a byte array. Non-printable    * characters are hex escaped in the format \\x%02X, eg:    * \x00 \x05 etc    *    * @param b array to write out    * @param off offset to start at    * @param len length to write    * @return string output    */
specifier|public
specifier|static
name|String
name|toStringBinary
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Just in case we are passed a 'len' that is> buffer length...
if|if
condition|(
name|off
operator|>=
name|b
operator|.
name|length
condition|)
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
if|if
condition|(
name|off
operator|+
name|len
operator|>
name|b
operator|.
name|length
condition|)
name|len
operator|=
name|b
operator|.
name|length
operator|-
name|off
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|<
name|off
operator|+
name|len
condition|;
operator|++
name|i
control|)
block|{
name|int
name|ch
init|=
name|b
index|[
name|i
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|ch
operator|>=
literal|'A'
operator|&&
name|ch
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|ch
operator|>=
literal|'a'
operator|&&
name|ch
operator|<=
literal|'z'
operator|)
operator|||
literal|" `~!@#$%^&*()-_=+[]{}|;:'\",.<>/?"
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\x%02X"
argument_list|,
name|ch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isHexDigit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
return|;
block|}
comment|/**    * Takes a ASCII digit in the range A-F0-9 and returns    * the corresponding integer/ordinal value.    * @param ch  The hex digit.    * @return The converted hex value as a byte.    */
specifier|public
specifier|static
name|byte
name|toBinaryFromHex
parameter_list|(
name|byte
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|>=
literal|'A'
operator|&&
name|ch
operator|<=
literal|'F'
condition|)
return|return
call|(
name|byte
call|)
argument_list|(
operator|(
name|byte
operator|)
literal|10
operator|+
call|(
name|byte
call|)
argument_list|(
name|ch
operator|-
literal|'A'
argument_list|)
argument_list|)
return|;
comment|// else
return|return
call|(
name|byte
call|)
argument_list|(
name|ch
operator|-
literal|'0'
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|toBytesBinary
parameter_list|(
name|String
name|in
parameter_list|)
block|{
comment|// this may be bigger than we need, but let's be safe.
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|in
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|char
name|ch
init|=
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
operator|&&
name|in
operator|.
name|length
argument_list|()
operator|>
name|i
operator|+
literal|1
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'x'
condition|)
block|{
comment|// ok, take next 2 hex digits.
name|char
name|hd1
init|=
name|in
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|char
name|hd2
init|=
name|in
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|3
argument_list|)
decl_stmt|;
comment|// they need to be A-F0-9:
if|if
condition|(
operator|!
name|isHexDigit
argument_list|(
name|hd1
argument_list|)
operator|||
operator|!
name|isHexDigit
argument_list|(
name|hd2
argument_list|)
condition|)
block|{
comment|// bogus escape code, ignore:
continue|continue;
block|}
comment|// turn hex ASCII digit -> number
name|byte
name|d
init|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|toBinaryFromHex
argument_list|(
operator|(
name|byte
operator|)
name|hd1
argument_list|)
operator|<<
literal|4
operator|)
operator|+
name|toBinaryFromHex
argument_list|(
operator|(
name|byte
operator|)
name|hd2
argument_list|)
argument_list|)
decl_stmt|;
name|b
index|[
name|size
operator|++
index|]
operator|=
name|d
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
comment|// skip 3
block|}
else|else
block|{
name|b
index|[
name|size
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|ch
expr_stmt|;
block|}
block|}
comment|// resize:
name|byte
index|[]
name|b2
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b2
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|b2
return|;
block|}
comment|/**    * Converts a string to a UTF-8 byte array.    * @param s string    * @return the byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|getBytes
argument_list|(
name|UTF8_CHARSET
argument_list|)
return|;
block|}
comment|/**    * Convert a boolean to a byte array. True becomes -1    * and false becomes 0.    *    * @param b value    * @return<code>b</code> encoded in a byte array.    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
specifier|final
name|boolean
name|b
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
name|b
condition|?
operator|(
name|byte
operator|)
operator|-
literal|1
else|:
operator|(
name|byte
operator|)
literal|0
block|}
return|;
block|}
comment|/**    * Reverses {@link #toBytes(boolean)}    * @param b array    * @return True or false.    */
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Array has wrong size: "
operator|+
name|b
operator|.
name|length
argument_list|)
throw|;
block|}
return|return
name|b
index|[
literal|0
index|]
operator|!=
operator|(
name|byte
operator|)
literal|0
return|;
block|}
comment|/**    * Convert a long value to a byte array using big-endian.    *    * @param val value to convert    * @return the byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|7
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
name|val
operator|>>>=
literal|8
expr_stmt|;
block|}
name|b
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Converts a byte array to a long value. Reverses    * {@link #toBytes(long)}    * @param bytes array    * @return the long value    */
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|toLong
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|SIZEOF_LONG
argument_list|)
return|;
block|}
comment|/**    * Converts a byte array to a long value. Assumes there will be    * {@link #SIZEOF_LONG} bytes available.    *    * @param bytes bytes    * @param offset offset    * @return the long value    */
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|toLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|SIZEOF_LONG
argument_list|)
return|;
block|}
comment|/**    * Converts a byte array to a long value.    *    * @param bytes array of bytes    * @param offset offset into array    * @param length length of data (must be {@link #SIZEOF_LONG})    * @return the long value    * @throws IllegalArgumentException if length is not {@link #SIZEOF_LONG} or    * if there's not enough room in the array at the offset indicated.    */
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|!=
name|SIZEOF_LONG
operator|||
name|offset
operator|+
name|length
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
name|explainWrongLengthOrOffset
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|SIZEOF_LONG
argument_list|)
throw|;
block|}
name|long
name|l
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|<<=
literal|8
expr_stmt|;
name|l
operator|^=
name|bytes
index|[
name|i
index|]
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
specifier|private
specifier|static
name|IllegalArgumentException
name|explainWrongLengthOrOffset
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|int
name|expectedLength
parameter_list|)
block|{
name|String
name|reason
decl_stmt|;
if|if
condition|(
name|length
operator|!=
name|expectedLength
condition|)
block|{
name|reason
operator|=
literal|"Wrong length: "
operator|+
name|length
operator|+
literal|", expected "
operator|+
name|expectedLength
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
literal|"offset ("
operator|+
name|offset
operator|+
literal|") + length ("
operator|+
name|length
operator|+
literal|") exceed the"
operator|+
literal|" capacity of the array: "
operator|+
name|bytes
operator|.
name|length
expr_stmt|;
block|}
return|return
operator|new
name|IllegalArgumentException
argument_list|(
name|reason
argument_list|)
return|;
block|}
comment|/**    * Put a long value out to the specified byte array position.    * @param bytes the byte array    * @param offset position in the array    * @param val long to write out    * @return incremented offset    * @throws IllegalArgumentException if the byte array given doesn't have    * enough room at the offset specified.    */
specifier|public
specifier|static
name|int
name|putLong
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|-
name|offset
operator|<
name|SIZEOF_LONG
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not enough room to put a long at"
operator|+
literal|" offset "
operator|+
name|offset
operator|+
literal|" in a "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|" byte array"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
name|offset
operator|+
literal|7
init|;
name|i
operator|>
name|offset
condition|;
name|i
operator|--
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
name|val
operator|>>>=
literal|8
expr_stmt|;
block|}
name|bytes
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
return|return
name|offset
operator|+
name|SIZEOF_LONG
return|;
block|}
comment|/**    * Presumes float encoded as IEEE 754 floating-point "single format"    * @param bytes byte array    * @return Float made from passed byte array.    */
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|toFloat
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Presumes float encoded as IEEE 754 floating-point "single format"    * @param bytes array to convert    * @param offset offset into array    * @return Float made from passed byte array.    */
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|toInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|SIZEOF_INT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param bytes byte array    * @param offset offset to write to    * @param f float value    * @return New offset in<code>bytes</code>    */
specifier|public
specifier|static
name|int
name|putFloat
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|float
name|f
parameter_list|)
block|{
return|return
name|putInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param f float value    * @return the float represented as byte []    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
specifier|final
name|float
name|f
parameter_list|)
block|{
comment|// Encode it as int
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param bytes byte array    * @return Return double made from passed bytes.    */
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|toDouble
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * @param bytes byte array    * @param offset offset where double is    * @return Return double made from passed bytes.    */
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|toLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|SIZEOF_LONG
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param bytes byte array    * @param offset offset to write to    * @param d value    * @return New offset into array<code>bytes</code>    */
specifier|public
specifier|static
name|int
name|putDouble
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|double
name|d
parameter_list|)
block|{
return|return
name|putLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|d
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Serialize a double as the IEEE 754 double format output. The resultant    * array will be 8 bytes long.    *    * @param d value    * @return the double represented as byte []    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
specifier|final
name|double
name|d
parameter_list|)
block|{
comment|// Encode it as a long
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|d
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert an int value to a byte array.  Big-endian.  Same as what DataOutputStream.writeInt    * does.    *    * @param val value    * @return the byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
name|val
operator|>>>=
literal|8
expr_stmt|;
block|}
name|b
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Converts a byte array to an int value    * @param bytes byte array    * @return the int value    */
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|toInt
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|SIZEOF_INT
argument_list|)
return|;
block|}
comment|/**    * Converts a byte array to an int value    * @param bytes byte array    * @param offset offset into array    * @return the int value    */
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|toInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|SIZEOF_INT
argument_list|)
return|;
block|}
comment|/**    * Converts a byte array to an int value    * @param bytes byte array    * @param offset offset into array    * @param length length of int (has to be {@link #SIZEOF_INT})    * @return the int value    * @throws IllegalArgumentException if length is not {@link #SIZEOF_INT} or    * if there's not enough room in the array at the offset indicated.    */
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|!=
name|SIZEOF_INT
operator|||
name|offset
operator|+
name|length
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
name|explainWrongLengthOrOffset
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|SIZEOF_INT
argument_list|)
throw|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
operator|(
name|offset
operator|+
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|<<=
literal|8
expr_stmt|;
name|n
operator|^=
name|bytes
index|[
name|i
index|]
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
comment|/**    * Converts a byte array to an int value    * @param bytes byte array    * @param offset offset into array    * @param length how many bytes should be considered for creating int    * @return the int value    * @throws IllegalArgumentException if there's not enough room in the array at the offset    * indicated.    */
specifier|public
specifier|static
name|int
name|readAsInt
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|+
name|length
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"offset ("
operator|+
name|offset
operator|+
literal|") + length ("
operator|+
name|length
operator|+
literal|") exceed the"
operator|+
literal|" capacity of the array: "
operator|+
name|bytes
operator|.
name|length
argument_list|)
throw|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
operator|(
name|offset
operator|+
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|<<=
literal|8
expr_stmt|;
name|n
operator|^=
name|bytes
index|[
name|i
index|]
operator|&
literal|0xFF
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
comment|/**    * Put an int value out to the specified byte array position.    * @param bytes the byte array    * @param offset position in the array    * @param val int to write out    * @return incremented offset    * @throws IllegalArgumentException if the byte array given doesn't have    * enough room at the offset specified.    */
specifier|public
specifier|static
name|int
name|putInt
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|val
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|-
name|offset
operator|<
name|SIZEOF_INT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not enough room to put an int at"
operator|+
literal|" offset "
operator|+
name|offset
operator|+
literal|" in a "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|" byte array"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
name|offset
operator|+
literal|3
init|;
name|i
operator|>
name|offset
condition|;
name|i
operator|--
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
name|val
operator|>>>=
literal|8
expr_stmt|;
block|}
name|bytes
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
return|return
name|offset
operator|+
name|SIZEOF_INT
return|;
block|}
comment|/**    * Convert a short value to a byte array of {@link #SIZEOF_SHORT} bytes long.    * @param val value    * @return the byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|short
name|val
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|SIZEOF_SHORT
index|]
decl_stmt|;
name|b
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
name|val
operator|>>=
literal|8
expr_stmt|;
name|b
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Converts a byte array to a short value    * @param bytes byte array    * @return the short value    */
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|toShort
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|SIZEOF_SHORT
argument_list|)
return|;
block|}
comment|/**    * Converts a byte array to a short value    * @param bytes byte array    * @param offset offset into array    * @return the short value    */
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|toShort
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|SIZEOF_SHORT
argument_list|)
return|;
block|}
comment|/**    * Converts a byte array to a short value    * @param bytes byte array    * @param offset offset into array    * @param length length, has to be {@link #SIZEOF_SHORT}    * @return the short value    * @throws IllegalArgumentException if length is not {@link #SIZEOF_SHORT}    * or if there's not enough room in the array at the offset indicated.    */
specifier|public
specifier|static
name|short
name|toShort
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|!=
name|SIZEOF_SHORT
operator|||
name|offset
operator|+
name|length
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
name|explainWrongLengthOrOffset
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|SIZEOF_SHORT
argument_list|)
throw|;
block|}
name|short
name|n
init|=
literal|0
decl_stmt|;
name|n
operator|^=
name|bytes
index|[
name|offset
index|]
operator|&
literal|0xFF
expr_stmt|;
name|n
operator|<<=
literal|8
expr_stmt|;
name|n
operator|^=
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xFF
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**    * Returns a new byte array, copied from the given {@code buf},    * from the position (inclusive) to the limit (exclusive).    * The position and the other index parameters are not changed.    *    * @param buf a byte buffer    * @return the byte array    * @see #toBytes(ByteBuffer)    */
specifier|public
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
return|return
name|readBytes
argument_list|(
name|buf
operator|.
name|duplicate
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Put a short value out to the specified byte array position.    * @param bytes the byte array    * @param offset position in the array    * @param val short to write out    * @return incremented offset    * @throws IllegalArgumentException if the byte array given doesn't have    * enough room at the offset specified.    */
specifier|public
specifier|static
name|int
name|putShort
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|short
name|val
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|-
name|offset
operator|<
name|SIZEOF_SHORT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not enough room to put a short at"
operator|+
literal|" offset "
operator|+
name|offset
operator|+
literal|" in a "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|" byte array"
argument_list|)
throw|;
block|}
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
name|val
operator|>>=
literal|8
expr_stmt|;
name|bytes
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
return|return
name|offset
operator|+
name|SIZEOF_SHORT
return|;
block|}
comment|/**    * Put an int value as short out to the specified byte array position. Only the lower 2 bytes of    * the short will be put into the array. The caller of the API need to make sure they will not    * loose the value by doing so. This is useful to store an unsigned short which is represented as    * int in other parts.    * @param bytes the byte array    * @param offset position in the array    * @param val value to write out    * @return incremented offset    * @throws IllegalArgumentException if the byte array given doesn't have    * enough room at the offset specified.    */
specifier|public
specifier|static
name|int
name|putAsShort
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|val
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|-
name|offset
operator|<
name|SIZEOF_SHORT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not enough room to put a short at"
operator|+
literal|" offset "
operator|+
name|offset
operator|+
literal|" in a "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|" byte array"
argument_list|)
throw|;
block|}
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
name|val
operator|>>=
literal|8
expr_stmt|;
name|bytes
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
return|return
name|offset
operator|+
name|SIZEOF_SHORT
return|;
block|}
comment|/**    * Convert a BigDecimal value to a byte array    *    * @param val    * @return the byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|BigDecimal
name|val
parameter_list|)
block|{
name|byte
index|[]
name|valueBytes
init|=
name|val
operator|.
name|unscaledValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|valueBytes
operator|.
name|length
operator|+
name|SIZEOF_INT
index|]
decl_stmt|;
name|int
name|offset
init|=
name|putInt
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|val
operator|.
name|scale
argument_list|()
argument_list|)
decl_stmt|;
name|putBytes
argument_list|(
name|result
argument_list|,
name|offset
argument_list|,
name|valueBytes
argument_list|,
literal|0
argument_list|,
name|valueBytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Converts a byte array to a BigDecimal    *    * @param bytes    * @return the char value    */
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|toBigDecimal
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Converts a byte array to a BigDecimal value    *    * @param bytes    * @param offset    * @param length    * @return the char value    */
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|length
operator|<
name|SIZEOF_INT
operator|+
literal|1
operator|||
operator|(
name|offset
operator|+
name|length
operator|>
name|bytes
operator|.
name|length
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|scale
init|=
name|toInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tcBytes
init|=
operator|new
name|byte
index|[
name|length
operator|-
name|SIZEOF_INT
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|offset
operator|+
name|SIZEOF_INT
argument_list|,
name|tcBytes
argument_list|,
literal|0
argument_list|,
name|length
operator|-
name|SIZEOF_INT
argument_list|)
expr_stmt|;
return|return
operator|new
name|BigDecimal
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|tcBytes
argument_list|)
argument_list|,
name|scale
argument_list|)
return|;
block|}
comment|/**    * Put a BigDecimal value out to the specified byte array position.    *    * @param bytes  the byte array    * @param offset position in the array    * @param val    BigDecimal to write out    * @return incremented offset    */
specifier|public
specifier|static
name|int
name|putBigDecimal
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|BigDecimal
name|val
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return
name|offset
return|;
block|}
name|byte
index|[]
name|valueBytes
init|=
name|val
operator|.
name|unscaledValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|valueBytes
operator|.
name|length
operator|+
name|SIZEOF_INT
index|]
decl_stmt|;
name|offset
operator|=
name|putInt
argument_list|(
name|result
argument_list|,
name|offset
argument_list|,
name|val
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|putBytes
argument_list|(
name|result
argument_list|,
name|offset
argument_list|,
name|valueBytes
argument_list|,
literal|0
argument_list|,
name|valueBytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * @param vint Integer to make a vint of.    * @return Vint as bytes array.    */
specifier|public
specifier|static
name|byte
index|[]
name|vintToBytes
parameter_list|(
specifier|final
name|long
name|vint
parameter_list|)
block|{
name|long
name|i
init|=
name|vint
decl_stmt|;
name|int
name|size
init|=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|i
operator|>=
operator|-
literal|112
operator|&&
name|i
operator|<=
literal|127
condition|)
block|{
name|result
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
return|return
name|result
return|;
block|}
name|int
name|len
init|=
operator|-
literal|112
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|i
operator|^=
operator|-
literal|1L
expr_stmt|;
comment|// take one's complement'
name|len
operator|=
operator|-
literal|120
expr_stmt|;
block|}
name|long
name|tmp
init|=
name|i
decl_stmt|;
while|while
condition|(
name|tmp
operator|!=
literal|0
condition|)
block|{
name|tmp
operator|=
name|tmp
operator|>>
literal|8
expr_stmt|;
name|len
operator|--
expr_stmt|;
block|}
name|result
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|len
expr_stmt|;
name|len
operator|=
operator|(
name|len
operator|<
operator|-
literal|120
operator|)
condition|?
operator|-
operator|(
name|len
operator|+
literal|120
operator|)
else|:
operator|-
operator|(
name|len
operator|+
literal|112
operator|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
name|len
init|;
name|idx
operator|!=
literal|0
condition|;
name|idx
operator|--
control|)
block|{
name|int
name|shiftbits
init|=
operator|(
name|idx
operator|-
literal|1
operator|)
operator|*
literal|8
decl_stmt|;
name|long
name|mask
init|=
literal|0xFFL
operator|<<
name|shiftbits
decl_stmt|;
name|result
index|[
name|offset
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
name|mask
operator|)
operator|>>
name|shiftbits
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param buffer buffer to convert    * @return vint bytes as an integer.    */
specifier|public
specifier|static
name|long
name|bytesToVint
parameter_list|(
specifier|final
name|byte
index|[]
name|buffer
parameter_list|)
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|byte
name|firstByte
init|=
name|buffer
index|[
name|offset
operator|++
index|]
decl_stmt|;
name|int
name|len
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|1
condition|)
block|{
return|return
name|firstByte
return|;
block|}
name|long
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|len
operator|-
literal|1
condition|;
name|idx
operator|++
control|)
block|{
name|byte
name|b
init|=
name|buffer
index|[
name|offset
operator|++
index|]
decl_stmt|;
name|i
operator|=
name|i
operator|<<
literal|8
expr_stmt|;
name|i
operator|=
name|i
operator||
operator|(
name|b
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
return|return
operator|(
name|WritableUtils
operator|.
name|isNegativeVInt
argument_list|(
name|firstByte
argument_list|)
condition|?
operator|~
name|i
else|:
name|i
operator|)
return|;
block|}
comment|/**    * Reads a zero-compressed encoded long from input stream and returns it.    * @param buffer Binary array    * @param offset Offset into array at which vint begins.    * @throws java.io.IOException e    * @return deserialized long from stream.    */
specifier|public
specifier|static
name|long
name|readVLong
parameter_list|(
specifier|final
name|byte
index|[]
name|buffer
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|firstByte
init|=
name|buffer
index|[
name|offset
index|]
decl_stmt|;
name|int
name|len
init|=
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|1
condition|)
block|{
return|return
name|firstByte
return|;
block|}
name|long
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|len
operator|-
literal|1
condition|;
name|idx
operator|++
control|)
block|{
name|byte
name|b
init|=
name|buffer
index|[
name|offset
operator|+
literal|1
operator|+
name|idx
index|]
decl_stmt|;
name|i
operator|=
name|i
operator|<<
literal|8
expr_stmt|;
name|i
operator|=
name|i
operator||
operator|(
name|b
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
return|return
operator|(
name|WritableUtils
operator|.
name|isNegativeVInt
argument_list|(
name|firstByte
argument_list|)
condition|?
operator|~
name|i
else|:
name|i
operator|)
return|;
block|}
comment|/**    * @param left left operand    * @param right right operand    * @return 0 if equal,< 0 if left is less than right, etc.    */
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
specifier|final
name|byte
index|[]
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|right
parameter_list|)
block|{
return|return
name|LexicographicalComparerHolder
operator|.
name|BEST_COMPARER
operator|.
name|compareTo
argument_list|(
name|left
argument_list|,
literal|0
argument_list|,
name|left
operator|.
name|length
argument_list|,
name|right
argument_list|,
literal|0
argument_list|,
name|right
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Lexicographically compare two arrays.    *    * @param buffer1 left operand    * @param buffer2 right operand    * @param offset1 Where to start comparing in the left buffer    * @param offset2 Where to start comparing in the right buffer    * @param length1 How much to compare from the left buffer    * @param length2 How much to compare from the right buffer    * @return 0 if equal,< 0 if left is less than right, etc.    */
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|buffer1
parameter_list|,
name|int
name|offset1
parameter_list|,
name|int
name|length1
parameter_list|,
name|byte
index|[]
name|buffer2
parameter_list|,
name|int
name|offset2
parameter_list|,
name|int
name|length2
parameter_list|)
block|{
return|return
name|LexicographicalComparerHolder
operator|.
name|BEST_COMPARER
operator|.
name|compareTo
argument_list|(
name|buffer1
argument_list|,
name|offset1
argument_list|,
name|length1
argument_list|,
name|buffer2
argument_list|,
name|offset2
argument_list|,
name|length2
argument_list|)
return|;
block|}
interface|interface
name|Comparer
parameter_list|<
name|T
parameter_list|>
block|{
name|int
name|compareTo
parameter_list|(
name|T
name|buffer1
parameter_list|,
name|int
name|offset1
parameter_list|,
name|int
name|length1
parameter_list|,
name|T
name|buffer2
parameter_list|,
name|int
name|offset2
parameter_list|,
name|int
name|length2
parameter_list|)
function_decl|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|Comparer
argument_list|<
name|byte
index|[]
argument_list|>
name|lexicographicalComparerJavaImpl
parameter_list|()
block|{
return|return
name|LexicographicalComparerHolder
operator|.
name|PureJavaComparer
operator|.
name|INSTANCE
return|;
block|}
comment|/**    * Provides a lexicographical comparer implementation; either a Java    * implementation or a faster implementation based on {@link Unsafe}.    *    *<p>Uses reflection to gracefully fall back to the Java implementation if    * {@code Unsafe} isn't available.    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|LexicographicalComparerHolder
block|{
specifier|static
specifier|final
name|String
name|UNSAFE_COMPARER_NAME
init|=
name|LexicographicalComparerHolder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"$UnsafeComparer"
decl_stmt|;
specifier|static
specifier|final
name|Comparer
argument_list|<
name|byte
index|[]
argument_list|>
name|BEST_COMPARER
init|=
name|getBestComparer
argument_list|()
decl_stmt|;
comment|/**      * Returns the Unsafe-using Comparer, or falls back to the pure-Java      * implementation if unable to do so.      */
specifier|static
name|Comparer
argument_list|<
name|byte
index|[]
argument_list|>
name|getBestComparer
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|theClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|UNSAFE_COMPARER_NAME
argument_list|)
decl_stmt|;
comment|// yes, UnsafeComparer does implement Comparer<byte[]>
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Comparer
argument_list|<
name|byte
index|[]
argument_list|>
name|comparer
init|=
operator|(
name|Comparer
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|theClass
operator|.
name|getEnumConstants
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
return|return
name|comparer
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ensure we really catch *everything*
return|return
name|lexicographicalComparerJavaImpl
argument_list|()
return|;
block|}
block|}
enum|enum
name|PureJavaComparer
implements|implements
name|Comparer
argument_list|<
name|byte
index|[]
argument_list|>
block|{
name|INSTANCE
block|;
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|buffer1
parameter_list|,
name|int
name|offset1
parameter_list|,
name|int
name|length1
parameter_list|,
name|byte
index|[]
name|buffer2
parameter_list|,
name|int
name|offset2
parameter_list|,
name|int
name|length2
parameter_list|)
block|{
comment|// Short circuit equal case
if|if
condition|(
name|buffer1
operator|==
name|buffer2
operator|&&
name|offset1
operator|==
name|offset2
operator|&&
name|length1
operator|==
name|length2
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// Bring WritableComparator code local
name|int
name|end1
init|=
name|offset1
operator|+
name|length1
decl_stmt|;
name|int
name|end2
init|=
name|offset2
operator|+
name|length2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset1
operator|,
name|j
operator|=
name|offset2
condition|;
name|i
operator|<
name|end1
operator|&&
name|j
operator|<
name|end2
incr|;
control|i++
operator|,
control|j++)
block|{
name|int
name|a
init|=
operator|(
name|buffer1
index|[
name|i
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|b
init|=
operator|(
name|buffer2
index|[
name|j
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
condition|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
block|}
return|return
name|length1
operator|-
name|length2
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
enum|enum
name|UnsafeComparer
implements|implements
name|Comparer
argument_list|<
name|byte
index|[]
argument_list|>
block|{
name|INSTANCE
block|;
specifier|static
specifier|final
name|Unsafe
name|theUnsafe
decl_stmt|;
comment|/** The offset to the first element in a byte array. */
specifier|static
specifier|final
name|int
name|BYTE_ARRAY_BASE_OFFSET
decl_stmt|;
static|static
block|{
name|theUnsafe
operator|=
operator|(
name|Unsafe
operator|)
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
try|try
block|{
name|Field
name|f
init|=
name|Unsafe
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"theUnsafe"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
comment|// It doesn't matter what we throw;
comment|// it's swallowed in getBestComparer().
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|BYTE_ARRAY_BASE_OFFSET
operator|=
name|theUnsafe
operator|.
name|arrayBaseOffset
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
comment|// sanity check - this should never fail
if|if
condition|(
name|theUnsafe
operator|.
name|arrayIndexScale
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
specifier|static
specifier|final
name|boolean
name|littleEndian
init|=
name|ByteOrder
operator|.
name|nativeOrder
argument_list|()
operator|.
name|equals
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
decl_stmt|;
comment|/**        * Returns true if x1 is less than x2, when both values are treated as        * unsigned.        */
specifier|static
name|boolean
name|lessThanUnsigned
parameter_list|(
name|long
name|x1
parameter_list|,
name|long
name|x2
parameter_list|)
block|{
return|return
operator|(
name|x1
operator|+
name|Long
operator|.
name|MIN_VALUE
operator|)
operator|<
operator|(
name|x2
operator|+
name|Long
operator|.
name|MIN_VALUE
operator|)
return|;
block|}
comment|/**        * Lexicographically compare two arrays.        *        * @param buffer1 left operand        * @param buffer2 right operand        * @param offset1 Where to start comparing in the left buffer        * @param offset2 Where to start comparing in the right buffer        * @param length1 How much to compare from the left buffer        * @param length2 How much to compare from the right buffer        * @return 0 if equal,< 0 if left is less than right, etc.        */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|buffer1
parameter_list|,
name|int
name|offset1
parameter_list|,
name|int
name|length1
parameter_list|,
name|byte
index|[]
name|buffer2
parameter_list|,
name|int
name|offset2
parameter_list|,
name|int
name|length2
parameter_list|)
block|{
comment|// Short circuit equal case
if|if
condition|(
name|buffer1
operator|==
name|buffer2
operator|&&
name|offset1
operator|==
name|offset2
operator|&&
name|length1
operator|==
name|length2
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|minLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length1
argument_list|,
name|length2
argument_list|)
decl_stmt|;
name|int
name|minWords
init|=
name|minLength
operator|/
name|SIZEOF_LONG
decl_stmt|;
name|int
name|offset1Adj
init|=
name|offset1
operator|+
name|BYTE_ARRAY_BASE_OFFSET
decl_stmt|;
name|int
name|offset2Adj
init|=
name|offset2
operator|+
name|BYTE_ARRAY_BASE_OFFSET
decl_stmt|;
comment|/*          * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a          * time is no slower than comparing 4 bytes at a time even on 32-bit.          * On the other hand, it is substantially faster on 64-bit.          */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minWords
operator|*
name|SIZEOF_LONG
condition|;
name|i
operator|+=
name|SIZEOF_LONG
control|)
block|{
name|long
name|lw
init|=
name|theUnsafe
operator|.
name|getLong
argument_list|(
name|buffer1
argument_list|,
name|offset1Adj
operator|+
operator|(
name|long
operator|)
name|i
argument_list|)
decl_stmt|;
name|long
name|rw
init|=
name|theUnsafe
operator|.
name|getLong
argument_list|(
name|buffer2
argument_list|,
name|offset2Adj
operator|+
operator|(
name|long
operator|)
name|i
argument_list|)
decl_stmt|;
name|long
name|diff
init|=
name|lw
operator|^
name|rw
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|littleEndian
condition|)
block|{
return|return
name|lessThanUnsigned
argument_list|(
name|lw
argument_list|,
name|rw
argument_list|)
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
comment|// Use binary search
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|y
decl_stmt|;
name|int
name|x
init|=
operator|(
name|int
operator|)
name|diff
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
name|x
operator|=
call|(
name|int
call|)
argument_list|(
name|diff
operator|>>>
literal|32
argument_list|)
expr_stmt|;
name|n
operator|=
literal|32
expr_stmt|;
block|}
name|y
operator|=
name|x
operator|<<
literal|16
expr_stmt|;
if|if
condition|(
name|y
operator|==
literal|0
condition|)
block|{
name|n
operator|+=
literal|16
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
name|y
expr_stmt|;
block|}
name|y
operator|=
name|x
operator|<<
literal|8
expr_stmt|;
if|if
condition|(
name|y
operator|==
literal|0
condition|)
block|{
name|n
operator|+=
literal|8
expr_stmt|;
block|}
return|return
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|lw
operator|>>>
name|n
operator|)
operator|&
literal|0xFFL
operator|)
operator|-
operator|(
operator|(
name|rw
operator|>>>
name|n
operator|)
operator|&
literal|0xFFL
operator|)
argument_list|)
return|;
block|}
block|}
comment|// The epilogue to cover the last (minLength % 8) elements.
for|for
control|(
name|int
name|i
init|=
name|minWords
operator|*
name|SIZEOF_LONG
init|;
name|i
operator|<
name|minLength
condition|;
name|i
operator|++
control|)
block|{
name|int
name|a
init|=
operator|(
name|buffer1
index|[
name|offset1
operator|+
name|i
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|b
init|=
operator|(
name|buffer2
index|[
name|offset2
operator|+
name|i
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
condition|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
block|}
return|return
name|length1
operator|-
name|length2
return|;
block|}
block|}
block|}
comment|/**    * @param left left operand    * @param right right operand    * @return True if equal    */
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
specifier|final
name|byte
index|[]
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|right
parameter_list|)
block|{
comment|// Could use Arrays.equals?
comment|//noinspection SimplifiableConditionalExpression
if|if
condition|(
name|left
operator|==
name|right
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|left
operator|.
name|length
operator|!=
name|right
operator|.
name|length
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|left
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
comment|// Since we're often comparing adjacent sorted data,
comment|// it's usual to have equal arrays except for the very last byte
comment|// so check that first
if|if
condition|(
name|left
index|[
name|left
operator|.
name|length
operator|-
literal|1
index|]
operator|!=
name|right
index|[
name|right
operator|.
name|length
operator|-
literal|1
index|]
condition|)
return|return
literal|false
return|;
return|return
name|compareTo
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
specifier|final
name|byte
index|[]
name|left
parameter_list|,
name|int
name|leftOffset
parameter_list|,
name|int
name|leftLen
parameter_list|,
specifier|final
name|byte
index|[]
name|right
parameter_list|,
name|int
name|rightOffset
parameter_list|,
name|int
name|rightLen
parameter_list|)
block|{
comment|// short circuit case
if|if
condition|(
name|left
operator|==
name|right
operator|&&
name|leftOffset
operator|==
name|rightOffset
operator|&&
name|leftLen
operator|==
name|rightLen
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// different lengths fast check
if|if
condition|(
name|leftLen
operator|!=
name|rightLen
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|leftLen
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Since we're often comparing adjacent sorted data,
comment|// it's usual to have equal arrays except for the very last byte
comment|// so check that first
if|if
condition|(
name|left
index|[
name|leftOffset
operator|+
name|leftLen
operator|-
literal|1
index|]
operator|!=
name|right
index|[
name|rightOffset
operator|+
name|rightLen
operator|-
literal|1
index|]
condition|)
return|return
literal|false
return|;
return|return
name|LexicographicalComparerHolder
operator|.
name|BEST_COMPARER
operator|.
name|compareTo
argument_list|(
name|left
argument_list|,
name|leftOffset
argument_list|,
name|leftLen
argument_list|,
name|right
argument_list|,
name|rightOffset
argument_list|,
name|rightLen
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * @param a left operand    * @param buf right operand    * @return True if equal    */
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
return|return
name|buf
operator|==
literal|null
return|;
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|a
operator|.
name|length
operator|!=
name|buf
operator|.
name|remaining
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Thou shalt not modify the original byte buffer in what should be read only operations.
name|ByteBuffer
name|b
init|=
name|buf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|anA
range|:
name|a
control|)
block|{
if|if
condition|(
name|anA
operator|!=
name|b
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Return true if the byte array on the right is a prefix of the byte    * array on the left.    */
specifier|public
specifier|static
name|boolean
name|startsWith
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|prefix
parameter_list|)
block|{
return|return
name|bytes
operator|!=
literal|null
operator|&&
name|prefix
operator|!=
literal|null
operator|&&
name|bytes
operator|.
name|length
operator|>=
name|prefix
operator|.
name|length
operator|&&
name|LexicographicalComparerHolder
operator|.
name|BEST_COMPARER
operator|.
name|compareTo
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|prefix
operator|.
name|length
argument_list|,
name|prefix
argument_list|,
literal|0
argument_list|,
name|prefix
operator|.
name|length
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * @param b bytes to hash    * @return Runs {@link WritableComparator#hashBytes(byte[], int)} on the    * passed in array.  This method is what {@link org.apache.hadoop.io.Text}    * use calculating hash code.    */
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|hashCode
argument_list|(
name|b
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * @param b value    * @param length length of the value    * @return Runs {@link WritableComparator#hashBytes(byte[], int)} on the    * passed in array.  This method is what {@link org.apache.hadoop.io.Text}    * use calculating hash code.    */
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
return|return
name|WritableComparator
operator|.
name|hashBytes
argument_list|(
name|b
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * @param b bytes to hash    * @return A hash of<code>b</code> as an Integer that can be used as key in    * Maps.    */
specifier|public
specifier|static
name|Integer
name|mapKey
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|hashCode
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**    * @param b bytes to hash    * @param length length to hash    * @return A hash of<code>b</code> as an Integer that can be used as key in    * Maps.    */
specifier|public
specifier|static
name|Integer
name|mapKey
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
return|return
name|hashCode
argument_list|(
name|b
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * @param a lower half    * @param b upper half    * @return New array that has a in lower half and b in upper half.    */
specifier|public
specifier|static
name|byte
index|[]
name|add
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|EMPTY_BYTE_ARRAY
argument_list|)
return|;
block|}
comment|/**    * @param a first third    * @param b second third    * @param c third third    * @return New array made from a, b and c    */
specifier|public
specifier|static
name|byte
index|[]
name|add
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|byte
index|[]
name|c
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|a
operator|.
name|length
operator|+
name|b
operator|.
name|length
operator|+
name|c
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|a
operator|.
name|length
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|a
operator|.
name|length
operator|+
name|b
operator|.
name|length
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param a array    * @param length amount of bytes to grab    * @return First<code>length</code> bytes from<code>a</code>    */
specifier|public
specifier|static
name|byte
index|[]
name|head
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|<
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param a array    * @param length amount of bytes to snarf    * @return Last<code>length</code> bytes from<code>a</code>    */
specifier|public
specifier|static
name|byte
index|[]
name|tail
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|<
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|a
argument_list|,
name|a
operator|.
name|length
operator|-
name|length
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @param a array    * @param length new array size    * @return Value in<code>a</code> plus<code>length</code> prepended 0 bytes    */
specifier|public
specifier|static
name|byte
index|[]
name|padHead
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|padding
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|padding
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|add
argument_list|(
name|padding
argument_list|,
name|a
argument_list|)
return|;
block|}
comment|/**    * @param a array    * @param length new array size    * @return Value in<code>a</code> plus<code>length</code> appended 0 bytes    */
specifier|public
specifier|static
name|byte
index|[]
name|padTail
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|padding
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|padding
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|add
argument_list|(
name|a
argument_list|,
name|padding
argument_list|)
return|;
block|}
comment|/**    * Split passed range.  Expensive operation relatively.  Uses BigInteger math.    * Useful splitting ranges for MapReduce jobs.    * @param a Beginning of range    * @param b End of range    * @param num Number of times to split range.  Pass 1 if you want to split    * the range in two; i.e. one split.    * @return Array of dividing values    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|split
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|num
parameter_list|)
block|{
return|return
name|split
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|false
argument_list|,
name|num
argument_list|)
return|;
block|}
comment|/**    * Split passed range.  Expensive operation relatively.  Uses BigInteger math.    * Useful splitting ranges for MapReduce jobs.    * @param a Beginning of range    * @param b End of range    * @param inclusive Whether the end of range is prefix-inclusive or is    * considered an exclusive boundary.  Automatic splits are generally exclusive    * and manual splits with an explicit range utilize an inclusive end of range.    * @param num Number of times to split range.  Pass 1 if you want to split    * the range in two; i.e. one split.    * @return Array of dividing values    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|split
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|,
name|boolean
name|inclusive
parameter_list|,
specifier|final
name|int
name|num
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|num
operator|+
literal|2
index|]
index|[]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|iter
init|=
name|iterateOnSplits
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|inclusive
argument_list|,
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|byte
index|[]
name|elem
range|:
name|iter
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|elem
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Iterate over keys within the passed range, splitting at an [a,b) boundary.    */
specifier|public
specifier|static
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|iterateOnSplits
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|num
parameter_list|)
block|{
return|return
name|iterateOnSplits
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|false
argument_list|,
name|num
argument_list|)
return|;
block|}
comment|/**    * Iterate over keys within the passed range.    */
specifier|public
specifier|static
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
name|iterateOnSplits
parameter_list|(
specifier|final
name|byte
index|[]
name|a
parameter_list|,
specifier|final
name|byte
index|[]
name|b
parameter_list|,
name|boolean
name|inclusive
parameter_list|,
specifier|final
name|int
name|num
parameter_list|)
block|{
name|byte
index|[]
name|aPadded
decl_stmt|;
name|byte
index|[]
name|bPadded
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|length
operator|<
name|b
operator|.
name|length
condition|)
block|{
name|aPadded
operator|=
name|padTail
argument_list|(
name|a
argument_list|,
name|b
operator|.
name|length
operator|-
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
name|bPadded
operator|=
name|b
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|.
name|length
operator|<
name|a
operator|.
name|length
condition|)
block|{
name|aPadded
operator|=
name|a
expr_stmt|;
name|bPadded
operator|=
name|padTail
argument_list|(
name|b
argument_list|,
name|a
operator|.
name|length
operator|-
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aPadded
operator|=
name|a
expr_stmt|;
name|bPadded
operator|=
name|b
expr_stmt|;
block|}
if|if
condition|(
name|compareTo
argument_list|(
name|aPadded
argument_list|,
name|bPadded
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"b<= a"
argument_list|)
throw|;
block|}
if|if
condition|(
name|num
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"num cannot be<= 0"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|prependHeader
init|=
block|{
literal|1
block|,
literal|0
block|}
decl_stmt|;
specifier|final
name|BigInteger
name|startBI
init|=
operator|new
name|BigInteger
argument_list|(
name|add
argument_list|(
name|prependHeader
argument_list|,
name|aPadded
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BigInteger
name|stopBI
init|=
operator|new
name|BigInteger
argument_list|(
name|add
argument_list|(
name|prependHeader
argument_list|,
name|bPadded
argument_list|)
argument_list|)
decl_stmt|;
name|BigInteger
name|diffBI
init|=
name|stopBI
operator|.
name|subtract
argument_list|(
name|startBI
argument_list|)
decl_stmt|;
if|if
condition|(
name|inclusive
condition|)
block|{
name|diffBI
operator|=
name|diffBI
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BigInteger
name|splitsBI
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|num
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffBI
operator|.
name|compareTo
argument_list|(
name|splitsBI
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|BigInteger
name|intervalBI
decl_stmt|;
try|try
block|{
name|intervalBI
operator|=
name|diffBI
operator|.
name|divide
argument_list|(
name|splitsBI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception caught during division"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|iterator
init|=
operator|new
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|<
name|num
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|next
parameter_list|()
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|a
return|;
if|if
condition|(
name|i
operator|==
name|num
operator|+
literal|1
condition|)
return|return
name|b
return|;
name|BigInteger
name|curBI
init|=
name|startBI
operator|.
name|add
argument_list|(
name|intervalBI
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|padded
init|=
name|curBI
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|padded
index|[
literal|1
index|]
operator|==
literal|0
condition|)
name|padded
operator|=
name|tail
argument_list|(
name|padded
argument_list|,
name|padded
operator|.
name|length
operator|-
literal|2
argument_list|)
expr_stmt|;
else|else
name|padded
operator|=
name|tail
argument_list|(
name|padded
argument_list|,
name|padded
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|padded
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|iterator
return|;
block|}
block|}
return|;
block|}
comment|/**    * @param bytes array to hash    * @param offset offset to start from    * @param length length to hash    * */
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|hash
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|length
condition|;
name|i
operator|++
control|)
name|hash
operator|=
operator|(
literal|31
operator|*
name|hash
operator|)
operator|+
operator|(
name|int
operator|)
name|bytes
index|[
name|i
index|]
expr_stmt|;
return|return
name|hash
return|;
block|}
comment|/**    * @param t operands    * @return Array of byte arrays made from passed array of Text    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|toByteArrays
parameter_list|(
specifier|final
name|String
index|[]
name|t
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|t
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|t
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param column operand    * @return A byte array of a byte array where first and only entry is    *<code>column</code>    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|toByteArrays
parameter_list|(
specifier|final
name|String
name|column
parameter_list|)
block|{
return|return
name|toByteArrays
argument_list|(
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param column operand    * @return A byte array of a byte array where first and only entry is    *<code>column</code>    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|toByteArrays
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|column
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Binary search for keys in indexes.    *    * @param arr array of byte arrays to search for    * @param key the key you want to find    * @param offset the offset in the key you want to find    * @param length the length of the key    * @param comparator a comparator to compare.    * @return zero-based index of the key, if the key is present in the array.    *         Otherwise, a value -(i + 1) such that the key is between arr[i -    *         1] and arr[i] non-inclusively, where i is in [0, i], if we define    *         arr[-1] = -Inf and arr[N] = Inf for an N-element array. The above    *         means that this function can return 2N + 1 different values    *         ranging from -(N + 1) to N - 1.    */
specifier|public
specifier|static
name|int
name|binarySearch
parameter_list|(
name|byte
index|[]
index|[]
name|arr
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|RawComparator
argument_list|<
name|?
argument_list|>
name|comparator
parameter_list|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|arr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
comment|// we have to compare in this order, because the comparator order
comment|// has special logic when the 'left side' is a special key.
name|int
name|cmp
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|arr
index|[
name|mid
index|]
argument_list|,
literal|0
argument_list|,
name|arr
index|[
name|mid
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// key lives above the midpoint
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
comment|// key lives below the midpoint
elseif|else
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
comment|// BAM. how often does this really happen?
else|else
return|return
name|mid
return|;
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
block|}
comment|/**    * Binary search for keys in indexes.    *    * @param arr array of byte arrays to search for    * @param key the key you want to find    * @param comparator a comparator to compare.    * @return zero-based index of the key, if the key is present in the array.    *         Otherwise, a value -(i + 1) such that the key is between arr[i -    *         1] and arr[i] non-inclusively, where i is in [0, i], if we define    *         arr[-1] = -Inf and arr[N] = Inf for an N-element array. The above    *         means that this function can return 2N + 1 different values    *         ranging from -(N + 1) to N - 1.    * @return the index of the block    */
specifier|public
specifier|static
name|int
name|binarySearch
parameter_list|(
name|byte
index|[]
index|[]
name|arr
parameter_list|,
name|Cell
name|key
parameter_list|,
name|RawComparator
argument_list|<
name|Cell
argument_list|>
name|comparator
parameter_list|)
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|arr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|KeyValue
operator|.
name|KeyOnlyKeyValue
name|r
init|=
operator|new
name|KeyValue
operator|.
name|KeyOnlyKeyValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
comment|// we have to compare in this order, because the comparator order
comment|// has special logic when the 'left side' is a special key.
name|r
operator|.
name|setKey
argument_list|(
name|arr
index|[
name|mid
index|]
argument_list|,
literal|0
argument_list|,
name|arr
index|[
name|mid
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|cmp
init|=
name|comparator
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|r
argument_list|)
decl_stmt|;
comment|// key lives above the midpoint
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
comment|// key lives below the midpoint
elseif|else
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
comment|// BAM. how often does this really happen?
else|else
return|return
name|mid
return|;
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
block|}
comment|/**    * Bytewise binary increment/deincrement of long contained in byte array    * on given amount.    *    * @param value - array of bytes containing long (length<= SIZEOF_LONG)    * @param amount value will be incremented on (deincremented if negative)    * @return array of bytes containing incremented long (length == SIZEOF_LONG)    */
specifier|public
specifier|static
name|byte
index|[]
name|incrementBytes
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
name|byte
index|[]
name|val
init|=
name|value
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|length
operator|<
name|SIZEOF_LONG
condition|)
block|{
comment|// Hopefully this doesn't happen too often.
name|byte
index|[]
name|newvalue
decl_stmt|;
if|if
condition|(
name|val
index|[
literal|0
index|]
operator|<
literal|0
condition|)
block|{
name|newvalue
operator|=
operator|new
name|byte
index|[]
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
expr_stmt|;
block|}
else|else
block|{
name|newvalue
operator|=
operator|new
name|byte
index|[
name|SIZEOF_LONG
index|]
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
name|newvalue
argument_list|,
name|newvalue
operator|.
name|length
operator|-
name|val
operator|.
name|length
argument_list|,
name|val
operator|.
name|length
argument_list|)
expr_stmt|;
name|val
operator|=
name|newvalue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|length
operator|>
name|SIZEOF_LONG
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Increment Bytes - value too big: "
operator|+
name|val
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
return|return
name|val
return|;
if|if
condition|(
name|val
index|[
literal|0
index|]
operator|<
literal|0
condition|)
block|{
return|return
name|binaryIncrementNeg
argument_list|(
name|val
argument_list|,
name|amount
argument_list|)
return|;
block|}
return|return
name|binaryIncrementPos
argument_list|(
name|val
argument_list|,
name|amount
argument_list|)
return|;
block|}
comment|/* increment/deincrement for positive value */
specifier|private
specifier|static
name|byte
index|[]
name|binaryIncrementPos
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
name|long
name|amo
init|=
name|amount
decl_stmt|;
name|int
name|sign
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|amount
operator|<
literal|0
condition|)
block|{
name|amo
operator|=
operator|-
name|amount
expr_stmt|;
name|sign
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cur
init|=
operator|(
operator|(
name|int
operator|)
name|amo
operator|%
literal|256
operator|)
operator|*
name|sign
decl_stmt|;
name|amo
operator|=
operator|(
name|amo
operator|>>
literal|8
operator|)
expr_stmt|;
name|int
name|val
init|=
name|value
index|[
name|value
operator|.
name|length
operator|-
name|i
operator|-
literal|1
index|]
operator|&
literal|0x0ff
decl_stmt|;
name|int
name|total
init|=
name|val
operator|+
name|cur
decl_stmt|;
if|if
condition|(
name|total
operator|>
literal|255
condition|)
block|{
name|amo
operator|+=
name|sign
expr_stmt|;
name|total
operator|%=
literal|256
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|total
operator|<
literal|0
condition|)
block|{
name|amo
operator|-=
name|sign
expr_stmt|;
block|}
name|value
index|[
name|value
operator|.
name|length
operator|-
name|i
operator|-
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|total
expr_stmt|;
if|if
condition|(
name|amo
operator|==
literal|0
condition|)
return|return
name|value
return|;
block|}
return|return
name|value
return|;
block|}
comment|/* increment/deincrement for negative value */
specifier|private
specifier|static
name|byte
index|[]
name|binaryIncrementNeg
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
name|long
name|amo
init|=
name|amount
decl_stmt|;
name|int
name|sign
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|amount
operator|<
literal|0
condition|)
block|{
name|amo
operator|=
operator|-
name|amount
expr_stmt|;
name|sign
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cur
init|=
operator|(
operator|(
name|int
operator|)
name|amo
operator|%
literal|256
operator|)
operator|*
name|sign
decl_stmt|;
name|amo
operator|=
operator|(
name|amo
operator|>>
literal|8
operator|)
expr_stmt|;
name|int
name|val
init|=
operator|(
operator|(
operator|~
name|value
index|[
name|value
operator|.
name|length
operator|-
name|i
operator|-
literal|1
index|]
operator|)
operator|&
literal|0x0ff
operator|)
operator|+
literal|1
decl_stmt|;
name|int
name|total
init|=
name|cur
operator|-
name|val
decl_stmt|;
if|if
condition|(
name|total
operator|>=
literal|0
condition|)
block|{
name|amo
operator|+=
name|sign
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|total
operator|<
operator|-
literal|256
condition|)
block|{
name|amo
operator|-=
name|sign
expr_stmt|;
name|total
operator|%=
literal|256
expr_stmt|;
block|}
name|value
index|[
name|value
operator|.
name|length
operator|-
name|i
operator|-
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
name|total
expr_stmt|;
if|if
condition|(
name|amo
operator|==
literal|0
condition|)
return|return
name|value
return|;
block|}
return|return
name|value
return|;
block|}
comment|/**    * Writes a string as a fixed-size field, padded with zeros.    */
specifier|public
specifier|static
name|void
name|writeStringFixedSize
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|,
name|String
name|s
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
name|toBytes
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|length
operator|>
name|size
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Trying to write "
operator|+
name|b
operator|.
name|length
operator|+
literal|" bytes ("
operator|+
name|toStringBinary
argument_list|(
name|b
argument_list|)
operator|+
literal|") into a field of length "
operator|+
name|size
argument_list|)
throw|;
block|}
name|out
operator|.
name|writeBytes
argument_list|(
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|-
name|s
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
name|out
operator|.
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reads a fixed-size field and interprets it as a string padded with zeros.    */
specifier|public
specifier|static
name|String
name|readStringFixedSize
parameter_list|(
specifier|final
name|DataInput
name|in
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|b
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|n
operator|>
literal|0
operator|&&
name|b
index|[
name|n
operator|-
literal|1
index|]
operator|==
literal|0
condition|)
operator|--
name|n
expr_stmt|;
return|return
name|toString
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**    * Copy the byte array given in parameter and return an instance    * of a new byte array with the same length and the same content.    * @param bytes the byte array to duplicate    * @return a copy of the given byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|copy
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|bytes
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Copy the byte array given in parameter and return an instance    * of a new byte array with the same length and the same content.    * @param bytes the byte array to copy from    * @return a copy of the given designated byte array    * @param offset    * @param length    */
specifier|public
specifier|static
name|byte
index|[]
name|copy
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Search sorted array "a" for byte "key". I can't remember if I wrote this or copied it from    * somewhere. (mcorgan)    * @param a Array to search. Entries must be sorted and unique.    * @param fromIndex First index inclusive of "a" to include in the search.    * @param toIndex Last index exclusive of "a" to include in the search.    * @param key The byte to search for.    * @return The index of key if found. If not found, return -(index + 1), where negative indicates    *         "not found" and the "index + 1" handles the "-0" case.    */
specifier|public
specifier|static
name|int
name|unsignedBinarySearch
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|,
name|byte
name|key
parameter_list|)
block|{
name|int
name|unsignedKey
init|=
name|key
operator|&
literal|0xff
decl_stmt|;
name|int
name|low
init|=
name|fromIndex
decl_stmt|;
name|int
name|high
init|=
name|toIndex
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|midVal
init|=
name|a
index|[
name|mid
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|midVal
operator|<
name|unsignedKey
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|midVal
operator|>
name|unsignedKey
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
return|return
name|mid
return|;
comment|// key found
block|}
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
comment|// key not found.
block|}
comment|/**    * Treat the byte[] as an unsigned series of bytes, most significant bits first.  Start by adding    * 1 to the rightmost bit/byte and carry over all overflows to the more significant bits/bytes.    *    * @param input The byte[] to increment.    * @return The incremented copy of "in".  May be same length or 1 byte longer.    */
specifier|public
specifier|static
name|byte
index|[]
name|unsignedCopyAndIncrement
parameter_list|(
specifier|final
name|byte
index|[]
name|input
parameter_list|)
block|{
name|byte
index|[]
name|copy
init|=
name|copy
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|copy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot increment null array"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
name|copy
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|copy
index|[
name|i
index|]
operator|==
operator|-
literal|1
condition|)
block|{
comment|// -1 is all 1-bits, which is the unsigned maximum
name|copy
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|copy
index|[
name|i
index|]
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
comment|// we maxed out the array
name|byte
index|[]
name|out
init|=
operator|new
name|byte
index|[
name|copy
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|out
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|copy
argument_list|,
literal|0
argument_list|,
name|out
argument_list|,
literal|1
argument_list|,
name|copy
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|a
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|!=
name|b
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|b
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isSorted
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|arrays
parameter_list|)
block|{
name|byte
index|[]
name|previous
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|array
range|:
name|IterableUtils
operator|.
name|nullSafe
argument_list|(
name|arrays
argument_list|)
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|previous
argument_list|,
name|array
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|previous
operator|=
name|array
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getUtf8ByteArrays
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|byteArrays
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|CollectionUtils
operator|.
name|nullSafeSize
argument_list|(
name|strings
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|IterableUtils
operator|.
name|nullSafe
argument_list|(
name|strings
argument_list|)
control|)
block|{
name|byteArrays
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|byteArrays
return|;
block|}
comment|/**    * Returns the index of the first appearance of the value {@code target} in    * {@code array}.    *    * @param array an array of {@code byte} values, possibly empty    * @param target a primitive {@code byte} value    * @return the least index {@code i} for which {@code array[i] == target}, or    *     {@code -1} if no such index exists.    */
specifier|public
specifier|static
name|int
name|indexOf
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|byte
name|target
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
index|]
operator|==
name|target
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Returns the start position of the first occurrence of the specified {@code    * target} within {@code array}, or {@code -1} if there is no such occurrence.    *    *<p>More formally, returns the lowest index {@code i} such that {@code    * java.util.Arrays.copyOfRange(array, i, i + target.length)} contains exactly    * the same elements as {@code target}.    *    * @param array the array to search for the sequence {@code target}    * @param target the array to search for as a sub-sequence of {@code array}    */
specifier|public
specifier|static
name|int
name|indexOf
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|byte
index|[]
name|target
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|array
argument_list|,
literal|"array"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|outer
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
operator|-
name|target
operator|.
name|length
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|target
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|target
index|[
name|j
index|]
condition|)
block|{
continue|continue
name|outer
continue|;
block|}
block|}
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * @param array an array of {@code byte} values, possibly empty    * @param target a primitive {@code byte} value    * @return {@code true} if {@code target} is present as an element anywhere in {@code array}.    */
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|byte
name|target
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|array
argument_list|,
name|target
argument_list|)
operator|>
operator|-
literal|1
return|;
block|}
comment|/**    * @param array an array of {@code byte} values, possibly empty    * @param target an array of {@code byte}    * @return {@code true} if {@code target} is present anywhere in {@code array}    */
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|byte
index|[]
name|target
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|array
argument_list|,
name|target
argument_list|)
operator|>
operator|-
literal|1
return|;
block|}
comment|/**    * Fill given array with zeros.    * @param b array which needs to be filled with zeros    */
specifier|public
specifier|static
name|void
name|zero
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|zero
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fill given array with zeros at the specified position.    * @param b    * @param offset    * @param length    */
specifier|public
specifier|static
name|void
name|zero
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|checkPositionIndex
argument_list|(
name|offset
argument_list|,
name|b
operator|.
name|length
argument_list|,
literal|"offset"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|length
operator|>
literal|0
argument_list|,
literal|"length must be greater than 0"
argument_list|)
expr_stmt|;
name|checkPositionIndex
argument_list|(
name|offset
operator|+
name|length
argument_list|,
name|b
operator|.
name|length
argument_list|,
literal|"offset + length"
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|SecureRandom
name|RNG
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
comment|/**    * Fill given array with random bytes.    * @param b array which needs to be filled with random bytes    */
specifier|public
specifier|static
name|void
name|random
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|RNG
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fill given array with random bytes at the specified position.    * @param b    * @param offset    * @param length    */
specifier|public
specifier|static
name|void
name|random
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|checkPositionIndex
argument_list|(
name|offset
argument_list|,
name|b
operator|.
name|length
argument_list|,
literal|"offset"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|length
operator|>
literal|0
argument_list|,
literal|"length must be greater than 0"
argument_list|)
expr_stmt|;
name|checkPositionIndex
argument_list|(
name|offset
operator|+
name|length
argument_list|,
name|b
operator|.
name|length
argument_list|,
literal|"offset + length"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|RNG
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a max byte array with the specified max byte count    * @param maxByteCount the length of returned byte array    * @return the created max byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|createMaxByteArray
parameter_list|(
name|int
name|maxByteCount
parameter_list|)
block|{
name|byte
index|[]
name|maxByteArray
init|=
operator|new
name|byte
index|[
name|maxByteCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxByteArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|maxByteArray
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xff
expr_stmt|;
block|}
return|return
name|maxByteArray
return|;
block|}
comment|/**    * Create a byte array which is multiple given bytes    * @param srcBytes    * @param multiNum    * @return byte array    */
specifier|public
specifier|static
name|byte
index|[]
name|multiple
parameter_list|(
name|byte
index|[]
name|srcBytes
parameter_list|,
name|int
name|multiNum
parameter_list|)
block|{
if|if
condition|(
name|multiNum
operator|<=
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|srcBytes
operator|.
name|length
operator|*
name|multiNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multiNum
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|srcBytes
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|i
operator|*
name|srcBytes
operator|.
name|length
argument_list|,
name|srcBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert a byte array into a hex string    * @param b    */
specifier|public
specifier|static
name|String
name|toHex
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|b
operator|.
name|length
operator|>
literal|0
argument_list|,
literal|"length must be greater than 0"
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%x"
argument_list|,
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|b
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a byte array from a string of hash digits. The length of the    * string must be a multiple of 2    * @param hex    */
specifier|public
specifier|static
name|byte
index|[]
name|fromHex
parameter_list|(
name|String
name|hex
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|hex
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|,
literal|"length must be greater than 0"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|hex
operator|.
name|length
argument_list|()
operator|%
literal|2
operator|==
literal|0
argument_list|,
literal|"length must be a multiple of 2"
argument_list|)
expr_stmt|;
comment|// Make sure letters are upper case
name|hex
operator|=
name|hex
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|hex
operator|.
name|length
argument_list|()
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|toBinaryFromHex
argument_list|(
operator|(
name|byte
operator|)
name|hex
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
operator|<<
literal|4
operator|)
operator|+
name|toBinaryFromHex
argument_list|(
operator|(
name|byte
operator|)
name|hex
operator|.
name|charAt
argument_list|(
operator|(
literal|2
operator|*
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

