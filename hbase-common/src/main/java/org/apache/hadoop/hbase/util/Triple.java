begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Utility class to manage a triple.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Triple
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|,
name|C
parameter_list|>
block|{
specifier|private
name|A
name|first
decl_stmt|;
specifier|private
name|B
name|second
decl_stmt|;
specifier|private
name|C
name|third
decl_stmt|;
comment|// default constructor
specifier|public
name|Triple
parameter_list|()
block|{    }
specifier|public
name|Triple
parameter_list|(
name|A
name|first
parameter_list|,
name|B
name|second
parameter_list|,
name|C
name|third
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
name|this
operator|.
name|third
operator|=
name|third
expr_stmt|;
block|}
comment|// ctor cannot infer types w/o warning but a method can.
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|,
name|C
parameter_list|>
name|Triple
argument_list|<
name|A
argument_list|,
name|B
argument_list|,
name|C
argument_list|>
name|create
parameter_list|(
name|A
name|first
parameter_list|,
name|B
name|second
parameter_list|,
name|C
name|third
parameter_list|)
block|{
return|return
operator|new
name|Triple
argument_list|<>
argument_list|(
name|first
argument_list|,
name|second
argument_list|,
name|third
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashFirst
init|=
operator|(
name|first
operator|!=
literal|null
condition|?
name|first
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|hashSecond
init|=
operator|(
name|second
operator|!=
literal|null
condition|?
name|second
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|hashThird
init|=
operator|(
name|third
operator|!=
literal|null
condition|?
name|third
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
decl_stmt|;
return|return
operator|(
name|hashFirst
operator|>>
literal|1
operator|)
operator|^
name|hashSecond
operator|^
operator|(
name|hashThird
operator|<<
literal|1
operator|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Triple
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Triple
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|otherTriple
init|=
operator|(
name|Triple
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|first
operator|!=
name|otherTriple
operator|.
name|first
operator|&&
operator|(
name|first
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|first
operator|.
name|equals
argument_list|(
name|otherTriple
operator|.
name|first
argument_list|)
operator|)
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|second
operator|!=
name|otherTriple
operator|.
name|second
operator|&&
operator|(
name|second
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|second
operator|.
name|equals
argument_list|(
name|otherTriple
operator|.
name|second
argument_list|)
operator|)
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|third
operator|!=
name|otherTriple
operator|.
name|third
operator|&&
operator|(
name|third
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|third
operator|.
name|equals
argument_list|(
name|otherTriple
operator|.
name|third
argument_list|)
operator|)
operator|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|first
operator|+
literal|", "
operator|+
name|second
operator|+
literal|","
operator|+
name|third
operator|+
literal|" )"
return|;
block|}
specifier|public
name|A
name|getFirst
parameter_list|()
block|{
return|return
name|first
return|;
block|}
specifier|public
name|void
name|setFirst
parameter_list|(
name|A
name|first
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
block|}
specifier|public
name|B
name|getSecond
parameter_list|()
block|{
return|return
name|second
return|;
block|}
specifier|public
name|void
name|setSecond
parameter_list|(
name|B
name|second
parameter_list|)
block|{
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
block|}
specifier|public
name|C
name|getThird
parameter_list|()
block|{
return|return
name|third
return|;
block|}
specifier|public
name|void
name|setThird
parameter_list|(
name|C
name|third
parameter_list|)
block|{
name|this
operator|.
name|third
operator|=
name|third
expr_stmt|;
block|}
block|}
end_class

end_unit

