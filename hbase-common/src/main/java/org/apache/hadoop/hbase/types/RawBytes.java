begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PositionedByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * An {@code DataType} for interacting with variable-length values  * encoded using {@link Bytes#putBytes(byte[], int, byte[], int, int)}.  * Intended to make it easier to transition away from direct use of  * {@link Bytes}.  * @see Bytes#putBytes(byte[], int, byte[], int, int)  * @see RawBytesTerminated  * @see RawBytesFixedLength  * @see OrderedBlob  * @see OrderedBlobVar  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|RawBytes
implements|implements
name|DataType
argument_list|<
name|byte
index|[]
argument_list|>
block|{
comment|/**    * @deprecated since 3.0.0 and will be removed in 4.0.0    */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|RawBytes
name|ASCENDING
init|=
operator|new
name|RawBytes
argument_list|(
name|Order
operator|.
name|ASCENDING
argument_list|)
decl_stmt|;
comment|/**    * @deprecated since 3.0.0 and will be removed in 4.0.0    */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|RawBytes
name|DESCENDING
init|=
operator|new
name|RawBytes
argument_list|(
name|Order
operator|.
name|DESCENDING
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Order
name|order
decl_stmt|;
comment|/**    * @deprecated since 3.0.0 and will be removed in 4.0.0    */
annotation|@
name|Deprecated
specifier|public
name|RawBytes
parameter_list|()
block|{
name|this
operator|.
name|order
operator|=
name|Order
operator|.
name|ASCENDING
expr_stmt|;
block|}
comment|/**    * Creates a new {@link DataType} with variable-length values.    *    * @param order the {@link Order} to use    */
specifier|public
name|RawBytes
parameter_list|(
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOrderPreserving
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNullable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSkippable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|skip
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
name|int
name|skipped
init|=
name|src
operator|.
name|getRemaining
argument_list|()
decl_stmt|;
name|src
operator|.
name|setPosition
argument_list|(
name|src
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|skipped
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|encodedLength
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
block|{
return|return
name|val
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|byte
index|[]
argument_list|>
name|encodedClass
parameter_list|()
block|{
return|return
name|byte
index|[]
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|decode
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|)
block|{
return|return
name|decode
argument_list|(
name|src
argument_list|,
name|src
operator|.
name|getRemaining
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|encode
parameter_list|(
name|PositionedByteRange
name|dst
parameter_list|,
name|byte
index|[]
name|val
parameter_list|)
block|{
return|return
name|encode
argument_list|(
name|dst
argument_list|,
name|val
argument_list|,
literal|0
argument_list|,
name|val
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Read a {@code byte[]} from the buffer {@code src}.    *    * @param src the {@link PositionedByteRange} to read the {@code byte[]} from    * @param length the length to read from the buffer    * @return the {@code byte[]} read from the buffer    */
specifier|public
name|byte
index|[]
name|decode
parameter_list|(
name|PositionedByteRange
name|src
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|val
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|src
operator|.
name|get
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
comment|/**    * Write {@code val} into {@code dst}, respecting {@code voff} and {@code vlen}.    *    * @param dst the {@link PositionedByteRange} to write to    * @param val the value to write to {@code dst}    * @param voff the offset in {@code dst} where to write {@code val} to    * @param vlen the length of {@code val}    * @return number of bytes written    */
specifier|public
name|int
name|encode
parameter_list|(
name|PositionedByteRange
name|dst
parameter_list|,
name|byte
index|[]
name|val
parameter_list|,
name|int
name|voff
parameter_list|,
name|int
name|vlen
parameter_list|)
block|{
name|Bytes
operator|.
name|putBytes
argument_list|(
name|dst
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dst
operator|.
name|getOffset
argument_list|()
operator|+
name|dst
operator|.
name|getPosition
argument_list|()
argument_list|,
name|val
argument_list|,
name|voff
argument_list|,
name|vlen
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setPosition
argument_list|(
name|dst
operator|.
name|getPosition
argument_list|()
operator|+
name|vlen
argument_list|)
expr_stmt|;
return|return
name|vlen
return|;
block|}
block|}
end_class

end_unit

