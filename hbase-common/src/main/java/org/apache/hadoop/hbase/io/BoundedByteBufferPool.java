begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Like Hadoops' ByteBufferPool only you do not specify desired size when getting a ByteBuffer. We  * also keep upper bounds on ByteBuffer size and amount of ByteBuffers we keep int the pool hence  * it is 'bounded' as opposed to 'elastic' as in ElasticByteBuffferPool If a ByteBuffer is bigger  * than a threshold, we will just let the ByteBuffer go rather than keep it around. If more  * ByteBuffers than configured maximum instances, then we do not cache either (we will log a  * WARN in this case).  *   *<p>The intended use case is a reservoir of bytebuffers that an RPC can reuse; buffers tend to  * achieve a particular 'run' size over time give or take a few extremes.  *   *<p>Thread safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BoundedByteBufferPool
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
class|class
name|Key
implements|implements
name|Comparable
argument_list|<
name|Key
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
name|Key
parameter_list|(
specifier|final
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Key
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|capacity
operator|<
name|that
operator|.
name|capacity
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|this
operator|.
name|capacity
operator|>
name|that
operator|.
name|capacity
condition|)
return|return
literal|1
return|;
return|return
name|this
operator|.
name|hashCode
argument_list|()
operator|-
name|that
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|final
name|NavigableMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
name|buffers
init|=
operator|new
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxByteBufferSizeToCache
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxToCache
decl_stmt|;
comment|// A running average only it just rises, never recedes
specifier|private
name|int
name|runningAverage
decl_stmt|;
specifier|private
name|int
name|totalReservoirCapacity
decl_stmt|;
comment|/**    * @param maxByteBufferSizeToCache    * @param initialByteBufferSize    * @param maxToCache    */
specifier|public
name|BoundedByteBufferPool
parameter_list|(
specifier|final
name|int
name|maxByteBufferSizeToCache
parameter_list|,
specifier|final
name|int
name|initialByteBufferSize
parameter_list|,
specifier|final
name|int
name|maxToCache
parameter_list|)
block|{
name|this
operator|.
name|maxByteBufferSizeToCache
operator|=
name|maxByteBufferSizeToCache
expr_stmt|;
name|this
operator|.
name|runningAverage
operator|=
name|initialByteBufferSize
expr_stmt|;
name|this
operator|.
name|maxToCache
operator|=
name|maxToCache
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|ByteBuffer
name|getBuffer
parameter_list|()
block|{
name|Key
name|key
init|=
name|this
operator|.
name|buffers
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|this
operator|.
name|buffers
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|bb
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|this
operator|.
name|runningAverage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bb
operator|=
name|this
operator|.
name|buffers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|bb
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
name|bb
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalReservoirCapacity
operator|-=
name|bb
operator|.
name|capacity
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"runningAverage="
operator|+
name|this
operator|.
name|runningAverage
operator|+
literal|", totalCapacity="
operator|+
name|this
operator|.
name|totalReservoirCapacity
operator|+
literal|", count="
operator|+
name|this
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bb
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|putBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
comment|// If buffer is larger than we want to keep around, just let it go.
if|if
condition|(
name|buffer
operator|.
name|capacity
argument_list|()
operator|>
name|this
operator|.
name|maxByteBufferSizeToCache
condition|)
return|return;
comment|// futureSize is how many byte buffers the reservoir will have if this method succeeds.
name|int
name|futureSize
init|=
name|this
operator|.
name|buffers
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|futureSize
operator|>
name|this
operator|.
name|maxToCache
condition|)
block|{
comment|// If at max size, something is wrong. WARN.
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|warn
argument_list|(
literal|"At capacity: "
operator|+
name|futureSize
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|totalReservoirCapacity
operator|+=
name|buffer
operator|.
name|capacity
argument_list|()
expr_stmt|;
name|int
name|average
init|=
name|this
operator|.
name|totalReservoirCapacity
operator|/
name|futureSize
decl_stmt|;
if|if
condition|(
name|average
operator|>
name|this
operator|.
name|runningAverage
operator|&&
name|average
operator|<
name|this
operator|.
name|maxByteBufferSizeToCache
condition|)
block|{
name|this
operator|.
name|runningAverage
operator|=
name|average
expr_stmt|;
block|}
name|this
operator|.
name|buffers
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|buffer
operator|.
name|capacity
argument_list|()
argument_list|)
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

