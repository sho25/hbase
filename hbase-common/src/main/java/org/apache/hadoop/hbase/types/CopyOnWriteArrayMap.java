begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_comment
comment|/**  * A Map that keeps a sorted array in order to provide the concurrent map interface.  * Keeping a sorted array means that it's much more cache line friendly, making reads faster  * than the tree version.  *  * In order to make concurrent reads and writes safe this does a copy on write.  * There can only be one concurrent write at a time.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|CopyOnWriteArrayMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|ConcurrentNavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|keyComparator
decl_stmt|;
specifier|private
specifier|volatile
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
decl_stmt|;
specifier|public
name|CopyOnWriteArrayMap
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Comparator
argument_list|<
name|K
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|K
name|o1
parameter_list|,
name|K
name|o2
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Comparable
operator|)
name|o1
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CopyOnWriteArrayMap
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|keyComparator
parameter_list|)
block|{
name|this
operator|.
name|keyComparator
operator|=
name|keyComparator
expr_stmt|;
name|this
operator|.
name|holder
operator|=
operator|new
name|ArrayHolder
argument_list|<>
argument_list|(
name|keyComparator
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o1
parameter_list|,
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|keyComparator
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getKey
argument_list|()
argument_list|,
name|o2
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CopyOnWriteArrayMap
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|keyComparator
parameter_list|,
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
parameter_list|)
block|{
name|this
operator|.
name|keyComparator
operator|=
name|keyComparator
expr_stmt|;
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
block|}
comment|/*     Un synchronized read operations.      No locking.     No waiting     No copying.      These should all be FAST.    */
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
name|keyComparator
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentNavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|fromKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inclusive
operator|&&
name|index
operator|>=
literal|0
condition|)
block|{
name|index
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
expr_stmt|;
block|}
return|return
operator|new
name|CopyOnWriteArrayMap
argument_list|<>
argument_list|(
name|this
operator|.
name|keyComparator
argument_list|,
operator|new
name|ArrayHolder
argument_list|<>
argument_list|(
name|current
operator|.
name|entries
argument_list|,
name|index
argument_list|,
name|current
operator|.
name|endIndex
argument_list|,
name|current
operator|.
name|keyComparator
argument_list|,
name|current
operator|.
name|comparator
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentNavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailMap
parameter_list|(
name|K
name|fromKey
parameter_list|)
block|{
return|return
name|this
operator|.
name|tailMap
argument_list|(
name|fromKey
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|firstKey
parameter_list|()
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|current
operator|.
name|startIndex
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|lastKey
parameter_list|()
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|current
operator|.
name|endIndex
operator|-
literal|1
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|lowerEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// There's a key exactly equal.
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|index
operator|-=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
name|current
operator|.
name|startIndex
operator|||
name|index
operator|>=
name|current
operator|.
name|endIndex
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|lowerKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|lowerEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|floorEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
name|current
operator|.
name|startIndex
operator|||
name|index
operator|>=
name|current
operator|.
name|endIndex
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|floorKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|floorEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|ceilingEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
name|current
operator|.
name|startIndex
operator|||
name|index
operator|>=
name|current
operator|.
name|endIndex
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|ceilingKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|ceilingEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|higherEntry
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// There's a key exactly equal.
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|index
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
name|current
operator|.
name|startIndex
operator|||
name|index
operator|>=
name|current
operator|.
name|endIndex
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|higherKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
name|higherEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|firstEntry
parameter_list|()
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|current
operator|.
name|startIndex
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|lastEntry
parameter_list|()
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|current
operator|.
name|endIndex
operator|-
literal|1
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|holder
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|holder
operator|.
name|getLength
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
return|return
name|index
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
operator|new
name|ArrayKeySet
argument_list|<>
argument_list|(
name|this
operator|.
name|holder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
operator|new
name|ArrayValueCollection
argument_list|<>
argument_list|(
name|this
operator|.
name|holder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|ArrayEntrySet
argument_list|<>
argument_list|(
name|this
operator|.
name|holder
argument_list|)
return|;
block|}
comment|/*      Synchronized write methods.       Every method should be synchronized.      Only one modification at a time.       These will be slow.    */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
init|=
operator|new
name|COWEntry
argument_list|<>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|holder
operator|=
name|current
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
name|this
operator|.
name|holder
operator|=
name|current
operator|.
name|insert
argument_list|(
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|holder
operator|=
name|current
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|holder
operator|=
operator|new
name|ArrayHolder
argument_list|<>
argument_list|(
name|this
operator|.
name|holder
operator|.
name|keyComparator
argument_list|,
name|this
operator|.
name|holder
operator|.
name|comparator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|V
name|putIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
init|=
operator|new
name|COWEntry
argument_list|<>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|this
operator|.
name|holder
operator|=
name|current
operator|.
name|insert
argument_list|(
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|current
operator|.
name|entries
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|this
operator|.
name|holder
operator|=
name|current
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|oldValue
parameter_list|,
name|V
name|newValue
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|current
operator|.
name|entries
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
init|=
operator|new
name|COWEntry
argument_list|<>
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
name|this
operator|.
name|holder
operator|=
name|current
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|V
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
name|int
name|index
init|=
name|current
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
init|=
operator|new
name|COWEntry
argument_list|<>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|this
operator|.
name|holder
operator|=
name|current
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
return|return
name|current
operator|.
name|entries
index|[
name|index
index|]
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|pollFirstEntry
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|pollLastEntry
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentNavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|descendingMap
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|navigableKeySet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentNavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|K
name|toKey
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentNavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentNavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|subMap
parameter_list|(
name|K
name|fromKey
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|K
name|toKey
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentNavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|headMap
parameter_list|(
name|K
name|toKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|descendingKeySet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
specifier|final
class|class
name|ArrayKeySet
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|NavigableSet
argument_list|<
name|K
argument_list|>
block|{
specifier|private
specifier|final
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
decl_stmt|;
specifier|private
name|ArrayKeySet
parameter_list|(
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
parameter_list|)
block|{
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|holder
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|holder
operator|.
name|getLength
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|current
operator|.
name|startIndex
init|;
name|i
operator|<
name|current
operator|.
name|endIndex
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|current
operator|.
name|entries
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|lower
parameter_list|(
name|K
name|k
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|floor
parameter_list|(
name|K
name|k
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|ceiling
parameter_list|(
name|K
name|k
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|higher
parameter_list|(
name|K
name|k
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|pollFirst
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|pollLast
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ArrayKeyIterator
argument_list|<>
argument_list|(
name|this
operator|.
name|holder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|descendingSet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|K
argument_list|>
name|descendingIterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|subSet
parameter_list|(
name|K
name|fromElement
parameter_list|,
name|boolean
name|fromInclusive
parameter_list|,
name|K
name|toElement
parameter_list|,
name|boolean
name|toInclusive
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|headSet
parameter_list|(
name|K
name|toElement
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NavigableSet
argument_list|<
name|K
argument_list|>
name|tailSet
parameter_list|(
name|K
name|fromElement
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
operator|(
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
operator|)
name|keyComparator
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|K
argument_list|>
name|subSet
parameter_list|(
name|K
name|fromElement
parameter_list|,
name|K
name|toElement
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|K
argument_list|>
name|headSet
parameter_list|(
name|K
name|toElement
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedSet
argument_list|<
name|K
argument_list|>
name|tailSet
parameter_list|(
name|K
name|fromElement
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|first
parameter_list|()
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|current
operator|.
name|startIndex
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|last
parameter_list|()
block|{
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|current
init|=
name|this
operator|.
name|holder
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|current
operator|.
name|entries
index|[
name|current
operator|.
name|endIndex
operator|-
literal|1
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|K
name|k
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|final
class|class
name|ArrayValueCollection
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Collection
argument_list|<
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
decl_stmt|;
specifier|private
name|ArrayValueCollection
parameter_list|(
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
parameter_list|)
block|{
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|holder
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|holder
operator|.
name|getLength
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|V
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ArrayValueIterator
argument_list|<>
argument_list|(
name|this
operator|.
name|holder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|V
name|v
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"EQ_ALWAYS_FALSE"
argument_list|,
name|justification
operator|=
literal|"Intentional"
argument_list|)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// FindBugs: Causes EQ_ALWAYS_FALSE. Suppressed.
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|ArrayKeyIterator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|K
argument_list|>
block|{
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
decl_stmt|;
specifier|private
name|ArrayKeyIterator
parameter_list|(
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
parameter_list|)
block|{
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
name|index
operator|=
name|holder
operator|.
name|startIndex
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|holder
operator|.
name|endIndex
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|next
parameter_list|()
block|{
return|return
name|holder
operator|.
name|entries
index|[
name|index
operator|++
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
class|class
name|ArrayValueIterator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|V
argument_list|>
block|{
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
decl_stmt|;
specifier|private
name|ArrayValueIterator
parameter_list|(
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
parameter_list|)
block|{
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
name|index
operator|=
name|holder
operator|.
name|startIndex
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|holder
operator|.
name|endIndex
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|next
parameter_list|()
block|{
return|return
name|holder
operator|.
name|entries
index|[
name|index
operator|++
index|]
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
class|class
name|ArrayEntryIterator
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
decl_stmt|;
specifier|private
name|ArrayEntryIterator
parameter_list|(
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
parameter_list|)
block|{
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|holder
operator|.
name|startIndex
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|index
operator|<
name|holder
operator|.
name|endIndex
return|;
block|}
annotation|@
name|Override
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"IT_NO_SUCH_ELEMENT"
argument_list|,
name|justification
operator|=
literal|"Intentional"
argument_list|)
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|holder
operator|.
name|entries
index|[
name|index
operator|++
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
class|class
name|ArrayEntrySet
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
decl_stmt|;
specifier|private
name|ArrayEntrySet
parameter_list|(
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|holder
parameter_list|)
block|{
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|holder
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|holder
operator|.
name|getLength
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ArrayEntryIterator
argument_list|<>
argument_list|(
name|this
operator|.
name|holder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|kvEntry
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|ArrayHolder
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
specifier|private
specifier|final
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|entries
decl_stmt|;
specifier|private
specifier|final
name|int
name|startIndex
decl_stmt|;
specifier|private
specifier|final
name|int
name|endIndex
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|keyComparator
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|comparator
decl_stmt|;
name|int
name|getLength
parameter_list|()
block|{
return|return
name|endIndex
operator|-
name|startIndex
return|;
block|}
comment|/**      * Binary search for a given key      * @param needle The key to look for in all of the entries      * @return Same return value as Arrays.binarySearch.      * Positive numbers mean the index.      * Otherwise (-1 * insertion point) - 1      */
name|int
name|find
parameter_list|(
name|K
name|needle
parameter_list|)
block|{
name|int
name|begin
init|=
name|startIndex
decl_stmt|;
name|int
name|end
init|=
name|endIndex
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|begin
operator|<=
name|end
condition|)
block|{
name|int
name|mid
init|=
name|begin
operator|+
operator|(
operator|(
name|end
operator|-
name|begin
operator|)
operator|/
literal|2
operator|)
decl_stmt|;
name|K
name|midKey
init|=
name|entries
index|[
name|mid
index|]
operator|.
name|key
decl_stmt|;
name|int
name|compareRes
init|=
name|keyComparator
operator|.
name|compare
argument_list|(
name|midKey
argument_list|,
name|needle
argument_list|)
decl_stmt|;
comment|// 0 means equals
comment|// We found the key.
if|if
condition|(
name|compareRes
operator|==
literal|0
condition|)
block|{
return|return
name|mid
return|;
block|}
elseif|else
if|if
condition|(
name|compareRes
operator|<
literal|0
condition|)
block|{
comment|// midKey is less than needle so we need
comment|// to look at farther up
name|begin
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// midKey is greater than needle so we
comment|// need to look down.
name|end
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|-
literal|1
operator|*
name|begin
operator|)
operator|-
literal|1
return|;
block|}
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|replace
parameter_list|(
name|int
name|index
parameter_list|,
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
parameter_list|)
block|{
comment|// TODO should this restart the array back at start index 0 ?
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|newEntries
init|=
name|entries
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newEntries
index|[
name|index
index|]
operator|=
name|newEntry
expr_stmt|;
return|return
operator|new
name|ArrayHolder
argument_list|<>
argument_list|(
name|newEntries
argument_list|,
name|startIndex
argument_list|,
name|endIndex
argument_list|,
name|keyComparator
argument_list|,
name|comparator
argument_list|)
return|;
block|}
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|newEntries
init|=
operator|new
name|COWEntry
index|[
name|getLength
argument_list|()
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|entries
argument_list|,
name|startIndex
argument_list|,
name|newEntries
argument_list|,
literal|0
argument_list|,
name|index
operator|-
name|startIndex
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|entries
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|newEntries
argument_list|,
name|index
argument_list|,
name|entries
operator|.
name|length
operator|-
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayHolder
argument_list|<>
argument_list|(
name|newEntries
argument_list|,
literal|0
argument_list|,
name|newEntries
operator|.
name|length
argument_list|,
name|keyComparator
argument_list|,
name|comparator
argument_list|)
return|;
block|}
name|ArrayHolder
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|insert
parameter_list|(
name|int
name|index
parameter_list|,
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|newEntry
parameter_list|)
block|{
name|COWEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
index|[]
name|newEntries
init|=
operator|new
name|COWEntry
index|[
name|getLength
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|entries
argument_list|,
name|startIndex
argument_list|,
name|newEntries
argument_list|,
literal|0
argument_list|,
name|index
operator|-
name|startIndex
argument_list|)
expr_stmt|;
name|newEntries
index|[
name|index
index|]
operator|=
name|newEntry
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|entries
argument_list|,
name|index
argument_list|,
name|newEntries
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|getLength
argument_list|()
operator|-
name|index
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayHolder
argument_list|<>
argument_list|(
name|newEntries
argument_list|,
literal|0
argument_list|,
name|newEntries
operator|.
name|length
argument_list|,
name|keyComparator
argument_list|,
name|comparator
argument_list|)
return|;
block|}
specifier|private
name|ArrayHolder
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|keyComparator
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|endIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|startIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|entries
operator|=
operator|new
name|COWEntry
index|[]
block|{}
expr_stmt|;
name|this
operator|.
name|keyComparator
operator|=
name|keyComparator
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
specifier|private
name|ArrayHolder
parameter_list|(
name|COWEntry
index|[]
name|entries
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|K
argument_list|>
name|keyComparator
parameter_list|,
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|startIndex
operator|=
name|startIndex
expr_stmt|;
name|this
operator|.
name|endIndex
operator|=
name|endIndex
expr_stmt|;
name|this
operator|.
name|keyComparator
operator|=
name|keyComparator
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|COWEntry
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
name|K
name|key
init|=
literal|null
decl_stmt|;
name|V
name|value
init|=
literal|null
decl_stmt|;
name|COWEntry
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|V
name|oldValue
init|=
name|this
operator|.
name|value
decl_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
block|}
block|}
end_class

end_unit

