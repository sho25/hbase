begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ErrorHandlingProtos
operator|.
name|ForeignExceptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonceKey
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
comment|/**  * Helper to convert to/from ProcedureProtos  */
specifier|public
class|class
name|ProcedureUtil
block|{
specifier|private
name|ProcedureUtil
parameter_list|()
block|{   }
comment|/**    * @return Convert the current {@link ProcedureInfo} into a Protocol Buffers Procedure    * instance.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|ProcedureProtos
operator|.
name|Procedure
name|convertToProcedureProto
parameter_list|(
specifier|final
name|ProcedureInfo
name|procInfo
parameter_list|)
block|{
name|ProcedureProtos
operator|.
name|Procedure
operator|.
name|Builder
name|builder
init|=
name|ProcedureProtos
operator|.
name|Procedure
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setClassName
argument_list|(
name|procInfo
operator|.
name|getProcName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProcId
argument_list|(
name|procInfo
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStartTime
argument_list|(
name|procInfo
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|ProcedureProtos
operator|.
name|ProcedureState
operator|.
name|valueOf
argument_list|(
name|procInfo
operator|.
name|getProcState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLastUpdate
argument_list|(
name|procInfo
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|procInfo
operator|.
name|hasParentId
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setParentId
argument_list|(
name|procInfo
operator|.
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|procInfo
operator|.
name|getProcOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOwner
argument_list|(
name|procInfo
operator|.
name|getProcOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|procInfo
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setException
argument_list|(
name|procInfo
operator|.
name|getForeignExceptionMessage
argument_list|()
operator|.
name|getForeignExchangeMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|procInfo
operator|.
name|hasResultData
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setResult
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|procInfo
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Helper to convert the protobuf object.    * @return Convert the current Protocol Buffers Procedure to {@link ProcedureInfo}    * instance.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|ProcedureInfo
name|convert
parameter_list|(
specifier|final
name|ProcedureProtos
operator|.
name|Procedure
name|procProto
parameter_list|)
block|{
name|NonceKey
name|nonceKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|procProto
operator|.
name|getNonce
argument_list|()
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|nonceKey
operator|=
operator|new
name|NonceKey
argument_list|(
name|procProto
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|procProto
operator|.
name|getNonce
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ProcedureInfo
argument_list|(
name|procProto
operator|.
name|getProcId
argument_list|()
argument_list|,
name|procProto
operator|.
name|getClassName
argument_list|()
argument_list|,
name|procProto
operator|.
name|getOwner
argument_list|()
argument_list|,
name|convertToProcedureState
argument_list|(
name|procProto
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|,
name|procProto
operator|.
name|hasParentId
argument_list|()
condition|?
name|procProto
operator|.
name|getParentId
argument_list|()
else|:
operator|-
literal|1
argument_list|,
name|nonceKey
argument_list|,
name|procProto
operator|.
name|hasException
argument_list|()
condition|?
operator|new
name|ForeignExceptionMsg
argument_list|(
name|procProto
operator|.
name|getException
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|procProto
operator|.
name|getLastUpdate
argument_list|()
argument_list|,
name|procProto
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|procProto
operator|.
name|hasResult
argument_list|()
condition|?
name|procProto
operator|.
name|getResult
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ProcedureState
name|convertToProcedureState
parameter_list|(
name|ProcedureProtos
operator|.
name|ProcedureState
name|state
parameter_list|)
block|{
return|return
name|ProcedureState
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|ForeignExceptionMsg
block|{
specifier|private
name|ForeignExceptionMessage
name|exception
decl_stmt|;
specifier|public
name|ForeignExceptionMsg
parameter_list|(
name|ForeignExceptionMessage
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
specifier|public
name|ForeignExceptionMessage
name|getForeignExchangeMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|exception
return|;
block|}
block|}
block|}
end_class

end_unit

