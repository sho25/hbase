begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Utility methods helpful slinging {@link Cell} instances.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|CellUtil
block|{
comment|/******************* ByteRange *******************************/
specifier|public
specifier|static
name|ByteRange
name|fillRowRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteRange
name|fillFamilyRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteRange
name|fillQualifierRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteRange
name|fillTagRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
return|;
block|}
comment|/***************** get individual arrays for tests ************/
specifier|public
specifier|static
name|byte
index|[]
name|cloneRow
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|cell
operator|.
name|getRowLength
argument_list|()
index|]
decl_stmt|;
name|copyRowTo
argument_list|(
name|cell
argument_list|,
name|output
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|cloneFamily
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|cell
operator|.
name|getFamilyLength
argument_list|()
index|]
decl_stmt|;
name|copyFamilyTo
argument_list|(
name|cell
argument_list|,
name|output
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|cloneQualifier
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|cell
operator|.
name|getQualifierLength
argument_list|()
index|]
decl_stmt|;
name|copyQualifierTo
argument_list|(
name|cell
argument_list|,
name|output
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|cloneValue
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|cell
operator|.
name|getValueLength
argument_list|()
index|]
decl_stmt|;
name|copyValueTo
argument_list|(
name|cell
argument_list|,
name|output
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * Returns tag value in a new byte array. If server-side, use    * {@link Tag#getBuffer()} with appropriate {@link Tag#getTagOffset()} and    * {@link Tag#getTagLength()} instead to save on allocations.    * @param cell    * @return tag value in a new byte array.    */
specifier|public
specifier|static
name|byte
index|[]
name|getTagArray
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|cell
operator|.
name|getTagsLength
argument_list|()
index|]
decl_stmt|;
name|copyTagTo
argument_list|(
name|cell
argument_list|,
name|output
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|/******************** copyTo **********************************/
specifier|public
specifier|static
name|int
name|copyRowTo
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinationOffset
operator|+
name|cell
operator|.
name|getRowLength
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|copyFamilyTo
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinationOffset
operator|+
name|cell
operator|.
name|getFamilyLength
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|copyQualifierTo
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinationOffset
operator|+
name|cell
operator|.
name|getQualifierLength
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|copyValueTo
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinationOffset
operator|+
name|cell
operator|.
name|getValueLength
argument_list|()
return|;
block|}
comment|/**    * Copies the tags info into the tag portion of the cell    * @param cell    * @param destination    * @param destinationOffset    * @return position after tags    */
specifier|public
specifier|static
name|int
name|copyTagTo
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinationOffset
operator|+
name|cell
operator|.
name|getTagsLength
argument_list|()
return|;
block|}
comment|/********************* misc *************************************/
specifier|public
specifier|static
name|byte
name|getRowByte
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getRowArray
argument_list|()
index|[
name|cell
operator|.
name|getRowOffset
argument_list|()
operator|+
name|index
index|]
return|;
block|}
specifier|public
specifier|static
name|ByteBuffer
name|getValueBufferShallowCopy
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buffer
return|;
block|}
specifier|public
specifier|static
name|ByteBuffer
name|getQualifierBufferShallowCopy
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buffer
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createCell
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|byte
name|type
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
block|{
comment|// I need a Cell Factory here.  Using KeyValue for now. TODO.
comment|// TODO: Make a new Cell implementation that just carries these
comment|// byte arrays.
return|return
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createCell
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|byte
name|type
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|long
name|memstoreTS
parameter_list|)
block|{
name|KeyValue
name|keyValue
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|keyValue
operator|.
name|setSequenceId
argument_list|(
name|memstoreTS
argument_list|)
expr_stmt|;
return|return
name|keyValue
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createCell
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|byte
name|type
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|,
specifier|final
name|long
name|memstoreTS
parameter_list|)
block|{
name|KeyValue
name|keyValue
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|type
argument_list|)
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|keyValue
operator|.
name|setSequenceId
argument_list|(
name|memstoreTS
argument_list|)
expr_stmt|;
return|return
name|keyValue
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createCell
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
name|Type
name|type
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
name|KeyValue
name|keyValue
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|type
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
decl_stmt|;
return|return
name|keyValue
return|;
block|}
comment|/**    * @param cellScannerables    * @return CellScanner interface over<code>cellIterables</code>    */
specifier|public
specifier|static
name|CellScanner
name|createCellScanner
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|CellScannable
argument_list|>
name|cellScannerables
parameter_list|)
block|{
return|return
operator|new
name|CellScanner
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|CellScannable
argument_list|>
name|iterator
init|=
name|cellScannerables
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|CellScanner
name|cellScanner
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Cell
name|current
parameter_list|()
block|{
return|return
name|this
operator|.
name|cellScanner
operator|!=
literal|null
condition|?
name|this
operator|.
name|cellScanner
operator|.
name|current
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advance
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|cellScanner
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|false
return|;
name|this
operator|.
name|cellScanner
operator|=
name|this
operator|.
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
return|return
literal|true
return|;
name|this
operator|.
name|cellScanner
operator|=
literal|null
expr_stmt|;
return|return
name|advance
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * @param cellIterable    * @return CellScanner interface over<code>cellIterable</code>    */
specifier|public
specifier|static
name|CellScanner
name|createCellScanner
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|Cell
argument_list|>
name|cellIterable
parameter_list|)
block|{
if|if
condition|(
name|cellIterable
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|createCellScanner
argument_list|(
name|cellIterable
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param cells    * @return CellScanner interface over<code>cellIterable</code> or null if<code>cells</code> is    * null    */
specifier|public
specifier|static
name|CellScanner
name|createCellScanner
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|)
block|{
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|CellScanner
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|iterator
init|=
name|cells
decl_stmt|;
specifier|private
name|Cell
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Cell
name|current
parameter_list|()
block|{
return|return
name|this
operator|.
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advance
parameter_list|()
block|{
name|boolean
name|hasNext
init|=
name|this
operator|.
name|iterator
operator|.
name|hasNext
argument_list|()
decl_stmt|;
name|this
operator|.
name|current
operator|=
name|hasNext
condition|?
name|this
operator|.
name|iterator
operator|.
name|next
argument_list|()
else|:
literal|null
expr_stmt|;
return|return
name|hasNext
return|;
block|}
block|}
return|;
block|}
comment|/**    * @param cellArray    * @return CellScanner interface over<code>cellArray</code>    */
specifier|public
specifier|static
name|CellScanner
name|createCellScanner
parameter_list|(
specifier|final
name|Cell
index|[]
name|cellArray
parameter_list|)
block|{
return|return
operator|new
name|CellScanner
argument_list|()
block|{
specifier|private
specifier|final
name|Cell
index|[]
name|cells
init|=
name|cellArray
decl_stmt|;
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Cell
name|current
parameter_list|()
block|{
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|index
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|cells
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advance
parameter_list|()
block|{
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|++
name|index
operator|<
name|this
operator|.
name|cells
operator|.
name|length
return|;
block|}
block|}
return|;
block|}
comment|/**    * Flatten the map of cells out under the CellScanner    * @param map Map of Cell Lists; for example, the map of families to Cells that is used    * inside Put, etc., keeping Cells organized by family.    * @return CellScanner interface over<code>cellIterable</code>    */
specifier|public
specifier|static
name|CellScanner
name|createCellScanner
parameter_list|(
specifier|final
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|CellScanner
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|Cell
argument_list|>
name|currentIterator
init|=
literal|null
decl_stmt|;
specifier|private
name|Cell
name|currentCell
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Cell
name|current
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentCell
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advance
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|currentIterator
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|false
return|;
name|this
operator|.
name|currentIterator
operator|=
name|this
operator|.
name|entries
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|currentIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|this
operator|.
name|currentCell
operator|=
name|this
operator|.
name|currentIterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|this
operator|.
name|currentCell
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentIterator
operator|=
literal|null
expr_stmt|;
return|return
name|advance
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * @param left    * @param right    * @return True if the rows in<code>left</code> and<code>right</code> Cells match    */
specifier|public
specifier|static
name|boolean
name|matchingRow
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|Cell
name|right
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|left
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|right
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|right
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|right
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingRow
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|left
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingRow
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|left
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingFamily
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|Cell
name|right
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|right
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|right
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|right
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingFamily
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingFamily
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingQualifier
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|Cell
name|right
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|right
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|right
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|right
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingQualifier
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
return|return
name|left
operator|.
name|getQualifierLength
argument_list|()
operator|==
literal|0
return|;
block|}
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingQualifier
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
return|return
name|left
operator|.
name|getQualifierLength
argument_list|()
operator|==
literal|0
return|;
block|}
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingColumn
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|fam
parameter_list|,
specifier|final
name|byte
index|[]
name|qual
parameter_list|)
block|{
if|if
condition|(
operator|!
name|matchingFamily
argument_list|(
name|left
argument_list|,
name|fam
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|matchingQualifier
argument_list|(
name|left
argument_list|,
name|qual
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingColumn
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|fam
parameter_list|,
specifier|final
name|int
name|foffset
parameter_list|,
specifier|final
name|int
name|flength
parameter_list|,
specifier|final
name|byte
index|[]
name|qual
parameter_list|,
specifier|final
name|int
name|qoffset
parameter_list|,
specifier|final
name|int
name|qlength
parameter_list|)
block|{
if|if
condition|(
operator|!
name|matchingFamily
argument_list|(
name|left
argument_list|,
name|fam
argument_list|,
name|foffset
argument_list|,
name|flength
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|matchingQualifier
argument_list|(
name|left
argument_list|,
name|qual
argument_list|,
name|qoffset
argument_list|,
name|qlength
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingColumn
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|Cell
name|right
parameter_list|)
block|{
if|if
condition|(
operator|!
name|matchingFamily
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|matchingQualifier
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingValue
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|Cell
name|right
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|left
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|right
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|right
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|right
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingValue
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|left
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * @return True if a delete type, a {@link KeyValue.Type#Delete} or a    *         {KeyValue.Type#DeleteFamily} or a    *         {@link KeyValue.Type#DeleteColumn} KeyValue type.    */
specifier|public
specifier|static
name|boolean
name|isDelete
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|isDelete
argument_list|(
name|cell
operator|.
name|getTypeByte
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return True if a delete type, a {@link KeyValue.Type#Delete} or a    *         {KeyValue.Type#DeleteFamily} or a    *         {@link KeyValue.Type#DeleteColumn} KeyValue type.    */
specifier|public
specifier|static
name|boolean
name|isDelete
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|)
block|{
return|return
name|Type
operator|.
name|Delete
operator|.
name|getCode
argument_list|()
operator|<=
name|type
operator|&&
name|type
operator|<=
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
return|;
block|}
comment|/**    * @return True if this cell is a {@link KeyValue.Type#Delete} type.    */
specifier|public
specifier|static
name|boolean
name|isDeleteType
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|Type
operator|.
name|Delete
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeleteFamily
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeleteFamilyVersion
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|Type
operator|.
name|DeleteFamilyVersion
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeleteColumns
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeleteColumnVersion
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|Type
operator|.
name|Delete
operator|.
name|getCode
argument_list|()
return|;
block|}
comment|/**    *    * @return True if this cell is a delete family or column type.    */
specifier|public
specifier|static
name|boolean
name|isDeleteColumnOrFamily
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|int
name|t
init|=
name|cell
operator|.
name|getTypeByte
argument_list|()
decl_stmt|;
return|return
name|t
operator|==
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
operator|||
name|t
operator|==
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
return|;
block|}
comment|/**    * @param cell    * @return Estimate of the<code>cell</code> size in bytes.    */
specifier|public
specifier|static
name|int
name|estimatedSizeOf
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
comment|// If a KeyValue, we can give a good estimate of size.
if|if
condition|(
name|cell
operator|instanceof
name|KeyValue
condition|)
block|{
return|return
operator|(
operator|(
name|KeyValue
operator|)
name|cell
operator|)
operator|.
name|getLength
argument_list|()
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
return|;
block|}
comment|// TODO: Should we add to Cell a sizeOf?  Would it help? Does it make sense if Cell is
comment|// prefix encoded or compressed?
return|return
name|cell
operator|.
name|getRowLength
argument_list|()
operator|+
name|cell
operator|.
name|getFamilyLength
argument_list|()
operator|+
name|cell
operator|.
name|getQualifierLength
argument_list|()
operator|+
name|cell
operator|.
name|getValueLength
argument_list|()
operator|+
comment|// Use the KeyValue's infrastructure size presuming that another implementation would have
comment|// same basic cost.
name|KeyValue
operator|.
name|KEY_INFRASTRUCTURE_SIZE
operator|+
comment|// Serialization is probably preceded by a length (it is in the KeyValueCodec at least).
name|Bytes
operator|.
name|SIZEOF_INT
return|;
block|}
comment|/********************* tags *************************************/
comment|/**    * Util method to iterate through the tags    *     * @param tags    * @param offset    * @param length    * @return iterator for the tags    */
specifier|public
specifier|static
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsIterator
parameter_list|(
specifier|final
name|byte
index|[]
name|tags
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Tag
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|pos
init|=
name|offset
decl_stmt|;
specifier|private
name|int
name|endOffset
init|=
name|offset
operator|+
name|length
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|this
operator|.
name|pos
operator|<
name|endOffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tag
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|short
name|curTagLen
init|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|tags
argument_list|,
name|this
operator|.
name|pos
argument_list|)
decl_stmt|;
name|Tag
name|tag
init|=
operator|new
name|Tag
argument_list|(
name|tags
argument_list|,
name|pos
argument_list|,
call|(
name|short
call|)
argument_list|(
name|curTagLen
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|pos
operator|+=
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|+
name|curTagLen
expr_stmt|;
return|return
name|tag
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
comment|/**    * Returns true if the first range start1...end1 overlaps with the second range    * start2...end2, assuming the byte arrays represent row keys    */
specifier|public
specifier|static
name|boolean
name|overlappingKeys
parameter_list|(
specifier|final
name|byte
index|[]
name|start1
parameter_list|,
specifier|final
name|byte
index|[]
name|end1
parameter_list|,
specifier|final
name|byte
index|[]
name|start2
parameter_list|,
specifier|final
name|byte
index|[]
name|end2
parameter_list|)
block|{
return|return
operator|(
name|end2
operator|.
name|length
operator|==
literal|0
operator|||
name|start1
operator|.
name|length
operator|==
literal|0
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|start1
argument_list|,
name|end2
argument_list|)
operator|<
literal|0
operator|)
operator|&&
operator|(
name|end1
operator|.
name|length
operator|==
literal|0
operator|||
name|start2
operator|.
name|length
operator|==
literal|0
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|start2
argument_list|,
name|end1
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

