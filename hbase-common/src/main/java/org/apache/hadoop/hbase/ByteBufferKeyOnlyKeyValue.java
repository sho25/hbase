begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * This is a key only Cell implementation which is identical to {@link KeyValue.KeyOnlyKeyValue}  * with respect to key serialization but have its data in the form of Byte buffer  * (onheap and offheap).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ByteBufferKeyOnlyKeyValue
extends|extends
name|ByteBufferExtendedCell
block|{
specifier|public
specifier|static
specifier|final
name|int
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|OBJECT
operator|+
name|ClassSize
operator|.
name|REFERENCE
operator|+
operator|(
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
operator|)
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
decl_stmt|;
specifier|private
name|ByteBuffer
name|buf
decl_stmt|;
specifier|private
name|int
name|offset
init|=
literal|0
decl_stmt|;
comment|// offset into buffer where key starts at
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|// length of this.
specifier|private
name|short
name|rowLen
decl_stmt|;
comment|/**    * Used in cases where we want to avoid lot of garbage by allocating new objects with different    * keys. Use the emtpy construtor and set the keys using {@link #setKey(ByteBuffer, int, int)}    */
specifier|public
name|ByteBufferKeyOnlyKeyValue
parameter_list|()
block|{   }
specifier|public
name|ByteBufferKeyOnlyKeyValue
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|setKey
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * A setter that helps to avoid object creation every time and whenever    * there is a need to create new OffheapKeyOnlyKeyValue.    * @param key    * @param offset    * @param length    */
specifier|public
name|void
name|setKey
parameter_list|(
name|ByteBuffer
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|rowLen
operator|=
name|ByteBufferUtils
operator|.
name|toShort
argument_list|(
name|this
operator|.
name|buf
argument_list|,
name|this
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|buf
operator|.
name|array
argument_list|()
return|;
block|}
return|return
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|getRowPosition
argument_list|()
operator|+
name|this
operator|.
name|buf
operator|.
name|arrayOffset
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowLen
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|buf
operator|.
name|array
argument_list|()
return|;
block|}
return|return
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|getFamilyPosition
argument_list|()
operator|+
name|this
operator|.
name|buf
operator|.
name|arrayOffset
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|getFamilyLength
argument_list|(
name|getFamilyLengthPosition
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|byte
name|getFamilyLength
parameter_list|(
name|int
name|famLenPos
parameter_list|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|this
operator|.
name|buf
argument_list|,
name|famLenPos
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|buf
operator|.
name|array
argument_list|()
return|;
block|}
return|return
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|getQualifierPosition
argument_list|()
operator|+
name|this
operator|.
name|buf
operator|.
name|arrayOffset
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|getQualifierLength
argument_list|(
name|getRowLength
argument_list|()
argument_list|,
name|getFamilyLength
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|getQualifierLength
parameter_list|(
name|int
name|rlength
parameter_list|,
name|int
name|flength
parameter_list|)
block|{
return|return
name|this
operator|.
name|length
operator|-
operator|(
name|int
operator|)
name|KeyValue
operator|.
name|getKeyDataStructureSize
argument_list|(
name|rlength
argument_list|,
name|flength
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|ByteBufferUtils
operator|.
name|toLong
argument_list|(
name|this
operator|.
name|buf
argument_list|,
name|getTimestampOffset
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|getTimestampOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|offset
operator|+
name|this
operator|.
name|length
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|this
operator|.
name|buf
argument_list|,
name|this
operator|.
name|offset
operator|+
name|this
operator|.
name|length
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|PrivateCellUtil
operator|.
name|toType
argument_list|(
name|getTypeByte
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSequenceId
parameter_list|(
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This is a key only Cell"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This is a key only Cell"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|byte
index|[]
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This is a key only Cell"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This is a key only Cell"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This is a key only Cell"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getRowByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|buf
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|offset
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getFamilyByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|buf
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyPosition
parameter_list|()
block|{
return|return
name|getFamilyLengthPosition
argument_list|()
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
return|;
block|}
comment|// The position in BB where the family length is added.
specifier|private
name|int
name|getFamilyLengthPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|offset
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|+
name|getRowLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getQualifierByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|buf
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierPosition
parameter_list|()
block|{
name|int
name|famLenPos
init|=
name|getFamilyLengthPosition
argument_list|()
decl_stmt|;
return|return
name|famLenPos
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|+
name|getFamilyLength
argument_list|(
name|famLenPos
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getValueByteBuffer
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This is a key only Cell"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValuePosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getTagsByteBuffer
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This is a key only Cell"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsPosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|CellUtil
operator|.
name|toString
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|getTags
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Tag
argument_list|>
name|getTag
parameter_list|(
name|byte
name|type
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|buf
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|length
argument_list|)
return|;
block|}
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
argument_list|)
return|;
block|}
block|}
end_class

end_unit

