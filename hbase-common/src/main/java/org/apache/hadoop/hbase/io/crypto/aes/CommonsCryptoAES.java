begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|aes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|CryptoCipherFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|CipherProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Decryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|CommonsCryptoAES
extends|extends
name|Cipher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CommonsCryptoAES
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CIPHER_MODE_KEY
init|=
literal|"hbase.crypto.commons.mode"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CIPHER_CLASSES_KEY
init|=
literal|"hbase.crypto.commons.cipher.classes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CIPHER_JCE_PROVIDER_KEY
init|=
literal|"hbase.crypto.commons.cipher.jce.provider"
decl_stmt|;
specifier|private
specifier|final
name|String
name|cipherMode
decl_stmt|;
specifier|private
name|Properties
name|props
decl_stmt|;
specifier|private
specifier|final
name|String
name|rngAlgorithm
decl_stmt|;
specifier|private
name|SecureRandom
name|rng
decl_stmt|;
specifier|public
name|CommonsCryptoAES
parameter_list|(
name|CipherProvider
name|provider
parameter_list|)
block|{
name|super
argument_list|(
name|provider
argument_list|)
expr_stmt|;
comment|// The mode for Commons Crypto Ciphers
name|cipherMode
operator|=
name|provider
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|CIPHER_MODE_KEY
argument_list|,
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
comment|// Reads Commons Crypto properties from HBase conf
name|props
operator|=
name|readCryptoProps
argument_list|(
name|provider
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// RNG algorithm
name|rngAlgorithm
operator|=
name|provider
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|RNG_ALGORITHM_KEY
argument_list|,
literal|"SHA1PRNG"
argument_list|)
expr_stmt|;
comment|// RNG provider, null if default
name|String
name|rngProvider
init|=
name|provider
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|RNG_PROVIDER_KEY
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|rngProvider
operator|!=
literal|null
condition|)
block|{
name|rng
operator|=
name|SecureRandom
operator|.
name|getInstance
argument_list|(
name|rngAlgorithm
argument_list|,
name|rngProvider
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rng
operator|=
name|SecureRandom
operator|.
name|getInstance
argument_list|(
name|rngAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not instantiate specified RNG, falling back to default"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rng
operator|=
operator|new
name|SecureRandom
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Properties
name|readCryptoProps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|CryptoCipherFactory
operator|.
name|CLASSES_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|CIPHER_CLASSES_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|CryptoCipherFactory
operator|.
name|JCE_PROVIDER_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|CIPHER_JCE_PROVIDER_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"AES"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getKeyLength
parameter_list|()
block|{
return|return
name|KEY_LENGTH
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIvLength
parameter_list|()
block|{
return|return
name|IV_LENGTH
return|;
block|}
annotation|@
name|Override
specifier|public
name|Key
name|getRandomKey
parameter_list|()
block|{
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|byte
index|[
name|getKeyLength
argument_list|()
index|]
decl_stmt|;
name|rng
operator|.
name|nextBytes
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Encryptor
name|getEncryptor
parameter_list|()
block|{
return|return
operator|new
name|CommonsCryptoAESEncryptor
argument_list|(
name|cipherMode
argument_list|,
name|props
argument_list|,
name|rng
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Decryptor
name|getDecryptor
parameter_list|()
block|{
return|return
operator|new
name|CommonsCryptoAESDecryptor
argument_list|(
name|cipherMode
argument_list|,
name|props
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputStream
name|createEncryptionStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Context
name|context
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|context
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"Context does not have a key"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|iv
argument_list|)
expr_stmt|;
name|Encryptor
name|e
init|=
name|getEncryptor
argument_list|()
decl_stmt|;
name|e
operator|.
name|setKey
argument_list|(
name|context
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setIv
argument_list|(
name|iv
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|createEncryptionStream
argument_list|(
name|out
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputStream
name|createEncryptionStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Encryptor
name|encryptor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|encryptor
operator|.
name|createEncryptionStream
argument_list|(
name|out
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|createDecryptionStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Context
name|context
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|context
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
argument_list|,
literal|"Context does not have a key"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|iv
argument_list|)
expr_stmt|;
name|Decryptor
name|d
init|=
name|getDecryptor
argument_list|()
decl_stmt|;
name|d
operator|.
name|setKey
argument_list|(
name|context
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setIv
argument_list|(
name|iv
argument_list|)
expr_stmt|;
return|return
name|d
operator|.
name|createDecryptionStream
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|createDecryptionStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decryptor
name|decryptor
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|decryptor
argument_list|)
expr_stmt|;
return|return
name|decryptor
operator|.
name|createDecryptionStream
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|SecureRandom
name|getRNG
parameter_list|()
block|{
return|return
name|rng
return|;
block|}
block|}
end_class

end_unit

