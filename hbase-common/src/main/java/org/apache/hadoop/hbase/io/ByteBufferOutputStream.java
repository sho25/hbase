begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|BufferOverflowException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Not thread safe!  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|ByteBufferOutputStream
extends|extends
name|OutputStream
implements|implements
name|ByteBufferWriter
block|{
comment|// Borrowed from openJDK:
comment|// http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8-b132/java/util/ArrayList.java#221
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ARRAY_SIZE
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|8
decl_stmt|;
specifier|protected
name|ByteBuffer
name|curBuf
init|=
literal|null
decl_stmt|;
name|ByteBufferOutputStream
parameter_list|()
block|{    }
specifier|public
name|ByteBufferOutputStream
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
argument_list|(
name|capacity
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ByteBufferOutputStream
parameter_list|(
name|int
name|capacity
parameter_list|,
name|boolean
name|useDirectByteBuffer
parameter_list|)
block|{
name|this
argument_list|(
name|allocate
argument_list|(
name|capacity
argument_list|,
name|useDirectByteBuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param bb ByteBuffer to use. If too small, will be discarded and a new one allocated in its    * place; i.e. the passed in BB may NOT BE RETURNED!! Minimally it will be altered. SIDE EFFECT!!    * If you want to get the newly allocated ByteBuffer, you'll need to pick it up when    * done with this instance by calling {@link #getByteBuffer()}. All this encapsulation violation    * is so we can recycle buffers rather than allocate each time; it can get expensive especially    * if the buffers are big doing allocations each time or having them undergo resizing because    * initial allocation was small.    * @see #getByteBuffer()    */
specifier|public
name|ByteBufferOutputStream
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|)
block|{
assert|assert
name|bb
operator|.
name|order
argument_list|()
operator|==
name|ByteOrder
operator|.
name|BIG_ENDIAN
assert|;
name|this
operator|.
name|curBuf
operator|=
name|bb
expr_stmt|;
name|this
operator|.
name|curBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|curBuf
operator|.
name|position
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ByteBuffer
name|allocate
parameter_list|(
specifier|final
name|int
name|capacity
parameter_list|,
specifier|final
name|boolean
name|useDirectByteBuffer
parameter_list|)
block|{
if|if
condition|(
name|capacity
operator|>
name|MAX_ARRAY_SIZE
condition|)
block|{
comment|// avoid OutOfMemoryError
throw|throw
operator|new
name|BufferOverflowException
argument_list|()
throw|;
block|}
return|return
name|useDirectByteBuffer
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|capacity
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|capacity
argument_list|)
return|;
block|}
comment|/**    * This flips the underlying BB so be sure to use it _last_!    * @return ByteBuffer    */
specifier|public
name|ByteBuffer
name|getByteBuffer
parameter_list|()
block|{
name|curBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|curBuf
return|;
block|}
specifier|protected
name|void
name|checkSizeAndGrow
parameter_list|(
name|int
name|extra
parameter_list|)
block|{
name|long
name|capacityNeeded
init|=
name|curBuf
operator|.
name|position
argument_list|()
operator|+
operator|(
name|long
operator|)
name|extra
decl_stmt|;
if|if
condition|(
name|capacityNeeded
operator|>
name|curBuf
operator|.
name|limit
argument_list|()
condition|)
block|{
comment|// guarantee it's possible to fit
if|if
condition|(
name|capacityNeeded
operator|>
name|MAX_ARRAY_SIZE
condition|)
block|{
throw|throw
operator|new
name|BufferOverflowException
argument_list|()
throw|;
block|}
comment|// double until hit the cap
name|long
name|nextCapacity
init|=
name|Math
operator|.
name|min
argument_list|(
name|curBuf
operator|.
name|capacity
argument_list|()
operator|*
literal|2L
argument_list|,
name|MAX_ARRAY_SIZE
argument_list|)
decl_stmt|;
comment|// but make sure there is enough if twice the existing capacity is still too small
name|nextCapacity
operator|=
name|Math
operator|.
name|max
argument_list|(
name|nextCapacity
argument_list|,
name|capacityNeeded
argument_list|)
expr_stmt|;
name|ByteBuffer
name|newBuf
init|=
name|allocate
argument_list|(
operator|(
name|int
operator|)
name|nextCapacity
argument_list|,
name|curBuf
operator|.
name|isDirect
argument_list|()
argument_list|)
decl_stmt|;
name|curBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToBuffer
argument_list|(
name|curBuf
argument_list|,
name|newBuf
argument_list|)
expr_stmt|;
name|curBuf
operator|=
name|newBuf
expr_stmt|;
block|}
block|}
comment|// OutputStream
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSizeAndGrow
argument_list|(
name|Bytes
operator|.
name|SIZEOF_BYTE
argument_list|)
expr_stmt|;
name|curBuf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**   * Writes the complete contents of this byte buffer output stream to   * the specified output stream argument.   *   * @param      out   the output stream to which to write the data.   * @exception  IOException  if an I/O error occurs.   */
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableByteChannel
name|channel
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|curBuf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|bb
operator|.
name|flip
argument_list|()
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|bb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSizeAndGrow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromArrayToBuffer
argument_list|(
name|curBuf
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuffer
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSizeAndGrow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromBufferToBuffer
argument_list|(
name|b
argument_list|,
name|curBuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes an<code>int</code> to the underlying output stream as four    * bytes, high byte first.    * @param i the<code>int</code> to write    * @throws IOException if an I/O error occurs.    */
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSizeAndGrow
argument_list|(
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|this
operator|.
name|curBuf
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// noop
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// noop again. heh
block|}
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ByteBuffer
name|bb
init|=
name|curBuf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|bb
operator|.
name|flip
argument_list|()
expr_stmt|;
name|byte
index|[]
name|chunk
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|bb
operator|.
name|get
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|chunk
return|;
block|}
block|}
end_class

end_unit

