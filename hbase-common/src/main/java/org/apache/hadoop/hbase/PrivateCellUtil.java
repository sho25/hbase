begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
operator|.
name|TAG_LENGTH_SIZE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TagCompressionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Utility methods helpful slinging {@link Cell} instances. It has more powerful and  * rich set of APIs than those in {@link CellUtil} for internal usage.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|PrivateCellUtil
block|{
comment|/**    * Private constructor to keep this class from being instantiated.    */
specifier|private
name|PrivateCellUtil
parameter_list|()
block|{   }
comment|/******************* ByteRange *******************************/
specifier|public
specifier|static
name|ByteRange
name|fillRowRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteRange
name|fillFamilyRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteRange
name|fillQualifierRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteRange
name|fillValueRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteRange
name|fillTagRange
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteRange
name|range
parameter_list|)
block|{
return|return
name|range
operator|.
name|set
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
return|;
block|}
comment|/********************* misc *************************************/
specifier|public
specifier|static
name|byte
name|getRowByte
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
operator|+
name|index
argument_list|)
return|;
block|}
return|return
name|cell
operator|.
name|getRowArray
argument_list|()
index|[
name|cell
operator|.
name|getRowOffset
argument_list|()
operator|+
name|index
index|]
return|;
block|}
specifier|public
specifier|static
name|byte
name|getQualifierByte
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
operator|+
name|index
argument_list|)
return|;
block|}
return|return
name|cell
operator|.
name|getQualifierArray
argument_list|()
index|[
name|cell
operator|.
name|getQualifierOffset
argument_list|()
operator|+
name|index
index|]
return|;
block|}
specifier|public
specifier|static
name|ByteBuffer
name|getValueBufferShallowCopy
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buffer
return|;
block|}
comment|/**    * @return A new cell which is having the extra tags also added to it.    */
specifier|public
specifier|static
name|Cell
name|createCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|createCell
argument_list|(
name|cell
argument_list|,
name|TagUtil
operator|.
name|fromList
argument_list|(
name|tags
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @return A new cell which is having the extra tags also added to it.    */
specifier|public
specifier|static
name|Cell
name|createCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|TagRewriteByteBufferExtendedCell
argument_list|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
argument_list|,
name|tags
argument_list|)
return|;
block|}
return|return
operator|new
name|TagRewriteCell
argument_list|(
name|cell
argument_list|,
name|tags
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|ValueAndTagRewriteByteBufferExtendedCell
argument_list|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
return|;
block|}
return|return
operator|new
name|ValueAndTagRewriteCell
argument_list|(
name|cell
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
return|;
block|}
comment|/**    * This can be used when a Cell has to change with addition/removal of one or more tags. This is    * an efficient way to do so in which only the tags bytes part need to recreated and copied. All    * other parts, refer to the original Cell.    */
specifier|static
class|class
name|TagRewriteCell
implements|implements
name|ExtendedCell
block|{
specifier|protected
name|Cell
name|cell
decl_stmt|;
specifier|protected
name|byte
index|[]
name|tags
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|HEAP_SIZE_OVERHEAD
init|=
name|ClassSize
operator|.
name|OBJECT
operator|+
literal|2
operator|*
name|ClassSize
operator|.
name|REFERENCE
decl_stmt|;
comment|/**      * @param cell The original Cell which it rewrites      * @param tags the tags bytes. The array suppose to contain the tags bytes alone.      */
specifier|public
name|TagRewriteCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
assert|assert
name|cell
operator|instanceof
name|ExtendedCell
assert|;
assert|assert
name|tags
operator|!=
literal|null
assert|;
name|this
operator|.
name|cell
operator|=
name|cell
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
comment|// tag offset will be treated as 0 and length this.tags.length
if|if
condition|(
name|this
operator|.
name|cell
operator|instanceof
name|TagRewriteCell
condition|)
block|{
comment|// Cleaning the ref so that the byte[] can be GCed
operator|(
operator|(
name|TagRewriteCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|tags
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getRowArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getRowOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getRowLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getFamilyArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getFamilyOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getFamilyLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getQualifierArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getQualifierOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getQualifierLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getSequenceId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getValueArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getValueOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|cell
operator|.
name|getValueLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|tags
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|tags
condition|)
block|{
comment|// Nulled out tags array optimization in constructor
return|return
literal|0
return|;
block|}
return|return
name|this
operator|.
name|tags
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
name|long
name|sum
init|=
name|HEAP_SIZE_OVERHEAD
operator|+
name|cell
operator|.
name|heapSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tags
operator|!=
literal|null
condition|)
block|{
name|sum
operator|+=
name|ClassSize
operator|.
name|sizeOf
argument_list|(
name|this
operator|.
name|tags
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The incoming cell is supposed to be ExtendedCell type.
name|PrivateCellUtil
operator|.
name|setTimestamp
argument_list|(
name|cell
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|byte
index|[]
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The incoming cell is supposed to be ExtendedCell type.
name|PrivateCellUtil
operator|.
name|setTimestamp
argument_list|(
name|cell
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSequenceId
parameter_list|(
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The incoming cell is supposed to be ExtendedCell type.
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|cell
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|withTags
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
operator|(
name|ExtendedCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|withTags
operator|&&
name|this
operator|.
name|tags
operator|!=
literal|null
condition|)
block|{
comment|// Write the tagsLength 2 bytes
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|this
operator|.
name|tags
operator|.
name|length
operator|>>
literal|8
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
name|this
operator|.
name|tags
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|tags
argument_list|)
expr_stmt|;
name|len
operator|+=
name|KeyValue
operator|.
name|TAGS_LENGTH_SIZE
operator|+
name|this
operator|.
name|tags
operator|.
name|length
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|(
name|boolean
name|withTags
parameter_list|)
block|{
name|int
name|len
init|=
operator|(
operator|(
name|ExtendedCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|getSerializedSize
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|withTags
operator|&&
name|this
operator|.
name|tags
operator|!=
literal|null
condition|)
block|{
name|len
operator|+=
name|KeyValue
operator|.
name|TAGS_LENGTH_SIZE
operator|+
name|this
operator|.
name|tags
operator|.
name|length
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|offset
operator|=
name|KeyValueUtil
operator|.
name|appendTo
argument_list|(
name|this
operator|.
name|cell
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|tagsLen
init|=
name|this
operator|.
name|tags
operator|==
literal|null
condition|?
literal|0
else|:
name|this
operator|.
name|tags
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|tagsLen
operator|>
literal|0
condition|)
block|{
name|offset
operator|=
name|ByteBufferUtils
operator|.
name|putAsShort
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|tagsLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromArrayToBuffer
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|this
operator|.
name|tags
argument_list|,
literal|0
argument_list|,
name|tagsLen
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExtendedCell
name|deepClone
parameter_list|()
block|{
name|Cell
name|clonedBaseCell
init|=
operator|(
operator|(
name|ExtendedCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|deepClone
argument_list|()
decl_stmt|;
return|return
operator|new
name|TagRewriteCell
argument_list|(
name|clonedBaseCell
argument_list|,
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|TagRewriteByteBufferExtendedCell
extends|extends
name|ByteBufferExtendedCell
block|{
specifier|protected
name|ByteBufferExtendedCell
name|cell
decl_stmt|;
specifier|protected
name|byte
index|[]
name|tags
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|HEAP_SIZE_OVERHEAD
init|=
name|ClassSize
operator|.
name|OBJECT
operator|+
literal|2
operator|*
name|ClassSize
operator|.
name|REFERENCE
decl_stmt|;
comment|/**      * @param cell The original ByteBufferExtendedCell which it rewrites      * @param tags the tags bytes. The array suppose to contain the tags bytes alone.      */
specifier|public
name|TagRewriteByteBufferExtendedCell
parameter_list|(
name|ByteBufferExtendedCell
name|cell
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
assert|assert
name|tags
operator|!=
literal|null
assert|;
name|this
operator|.
name|cell
operator|=
name|cell
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
comment|// tag offset will be treated as 0 and length this.tags.length
if|if
condition|(
name|this
operator|.
name|cell
operator|instanceof
name|TagRewriteByteBufferExtendedCell
condition|)
block|{
comment|// Cleaning the ref so that the byte[] can be GCed
operator|(
operator|(
name|TagRewriteByteBufferExtendedCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|tags
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getRowArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getRowOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getRowLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getFamilyArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getFamilyOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getFamilyLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getQualifierArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getQualifierOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getQualifierLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getTypeByte
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getSequenceId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getValueArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getValueOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getValueLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|tags
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|tags
condition|)
block|{
comment|// Nulled out tags array optimization in constructor
return|return
literal|0
return|;
block|}
return|return
name|this
operator|.
name|tags
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSequenceId
parameter_list|(
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
block|{
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|this
operator|.
name|cell
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|PrivateCellUtil
operator|.
name|setTimestamp
argument_list|(
name|this
operator|.
name|cell
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|byte
index|[]
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|PrivateCellUtil
operator|.
name|setTimestamp
argument_list|(
name|this
operator|.
name|cell
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
name|long
name|sum
init|=
name|HEAP_SIZE_OVERHEAD
operator|+
name|cell
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// this.tags is on heap byte[]
if|if
condition|(
name|this
operator|.
name|tags
operator|!=
literal|null
condition|)
block|{
name|sum
operator|+=
name|ClassSize
operator|.
name|sizeOf
argument_list|(
name|this
operator|.
name|tags
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|withTags
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
operator|(
name|ExtendedCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|withTags
operator|&&
name|this
operator|.
name|tags
operator|!=
literal|null
condition|)
block|{
comment|// Write the tagsLength 2 bytes
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|this
operator|.
name|tags
operator|.
name|length
operator|>>
literal|8
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
name|this
operator|.
name|tags
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|this
operator|.
name|tags
argument_list|)
expr_stmt|;
name|len
operator|+=
name|KeyValue
operator|.
name|TAGS_LENGTH_SIZE
operator|+
name|this
operator|.
name|tags
operator|.
name|length
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|(
name|boolean
name|withTags
parameter_list|)
block|{
name|int
name|len
init|=
operator|(
operator|(
name|ExtendedCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|getSerializedSize
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|withTags
operator|&&
name|this
operator|.
name|tags
operator|!=
literal|null
condition|)
block|{
name|len
operator|+=
name|KeyValue
operator|.
name|TAGS_LENGTH_SIZE
operator|+
name|this
operator|.
name|tags
operator|.
name|length
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|offset
operator|=
name|KeyValueUtil
operator|.
name|appendTo
argument_list|(
name|this
operator|.
name|cell
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|tagsLen
init|=
name|this
operator|.
name|tags
operator|==
literal|null
condition|?
literal|0
else|:
name|this
operator|.
name|tags
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|tagsLen
operator|>
literal|0
condition|)
block|{
name|offset
operator|=
name|ByteBufferUtils
operator|.
name|putAsShort
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|tagsLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromArrayToBuffer
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|this
operator|.
name|tags
argument_list|,
literal|0
argument_list|,
name|tagsLen
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExtendedCell
name|deepClone
parameter_list|()
block|{
name|Cell
name|clonedBaseCell
init|=
operator|(
operator|(
name|ExtendedCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|deepClone
argument_list|()
decl_stmt|;
if|if
condition|(
name|clonedBaseCell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|TagRewriteByteBufferExtendedCell
argument_list|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|clonedBaseCell
argument_list|,
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
return|return
operator|new
name|TagRewriteCell
argument_list|(
name|clonedBaseCell
argument_list|,
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getRowByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getRowByteBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getRowPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getFamilyByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getFamilyByteBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getFamilyPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getQualifierByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getQualifierByteBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getQualifierPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getValueByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getValueByteBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValuePosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|cell
operator|.
name|getValuePosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getTagsByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|tags
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_BUFFER
else|:
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsPosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|static
class|class
name|ValueAndTagRewriteCell
extends|extends
name|TagRewriteCell
block|{
specifier|protected
name|byte
index|[]
name|value
decl_stmt|;
specifier|public
name|ValueAndTagRewriteCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
name|super
argument_list|(
name|cell
argument_list|,
name|tags
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|this
operator|.
name|value
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
name|long
name|sum
init|=
name|ClassSize
operator|.
name|REFERENCE
operator|+
name|super
operator|.
name|heapSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|sum
operator|+=
name|ClassSize
operator|.
name|sizeOf
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|withTags
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|write
argument_list|(
name|out
argument_list|,
name|withTags
argument_list|,
name|this
operator|.
name|cell
argument_list|,
name|this
operator|.
name|value
argument_list|,
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
comment|/**      * Made into a static method so as to reuse the logic within      * ValueAndTagRewriteByteBufferExtendedCell      */
specifier|static
name|int
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|withTags
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|valLen
init|=
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|value
operator|.
name|length
decl_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|KeyValueUtil
operator|.
name|keyLength
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key length
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|valLen
argument_list|)
expr_stmt|;
comment|// Value length
name|int
name|len
init|=
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
decl_stmt|;
name|len
operator|+=
name|writeFlatKey
argument_list|(
name|cell
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// Key
if|if
condition|(
name|valLen
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Value
block|}
name|len
operator|+=
name|valLen
expr_stmt|;
if|if
condition|(
name|withTags
operator|&&
name|tags
operator|!=
literal|null
condition|)
block|{
comment|// Write the tagsLength 2 bytes
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
operator|(
name|tags
operator|.
name|length
operator|>>
literal|8
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|&
name|tags
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|tags
argument_list|)
expr_stmt|;
name|len
operator|+=
name|KeyValue
operator|.
name|TAGS_LENGTH_SIZE
operator|+
name|tags
operator|.
name|length
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|(
name|boolean
name|withTags
parameter_list|)
block|{
return|return
name|super
operator|.
name|getSerializedSize
argument_list|(
name|withTags
argument_list|)
operator|-
name|this
operator|.
name|cell
operator|.
name|getValueLength
argument_list|()
operator|+
name|this
operator|.
name|value
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|write
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|this
operator|.
name|cell
argument_list|,
name|this
operator|.
name|value
argument_list|,
name|this
operator|.
name|tags
argument_list|)
expr_stmt|;
block|}
comment|/**      * Made into a static method so as to reuse the logic      * within ValueAndTagRewriteByteBufferExtendedCell      */
specifier|static
name|void
name|write
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
name|offset
operator|=
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|KeyValueUtil
operator|.
name|keyLength
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key length
name|offset
operator|=
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Value length
name|offset
operator|=
name|KeyValueUtil
operator|.
name|appendKeyTo
argument_list|(
name|cell
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromArrayToBuffer
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|value
operator|.
name|length
expr_stmt|;
name|int
name|tagsLen
init|=
name|tags
operator|==
literal|null
condition|?
literal|0
else|:
name|tags
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|tagsLen
operator|>
literal|0
condition|)
block|{
name|offset
operator|=
name|ByteBufferUtils
operator|.
name|putAsShort
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|tagsLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromArrayToBuffer
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|tags
argument_list|,
literal|0
argument_list|,
name|tagsLen
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExtendedCell
name|deepClone
parameter_list|()
block|{
name|Cell
name|clonedBaseCell
init|=
operator|(
operator|(
name|ExtendedCell
operator|)
name|this
operator|.
name|cell
operator|)
operator|.
name|deepClone
argument_list|()
decl_stmt|;
return|return
operator|new
name|ValueAndTagRewriteCell
argument_list|(
name|clonedBaseCell
argument_list|,
name|this
operator|.
name|value
argument_list|,
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|ValueAndTagRewriteByteBufferExtendedCell
extends|extends
name|TagRewriteByteBufferExtendedCell
block|{
specifier|protected
name|byte
index|[]
name|value
decl_stmt|;
specifier|public
name|ValueAndTagRewriteByteBufferExtendedCell
parameter_list|(
name|ByteBufferExtendedCell
name|cell
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|byte
index|[]
name|tags
parameter_list|)
block|{
name|super
argument_list|(
name|cell
argument_list|,
name|tags
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|this
operator|.
name|value
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getValueByteBuffer
parameter_list|()
block|{
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|this
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValuePosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
name|long
name|sum
init|=
name|ClassSize
operator|.
name|REFERENCE
operator|+
name|super
operator|.
name|heapSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|sum
operator|+=
name|ClassSize
operator|.
name|sizeOf
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|withTags
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ValueAndTagRewriteCell
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|withTags
argument_list|,
name|this
operator|.
name|cell
argument_list|,
name|this
operator|.
name|value
argument_list|,
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedSize
parameter_list|(
name|boolean
name|withTags
parameter_list|)
block|{
return|return
name|super
operator|.
name|getSerializedSize
argument_list|(
name|withTags
argument_list|)
operator|-
name|this
operator|.
name|cell
operator|.
name|getValueLength
argument_list|()
operator|+
name|this
operator|.
name|value
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|ValueAndTagRewriteCell
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|this
operator|.
name|cell
argument_list|,
name|this
operator|.
name|value
argument_list|,
name|this
operator|.
name|tags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExtendedCell
name|deepClone
parameter_list|()
block|{
name|Cell
name|clonedBaseCell
init|=
name|this
operator|.
name|cell
operator|.
name|deepClone
argument_list|()
decl_stmt|;
if|if
condition|(
name|clonedBaseCell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|ValueAndTagRewriteByteBufferExtendedCell
argument_list|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|clonedBaseCell
argument_list|,
name|this
operator|.
name|value
argument_list|,
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
return|return
operator|new
name|ValueAndTagRewriteCell
argument_list|(
name|clonedBaseCell
argument_list|,
name|this
operator|.
name|value
argument_list|,
name|this
operator|.
name|tags
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|matchingRows
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|left
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|left
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|left
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingFamily
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|left
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * Finds if the qualifier part of the cell and the KV serialized byte[] are equal    * @param left the cell with which we need to match the qualifier    * @param buf the serialized keyvalue format byte[]    * @param offset the offset of the qualifier in the byte[]    * @param length the length of the qualifier in the byte[]    * @return true if the qualifier matches, false otherwise    */
specifier|public
specifier|static
name|boolean
name|matchingQualifier
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
return|return
name|left
operator|.
name|getQualifierLength
argument_list|()
operator|==
literal|0
return|;
block|}
if|if
condition|(
name|left
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|left
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingColumn
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|byte
index|[]
name|fam
parameter_list|,
specifier|final
name|int
name|foffset
parameter_list|,
specifier|final
name|int
name|flength
parameter_list|,
specifier|final
name|byte
index|[]
name|qual
parameter_list|,
specifier|final
name|int
name|qoffset
parameter_list|,
specifier|final
name|int
name|qlength
parameter_list|)
block|{
if|if
condition|(
operator|!
name|matchingFamily
argument_list|(
name|left
argument_list|,
name|fam
argument_list|,
name|foffset
argument_list|,
name|flength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|matchingQualifier
argument_list|(
name|left
argument_list|,
name|qual
argument_list|,
name|qoffset
argument_list|,
name|qlength
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingValue
parameter_list|(
specifier|final
name|Cell
name|left
parameter_list|,
specifier|final
name|Cell
name|right
parameter_list|,
name|int
name|lvlength
parameter_list|,
name|int
name|rvlength
parameter_list|)
block|{
if|if
condition|(
name|left
operator|instanceof
name|ByteBufferExtendedCell
operator|&&
name|right
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|,
name|lvlength
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|right
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|right
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|,
name|rvlength
argument_list|)
return|;
block|}
if|if
condition|(
name|left
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|left
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|,
name|lvlength
argument_list|,
name|right
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|right
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|rvlength
argument_list|)
return|;
block|}
if|if
condition|(
name|right
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|right
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|right
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|,
name|rvlength
argument_list|,
name|left
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|left
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|lvlength
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|left
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|lvlength
argument_list|,
name|right
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|right
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|rvlength
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchingType
parameter_list|(
name|Cell
name|a
parameter_list|,
name|Cell
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getTypeByte
argument_list|()
operator|==
name|b
operator|.
name|getTypeByte
argument_list|()
return|;
block|}
comment|/**    * @return True if a delete type, a {@link KeyValue.Type#Delete} or a {KeyValue.Type#DeleteFamily}    *         or a {@link KeyValue.Type#DeleteColumn} KeyValue type.    */
specifier|public
specifier|static
name|boolean
name|isDelete
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|)
block|{
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
operator|.
name|getCode
argument_list|()
operator|<=
name|type
operator|&&
name|type
operator|<=
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
return|;
block|}
comment|/**    * @return True if this cell is a {@link KeyValue.Type#Delete} type.    */
specifier|public
specifier|static
name|boolean
name|isDeleteType
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeleteFamily
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeleteFamilyVersion
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamilyVersion
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeleteColumns
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDeleteColumnVersion
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
operator|.
name|getCode
argument_list|()
return|;
block|}
comment|/**    * @return True if this cell is a delete family or column type.    */
specifier|public
specifier|static
name|boolean
name|isDeleteColumnOrFamily
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|int
name|t
init|=
name|cell
operator|.
name|getTypeByte
argument_list|()
decl_stmt|;
return|return
name|t
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
operator|||
name|t
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|cloneTags
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|cell
operator|.
name|getTagsLength
argument_list|()
index|]
decl_stmt|;
name|copyTagsTo
argument_list|(
name|cell
argument_list|,
name|output
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * Copies the tags info into the tag portion of the cell    * @param cell    * @param destination    * @param destinationOffset    * @return position after tags    */
specifier|public
specifier|static
name|int
name|copyTagsTo
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|int
name|tlen
init|=
name|cell
operator|.
name|getTagsLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyFromBufferToArray
argument_list|(
name|destination
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsPosition
argument_list|()
argument_list|,
name|destinationOffset
argument_list|,
name|tlen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|tlen
argument_list|)
expr_stmt|;
block|}
return|return
name|destinationOffset
operator|+
name|tlen
return|;
block|}
comment|/**    * Copies the tags info into the tag portion of the cell    * @param cell    * @param destination    * @param destinationOffset    * @return the position after tags    */
specifier|public
specifier|static
name|int
name|copyTagsTo
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteBuffer
name|destination
parameter_list|,
name|int
name|destinationOffset
parameter_list|)
block|{
name|int
name|tlen
init|=
name|cell
operator|.
name|getTagsLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyFromBufferToBuffer
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsByteBuffer
argument_list|()
argument_list|,
name|destination
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsPosition
argument_list|()
argument_list|,
name|destinationOffset
argument_list|,
name|tlen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|copyFromArrayToBuffer
argument_list|(
name|destination
argument_list|,
name|destinationOffset
argument_list|,
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|tlen
argument_list|)
expr_stmt|;
block|}
return|return
name|destinationOffset
operator|+
name|tlen
return|;
block|}
comment|/**    * @param cell The Cell    * @return Tags in the given Cell as a List    */
specifier|public
specifier|static
name|List
argument_list|<
name|Tag
argument_list|>
name|getTags
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsItr
init|=
name|tagsIterator
argument_list|(
name|cell
argument_list|)
decl_stmt|;
while|while
condition|(
name|tagsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|tagsItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tags
return|;
block|}
comment|/**    * Retrieve Cell's first tag, matching the passed in type    * @param cell The Cell    * @param type Type of the Tag to retrieve    * @return null if there is no tag of the passed in tag type    */
specifier|public
specifier|static
name|Optional
argument_list|<
name|Tag
argument_list|>
name|getTag
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
name|boolean
name|bufferBacked
init|=
name|cell
operator|instanceof
name|ByteBufferExtendedCell
decl_stmt|;
name|int
name|length
init|=
name|cell
operator|.
name|getTagsLength
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|bufferBacked
condition|?
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsPosition
argument_list|()
else|:
name|cell
operator|.
name|getTagsOffset
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|offset
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|offset
operator|+
name|length
condition|)
block|{
name|int
name|tagLen
decl_stmt|;
if|if
condition|(
name|bufferBacked
condition|)
block|{
name|ByteBuffer
name|tagsBuffer
init|=
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsByteBuffer
argument_list|()
decl_stmt|;
name|tagLen
operator|=
name|ByteBufferUtils
operator|.
name|readAsInt
argument_list|(
name|tagsBuffer
argument_list|,
name|pos
argument_list|,
name|TAG_LENGTH_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|ByteBufferUtils
operator|.
name|toByte
argument_list|(
name|tagsBuffer
argument_list|,
name|pos
operator|+
name|TAG_LENGTH_SIZE
argument_list|)
operator|==
name|type
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ByteBufferTag
argument_list|(
name|tagsBuffer
argument_list|,
name|pos
argument_list|,
name|tagLen
operator|+
name|TAG_LENGTH_SIZE
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|tagLen
operator|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|pos
argument_list|,
name|TAG_LENGTH_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getTagsArray
argument_list|()
index|[
name|pos
operator|+
name|TAG_LENGTH_SIZE
index|]
operator|==
name|type
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|ArrayBackedTag
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|pos
argument_list|,
name|tagLen
operator|+
name|TAG_LENGTH_SIZE
argument_list|)
argument_list|)
return|;
block|}
block|}
name|pos
operator|+=
name|TAG_LENGTH_SIZE
operator|+
name|tagLen
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**    * Util method to iterate through the tags in the given cell.    * @param cell The Cell over which tags iterator is needed.    * @return iterator for the tags    */
specifier|public
specifier|static
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsIterator
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
specifier|final
name|int
name|tagsLength
init|=
name|cell
operator|.
name|getTagsLength
argument_list|()
decl_stmt|;
comment|// Save an object allocation where we can
if|if
condition|(
name|tagsLength
operator|==
literal|0
condition|)
block|{
return|return
name|TagUtil
operator|.
name|EMPTY_TAGS_ITR
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|tagsIterator
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsPosition
argument_list|()
argument_list|,
name|tagsLength
argument_list|)
return|;
block|}
return|return
name|CellUtil
operator|.
name|tagsIterator
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagsIterator
parameter_list|(
specifier|final
name|ByteBuffer
name|tags
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Tag
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|pos
init|=
name|offset
decl_stmt|;
specifier|private
name|int
name|endOffset
init|=
name|offset
operator|+
name|length
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|this
operator|.
name|pos
operator|<
name|endOffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tag
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|curTagLen
init|=
name|ByteBufferUtils
operator|.
name|readAsInt
argument_list|(
name|tags
argument_list|,
name|this
operator|.
name|pos
argument_list|,
name|Tag
operator|.
name|TAG_LENGTH_SIZE
argument_list|)
decl_stmt|;
name|Tag
name|tag
init|=
operator|new
name|ByteBufferTag
argument_list|(
name|tags
argument_list|,
name|pos
argument_list|,
name|curTagLen
operator|+
name|Tag
operator|.
name|TAG_LENGTH_SIZE
argument_list|)
decl_stmt|;
name|this
operator|.
name|pos
operator|+=
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|+
name|curTagLen
expr_stmt|;
return|return
name|tag
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
comment|/**    * Returns true if the first range start1...end1 overlaps with the second range start2...end2,    * assuming the byte arrays represent row keys    */
specifier|public
specifier|static
name|boolean
name|overlappingKeys
parameter_list|(
specifier|final
name|byte
index|[]
name|start1
parameter_list|,
specifier|final
name|byte
index|[]
name|end1
parameter_list|,
specifier|final
name|byte
index|[]
name|start2
parameter_list|,
specifier|final
name|byte
index|[]
name|end2
parameter_list|)
block|{
return|return
operator|(
name|end2
operator|.
name|length
operator|==
literal|0
operator|||
name|start1
operator|.
name|length
operator|==
literal|0
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|start1
argument_list|,
name|end2
argument_list|)
operator|<
literal|0
operator|)
operator|&&
operator|(
name|end1
operator|.
name|length
operator|==
literal|0
operator|||
name|start2
operator|.
name|length
operator|==
literal|0
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|start2
argument_list|,
name|end1
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
comment|/**    * Write rowkey excluding the common part.    * @param cell    * @param rLen    * @param commonPrefix    * @param out    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeRowKeyExcludingCommon
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|short
name|rLen
parameter_list|,
name|int
name|commonPrefix
parameter_list|,
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|commonPrefix
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeShort
argument_list|(
name|rLen
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commonPrefix
operator|==
literal|1
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|rLen
argument_list|)
expr_stmt|;
name|commonPrefix
operator|--
expr_stmt|;
block|}
else|else
block|{
name|commonPrefix
operator|-=
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|rLen
operator|>
name|commonPrefix
condition|)
block|{
name|writeRowSkippingBytes
argument_list|(
name|out
argument_list|,
name|cell
argument_list|,
name|rLen
argument_list|,
name|commonPrefix
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes the row from the given cell to the output stream excluding the common prefix    * @param out The dataoutputstream to which the data has to be written    * @param cell The cell whose contents has to be written    * @param rlength the row length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeRowSkippingBytes
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|short
name|rlength
parameter_list|,
name|int
name|commonPrefix
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
operator|(
name|DataOutput
operator|)
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
operator|+
name|commonPrefix
argument_list|,
name|rlength
operator|-
name|commonPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
operator|+
name|commonPrefix
argument_list|,
name|rlength
operator|-
name|commonPrefix
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Find length of common prefix in keys of the cells, considering key as byte[] if serialized in    * {@link KeyValue}. The key format is&lt;2 bytes rk len&gt;&lt;rk&gt;&lt;1 byte cf    * len&gt;&lt;cf&gt;&lt;qualifier&gt;&lt;8 bytes timestamp&gt;&lt;1 byte type&gt;    * @param c1 the cell    * @param c2 the cell    * @param bypassFamilyCheck when true assume the family bytes same in both cells. Pass it as true    *          when dealing with Cells in same CF so as to avoid some checks    * @param withTsType when true check timestamp and type bytes also.    * @return length of common prefix    */
specifier|public
specifier|static
name|int
name|findCommonPrefixInFlatKey
parameter_list|(
name|Cell
name|c1
parameter_list|,
name|Cell
name|c2
parameter_list|,
name|boolean
name|bypassFamilyCheck
parameter_list|,
name|boolean
name|withTsType
parameter_list|)
block|{
comment|// Compare the 2 bytes in RK length part
name|short
name|rLen1
init|=
name|c1
operator|.
name|getRowLength
argument_list|()
decl_stmt|;
name|short
name|rLen2
init|=
name|c2
operator|.
name|getRowLength
argument_list|()
decl_stmt|;
name|int
name|commonPrefix
init|=
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
decl_stmt|;
if|if
condition|(
name|rLen1
operator|!=
name|rLen2
condition|)
block|{
comment|// early out when the RK length itself is not matching
return|return
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rLen1
argument_list|)
argument_list|,
literal|0
argument_list|,
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rLen2
argument_list|)
argument_list|,
literal|0
argument_list|,
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
argument_list|)
return|;
block|}
comment|// Compare the RKs
name|int
name|rkCommonPrefix
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|c1
operator|instanceof
name|ByteBufferExtendedCell
operator|&&
name|c2
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|rkCommonPrefix
operator|=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c1
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c1
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|rLen1
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c2
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c2
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|rLen2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// There cannot be a case where one cell is BBCell and other is KeyValue. This flow comes
comment|// either
comment|// in flush or compactions. In flushes both cells are KV and in case of compaction it will be
comment|// either
comment|// KV or BBCell
name|rkCommonPrefix
operator|=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
name|c1
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|c1
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|rLen1
argument_list|,
name|c2
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|c2
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|rLen2
argument_list|)
expr_stmt|;
block|}
name|commonPrefix
operator|+=
name|rkCommonPrefix
expr_stmt|;
if|if
condition|(
name|rkCommonPrefix
operator|!=
name|rLen1
condition|)
block|{
comment|// Early out when RK is not fully matching.
return|return
name|commonPrefix
return|;
block|}
comment|// Compare 1 byte CF length part
name|byte
name|fLen1
init|=
name|c1
operator|.
name|getFamilyLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|bypassFamilyCheck
condition|)
block|{
comment|// This flag will be true when caller is sure that the family will be same for both the cells
comment|// Just make commonPrefix to increment by the family part
name|commonPrefix
operator|+=
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|fLen1
expr_stmt|;
block|}
else|else
block|{
name|byte
name|fLen2
init|=
name|c2
operator|.
name|getFamilyLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|fLen1
operator|!=
name|fLen2
condition|)
block|{
comment|// early out when the CF length itself is not matching
return|return
name|commonPrefix
return|;
block|}
comment|// CF lengths are same so there is one more byte common in key part
name|commonPrefix
operator|+=
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
expr_stmt|;
comment|// Compare the CF names
name|int
name|fCommonPrefix
decl_stmt|;
if|if
condition|(
name|c1
operator|instanceof
name|ByteBufferExtendedCell
operator|&&
name|c2
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|fCommonPrefix
operator|=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c1
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c1
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|fLen1
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c2
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c2
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|fLen2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fCommonPrefix
operator|=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
name|c1
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|c1
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|fLen1
argument_list|,
name|c2
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|c2
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|fLen2
argument_list|)
expr_stmt|;
block|}
name|commonPrefix
operator|+=
name|fCommonPrefix
expr_stmt|;
if|if
condition|(
name|fCommonPrefix
operator|!=
name|fLen1
condition|)
block|{
return|return
name|commonPrefix
return|;
block|}
block|}
comment|// Compare the Qualifiers
name|int
name|qLen1
init|=
name|c1
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
name|int
name|qLen2
init|=
name|c2
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
name|int
name|qCommon
decl_stmt|;
if|if
condition|(
name|c1
operator|instanceof
name|ByteBufferExtendedCell
operator|&&
name|c2
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|qCommon
operator|=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c1
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c1
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|qLen1
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c2
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|c2
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|qLen2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qCommon
operator|=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
name|c1
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c1
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|qLen1
argument_list|,
name|c2
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c2
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|qLen2
argument_list|)
expr_stmt|;
block|}
name|commonPrefix
operator|+=
name|qCommon
expr_stmt|;
if|if
condition|(
operator|!
name|withTsType
operator|||
name|Math
operator|.
name|max
argument_list|(
name|qLen1
argument_list|,
name|qLen2
argument_list|)
operator|!=
name|qCommon
condition|)
block|{
return|return
name|commonPrefix
return|;
block|}
comment|// Compare the timestamp parts
name|int
name|tsCommonPrefix
init|=
name|ByteBufferUtils
operator|.
name|findCommonPrefix
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|c1
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|c2
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|)
decl_stmt|;
name|commonPrefix
operator|+=
name|tsCommonPrefix
expr_stmt|;
if|if
condition|(
name|tsCommonPrefix
operator|!=
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
condition|)
block|{
return|return
name|commonPrefix
return|;
block|}
comment|// Compare the type
if|if
condition|(
name|c1
operator|.
name|getTypeByte
argument_list|()
operator|==
name|c2
operator|.
name|getTypeByte
argument_list|()
condition|)
block|{
name|commonPrefix
operator|+=
name|KeyValue
operator|.
name|TYPE_SIZE
expr_stmt|;
block|}
return|return
name|commonPrefix
return|;
block|}
comment|/**    * Used to compare two cells based on the column hint provided. This is specifically used when we    * need to optimize the seeks based on the next indexed key. This is an advanced usage API    * specifically needed for some optimizations.    * @param nextIndexedCell the next indexed cell    * @param currentCell the cell to be compared    * @param foff the family offset of the currentCell    * @param flen the family length of the currentCell    * @param colHint the column hint provided - could be null    * @param coff the offset of the column hint if provided, if not offset of the currentCell's    *          qualifier    * @param clen the length of the column hint if provided, if not length of the currentCell's    *          qualifier    * @param ts the timestamp to be seeked    * @param type the type to be seeked    * @return an int based on the given column hint TODO : To be moved out of here because this is a    *         special API used in scan optimization.    */
comment|// compare a key against row/fam/qual/ts/type
specifier|public
specifier|static
specifier|final
name|int
name|compareKeyBasedOnColHint
parameter_list|(
name|CellComparator
name|comparator
parameter_list|,
name|Cell
name|nextIndexedCell
parameter_list|,
name|Cell
name|currentCell
parameter_list|,
name|int
name|foff
parameter_list|,
name|int
name|flen
parameter_list|,
name|byte
index|[]
name|colHint
parameter_list|,
name|int
name|coff
parameter_list|,
name|int
name|clen
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
name|int
name|compare
init|=
name|comparator
operator|.
name|compareRows
argument_list|(
name|nextIndexedCell
argument_list|,
name|currentCell
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
comment|// If the column is not specified, the "minimum" key type appears the
comment|// latest in the sorted order, regardless of the timestamp. This is used
comment|// for specifying the last key/value in a given row, because there is no
comment|// "lexicographically last column" (it would be infinitely long). The
comment|// "maximum" key type does not need this behavior.
if|if
condition|(
name|nextIndexedCell
operator|.
name|getFamilyLength
argument_list|()
operator|+
name|nextIndexedCell
operator|.
name|getQualifierLength
argument_list|()
operator|==
literal|0
operator|&&
name|nextIndexedCell
operator|.
name|getTypeByte
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
condition|)
block|{
comment|// left is "bigger", i.e. it appears later in the sorted order
return|return
literal|1
return|;
block|}
if|if
condition|(
name|flen
operator|+
name|clen
operator|==
literal|0
operator|&&
name|type
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|compare
operator|=
name|comparator
operator|.
name|compareFamilies
argument_list|(
name|nextIndexedCell
argument_list|,
name|currentCell
argument_list|)
expr_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
if|if
condition|(
name|colHint
operator|==
literal|null
condition|)
block|{
name|compare
operator|=
name|comparator
operator|.
name|compareQualifiers
argument_list|(
name|nextIndexedCell
argument_list|,
name|currentCell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compare
operator|=
name|CellUtil
operator|.
name|compareQualifiers
argument_list|(
name|nextIndexedCell
argument_list|,
name|colHint
argument_list|,
name|coff
argument_list|,
name|clen
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
comment|// Next compare timestamps.
name|compare
operator|=
name|comparator
operator|.
name|compareTimestamps
argument_list|(
name|nextIndexedCell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|ts
argument_list|)
expr_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
comment|// Compare types. Let the delete types sort ahead of puts; i.e. types
comment|// of higher numbers sort before those of lesser numbers. Maximum (255)
comment|// appears ahead of everything, and minimum (0) appears after
comment|// everything.
return|return
operator|(
literal|0xff
operator|&
name|type
operator|)
operator|-
operator|(
literal|0xff
operator|&
name|nextIndexedCell
operator|.
name|getTypeByte
argument_list|()
operator|)
return|;
block|}
comment|/**    * Compares only the key portion of a cell. It does not include the sequence id/mvcc of the cell    * @param left    * @param right    * @return an int greater than 0 if left&gt; than right lesser than 0 if left&lt; than right    *         equal to 0 if left is equal to right    */
specifier|public
specifier|static
specifier|final
name|int
name|compareKeyIgnoresMvcc
parameter_list|(
name|CellComparator
name|comparator
parameter_list|,
name|Cell
name|left
parameter_list|,
name|Cell
name|right
parameter_list|)
block|{
return|return
operator|(
operator|(
name|CellComparatorImpl
operator|)
name|comparator
operator|)
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Compare cell's row against given comparator    * @param cell    * @param comparator    * @return result comparing cell's row    */
specifier|public
specifier|static
name|int
name|compareRow
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|comparator
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
return|return
name|comparator
operator|.
name|compareTo
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compare cell's column family against given comparator    * @param cell    * @param comparator    * @return result comparing cell's column family    */
specifier|public
specifier|static
name|int
name|compareFamily
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|comparator
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
return|;
block|}
return|return
name|comparator
operator|.
name|compareTo
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compare cell's qualifier against given comparator    * @param cell    * @param comparator    * @return result comparing cell's qualifier    */
specifier|public
specifier|static
name|int
name|compareQualifier
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|comparator
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
return|return
name|comparator
operator|.
name|compareTo
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
operator|.
name|Type
name|toType
parameter_list|(
name|byte
name|type
parameter_list|)
block|{
name|KeyValue
operator|.
name|Type
name|codeToType
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|type
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|codeToType
condition|)
block|{
case|case
name|Put
case|:
return|return
name|Cell
operator|.
name|Type
operator|.
name|Put
return|;
case|case
name|Delete
case|:
return|return
name|Cell
operator|.
name|Type
operator|.
name|Delete
return|;
case|case
name|DeleteColumn
case|:
return|return
name|Cell
operator|.
name|Type
operator|.
name|DeleteColumn
return|;
case|case
name|DeleteFamily
case|:
return|return
name|Cell
operator|.
name|Type
operator|.
name|DeleteFamily
return|;
case|case
name|DeleteFamilyVersion
case|:
return|return
name|Cell
operator|.
name|Type
operator|.
name|DeleteFamilyVersion
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Invalid type of cell "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|KeyValue
operator|.
name|Type
name|toTypeByte
parameter_list|(
name|Cell
operator|.
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Put
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Put
return|;
case|case
name|Delete
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
return|;
case|case
name|DeleteColumn
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
return|;
case|case
name|DeleteFamilyVersion
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamilyVersion
return|;
case|case
name|DeleteFamily
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unsupported data type:"
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compare cell's value against given comparator    * @param cell    * @param comparator    * @return result comparing cell's value    */
specifier|public
specifier|static
name|int
name|compareValue
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|comparator
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
return|return
name|comparator
operator|.
name|compareTo
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * These cells are used in reseeks/seeks to improve the read performance. They are not real cells    * that are returned back to the clients    */
specifier|private
specifier|static
specifier|abstract
class|class
name|EmptyCell
implements|implements
name|ExtendedCell
block|{
annotation|@
name|Override
specifier|public
name|void
name|setSequenceId
parameter_list|(
name|long
name|seqId
parameter_list|)
block|{
comment|// Fake cells don't need seqId, so leaving it as a noop.
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
comment|// Fake cells can't be changed timestamp, so leaving it as a noop.
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|byte
index|[]
name|ts
parameter_list|)
block|{
comment|// Fake cells can't be changed timestamp, so leaving it as a noop.
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|EMPTY_BYTE_ARRAY
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|EMPTY_BYTE_ARRAY
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|EMPTY_BYTE_ARRAY
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|EMPTY_BYTE_ARRAY
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
return|return
name|EMPTY_BYTE_ARRAY
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**    * These cells are used in reseeks/seeks to improve the read performance. They are not real cells    * that are returned back to the clients    */
specifier|private
specifier|static
specifier|abstract
class|class
name|EmptyByteBufferExtendedCell
extends|extends
name|ByteBufferExtendedCell
block|{
annotation|@
name|Override
specifier|public
name|void
name|setSequenceId
parameter_list|(
name|long
name|seqId
parameter_list|)
block|{
comment|// Fake cells don't need seqId, so leaving it as a noop.
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|ts
parameter_list|)
block|{
comment|// Fake cells can't be changed timestamp, so leaving it as a noop.
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|byte
index|[]
name|ts
parameter_list|)
block|{
comment|// Fake cells can't be changed timestamp, so leaving it as a noop.
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
return|return
name|CellUtil
operator|.
name|cloneTags
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getRowByteBuffer
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|EMPTY_BYTE_BUFFER
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowPosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getFamilyByteBuffer
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|EMPTY_BYTE_BUFFER
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyPosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getQualifierByteBuffer
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|EMPTY_BYTE_BUFFER
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierPosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getTagsByteBuffer
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|EMPTY_BYTE_BUFFER
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsPosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getValueByteBuffer
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|EMPTY_BYTE_BUFFER
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValuePosition
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FirstOnRowCell
extends|extends
name|EmptyCell
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_HEAPSIZE
init|=
name|ClassSize
operator|.
name|OBJECT
comment|// object
operator|+
name|ClassSize
operator|.
name|REFERENCE
comment|// row array
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
comment|// row offset
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
decl_stmt|;
comment|// row length
specifier|private
specifier|final
name|byte
index|[]
name|rowArray
decl_stmt|;
specifier|private
specifier|final
name|int
name|roffset
decl_stmt|;
specifier|private
specifier|final
name|short
name|rlength
decl_stmt|;
specifier|public
name|FirstOnRowCell
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|)
block|{
name|this
operator|.
name|rowArray
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|roffset
operator|=
name|roffset
expr_stmt|;
name|this
operator|.
name|rlength
operator|=
name|rlength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_HEAPSIZE
argument_list|)
comment|// array overhead
operator|+
operator|(
name|rlength
operator|==
literal|0
condition|?
name|ClassSize
operator|.
name|sizeOfByteArray
argument_list|(
name|rlength
argument_list|)
else|:
name|rlength
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowArray
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|roffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|rlength
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|LATEST_TIMESTAMP
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Maximum
operator|.
name|getCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FirstOnRowByteBufferExtendedCell
extends|extends
name|EmptyByteBufferExtendedCell
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|OBJECT
comment|// object
operator|+
name|ClassSize
operator|.
name|REFERENCE
comment|// row buffer
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
comment|// row offset
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
decl_stmt|;
comment|// row length
specifier|private
specifier|final
name|ByteBuffer
name|rowBuff
decl_stmt|;
specifier|private
specifier|final
name|int
name|roffset
decl_stmt|;
specifier|private
specifier|final
name|short
name|rlength
decl_stmt|;
specifier|public
name|FirstOnRowByteBufferExtendedCell
parameter_list|(
specifier|final
name|ByteBuffer
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|)
block|{
name|this
operator|.
name|rowBuff
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|roffset
operator|=
name|roffset
expr_stmt|;
name|this
operator|.
name|rlength
operator|=
name|rlength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|rowBuff
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|rlength
argument_list|)
return|;
block|}
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getRowByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBuff
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|roffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|rlength
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|LATEST_TIMESTAMP
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Maximum
operator|.
name|getCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LastOnRowByteBufferExtendedCell
extends|extends
name|EmptyByteBufferExtendedCell
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|OBJECT
comment|// object
operator|+
name|ClassSize
operator|.
name|REFERENCE
comment|// rowBuff
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
comment|// roffset
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
decl_stmt|;
comment|// rlength
specifier|private
specifier|final
name|ByteBuffer
name|rowBuff
decl_stmt|;
specifier|private
specifier|final
name|int
name|roffset
decl_stmt|;
specifier|private
specifier|final
name|short
name|rlength
decl_stmt|;
specifier|public
name|LastOnRowByteBufferExtendedCell
parameter_list|(
specifier|final
name|ByteBuffer
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|)
block|{
name|this
operator|.
name|rowBuff
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|roffset
operator|=
name|roffset
expr_stmt|;
name|this
operator|.
name|rlength
operator|=
name|rlength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|rowBuff
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|rlength
argument_list|)
return|;
block|}
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getRowByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowBuff
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|roffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|rlength
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|OLDEST_TIMESTAMP
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FirstOnRowColByteBufferExtendedCell
extends|extends
name|FirstOnRowByteBufferExtendedCell
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_OVERHEAD
init|=
name|FirstOnRowByteBufferExtendedCell
operator|.
name|FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|REFERENCE
operator|*
literal|2
comment|// family buffer and column buffer
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
operator|*
literal|3
comment|// famOffset, colOffset, colLength
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
decl_stmt|;
comment|// famLength
specifier|private
specifier|final
name|ByteBuffer
name|famBuff
decl_stmt|;
specifier|private
specifier|final
name|int
name|famOffset
decl_stmt|;
specifier|private
specifier|final
name|byte
name|famLength
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|colBuff
decl_stmt|;
specifier|private
specifier|final
name|int
name|colOffset
decl_stmt|;
specifier|private
specifier|final
name|int
name|colLength
decl_stmt|;
specifier|public
name|FirstOnRowColByteBufferExtendedCell
parameter_list|(
specifier|final
name|ByteBuffer
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|,
specifier|final
name|ByteBuffer
name|famBuff
parameter_list|,
specifier|final
name|int
name|famOffset
parameter_list|,
specifier|final
name|byte
name|famLength
parameter_list|,
specifier|final
name|ByteBuffer
name|col
parameter_list|,
specifier|final
name|int
name|colOffset
parameter_list|,
specifier|final
name|int
name|colLength
parameter_list|)
block|{
name|super
argument_list|(
name|row
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
expr_stmt|;
name|this
operator|.
name|famBuff
operator|=
name|famBuff
expr_stmt|;
name|this
operator|.
name|famOffset
operator|=
name|famOffset
expr_stmt|;
name|this
operator|.
name|famLength
operator|=
name|famLength
expr_stmt|;
name|this
operator|.
name|colBuff
operator|=
name|col
expr_stmt|;
name|this
operator|.
name|colOffset
operator|=
name|colOffset
expr_stmt|;
name|this
operator|.
name|colLength
operator|=
name|colLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
if|if
condition|(
name|famBuff
operator|.
name|hasArray
argument_list|()
operator|&&
name|colBuff
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|famLength
operator|+
name|colLength
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|famBuff
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|famLength
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colBuff
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|colLength
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getFamilyByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|famBuff
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|famOffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|famLength
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getQualifierByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|colBuff
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|colOffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|colLength
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FirstOnRowColCell
extends|extends
name|FirstOnRowCell
block|{
specifier|private
specifier|static
specifier|final
name|long
name|FIXED_HEAPSIZE
init|=
name|FirstOnRowCell
operator|.
name|FIXED_HEAPSIZE
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
comment|// flength
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
operator|*
literal|3
comment|// foffset, qoffset, qlength
operator|+
name|ClassSize
operator|.
name|REFERENCE
operator|*
literal|2
decl_stmt|;
comment|// fArray, qArray
specifier|private
specifier|final
name|byte
index|[]
name|fArray
decl_stmt|;
specifier|private
specifier|final
name|int
name|foffset
decl_stmt|;
specifier|private
specifier|final
name|byte
name|flength
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|qArray
decl_stmt|;
specifier|private
specifier|final
name|int
name|qoffset
decl_stmt|;
specifier|private
specifier|final
name|int
name|qlength
decl_stmt|;
specifier|public
name|FirstOnRowColCell
parameter_list|(
name|byte
index|[]
name|rArray
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|,
name|byte
index|[]
name|fArray
parameter_list|,
name|int
name|foffset
parameter_list|,
name|byte
name|flength
parameter_list|,
name|byte
index|[]
name|qArray
parameter_list|,
name|int
name|qoffset
parameter_list|,
name|int
name|qlength
parameter_list|)
block|{
name|super
argument_list|(
name|rArray
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
expr_stmt|;
name|this
operator|.
name|fArray
operator|=
name|fArray
expr_stmt|;
name|this
operator|.
name|foffset
operator|=
name|foffset
expr_stmt|;
name|this
operator|.
name|flength
operator|=
name|flength
expr_stmt|;
name|this
operator|.
name|qArray
operator|=
name|qArray
expr_stmt|;
name|this
operator|.
name|qoffset
operator|=
name|qoffset
expr_stmt|;
name|this
operator|.
name|qlength
operator|=
name|qlength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_HEAPSIZE
argument_list|)
comment|// array overhead
operator|+
operator|(
name|flength
operator|==
literal|0
condition|?
name|ClassSize
operator|.
name|sizeOfByteArray
argument_list|(
name|flength
argument_list|)
else|:
name|flength
operator|)
operator|+
operator|(
name|qlength
operator|==
literal|0
condition|?
name|ClassSize
operator|.
name|sizeOfByteArray
argument_list|(
name|qlength
argument_list|)
else|:
name|qlength
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|fArray
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|foffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|flength
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|qArray
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|qoffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|qlength
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FirstOnRowColTSCell
extends|extends
name|FirstOnRowColCell
block|{
specifier|private
specifier|static
specifier|final
name|long
name|FIXED_HEAPSIZE
init|=
name|FirstOnRowColCell
operator|.
name|FIXED_HEAPSIZE
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
decl_stmt|;
comment|// ts
specifier|private
name|long
name|ts
decl_stmt|;
specifier|public
name|FirstOnRowColTSCell
parameter_list|(
name|byte
index|[]
name|rArray
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|,
name|byte
index|[]
name|fArray
parameter_list|,
name|int
name|foffset
parameter_list|,
name|byte
name|flength
parameter_list|,
name|byte
index|[]
name|qArray
parameter_list|,
name|int
name|qoffset
parameter_list|,
name|int
name|qlength
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
name|super
argument_list|(
name|rArray
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|,
name|fArray
argument_list|,
name|foffset
argument_list|,
name|flength
argument_list|,
name|qArray
argument_list|,
name|qoffset
argument_list|,
name|qlength
argument_list|)
expr_stmt|;
name|this
operator|.
name|ts
operator|=
name|ts
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|ts
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_HEAPSIZE
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FirstOnRowColTSByteBufferExtendedCell
extends|extends
name|FirstOnRowColByteBufferExtendedCell
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_OVERHEAD
init|=
name|FirstOnRowColByteBufferExtendedCell
operator|.
name|FIXED_OVERHEAD
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
decl_stmt|;
comment|// ts
specifier|private
name|long
name|ts
decl_stmt|;
specifier|public
name|FirstOnRowColTSByteBufferExtendedCell
parameter_list|(
name|ByteBuffer
name|rBuffer
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|,
name|ByteBuffer
name|fBuffer
parameter_list|,
name|int
name|foffset
parameter_list|,
name|byte
name|flength
parameter_list|,
name|ByteBuffer
name|qBuffer
parameter_list|,
name|int
name|qoffset
parameter_list|,
name|int
name|qlength
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
name|super
argument_list|(
name|rBuffer
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|,
name|fBuffer
argument_list|,
name|foffset
argument_list|,
name|flength
argument_list|,
name|qBuffer
argument_list|,
name|qoffset
argument_list|,
name|qlength
argument_list|)
expr_stmt|;
name|this
operator|.
name|ts
operator|=
name|ts
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|ts
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|super
operator|.
name|heapSize
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LastOnRowCell
extends|extends
name|EmptyCell
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|OBJECT
comment|// object
operator|+
name|ClassSize
operator|.
name|REFERENCE
comment|// row array
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
comment|// row offset
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
decl_stmt|;
comment|// row length
specifier|private
specifier|final
name|byte
index|[]
name|rowArray
decl_stmt|;
specifier|private
specifier|final
name|int
name|roffset
decl_stmt|;
specifier|private
specifier|final
name|short
name|rlength
decl_stmt|;
specifier|public
name|LastOnRowCell
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|)
block|{
name|this
operator|.
name|rowArray
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|roffset
operator|=
name|roffset
expr_stmt|;
name|this
operator|.
name|rlength
operator|=
name|rlength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
argument_list|)
comment|// array overhead
operator|+
operator|(
name|rlength
operator|==
literal|0
condition|?
name|ClassSize
operator|.
name|sizeOfByteArray
argument_list|(
name|rlength
argument_list|)
else|:
name|rlength
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|rowArray
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|roffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|rlength
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|OLDEST_TIMESTAMP
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LastOnRowColCell
extends|extends
name|LastOnRowCell
block|{
specifier|private
specifier|static
specifier|final
name|long
name|FIXED_OVERHEAD
init|=
name|LastOnRowCell
operator|.
name|FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|REFERENCE
operator|*
literal|2
comment|// fArray and qArray
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
operator|*
literal|3
comment|// foffset, qoffset, qlength
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
decl_stmt|;
comment|// flength
specifier|private
specifier|final
name|byte
index|[]
name|fArray
decl_stmt|;
specifier|private
specifier|final
name|int
name|foffset
decl_stmt|;
specifier|private
specifier|final
name|byte
name|flength
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|qArray
decl_stmt|;
specifier|private
specifier|final
name|int
name|qoffset
decl_stmt|;
specifier|private
specifier|final
name|int
name|qlength
decl_stmt|;
specifier|public
name|LastOnRowColCell
parameter_list|(
name|byte
index|[]
name|rArray
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|,
name|byte
index|[]
name|fArray
parameter_list|,
name|int
name|foffset
parameter_list|,
name|byte
name|flength
parameter_list|,
name|byte
index|[]
name|qArray
parameter_list|,
name|int
name|qoffset
parameter_list|,
name|int
name|qlength
parameter_list|)
block|{
name|super
argument_list|(
name|rArray
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
expr_stmt|;
name|this
operator|.
name|fArray
operator|=
name|fArray
expr_stmt|;
name|this
operator|.
name|foffset
operator|=
name|foffset
expr_stmt|;
name|this
operator|.
name|flength
operator|=
name|flength
expr_stmt|;
name|this
operator|.
name|qArray
operator|=
name|qArray
expr_stmt|;
name|this
operator|.
name|qoffset
operator|=
name|qoffset
expr_stmt|;
name|this
operator|.
name|qlength
operator|=
name|qlength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
argument_list|)
comment|// array overhead
operator|+
operator|(
name|flength
operator|==
literal|0
condition|?
name|ClassSize
operator|.
name|sizeOfByteArray
argument_list|(
name|flength
argument_list|)
else|:
name|flength
operator|)
operator|+
operator|(
name|qlength
operator|==
literal|0
condition|?
name|ClassSize
operator|.
name|sizeOfByteArray
argument_list|(
name|qlength
argument_list|)
else|:
name|qlength
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|fArray
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|foffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|flength
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|qArray
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|qoffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|qlength
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LastOnRowColByteBufferExtendedCell
extends|extends
name|LastOnRowByteBufferExtendedCell
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_OVERHEAD
init|=
name|LastOnRowByteBufferExtendedCell
operator|.
name|FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|REFERENCE
operator|*
literal|2
comment|// fBuffer and qBuffer
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
operator|*
literal|3
comment|// foffset, qoffset, qlength
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
decl_stmt|;
comment|// flength
specifier|private
specifier|final
name|ByteBuffer
name|fBuffer
decl_stmt|;
specifier|private
specifier|final
name|int
name|foffset
decl_stmt|;
specifier|private
specifier|final
name|byte
name|flength
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|qBuffer
decl_stmt|;
specifier|private
specifier|final
name|int
name|qoffset
decl_stmt|;
specifier|private
specifier|final
name|int
name|qlength
decl_stmt|;
specifier|public
name|LastOnRowColByteBufferExtendedCell
parameter_list|(
name|ByteBuffer
name|rBuffer
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|,
name|ByteBuffer
name|fBuffer
parameter_list|,
name|int
name|foffset
parameter_list|,
name|byte
name|flength
parameter_list|,
name|ByteBuffer
name|qBuffer
parameter_list|,
name|int
name|qoffset
parameter_list|,
name|int
name|qlength
parameter_list|)
block|{
name|super
argument_list|(
name|rBuffer
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
expr_stmt|;
name|this
operator|.
name|fBuffer
operator|=
name|fBuffer
expr_stmt|;
name|this
operator|.
name|foffset
operator|=
name|foffset
expr_stmt|;
name|this
operator|.
name|flength
operator|=
name|flength
expr_stmt|;
name|this
operator|.
name|qBuffer
operator|=
name|qBuffer
expr_stmt|;
name|this
operator|.
name|qoffset
operator|=
name|qoffset
expr_stmt|;
name|this
operator|.
name|qlength
operator|=
name|qlength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
if|if
condition|(
name|fBuffer
operator|.
name|hasArray
argument_list|()
operator|&&
name|qBuffer
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|flength
operator|+
name|qlength
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fBuffer
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|flength
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|qBuffer
operator|.
name|hasArray
argument_list|()
condition|)
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
operator|+
name|qlength
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getFamilyByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|fBuffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|foffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|flength
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getQualifierByteBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|qBuffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|qoffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|qlength
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FirstOnRowDeleteFamilyCell
extends|extends
name|EmptyCell
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_OVERHEAD
init|=
name|ClassSize
operator|.
name|OBJECT
comment|// object
operator|+
name|ClassSize
operator|.
name|REFERENCE
operator|*
literal|2
comment|// fBuffer and qBuffer
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
operator|*
literal|3
comment|// foffset, qoffset, qlength
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
decl_stmt|;
comment|// flength
specifier|private
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|fam
decl_stmt|;
specifier|public
name|FirstOnRowDeleteFamilyCell
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|fam
operator|=
name|fam
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|FIXED_OVERHEAD
argument_list|)
comment|// array overhead
operator|+
operator|(
name|getRowLength
argument_list|()
operator|==
literal|0
condition|?
name|ClassSize
operator|.
name|sizeOfByteArray
argument_list|(
name|getRowLength
argument_list|()
argument_list|)
else|:
name|getRowLength
argument_list|()
operator|)
operator|+
operator|(
name|getFamilyLength
argument_list|()
operator|==
literal|0
condition|?
name|ClassSize
operator|.
name|sizeOfByteArray
argument_list|(
name|getFamilyLength
argument_list|()
argument_list|)
else|:
name|getFamilyLength
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|this
operator|.
name|row
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|fam
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
name|this
operator|.
name|fam
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|LATEST_TIMESTAMP
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|DeleteFamily
return|;
block|}
block|}
comment|/**    * Writes the Cell's key part as it would have serialized in a KeyValue. The format is&lt;2 bytes    * rk len&gt;&lt;rk&gt;&lt;1 byte cf len&gt;&lt;cf&gt;&lt;qualifier&gt;&lt;8 bytes    * timestamp&gt;&lt;1 byte type&gt;    * @param cell    * @param out    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeFlatKey
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|short
name|rowLen
init|=
name|cell
operator|.
name|getRowLength
argument_list|()
decl_stmt|;
name|byte
name|fLen
init|=
name|cell
operator|.
name|getFamilyLength
argument_list|()
decl_stmt|;
name|int
name|qLen
init|=
name|cell
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
comment|// Using just one if/else loop instead of every time checking before writing every
comment|// component of cell
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|out
operator|.
name|writeShort
argument_list|(
name|rowLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|rowLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|fLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|fLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|qLen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeShort
argument_list|(
name|rowLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|rowLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|fLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|fLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|qLen
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|cell
operator|.
name|getTypeByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deep clones the given cell if the cell supports deep cloning    * @param cell the cell to be cloned    * @return the cloned cell    * @throws CloneNotSupportedException    */
specifier|public
specifier|static
name|Cell
name|deepClone
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|CloneNotSupportedException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ExtendedCell
condition|)
block|{
return|return
operator|(
operator|(
name|ExtendedCell
operator|)
name|cell
operator|)
operator|.
name|deepClone
argument_list|()
return|;
block|}
throw|throw
operator|new
name|CloneNotSupportedException
argument_list|()
throw|;
block|}
comment|/**    * Writes the cell to the given OutputStream    * @param cell the cell to be written    * @param out the outputstream    * @param withTags if tags are to be written or not    * @return the total bytes written    * @throws IOException    */
specifier|public
specifier|static
name|int
name|writeCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|boolean
name|withTags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ExtendedCell
condition|)
block|{
return|return
operator|(
operator|(
name|ExtendedCell
operator|)
name|cell
operator|)
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|withTags
argument_list|)
return|;
block|}
else|else
block|{
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|estimatedSerializedSizeOfKey
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|out
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|writeFlatKey
argument_list|(
name|cell
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|writeValue
argument_list|(
name|out
argument_list|,
name|cell
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|tagsLength
init|=
name|cell
operator|.
name|getTagsLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|withTags
condition|)
block|{
name|byte
index|[]
name|len
init|=
operator|new
name|byte
index|[
name|Bytes
operator|.
name|SIZEOF_SHORT
index|]
decl_stmt|;
name|Bytes
operator|.
name|putAsShort
argument_list|(
name|len
argument_list|,
literal|0
argument_list|,
name|tagsLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|tagsLength
operator|>
literal|0
condition|)
block|{
name|writeTags
argument_list|(
name|out
argument_list|,
name|cell
argument_list|,
name|tagsLength
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|lenWritten
init|=
operator|(
literal|2
operator|*
name|Bytes
operator|.
name|SIZEOF_INT
operator|)
operator|+
name|estimatedSerializedSizeOfKey
argument_list|(
name|cell
argument_list|)
operator|+
name|cell
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|withTags
condition|)
block|{
name|lenWritten
operator|+=
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|+
name|tagsLength
expr_stmt|;
block|}
return|return
name|lenWritten
return|;
block|}
block|}
comment|/**    * Writes a cell to the buffer at the given offset    * @param cell the cell to be written    * @param buf the buffer to which the cell has to be wrriten    * @param offset the offset at which the cell should be written    */
specifier|public
specifier|static
name|void
name|writeCellToBuffer
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ExtendedCell
condition|)
block|{
operator|(
operator|(
name|ExtendedCell
operator|)
name|cell
operator|)
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Using the KVUtil
name|byte
index|[]
name|bytes
init|=
name|KeyValueUtil
operator|.
name|copyToNewByteArray
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|ByteBufferUtils
operator|.
name|copyFromArrayToBuffer
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|writeFlatKey
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|short
name|rowLen
init|=
name|cell
operator|.
name|getRowLength
argument_list|()
decl_stmt|;
name|byte
name|fLen
init|=
name|cell
operator|.
name|getFamilyLength
argument_list|()
decl_stmt|;
name|int
name|qLen
init|=
name|cell
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
comment|// Using just one if/else loop instead of every time checking before writing every
comment|// component of cell
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|StreamUtils
operator|.
name|writeShort
argument_list|(
name|out
argument_list|,
name|rowLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|rowLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|fLen
argument_list|)
expr_stmt|;
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|qLen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StreamUtils
operator|.
name|writeShort
argument_list|(
name|out
argument_list|,
name|rowLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|rowLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|fLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|qLen
argument_list|)
expr_stmt|;
block|}
name|StreamUtils
operator|.
name|writeLong
argument_list|(
name|out
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getTypeByte
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Bytes
operator|.
name|SIZEOF_SHORT
operator|+
name|rowLen
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
operator|+
name|fLen
operator|+
name|qLen
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
operator|+
name|Bytes
operator|.
name|SIZEOF_BYTE
return|;
block|}
comment|/**    * Sets the given seqId to the cell. Marked as audience Private as of 1.2.0. Setting a Cell    * sequenceid is an internal implementation detail not for general public use.    * @param cell    * @param seqId    * @throws IOException when the passed cell is not of type {@link ExtendedCell}    */
specifier|public
specifier|static
name|void
name|setSequenceId
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ExtendedCell
condition|)
block|{
operator|(
operator|(
name|ExtendedCell
operator|)
name|cell
operator|)
operator|.
name|setSequenceId
argument_list|(
name|seqId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cell is not of type "
operator|+
name|ExtendedCell
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets the given timestamp to the cell.    * @param cell    * @param ts    * @throws IOException when the passed cell is not of type {@link ExtendedCell}    */
specifier|public
specifier|static
name|void
name|setTimestamp
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ExtendedCell
condition|)
block|{
operator|(
operator|(
name|ExtendedCell
operator|)
name|cell
operator|)
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cell is not of type "
operator|+
name|ExtendedCell
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets the given timestamp to the cell.    * @param cell    * @param ts buffer containing the timestamp value    * @throws IOException when the passed cell is not of type {@link ExtendedCell}    */
specifier|public
specifier|static
name|void
name|setTimestamp
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ExtendedCell
condition|)
block|{
operator|(
operator|(
name|ExtendedCell
operator|)
name|cell
operator|)
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cell is not of type "
operator|+
name|ExtendedCell
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets the given timestamp to the cell iff current timestamp is    * {@link HConstants#LATEST_TIMESTAMP}.    * @param cell    * @param ts    * @return True if cell timestamp is modified.    * @throws IOException when the passed cell is not of type {@link ExtendedCell}    */
specifier|public
specifier|static
name|boolean
name|updateLatestStamp
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|.
name|getTimestamp
argument_list|()
operator|==
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|)
block|{
name|setTimestamp
argument_list|(
name|cell
argument_list|,
name|ts
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Sets the given timestamp to the cell iff current timestamp is    * {@link HConstants#LATEST_TIMESTAMP}.    * @param cell    * @param ts buffer containing the timestamp value    * @return True if cell timestamp is modified.    * @throws IOException when the passed cell is not of type {@link ExtendedCell}    */
specifier|public
specifier|static
name|boolean
name|updateLatestStamp
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|.
name|getTimestamp
argument_list|()
operator|==
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|)
block|{
name|setTimestamp
argument_list|(
name|cell
argument_list|,
name|ts
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Writes the row from the given cell to the output stream    * @param out The outputstream to which the data has to be written    * @param cell The cell whose contents has to be written    * @param rlength the row length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeRow
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|short
name|rlength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|rlength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|rlength
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes the family from the given cell to the output stream    * @param out The outputstream to which the data has to be written    * @param cell The cell whose contents has to be written    * @param flength the family length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeFamily
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|byte
name|flength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|flength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|flength
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes the qualifier from the given cell to the output stream    * @param out The outputstream to which the data has to be written    * @param cell The cell whose contents has to be written    * @param qlength the qualifier length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeQualifier
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|int
name|qlength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|qlength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|qlength
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes the qualifier from the given cell to the output stream excluding the common prefix    * @param out The dataoutputstream to which the data has to be written    * @param cell The cell whose contents has to be written    * @param qlength the qualifier length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeQualifierSkippingBytes
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|int
name|qlength
parameter_list|,
name|int
name|commonPrefix
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
operator|(
name|DataOutput
operator|)
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
operator|+
name|commonPrefix
argument_list|,
name|qlength
operator|-
name|commonPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
operator|+
name|commonPrefix
argument_list|,
name|qlength
operator|-
name|commonPrefix
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes the value from the given cell to the output stream    * @param out The outputstream to which the data has to be written    * @param cell The cell whose contents has to be written    * @param vlength the value length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeValue
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|int
name|vlength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|,
name|vlength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|vlength
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes the tag from the given cell to the output stream    * @param out The outputstream to which the data has to be written    * @param cell The cell whose contents has to be written    * @param tagsLength the tag length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeTags
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|int
name|tagsLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|ByteBufferUtils
operator|.
name|copyBufferToStream
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsPosition
argument_list|()
argument_list|,
name|tagsLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|tagsLength
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * special case for Cell.equals    */
specifier|public
specifier|static
name|boolean
name|equalsIgnoreMvccVersion
parameter_list|(
name|Cell
name|a
parameter_list|,
name|Cell
name|b
parameter_list|)
block|{
comment|// row
name|boolean
name|res
init|=
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
return|return
name|res
return|;
comment|// family
name|res
operator|=
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
return|return
name|res
return|;
comment|// timestamp: later sorts first
if|if
condition|(
operator|!
name|CellUtil
operator|.
name|matchingTimestamp
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// type
name|int
name|c
init|=
operator|(
literal|0xff
operator|&
name|b
operator|.
name|getTypeByte
argument_list|()
operator|)
operator|-
operator|(
literal|0xff
operator|&
name|a
operator|.
name|getTypeByte
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
else|else
return|return
literal|true
return|;
block|}
comment|/**    * Converts the rowkey bytes of the given cell into an int value    * @param cell    * @return rowkey as int    */
specifier|public
specifier|static
name|int
name|getRowAsInt
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toInt
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|toInt
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Converts the value bytes of the given cell into a long value    * @param cell    * @return value as long    */
specifier|public
specifier|static
name|long
name|getValueAsLong
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toLong
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Converts the value bytes of the given cell into a int value    * @param cell    * @return value as int    */
specifier|public
specifier|static
name|int
name|getValueAsInt
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toInt
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|toInt
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Converts the value bytes of the given cell into a double value    * @param cell    * @return value as double    */
specifier|public
specifier|static
name|double
name|getValueAsDouble
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toDouble
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|toDouble
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Converts the value bytes of the given cell into a BigDecimal    * @param cell    * @return value as BigDecimal    */
specifier|public
specifier|static
name|BigDecimal
name|getValueAsBigDecimal
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
name|ByteBufferUtils
operator|.
name|toBigDecimal
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Bytes
operator|.
name|toBigDecimal
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compresses the tags to the given outputstream using the TagcompressionContext    * @param out the outputstream to which the compression should happen    * @param cell the cell which has tags    * @param tagCompressionContext the TagCompressionContext    * @throws IOException can throw IOException if the compression encounters issue    */
specifier|public
specifier|static
name|void
name|compressTags
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|TagCompressionContext
name|tagCompressionContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|tagCompressionContext
operator|.
name|compressTags
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getTagsPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tagCompressionContext
operator|.
name|compressTags
argument_list|(
name|out
argument_list|,
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|compressRow
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|Dictionary
name|dict
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|Dictionary
operator|.
name|write
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Dictionary
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|compressFamily
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|Dictionary
name|dict
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|Dictionary
operator|.
name|write
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Dictionary
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|compressQualifier
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Cell
name|cell
parameter_list|,
name|Dictionary
name|dict
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
name|Dictionary
operator|.
name|write
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Dictionary
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|dict
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Used when a cell needs to be compared with a key byte[] such as cases of finding the index from    * the index block, bloom keys from the bloom blocks This byte[] is expected to be serialized in    * the KeyValue serialization format If the KeyValue (Cell's) serialization format changes this    * method cannot be used.    * @param comparator the cell comparator    * @param left the cell to be compared    * @param key the serialized key part of a KeyValue    * @param offset the offset in the key byte[]    * @param length the length of the key byte[]    * @return an int greater than 0 if left is greater than right lesser than 0 if left is lesser    *         than right equal to 0 if left is equal to right    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|int
name|compare
parameter_list|(
name|CellComparator
name|comparator
parameter_list|,
name|Cell
name|left
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// row
name|short
name|rrowlength
init|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|key
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|comparator
operator|.
name|compareRows
argument_list|(
name|left
argument_list|,
name|key
argument_list|,
name|offset
operator|+
name|Bytes
operator|.
name|SIZEOF_SHORT
argument_list|,
name|rrowlength
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
return|return
name|c
return|;
comment|// Compare the rest of the two KVs without making any assumptions about
comment|// the common prefix. This function will not compare rows anyway, so we
comment|// don't need to tell it that the common prefix includes the row.
return|return
name|compareWithoutRow
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|key
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|rrowlength
argument_list|)
return|;
block|}
comment|/**    * Compare columnFamily, qualifier, timestamp, and key type (everything except the row). This    * method is used both in the normal comparator and the "same-prefix" comparator. Note that we are    * assuming that row portions of both KVs have already been parsed and found identical, and we    * don't validate that assumption here.    * @param commonPrefix the length of the common prefix of the two key-values being compared,    *          including row length and row    */
specifier|static
specifier|final
name|int
name|compareWithoutRow
parameter_list|(
name|CellComparator
name|comparator
parameter_list|,
name|Cell
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|int
name|roffset
parameter_list|,
name|int
name|rlength
parameter_list|,
name|short
name|rowlength
parameter_list|)
block|{
comment|/***      * KeyValue Format and commonLength:      * |_keyLen_|_valLen_|_rowLen_|_rowKey_|_famiLen_|_fami_|_Quali_|....      * ------------------|-------commonLength--------|--------------      */
name|int
name|commonLength
init|=
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|rowlength
decl_stmt|;
comment|// commonLength + TIMESTAMP_TYPE_SIZE
name|int
name|commonLengthWithTSAndType
init|=
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
operator|+
name|commonLength
decl_stmt|;
comment|// ColumnFamily + Qualifier length.
name|int
name|lcolumnlength
init|=
name|left
operator|.
name|getFamilyLength
argument_list|()
operator|+
name|left
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
name|int
name|rcolumnlength
init|=
name|rlength
operator|-
name|commonLengthWithTSAndType
decl_stmt|;
name|byte
name|ltype
init|=
name|left
operator|.
name|getTypeByte
argument_list|()
decl_stmt|;
name|byte
name|rtype
init|=
name|right
index|[
name|roffset
operator|+
operator|(
name|rlength
operator|-
literal|1
operator|)
index|]
decl_stmt|;
comment|// If the column is not specified, the "minimum" key type appears the
comment|// latest in the sorted order, regardless of the timestamp. This is used
comment|// for specifying the last key/value in a given row, because there is no
comment|// "lexicographically last column" (it would be infinitely long). The
comment|// "maximum" key type does not need this behavior.
if|if
condition|(
name|lcolumnlength
operator|==
literal|0
operator|&&
name|ltype
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
condition|)
block|{
comment|// left is "bigger", i.e. it appears later in the sorted order
return|return
literal|1
return|;
block|}
if|if
condition|(
name|rcolumnlength
operator|==
literal|0
operator|&&
name|rtype
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|rfamilyoffset
init|=
name|commonLength
operator|+
name|roffset
decl_stmt|;
comment|// Column family length.
name|int
name|lfamilylength
init|=
name|left
operator|.
name|getFamilyLength
argument_list|()
decl_stmt|;
name|int
name|rfamilylength
init|=
name|right
index|[
name|rfamilyoffset
operator|-
literal|1
index|]
decl_stmt|;
comment|// If left family size is not equal to right family size, we need not
comment|// compare the qualifiers.
name|boolean
name|sameFamilySize
init|=
operator|(
name|lfamilylength
operator|==
name|rfamilylength
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|sameFamilySize
condition|)
block|{
comment|// comparing column family is enough.
return|return
name|CellUtil
operator|.
name|compareFamilies
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|rfamilyoffset
argument_list|,
name|rfamilylength
argument_list|)
return|;
block|}
comment|// Compare family& qualifier together.
comment|// Families are same. Compare on qualifiers.
name|int
name|comparison
init|=
name|CellUtil
operator|.
name|compareColumns
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|rfamilyoffset
argument_list|,
name|rfamilylength
argument_list|,
name|rfamilyoffset
operator|+
name|rfamilylength
argument_list|,
operator|(
name|rcolumnlength
operator|-
name|rfamilylength
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparison
operator|!=
literal|0
condition|)
block|{
return|return
name|comparison
return|;
block|}
comment|// //
comment|// Next compare timestamps.
name|long
name|rtimestamp
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|right
argument_list|,
name|roffset
operator|+
operator|(
name|rlength
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
operator|)
argument_list|)
decl_stmt|;
name|int
name|compare
init|=
name|comparator
operator|.
name|compareTimestamps
argument_list|(
name|left
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|rtimestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|compare
operator|!=
literal|0
condition|)
block|{
return|return
name|compare
return|;
block|}
comment|// Compare types. Let the delete types sort ahead of puts; i.e. types
comment|// of higher numbers sort before those of lesser numbers. Maximum (255)
comment|// appears ahead of everything, and minimum (0) appears after
comment|// everything.
return|return
operator|(
literal|0xff
operator|&
name|rtype
operator|)
operator|-
operator|(
literal|0xff
operator|&
name|ltype
operator|)
return|;
block|}
comment|/**    * @return An new cell is located following input cell. If both of type and timestamp are minimum,    *         the input cell will be returned directly.    */
specifier|public
specifier|static
name|Cell
name|createNextOnRowCol
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|long
name|ts
init|=
name|cell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|byte
name|type
init|=
name|cell
operator|.
name|getTypeByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|type
operator|=
name|KeyValue
operator|.
name|Type
operator|.
name|values
argument_list|()
index|[
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|type
argument_list|)
operator|.
name|ordinal
argument_list|()
operator|-
literal|1
index|]
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ts
operator|!=
name|HConstants
operator|.
name|OLDEST_TIMESTAMP
condition|)
block|{
name|ts
operator|=
name|ts
operator|-
literal|1
expr_stmt|;
name|type
operator|=
name|KeyValue
operator|.
name|Type
operator|.
name|Maximum
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|cell
return|;
block|}
return|return
name|createNextOnRowCol
argument_list|(
name|cell
argument_list|,
name|ts
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|static
name|Cell
name|createNextOnRowCol
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
name|type
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|LastOnRowColByteBufferExtendedCell
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|ts
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
return|;
block|}
return|return
operator|new
name|LastOnRowColCell
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|ts
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
return|;
block|}
comment|/**    * Estimate based on keyvalue's serialization format in the RPC layer. Note that there is an extra    * SIZEOF_INT added to the size here that indicates the actual length of the cell for cases where    * cell's are serialized in a contiguous format (For eg in RPCs).    * @param cell    * @return Estimate of the<code>cell</code> size in bytes plus an extra SIZEOF_INT indicating the    *         actual cell length.    */
specifier|public
specifier|static
name|int
name|estimatedSerializedSizeOf
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cell
operator|.
name|getSerializedSize
argument_list|()
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
return|;
block|}
comment|/**    * Calculates the serialized key size. We always serialize in the KeyValue's serialization format.    * @param cell the cell for which the key size has to be calculated.    * @return the key size    */
specifier|public
specifier|static
name|int
name|estimatedSerializedSizeOfKey
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|KeyValue
condition|)
return|return
operator|(
operator|(
name|KeyValue
operator|)
name|cell
operator|)
operator|.
name|getKeyLength
argument_list|()
return|;
return|return
name|cell
operator|.
name|getRowLength
argument_list|()
operator|+
name|cell
operator|.
name|getFamilyLength
argument_list|()
operator|+
name|cell
operator|.
name|getQualifierLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|KEY_INFRASTRUCTURE_SIZE
return|;
block|}
comment|/**    * This method exists just to encapsulate how we serialize keys. To be replaced by a factory that    * we query to figure what the Cell implementation is and then, what serialization engine to use    * and further, how to serialize the key for inclusion in hfile index. TODO.    * @param cell    * @return The key portion of the Cell serialized in the old-school KeyValue way or null if passed    *         a null<code>cell</code>    */
specifier|public
specifier|static
name|byte
index|[]
name|getCellKeySerializedAsKeyValueKey
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|KeyValueUtil
operator|.
name|keyLength
argument_list|(
name|cell
argument_list|)
index|]
decl_stmt|;
name|KeyValueUtil
operator|.
name|appendKeyTo
argument_list|(
name|cell
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Create a Cell that is smaller than all other possible Cells for the given Cell's row.    * @param cell    * @return First possible Cell on passed Cell's row.    */
specifier|public
specifier|static
name|Cell
name|createFirstOnRow
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|FirstOnRowByteBufferExtendedCell
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|FirstOnRowCell
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createFirstOnRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|)
block|{
return|return
operator|new
name|FirstOnRowCell
argument_list|(
name|row
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createFirstOnRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|col
parameter_list|)
block|{
return|return
name|createFirstOnRow
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
name|row
operator|.
name|length
argument_list|,
name|family
argument_list|,
literal|0
argument_list|,
operator|(
name|byte
operator|)
name|family
operator|.
name|length
argument_list|,
name|col
argument_list|,
literal|0
argument_list|,
name|col
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createFirstOnRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|int
name|roffset
parameter_list|,
name|short
name|rlength
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
name|int
name|foffset
parameter_list|,
name|byte
name|flength
parameter_list|,
specifier|final
name|byte
index|[]
name|col
parameter_list|,
name|int
name|coffset
parameter_list|,
name|int
name|clength
parameter_list|)
block|{
return|return
operator|new
name|FirstOnRowColCell
argument_list|(
name|row
argument_list|,
name|roffset
argument_list|,
name|rlength
argument_list|,
name|family
argument_list|,
name|foffset
argument_list|,
name|flength
argument_list|,
name|col
argument_list|,
name|coffset
argument_list|,
name|clength
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createFirstOnRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|createFirstOnRow
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
name|row
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createFirstOnRowFamily
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|fArray
parameter_list|,
name|int
name|foff
parameter_list|,
name|int
name|flen
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|FirstOnRowColByteBufferExtendedCell
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|fArray
argument_list|)
argument_list|,
name|foff
argument_list|,
operator|(
name|byte
operator|)
name|flen
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_BUFFER
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
return|return
operator|new
name|FirstOnRowColCell
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|fArray
argument_list|,
name|foff
argument_list|,
operator|(
name|byte
operator|)
name|flen
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createFirstOnRowCol
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|FirstOnRowColByteBufferExtendedCell
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_BUFFER
argument_list|,
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|FirstOnRowColCell
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createFirstOnNextRow
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
name|byte
index|[]
name|nextRow
init|=
operator|new
name|byte
index|[
name|cell
operator|.
name|getRowLength
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|CellUtil
operator|.
name|copyRowTo
argument_list|(
name|cell
argument_list|,
name|nextRow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nextRow
index|[
name|nextRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// maybe not necessary
return|return
operator|new
name|FirstOnRowCell
argument_list|(
name|nextRow
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
name|nextRow
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Create a Cell that is smaller than all other possible Cells for the given Cell's rk:cf and    * passed qualifier.    * @param cell    * @param qArray    * @param qoffest    * @param qlength    * @return Last possible Cell on passed Cell's rk:cf and passed qualifier.    */
specifier|public
specifier|static
name|Cell
name|createFirstOnRowCol
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|qArray
parameter_list|,
name|int
name|qoffest
parameter_list|,
name|int
name|qlength
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|FirstOnRowColByteBufferExtendedCell
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|qArray
argument_list|)
argument_list|,
name|qoffest
argument_list|,
name|qlength
argument_list|)
return|;
block|}
return|return
operator|new
name|FirstOnRowColCell
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|qArray
argument_list|,
name|qoffest
argument_list|,
name|qlength
argument_list|)
return|;
block|}
comment|/**    * Creates the first cell with the row/family/qualifier of this cell and the given timestamp. Uses    * the "maximum" type that guarantees that the new cell is the lowest possible for this    * combination of row, family, qualifier, and timestamp. This cell's own timestamp is ignored.    * @param cell - cell    * @param ts    */
specifier|public
specifier|static
name|Cell
name|createFirstOnRowColTS
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|FirstOnRowColTSByteBufferExtendedCell
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|ts
argument_list|)
return|;
block|}
return|return
operator|new
name|FirstOnRowColTSCell
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|ts
argument_list|)
return|;
block|}
comment|/**    * Create a Cell that is larger than all other possible Cells for the given Cell's row.    * @param cell    * @return Last possible Cell on passed Cell's row.    */
specifier|public
specifier|static
name|Cell
name|createLastOnRow
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|LastOnRowByteBufferExtendedCell
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|LastOnRowCell
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|createLastOnRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
operator|new
name|LastOnRowCell
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
name|row
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Create a Cell that is larger than all other possible Cells for the given Cell's rk:cf:q. Used    * in creating "fake keys" for the multi-column Bloom filter optimization to skip the row/column    * we already know is not in the file.    * @param cell    * @return Last possible Cell on passed Cell's rk:cf:q.    */
specifier|public
specifier|static
name|Cell
name|createLastOnRowCol
parameter_list|(
specifier|final
name|Cell
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|instanceof
name|ByteBufferExtendedCell
condition|)
block|{
return|return
operator|new
name|LastOnRowColByteBufferExtendedCell
argument_list|(
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferExtendedCell
operator|)
name|cell
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|LastOnRowColCell
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a Delete Family Cell for the specified row and family that would be smaller than all    * other possible Delete Family KeyValues that have the same row and family. Used for seeking.    * @param row - row key (arbitrary byte array)    * @param fam - family name    * @return First Delete Family possible key on passed<code>row</code>.    */
specifier|public
specifier|static
name|Cell
name|createFirstDeleteFamilyCellOnRow
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|fam
parameter_list|)
block|{
return|return
operator|new
name|FirstOnRowDeleteFamilyCell
argument_list|(
name|row
argument_list|,
name|fam
argument_list|)
return|;
block|}
block|}
end_class

end_unit

