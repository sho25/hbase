begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  *  * An instance of this class is used to generate a stream of  * pseudorandom numbers. The class uses a 64-bit seed, which is  * modified using a linear congruential formula.  *  * see https://en.wikipedia.org/wiki/Linear_congruential_generator  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Random64
block|{
specifier|private
specifier|static
specifier|final
name|long
name|multiplier
init|=
literal|6364136223846793005L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|addend
init|=
literal|1442695040888963407L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|seedUniquifier
init|=
operator|new
name|AtomicLong
argument_list|(
literal|8682522807148012L
argument_list|)
decl_stmt|;
specifier|private
name|long
name|seed
decl_stmt|;
comment|/**    * Copy from {@link Random#seedUniquifier()}    */
specifier|private
specifier|static
name|long
name|seedUniquifier
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|long
name|current
init|=
name|seedUniquifier
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|next
init|=
name|current
operator|*
literal|181783497276652981L
decl_stmt|;
if|if
condition|(
name|seedUniquifier
operator|.
name|compareAndSet
argument_list|(
name|current
argument_list|,
name|next
argument_list|)
condition|)
block|{
return|return
name|next
return|;
block|}
block|}
block|}
specifier|public
name|Random64
parameter_list|()
block|{
name|this
argument_list|(
name|seedUniquifier
argument_list|()
operator|^
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Random64
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
block|}
specifier|public
name|long
name|nextLong
parameter_list|()
block|{
return|return
name|next64
argument_list|(
literal|64
argument_list|)
return|;
block|}
specifier|public
name|void
name|nextBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|len
init|=
name|bytes
operator|.
name|length
init|;
name|i
operator|<
name|len
condition|;
control|)
block|{
comment|// We regard seed as unsigned long, therefore used '>>>' instead of '>>'.
for|for
control|(
name|long
name|rnd
init|=
name|nextLong
argument_list|()
init|,
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
operator|-
name|i
argument_list|,
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
argument_list|)
init|;
name|n
operator|--
operator|>
literal|0
condition|;
name|rnd
operator|>>>=
name|Byte
operator|.
name|SIZE
control|)
block|{
name|bytes
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|rnd
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|long
name|next64
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
name|seed
operator|=
name|seed
operator|*
name|multiplier
operator|+
name|addend
expr_stmt|;
return|return
name|seed
operator|>>>
operator|(
literal|64
operator|-
name|bits
operator|)
return|;
block|}
comment|/**    * Random64 is a pseudorandom algorithm(LCG). Therefore, we will get same sequence    * if seeds are the same. This main will test how many calls nextLong() it will    * get the same seed.    *    * We do not need to save all numbers (that is too large). We could save    * once every 100000 calls nextLong(). If it get a same seed, we can    * detect this by calling nextLong() 100000 times continuously.    *    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|long
name|defaultTotalTestCnt
init|=
literal|1000000000000L
decl_stmt|;
comment|// 1 trillion
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|defaultTotalTestCnt
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|defaultTotalTestCnt
operator|>
literal|0
argument_list|,
literal|"totalTestCnt<= 0"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|precision
init|=
literal|100000
decl_stmt|;
specifier|final
name|long
name|totalTestCnt
init|=
name|defaultTotalTestCnt
operator|+
name|precision
decl_stmt|;
specifier|final
name|int
name|reportPeriod
init|=
literal|100
operator|*
name|precision
decl_stmt|;
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Do collision test, totalTestCnt="
operator|+
name|totalTestCnt
argument_list|)
expr_stmt|;
name|Random64
name|rand
init|=
operator|new
name|Random64
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|longSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|cnt
init|=
literal|1
init|;
name|cnt
operator|<=
name|totalTestCnt
condition|;
name|cnt
operator|++
control|)
block|{
specifier|final
name|long
name|randLong
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|longSet
operator|.
name|contains
argument_list|(
name|randLong
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Conflict! count="
operator|+
name|cnt
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|%
name|precision
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|longSet
operator|.
name|add
argument_list|(
name|randLong
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Conflict! count="
operator|+
name|cnt
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|%
name|reportPeriod
operator|==
literal|0
condition|)
block|{
name|long
name|cost
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|long
name|remainingMs
init|=
call|(
name|long
call|)
argument_list|(
literal|1.0
operator|*
operator|(
name|totalTestCnt
operator|-
name|cnt
operator|)
operator|*
name|cost
operator|/
name|cnt
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Progress: %.3f%%, remaining %d minutes"
argument_list|,
literal|100.0
operator|*
name|cnt
operator|/
name|totalTestCnt
argument_list|,
name|remainingMs
operator|/
literal|60000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No collision!"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

