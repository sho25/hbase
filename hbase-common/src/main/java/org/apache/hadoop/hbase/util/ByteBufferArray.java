begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class manages an array of ByteBuffers with a default size 4MB. These buffers are sequential  * and could be considered as a large buffer.It supports reading/writing data from this large buffer  * with a position and offset  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ByteBufferArray
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ByteBufferArray
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|4
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferCount
decl_stmt|;
specifier|final
name|ByteBuffer
index|[]
name|buffers
decl_stmt|;
comment|/**    * We allocate a number of byte buffers as the capacity.    * @param capacity total size of the byte buffer array    * @param allocator the ByteBufferAllocator that will create the buffers    * @throws IOException throws IOException if there is an exception thrown by the allocator    */
specifier|public
name|ByteBufferArray
parameter_list|(
name|long
name|capacity
parameter_list|,
name|ByteBufferAllocator
name|allocator
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|getBufferSize
argument_list|(
name|capacity
argument_list|)
argument_list|,
name|getBufferCount
argument_list|(
name|capacity
argument_list|)
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|,
name|capacity
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|ByteBufferArray
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|int
name|bufferCount
parameter_list|,
name|int
name|threadCount
parameter_list|,
name|long
name|capacity
parameter_list|,
name|ByteBufferAllocator
name|alloc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|bufferCount
operator|=
name|bufferCount
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocating buffers total={}, sizePerBuffer={}, count={}"
argument_list|,
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|capacity
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|bufferSize
argument_list|)
argument_list|,
name|bufferCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
operator|new
name|ByteBuffer
index|[
name|bufferCount
index|]
expr_stmt|;
name|createBuffers
argument_list|(
name|threadCount
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createBuffers
parameter_list|(
name|int
name|threadCount
parameter_list|,
name|ByteBufferAllocator
name|alloc
parameter_list|)
throws|throws
name|IOException
block|{
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
name|int
name|perThreadCount
init|=
name|bufferCount
operator|/
name|threadCount
decl_stmt|;
name|int
name|reminder
init|=
name|bufferCount
operator|%
name|threadCount
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|ByteBuffer
index|[]
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
comment|// Dispatch the creation task to each thread.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|chunkSize
init|=
name|perThreadCount
operator|+
operator|(
operator|(
name|i
operator|==
name|threadCount
operator|-
literal|1
operator|)
condition|?
name|reminder
else|:
literal|0
operator|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|ByteBuffer
index|[]
name|chunk
init|=
operator|new
name|ByteBuffer
index|[
name|chunkSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|chunkSize
condition|;
name|k
operator|++
control|)
block|{
name|chunk
index|[
name|k
index|]
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
block|}
return|return
name|chunk
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Append the buffers created by each thread.
name|int
name|bufferIndex
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|Future
argument_list|<
name|ByteBuffer
index|[]
argument_list|>
name|f
range|:
name|futures
control|)
block|{
for|for
control|(
name|ByteBuffer
name|b
range|:
name|f
operator|.
name|get
argument_list|()
control|)
block|{
name|this
operator|.
name|buffers
index|[
name|bufferIndex
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
block|}
assert|assert
name|bufferIndex
operator|==
name|bufferCount
assert|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Buffer creation interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|int
name|getBufferSize
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
name|int
name|bufferSize
init|=
name|DEFAULT_BUFFER_SIZE
decl_stmt|;
if|if
condition|(
name|bufferSize
operator|>
operator|(
name|capacity
operator|/
literal|16
operator|)
condition|)
block|{
name|bufferSize
operator|=
operator|(
name|int
operator|)
name|roundUp
argument_list|(
name|capacity
operator|/
literal|16
argument_list|,
literal|32768
argument_list|)
expr_stmt|;
block|}
return|return
name|bufferSize
return|;
block|}
specifier|private
specifier|static
name|int
name|getBufferCount
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
name|int
name|bufferSize
init|=
name|getBufferSize
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|roundUp
argument_list|(
name|capacity
argument_list|,
name|bufferSize
argument_list|)
operator|/
name|bufferSize
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|roundUp
parameter_list|(
name|long
name|n
parameter_list|,
name|long
name|to
parameter_list|)
block|{
return|return
operator|(
operator|(
name|n
operator|+
name|to
operator|-
literal|1
operator|)
operator|/
name|to
operator|)
operator|*
name|to
return|;
block|}
comment|/**    * Transfers bytes from this buffers array into the given destination {@link ByteBuff}    * @param offset start position in this big logical array.    * @param dst the destination ByteBuff. Notice that its position will be advanced.    * @return number of bytes read    */
specifier|public
name|int
name|read
parameter_list|(
name|long
name|offset
parameter_list|,
name|ByteBuff
name|dst
parameter_list|)
block|{
return|return
name|internalTransfer
argument_list|(
name|offset
argument_list|,
name|dst
argument_list|,
name|READER
argument_list|)
return|;
block|}
comment|/**    * Transfers bytes from the given source {@link ByteBuff} into this buffer array    * @param offset start offset of this big logical array.    * @param src the source ByteBuff. Notice that its position will be advanced.    * @return number of bytes write    */
specifier|public
name|int
name|write
parameter_list|(
name|long
name|offset
parameter_list|,
name|ByteBuff
name|src
parameter_list|)
block|{
return|return
name|internalTransfer
argument_list|(
name|offset
argument_list|,
name|src
argument_list|,
name|WRITER
argument_list|)
return|;
block|}
comment|/**    * Transfer bytes from source {@link ByteBuff} to destination {@link ByteBuffer}. Position of both    * source and destination will be advanced.    */
specifier|private
specifier|static
specifier|final
name|BiConsumer
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuff
argument_list|>
name|WRITER
init|=
parameter_list|(
name|dst
parameter_list|,
name|src
parameter_list|)
lambda|->
block|{
name|int
name|off
init|=
name|src
operator|.
name|position
argument_list|()
decl_stmt|,
name|len
init|=
name|dst
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|src
operator|.
name|get
argument_list|(
name|dst
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|src
operator|.
name|position
argument_list|(
name|off
operator|+
name|len
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|/**    * Transfer bytes from source {@link ByteBuffer} to destination {@link ByteBuff}, Position of both    * source and destination will be advanced.    */
specifier|private
specifier|static
specifier|final
name|BiConsumer
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuff
argument_list|>
name|READER
init|=
parameter_list|(
name|src
parameter_list|,
name|dst
parameter_list|)
lambda|->
block|{
name|int
name|off
init|=
name|dst
operator|.
name|position
argument_list|()
decl_stmt|,
name|len
init|=
name|src
operator|.
name|remaining
argument_list|()
decl_stmt|,
name|srcOff
init|=
name|src
operator|.
name|position
argument_list|()
decl_stmt|;
name|dst
operator|.
name|put
argument_list|(
name|off
argument_list|,
name|ByteBuff
operator|.
name|wrap
argument_list|(
name|src
argument_list|)
argument_list|,
name|srcOff
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|src
operator|.
name|position
argument_list|(
name|srcOff
operator|+
name|len
argument_list|)
expr_stmt|;
name|dst
operator|.
name|position
argument_list|(
name|off
operator|+
name|len
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
comment|/**    * Transferring all remaining bytes from b to the buffers array starting at offset, or    * transferring bytes from the buffers array at offset to b until b is filled. Notice that    * position of ByteBuff b will be advanced.    * @param offset where we start in the big logical array.    * @param b the ByteBuff to transfer from or to    * @param transfer the transfer interface.    * @return the length of bytes we transferred.    */
specifier|private
name|int
name|internalTransfer
parameter_list|(
name|long
name|offset
parameter_list|,
name|ByteBuff
name|b
parameter_list|,
name|BiConsumer
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBuff
argument_list|>
name|transfer
parameter_list|)
block|{
name|int
name|expectedTransferLen
init|=
name|b
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedTransferLen
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|BufferIterator
name|it
init|=
operator|new
name|BufferIterator
argument_list|(
name|offset
argument_list|,
name|expectedTransferLen
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ByteBuffer
name|a
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|transfer
operator|.
name|accept
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|a
operator|.
name|hasRemaining
argument_list|()
assert|;
block|}
assert|assert
name|expectedTransferLen
operator|==
name|it
operator|.
name|getSum
argument_list|()
operator|:
literal|"Expected transfer length (="
operator|+
name|expectedTransferLen
operator|+
literal|") don't match the actual transfer length(="
operator|+
name|it
operator|.
name|getSum
argument_list|()
operator|+
literal|")"
assert|;
return|return
name|expectedTransferLen
return|;
block|}
comment|/**    * Creates a ByteBuff from a given array of ByteBuffers from the given offset to the length    * specified. For eg, if there are 4 buffers forming an array each with length 10 and if we call    * asSubBuffer(5, 10) then we will create an MBB consisting of two BBs and the first one be a BB    * from 'position' 5 to a 'length' 5 and the 2nd BB will be from 'position' 0 to 'length' 5.    * @param offset the position in the whole array which is composited by multiple byte buffers.    * @param len the length of bytes    * @return a ByteBuff formed from the underlying ByteBuffers    */
specifier|public
name|ByteBuff
name|asSubByteBuff
parameter_list|(
name|long
name|offset
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{
name|BufferIterator
name|it
init|=
operator|new
name|BufferIterator
argument_list|(
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|ByteBuffer
index|[]
name|mbb
init|=
operator|new
name|ByteBuffer
index|[
name|it
operator|.
name|getBufferCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mbb
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|it
operator|.
name|hasNext
argument_list|()
assert|;
name|mbb
index|[
name|i
index|]
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
assert|assert
name|it
operator|.
name|getSum
argument_list|()
operator|==
name|len
assert|;
return|return
name|ByteBuff
operator|.
name|wrap
argument_list|(
name|mbb
argument_list|)
return|;
block|}
comment|/**    * Iterator to fetch ByteBuffers from offset with given length in this big logical array.    */
specifier|private
class|class
name|BufferIterator
implements|implements
name|Iterator
argument_list|<
name|ByteBuffer
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|len
decl_stmt|;
specifier|private
name|int
name|startBuffer
decl_stmt|,
name|startOffset
decl_stmt|,
name|endBuffer
decl_stmt|,
name|endOffset
decl_stmt|;
specifier|private
name|int
name|curIndex
decl_stmt|,
name|sum
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|index
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|pos
operator|/
name|bufferSize
argument_list|)
return|;
block|}
specifier|private
name|int
name|offset
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|pos
operator|%
name|bufferSize
argument_list|)
return|;
block|}
specifier|public
name|BufferIterator
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
assert|assert
name|len
operator|>=
literal|0
operator|&&
name|offset
operator|>=
literal|0
assert|;
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
name|this
operator|.
name|startBuffer
operator|=
name|index
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|offset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|endBuffer
operator|=
name|index
argument_list|(
name|offset
operator|+
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|endOffset
operator|=
name|offset
argument_list|(
name|offset
operator|+
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|startBuffer
operator|<
name|endBuffer
operator|&&
name|endOffset
operator|==
literal|0
condition|)
block|{
name|endBuffer
operator|--
expr_stmt|;
name|endOffset
operator|=
name|bufferSize
expr_stmt|;
block|}
assert|assert
name|startBuffer
operator|>=
literal|0
operator|&&
name|startBuffer
operator|<
name|bufferCount
assert|;
assert|assert
name|endBuffer
operator|>=
literal|0
operator|&&
name|endBuffer
operator|<
name|bufferCount
assert|;
comment|// initialize the index to the first buffer index.
name|this
operator|.
name|curIndex
operator|=
name|startBuffer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|this
operator|.
name|curIndex
operator|<=
name|endBuffer
return|;
block|}
comment|/**      * The returned ByteBuffer is an sliced one, it won't affect the position or limit of the      * original one.      */
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|next
parameter_list|()
block|{
name|ByteBuffer
name|bb
init|=
name|buffers
index|[
name|curIndex
index|]
operator|.
name|duplicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|curIndex
operator|==
name|startBuffer
condition|)
block|{
name|bb
operator|.
name|position
argument_list|(
name|startOffset
argument_list|)
operator|.
name|limit
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|bufferSize
argument_list|,
name|startOffset
operator|+
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|curIndex
operator|==
name|endBuffer
condition|)
block|{
name|bb
operator|.
name|position
argument_list|(
literal|0
argument_list|)
operator|.
name|limit
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bb
operator|.
name|position
argument_list|(
literal|0
argument_list|)
operator|.
name|limit
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
block|}
name|curIndex
operator|++
expr_stmt|;
name|sum
operator|+=
name|bb
operator|.
name|remaining
argument_list|()
expr_stmt|;
comment|// Make sure that its pos is zero, it's important because MBB will count from zero for all nio
comment|// ByteBuffers.
return|return
name|bb
operator|.
name|slice
argument_list|()
return|;
block|}
name|int
name|getSum
parameter_list|()
block|{
return|return
name|sum
return|;
block|}
name|int
name|getBufferCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|endBuffer
operator|-
name|this
operator|.
name|startBuffer
operator|+
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

