begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Utility methods for dealing with Collections, including treating null collections as empty.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|CollectionUtils
block|{
comment|/**    * In HBASE-16648 we found that ConcurrentHashMap.get is much faster than computeIfAbsent if the    * value already exists. Notice that the implementation does not guarantee that the supplier will    * only be executed once.    */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|V
name|computeIfAbsent
parameter_list|(
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|K
name|key
parameter_list|,
name|Supplier
argument_list|<
name|V
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
name|computeIfAbsent
argument_list|(
name|map
argument_list|,
name|key
argument_list|,
name|supplier
argument_list|,
parameter_list|()
lambda|->
block|{     }
argument_list|)
return|;
block|}
comment|/**    * A supplier that throws IOException when get.    */
annotation|@
name|FunctionalInterface
specifier|public
interface|interface
name|IOExceptionSupplier
parameter_list|<
name|V
parameter_list|>
block|{
name|V
name|get
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * In HBASE-16648 we found that ConcurrentHashMap.get is much faster than computeIfAbsent if the    * value already exists. So here we copy the implementation of    * {@link ConcurrentMap#computeIfAbsent(Object, java.util.function.Function)}. It uses get and    * putIfAbsent to implement computeIfAbsent. And notice that the implementation does not guarantee    * that the supplier will only be executed once.    */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|V
name|computeIfAbsentEx
parameter_list|(
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|K
name|key
parameter_list|,
name|IOExceptionSupplier
argument_list|<
name|V
argument_list|>
name|supplier
parameter_list|)
throws|throws
name|IOException
block|{
name|V
name|v
decl_stmt|,
name|newValue
decl_stmt|;
return|return
operator|(
operator|(
name|v
operator|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|==
literal|null
operator|&&
operator|(
name|newValue
operator|=
name|supplier
operator|.
name|get
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
operator|(
name|v
operator|=
name|map
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
operator|)
operator|==
literal|null
operator|)
condition|?
name|newValue
else|:
name|v
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|V
name|computeIfAbsent
parameter_list|(
name|ConcurrentMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
parameter_list|,
name|K
name|key
parameter_list|,
name|Supplier
argument_list|<
name|V
argument_list|>
name|supplier
parameter_list|,
name|Runnable
name|actionIfAbsent
parameter_list|)
block|{
name|V
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
return|return
name|v
return|;
block|}
name|V
name|newValue
init|=
name|supplier
operator|.
name|get
argument_list|()
decl_stmt|;
name|v
operator|=
name|map
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
return|return
name|v
return|;
block|}
name|actionIfAbsent
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|newValue
return|;
block|}
block|}
end_class

end_unit

