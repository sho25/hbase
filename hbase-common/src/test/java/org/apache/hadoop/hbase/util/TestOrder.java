begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Order
operator|.
name|ASCENDING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Order
operator|.
name|DESCENDING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestOrder
block|{
name|byte
index|[]
index|[]
name|VALS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bar"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"baz"
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testApplyAscending
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|vals
init|=
operator|new
name|byte
index|[
name|VALS
operator|.
name|length
index|]
index|[]
decl_stmt|;
name|byte
index|[]
index|[]
name|ordered
init|=
operator|new
name|byte
index|[
name|VALS
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VALS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|VALS
index|[
name|i
index|]
argument_list|,
name|VALS
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|ordered
index|[
name|i
index|]
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|VALS
index|[
name|i
index|]
argument_list|,
name|VALS
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|ASCENDING
operator|.
name|apply
argument_list|(
name|ordered
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|vals
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|ordered
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertArrayEquals
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|,
name|ordered
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|rangeApply
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|VALS
index|[
literal|0
index|]
argument_list|,
name|VALS
index|[
literal|0
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
name|ASCENDING
operator|.
name|apply
argument_list|(
name|rangeApply
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|VALS
index|[
literal|0
index|]
argument_list|,
name|rangeApply
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplyDescending
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|vals
init|=
operator|new
name|byte
index|[
name|VALS
operator|.
name|length
index|]
index|[]
decl_stmt|;
name|byte
index|[]
index|[]
name|ordered
init|=
operator|new
name|byte
index|[
name|VALS
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VALS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|vals
index|[
name|i
index|]
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|VALS
index|[
name|i
index|]
argument_list|,
name|VALS
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|ordered
index|[
name|i
index|]
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|VALS
index|[
name|i
index|]
argument_list|,
name|VALS
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|DESCENDING
operator|.
name|apply
argument_list|(
name|ordered
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|vals
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|ordered
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DESCENDING
operator|.
name|apply
argument_list|(
name|ordered
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|,
name|ordered
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[]
block|{
name|VALS
index|[
literal|0
index|]
index|[
literal|0
index|]
block|,
name|DESCENDING
operator|.
name|apply
argument_list|(
name|VALS
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|)
block|,
name|VALS
index|[
literal|0
index|]
index|[
literal|2
index|]
block|}
decl_stmt|;
name|byte
index|[]
name|rangeApply
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|VALS
index|[
literal|0
index|]
argument_list|,
name|VALS
index|[
literal|0
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
name|DESCENDING
operator|.
name|apply
argument_list|(
name|rangeApply
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|rangeApply
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

