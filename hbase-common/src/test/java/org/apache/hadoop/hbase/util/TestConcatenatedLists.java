begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestConcatenatedLists
block|{
annotation|@
name|Test
specifier|public
name|void
name|testUnsupportedOps
parameter_list|()
block|{
comment|// If adding support, add tests.
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
name|c
init|=
operator|new
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|c
operator|.
name|addSublist
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0L
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|c
operator|.
name|add
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{     }
try|try
block|{
name|c
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2L
argument_list|,
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{     }
try|try
block|{
name|c
operator|.
name|remove
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{     }
try|try
block|{
name|c
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0L
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{     }
try|try
block|{
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{     }
try|try
block|{
name|c
operator|.
name|retainAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0L
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{     }
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iter
init|=
name|c
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|verify
argument_list|(
operator|new
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneOne
parameter_list|()
block|{
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
name|c
init|=
operator|new
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|c
operator|.
name|addSublist
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|c
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneMany
parameter_list|()
block|{
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
name|c
init|=
operator|new
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|c
operator|.
name|addSublist
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0L
argument_list|,
literal|1L
argument_list|,
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|c
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testManyOne
parameter_list|()
block|{
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
name|c
init|=
operator|new
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|c
operator|.
name|addSublist
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|addAllSublists
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|c
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testManyMany
parameter_list|()
block|{
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
name|c
init|=
operator|new
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|c
operator|.
name|addAllSublists
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0L
argument_list|,
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|addSublist
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|addAllSublists
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|6L
argument_list|,
literal|7L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|c
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verify
parameter_list|(
name|ConcatenatedLists
argument_list|<
name|Long
argument_list|>
name|c
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|(
name|last
operator|==
operator|-
literal|1
operator|)
argument_list|,
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|last
operator|+
literal|1
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Long
index|[]
name|array
init|=
name|c
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
name|c
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iter
init|=
name|c
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|i
init|=
literal|0L
init|;
name|i
operator|<=
name|last
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|array
index|[
name|i
operator|.
name|intValue
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|all
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|c
operator|.
name|containsAll
argument_list|(
name|all
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

