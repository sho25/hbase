begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|MultiByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|SingleByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RPCTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RPCTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestByteBuffAllocator
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestByteBuffAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAllocateByteBuffToReadInto
parameter_list|()
block|{
name|int
name|maxBuffersInPool
init|=
literal|10
decl_stmt|;
name|int
name|bufSize
init|=
literal|6
operator|*
literal|1024
decl_stmt|;
name|ByteBuffAllocator
name|alloc
init|=
operator|new
name|ByteBuffAllocator
argument_list|(
literal|true
argument_list|,
name|maxBuffersInPool
argument_list|,
name|bufSize
argument_list|,
name|bufSize
operator|/
literal|6
argument_list|)
decl_stmt|;
name|ByteBuff
name|buff
init|=
name|alloc
operator|.
name|allocate
argument_list|(
literal|10
operator|*
name|bufSize
argument_list|)
decl_stmt|;
name|buff
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// When the request size is less than 1/6th of the pool buffer size. We should use on demand
comment|// created on heap Buffer
name|buff
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// When the request size is> 1/6th of the pool buffer size.
name|buff
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
operator|-
literal|1
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// ByteBuffDeallocaor#free should put back the BB to pool.
name|assertEquals
argument_list|(
name|maxBuffersInPool
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Request size> pool buffer size
name|buff
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
literal|7
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|instanceof
name|MultiByteBuff
argument_list|)
expr_stmt|;
name|ByteBuffer
index|[]
name|bbs
init|=
name|buff
operator|.
name|nioByteBuffers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bbs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bbs
index|[
literal|0
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bbs
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|bbs
index|[
literal|0
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|bbs
index|[
literal|1
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
operator|-
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
literal|6
operator|*
literal|1024
operator|+
literal|200
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|instanceof
name|MultiByteBuff
argument_list|)
expr_stmt|;
name|bbs
operator|=
name|buff
operator|.
name|nioByteBuffers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bbs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bbs
index|[
literal|0
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bbs
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|bbs
index|[
literal|0
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|bbs
index|[
literal|1
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
operator|-
literal|1
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|alloc
operator|.
name|allocate
argument_list|(
name|bufSize
operator|*
operator|(
name|maxBuffersInPool
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|buff
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
literal|20
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|instanceof
name|MultiByteBuff
argument_list|)
expr_stmt|;
name|bbs
operator|=
name|buff
operator|.
name|nioByteBuffers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bbs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bbs
index|[
literal|0
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bbs
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|bbs
index|[
literal|0
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
operator|*
literal|1024
argument_list|,
name|bbs
index|[
literal|1
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|alloc
operator|.
name|allocateOneBuffer
argument_list|()
expr_stmt|;
name|buff
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
literal|7
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|instanceof
name|SingleByteBuff
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
operator|*
literal|1024
argument_list|,
name|buff
operator|.
name|nioByteBuffers
argument_list|()
index|[
literal|0
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeAllocatedSize
parameter_list|()
block|{
name|int
name|maxBuffersInPool
init|=
literal|10
decl_stmt|;
name|ByteBuffAllocator
name|allocator
init|=
operator|new
name|ByteBuffAllocator
argument_list|(
literal|true
argument_list|,
name|maxBuffersInPool
argument_list|,
literal|6
operator|*
literal|1024
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|allocator
operator|.
name|allocate
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception when size< 0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected exception
block|}
name|ByteBuff
name|bb
init|=
name|allocator
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|bb
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllocateOneBuffer
parameter_list|()
block|{
comment|// Allocate from on-heap
name|ByteBuffAllocator
name|allocator
init|=
name|ByteBuffAllocator
operator|.
name|createOnHeap
argument_list|()
decl_stmt|;
name|ByteBuff
name|buf
init|=
name|allocator
operator|.
name|allocateOneBuffer
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ByteBuffAllocator
operator|.
name|DEFAULT_BUFFER_SIZE
argument_list|,
name|buf
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// Allocate from off-heap
name|int
name|bufSize
init|=
literal|10
decl_stmt|;
name|allocator
operator|=
operator|new
name|ByteBuffAllocator
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|buf
operator|=
name|allocator
operator|.
name|allocateOneBuffer
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|buf
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|remaining
argument_list|()
argument_list|,
name|bufSize
argument_list|)
expr_stmt|;
comment|// The another one will be allocated from on-heap because the pool has only one ByteBuffer,
comment|// and still not be cleaned.
name|ByteBuff
name|buf2
init|=
name|allocator
operator|.
name|allocateOneBuffer
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|buf2
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf2
operator|.
name|remaining
argument_list|()
argument_list|,
name|bufSize
argument_list|)
expr_stmt|;
comment|// free the first one
name|buf
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// The next one will be off-heap again.
name|buf
operator|=
name|allocator
operator|.
name|allocateOneBuffer
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|buf
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|remaining
argument_list|()
argument_list|,
name|bufSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReferenceCount
parameter_list|()
block|{
name|int
name|bufSize
init|=
literal|64
decl_stmt|;
name|ByteBuffAllocator
name|alloc
init|=
operator|new
name|ByteBuffAllocator
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|,
name|bufSize
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ByteBuff
name|buf1
init|=
name|alloc
operator|.
name|allocate
argument_list|(
name|bufSize
operator|*
literal|2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|buf1
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// The next one will be allocated from heap
name|ByteBuff
name|buf2
init|=
name|alloc
operator|.
name|allocateOneBuffer
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|buf2
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// duplicate the buf2, if the dup released, buf2 will also be released (SingleByteBuffer)
name|ByteBuff
name|dup2
init|=
name|buf2
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|dup2
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dup2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|dup2
operator|::
name|position
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|buf2
operator|::
name|position
argument_list|)
expr_stmt|;
comment|// duplicate the buf1, if the dup1 released, buf1 will also be released (MultipleByteBuffer)
name|ByteBuff
name|dup1
init|=
name|buf1
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|dup1
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dup1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|dup1
operator|::
name|position
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|buf1
operator|::
name|position
argument_list|)
expr_stmt|;
comment|// slice the buf3, if the slice3 released, buf3 will also be released (SingleByteBuffer)
name|ByteBuff
name|buf3
init|=
name|alloc
operator|.
name|allocateOneBuffer
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|buf3
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuff
name|slice3
init|=
name|buf3
operator|.
name|slice
argument_list|()
decl_stmt|;
name|slice3
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf3
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|slice3
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// slice the buf4, if the slice4 released, buf4 will also be released (MultipleByteBuffer)
name|ByteBuff
name|buf4
init|=
name|alloc
operator|.
name|allocate
argument_list|(
name|bufSize
operator|*
literal|2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|buf4
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuff
name|slice4
init|=
name|buf4
operator|.
name|slice
argument_list|()
decl_stmt|;
name|slice4
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf4
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|slice4
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test multiple reference for the same ByteBuff (SingleByteBuff)
name|ByteBuff
name|buf5
init|=
name|alloc
operator|.
name|allocateOneBuffer
argument_list|()
decl_stmt|;
name|ByteBuff
name|slice5
init|=
name|buf5
operator|.
name|duplicate
argument_list|()
operator|.
name|duplicate
argument_list|()
operator|.
name|duplicate
argument_list|()
operator|.
name|slice
argument_list|()
operator|.
name|slice
argument_list|()
decl_stmt|;
name|slice5
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf5
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|slice5
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|slice5
operator|::
name|position
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|buf5
operator|::
name|position
argument_list|)
expr_stmt|;
comment|// Test multiple reference for the same ByteBuff (SingleByteBuff)
name|ByteBuff
name|buf6
init|=
name|alloc
operator|.
name|allocate
argument_list|(
name|bufSize
operator|>>
literal|2
argument_list|)
decl_stmt|;
name|ByteBuff
name|slice6
init|=
name|buf6
operator|.
name|duplicate
argument_list|()
operator|.
name|duplicate
argument_list|()
operator|.
name|duplicate
argument_list|()
operator|.
name|slice
argument_list|()
operator|.
name|slice
argument_list|()
decl_stmt|;
name|slice6
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf6
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|slice6
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test retain the parent SingleByteBuff (duplicate)
name|ByteBuff
name|parent
init|=
name|alloc
operator|.
name|allocateOneBuffer
argument_list|()
decl_stmt|;
name|ByteBuff
name|child
init|=
name|parent
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|child
operator|.
name|retain
argument_list|()
expr_stmt|;
name|parent
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|child
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parent
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parent
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test retain parent MultiByteBuff (duplicate)
name|parent
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
name|bufSize
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|child
operator|=
name|parent
operator|.
name|duplicate
argument_list|()
expr_stmt|;
name|child
operator|.
name|retain
argument_list|()
expr_stmt|;
name|parent
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|child
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parent
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parent
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test retain the parent SingleByteBuff (slice)
name|parent
operator|=
name|alloc
operator|.
name|allocateOneBuffer
argument_list|()
expr_stmt|;
name|child
operator|=
name|parent
operator|.
name|slice
argument_list|()
expr_stmt|;
name|child
operator|.
name|retain
argument_list|()
expr_stmt|;
name|parent
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|child
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parent
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parent
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test retain parent MultiByteBuff (slice)
name|parent
operator|=
name|alloc
operator|.
name|allocate
argument_list|(
name|bufSize
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|child
operator|=
name|parent
operator|.
name|slice
argument_list|()
expr_stmt|;
name|child
operator|.
name|retain
argument_list|()
expr_stmt|;
name|parent
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|child
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parent
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|child
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parent
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReverseRef
parameter_list|()
block|{
name|int
name|bufSize
init|=
literal|64
decl_stmt|;
name|ByteBuffAllocator
name|alloc
init|=
operator|new
name|ByteBuffAllocator
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|,
name|bufSize
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ByteBuff
name|buf1
init|=
name|alloc
operator|.
name|allocate
argument_list|(
name|bufSize
argument_list|)
decl_stmt|;
name|ByteBuff
name|dup1
init|=
name|buf1
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buf1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dup1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|buf1
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buf1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dup1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|alloc
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|buf1
operator|::
name|position
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|dup1
operator|::
name|position
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteBuffUnsupportedMethods
parameter_list|()
block|{
name|int
name|bufSize
init|=
literal|64
decl_stmt|;
name|ByteBuffAllocator
name|alloc
init|=
operator|new
name|ByteBuffAllocator
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|,
name|bufSize
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ByteBuff
name|buf
init|=
name|alloc
operator|.
name|allocate
argument_list|(
name|bufSize
argument_list|)
decl_stmt|;
name|assertException
argument_list|(
parameter_list|()
lambda|->
name|buf
operator|.
name|retain
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
parameter_list|()
lambda|->
name|buf
operator|.
name|release
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
parameter_list|()
lambda|->
name|buf
operator|.
name|touch
argument_list|()
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
parameter_list|()
lambda|->
name|buf
operator|.
name|touch
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertException
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
try|try
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected exception.
block|}
block|}
block|}
end_class

end_unit

