begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestByteBufferResevoir
block|{
specifier|final
name|int
name|maxByteBufferSizeToCache
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|initialByteBufferSize
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|maxToCache
init|=
literal|10
decl_stmt|;
name|BoundedByteBufferPool
name|reservoir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|this
operator|.
name|reservoir
operator|=
operator|new
name|BoundedByteBufferPool
argument_list|(
name|maxByteBufferSizeToCache
argument_list|,
name|initialByteBufferSize
argument_list|,
name|maxToCache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|this
operator|.
name|reservoir
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPut
parameter_list|()
block|{
name|ByteBuffer
name|bb
init|=
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|initialByteBufferSize
argument_list|,
name|bb
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now remove a buffer and don't put it back so reservoir is empty.
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try adding in a buffer with a bigger-than-initial size and see if our runningAverage works.
comment|// Need to add then remove, then get a new bytebuffer so reservoir internally is doing
comment|// allocation
specifier|final
name|int
name|newCapacity
init|=
literal|2
decl_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|newCapacity
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bb
operator|=
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|newCapacity
argument_list|,
name|bb
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that adding a too-big buffer won't happen
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|maxByteBufferSizeToCache
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert we can't add more than max allowed instances.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxToCache
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|initialByteBufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|maxToCache
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComesOutSmallestFirst
parameter_list|()
block|{
comment|// Put in bbs that are sized 1-5 in random order. Put in a few of size 2 and make sure they
comment|// each come out too.
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservoir
operator|.
name|putBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now get them out and they should come out smallest first.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|this
operator|.
name|reservoir
operator|.
name|getBuffer
argument_list|()
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

