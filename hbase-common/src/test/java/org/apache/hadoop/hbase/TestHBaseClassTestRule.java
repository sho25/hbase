begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Tests HBaseClassTestRule.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHBaseClassTestRule
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestHBaseClassTestRule
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Test input classes of various kinds.
specifier|private
specifier|static
class|class
name|NonParameterizedClass
block|{
name|void
name|dummy
parameter_list|()
block|{     }
name|int
name|dummy
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|private
specifier|static
class|class
name|ParameterizedClassWithNoParametersMethod
block|{
name|void
name|dummy
parameter_list|()
block|{     }
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|private
specifier|static
class|class
name|InValidParameterizedClass
block|{
comment|// Not valid because parameters method is private.
annotation|@
name|Parameters
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|int
name|dummy
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|private
specifier|static
class|class
name|ValidParameterizedClass1
block|{
annotation|@
name|Parameters
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
return|;
block|}
name|int
name|dummy
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|private
specifier|static
class|class
name|ValidParameterizedClass2
block|{
annotation|@
name|Parameters
specifier|public
specifier|static
name|Object
index|[]
name|parameters
parameter_list|()
block|{
return|return
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
return|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|private
specifier|static
class|class
name|ValidParameterizedClass3
block|{
annotation|@
name|Parameters
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
return|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|private
specifier|static
class|class
name|ValidParameterizedClass4
block|{
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Integer
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
return|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|private
specifier|static
class|class
name|ExtendedParameterizedClass1
extends|extends
name|ValidParameterizedClass1
block|{
comment|// Should be inferred from the parent class.
name|int
name|dummy2
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|private
specifier|static
class|class
name|ExtendedParameterizedClass2
extends|extends
name|ValidParameterizedClass1
block|{
comment|// Should override the parent parameters class.
annotation|@
name|Parameters
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNumParameters
parameter_list|()
block|{
comment|// Invalid cases, expected to return 1.
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|NonParameterizedClass
operator|.
name|class
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|ParameterizedClassWithNoParametersMethod
operator|.
name|class
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|InValidParameterizedClass
operator|.
name|class
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Valid parameterized classes.
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|ValidParameterizedClass1
operator|.
name|class
argument_list|)
argument_list|,
name|ValidParameterizedClass1
operator|.
name|parameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|ValidParameterizedClass2
operator|.
name|class
argument_list|)
argument_list|,
name|ValidParameterizedClass2
operator|.
name|parameters
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|ValidParameterizedClass3
operator|.
name|class
argument_list|)
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|ValidParameterizedClass3
operator|.
name|parameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|ValidParameterizedClass4
operator|.
name|class
argument_list|)
argument_list|,
name|ValidParameterizedClass4
operator|.
name|parameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Testing inheritance.
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|ExtendedParameterizedClass1
operator|.
name|class
argument_list|)
argument_list|,
name|ValidParameterizedClass1
operator|.
name|parameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HBaseClassTestRule
operator|.
name|getNumParameters
argument_list|(
name|ExtendedParameterizedClass2
operator|.
name|class
argument_list|)
argument_list|,
name|ExtendedParameterizedClass2
operator|.
name|parameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

