begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_comment
comment|/**  * The class level TestRule for all the tests. Every test class should have a {@code ClassRule} with  * it.  *<p>  * For now it only sets a test method timeout based off the test categories small, medium, large.  * Based on junit Timeout TestRule; see https://github.com/junit-team/junit/wiki/Rules  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|HBaseClassTestRule
implements|implements
name|TestRule
block|{
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
specifier|private
specifier|final
name|Timeout
name|timeout
decl_stmt|;
specifier|private
name|HBaseClassTestRule
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Timeout
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
comment|/**    * Mainly used for {@link HBaseClassTestRuleChecker} to confirm that we use the correct    * class to generate timeout ClassRule.    */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getClazz
parameter_list|()
block|{
return|return
name|clazz
return|;
block|}
specifier|private
specifier|static
name|long
name|getTimeoutInSeconds
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|Category
index|[]
name|categories
init|=
name|clazz
operator|.
name|getAnnotationsByType
argument_list|(
name|Category
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|categories
index|[
literal|0
index|]
operator|.
name|value
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
name|SmallTests
operator|.
name|class
operator|||
name|c
operator|==
name|MediumTests
operator|.
name|class
operator|||
name|c
operator|==
name|LargeTests
operator|.
name|class
condition|)
block|{
comment|// All tests have a 10minute timeout.
return|return
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
literal|13
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" does not have SmallTests/MediumTests/LargeTests in @Category"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|HBaseClassTestRule
name|forClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|HBaseClassTestRule
argument_list|(
name|clazz
argument_list|,
name|Timeout
operator|.
name|builder
argument_list|()
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|withTimeout
argument_list|(
name|getTimeoutInSeconds
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
return|return
name|timeout
operator|.
name|apply
argument_list|(
name|base
argument_list|,
name|description
argument_list|)
return|;
block|}
block|}
end_class

end_unit

