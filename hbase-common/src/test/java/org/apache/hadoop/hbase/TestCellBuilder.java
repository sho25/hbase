begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCellBuilder
block|{
specifier|private
specifier|static
specifier|final
name|byte
name|OLD_DATA
init|=
literal|87
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|NEW_DATA
init|=
literal|100
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCellBuilderWithDeepCopy
parameter_list|()
block|{
name|byte
index|[]
name|row
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|family
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|Cell
name|cell
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|setType
argument_list|(
name|CellBuilder
operator|.
name|DataType
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|row
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|family
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|qualifier
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|value
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getRowArray
argument_list|()
index|[
name|cell
operator|.
name|getRowOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
index|[
name|cell
operator|.
name|getFamilyOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
index|[
name|cell
operator|.
name|getQualifierOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getValueArray
argument_list|()
index|[
name|cell
operator|.
name|getValueOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellBuilderWithShallowCopy
parameter_list|()
block|{
name|byte
index|[]
name|row
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|family
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|Cell
name|cell
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|setType
argument_list|(
name|CellBuilder
operator|.
name|DataType
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|row
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|family
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|qualifier
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|value
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getRowArray
argument_list|()
index|[
name|cell
operator|.
name|getRowOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
index|[
name|cell
operator|.
name|getFamilyOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
index|[
name|cell
operator|.
name|getQualifierOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getValueArray
argument_list|()
index|[
name|cell
operator|.
name|getValueOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendedCellBuilderWithShallowCopy
parameter_list|()
block|{
name|byte
index|[]
name|row
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|family
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|tags
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|long
name|seqId
init|=
literal|999
decl_stmt|;
name|Cell
name|cell
init|=
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|setType
argument_list|(
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|setTags
argument_list|(
name|tags
argument_list|)
operator|.
name|setSequenceId
argument_list|(
name|seqId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|row
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|family
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|qualifier
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|value
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|tags
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getRowArray
argument_list|()
index|[
name|cell
operator|.
name|getRowOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
index|[
name|cell
operator|.
name|getFamilyOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
index|[
name|cell
operator|.
name|getQualifierOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getValueArray
argument_list|()
index|[
name|cell
operator|.
name|getValueOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_DATA
argument_list|,
name|cell
operator|.
name|getTagsArray
argument_list|()
index|[
name|cell
operator|.
name|getTagsOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|seqId
argument_list|,
name|cell
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendedCellBuilderWithDeepCopy
parameter_list|()
block|{
name|byte
index|[]
name|row
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|family
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|byte
index|[]
name|tags
init|=
operator|new
name|byte
index|[]
block|{
name|OLD_DATA
block|}
decl_stmt|;
name|long
name|seqId
init|=
literal|999
decl_stmt|;
name|Cell
name|cell
init|=
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|setType
argument_list|(
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|setTags
argument_list|(
name|tags
argument_list|)
operator|.
name|setSequenceId
argument_list|(
name|seqId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|row
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|family
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|qualifier
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|value
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|tags
index|[
literal|0
index|]
operator|=
name|NEW_DATA
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getRowArray
argument_list|()
index|[
name|cell
operator|.
name|getRowOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getFamilyArray
argument_list|()
index|[
name|cell
operator|.
name|getFamilyOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
index|[
name|cell
operator|.
name|getQualifierOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getValueArray
argument_list|()
index|[
name|cell
operator|.
name|getValueOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OLD_DATA
argument_list|,
name|cell
operator|.
name|getTagsArray
argument_list|()
index|[
name|cell
operator|.
name|getTagsOffset
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|seqId
argument_list|,
name|cell
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

