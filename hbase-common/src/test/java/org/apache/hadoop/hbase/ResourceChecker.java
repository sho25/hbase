begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Utility class to check the resources:  *  - log them before and after each test method  *  - check them against a minimum or maximum  *  - check that they don't leak during the test  */
end_comment

begin_class
specifier|public
class|class
name|ResourceChecker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResourceChecker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|tagLine
decl_stmt|;
enum|enum
name|Phase
block|{
name|INITIAL
block|,
name|INTERMEDIATE
block|,
name|END
block|}
comment|/**    * Constructor    * @param tagLine The tagLine is added to the logs. Must not be null.    */
specifier|public
name|ResourceChecker
parameter_list|(
specifier|final
name|String
name|tagLine
parameter_list|)
block|{
name|this
operator|.
name|tagLine
operator|=
name|tagLine
expr_stmt|;
block|}
comment|/**    * Class to implement for each type of resource.    */
specifier|abstract
specifier|static
class|class
name|ResourceAnalyzer
block|{
comment|/**      * Maximum we set for the resource. Will get a warning in logs      * if we go over this limit.      */
specifier|public
name|int
name|getMax
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
comment|/**      * Minimum we set for the resource. Will get a warning in logs      * if we go under this limit.      */
specifier|public
name|int
name|getMin
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MIN_VALUE
return|;
block|}
comment|/**      * Name of the resource analyzed. By default extracted from the class name, but      *  can be overridden by the subclasses.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
name|String
name|className
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|extName
init|=
name|ResourceAnalyzer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|endsWith
argument_list|(
name|extName
argument_list|)
condition|)
block|{
return|return
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|className
operator|.
name|length
argument_list|()
operator|-
name|extName
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|className
return|;
block|}
block|}
comment|/**      * The value for the resource.      * @param phase      */
specifier|abstract
specifier|public
name|int
name|getVal
parameter_list|(
name|Phase
name|phase
parameter_list|)
function_decl|;
comment|/*      * Retrieves List of Strings which would be logged in logEndings()      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getStringsToLog
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|ResourceAnalyzer
argument_list|>
name|ras
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceAnalyzer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|initialValues
decl_stmt|;
specifier|private
name|int
index|[]
name|endingValues
decl_stmt|;
specifier|private
name|void
name|fillInit
parameter_list|()
block|{
name|initialValues
operator|=
operator|new
name|int
index|[
name|ras
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|fill
argument_list|(
name|Phase
operator|.
name|INITIAL
argument_list|,
name|initialValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fillEndings
parameter_list|()
block|{
name|endingValues
operator|=
operator|new
name|int
index|[
name|ras
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|fill
argument_list|(
name|Phase
operator|.
name|END
argument_list|,
name|endingValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fill
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|int
index|[]
name|vals
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResourceAnalyzer
name|ra
range|:
name|ras
control|)
block|{
name|vals
index|[
name|i
operator|++
index|]
operator|=
name|ra
operator|.
name|getVal
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkInit
parameter_list|()
block|{
name|check
argument_list|(
name|initialValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkEndings
parameter_list|()
block|{
name|check
argument_list|(
name|endingValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|check
parameter_list|(
name|int
index|[]
name|vals
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResourceAnalyzer
name|ra
range|:
name|ras
control|)
block|{
name|int
name|cur
init|=
name|vals
index|[
name|i
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|cur
operator|<
name|ra
operator|.
name|getMin
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ra
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|cur
operator|+
literal|" is inferior to "
operator|+
name|ra
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|>
name|ra
operator|.
name|getMax
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ra
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|cur
operator|+
literal|" is superior to "
operator|+
name|ra
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|logInit
parameter_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceAnalyzer
name|ra
range|:
name|ras
control|)
block|{
name|int
name|cur
init|=
name|initialValues
index|[
name|i
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ra
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|cur
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"before: "
operator|+
name|tagLine
operator|+
literal|" "
operator|+
name|sb
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logEndings
parameter_list|()
block|{
assert|assert
name|initialValues
operator|.
name|length
operator|==
name|ras
operator|.
name|size
argument_list|()
assert|;
assert|assert
name|endingValues
operator|.
name|length
operator|==
name|ras
operator|.
name|size
argument_list|()
assert|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceAnalyzer
name|ra
range|:
name|ras
control|)
block|{
name|int
name|curP
init|=
name|initialValues
index|[
name|i
index|]
decl_stmt|;
name|int
name|curN
init|=
name|endingValues
index|[
name|i
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ra
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|curN
argument_list|)
operator|.
name|append
argument_list|(
literal|" (was "
argument_list|)
operator|.
name|append
argument_list|(
name|curP
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|curN
operator|>
name|curP
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|ra
operator|.
name|getStringsToLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|strings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
operator|.
name|append
argument_list|(
name|ra
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" LEAK? -"
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"after: "
operator|+
name|tagLine
operator|+
literal|" "
operator|+
name|sb
argument_list|)
expr_stmt|;
block|}
comment|/**    * To be called as the beginning of a test method:    * - measure the resources    * - check vs. the limits.    * - logs them.    */
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|ras
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No resource analyzer"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fillInit
argument_list|()
expr_stmt|;
name|logInit
argument_list|()
expr_stmt|;
name|checkInit
argument_list|()
expr_stmt|;
block|}
comment|/**    * To be called as the end of a test method:    * - measure the resources    * - check vs. the limits.    * - check vs. the initial state    * - logs them.    */
specifier|public
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|ras
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No resource analyzer"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|initialValues
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No initial values"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fillEndings
argument_list|()
expr_stmt|;
name|logEndings
argument_list|()
expr_stmt|;
name|checkEndings
argument_list|()
expr_stmt|;
block|}
comment|/**    * Adds a resource analyzer to the resources checked.    */
specifier|public
name|void
name|addResourceAnalyzer
parameter_list|(
name|ResourceAnalyzer
name|ra
parameter_list|)
block|{
name|ras
operator|.
name|add
argument_list|(
name|ra
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

