begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteBufferUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestKeyValue
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestKeyValue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestKeyValue
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testColumnCompare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"def"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ef"
argument_list|)
decl_stmt|;
name|KeyValue
name|aaa
init|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|family1
argument_list|,
name|qualifier1
argument_list|,
literal|0L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|aaa
argument_list|,
name|family2
argument_list|,
name|qualifier2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|aaa
argument_list|,
name|family1
argument_list|,
name|qualifier1
argument_list|)
argument_list|)
expr_stmt|;
name|aaa
operator|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|family2
argument_list|,
name|qualifier2
argument_list|,
literal|0L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|aaa
argument_list|,
name|family1
argument_list|,
name|qualifier1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|aaa
argument_list|,
name|family2
argument_list|,
name|qualifier2
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|nullQualifier
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|aaa
operator|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|family1
argument_list|,
name|nullQualifier
argument_list|,
literal|0L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|aaa
argument_list|,
name|family1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|aaa
argument_list|,
name|family2
argument_list|,
name|qualifier2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a corner case when the family qualifier is a prefix of the    *  column qualifier.    */
annotation|@
name|Test
specifier|public
name|void
name|testColumnCompare_prefix
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"def"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ab"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"def"
argument_list|)
decl_stmt|;
name|KeyValue
name|aaa
init|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|family1
argument_list|,
name|qualifier1
argument_list|,
literal|0L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|aaa
argument_list|,
name|family2
argument_list|,
name|qualifier2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LOWKEY: "
operator|+
name|KeyValue
operator|.
name|LOWESTKEY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
literal|"testBasics"
decl_stmt|;
name|check
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test empty value and empty column -- both should work. (not empty fam)
name|check
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// empty qual is equivalent to null qual
name|assertEquals
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rk"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rk"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|check
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|kv
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
comment|// Call toString to make sure it works.
name|LOG
operator|.
name|info
argument_list|(
name|kv
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlainCompare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"umn"
argument_list|)
decl_stmt|;
name|KeyValue
name|aaa
init|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|KeyValue
name|bbb
init|=
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|aaa
argument_list|,
name|bbb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|bbb
argument_list|,
name|aaa
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Compare breaks if passed same ByteBuffer as both left and right arguments.
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|bbb
argument_list|,
name|bbb
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|aaa
argument_list|,
name|aaa
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Do compare with different timestamps.
name|aaa
operator|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|1
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|bbb
operator|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|2
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|aaa
argument_list|,
name|bbb
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|bbb
argument_list|,
name|aaa
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|aaa
argument_list|,
name|aaa
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Do compare with different types.  Higher numbered types -- Delete
comment|// should sort ahead of lower numbers; i.e. Put
name|aaa
operator|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|bbb
operator|=
operator|new
name|KeyValue
argument_list|(
name|a
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|1
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|aaa
argument_list|,
name|bbb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|bbb
argument_list|,
name|aaa
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|aaa
argument_list|,
name|aaa
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoreComparisons
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Meta compares
name|KeyValue
name|aaa
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236020145502"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|KeyValue
name|bbb
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,,99999999999999"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|CellComparator
name|c
init|=
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|bbb
argument_list|,
name|aaa
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|KeyValue
name|aaaa
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,,1236023996656"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"regioninfo"
argument_list|)
argument_list|,
literal|1236024396271L
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|aaaa
argument_list|,
name|bbb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|KeyValue
name|x
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236034574162"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|9223372036854775807L
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|y
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236034574162"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"regioninfo"
argument_list|)
argument_list|,
literal|1236034574912L
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|comparisons
argument_list|(
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
argument_list|)
expr_stmt|;
name|comparisons
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|metacomparisons
argument_list|(
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaComparatorTableKeysWithCommaOk
parameter_list|()
block|{
name|CellComparator
name|c
init|=
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// meta keys values are not quite right.  A users can enter illegal values
comment|// from shell when scanning meta.
name|KeyValue
name|a
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,key,with,commas1,1234"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|KeyValue
name|b
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,key,with,commas2,0123"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests cases where rows keys have characters below the ','.    * See HBASE-832    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testKeyValueBorderCases
parameter_list|()
throws|throws
name|IOException
block|{
comment|// % sorts before , so if we don't do special comparator, rowB would
comment|// come before rowA.
name|KeyValue
name|rowA
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable,www.hbase.org/,1234"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|rowB
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable,www.hbase.org/%20,99999"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
operator|.
name|compare
argument_list|(
name|rowA
argument_list|,
name|rowB
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|rowA
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable,,1234"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|rowB
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testtable,$www.hbase.org/,99999"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
operator|.
name|compare
argument_list|(
name|rowA
argument_list|,
name|rowB
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|metacomparisons
parameter_list|(
specifier|final
name|CellComparatorImpl
name|c
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|KeyValue
name|a
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,1"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|KeyValue
name|b
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,2"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,2"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|comparisons
parameter_list|(
specifier|final
name|CellComparatorImpl
name|c
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,2"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,2"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|KeyValue
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"umn"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|nb
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|KeyValue
index|[]
name|keys
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,\u0000\u0000,2"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|2
argument_list|,
name|nb
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,\u0001,3"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|3
argument_list|,
name|nb
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,,1"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|1
argument_list|,
name|nb
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,\u1000,5"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|5
argument_list|,
name|nb
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,a,4"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|4
argument_list|,
name|nb
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a,a,0"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|0
argument_list|,
name|nb
argument_list|)
block|,     }
decl_stmt|;
comment|// Add to set with bad comparator
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|keys
argument_list|)
expr_stmt|;
comment|// This will output the keys incorrectly.
name|boolean
name|assertion
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|KeyValue
name|k
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
name|count
operator|++
operator|==
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|AssertionError
name|e
parameter_list|)
block|{
comment|// Expected
name|assertion
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
comment|// Make set with good comparator
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|KeyValue
name|k
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
name|count
operator|++
operator|==
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStackedUpKeyValue
parameter_list|()
block|{
comment|// Test multiple KeyValues in a single blob.
comment|// TODO actually write this test!
block|}
specifier|private
specifier|final
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|qualA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfA"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|qualB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qfB"
argument_list|)
decl_stmt|;
specifier|private
name|void
name|assertKVLess
parameter_list|(
name|CellComparator
name|c
parameter_list|,
name|KeyValue
name|less
parameter_list|,
name|KeyValue
name|greater
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c
operator|.
name|compare
argument_list|(
name|less
argument_list|,
name|greater
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cmp
operator|<
literal|0
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|c
operator|.
name|compare
argument_list|(
name|greater
argument_list|,
name|less
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cmp
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertKVLessWithoutRow
parameter_list|(
name|CellComparator
name|c
parameter_list|,
name|int
name|common
parameter_list|,
name|KeyValue
name|less
parameter_list|,
name|KeyValue
name|greater
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c
operator|.
name|compare
argument_list|(
name|less
argument_list|,
name|greater
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cmp
operator|<
literal|0
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|c
operator|.
name|compare
argument_list|(
name|greater
argument_list|,
name|less
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cmp
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareWithoutRow
parameter_list|()
block|{
specifier|final
name|CellComparator
name|c
init|=
name|CellComparatorImpl
operator|.
name|COMPARATOR
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fa
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fami
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fami"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fami1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fami1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf2"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
comment|// 'fa:'
name|KeyValue
name|kv_0
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fa
argument_list|,
name|qual0
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
comment|// 'fami:'
name|KeyValue
name|kv0_0
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fami
argument_list|,
name|qual0
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
comment|// 'fami:qf1'
name|KeyValue
name|kv0_1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fami
argument_list|,
name|qual1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
comment|// 'fami:qf2'
name|KeyValue
name|kv0_2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fami
argument_list|,
name|qual2
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
comment|// 'fami1:'
name|KeyValue
name|kv1_0
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fami1
argument_list|,
name|qual0
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
comment|// 'fami:qf1'< 'fami:qf2'
name|assertKVLessWithoutRow
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|kv0_1
argument_list|,
name|kv0_2
argument_list|)
expr_stmt|;
comment|// 'fami:qf1'< 'fami1:'
name|assertKVLessWithoutRow
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|kv0_1
argument_list|,
name|kv1_0
argument_list|)
expr_stmt|;
comment|// Test comparison by skipping the same prefix bytes.
comment|/***      * KeyValue Format and commonLength:      * |_keyLen_|_valLen_|_rowLen_|_rowKey_|_famiLen_|_fami_|_Quali_|....      * ------------------|-------commonLength--------|--------------      */
name|int
name|commonLength
init|=
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|row
operator|.
name|length
decl_stmt|;
comment|// 'fa:'< 'fami:'. They have commonPrefix + 2 same prefix bytes.
name|assertKVLessWithoutRow
argument_list|(
name|c
argument_list|,
name|commonLength
operator|+
literal|2
argument_list|,
name|kv_0
argument_list|,
name|kv0_0
argument_list|)
expr_stmt|;
comment|// 'fami:'< 'fami:qf1'. They have commonPrefix + 4 same prefix bytes.
name|assertKVLessWithoutRow
argument_list|(
name|c
argument_list|,
name|commonLength
operator|+
literal|4
argument_list|,
name|kv0_0
argument_list|,
name|kv0_1
argument_list|)
expr_stmt|;
comment|// 'fami:qf1'< 'fami1:'. They have commonPrefix + 4 same prefix bytes.
name|assertKVLessWithoutRow
argument_list|(
name|c
argument_list|,
name|commonLength
operator|+
literal|4
argument_list|,
name|kv0_1
argument_list|,
name|kv1_0
argument_list|)
expr_stmt|;
comment|// 'fami:qf1'< 'fami:qf2'. They have commonPrefix + 6 same prefix bytes.
name|assertKVLessWithoutRow
argument_list|(
name|c
argument_list|,
name|commonLength
operator|+
literal|6
argument_list|,
name|kv0_1
argument_list|,
name|kv0_2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstLastOnRow
parameter_list|()
block|{
specifier|final
name|CellComparator
name|c
init|=
name|CellComparatorImpl
operator|.
name|COMPARATOR
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|bufferA
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|int
name|offsetA
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|bufferB
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|int
name|offsetB
init|=
literal|7
decl_stmt|;
comment|// These are listed in sort order (ie: every one should be less
comment|// than the one on the next line).
specifier|final
name|KeyValue
name|firstOnRowA
init|=
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowA
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|firstOnRowABufferFamQual
init|=
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|bufferA
argument_list|,
name|offsetA
argument_list|,
name|rowA
argument_list|,
literal|0
argument_list|,
name|rowA
operator|.
name|length
argument_list|,
name|family
argument_list|,
literal|0
argument_list|,
name|family
operator|.
name|length
argument_list|,
name|qualA
argument_list|,
literal|0
argument_list|,
name|qualA
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kvA_1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kvA_2
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|lastOnRowA
init|=
name|KeyValueUtil
operator|.
name|createLastOnRow
argument_list|(
name|rowA
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|firstOnRowB
init|=
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowB
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|firstOnRowBBufferFam
init|=
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|bufferB
argument_list|,
name|offsetB
argument_list|,
name|rowB
argument_list|,
literal|0
argument_list|,
name|rowB
operator|.
name|length
argument_list|,
name|family
argument_list|,
literal|0
argument_list|,
name|family
operator|.
name|length
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kvB
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowA
argument_list|,
name|firstOnRowB
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowA
argument_list|,
name|firstOnRowBBufferFam
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowABufferFamQual
argument_list|,
name|firstOnRowB
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowA
argument_list|,
name|kvA_1
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowA
argument_list|,
name|kvA_2
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowABufferFamQual
argument_list|,
name|kvA_2
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|kvA_1
argument_list|,
name|kvA_2
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|kvA_2
argument_list|,
name|firstOnRowB
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|kvA_1
argument_list|,
name|firstOnRowB
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|kvA_2
argument_list|,
name|firstOnRowBBufferFam
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|kvA_1
argument_list|,
name|firstOnRowBBufferFam
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|lastOnRowA
argument_list|,
name|firstOnRowB
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|lastOnRowA
argument_list|,
name|firstOnRowBBufferFam
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowB
argument_list|,
name|kvB
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowBBufferFam
argument_list|,
name|kvB
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|lastOnRowA
argument_list|,
name|kvB
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|kvA_2
argument_list|,
name|lastOnRowA
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|kvA_1
argument_list|,
name|lastOnRowA
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowA
argument_list|,
name|lastOnRowA
argument_list|)
expr_stmt|;
name|assertKVLess
argument_list|(
name|c
argument_list|,
name|firstOnRowABufferFamQual
argument_list|,
name|lastOnRowA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateKeyOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a real value"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|evalue
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|// empty value
for|for
control|(
name|byte
index|[]
name|val
range|:
operator|new
name|byte
index|[]
index|[]
block|{
name|value
block|,
name|evalue
block|}
control|)
block|{
for|for
control|(
name|boolean
name|useLen
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|family
argument_list|,
name|qualA
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|kv1ko
init|=
name|kv1
operator|.
name|createKeyOnly
argument_list|(
name|useLen
argument_list|)
decl_stmt|;
comment|// keys are still the same
name|assertTrue
argument_list|(
name|kv1
operator|.
name|equals
argument_list|(
name|kv1ko
argument_list|)
argument_list|)
expr_stmt|;
comment|// but values are not
name|assertTrue
argument_list|(
name|kv1ko
operator|.
name|getValueLength
argument_list|()
operator|==
operator|(
name|useLen
condition|?
name|Bytes
operator|.
name|SIZEOF_INT
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useLen
condition|)
block|{
name|assertEquals
argument_list|(
name|kv1
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|kv1ko
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv1ko
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv1ko
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateKeyValueFromKey
parameter_list|()
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myRow"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCF"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myQualifier"
argument_list|)
argument_list|,
literal|12345L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myValue"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|initialPadding
init|=
literal|10
decl_stmt|;
name|int
name|endingPadding
init|=
literal|20
decl_stmt|;
name|int
name|keyLen
init|=
name|kv
operator|.
name|getKeyLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tmpArr
init|=
operator|new
name|byte
index|[
name|initialPadding
operator|+
name|endingPadding
operator|+
name|keyLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|kv
operator|.
name|getKeyOffset
argument_list|()
argument_list|,
name|tmpArr
argument_list|,
name|initialPadding
argument_list|,
name|keyLen
argument_list|)
expr_stmt|;
name|KeyValue
name|kvFromKey
init|=
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|tmpArr
argument_list|,
name|initialPadding
argument_list|,
name|keyLen
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|keyLen
argument_list|,
name|kvFromKey
operator|.
name|getKeyLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|KeyValue
operator|.
name|ROW_OFFSET
operator|+
name|keyLen
argument_list|,
name|kvFromKey
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"kv="
operator|+
name|kv
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"kvFromKey="
operator|+
name|kvFromKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvFromKey
operator|.
name|toString
argument_list|()
argument_list|,
name|kv
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"=[0-9]+"
argument_list|,
literal|"=0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that getTimestamp() does always return the proper timestamp, even after updating it.    * See HBASE-6265.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetTimestamp
parameter_list|()
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myRow"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCF"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myQualifier"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myValue"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|time1
init|=
name|kv
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|kv
operator|.
name|updateLatestStamp
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|12345L
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|time2
init|=
name|kv
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|time1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12345L
argument_list|,
name|time2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKVsWithTags
parameter_list|()
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myRow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCF"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myQualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myValue"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|metaValue1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"metaValue1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|metaValue2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"metaValue2"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|cf
argument_list|,
name|q
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|,
operator|new
name|Tag
index|[]
block|{
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|metaValue1
argument_list|)
block|,
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|metaValue2
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|kv
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|cf
argument_list|,
literal|0
argument_list|,
name|cf
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|q
argument_list|,
literal|0
argument_list|,
name|q
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|PrivateCellUtil
operator|.
name|getTags
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tags
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|meta1Ok
init|=
literal|false
decl_stmt|,
name|meta2Ok
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
operator|(
name|byte
operator|)
literal|1
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|cloneValue
argument_list|(
name|tag
argument_list|)
argument_list|,
name|metaValue1
argument_list|)
condition|)
block|{
name|meta1Ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|cloneValue
argument_list|(
name|tag
argument_list|)
argument_list|,
name|metaValue2
argument_list|)
condition|)
block|{
name|meta2Ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|meta1Ok
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta2Ok
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tag
argument_list|>
name|tagItr
init|=
name|PrivateCellUtil
operator|.
name|tagsIterator
argument_list|(
name|kv
argument_list|)
decl_stmt|;
comment|//Iterator<Tag> tagItr = kv.tagsIterator();
name|assertTrue
argument_list|(
name|tagItr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|next
init|=
name|tagItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|next
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|next
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|cloneValue
argument_list|(
name|next
argument_list|)
argument_list|,
name|metaValue1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tagItr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|tagItr
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|next
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|next
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|cloneValue
argument_list|(
name|next
argument_list|)
argument_list|,
name|metaValue2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tagItr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|tagItr
operator|=
name|PrivateCellUtil
operator|.
name|tagsIterator
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tagItr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|tagItr
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|next
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|next
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|cloneValue
argument_list|(
name|next
argument_list|)
argument_list|,
name|metaValue1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tagItr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|tagItr
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|next
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
name|next
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|equals
argument_list|(
name|Tag
operator|.
name|cloneValue
argument_list|(
name|next
argument_list|)
argument_list|,
name|metaValue2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tagItr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaKeyComparator
parameter_list|()
block|{
name|CellComparator
name|c
init|=
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
name|a
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|KeyValue
name|b
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table1,111"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table2,111"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,2222"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111,aaaa"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,2222"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,2222.bbb"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,,aaaa"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111,bbb"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111,aaaa"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111,bbb"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111,xxxx"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111,222,bbb"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111,11,xxx"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table,111,222,bbb"
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyValue
name|kvA1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualA"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kvA2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualA"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
comment|// We set a different sequence id on kvA2 to demonstrate that the equals and hashCode also
comment|// don't take this into account.
name|kvA2
operator|.
name|setSequenceId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|KeyValue
name|kvB
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualB"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|kvA1
argument_list|,
name|kvA2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|kvA1
argument_list|,
name|kvB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvA1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|kvA2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|kvA1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|kvB
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeyValueSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyValue
index|[]
name|keyValues
init|=
operator|new
name|KeyValue
index|[]
block|{
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualA"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualA"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualA"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|,
operator|new
name|Tag
index|[]
block|{
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|120
argument_list|,
literal|"tagA"
argument_list|)
block|,
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|121
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tagB"
argument_list|)
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualA"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|,
operator|new
name|Tag
index|[]
block|{
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|"tagA"
argument_list|)
block|}
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"key"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|keyValues
control|)
block|{
name|DataOutputStream
name|os
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteArrayOutputStream
argument_list|)
decl_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|os
argument_list|,
name|KeyValueUtil
operator|.
name|getSerializedSize
argument_list|(
name|kv
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValueUtil
operator|.
name|oswrite
argument_list|(
name|kv
argument_list|,
name|os
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|DataInputStream
name|is
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteArrayOutputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Case#"
operator|+
name|i
operator|+
literal|": deserialize the kv: "
operator|+
name|keyValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|KeyValue
name|destKv
init|=
name|KeyValueUtil
operator|.
name|createKeyValueFromInputStream
argument_list|(
name|is
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|keyValues
index|[
name|i
index|]
argument_list|,
name|destKv
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|keyValues
index|[
name|i
index|]
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|destKv
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|PrivateCellUtil
operator|.
name|cloneTags
argument_list|(
name|keyValues
index|[
name|i
index|]
argument_list|)
argument_list|,
name|PrivateCellUtil
operator|.
name|cloneTags
argument_list|(
name|destKv
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FailureCase
block|{
name|byte
index|[]
name|buf
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
name|boolean
name|withTags
decl_stmt|;
name|String
name|expectedMessage
decl_stmt|;
specifier|public
name|FailureCase
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|withTags
parameter_list|,
name|String
name|expectedMessage
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|withTags
operator|=
name|withTags
expr_stmt|;
name|this
operator|.
name|expectedMessage
operator|=
name|expectedMessage
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FailureCaseDetails: [buf="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", "
operator|+
literal|"length="
operator|+
name|length
operator|+
literal|", expectedMessage="
operator|+
name|expectedMessage
operator|+
literal|", withtags="
operator|+
name|withTags
operator|+
literal|"]"
return|;
block|}
specifier|public
name|String
name|getExpectedMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|expectedMessage
operator|+
name|KeyValueUtil
operator|.
name|bytesToHex
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckKeyValueBytesFailureCase
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|inputs
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
block|,
comment|// case.0
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"a"
argument_list|)
block|,
comment|// case.1
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x01"
argument_list|)
block|,
comment|// case.2
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x01\\x00"
argument_list|)
block|,
comment|// case.3
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01"
argument_list|)
block|,
comment|// case.4
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00"
argument_list|)
block|,
comment|// case.5
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x01"
argument_list|)
block|,
comment|// case.6
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x03ROW"
argument_list|)
block|,
comment|// case.7
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01"
argument_list|)
block|,
comment|// case.8
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\xFF"
operator|+
literal|"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\x03"
argument_list|)
block|,
comment|// case.9
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x03"
argument_list|)
block|,
comment|// case.10
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04"
argument_list|)
block|,
comment|// case.11
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04VALUE"
argument_list|)
block|,
comment|// case.12
block|}
decl_stmt|;
name|String
index|[]
name|outputs
init|=
operator|new
name|String
index|[]
block|{
literal|"Overflow when reading key length at position=0"
block|,
literal|"Overflow when reading key length at position=0"
block|,
literal|"Invalid key length in KeyValue. keyLength=1"
block|,
literal|"Overflow when reading value length at position=4"
block|,
literal|"Invalid value length in KeyValue, valueLength=1"
block|,
literal|"Overflow when reading row length at position=8"
block|,
literal|"Invalid row length in KeyValue, rowLength=1"
block|,
literal|"Overflow when reading family length at position=13"
block|,
literal|"Invalid family length in KeyValue, familyLength=1"
block|,
literal|"Timestamp cannot be negative, ts=-1"
block|,
literal|"Invalid type in KeyValue, type=3"
block|,
literal|"Overflow when reading value part at position=25"
block|,
literal|"Some redundant bytes in KeyValue's buffer, startOffset=26, endOffset=30"
block|, }
decl_stmt|;
name|byte
index|[]
index|[]
name|withTagsInputs
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04V\\x01"
argument_list|)
block|,
comment|// case.13
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04V\\x00\\x01"
argument_list|)
block|,
comment|// case.14
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04V\\x00\\x04\\x00\\x03\\x00A"
argument_list|)
block|,
comment|// case.15
comment|// case.16
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04V\\x00\\x0A\\x00\\x04\\x00TAG\\x00\\x04"
operator|+
literal|"\\xFFT"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04V\\x00\\x0C\\x00\\x04\\x00TAG\\x00\\x05"
operator|+
literal|"\\xF0COME\\x00"
argument_list|)
block|,
comment|// case.17
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04V\\x00\\x0C\\x00\\x04\\x00TAG\\x00\\x05"
operator|+
literal|"\\xF0COME"
argument_list|)
block|,
comment|// case.18
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04V\\x00\\x00"
argument_list|)
block|,
comment|// case.19
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x03ROW\\x01FQ\\x00"
operator|+
literal|"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x04V\\x00\\x1B\\x00\\x05\\x01TAG1\\x00\\x05"
operator|+
literal|"\\x02TAG2\\x00\\x05\\x03TAG3\\x00\\x05\\x04TAG4"
argument_list|)
block|,
comment|// case.20
block|}
decl_stmt|;
name|String
index|[]
name|withTagsOutputs
init|=
operator|new
name|String
index|[]
block|{
literal|"Overflow when reading tags length at position=26"
block|,
literal|"Invalid tags length in KeyValue at position=26"
block|,
literal|"Invalid tag length at position=28, tagLength=3"
block|,
literal|"Invalid tag length at position=34, tagLength=4"
block|,
literal|"Some redundant bytes in KeyValue's buffer, startOffset=41, endOffset=42"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|, }
decl_stmt|;
name|assertEquals
argument_list|(
name|inputs
operator|.
name|length
argument_list|,
name|outputs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|withTagsInputs
operator|.
name|length
argument_list|,
name|withTagsOutputs
operator|.
name|length
argument_list|)
expr_stmt|;
name|FailureCase
index|[]
name|cases
init|=
operator|new
name|FailureCase
index|[
name|inputs
operator|.
name|length
operator|+
name|withTagsInputs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cases
index|[
name|i
index|]
operator|=
operator|new
name|FailureCase
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|inputs
index|[
name|i
index|]
operator|.
name|length
argument_list|,
literal|false
argument_list|,
name|outputs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|withTagsInputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cases
index|[
name|inputs
operator|.
name|length
operator|+
name|i
index|]
operator|=
operator|new
name|FailureCase
argument_list|(
name|withTagsInputs
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|withTagsInputs
index|[
name|i
index|]
operator|.
name|length
argument_list|,
literal|true
argument_list|,
name|withTagsOutputs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cases
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FailureCase
name|c
init|=
name|cases
index|[
name|i
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|os
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|ByteBufferUtils
operator|.
name|putInt
argument_list|(
name|os
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|c
operator|.
name|buf
argument_list|,
name|c
operator|.
name|offset
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyValueUtil
operator|.
name|createKeyValueFromInputStream
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|c
operator|.
name|withTags
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|expectedMessage
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Should fail when parse key value from an invalid bytes for case#"
operator|+
name|i
operator|+
literal|". "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Case#"
operator|+
name|i
operator|+
literal|" failed,"
operator|+
name|c
argument_list|,
name|c
operator|.
name|getExpectedMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

