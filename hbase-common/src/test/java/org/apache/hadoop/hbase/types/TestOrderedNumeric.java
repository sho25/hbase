begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PositionedByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SimplePositionedMutableByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestOrderedNumeric
block|{
specifier|private
specifier|static
specifier|final
name|Long
index|[]
name|LONG_VALUES
init|=
operator|new
name|Long
index|[]
block|{
literal|1L
block|,
literal|22L
block|,
literal|333L
block|,
literal|4444L
block|,
literal|55555L
block|,
literal|666666L
block|,
literal|7777777L
block|,
literal|88888888L
block|,
literal|999999999L
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Double
index|[]
name|DOUBLE_VALUES
init|=
operator|new
name|Double
index|[]
block|{
name|Double
operator|.
name|NaN
block|,
literal|1.1
block|,
literal|22.2
block|,
literal|333.3
block|,
literal|4444.4
block|,
literal|55555.5
block|,
literal|666666.6
block|,
literal|7777777.7
block|,
literal|88888888.8
block|,
literal|999999999.9
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigDecimal
index|[]
name|BIG_DECIMAL_VALUES
init|=
operator|new
name|BigDecimal
index|[]
block|{
operator|new
name|BigDecimal
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|22
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|333
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|4444
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|55555
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|666666
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|7777777
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|88888888
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|999999999
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
index|[]
name|BIG_INTEGER_VALUES
init|=
operator|new
name|BigInteger
index|[]
block|{
operator|new
name|BigInteger
argument_list|(
literal|"1"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"22"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"333"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"4444"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"55555"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"666666"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"7777777"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"88888888"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
literal|"999999999"
argument_list|)
block|}
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestOrderedNumeric
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testEncodedClassIsNumber
parameter_list|()
block|{
specifier|final
name|DataType
argument_list|<
name|Number
argument_list|>
name|type
init|=
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|ASCENDING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|type
operator|.
name|encodedClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedLength
parameter_list|()
block|{
specifier|final
name|PositionedByteRange
name|buffer
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|DataType
argument_list|<
name|Number
argument_list|>
name|type
range|:
operator|new
name|OrderedNumeric
index|[]
block|{
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|ASCENDING
argument_list|)
block|,
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|DESCENDING
argument_list|)
block|}
control|)
block|{
for|for
control|(
specifier|final
name|Number
name|val
range|:
name|DOUBLE_VALUES
control|)
block|{
name|buffer
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|type
operator|.
name|encode
argument_list|(
name|buffer
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"encodedLength does not match actual, "
operator|+
name|val
argument_list|,
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|,
name|type
operator|.
name|encodedLength
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedBigDecimalLength
parameter_list|()
block|{
specifier|final
name|PositionedByteRange
name|buffer
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|DataType
argument_list|<
name|Number
argument_list|>
name|type
range|:
operator|new
name|OrderedNumeric
index|[]
block|{
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|ASCENDING
argument_list|)
block|,
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|DESCENDING
argument_list|)
block|}
control|)
block|{
for|for
control|(
specifier|final
name|Number
name|val
range|:
name|BIG_DECIMAL_VALUES
control|)
block|{
name|buffer
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|type
operator|.
name|encode
argument_list|(
name|buffer
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"encodedLength does not match actual, "
operator|+
name|val
argument_list|,
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|,
name|type
operator|.
name|encodedLength
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedBigIntegerLength
parameter_list|()
block|{
specifier|final
name|PositionedByteRange
name|buffer
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|DataType
argument_list|<
name|Number
argument_list|>
name|type
range|:
operator|new
name|OrderedNumeric
index|[]
block|{
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|ASCENDING
argument_list|)
block|,
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|DESCENDING
argument_list|)
block|}
control|)
block|{
for|for
control|(
specifier|final
name|Number
name|val
range|:
name|BIG_INTEGER_VALUES
control|)
block|{
name|buffer
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|type
operator|.
name|encode
argument_list|(
name|buffer
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"encodedLength does not match actual, "
operator|+
name|val
argument_list|,
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|,
name|type
operator|.
name|encodedLength
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedNullLength
parameter_list|()
block|{
specifier|final
name|PositionedByteRange
name|buffer
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|DataType
argument_list|<
name|Number
argument_list|>
name|type
init|=
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|ASCENDING
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|type
operator|.
name|encode
argument_list|(
name|buffer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|type
operator|.
name|encode
argument_list|(
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"encodedLength does not match actual, "
operator|+
literal|null
argument_list|,
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|,
name|type
operator|.
name|encodedLength
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedLongLength
parameter_list|()
block|{
specifier|final
name|PositionedByteRange
name|buffer
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|OrderedNumeric
name|type
range|:
operator|new
name|OrderedNumeric
index|[]
block|{
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|ASCENDING
argument_list|)
block|,
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|DESCENDING
argument_list|)
block|}
control|)
block|{
for|for
control|(
specifier|final
name|Long
name|val
range|:
name|LONG_VALUES
control|)
block|{
name|buffer
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|type
operator|.
name|encodeLong
argument_list|(
name|buffer
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"encodedLength does not match actual, "
operator|+
name|val
argument_list|,
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|,
name|type
operator|.
name|encodedLength
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodedDoubleLength
parameter_list|()
block|{
specifier|final
name|PositionedByteRange
name|buffer
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|OrderedNumeric
name|type
range|:
operator|new
name|OrderedNumeric
index|[]
block|{
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|ASCENDING
argument_list|)
block|,
operator|new
name|OrderedNumeric
argument_list|(
name|Order
operator|.
name|DESCENDING
argument_list|)
block|}
control|)
block|{
for|for
control|(
specifier|final
name|Double
name|val
range|:
name|DOUBLE_VALUES
control|)
block|{
name|buffer
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|type
operator|.
name|encodeDouble
argument_list|(
name|buffer
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"encodedLength does not match actual, "
operator|+
name|val
argument_list|,
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|,
name|type
operator|.
name|encodedLength
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

