begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestByteBufferPool
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestByteBufferPool
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testOffheapBBPool
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|directByteBuffer
init|=
literal|true
decl_stmt|;
name|testBBPool
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
name|directByteBuffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnheapBBPool
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|directByteBuffer
init|=
literal|false
decl_stmt|;
name|testBBPool
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
name|directByteBuffer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testBBPool
parameter_list|(
name|int
name|maxPoolSize
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|boolean
name|directByteBuffer
parameter_list|)
block|{
name|ByteBufferPool
name|pool
init|=
operator|new
name|ByteBufferPool
argument_list|(
name|bufferSize
argument_list|,
name|maxPoolSize
argument_list|,
name|directByteBuffer
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxPoolSize
condition|;
name|i
operator|++
control|)
block|{
name|ByteBuffer
name|buffer
init|=
name|pool
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bufferSize
argument_list|,
name|buffer
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|directByteBuffer
argument_list|,
name|buffer
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bb
init|=
name|directByteBuffer
condition|?
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferSize
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
name|pool
operator|.
name|putbackBuffer
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|bb
operator|=
name|directByteBuffer
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|bufferSize
operator|+
literal|1
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferSize
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pool
operator|.
name|putbackBuffer
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

