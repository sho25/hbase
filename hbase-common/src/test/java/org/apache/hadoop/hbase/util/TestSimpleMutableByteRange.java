begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSimpleMutableByteRange
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSimpleMutableByteRange
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|SimpleMutableByteRange
operator|.
name|isEmpty
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ByteRange
name|r
init|=
operator|new
name|SimpleMutableByteRange
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|SimpleMutableByteRange
operator|.
name|isEmpty
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|set
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|r
operator|.
name|deepCopyToNewArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|compareTo
argument_list|(
operator|new
name|SimpleMutableByteRange
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|ByteRange
name|r
init|=
operator|new
name|SimpleMutableByteRange
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|2
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SimpleMutableByteRange
operator|.
name|isEmpty
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|r
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|//should be empty byte[], but could change this behavior
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|//cloning (deep copying)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|2
block|}
argument_list|,
name|r
operator|.
name|deepCopyToNewArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|r
operator|.
name|getBytes
argument_list|()
argument_list|,
name|r
operator|.
name|deepCopyToNewArray
argument_list|()
argument_list|)
expr_stmt|;
comment|//hash code
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|hashCode
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|r
operator|.
name|hashCode
argument_list|()
argument_list|,
name|r
operator|.
name|deepCopy
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//copying to arrays
name|byte
index|[]
name|destination
init|=
operator|new
name|byte
index|[]
block|{
operator|-
literal|59
block|}
decl_stmt|;
comment|//junk
name|r
operator|.
name|deepCopySubRangeTo
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|destination
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
comment|//set length
name|r
operator|.
name|setLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
name|r
operator|.
name|deepCopyToNewArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLength
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//verify we retained the 2nd byte, but dangerous in real code
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|,
name|r
operator|.
name|deepCopyToNewArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutandGetPrimitiveTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteRange
name|r
init|=
operator|new
name|SimpleMutableByteRange
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|i1
init|=
literal|18
decl_stmt|,
name|i2
init|=
literal|2
decl_stmt|;
name|short
name|s1
init|=
literal|0
decl_stmt|;
name|long
name|l1
init|=
literal|1234L
decl_stmt|,
name|l2
init|=
literal|0
decl_stmt|;
name|r
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
name|r
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
name|i2
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
name|r
operator|.
name|putShort
argument_list|(
name|offset
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_SHORT
expr_stmt|;
name|r
operator|.
name|putLong
argument_list|(
name|offset
argument_list|,
name|l1
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
expr_stmt|;
name|int
name|len
init|=
name|r
operator|.
name|putVLong
argument_list|(
name|offset
argument_list|,
name|l1
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
name|len
operator|=
name|r
operator|.
name|putVLong
argument_list|(
name|offset
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
name|len
operator|=
name|r
operator|.
name|putVLong
argument_list|(
name|offset
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
name|len
operator|=
name|r
operator|.
name|putVLong
argument_list|(
name|offset
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i1
argument_list|,
name|r
operator|.
name|getInt
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i2
argument_list|,
name|r
operator|.
name|getInt
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|r
operator|.
name|getShort
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_SHORT
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l1
argument_list|,
name|r
operator|.
name|getLong
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|Bytes
operator|.
name|SIZEOF_LONG
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l1
argument_list|,
name|r
operator|.
name|getVLong
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|SimpleByteRange
operator|.
name|getVLongSize
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l2
argument_list|,
name|r
operator|.
name|getVLong
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|SimpleByteRange
operator|.
name|getVLongSize
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|r
operator|.
name|getVLong
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|SimpleByteRange
operator|.
name|getVLongSize
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|r
operator|.
name|getVLong
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

