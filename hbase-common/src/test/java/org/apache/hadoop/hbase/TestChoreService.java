begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TestChoreService
operator|.
name|ScheduledChoreSamples
operator|.
name|CountingChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TestChoreService
operator|.
name|ScheduledChoreSamples
operator|.
name|DoNothingChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TestChoreService
operator|.
name|ScheduledChoreSamples
operator|.
name|FailInitialChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TestChoreService
operator|.
name|ScheduledChoreSamples
operator|.
name|SampleStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TestChoreService
operator|.
name|ScheduledChoreSamples
operator|.
name|SleepingChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TestChoreService
operator|.
name|ScheduledChoreSamples
operator|.
name|SlowChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestChoreService
block|{
comment|/**    * A few ScheduledChore samples that are useful for testing with ChoreService    */
specifier|public
specifier|static
class|class
name|ScheduledChoreSamples
block|{
comment|/**      * Straight forward stopper implementation that is used by default when one is not provided      */
specifier|public
specifier|static
class|class
name|SampleStopper
implements|implements
name|Stoppable
block|{
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
block|}
comment|/**      * Sleeps for longer than the scheduled period. This chore always misses its scheduled periodic      * executions      */
specifier|public
specifier|static
class|class
name|SlowChore
extends|extends
name|ScheduledChore
block|{
specifier|public
name|SlowChore
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|period
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|SampleStopper
argument_list|()
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SlowChore
parameter_list|(
name|String
name|name
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|int
name|period
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|stopper
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|initialChore
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getPeriod
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getPeriod
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
block|}
block|}
comment|/**      * Lightweight ScheduledChore used primarily to fill the scheduling queue in tests      */
specifier|public
specifier|static
class|class
name|DoNothingChore
extends|extends
name|ScheduledChore
block|{
specifier|public
name|DoNothingChore
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|period
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
operator|new
name|SampleStopper
argument_list|()
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DoNothingChore
parameter_list|(
name|String
name|name
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|int
name|period
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|stopper
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
comment|// DO NOTHING
block|}
block|}
specifier|public
specifier|static
class|class
name|SleepingChore
extends|extends
name|ScheduledChore
block|{
specifier|private
name|int
name|sleepTime
decl_stmt|;
specifier|public
name|SleepingChore
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|chorePeriod
parameter_list|,
name|int
name|sleepTime
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|SampleStopper
argument_list|()
argument_list|,
name|chorePeriod
argument_list|,
name|sleepTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SleepingChore
parameter_list|(
name|String
name|name
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|int
name|period
parameter_list|,
name|int
name|sleepTime
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|stopper
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleepTime
operator|=
name|sleepTime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|initialChore
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|CountingChore
extends|extends
name|ScheduledChore
block|{
specifier|private
name|int
name|countOfChoreCalls
decl_stmt|;
specifier|private
name|boolean
name|outputOnTicks
init|=
literal|false
decl_stmt|;
specifier|public
name|CountingChore
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|period
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|SampleStopper
argument_list|()
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CountingChore
parameter_list|(
name|String
name|name
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|int
name|period
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|stopper
argument_list|,
name|period
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CountingChore
parameter_list|(
name|String
name|name
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|int
name|period
parameter_list|,
specifier|final
name|boolean
name|outputOnTicks
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|stopper
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|this
operator|.
name|countOfChoreCalls
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|outputOnTicks
operator|=
name|outputOnTicks
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|initialChore
parameter_list|()
block|{
name|countOfChoreCalls
operator|++
expr_stmt|;
if|if
condition|(
name|outputOnTicks
condition|)
name|outputTickCount
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|countOfChoreCalls
operator|++
expr_stmt|;
if|if
condition|(
name|outputOnTicks
condition|)
name|outputTickCount
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|outputTickCount
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Chore: "
operator|+
name|getName
argument_list|()
operator|+
literal|". Count of chore calls: "
operator|+
name|countOfChoreCalls
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getCountOfChoreCalls
parameter_list|()
block|{
return|return
name|countOfChoreCalls
return|;
block|}
specifier|public
name|boolean
name|isOutputtingOnTicks
parameter_list|()
block|{
return|return
name|outputOnTicks
return|;
block|}
specifier|public
name|void
name|setOutputOnTicks
parameter_list|(
name|boolean
name|o
parameter_list|)
block|{
name|outputOnTicks
operator|=
name|o
expr_stmt|;
block|}
block|}
comment|/**      * A Chore that will try to execute the initial chore a few times before succeeding. Once the      * initial chore is complete the chore cancels itself      */
specifier|public
specifier|static
class|class
name|FailInitialChore
extends|extends
name|ScheduledChore
block|{
specifier|private
name|int
name|numberOfFailures
decl_stmt|;
specifier|private
name|int
name|failureThreshold
decl_stmt|;
comment|/**        * @param failThreshold Number of times the Chore fails when trying to execute initialChore        *          before succeeding.        */
specifier|public
name|FailInitialChore
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|period
parameter_list|,
name|int
name|failThreshold
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|SampleStopper
argument_list|()
argument_list|,
name|period
argument_list|,
name|failThreshold
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FailInitialChore
parameter_list|(
name|String
name|name
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|int
name|period
parameter_list|,
name|int
name|failThreshold
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|stopper
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|numberOfFailures
operator|=
literal|0
expr_stmt|;
name|failureThreshold
operator|=
name|failThreshold
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|initialChore
parameter_list|()
block|{
if|if
condition|(
name|numberOfFailures
operator|<
name|failureThreshold
condition|)
block|{
name|numberOfFailures
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|numberOfFailures
operator|==
name|failureThreshold
argument_list|)
expr_stmt|;
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testInitialChorePrecedence
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testInitialChorePrecedence"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|failureThreshold
init|=
literal|5
decl_stmt|;
try|try
block|{
name|ScheduledChore
name|chore
init|=
operator|new
name|FailInitialChore
argument_list|(
literal|"chore"
argument_list|,
name|period
argument_list|,
name|failureThreshold
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore
argument_list|)
expr_stmt|;
name|int
name|loopCount
init|=
literal|0
decl_stmt|;
name|boolean
name|brokeOutOfLoop
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|chore
operator|.
name|isInitialChoreComplete
argument_list|()
operator|&&
name|chore
operator|.
name|isScheduled
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|failureThreshold
operator|*
name|period
argument_list|)
expr_stmt|;
name|loopCount
operator|++
expr_stmt|;
if|if
condition|(
name|loopCount
operator|>
literal|3
condition|)
block|{
name|brokeOutOfLoop
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertFalse
argument_list|(
name|brokeOutOfLoop
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testCancelChore
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
name|ScheduledChore
name|chore1
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"chore1"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testCancelChore"
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|chore1
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testScheduledChoreConstruction
parameter_list|()
block|{
specifier|final
name|String
name|NAME
init|=
literal|"chore"
decl_stmt|;
specifier|final
name|int
name|PERIOD
init|=
literal|100
decl_stmt|;
specifier|final
name|long
name|VALID_DELAY
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|INVALID_DELAY
init|=
operator|-
literal|100
decl_stmt|;
specifier|final
name|TimeUnit
name|UNIT
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
decl_stmt|;
name|ScheduledChore
name|chore1
init|=
operator|new
name|ScheduledChore
argument_list|(
name|NAME
argument_list|,
operator|new
name|SampleStopper
argument_list|()
argument_list|,
name|PERIOD
argument_list|,
name|VALID_DELAY
argument_list|,
name|UNIT
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
comment|// DO NOTHING
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Name construction failed"
argument_list|,
name|chore1
operator|.
name|getName
argument_list|()
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Period construction failed"
argument_list|,
name|chore1
operator|.
name|getPeriod
argument_list|()
argument_list|,
name|PERIOD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Initial Delay construction failed"
argument_list|,
name|chore1
operator|.
name|getInitialDelay
argument_list|()
argument_list|,
name|VALID_DELAY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TimeUnit construction failed"
argument_list|,
name|chore1
operator|.
name|getTimeUnit
argument_list|()
argument_list|,
name|UNIT
argument_list|)
expr_stmt|;
name|ScheduledChore
name|invalidDelayChore
init|=
operator|new
name|ScheduledChore
argument_list|(
name|NAME
argument_list|,
operator|new
name|SampleStopper
argument_list|()
argument_list|,
name|PERIOD
argument_list|,
name|INVALID_DELAY
argument_list|,
name|UNIT
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
comment|// DO NOTHING
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Initial Delay should be set to 0 when invalid"
argument_list|,
literal|0
argument_list|,
name|invalidDelayChore
operator|.
name|getInitialDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testChoreServiceConstruction
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|corePoolSize
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|defaultCorePoolSize
init|=
name|ChoreService
operator|.
name|MIN_CORE_POOL_SIZE
decl_stmt|;
name|ChoreService
name|customInit
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testChoreServiceConstruction_custom"
argument_list|,
name|corePoolSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|corePoolSize
argument_list|,
name|customInit
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|customInit
argument_list|)
expr_stmt|;
block|}
name|ChoreService
name|defaultInit
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testChoreServiceConstruction_default"
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|defaultCorePoolSize
argument_list|,
name|defaultInit
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|defaultInit
argument_list|)
expr_stmt|;
block|}
name|ChoreService
name|invalidInit
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testChoreServiceConstruction_invalid"
argument_list|,
operator|-
literal|10
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|defaultCorePoolSize
argument_list|,
name|invalidInit
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|invalidInit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testFrequencyOfChores
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
comment|// Small delta that acts as time buffer (allowing chores to complete if running slowly)
specifier|final
name|int
name|delta
init|=
literal|5
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testFrequencyOfChores"
argument_list|)
decl_stmt|;
name|CountingChore
name|chore
init|=
operator|new
name|CountingChore
argument_list|(
literal|"countingChore"
argument_list|,
name|period
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
name|period
operator|+
name|delta
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
name|period
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|shutdownService
parameter_list|(
name|ChoreService
name|service
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|service
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testForceTrigger
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|delta
init|=
literal|5
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testForceTrigger"
argument_list|)
decl_stmt|;
specifier|final
name|CountingChore
name|chore
init|=
operator|new
name|CountingChore
argument_list|(
literal|"countingChore"
argument_list|,
name|period
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
name|period
operator|+
name|delta
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
comment|// Force five runs of the chore to occur, sleeping between triggers to ensure the
comment|// chore has time to run
name|chore
operator|.
name|triggerNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|chore
operator|.
name|triggerNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|chore
operator|.
name|triggerNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|chore
operator|.
name|triggerNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|chore
operator|.
name|triggerNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
argument_list|,
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
operator|==
literal|16
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
name|period
operator|+
name|delta
argument_list|)
expr_stmt|;
comment|// Be loosey-goosey. It used to be '26' but it was a big flakey relying on timing.
name|assertTrue
argument_list|(
literal|""
operator|+
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
argument_list|,
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
operator|>
literal|16
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testCorePoolIncrease
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|initialCorePoolSize
init|=
literal|3
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testCorePoolIncrease"
argument_list|,
name|initialCorePoolSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"Should have a core pool of size: "
operator|+
name|initialCorePoolSize
argument_list|,
name|initialCorePoolSize
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|slowChorePeriod
init|=
literal|100
decl_stmt|;
name|SlowChore
name|slowChore1
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore1"
argument_list|,
name|slowChorePeriod
argument_list|)
decl_stmt|;
name|SlowChore
name|slowChore2
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore2"
argument_list|,
name|slowChorePeriod
argument_list|)
decl_stmt|;
name|SlowChore
name|slowChore3
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore3"
argument_list|,
name|slowChorePeriod
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore1
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore2
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore3
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|slowChorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not create more pools than scheduled chores"
argument_list|,
literal|3
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|SlowChore
name|slowChore4
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore4"
argument_list|,
name|slowChorePeriod
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore4
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|slowChorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Chores are missing their start time. Should expand core pool size"
argument_list|,
literal|4
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|SlowChore
name|slowChore5
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore5"
argument_list|,
name|slowChorePeriod
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore5
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|slowChorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Chores are missing their start time. Should expand core pool size"
argument_list|,
literal|5
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testCorePoolDecrease
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|initialCorePoolSize
init|=
literal|3
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testCorePoolDecrease"
argument_list|,
name|initialCorePoolSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|chorePeriod
init|=
literal|100
decl_stmt|;
try|try
block|{
comment|// Slow chores always miss their start time and thus the core pool size should be at least as
comment|// large as the number of running slow chores
name|SlowChore
name|slowChore1
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore1"
argument_list|,
name|chorePeriod
argument_list|)
decl_stmt|;
name|SlowChore
name|slowChore2
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore2"
argument_list|,
name|chorePeriod
argument_list|)
decl_stmt|;
name|SlowChore
name|slowChore3
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore3"
argument_list|,
name|chorePeriod
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore1
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore2
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore3
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|chorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not create more pools than scheduled chores"
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|SlowChore
name|slowChore4
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore4"
argument_list|,
name|chorePeriod
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore4
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|chorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Chores are missing their start time. Should expand core pool size"
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|SlowChore
name|slowChore5
init|=
operator|new
name|SlowChore
argument_list|(
literal|"slowChore5"
argument_list|,
name|chorePeriod
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore5
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|chorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Chores are missing their start time. Should expand core pool size"
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Now we begin to cancel the chores that caused an increase in the core thread pool of the
comment|// ChoreService. These cancellations should cause a decrease in the core thread pool.
name|slowChore5
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|chorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|ChoreService
operator|.
name|MIN_CORE_POOL_SIZE
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|slowChore4
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|chorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|ChoreService
operator|.
name|MIN_CORE_POOL_SIZE
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|slowChore3
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|chorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|ChoreService
operator|.
name|MIN_CORE_POOL_SIZE
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|slowChore2
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|chorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|ChoreService
operator|.
name|MIN_CORE_POOL_SIZE
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|slowChore1
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|chorePeriod
operator|*
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|ChoreService
operator|.
name|MIN_CORE_POOL_SIZE
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
argument_list|,
name|service
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testNumberOfRunningChores
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testNumberOfRunningChores"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|sleepTime
init|=
literal|5
decl_stmt|;
try|try
block|{
name|DoNothingChore
name|dn1
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"dn1"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|DoNothingChore
name|dn2
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"dn2"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|DoNothingChore
name|dn3
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"dn3"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|DoNothingChore
name|dn4
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"dn4"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|DoNothingChore
name|dn5
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"dn5"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|dn1
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|dn2
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|dn3
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|dn4
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|dn5
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scheduled chore mismatch"
argument_list|,
literal|5
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
expr_stmt|;
name|dn1
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scheduled chore mismatch"
argument_list|,
literal|4
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
expr_stmt|;
name|dn2
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|dn3
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|dn4
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scheduled chore mismatch"
argument_list|,
literal|1
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
expr_stmt|;
name|dn5
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scheduled chore mismatch"
argument_list|,
literal|0
argument_list|,
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testNumberOfChoresMissingStartTime
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testNumberOfChoresMissingStartTime"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|sleepTime
init|=
literal|5
operator|*
name|period
decl_stmt|;
try|try
block|{
comment|// Slow chores sleep for a length of time LONGER than their period. Thus, SlowChores
comment|// ALWAYS miss their start time since their execution takes longer than their period
name|SlowChore
name|sc1
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc1"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc2
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc2"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc3
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc3"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc4
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc4"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc5
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc5"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc1
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc2
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc3
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc4
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc5
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|sc1
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|sc2
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|sc3
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|sc4
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|sc5
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|getNumberOfChoresMissingStartTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * ChoreServices should never have a core pool size that exceeds the number of chores that have    * been scheduled with the service. For example, if 4 ScheduledChores are scheduled with a    * ChoreService, the number of threads in the ChoreService's core pool should never exceed 4    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testMaximumChoreServiceThreads
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testMaximumChoreServiceThreads"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|sleepTime
init|=
literal|5
operator|*
name|period
decl_stmt|;
try|try
block|{
comment|// Slow chores sleep for a length of time LONGER than their period. Thus, SlowChores
comment|// ALWAYS miss their start time since their execution takes longer than their period.
comment|// Chores that miss their start time will trigger the onChoreMissedStartTime callback
comment|// in the ChoreService. This callback will try to increase the number of core pool
comment|// threads.
name|SlowChore
name|sc1
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc1"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc2
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc2"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc3
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc3"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc4
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc4"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc5
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc5"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc1
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc2
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc3
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc4
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc5
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|getCorePoolSize
argument_list|()
operator|<=
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
expr_stmt|;
name|SlowChore
name|sc6
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc6"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc7
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc7"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc8
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc8"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc9
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc9"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|SlowChore
name|sc10
init|=
operator|new
name|SlowChore
argument_list|(
literal|"sc10"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc6
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc7
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc8
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc9
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|sc10
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|getCorePoolSize
argument_list|()
operator|<=
name|service
operator|.
name|getNumberOfScheduledChores
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testChangingChoreServices
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|sleepTime
init|=
literal|10
decl_stmt|;
name|ChoreService
name|service1
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testChangingChoreServices_1"
argument_list|)
decl_stmt|;
name|ChoreService
name|service2
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testChangingChoreServices_2"
argument_list|)
decl_stmt|;
name|ScheduledChore
name|chore
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"sample"
argument_list|,
name|period
argument_list|)
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|chore
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service1
operator|.
name|isChoreScheduled
argument_list|(
name|chore
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service2
operator|.
name|isChoreScheduled
argument_list|(
name|chore
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|getChoreServicer
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|service1
operator|.
name|scheduleChore
argument_list|(
name|chore
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service1
operator|.
name|isChoreScheduled
argument_list|(
name|chore
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service2
operator|.
name|isChoreScheduled
argument_list|(
name|chore
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore
operator|.
name|getChoreServicer
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|service2
operator|.
name|scheduleChore
argument_list|(
name|chore
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service1
operator|.
name|isChoreScheduled
argument_list|(
name|chore
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service2
operator|.
name|isChoreScheduled
argument_list|(
name|chore
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore
operator|.
name|getChoreServicer
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|chore
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|chore
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service1
operator|.
name|isChoreScheduled
argument_list|(
name|chore
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service2
operator|.
name|isChoreScheduled
argument_list|(
name|chore
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|getChoreServicer
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service1
argument_list|)
expr_stmt|;
name|shutdownService
argument_list|(
name|service2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testTriggerNowFailsWhenNotScheduled
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
comment|// Small sleep time buffer to allow CountingChore to complete
specifier|final
name|int
name|sleep
init|=
literal|5
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testTriggerNowFailsWhenNotScheduled"
argument_list|)
decl_stmt|;
name|CountingChore
name|chore
init|=
operator|new
name|CountingChore
argument_list|(
literal|"dn"
argument_list|,
name|period
argument_list|)
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|chore
operator|.
name|triggerNow
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|triggerNow
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|triggerNow
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore
operator|.
name|triggerNow
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|chore
operator|.
name|getCountOfChoreCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testStopperForScheduledChores
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testStopperForScheduledChores"
argument_list|)
decl_stmt|;
name|Stoppable
name|stopperForGroup1
init|=
operator|new
name|SampleStopper
argument_list|()
decl_stmt|;
name|Stoppable
name|stopperForGroup2
init|=
operator|new
name|SampleStopper
argument_list|()
decl_stmt|;
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|delta
init|=
literal|10
decl_stmt|;
try|try
block|{
name|ScheduledChore
name|chore1_group1
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"c1g1"
argument_list|,
name|stopperForGroup1
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|chore2_group1
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"c2g1"
argument_list|,
name|stopperForGroup1
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|chore3_group1
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"c3g1"
argument_list|,
name|stopperForGroup1
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|chore1_group2
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"c1g2"
argument_list|,
name|stopperForGroup2
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|chore2_group2
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"c2g2"
argument_list|,
name|stopperForGroup2
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|chore3_group2
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"c3g2"
argument_list|,
name|stopperForGroup2
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore1_group1
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore2_group1
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore3_group1
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore1_group2
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore2_group2
argument_list|)
expr_stmt|;
name|service
operator|.
name|scheduleChore
argument_list|(
name|chore3_group2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delta
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
name|period
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore1_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore2_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore3_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore1_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore2_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore3_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|stopperForGroup1
operator|.
name|stop
argument_list|(
literal|"test stopping group 1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore1_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore2_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore3_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore1_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore2_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chore3_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|stopperForGroup2
operator|.
name|stop
argument_list|(
literal|"test stopping group 2"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore1_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore2_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore3_group1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore1_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore2_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|chore3_group2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testShutdownCancelsScheduledChores
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testShutdownCancelsScheduledChores"
argument_list|)
decl_stmt|;
name|ScheduledChore
name|successChore1
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"sc1"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|successChore2
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"sc2"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|successChore3
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"sc3"
argument_list|,
name|period
argument_list|)
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|successChore1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|successChore1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|successChore2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|successChore2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|successChore3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|successChore3
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|successChore1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|successChore2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|successChore3
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testShutdownWorksWhileChoresAreExecuting
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|sleep
init|=
literal|5
operator|*
name|period
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testShutdownWorksWhileChoresAreExecuting"
argument_list|)
decl_stmt|;
name|ScheduledChore
name|slowChore1
init|=
operator|new
name|SleepingChore
argument_list|(
literal|"sc1"
argument_list|,
name|period
argument_list|,
name|sleep
argument_list|)
decl_stmt|;
name|ScheduledChore
name|slowChore2
init|=
operator|new
name|SleepingChore
argument_list|(
literal|"sc2"
argument_list|,
name|period
argument_list|,
name|sleep
argument_list|)
decl_stmt|;
name|ScheduledChore
name|slowChore3
init|=
operator|new
name|SleepingChore
argument_list|(
literal|"sc3"
argument_list|,
name|period
argument_list|,
name|sleep
argument_list|)
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|slowChore3
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
operator|/
literal|2
argument_list|)
expr_stmt|;
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|slowChore1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|slowChore2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|slowChore3
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testShutdownRejectsNewSchedules
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|period
init|=
literal|100
decl_stmt|;
name|ChoreService
name|service
init|=
operator|new
name|ChoreService
argument_list|(
literal|"testShutdownRejectsNewSchedules"
argument_list|)
decl_stmt|;
name|ScheduledChore
name|successChore1
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"sc1"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|successChore2
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"sc2"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|successChore3
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"sc3"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|failChore1
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"fc1"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|failChore2
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"fc2"
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|ScheduledChore
name|failChore3
init|=
operator|new
name|DoNothingChore
argument_list|(
literal|"fc3"
argument_list|,
name|period
argument_list|)
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|successChore1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|successChore1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|successChore2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|successChore2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|successChore3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|successChore3
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|failChore1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|failChore1
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|failChore2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|failChore2
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|scheduleChore
argument_list|(
name|failChore3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|failChore3
operator|.
name|isScheduled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

