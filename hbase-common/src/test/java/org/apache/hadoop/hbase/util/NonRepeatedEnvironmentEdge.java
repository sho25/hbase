begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * An clock which will never return the same clock twice.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|NonRepeatedEnvironmentEdge
implements|implements
name|EnvironmentEdge
block|{
specifier|private
specifier|final
name|AtomicLong
name|prevTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|currentTime
parameter_list|()
block|{
for|for
control|(
name|long
name|current
init|;
condition|;
control|)
block|{
name|current
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|long
name|prev
init|=
name|prevTime
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|<=
name|prev
condition|)
block|{
name|current
operator|=
name|prev
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|prevTime
operator|.
name|compareAndSet
argument_list|(
name|prev
argument_list|,
name|current
argument_list|)
condition|)
block|{
return|return
name|current
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

