begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|types
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PositionedByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|SimplePositionedMutableByteRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStructNullExtension
block|{
comment|/**    * Verify null extension respects the type's isNullable field.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNonNullableNullExtension
parameter_list|()
block|{
name|Struct
name|s
init|=
operator|new
name|StructBuilder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RawStringTerminated
argument_list|(
literal|"|"
argument_list|)
argument_list|)
comment|// not nullable
operator|.
name|toStruct
argument_list|()
decl_stmt|;
name|PositionedByteRange
name|buf
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|s
operator|.
name|encode
argument_list|(
name|buf
argument_list|,
operator|new
name|Object
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Positive cases for null extension.    */
annotation|@
name|Test
specifier|public
name|void
name|testNullableNullExtension
parameter_list|()
block|{
comment|// the following field members are used because they're all nullable
name|StructBuilder
name|builder
init|=
operator|new
name|StructBuilder
argument_list|()
operator|.
name|add
argument_list|(
name|OrderedNumeric
operator|.
name|ASCENDING
argument_list|)
operator|.
name|add
argument_list|(
name|OrderedString
operator|.
name|ASCENDING
argument_list|)
decl_stmt|;
name|Struct
name|shorter
init|=
name|builder
operator|.
name|toStruct
argument_list|()
decl_stmt|;
name|Struct
name|longer
init|=
name|builder
comment|// intentionally include a wrapped instance to test wrapper behavior.
operator|.
name|add
argument_list|(
operator|new
name|TerminatedWrapper
argument_list|<>
argument_list|(
name|OrderedString
operator|.
name|ASCENDING
argument_list|,
literal|"/"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|OrderedNumeric
operator|.
name|ASCENDING
argument_list|)
operator|.
name|toStruct
argument_list|()
decl_stmt|;
name|PositionedByteRange
name|buf1
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|Object
index|[]
name|val1
init|=
operator|new
name|Object
index|[]
block|{
name|BigDecimal
operator|.
name|ONE
block|,
literal|"foo"
block|}
decl_stmt|;
comment|// => 2 bytes + 5 bytes
name|assertEquals
argument_list|(
literal|"Encoding shorter value wrote a surprising number of bytes."
argument_list|,
name|buf1
operator|.
name|getLength
argument_list|()
argument_list|,
name|shorter
operator|.
name|encode
argument_list|(
name|buf1
argument_list|,
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|shortLen
init|=
name|buf1
operator|.
name|getLength
argument_list|()
decl_stmt|;
comment|// test iterator
name|buf1
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|StructIterator
name|it
init|=
name|longer
operator|.
name|iterator
argument_list|(
name|buf1
argument_list|)
decl_stmt|;
name|it
operator|.
name|skip
argument_list|()
expr_stmt|;
name|it
operator|.
name|skip
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Position should be at end. Broken test."
argument_list|,
name|buf1
operator|.
name|getLength
argument_list|()
argument_list|,
name|buf1
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to skip null element with extended struct."
argument_list|,
literal|0
argument_list|,
name|it
operator|.
name|skip
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to skip null element with extended struct."
argument_list|,
literal|0
argument_list|,
name|it
operator|.
name|skip
argument_list|()
argument_list|)
expr_stmt|;
name|buf1
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|it
operator|=
name|longer
operator|.
name|iterator
argument_list|(
name|buf1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Position should be at end. Broken test."
argument_list|,
name|buf1
operator|.
name|getLength
argument_list|()
argument_list|,
name|buf1
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Failed to skip null element with extended struct."
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Failed to skip null element with extended struct."
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// test Struct
name|buf1
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Simple struct decoding is broken."
argument_list|,
name|val1
argument_list|,
name|shorter
operator|.
name|decode
argument_list|(
name|buf1
argument_list|)
argument_list|)
expr_stmt|;
name|buf1
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Decoding short value with extended struct should append null elements."
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|val1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|longer
operator|.
name|decode
argument_list|(
name|buf1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test omission of trailing members
name|PositionedByteRange
name|buf2
init|=
operator|new
name|SimplePositionedMutableByteRange
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|buf1
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Encoding a short value with extended struct should have same result as using short struct."
argument_list|,
name|shortLen
argument_list|,
name|longer
operator|.
name|encode
argument_list|(
name|buf2
argument_list|,
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Encoding a short value with extended struct should have same result as using short struct"
argument_list|,
name|buf1
operator|.
name|getBytes
argument_list|()
argument_list|,
name|buf2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// test null trailing members
comment|// all fields are nullable, so nothing should hit the buffer.
name|val1
operator|=
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
expr_stmt|;
comment|// => 0 bytes
name|buf1
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buf2
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Encoding null-truncated value wrote a surprising number of bytes."
argument_list|,
name|buf1
operator|.
name|getLength
argument_list|()
argument_list|,
name|longer
operator|.
name|encode
argument_list|(
name|buf1
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Encoding null-extended value wrote a surprising number of bytes."
argument_list|,
name|buf1
operator|.
name|getLength
argument_list|()
argument_list|,
name|longer
operator|.
name|encode
argument_list|(
name|buf1
argument_list|,
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Encoded unexpected result."
argument_list|,
name|buf1
operator|.
name|getBytes
argument_list|()
argument_list|,
name|buf2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Decoded unexpected result."
argument_list|,
name|val1
argument_list|,
name|longer
operator|.
name|decode
argument_list|(
name|buf2
argument_list|)
argument_list|)
expr_stmt|;
comment|// all fields are nullable, so only 1 should hit the buffer.
name|Object
index|[]
name|val2
init|=
operator|new
name|Object
index|[]
block|{
name|BigDecimal
operator|.
name|ONE
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
comment|// => 2 bytes
name|buf1
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|buf2
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Encoding null-truncated value wrote a surprising number of bytes."
argument_list|,
name|buf1
operator|.
name|getLength
argument_list|()
argument_list|,
name|longer
operator|.
name|encode
argument_list|(
name|buf1
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|val2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Encoding null-extended value wrote a surprising number of bytes."
argument_list|,
name|buf2
operator|.
name|getLength
argument_list|()
argument_list|,
name|longer
operator|.
name|encode
argument_list|(
name|buf2
argument_list|,
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Encoded unexpected result."
argument_list|,
name|buf1
operator|.
name|getBytes
argument_list|()
argument_list|,
name|buf2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|buf2
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Decoded unexpected result."
argument_list|,
name|val2
argument_list|,
name|longer
operator|.
name|decode
argument_list|(
name|buf2
argument_list|)
argument_list|)
expr_stmt|;
comment|// all fields are nullable, so only 1, null, "foo" should hit the buffer.
comment|// => 2 bytes + 1 byte + 6 bytes
name|Object
index|[]
name|val3
init|=
operator|new
name|Object
index|[]
block|{
name|BigDecimal
operator|.
name|ONE
block|,
literal|null
block|,
literal|"foo"
block|,
literal|null
block|}
decl_stmt|;
name|buf1
operator|.
name|set
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|buf2
operator|.
name|set
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Encoding null-truncated value wrote a surprising number of bytes."
argument_list|,
name|buf1
operator|.
name|getLength
argument_list|()
argument_list|,
name|longer
operator|.
name|encode
argument_list|(
name|buf1
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|val3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Encoding null-extended value wrote a surprising number of bytes."
argument_list|,
name|buf2
operator|.
name|getLength
argument_list|()
argument_list|,
name|longer
operator|.
name|encode
argument_list|(
name|buf2
argument_list|,
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Encoded unexpected result."
argument_list|,
name|buf1
operator|.
name|getBytes
argument_list|()
argument_list|,
name|buf2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|buf2
operator|.
name|setPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Decoded unexpected result."
argument_list|,
name|val3
argument_list|,
name|longer
operator|.
name|decode
argument_list|(
name|buf2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

