begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test {@link CommonFSUtils}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCommonFSUtils
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCommonFSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCommonFSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|conf
operator|=
name|htu
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test path compare and prefix checking.    */
annotation|@
name|Test
specifier|public
name|void
name|testMatchingTail
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootdir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|rootdir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootdir
operator|.
name|depth
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Path
name|fullPath
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|partPath
argument_list|)
decl_stmt|;
name|Path
name|fullyQualifiedPath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|CommonFSUtils
operator|.
name|isMatchingTail
argument_list|(
name|fullPath
argument_list|,
name|partPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CommonFSUtils
operator|.
name|isMatchingTail
argument_list|(
name|fullPath
argument_list|,
name|partPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CommonFSUtils
operator|.
name|isStartingWithPath
argument_list|(
name|rootdir
argument_list|,
name|fullPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CommonFSUtils
operator|.
name|isStartingWithPath
argument_list|(
name|fullyQualifiedPath
argument_list|,
name|fullPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CommonFSUtils
operator|.
name|isStartingWithPath
argument_list|(
name|rootdir
argument_list|,
name|partPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CommonFSUtils
operator|.
name|isMatchingTail
argument_list|(
name|fullyQualifiedPath
argument_list|,
name|partPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CommonFSUtils
operator|.
name|isMatchingTail
argument_list|(
name|fullyQualifiedPath
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CommonFSUtils
operator|.
name|isMatchingTail
argument_list|(
name|fullyQualifiedPath
argument_list|,
name|fullPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CommonFSUtils
operator|.
name|isMatchingTail
argument_list|(
name|fullyQualifiedPath
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
name|fullPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CommonFSUtils
operator|.
name|isStartingWithPath
argument_list|(
name|rootdir
argument_list|,
name|fullyQualifiedPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CommonFSUtils
operator|.
name|isMatchingTail
argument_list|(
name|fullPath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CommonFSUtils
operator|.
name|isMatchingTail
argument_list|(
operator|new
name|Path
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|WriteDataToHDFS
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|dataSize
parameter_list|)
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataSize
index|]
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetWALRootDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"file:///hbase/root"
argument_list|)
decl_stmt|;
name|CommonFSUtils
operator|.
name|setWALRootDir
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|CommonFSUtils
operator|.
name|HBASE_WAL_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWALRootDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"file:///hbase/root"
argument_list|)
decl_stmt|;
name|Path
name|walRoot
init|=
operator|new
name|Path
argument_list|(
literal|"file:///hbase/logroot"
argument_list|)
decl_stmt|;
name|CommonFSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|CommonFSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
argument_list|,
name|CommonFSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|CommonFSUtils
operator|.
name|setWALRootDir
argument_list|(
name|conf
argument_list|,
name|walRoot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|walRoot
argument_list|,
name|CommonFSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetWALRootDirIllegalWALDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"file:///hbase/root"
argument_list|)
decl_stmt|;
name|Path
name|invalidWALDir
init|=
operator|new
name|Path
argument_list|(
literal|"file:///hbase/root/logroot"
argument_list|)
decl_stmt|;
name|CommonFSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|CommonFSUtils
operator|.
name|setWALRootDir
argument_list|(
name|conf
argument_list|,
name|invalidWALDir
argument_list|)
expr_stmt|;
name|CommonFSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveWALRootPath
parameter_list|()
throws|throws
name|Exception
block|{
name|CommonFSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file:///user/hbase"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|CommonFSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"test/testfile"
argument_list|)
decl_stmt|;
name|Path
name|tmpFile
init|=
operator|new
name|Path
argument_list|(
literal|"file:///test/testfile"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test/testfile"
argument_list|,
name|CommonFSUtils
operator|.
name|removeWALRootPath
argument_list|(
name|testFile
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tmpFile
operator|.
name|toString
argument_list|()
argument_list|,
name|CommonFSUtils
operator|.
name|removeWALRootPath
argument_list|(
name|tmpFile
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|CommonFSUtils
operator|.
name|setWALRootDir
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file:///user/hbaseLogDir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testFile
operator|.
name|toString
argument_list|()
argument_list|,
name|CommonFSUtils
operator|.
name|removeWALRootPath
argument_list|(
name|testFile
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|logFile
init|=
operator|new
name|Path
argument_list|(
name|CommonFSUtils
operator|.
name|getWALRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"test/testlog"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test/testlog"
argument_list|,
name|CommonFSUtils
operator|.
name|removeWALRootPath
argument_list|(
name|logFile
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|streamCapabilitiesDoesNotAllowNullStream
parameter_list|()
block|{
name|CommonFSUtils
operator|.
name|hasCapability
argument_list|(
literal|null
argument_list|,
literal|"hopefully any string"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|boolean
name|STREAM_CAPABILITIES_IS_PRESENT
decl_stmt|;
static|static
block|{
name|boolean
name|tmp
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.fs.StreamCapabilities"
argument_list|)
expr_stmt|;
name|tmp
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test thought StreamCapabilities class was present."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test didn't think StreamCapabilities class was present."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|STREAM_CAPABILITIES_IS_PRESENT
operator|=
name|tmp
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkStreamCapabilitiesOnKnownNoopStream
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stream
init|=
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"We expect our dummy FSDOS to claim capabilities iff the StreamCapabilities "
operator|+
literal|"class is not defined."
argument_list|,
name|STREAM_CAPABILITIES_IS_PRESENT
argument_list|,
name|CommonFSUtils
operator|.
name|hasCapability
argument_list|(
name|stream
argument_list|,
literal|"hsync"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"We expect our dummy FSDOS to claim capabilities iff the StreamCapabilities "
operator|+
literal|"class is not defined."
argument_list|,
name|STREAM_CAPABILITIES_IS_PRESENT
argument_list|,
name|CommonFSUtils
operator|.
name|hasCapability
argument_list|(
name|stream
argument_list|,
literal|"hflush"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"We expect our dummy FSDOS to claim capabilities iff the StreamCapabilities "
operator|+
literal|"class is not defined."
argument_list|,
name|STREAM_CAPABILITIES_IS_PRESENT
argument_list|,
name|CommonFSUtils
operator|.
name|hasCapability
argument_list|(
name|stream
argument_list|,
literal|"a capability that hopefully no filesystem will "
operator|+
literal|"implement."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

