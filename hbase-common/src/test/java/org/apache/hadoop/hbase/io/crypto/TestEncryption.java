begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestEncryption
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestEncryption
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSmallBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|byte
index|[]
name|iv
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|iv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|size
range|:
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|8
block|,
literal|16
block|,
literal|32
block|,
literal|64
block|,
literal|128
block|,
literal|256
block|,
literal|512
block|}
control|)
block|{
name|checkTransformSymmetry
argument_list|(
name|key
argument_list|,
name|iv
argument_list|,
name|getRandomBlock
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLargeBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|byte
index|[]
name|iv
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|iv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|size
range|:
operator|new
name|int
index|[]
block|{
literal|256
operator|*
literal|1024
block|,
literal|512
operator|*
literal|1024
block|,
literal|1024
operator|*
literal|1024
block|}
control|)
block|{
name|checkTransformSymmetry
argument_list|(
name|key
argument_list|,
name|iv
argument_list|,
name|getRandomBlock
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOddSizedBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|byte
index|[]
name|iv
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|iv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|size
range|:
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|7
block|,
literal|11
block|,
literal|23
block|,
literal|47
block|,
literal|79
block|,
literal|119
block|,
literal|175
block|}
control|)
block|{
name|checkTransformSymmetry
argument_list|(
name|key
argument_list|,
name|iv
argument_list|,
name|getRandomBlock
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypicalHFileBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|byte
index|[]
name|iv
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|iv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|size
range|:
operator|new
name|int
index|[]
block|{
literal|4
operator|*
literal|1024
block|,
literal|8
operator|*
literal|1024
block|,
literal|64
operator|*
literal|1024
block|,
literal|128
operator|*
literal|1024
block|}
control|)
block|{
name|checkTransformSymmetry
argument_list|(
name|key
argument_list|,
name|iv
argument_list|,
name|getRandomBlock
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkTransformSymmetry
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|,
name|byte
index|[]
name|plaintext
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"checkTransformSymmetry: AES, plaintext length = "
operator|+
name|plaintext
operator|.
name|length
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|Cipher
name|aes
init|=
name|Encryption
operator|.
name|getCipher
argument_list|(
name|conf
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|Encryptor
name|e
init|=
name|aes
operator|.
name|getEncryptor
argument_list|()
decl_stmt|;
name|e
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|e
operator|.
name|setIv
argument_list|(
name|iv
argument_list|)
expr_stmt|;
name|e
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|encOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Encryption
operator|.
name|encrypt
argument_list|(
name|encOut
argument_list|,
name|plaintext
argument_list|,
literal|0
argument_list|,
name|plaintext
operator|.
name|length
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|byte
index|[]
name|encrypted
init|=
name|encOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Decryptor
name|d
init|=
name|aes
operator|.
name|getDecryptor
argument_list|()
decl_stmt|;
name|d
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|d
operator|.
name|setIv
argument_list|(
name|iv
argument_list|)
expr_stmt|;
name|d
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|encIn
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|encrypted
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|decOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Encryption
operator|.
name|decrypt
argument_list|(
name|decOut
argument_list|,
name|encIn
argument_list|,
name|plaintext
operator|.
name|length
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
name|decOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Decrypted result has different length than plaintext"
argument_list|,
name|result
operator|.
name|length
argument_list|,
name|plaintext
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Transformation was not symmetric"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|result
argument_list|,
name|plaintext
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|getRandomBlock
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|Bytes
operator|.
name|random
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

