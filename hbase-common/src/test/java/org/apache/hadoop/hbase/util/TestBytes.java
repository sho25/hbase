begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBytes
extends|extends
name|TestCase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBytes
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|void
name|setUnsafe
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|field
init|=
name|Bytes
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"UNSAFE_UNALIGNED"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|oldModifiers
init|=
name|field
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|field
argument_list|,
name|oldModifiers
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
try|try
block|{
name|field
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|modifiersField
operator|.
name|setInt
argument_list|(
name|field
argument_list|,
name|oldModifiers
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|UNSAFE_UNALIGNED
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testShort
parameter_list|()
throws|throws
name|Exception
block|{
name|testShort
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testShortUnsafe
parameter_list|()
throws|throws
name|Exception
block|{
name|testShort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|testShort
parameter_list|(
name|boolean
name|unsafe
parameter_list|)
throws|throws
name|Exception
block|{
name|setUnsafe
argument_list|(
name|unsafe
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|short
name|n
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|100
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|300
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toShort
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|setUnsafe
argument_list|(
name|UnsafeAvailChecker
operator|.
name|unaligned
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testNullHashCode
parameter_list|()
block|{
name|byte
index|[]
name|b
init|=
literal|null
decl_stmt|;
name|Exception
name|ee
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Bytes
operator|.
name|hashCode
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ee
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|ee
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|a
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|byte
index|[]
name|b
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|c
init|=
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
decl_stmt|;
name|byte
index|[]
name|d
init|=
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|result1
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result2
init|=
name|Bytes
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|a
block|,
name|b
block|,
name|c
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|result1
argument_list|,
name|result2
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result4
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|result1
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result5
init|=
name|Bytes
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|result1
block|,
name|d
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|result1
argument_list|,
name|result2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|lowest
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|middle
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|highest
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|parts
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|lowest
argument_list|,
name|highest
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|middle
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now divide into three parts.  Change highest so split is even.
name|highest
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
expr_stmt|;
name|parts
operator|=
name|Bytes
operator|.
name|split
argument_list|(
name|lowest
argument_list|,
name|highest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Assert that 3rd part is 'CCC'.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|,
name|middle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSplit2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// More split tests.
name|byte
index|[]
name|lowest
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"http://A"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|highest
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"http://z"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|middle
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"http://]"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|parts
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|lowest
argument_list|,
name|highest
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|middle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSplit3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test invalid split cases
name|byte
index|[]
name|low
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|high
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|3
block|}
decl_stmt|;
comment|// If swapped, should throw IAE
try|try
block|{
name|Bytes
operator|.
name|split
argument_list|(
name|high
argument_list|,
name|low
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should not be able to split if low> high"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// Correct
block|}
comment|// Single split should work
name|byte
index|[]
index|[]
name|parts
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|low
argument_list|,
name|high
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|i
operator|+
literal|" -> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Returned split should have 3 parts but has "
operator|+
name|parts
operator|.
name|length
argument_list|,
name|parts
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// If split more than once, use additional byte to split
name|parts
operator|=
name|Bytes
operator|.
name|split
argument_list|(
name|low
argument_list|,
name|high
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Split with an additional byte"
argument_list|,
name|parts
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parts
operator|.
name|length
argument_list|,
name|low
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Split 0 times should throw IAE
try|try
block|{
name|parts
operator|=
name|Bytes
operator|.
name|split
argument_list|(
name|low
argument_list|,
name|high
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should not be able to split 0 times"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// Correct
block|}
block|}
specifier|public
name|void
name|testToInt
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|ints
init|=
block|{
operator|-
literal|1
block|,
literal|123
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b2
init|=
name|bytesWithOffset
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|b2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|b2
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToLong
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|longs
init|=
block|{
operator|-
literal|1l
block|,
literal|123l
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b2
init|=
name|bytesWithOffset
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|b2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|b2
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|float
index|[]
name|floats
init|=
block|{
operator|-
literal|1f
block|,
literal|123.123f
block|,
name|Float
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|floats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|floats
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floats
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toFloat
argument_list|(
name|b
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b2
init|=
name|bytesWithOffset
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|floats
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toFloat
argument_list|(
name|b2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|double
index|[]
name|doubles
init|=
block|{
name|Double
operator|.
name|MIN_VALUE
block|,
name|Double
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|doubles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubles
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toDouble
argument_list|(
name|b
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b2
init|=
name|bytesWithOffset
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|doubles
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toDouble
argument_list|(
name|b2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToBigDecimal
parameter_list|()
throws|throws
name|Exception
block|{
name|BigDecimal
index|[]
name|decimals
init|=
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"-1"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"123.123"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"123123123123"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decimals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|decimals
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|decimals
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toBigDecimal
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b2
init|=
name|bytesWithOffset
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|decimals
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|toBigDecimal
argument_list|(
name|b2
argument_list|,
literal|1
argument_list|,
name|b
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|bytesWithOffset
parameter_list|(
name|byte
index|[]
name|src
parameter_list|)
block|{
comment|// add one byte in front to test offset
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|src
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xAA
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|1
argument_list|,
name|src
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|testToBytesForByteBuffer
parameter_list|()
block|{
name|byte
index|[]
name|array
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|ByteBuffer
name|target
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|target
operator|.
name|position
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|target
operator|.
name|limit
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|target
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|target
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|target2
init|=
name|target
operator|.
name|slice
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|target2
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|target2
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|target2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected2
init|=
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected2
argument_list|,
name|actual2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|target2
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|target2
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetBytesForByteBuffer
parameter_list|()
block|{
name|byte
index|[]
name|array
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|ByteBuffer
name|target
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|target
operator|.
name|position
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|target
operator|.
name|limit
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|Bytes
operator|.
name|getBytes
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected
init|=
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|target
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|target
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadAsVLong
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|longs
init|=
block|{
operator|-
literal|1l
block|,
literal|123l
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|output
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|output
argument_list|,
name|longs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|long_bytes_no_offset
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|readAsVLong
argument_list|(
name|long_bytes_no_offset
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|long_bytes_with_offset
init|=
name|bytesWithOffset
argument_list|(
name|long_bytes_no_offset
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longs
index|[
name|i
index|]
argument_list|,
name|Bytes
operator|.
name|readAsVLong
argument_list|(
name|long_bytes_with_offset
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToStringBinaryForBytes
parameter_list|()
block|{
name|byte
index|[]
name|array
init|=
block|{
literal|'0'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'z'
block|,
literal|'A'
block|,
literal|'Z'
block|,
literal|'@'
block|,
literal|1
block|}
decl_stmt|;
name|String
name|actual
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"09azAZ@\\x01"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|String
name|actual2
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|array
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
name|expected2
init|=
literal|"azA"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected2
argument_list|,
name|actual2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToStringBinaryForArrayBasedByteBuffer
parameter_list|()
block|{
name|byte
index|[]
name|array
init|=
block|{
literal|'0'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'z'
block|,
literal|'A'
block|,
literal|'Z'
block|,
literal|'@'
block|,
literal|1
block|}
decl_stmt|;
name|ByteBuffer
name|target
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|String
name|actual
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"09azAZ@\\x01"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToStringBinaryForReadOnlyByteBuffer
parameter_list|()
block|{
name|byte
index|[]
name|array
init|=
block|{
literal|'0'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'z'
block|,
literal|'A'
block|,
literal|'Z'
block|,
literal|'@'
block|,
literal|1
block|}
decl_stmt|;
name|ByteBuffer
name|target
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|array
argument_list|)
operator|.
name|asReadOnlyBuffer
argument_list|()
decl_stmt|;
name|String
name|actual
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"09azAZ@\\x01"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBinarySearch
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|arr
init|=
block|{
block|{
literal|1
block|}
block|,
block|{
literal|3
block|}
block|,
block|{
literal|5
block|}
block|,
block|{
literal|7
block|}
block|,
block|{
literal|9
block|}
block|,
block|{
literal|11
block|}
block|,
block|{
literal|13
block|}
block|,
block|{
literal|15
block|}
block|,     }
decl_stmt|;
name|byte
index|[]
name|key1
init|=
block|{
literal|3
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|key2
init|=
block|{
literal|4
block|,
literal|9
block|}
decl_stmt|;
name|byte
index|[]
name|key2_2
init|=
block|{
literal|4
block|}
decl_stmt|;
name|byte
index|[]
name|key3
init|=
block|{
literal|5
block|,
literal|11
block|}
decl_stmt|;
name|byte
index|[]
name|key4
init|=
block|{
literal|0
block|}
decl_stmt|;
name|byte
index|[]
name|key5
init|=
block|{
literal|2
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
operator|(
literal|2
operator|+
literal|1
operator|)
argument_list|,
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key2_2
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
operator|(
literal|2
operator|+
literal|1
operator|)
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key4
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|key5
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Search for values to the left and to the right of each item in the array.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
operator|-
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|arr
index|[
name|i
index|]
index|[
literal|0
index|]
operator|-
literal|1
argument_list|)
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
operator|(
name|i
operator|+
literal|2
operator|)
argument_list|,
name|Bytes
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|arr
index|[
name|i
index|]
index|[
literal|0
index|]
operator|+
literal|1
argument_list|)
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToStringBytesBinaryReversible
parameter_list|()
block|{
comment|//  let's run test with 1000 randomly generated byte arrays
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|randomBytes
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|randomBytes
argument_list|)
expr_stmt|;
name|verifyReversibleForBytes
argument_list|(
name|randomBytes
argument_list|)
expr_stmt|;
block|}
comment|//  some specific cases
name|verifyReversibleForBytes
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|verifyReversibleForBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'\\'
block|,
literal|'x'
block|,
literal|'A'
block|,
literal|'D'
block|}
argument_list|)
expr_stmt|;
name|verifyReversibleForBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'\\'
block|,
literal|'x'
block|,
literal|'A'
block|,
literal|'D'
block|,
literal|'\\'
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyReversibleForBytes
parameter_list|(
name|byte
index|[]
name|originalBytes
parameter_list|)
block|{
name|String
name|convertedString
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|originalBytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|convertedBytes
init|=
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
name|convertedString
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|originalBytes
argument_list|,
name|convertedBytes
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Not reversible for\nbyte[]: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|originalBytes
argument_list|)
operator|+
literal|",\nStringBinary: "
operator|+
name|convertedString
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testStartsWith
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|startsWith
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|startsWith
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|startsWith
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|startsWith
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"helloworld"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|startsWith
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIncrementBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|12
argument_list|,
literal|123435445
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|124634654
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10005460
argument_list|,
literal|5005645
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|1005435000
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
literal|10
argument_list|,
operator|-
literal|43657655
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|26
argument_list|,
literal|5034520
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|10657200
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|12343250
argument_list|,
literal|45376475
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|12343250
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|12
argument_list|,
operator|-
literal|34565445
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkTestIncrementBytes
argument_list|(
operator|-
literal|1546543452
argument_list|,
operator|-
literal|34565445
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|checkTestIncrementBytes
parameter_list|(
name|long
name|val
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testValue
init|=
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
decl_stmt|;
if|if
condition|(
name|value
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|testValue
operator|=
operator|new
name|byte
index|[
name|Bytes
operator|.
name|SIZEOF_LONG
index|]
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|testValue
argument_list|,
name|testValue
operator|.
name|length
operator|-
name|value
operator|.
name|length
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|incrementResult
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|Bytes
operator|.
name|incrementBytes
argument_list|(
name|value
argument_list|,
name|amount
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|testValue
argument_list|)
operator|+
name|amount
operator|)
operator|==
name|incrementResult
return|;
block|}
specifier|public
name|void
name|testFixedSizeString
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|Bytes
operator|.
name|writeStringFixedSize
argument_list|(
name|dos
argument_list|,
literal|"Hello"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeStringFixedSize
argument_list|(
name|dos
argument_list|,
literal|"World"
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeStringFixedSize
argument_list|(
name|dos
argument_list|,
literal|""
argument_list|,
literal|9
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Use a long dash which is three bytes in UTF-8. If encoding happens
comment|// using ISO-8859-1, this will fail.
name|Bytes
operator|.
name|writeStringFixedSize
argument_list|(
name|dos
argument_list|,
literal|"Too\u2013Long"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Trying to write 10 bytes (Too\\xE2\\x80\\x93Long) into a field of "
operator|+
literal|"length 9"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|Bytes
operator|.
name|readStringFixedSize
argument_list|(
name|dis
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"World"
argument_list|,
name|Bytes
operator|.
name|readStringFixedSize
argument_list|(
name|dis
argument_list|,
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Bytes
operator|.
name|readStringFixedSize
argument_list|(
name|dis
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|copy
init|=
name|Bytes
operator|.
name|copy
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bytes
operator|==
name|copy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|bytes
argument_list|,
name|copy
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToBytesBinaryTrailingBackslashes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
literal|"abc\\x00\\x01\\"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StringIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Illegal string access: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToStringBinary_toBytesBinary_Reversable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bytes
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2.17
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2.17
argument_list|,
name|Bytes
operator|.
name|toDouble
argument_list|(
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnsignedBinarySearch
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|5
block|,
literal|123
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|100
block|,
operator|-
literal|1
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|unsignedBinarySearch
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|Bytes
operator|.
name|unsignedBinarySearch
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|Bytes
operator|.
name|unsignedBinarySearch
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Bytes
operator|.
name|unsignedBinarySearch
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Bytes
operator|.
name|unsignedBinarySearch
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
operator|-
literal|1
argument_list|,
name|Bytes
operator|.
name|unsignedBinarySearch
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|6
operator|-
literal|1
argument_list|,
name|Bytes
operator|.
name|unsignedBinarySearch
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnsignedIncrement
parameter_list|()
block|{
name|byte
index|[]
name|a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|a2
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|Bytes
operator|.
name|unsignedCopyAndIncrement
argument_list|(
name|a
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|a2
operator|==
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actual
init|=
name|Bytes
operator|.
name|unsignedCopyAndIncrement
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|b
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|byte
index|[]
name|c
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|255
argument_list|)
decl_stmt|;
comment|//should wrap to the next significant byte
name|int
name|c2
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|Bytes
operator|.
name|unsignedCopyAndIncrement
argument_list|(
name|c
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c2
operator|==
literal|256
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIndexOf
parameter_list|()
block|{
name|byte
index|[]
name|array
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|indexOf
argument_list|(
name|array
argument_list|,
operator|(
name|byte
operator|)
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|Bytes
operator|.
name|indexOf
argument_list|(
name|array
argument_list|,
operator|(
name|byte
operator|)
literal|'o'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Bytes
operator|.
name|indexOf
argument_list|(
name|array
argument_list|,
operator|(
name|byte
operator|)
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|indexOf
argument_list|(
name|array
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hel"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|indexOf
argument_list|(
name|array
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ll"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|Bytes
operator|.
name|indexOf
argument_list|(
name|array
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hll"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|byte
index|[]
name|array
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|array
argument_list|,
operator|(
name|byte
operator|)
literal|'e'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|array
argument_list|,
operator|(
name|byte
operator|)
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|array
argument_list|,
operator|(
name|byte
operator|)
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|array
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"world"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|array
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|array
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"owo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testZero
parameter_list|()
block|{
name|byte
index|[]
name|array
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|Bytes
operator|.
name|zero
argument_list|(
name|array
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|array
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello world"
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|zero
argument_list|(
name|array
argument_list|,
literal|2
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|array
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|array
index|[
literal|1
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|array
index|[
name|i
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPutBuffer
parameter_list|()
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Bytes
operator|.
name|putByteBuffer
argument_list|(
name|b
argument_list|,
name|i
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
name|i
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
argument_list|,
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testToFromHex
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|testStrings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|testStrings
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"00"
block|,
literal|"A0"
block|,
literal|"ff"
block|,
literal|"FFffFFFFFFFFFF"
block|,
literal|"12"
block|,
literal|"0123456789abcdef"
block|,
literal|"283462839463924623984692834692346ABCDFEDDCA0"
block|,       }
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|testString
range|:
name|testStrings
control|)
block|{
name|byte
index|[]
name|byteData
init|=
name|Bytes
operator|.
name|fromHex
argument_list|(
name|testString
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testString
operator|.
name|length
argument_list|()
operator|/
literal|2
argument_list|,
name|byteData
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|Bytes
operator|.
name|toHex
argument_list|(
name|byteData
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testString
operator|.
name|equalsIgnoreCase
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|testByteData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|testByteData
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[
literal|0
index|]
block|,
operator|new
name|byte
index|[
literal|1
index|]
block|,
operator|new
name|byte
index|[
literal|10
index|]
block|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|}
block|,     }
argument_list|)
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|testByteData
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|testData
range|:
name|testByteData
control|)
block|{
name|String
name|hexString
init|=
name|Bytes
operator|.
name|toHex
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
operator|*
literal|2
argument_list|,
name|hexString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
name|Bytes
operator|.
name|fromHex
argument_list|(
name|hexString
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

