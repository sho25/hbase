begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTimestampType
block|{
specifier|private
specifier|static
name|long
name|testPhysicalTime
init|=
literal|1234567890123L
decl_stmt|;
specifier|private
specifier|static
name|long
name|testLogicalTime
init|=
literal|12
decl_stmt|;
comment|/*    * Tests for TimestampType enum    */
annotation|@
name|Test
specifier|public
name|void
name|testFromToEpoch
parameter_list|()
block|{
for|for
control|(
name|TimestampType
name|timestamp
range|:
name|TimestampType
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|wallTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|converted
init|=
name|timestamp
operator|.
name|toEpochTimeMillisFromTimestamp
argument_list|(
name|timestamp
operator|.
name|fromEpochTimeMillisToTimestamp
argument_list|(
name|wallTime
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|wallTime
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Tests for HL Clock */
annotation|@
name|Test
specifier|public
name|void
name|testHybridMaxValues
parameter_list|()
block|{
comment|// assert 44-bit Physical Time with signed comparison (actual 43 bits)
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|<<
operator|(
literal|63
operator|-
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getBitsForLogicalTime
argument_list|()
operator|)
operator|)
operator|-
literal|1
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getMaxPhysicalTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert 20-bit Logical Time
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|<<
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getBitsForLogicalTime
argument_list|()
operator|)
operator|-
literal|1
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getMaxLogicalTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert that maximum representable timestamp is Long.MAX_VALUE (assuming signed comparison).
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getMaxPhysicalTime
argument_list|()
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getMaxLogicalTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHybridGetPhysicalTime
parameter_list|()
block|{
name|long
name|ts
init|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|testPhysicalTime
argument_list|,
name|testLogicalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testPhysicalTime
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getPhysicalTime
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHybridGetLogicalTime
parameter_list|()
block|{
name|long
name|ts
init|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|testPhysicalTime
argument_list|,
name|testLogicalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testLogicalTime
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getLogicalTime
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHybridToString
parameter_list|()
block|{
name|long
name|ts
init|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|testPhysicalTime
argument_list|,
name|testLogicalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2009-02-13T23:31:30:123(1234567890123), 12"
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHybridToTimestamp
parameter_list|()
block|{
name|long
name|expected
init|=
operator|(
name|testPhysicalTime
operator|<<
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getBitsForLogicalTime
argument_list|()
operator|)
operator|+
name|testLogicalTime
decl_stmt|;
comment|// test millisecond
name|long
name|ts
init|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|testPhysicalTime
argument_list|,
name|testLogicalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// test nanosecond
name|ts
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|testPhysicalTime
argument_list|)
argument_list|,
name|testLogicalTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHybridIsLikelyOfType
parameter_list|()
throws|throws
name|ParseException
block|{
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss:SSS Z"
argument_list|)
decl_stmt|;
comment|// test timestamps of Hybrid type from year 1971 to 2248 where lt = 0
for|for
control|(
name|int
name|year
init|=
literal|1971
init|;
name|year
operator|<=
literal|2248
condition|;
name|year
operator|+=
literal|1
control|)
block|{
name|Date
name|date
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|year
operator|+
literal|"-01-01T11:22:33:444 UTC"
argument_list|)
decl_stmt|;
comment|// Hybrid type ts with pt = date and lt = 0
name|long
name|ts
init|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|date
operator|.
name|getTime
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|isLikelyOfType
argument_list|(
name|ts
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test timestamps of Hybrid type from year 2016 to 2348 where lt> 0
for|for
control|(
name|int
name|year
init|=
literal|2016
init|;
name|year
operator|<=
literal|2248
condition|;
name|year
operator|+=
literal|1
control|)
block|{
name|Date
name|date
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|year
operator|+
literal|"-01-01T11:22:33:444 UTC"
argument_list|)
decl_stmt|;
comment|// Hybrid type ts with pt = date and lt = 123
name|long
name|ts
init|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|date
operator|.
name|getTime
argument_list|()
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|isLikelyOfType
argument_list|(
name|ts
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test that timestamps from different years are not Hybrid type
for|for
control|(
name|int
name|year
init|=
literal|1970
init|;
name|year
operator|<=
literal|10000
condition|;
name|year
operator|+=
literal|10
control|)
block|{
comment|// Stardate 1970 to 10000
name|Date
name|date
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|year
operator|+
literal|"-01-01T00:00:00:000 UTC"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|date
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getPhysicalTime
argument_list|(
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|isLikelyOfType
argument_list|(
name|ts
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test that timestamps up to 2016 are not Hybrid even if lt = 0
for|for
control|(
name|int
name|year
init|=
literal|1970
init|;
name|year
operator|<=
literal|2016
condition|;
name|year
operator|+=
literal|1
control|)
block|{
name|Date
name|date
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|year
operator|+
literal|"-01-01T11:22:33:444 UTC"
argument_list|)
decl_stmt|;
comment|// reset lt = 0
name|long
name|ts
init|=
operator|(
operator|(
name|date
operator|.
name|getTime
argument_list|()
operator|>>
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getBitsForLogicalTime
argument_list|()
operator|)
operator|<<
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getBitsForLogicalTime
argument_list|()
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getPhysicalTime
argument_list|(
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|isLikelyOfType
argument_list|(
name|ts
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test that timestamps from currentTime epoch are not Hybrid type
name|long
name|systemTimeNow
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|systemTimeNow
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
operator|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getPhysicalTime
argument_list|(
name|systemTimeNow
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|isLikelyOfType
argument_list|(
name|systemTimeNow
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPhysicalMaxValues
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|<<
literal|63
operator|)
operator|-
literal|1
argument_list|,
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|getMaxPhysicalTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|getMaxLogicalTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPhysicalGetPhysicalTime
parameter_list|()
block|{
name|long
name|ts
init|=
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|testPhysicalTime
argument_list|,
name|testLogicalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testPhysicalTime
argument_list|,
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|getPhysicalTime
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPhysicalGetLogicalTime
parameter_list|()
block|{
name|long
name|ts
init|=
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|testPhysicalTime
argument_list|,
name|testLogicalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|getLogicalTime
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPhysicalToString
parameter_list|()
block|{
name|long
name|ts
init|=
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|testPhysicalTime
argument_list|,
name|testLogicalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2009-02-13T23:31:30:123(1234567890123), 0"
argument_list|,
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPhysicalToTimestamp
parameter_list|()
block|{
comment|// test millisecond
name|long
name|ts
init|=
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|testPhysicalTime
argument_list|,
name|testLogicalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|testPhysicalTime
argument_list|)
expr_stmt|;
comment|// test nanosecond
name|ts
operator|=
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|testPhysicalTime
argument_list|)
argument_list|,
name|testLogicalTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
argument_list|,
name|testPhysicalTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPhysicalIsLikelyOfType
parameter_list|()
throws|throws
name|ParseException
block|{
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss:SSS Z"
argument_list|)
decl_stmt|;
comment|// test that timestamps from 1970 to 3K epoch are of Physical type
for|for
control|(
name|int
name|year
init|=
literal|1970
init|;
name|year
operator|<
literal|3000
condition|;
name|year
operator|+=
literal|10
control|)
block|{
comment|// Start date 1970 to 10000
name|Date
name|date
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|year
operator|+
literal|"-01-01T00:00:00:000 UTC"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|date
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getPhysicalTime
argument_list|(
name|ts
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|isLikelyOfType
argument_list|(
name|ts
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test that timestamps from currentTime epoch are of Physical type
name|long
name|systemTimeNow
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|systemTimeNow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|isLikelyOfType
argument_list|(
name|systemTimeNow
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// test timestamps of Hybrid type from year 1970 to 2248 are not of Physical type
for|for
control|(
name|int
name|year
init|=
literal|1970
init|;
name|year
operator|<=
literal|2248
condition|;
name|year
operator|+=
literal|1
control|)
block|{
name|Date
name|date
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|year
operator|+
literal|"-01-01T11:22:33:444 UTC"
argument_list|)
decl_stmt|;
comment|// Hybrid type ts with pt = date and lt = 0
name|long
name|ts
init|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|date
operator|.
name|getTime
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|toString
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TimestampType
operator|.
name|PHYSICAL
operator|.
name|isLikelyOfType
argument_list|(
name|ts
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

