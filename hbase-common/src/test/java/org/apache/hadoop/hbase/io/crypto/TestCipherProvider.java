begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|aes
operator|.
name|AES
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCipherProvider
block|{
specifier|public
specifier|static
class|class
name|MyCipherProvider
implements|implements
name|CipherProvider
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MyCipherProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getSupportedCiphers
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"TEST"
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cipher
name|getCipher
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"TEST"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Cipher
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"TEST"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getKeyLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIvLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Key
name|getRandomKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Encryptor
name|getEncryptor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Decryptor
name|getDecryptor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputStream
name|createEncryptionStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Context
name|context
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|OutputStream
name|createEncryptionStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Encryptor
name|encryptor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|createDecryptionStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Context
name|context
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|createDecryptionStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decryptor
name|decryptor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomProvider
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_CIPHERPROVIDER_CONF_KEY
argument_list|,
name|MyCipherProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CipherProvider
name|provider
init|=
name|Encryption
operator|.
name|getCipherProvider
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|instanceof
name|MyCipherProvider
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|provider
operator|.
name|getSupportedCiphers
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|Cipher
name|a
init|=
name|Encryption
operator|.
name|getCipher
argument_list|(
name|conf
argument_list|,
literal|"TEST"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|getProvider
argument_list|()
operator|instanceof
name|MyCipherProvider
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getKeyLength
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultProvider
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|CipherProvider
name|provider
init|=
name|Encryption
operator|.
name|getCipherProvider
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|instanceof
name|DefaultCipherProvider
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|provider
operator|.
name|getSupportedCiphers
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"AES"
argument_list|)
argument_list|)
expr_stmt|;
name|Cipher
name|a
init|=
name|Encryption
operator|.
name|getCipher
argument_list|(
name|conf
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|getProvider
argument_list|()
operator|instanceof
name|DefaultCipherProvider
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
literal|"AES"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getKeyLength
argument_list|()
argument_list|,
name|AES
operator|.
name|KEY_LENGTH
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

