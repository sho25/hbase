begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|runners
operator|.
name|statements
operator|.
name|FailOnTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_comment
comment|/**  * Set a test method timeout based off the test categories small, medium, large.  * Based on junit Timeout TestRule; see https://github.com/junit-team/junit/wiki/Rules  */
end_comment

begin_class
specifier|public
class|class
name|CategoryBasedTimeout
extends|extends
name|Timeout
block|{
annotation|@
name|Deprecated
specifier|public
name|CategoryBasedTimeout
parameter_list|(
name|int
name|millis
parameter_list|)
block|{
name|super
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CategoryBasedTimeout
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|super
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CategoryBasedTimeout
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|CategoryBasedTimeout
operator|.
name|Builder
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|Timeout
operator|.
name|Builder
block|{
specifier|public
name|Timeout
operator|.
name|Builder
name|withTimeout
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|Annotation
name|annotation
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|Category
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|Category
name|category
init|=
operator|(
name|Category
operator|)
name|annotation
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|category
operator|.
name|value
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
name|SmallTests
operator|.
name|class
condition|)
block|{
comment|// See SmallTests. Supposed to run 15 seconds.
return|return
name|withTimeout
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
name|MediumTests
operator|.
name|class
condition|)
block|{
comment|// See MediumTests. Supposed to run 50 seconds.
return|return
name|withTimeout
argument_list|(
literal|180
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
name|LargeTests
operator|.
name|class
condition|)
block|{
comment|// Let large tests have a ten minute timeout.
return|return
name|withTimeout
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

