begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCounter
block|{
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|THREAD_COUNTS
init|=
block|{
literal|1
block|,
literal|10
block|,
literal|100
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DATA_COUNT
init|=
literal|1000000
decl_stmt|;
specifier|private
interface|interface
name|Operation
block|{
name|void
name|execute
parameter_list|()
function_decl|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrement
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|threadCount
range|:
name|THREAD_COUNTS
control|)
block|{
specifier|final
name|Counter
name|counter
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
name|execute
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|threadCount
operator|*
operator|(
name|long
operator|)
name|DATA_COUNT
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementAndGet
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|threadCount
range|:
name|THREAD_COUNTS
control|)
block|{
specifier|final
name|Counter
name|counter
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
name|execute
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
name|counter
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|threadCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|threadCount
operator|*
operator|(
name|long
operator|)
name|DATA_COUNT
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|execute
parameter_list|(
specifier|final
name|Operation
name|op
parameter_list|,
name|int
name|threadCount
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|prepareLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|endLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
class|class
name|OperationThread
extends|extends
name|Thread
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|prepareLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|startLatch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DATA_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|endLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|threadCount
condition|;
name|j
operator|++
control|)
block|{
operator|new
name|OperationThread
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|prepareLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|startLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|endLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

