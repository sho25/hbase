begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TimestampType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestClock
block|{
comment|// utils
specifier|private
name|void
name|assertTimestampsMonotonic
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|timestamps
parameter_list|,
name|boolean
name|strictlyIncreasing
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|timestamps
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|prev
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|timestamp
range|:
name|timestamps
control|)
block|{
if|if
condition|(
name|strictlyIncreasing
condition|)
block|{
name|assertTrue
argument_list|(
name|timestamps
operator|.
name|toString
argument_list|()
argument_list|,
name|timestamp
operator|>
name|prev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|timestamps
operator|.
name|toString
argument_list|()
argument_list|,
name|timestamp
operator|>=
name|prev
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|timestamp
expr_stmt|;
block|}
block|}
comment|// All Clocks Tests
comment|/**    * Remove this test if moving away from millis resolution for physical time. Be sure to change    * {@link TimestampType} methods which assume millisecond resolution.    */
annotation|@
name|Test
specifier|public
name|void
name|TestClocksPhysicalTimeResolution
parameter_list|()
block|{
name|Clock
operator|.
name|System
name|systemClock
init|=
operator|new
name|Clock
operator|.
name|System
argument_list|()
decl_stmt|;
name|Clock
operator|.
name|SystemMonotonic
name|systemMonotonicClock
init|=
operator|new
name|Clock
operator|.
name|SystemMonotonic
argument_list|()
decl_stmt|;
name|Clock
operator|.
name|HLC
name|hybridLogicalClock
init|=
operator|new
name|Clock
operator|.
name|HLC
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|systemClock
operator|.
name|getTimeUnit
argument_list|()
operator|==
name|systemMonotonicClock
operator|.
name|getTimeUnit
argument_list|()
operator|&&
name|systemClock
operator|.
name|getTimeUnit
argument_list|()
operator|==
name|hybridLogicalClock
operator|.
name|getTimeUnit
argument_list|()
operator|&&
name|TimeUnit
operator|.
name|MILLISECONDS
operator|==
name|systemClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// All System Clock Tests
annotation|@
name|Test
specifier|public
name|void
name|TestSystemClockIsMonotonic
parameter_list|()
block|{
name|Clock
operator|.
name|System
name|systemClock
init|=
operator|new
name|Clock
operator|.
name|System
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|systemClock
operator|.
name|isMonotonic
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSystemClockIsMonotonicallyIncreasing
parameter_list|()
block|{
name|Clock
operator|.
name|System
name|systemClock
init|=
operator|new
name|Clock
operator|.
name|System
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|systemClock
operator|.
name|isMonotonicallyIncreasing
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// All System Monotonic Clock Tests
annotation|@
name|Test
specifier|public
name|void
name|testSystemMonotonicClockIsMonotonic
parameter_list|()
block|{
name|Clock
operator|.
name|SystemMonotonic
name|systemMonotonicClock
init|=
operator|new
name|Clock
operator|.
name|SystemMonotonic
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|systemMonotonicClock
operator|.
name|isMonotonic
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSystemMonotonicClockIsMonotonicallyIncreasing
parameter_list|()
block|{
name|Clock
operator|.
name|SystemMonotonic
name|systemMonotonicClock
init|=
operator|new
name|Clock
operator|.
name|SystemMonotonic
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|systemMonotonicClock
operator|.
name|isMonotonicallyIncreasing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSystemMonotonicNow
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|timestamps
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|timestamp
decl_stmt|;
name|Clock
operator|.
name|PhysicalClock
name|physicalClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|PhysicalClock
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Clock
operator|.
name|SystemMonotonic
name|systemMonotonic
init|=
operator|new
name|Clock
operator|.
name|SystemMonotonic
argument_list|(
name|physicalClock
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
comment|// case 1: Set time and assert
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 2: Go back in time and check monotonic property.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|99L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 3: system time goes ahead compared to previous timestamp.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|101L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|assertTimestampsMonotonic
argument_list|(
name|timestamps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSystemMonotonicUpdate
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|timestamps
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|long
name|timestamp
decl_stmt|;
name|Clock
operator|.
name|PhysicalClock
name|physicalClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|PhysicalClock
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Clock
operator|.
name|SystemMonotonic
name|systemMonotonic
init|=
operator|new
name|Clock
operator|.
name|SystemMonotonic
argument_list|(
name|physicalClock
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
comment|// Set Time
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|99L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 1: Message timestamp is greater than current System Monotonic Time,
comment|// physical time at 100 still.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|update
argument_list|(
literal|102
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|102
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 2: Message timestamp is greater than current System Monotonic Time,
comment|// physical time at 100 still.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|update
argument_list|(
literal|103
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|103
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 3: Message timestamp is less than current System Monotonic Time, greater than current
comment|// physical time which is 100.
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|update
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|103
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 4: Message timestamp is less than current System Monotonic Time, less than current
comment|// physical time which is 100.
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|update
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|103
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 5: Message timestamp<System monotonic time and both less than current Physical Time
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|106L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|update
argument_list|(
literal|102
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|106
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 6: Message timestamp>System monotonic time and both less than current Physical Time
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|109L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|systemMonotonic
operator|.
name|update
argument_list|(
literal|108
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|109
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|assertTimestampsMonotonic
argument_list|(
name|timestamps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSystemMonotonicUpdateMaxClockSkew
parameter_list|()
throws|throws
name|Clock
operator|.
name|ClockException
block|{
name|long
name|maxClockSkew
init|=
literal|1000
decl_stmt|;
name|Clock
operator|.
name|PhysicalClock
name|physicalClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|PhysicalClock
operator|.
name|class
argument_list|)
decl_stmt|;
name|Clock
operator|.
name|SystemMonotonic
name|systemMonotonic
init|=
operator|new
name|Clock
operator|.
name|SystemMonotonic
argument_list|(
name|physicalClock
argument_list|,
name|maxClockSkew
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// Set Current Time.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|systemMonotonic
operator|.
name|now
argument_list|()
expr_stmt|;
name|systemMonotonic
operator|.
name|update
argument_list|(
name|maxClockSkew
operator|+
literal|100
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|systemMonotonic
operator|.
name|update
argument_list|(
name|maxClockSkew
operator|+
literal|101
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown Clock Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Clock
operator|.
name|ClockException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// All Hybrid Logical Clock Tests
annotation|@
name|Test
specifier|public
name|void
name|testHLCIsMonotonic
parameter_list|()
block|{
name|Clock
operator|.
name|HLC
name|hybridLogicalClock
init|=
operator|new
name|Clock
operator|.
name|HLC
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|hybridLogicalClock
operator|.
name|isMonotonic
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHLCIsMonotonicallyIncreasing
parameter_list|()
block|{
name|Clock
operator|.
name|HLC
name|hybridLogicalClock
init|=
operator|new
name|Clock
operator|.
name|HLC
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|hybridLogicalClock
operator|.
name|isMonotonicallyIncreasing
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHLCNow
parameter_list|()
throws|throws
name|Clock
operator|.
name|ClockException
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|timestamps
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|timestamp
decl_stmt|;
name|Clock
operator|.
name|PhysicalClock
name|physicalClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|PhysicalClock
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Clock
operator|.
name|HLC
name|hybridLogicalClock
init|=
operator|new
name|Clock
operator|.
name|HLC
argument_list|(
name|physicalClock
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
comment|// case 1: Test if it returns correct time based on current physical time.
comment|//         Remember, initially logical time = 0
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 2: physical time does'nt change, logical time should increment.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 3: physical time does'nt change still, logical time should increment again
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 4: physical time moves forward, logical time should reset to 0.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|101L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 5: Monotonic increasing check, physical time goes back.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|99L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if all timestamps generated in the process are strictly monotonic.
name|assertTimestampsMonotonic
argument_list|(
name|timestamps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHLCUNowLogicalTimeOverFlow
parameter_list|()
throws|throws
name|Clock
operator|.
name|ClockException
block|{
name|Clock
operator|.
name|PhysicalClock
name|physicalClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|PhysicalClock
operator|.
name|class
argument_list|)
decl_stmt|;
name|Clock
operator|.
name|HLC
name|hybridLogicalClock
init|=
operator|new
name|Clock
operator|.
name|HLC
argument_list|(
name|physicalClock
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// Set Current Time.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|hybridLogicalClock
operator|.
name|setPhysicalTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|hybridLogicalClock
operator|.
name|setLogicalTime
argument_list|(
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getMaxLogicalTime
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown Clock Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Clock
operator|.
name|ClockException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHLCUpdate
parameter_list|()
throws|throws
name|Clock
operator|.
name|ClockException
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|timestamps
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|timestamp
decl_stmt|,
name|messageTimestamp
decl_stmt|;
name|Clock
operator|.
name|PhysicalClock
name|physicalClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|PhysicalClock
operator|.
name|class
argument_list|)
decl_stmt|;
name|Clock
operator|.
name|HLC
name|hybridLogicalClock
init|=
operator|new
name|Clock
operator|.
name|HLC
argument_list|(
name|physicalClock
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// Set Current Time.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
comment|// case 1: Message physical timestamp is lower than current physical time.
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|99
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|101L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 2: Message physical timestamp is greater than HLC physical time.
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|105
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|102L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|105
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 3: Message timestamp is less than HLC timestamp
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|104
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|103L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|105
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|//case 4: Message timestamp with same physical time as HLC, but lower logical time
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|105
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|101L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|105
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|//case 5: Message timestamp with same physical time as HLC, but higher logical time
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|105
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|102L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|105
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|//case 6: Actual Physical Time greater than message physical timestamp and HLC physical time.
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|105
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|110L
argument_list|)
expr_stmt|;
name|timestamp
operator|=
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
name|timestamps
operator|.
name|add
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|110
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getPhysicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hybridLogicalClock
operator|.
name|getTimestampType
argument_list|()
operator|.
name|getLogicalTime
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if all timestamps generated in the process are strictly monotonic.
name|assertTimestampsMonotonic
argument_list|(
name|timestamps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHLCUpdateLogicalTimeOverFlow
parameter_list|()
throws|throws
name|Clock
operator|.
name|ClockException
block|{
name|long
name|messageTimestamp
decl_stmt|;
name|Clock
operator|.
name|PhysicalClock
name|physicalClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|PhysicalClock
operator|.
name|class
argument_list|)
decl_stmt|;
name|Clock
operator|.
name|HLC
name|hybridLogicalClock
init|=
operator|new
name|Clock
operator|.
name|HLC
argument_list|(
name|physicalClock
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// Set Current Time.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
try|try
block|{
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|100
argument_list|,
name|TimestampType
operator|.
name|HYBRID
operator|.
name|getMaxLogicalTime
argument_list|()
argument_list|)
expr_stmt|;
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown Clock Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Clock
operator|.
name|ClockException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHLCUpdateMaxClockSkew
parameter_list|()
throws|throws
name|Clock
operator|.
name|ClockException
block|{
name|long
name|messageTimestamp
decl_stmt|,
name|maxClockSkew
init|=
literal|1000
decl_stmt|;
name|Clock
operator|.
name|PhysicalClock
name|physicalClock
init|=
name|mock
argument_list|(
name|Clock
operator|.
name|PhysicalClock
operator|.
name|class
argument_list|)
decl_stmt|;
name|Clock
operator|.
name|HLC
name|hybridLogicalClock
init|=
operator|new
name|Clock
operator|.
name|HLC
argument_list|(
name|physicalClock
argument_list|,
name|maxClockSkew
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|physicalClock
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// Set Current Time.
name|when
argument_list|(
name|physicalClock
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|hybridLogicalClock
operator|.
name|now
argument_list|()
expr_stmt|;
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|maxClockSkew
operator|-
literal|100
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
try|try
block|{
name|messageTimestamp
operator|=
name|TimestampType
operator|.
name|HYBRID
operator|.
name|toTimestamp
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|maxClockSkew
operator|+
literal|101
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hybridLogicalClock
operator|.
name|update
argument_list|(
name|messageTimestamp
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown Clock Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Clock
operator|.
name|ClockException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

