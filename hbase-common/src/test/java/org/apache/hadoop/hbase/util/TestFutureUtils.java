begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFutureUtils
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestFutureUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecordStackTrace
parameter_list|()
throws|throws
name|IOException
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|HBaseIOException
argument_list|(
literal|"Inject error!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|FutureUtils
operator|.
name|get
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The future should have been completed exceptionally"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HBaseIOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Inject error!"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|StackTraceElement
index|[]
name|elements
init|=
name|e
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|elements
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"java.lang.Thread.getStackTrace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elements
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"org.apache.hadoop.hbase.util.FutureUtils.setStackTrace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elements
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"org.apache.hadoop.hbase.util.FutureUtils.rethrow"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elements
index|[
literal|3
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"org.apache.hadoop.hbase.util.FutureUtils.get"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|elements
index|[
literal|4
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"org.apache.hadoop.hbase.util.TestFutureUtils.testRecordStackTrace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
name|elements
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|element
lambda|->
name|element
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"--------Future.get--------"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Caught unexpected Throwable"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

