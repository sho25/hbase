begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestKeyStoreKeyProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestKeyStoreKeyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|HBaseCommonTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|String
name|ALIAS
init|=
literal|"test"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|static
name|byte
index|[]
name|KEY
decl_stmt|;
specifier|static
name|File
name|storeFile
decl_stmt|;
specifier|static
name|File
name|passwordFile
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|KEY
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
operator|.
name|digest
argument_list|(
name|ALIAS
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a JKECS store containing a test secret key
name|KeyStore
name|store
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"JCEKS"
argument_list|)
decl_stmt|;
name|store
operator|.
name|load
argument_list|(
literal|null
argument_list|,
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|setEntry
argument_list|(
name|ALIAS
argument_list|,
operator|new
name|KeyStore
operator|.
name|SecretKeyEntry
argument_list|(
operator|new
name|SecretKeySpec
argument_list|(
name|KEY
argument_list|,
literal|"AES"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|KeyStore
operator|.
name|PasswordProtection
argument_list|(
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the test directory
name|String
name|dataDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
operator|new
name|File
argument_list|(
name|dataDir
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Write the keystore file
name|storeFile
operator|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"keystore.jks"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|storeFile
argument_list|)
decl_stmt|;
try|try
block|{
name|store
operator|.
name|store
argument_list|(
name|os
argument_list|,
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Write the password file
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|ALIAS
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|passwordFile
operator|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"keystore.pw"
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|passwordFile
argument_list|)
expr_stmt|;
try|try
block|{
name|p
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testKeyStoreKeyProviderWithPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|provider
init|=
operator|new
name|KeyStoreKeyProvider
argument_list|()
decl_stmt|;
name|provider
operator|.
name|init
argument_list|(
literal|"jceks://"
operator|+
name|storeFile
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"?password="
operator|+
name|PASSWORD
argument_list|)
expr_stmt|;
name|Key
name|key
init|=
name|provider
operator|.
name|getKey
argument_list|(
name|ALIAS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|byte
index|[]
name|keyBytes
init|=
name|key
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|keyBytes
operator|.
name|length
argument_list|,
name|KEY
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|KEY
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|keyBytes
index|[
name|i
index|]
argument_list|,
name|KEY
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testKeyStoreKeyProviderWithPasswordFile
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|provider
init|=
operator|new
name|KeyStoreKeyProvider
argument_list|()
decl_stmt|;
name|provider
operator|.
name|init
argument_list|(
literal|"jceks://"
operator|+
name|storeFile
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"?passwordFile="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|passwordFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Key
name|key
init|=
name|provider
operator|.
name|getKey
argument_list|(
name|ALIAS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|byte
index|[]
name|keyBytes
init|=
name|key
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|keyBytes
operator|.
name|length
argument_list|,
name|KEY
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|KEY
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|keyBytes
index|[
name|i
index|]
argument_list|,
name|KEY
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

