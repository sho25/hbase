begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCellUtil
block|{
comment|/**    * CellScannable used in test. Returns a {@link TestCellScanner}    */
specifier|private
class|class
name|TestCellScannable
implements|implements
name|CellScannable
block|{
specifier|private
specifier|final
name|int
name|cellsCount
decl_stmt|;
name|TestCellScannable
parameter_list|(
specifier|final
name|int
name|cellsCount
parameter_list|)
block|{
name|this
operator|.
name|cellsCount
operator|=
name|cellsCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CellScanner
name|cellScanner
parameter_list|()
block|{
return|return
operator|new
name|TestCellScanner
argument_list|(
name|this
operator|.
name|cellsCount
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|/**    * CellScanner used in test.    */
specifier|private
class|class
name|TestCellScanner
implements|implements
name|CellScanner
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|Cell
name|current
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|int
name|cellsCount
decl_stmt|;
name|TestCellScanner
parameter_list|(
specifier|final
name|int
name|cellsCount
parameter_list|)
block|{
name|this
operator|.
name|cellsCount
operator|=
name|cellsCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|current
parameter_list|()
block|{
return|return
name|this
operator|.
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advance
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|count
operator|<
name|cellsCount
condition|)
block|{
name|this
operator|.
name|current
operator|=
operator|new
name|TestCell
argument_list|(
name|this
operator|.
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Cell used in test. Has row only.    */
specifier|private
class|class
name|TestCell
implements|implements
name|Cell
block|{
specifier|private
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
name|TestCell
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|this
operator|.
name|row
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMvccVersion
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValue
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamily
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifier
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
block|}
empty_stmt|;
comment|/**    * Was overflowing if 100k or so lists of cellscanners to return.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateCellScannerOverflow
parameter_list|()
throws|throws
name|IOException
block|{
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
operator|*
literal|1
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|3
operator|*
literal|0
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|3
operator|*
literal|3
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
operator|*
literal|1
argument_list|)
expr_stmt|;
comment|// Do big number. See HBASE-11813 for why.
specifier|final
name|int
name|hundredK
init|=
literal|100000
decl_stmt|;
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
name|hundredK
argument_list|,
literal|0
argument_list|)
argument_list|,
name|hundredK
operator|*
literal|0
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellArray
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellArray
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellArray
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CellScannable
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|CellScannable
argument_list|>
argument_list|(
name|hundredK
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hundredK
condition|;
name|i
operator|++
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
operator|new
name|TestCellScannable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consume
argument_list|(
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
argument_list|)
argument_list|,
name|hundredK
operator|*
literal|1
argument_list|)
expr_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cellArray
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|hundredK
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hundredK
condition|;
name|i
operator|++
control|)
name|cellArray
operator|.
name|add
argument_list|(
operator|new
name|TestCell
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'f'
block|}
argument_list|,
name|cellArray
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|m
argument_list|)
argument_list|,
name|hundredK
operator|*
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CellScanner
name|doCreateCellArray
parameter_list|(
specifier|final
name|int
name|itemsPerList
parameter_list|)
block|{
name|Cell
index|[]
name|cells
init|=
operator|new
name|Cell
index|[
name|itemsPerList
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemsPerList
condition|;
name|i
operator|++
control|)
block|{
name|cells
index|[
name|i
index|]
operator|=
operator|new
name|TestCell
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
argument_list|)
return|;
block|}
specifier|private
name|CellScanner
name|doCreateCellScanner
parameter_list|(
specifier|final
name|int
name|listsCount
parameter_list|,
specifier|final
name|int
name|itemsPerList
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CellScannable
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|CellScannable
argument_list|>
argument_list|(
name|listsCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listsCount
condition|;
name|i
operator|++
control|)
block|{
name|CellScannable
name|cs
init|=
operator|new
name|CellScannable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CellScanner
name|cellScanner
parameter_list|()
block|{
return|return
operator|new
name|TestCellScanner
argument_list|(
name|itemsPerList
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
return|return
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
argument_list|)
return|;
block|}
specifier|private
name|void
name|consume
parameter_list|(
specifier|final
name|CellScanner
name|scanner
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|advance
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverlappingKeys
parameter_list|()
block|{
name|byte
index|[]
name|empty
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
name|byte
index|[]
name|a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|c
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|d
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
comment|// overlaps
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|d
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|empty
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|empty
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|empty
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|empty
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|empty
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|empty
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// non overlaps
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|c
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|c
argument_list|,
name|d
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|c
argument_list|,
name|empty
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|d
argument_list|,
name|empty
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|empty
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|empty
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|b
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

