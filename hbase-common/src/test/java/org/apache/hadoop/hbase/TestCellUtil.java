begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCellUtil
block|{
comment|/**    * CellScannable used in test. Returns a {@link TestCellScanner}    */
specifier|private
specifier|static
class|class
name|TestCellScannable
implements|implements
name|CellScannable
block|{
specifier|private
specifier|final
name|int
name|cellsCount
decl_stmt|;
name|TestCellScannable
parameter_list|(
specifier|final
name|int
name|cellsCount
parameter_list|)
block|{
name|this
operator|.
name|cellsCount
operator|=
name|cellsCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CellScanner
name|cellScanner
parameter_list|()
block|{
return|return
operator|new
name|TestCellScanner
argument_list|(
name|this
operator|.
name|cellsCount
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|/**    * CellScanner used in test.    */
specifier|private
specifier|static
class|class
name|TestCellScanner
implements|implements
name|CellScanner
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|Cell
name|current
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|int
name|cellsCount
decl_stmt|;
name|TestCellScanner
parameter_list|(
specifier|final
name|int
name|cellsCount
parameter_list|)
block|{
name|this
operator|.
name|cellsCount
operator|=
name|cellsCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|current
parameter_list|()
block|{
return|return
name|this
operator|.
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advance
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|count
operator|<
name|cellsCount
condition|)
block|{
name|this
operator|.
name|current
operator|=
operator|new
name|TestCell
argument_list|(
name|this
operator|.
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Cell used in test. Has row only.    */
specifier|private
specifier|static
class|class
name|TestCell
implements|implements
name|Cell
block|{
specifier|private
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
name|TestCell
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|this
operator|.
name|row
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataType
name|getType
parameter_list|()
block|{
return|return
name|PrivateCellUtil
operator|.
name|toDataType
argument_list|(
name|getTypeByte
argument_list|()
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|/**    * Was overflowing if 100k or so lists of cellscanners to return.    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateCellScannerOverflow
parameter_list|()
throws|throws
name|IOException
block|{
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
operator|*
literal|1
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|3
operator|*
literal|0
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|3
operator|*
literal|3
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
operator|*
literal|1
argument_list|)
expr_stmt|;
comment|// Do big number. See HBASE-11813 for why.
specifier|final
name|int
name|hundredK
init|=
literal|100000
decl_stmt|;
name|consume
argument_list|(
name|doCreateCellScanner
argument_list|(
name|hundredK
argument_list|,
literal|0
argument_list|)
argument_list|,
name|hundredK
operator|*
literal|0
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellArray
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellArray
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|doCreateCellArray
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CellScannable
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|hundredK
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hundredK
condition|;
name|i
operator|++
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
operator|new
name|TestCellScannable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consume
argument_list|(
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
argument_list|)
argument_list|,
name|hundredK
operator|*
literal|1
argument_list|)
expr_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cellArray
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|hundredK
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hundredK
condition|;
name|i
operator|++
control|)
block|{
name|cellArray
operator|.
name|add
argument_list|(
operator|new
name|TestCell
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'f'
block|}
argument_list|,
name|cellArray
argument_list|)
expr_stmt|;
name|consume
argument_list|(
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|m
argument_list|)
argument_list|,
name|hundredK
operator|*
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CellScanner
name|doCreateCellArray
parameter_list|(
specifier|final
name|int
name|itemsPerList
parameter_list|)
block|{
name|Cell
index|[]
name|cells
init|=
operator|new
name|Cell
index|[
name|itemsPerList
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemsPerList
condition|;
name|i
operator|++
control|)
block|{
name|cells
index|[
name|i
index|]
operator|=
operator|new
name|TestCell
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
argument_list|)
return|;
block|}
specifier|private
name|CellScanner
name|doCreateCellScanner
parameter_list|(
specifier|final
name|int
name|listsCount
parameter_list|,
specifier|final
name|int
name|itemsPerList
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CellScannable
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|listsCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listsCount
condition|;
name|i
operator|++
control|)
block|{
name|CellScannable
name|cs
init|=
operator|new
name|CellScannable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CellScanner
name|cellScanner
parameter_list|()
block|{
return|return
operator|new
name|TestCellScanner
argument_list|(
name|itemsPerList
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
return|return
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
argument_list|)
return|;
block|}
specifier|private
name|void
name|consume
parameter_list|(
specifier|final
name|CellScanner
name|scanner
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverlappingKeys
parameter_list|()
block|{
name|byte
index|[]
name|empty
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
name|byte
index|[]
name|a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|c
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|d
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
comment|// overlaps
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|d
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|b
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|empty
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|empty
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|empty
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|empty
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|empty
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|empty
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|// non overlaps
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|c
argument_list|,
name|d
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|c
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|c
argument_list|,
name|d
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|c
argument_list|,
name|empty
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|d
argument_list|,
name|empty
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|empty
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|b
argument_list|,
name|c
argument_list|,
name|empty
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|b
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PrivateCellUtil
operator|.
name|overlappingKeys
argument_list|(
name|empty
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindCommonPrefixInFlatKey
parameter_list|()
block|{
comment|// The whole key matching case
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
literal|"r1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"f1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"q1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv1
operator|.
name|getKeyLength
argument_list|()
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv1
argument_list|,
name|kv1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv1
operator|.
name|getKeyLength
argument_list|()
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv1
argument_list|,
name|kv1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv1
operator|.
name|getKeyLength
argument_list|()
operator|-
name|KeyValue
operator|.
name|TIMESTAMP_TYPE_SIZE
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv1
argument_list|,
name|kv1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// The rk length itself mismatch
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
literal|"r12"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"f1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"q1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// part of rk is same
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
literal|"r14"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"f1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"q1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
literal|"r1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|length
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv2
argument_list|,
name|kv3
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// entire rk is same but different cf name
name|KeyValue
name|kv4
init|=
operator|new
name|KeyValue
argument_list|(
literal|"r14"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"f2"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"q1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|kv3
operator|.
name|getRowLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
literal|"f"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|length
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv3
argument_list|,
name|kv4
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// rk and family are same and part of qualifier
name|KeyValue
name|kv5
init|=
operator|new
name|KeyValue
argument_list|(
literal|"r14"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"f2"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|"q123"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|kv3
operator|.
name|getRowLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|kv4
operator|.
name|getFamilyLength
argument_list|()
operator|+
name|kv4
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv4
argument_list|,
name|kv5
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// rk, cf and q are same. ts differs
name|KeyValue
name|kv6
init|=
operator|new
name|KeyValue
argument_list|(
literal|"rk"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|1234L
argument_list|)
decl_stmt|;
name|KeyValue
name|kv7
init|=
operator|new
name|KeyValue
argument_list|(
literal|"rk"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|1235L
argument_list|)
decl_stmt|;
comment|// only last byte out of 8 ts bytes in ts part differs
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|kv6
operator|.
name|getRowLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|kv6
operator|.
name|getFamilyLength
argument_list|()
operator|+
name|kv6
operator|.
name|getQualifierLength
argument_list|()
operator|+
literal|7
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv6
argument_list|,
name|kv7
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// rk, cf, q and ts are same. Only type differs
name|KeyValue
name|kv8
init|=
operator|new
name|KeyValue
argument_list|(
literal|"rk"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
literal|1234L
argument_list|,
name|Type
operator|.
name|Delete
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|kv6
operator|.
name|getRowLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|kv6
operator|.
name|getFamilyLength
argument_list|()
operator|+
name|kv6
operator|.
name|getQualifierLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|TIMESTAMP_SIZE
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv6
argument_list|,
name|kv8
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// With out TS_TYPE check
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyValue
operator|.
name|ROW_LENGTH_SIZE
operator|+
name|kv6
operator|.
name|getRowLength
argument_list|()
operator|+
name|KeyValue
operator|.
name|FAMILY_LENGTH_SIZE
operator|+
name|kv6
operator|.
name|getFamilyLength
argument_list|()
operator|+
name|kv6
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|PrivateCellUtil
operator|.
name|findCommonPrefixInFlatKey
argument_list|(
name|kv6
argument_list|,
name|kv8
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert CellUtil makes Cell toStrings same way we do KeyValue toStrings.    */
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|123L
decl_stmt|;
comment|// Make a KeyValue and a Cell and see if same toString result.
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
name|String
name|cellToString
init|=
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|kv
operator|.
name|toString
argument_list|()
argument_list|,
name|cellToString
argument_list|)
expr_stmt|;
comment|// Do another w/ non-null family.
name|byte
index|[]
name|f
init|=
operator|new
name|byte
index|[]
block|{
literal|'f'
block|}
decl_stmt|;
name|byte
index|[]
name|q
init|=
operator|new
name|byte
index|[]
block|{
literal|'q'
block|}
decl_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|cell
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|.
name|getCode
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|cellToString
operator|=
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv
operator|.
name|toString
argument_list|()
argument_list|,
name|cellToString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString1
parameter_list|()
block|{
name|String
name|row
init|=
literal|"test.row"
decl_stmt|;
name|String
name|family
init|=
literal|"test.family"
decl_stmt|;
name|String
name|qualifier
init|=
literal|"test.qualifier"
decl_stmt|;
name|long
name|timestamp
init|=
literal|42
decl_stmt|;
name|Type
name|type
init|=
name|Type
operator|.
name|Put
decl_stmt|;
name|String
name|value
init|=
literal|"test.value"
decl_stmt|;
name|long
name|seqId
init|=
literal|1042
decl_stmt|;
name|Cell
name|cell
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifier
argument_list|)
argument_list|,
name|timestamp
argument_list|,
name|type
operator|.
name|getCode
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|,
name|seqId
argument_list|)
decl_stmt|;
name|String
name|nonVerbose
init|=
name|CellUtil
operator|.
name|toString
argument_list|(
name|cell
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|verbose
init|=
name|CellUtil
operator|.
name|toString
argument_list|(
name|cell
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"nonVerbose="
operator|+
name|nonVerbose
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"verbose="
operator|+
name|verbose
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s/%s:%s/%d/%s/vlen=%s/seqid=%s"
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
operator|.
name|length
argument_list|,
name|seqId
argument_list|)
argument_list|,
name|nonVerbose
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s/%s:%s/%d/%s/vlen=%s/seqid=%s/%s"
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
operator|.
name|length
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
comment|// TODO: test with tags
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneCellFieldsFromByteBufferedCell
parameter_list|()
block|{
name|byte
index|[]
name|r
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tags
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tag1"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|r
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
literal|0
argument_list|,
name|q
operator|.
name|length
argument_list|,
literal|1234L
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
decl_stmt|;
name|Cell
name|bbCell
init|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rDest
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|bbCell
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
argument_list|,
name|rDest
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|fDest
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|bbCell
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|f
argument_list|,
name|fDest
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|qDest
init|=
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|bbCell
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|q
argument_list|,
name|qDest
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|vDest
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|bbCell
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|v
argument_list|,
name|vDest
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tDest
init|=
operator|new
name|byte
index|[
name|tags
operator|.
name|length
index|]
decl_stmt|;
name|PrivateCellUtil
operator|.
name|copyTagsTo
argument_list|(
name|bbCell
argument_list|,
name|tDest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|tags
argument_list|,
name|tDest
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchingCellFieldsFromByteBufferedCell
parameter_list|()
block|{
name|byte
index|[]
name|r
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tags
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tag1"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|r
argument_list|,
name|f
argument_list|,
name|q1
argument_list|,
literal|0
argument_list|,
name|q1
operator|.
name|length
argument_list|,
literal|1234L
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
decl_stmt|;
name|Cell
name|bbCell1
init|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|r
argument_list|,
name|f
argument_list|,
name|q2
argument_list|,
literal|0
argument_list|,
name|q2
operator|.
name|length
argument_list|,
literal|1234L
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|,
name|tags
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|bbCell2
init|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|bbCell1
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|kv
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|bbCell1
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|bbCell1
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|kv
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|bbCell1
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|bbCell1
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|kv
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|bbCell1
argument_list|,
name|q1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|bbCell2
argument_list|,
name|q2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|bbCell1
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|bbCell1
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|bbCell1
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|kv
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|bbCell1
argument_list|,
name|f
argument_list|,
name|q1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|bbCell2
argument_list|,
name|f
argument_list|,
name|q2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellFieldsAsPrimitiveTypesFromByteBufferedCell
parameter_list|()
block|{
name|int
name|ri
init|=
literal|123
decl_stmt|;
name|byte
index|[]
name|r
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ri
argument_list|)
decl_stmt|;
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
name|long
name|vl
init|=
literal|10981L
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|vl
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|r
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
decl_stmt|;
name|Cell
name|bbCell
init|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ri
argument_list|,
name|PrivateCellUtil
operator|.
name|getRowAsInt
argument_list|(
name|bbCell
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vl
argument_list|,
name|PrivateCellUtil
operator|.
name|getValueAsLong
argument_list|(
name|bbCell
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|vd
init|=
literal|3005.5
decl_stmt|;
name|v
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|vd
argument_list|)
expr_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|r
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|bbCell
operator|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vd
argument_list|,
name|PrivateCellUtil
operator|.
name|getValueAsDouble
argument_list|(
name|bbCell
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|BigDecimal
name|bd
init|=
operator|new
name|BigDecimal
argument_list|(
literal|9999
argument_list|)
decl_stmt|;
name|v
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|r
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|bbCell
operator|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bd
argument_list|,
name|PrivateCellUtil
operator|.
name|getValueAsBigDecimal
argument_list|(
name|bbCell
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteCell
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|r
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tags
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"tag1"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|r
argument_list|,
name|f
argument_list|,
name|q1
argument_list|,
literal|0
argument_list|,
name|q1
operator|.
name|length
argument_list|,
literal|1234L
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|NonExtendedCell
name|nonExtCell
init|=
operator|new
name|NonExtendedCell
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|writeCell
init|=
name|PrivateCellUtil
operator|.
name|writeCell
argument_list|(
name|nonExtCell
argument_list|,
name|os
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|byteArray
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|KeyValue
name|res
init|=
operator|new
name|KeyValue
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|equals
argument_list|(
name|kv
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|NonExtendedCell
implements|implements
name|Cell
block|{
specifier|private
name|KeyValue
name|kv
decl_stmt|;
specifier|public
name|NonExtendedCell
parameter_list|(
name|KeyValue
name|kv
parameter_list|)
block|{
name|this
operator|.
name|kv
operator|=
name|kv
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRowArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getRowArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getRowOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getRowLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getRowLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFamilyArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getFamilyArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFamilyOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getFamilyOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getFamilyLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getFamilyLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getQualifierArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getQualifierArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getQualifierOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQualifierLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getQualifierLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTypeByte
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getTypeByte
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSequenceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getSequenceId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValueArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getValueArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getValueOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getValueLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getTagsArray
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getTagsArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getTagsOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTagsLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|kv
operator|.
name|getTagsLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataType
name|getType
parameter_list|()
block|{
return|return
name|PrivateCellUtil
operator|.
name|toDataType
argument_list|(
name|getTypeByte
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

