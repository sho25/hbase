begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMovingAverage
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMovingAverage
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|long
index|[]
name|data
init|=
block|{
literal|1
block|,
literal|12
block|,
literal|13
block|,
literal|24
block|,
literal|25
block|,
literal|26
block|,
literal|37
block|,
literal|38
block|,
literal|39
block|,
literal|40
block|}
decl_stmt|;
specifier|private
name|double
name|delta
init|=
literal|0.1
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMovingAverage
parameter_list|()
throws|throws
name|Exception
block|{
name|MovingAverage
argument_list|<
name|?
argument_list|>
name|algorithm
init|=
operator|new
name|SimpleMovingAverage
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// [1, 12, 13, 24]
name|int
name|bound
init|=
literal|4
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12.5
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [1, 12, 13, 24, 25]
name|bound
operator|=
literal|5
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15.0
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [1, 12, 13, 24, 25, 26, 37, 38]
name|bound
operator|=
literal|8
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|22.0
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [1, 12, 13, 24, 25, 26, 37, 38, 39, 40]
for|for
control|(
init|;
name|index
operator|<
name|data
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|25.5
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWindowMovingAverage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Default size is 5.
name|MovingAverage
argument_list|<
name|?
argument_list|>
name|algorithm
init|=
operator|new
name|WindowMovingAverage
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// [1, 12, 13, 24]
name|int
name|bound
init|=
literal|4
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12.5
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [1, 12, 13, 24, 25]
name|bound
operator|=
literal|5
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15.0
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [24, 25, 26, 37, 38]
name|bound
operator|=
literal|8
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|30.0
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [26, 37, 38, 39, 40]
for|for
control|(
init|;
name|index
operator|<
name|data
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|36.0
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWeightedMovingAverage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Default size is 5.
name|MovingAverage
argument_list|<
name|?
argument_list|>
name|algorithm
init|=
operator|new
name|WeightedMovingAverage
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// [1, 12, 13, 24]
name|int
name|bound
init|=
literal|4
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12.5
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [1, 12, 13, 24, 25]
name|bound
operator|=
literal|5
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15.0
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [24, 25, 26, 37, 38]
name|bound
operator|=
literal|8
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|32.67
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// [26, 37, 38, 39, 40]
for|for
control|(
init|;
name|index
operator|<
name|data
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38.0
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExponentialMovingAverage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// [1, 12, 13, 24, 25, 26, 37, 38, 39, 40]
name|MovingAverage
argument_list|<
name|?
argument_list|>
name|algorithm
init|=
operator|new
name|ExponentialMovingAverage
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|bound
init|=
literal|5
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15.0
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|bound
operator|=
literal|6
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|18.67
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|bound
operator|=
literal|8
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|bound
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|29.16
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|data
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|algorithm
operator|.
name|updateMostRecentTime
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|34.97
argument_list|,
name|algorithm
operator|.
name|getAverageTime
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

