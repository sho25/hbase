begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|JavaCompiler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|ToolProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestClassFinder
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestClassFinder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestClassFinder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseCommonTestingUtility
name|testUtil
init|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASEPKG
init|=
literal|"tfcpkg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"Prefix"
decl_stmt|;
comment|// Use unique jar/class/package names in each test case with the help
comment|// of these global counters; we are mucking with ClassLoader in this test
comment|// and we don't want individual test cases to conflict via it.
specifier|private
specifier|static
name|AtomicLong
name|testCounter
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicLong
name|jarCounter
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|basePath
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|CustomClassloader
name|classLoader
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|createTestDir
parameter_list|()
throws|throws
name|IOException
block|{
name|basePath
operator|=
name|testUtil
operator|.
name|getDataTestDir
argument_list|(
name|TestClassFinder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|basePath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|basePath
operator|+=
literal|"/"
expr_stmt|;
block|}
comment|// Make sure we get a brand new directory.
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|testDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|deleteTestDir
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|testDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using new, clean directory="
operator|+
name|testDir
argument_list|)
expr_stmt|;
name|classLoader
operator|=
operator|new
name|CustomClassloader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|deleteTestDir
parameter_list|()
throws|throws
name|IOException
block|{
name|testUtil
operator|.
name|cleanupTestDir
argument_list|(
name|TestClassFinder
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderCanFindClassesInJars
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|FileAndPath
name|c1
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
literal|""
argument_list|,
literal|"c1"
argument_list|)
decl_stmt|;
name|FileAndPath
name|c2
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
literal|".nested"
argument_list|,
literal|"c2"
argument_list|)
decl_stmt|;
name|FileAndPath
name|c3
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
literal|""
argument_list|,
literal|"c3"
argument_list|)
decl_stmt|;
name|packageAndLoadJar
argument_list|(
name|c1
argument_list|,
name|c3
argument_list|)
expr_stmt|;
name|packageAndLoadJar
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|ClassFinder
name|allClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|allClasses
init|=
name|allClassesFinder
operator|.
name|findClasses
argument_list|(
name|makePackageName
argument_list|(
literal|""
argument_list|,
name|counter
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderHandlesConflicts
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|FileAndPath
name|c1
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
literal|""
argument_list|,
literal|"c1"
argument_list|)
decl_stmt|;
name|FileAndPath
name|c2
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
literal|""
argument_list|,
literal|"c2"
argument_list|)
decl_stmt|;
name|packageAndLoadJar
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|packageAndLoadJar
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|ClassFinder
name|allClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|allClasses
init|=
name|allClassesFinder
operator|.
name|findClasses
argument_list|(
name|makePackageName
argument_list|(
literal|""
argument_list|,
name|counter
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderHandlesNestedPackages
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|NESTED
init|=
literal|".nested"
decl_stmt|;
specifier|final
name|String
name|CLASSNAME1
init|=
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"1"
decl_stmt|;
specifier|final
name|String
name|CLASSNAME2
init|=
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"2"
decl_stmt|;
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|FileAndPath
name|c1
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
literal|""
argument_list|,
literal|"c1"
argument_list|)
decl_stmt|;
name|FileAndPath
name|c2
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
name|NESTED
argument_list|,
name|CLASSNAME1
argument_list|)
decl_stmt|;
name|FileAndPath
name|c3
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
name|NESTED
argument_list|,
name|CLASSNAME2
argument_list|)
decl_stmt|;
name|packageAndLoadJar
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|packageAndLoadJar
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|ClassFinder
name|allClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|nestedClasses
init|=
name|allClassesFinder
operator|.
name|findClasses
argument_list|(
name|makePackageName
argument_list|(
name|NESTED
argument_list|,
name|counter
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nestedClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|nestedClass1
init|=
name|makeClass
argument_list|(
name|NESTED
argument_list|,
name|CLASSNAME1
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nestedClasses
operator|.
name|contains
argument_list|(
name|nestedClass1
argument_list|)
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|nestedClass2
init|=
name|makeClass
argument_list|(
name|NESTED
argument_list|,
name|CLASSNAME2
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nestedClasses
operator|.
name|contains
argument_list|(
name|nestedClass2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderFiltersByNameInJar
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|final
name|String
name|classNamePrefix
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created jar "
operator|+
name|createAndLoadJar
argument_list|(
literal|""
argument_list|,
name|classNamePrefix
argument_list|,
name|counter
argument_list|)
argument_list|)
expr_stmt|;
name|ClassFinder
operator|.
name|FileNameFilter
name|notExcNameFilter
init|=
operator|new
name|ClassFinder
operator|.
name|FileNameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCandidateFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|absFilePath
parameter_list|)
block|{
return|return
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ClassFinder
name|incClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
literal|null
argument_list|,
name|notExcNameFilter
argument_list|,
literal|null
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|incClasses
init|=
name|incClassesFinder
operator|.
name|findClasses
argument_list|(
name|makePackageName
argument_list|(
literal|""
argument_list|,
name|counter
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|incClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|incClass
init|=
name|makeClass
argument_list|(
literal|""
argument_list|,
name|classNamePrefix
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|incClasses
operator|.
name|contains
argument_list|(
name|incClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderFiltersByClassInJar
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|final
name|String
name|classNamePrefix
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created jar "
operator|+
name|createAndLoadJar
argument_list|(
literal|""
argument_list|,
name|classNamePrefix
argument_list|,
name|counter
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ClassFinder
operator|.
name|ClassFilter
name|notExcClassFilter
init|=
operator|new
name|ClassFinder
operator|.
name|ClassFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCandidateClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
operator|!
name|c
operator|.
name|getSimpleName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ClassFinder
name|incClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|notExcClassFilter
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|incClasses
init|=
name|incClassesFinder
operator|.
name|findClasses
argument_list|(
name|makePackageName
argument_list|(
literal|""
argument_list|,
name|counter
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|incClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|incClass
init|=
name|makeClass
argument_list|(
literal|""
argument_list|,
name|classNamePrefix
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|incClasses
operator|.
name|contains
argument_list|(
name|incClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|createAndLoadJar
parameter_list|(
specifier|final
name|String
name|packageNameSuffix
parameter_list|,
specifier|final
name|String
name|classNamePrefix
parameter_list|,
specifier|final
name|long
name|counter
parameter_list|)
throws|throws
name|Exception
block|{
name|FileAndPath
name|c1
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
name|packageNameSuffix
argument_list|,
name|classNamePrefix
argument_list|)
decl_stmt|;
name|FileAndPath
name|c2
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
name|packageNameSuffix
argument_list|,
name|PREFIX
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|FileAndPath
name|c3
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
name|packageNameSuffix
argument_list|,
name|PREFIX
operator|+
name|classNamePrefix
operator|+
literal|"2"
argument_list|)
decl_stmt|;
return|return
name|packageAndLoadJar
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderFiltersByPathInJar
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|CLASSNAME
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|FileAndPath
name|c1
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
literal|""
argument_list|,
name|CLASSNAME
argument_list|)
decl_stmt|;
name|FileAndPath
name|c2
init|=
name|compileTestClass
argument_list|(
name|counter
argument_list|,
literal|""
argument_list|,
literal|"c2"
argument_list|)
decl_stmt|;
name|packageAndLoadJar
argument_list|(
name|c1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|excludedJar
init|=
name|packageAndLoadJar
argument_list|(
name|c2
argument_list|)
decl_stmt|;
comment|/* ResourcePathFilter will pass us the resourcePath as a path of a      * URL from the classloader. For Windows, the ablosute path and the      * one from the URL have different file separators.      */
specifier|final
name|String
name|excludedJarResource
init|=
operator|new
name|File
argument_list|(
name|excludedJar
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getRawSchemeSpecificPart
argument_list|()
decl_stmt|;
specifier|final
name|ClassFinder
operator|.
name|ResourcePathFilter
name|notExcJarFilter
init|=
operator|new
name|ClassFinder
operator|.
name|ResourcePathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCandidatePath
parameter_list|(
name|String
name|resourcePath
parameter_list|,
name|boolean
name|isJar
parameter_list|)
block|{
return|return
operator|!
name|isJar
operator|||
operator|!
name|resourcePath
operator|.
name|equals
argument_list|(
name|excludedJarResource
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ClassFinder
name|incClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|notExcJarFilter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|incClasses
init|=
name|incClassesFinder
operator|.
name|findClasses
argument_list|(
name|makePackageName
argument_list|(
literal|""
argument_list|,
name|counter
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|incClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|incClass
init|=
name|makeClass
argument_list|(
literal|""
argument_list|,
name|CLASSNAME
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|incClasses
operator|.
name|contains
argument_list|(
name|incClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderCanFindClassesInDirs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make some classes for us to find.  Class naming and packaging is kinda cryptic.
comment|// TODO: Fix.
specifier|final
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|final
name|String
name|classNamePrefix
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|pkgNameSuffix
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created jar "
operator|+
name|createAndLoadJar
argument_list|(
name|pkgNameSuffix
argument_list|,
name|classNamePrefix
argument_list|,
name|counter
argument_list|)
argument_list|)
expr_stmt|;
name|ClassFinder
name|allClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|classLoader
argument_list|)
decl_stmt|;
name|String
name|pkgName
init|=
name|makePackageName
argument_list|(
name|pkgNameSuffix
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|allClasses
init|=
name|allClassesFinder
operator|.
name|findClasses
argument_list|(
name|pkgName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Classes in "
operator|+
name|pkgName
argument_list|,
name|allClasses
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|classNameToFind
init|=
name|classNamePrefix
operator|+
name|counter
decl_stmt|;
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|allClasses
argument_list|,
name|classNameToFind
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|,
specifier|final
name|String
name|simpleName
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|classes
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|simpleName
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderFiltersByNameInDirs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make some classes for us to find.  Class naming and packaging is kinda cryptic.
comment|// TODO: Fix.
specifier|final
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|final
name|String
name|classNamePrefix
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|pkgNameSuffix
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created jar "
operator|+
name|createAndLoadJar
argument_list|(
name|pkgNameSuffix
argument_list|,
name|classNamePrefix
argument_list|,
name|counter
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|classNameToFilterOut
init|=
name|classNamePrefix
operator|+
name|counter
decl_stmt|;
specifier|final
name|ClassFinder
operator|.
name|FileNameFilter
name|notThisFilter
init|=
operator|new
name|ClassFinder
operator|.
name|FileNameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCandidateFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|absFilePath
parameter_list|)
block|{
return|return
operator|!
name|fileName
operator|.
name|equals
argument_list|(
name|classNameToFilterOut
operator|+
literal|".class"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|String
name|pkgName
init|=
name|makePackageName
argument_list|(
name|pkgNameSuffix
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|ClassFinder
name|allClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|allClasses
init|=
name|allClassesFinder
operator|.
name|findClasses
argument_list|(
name|pkgName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Classes in "
operator|+
name|pkgName
argument_list|,
name|allClasses
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ClassFinder
name|notThisClassFinder
init|=
operator|new
name|ClassFinder
argument_list|(
literal|null
argument_list|,
name|notThisFilter
argument_list|,
literal|null
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|notAllClasses
init|=
name|notThisClassFinder
operator|.
name|findClasses
argument_list|(
name|pkgName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|contains
argument_list|(
name|notAllClasses
argument_list|,
name|classNameToFilterOut
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allClasses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|notAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderFiltersByClassInDirs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make some classes for us to find.  Class naming and packaging is kinda cryptic.
comment|// TODO: Fix.
specifier|final
name|long
name|counter
init|=
name|testCounter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
specifier|final
name|String
name|classNamePrefix
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|pkgNameSuffix
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created jar "
operator|+
name|createAndLoadJar
argument_list|(
name|pkgNameSuffix
argument_list|,
name|classNamePrefix
argument_list|,
name|counter
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|makeClass
argument_list|(
name|pkgNameSuffix
argument_list|,
name|classNamePrefix
argument_list|,
name|counter
argument_list|)
decl_stmt|;
specifier|final
name|ClassFinder
operator|.
name|ClassFilter
name|notThisFilter
init|=
operator|new
name|ClassFinder
operator|.
name|ClassFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCandidateClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|c
operator|!=
name|clazz
return|;
block|}
block|}
decl_stmt|;
name|String
name|pkgName
init|=
name|makePackageName
argument_list|(
name|pkgNameSuffix
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|ClassFinder
name|allClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|allClasses
init|=
name|allClassesFinder
operator|.
name|findClasses
argument_list|(
name|pkgName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Classes in "
operator|+
name|pkgName
argument_list|,
name|allClasses
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ClassFinder
name|notThisClassFinder
init|=
operator|new
name|ClassFinder
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|notThisFilter
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|notAllClasses
init|=
name|notThisClassFinder
operator|.
name|findClasses
argument_list|(
name|pkgName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|contains
argument_list|(
name|notAllClasses
argument_list|,
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allClasses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|notAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderFiltersByPathInDirs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|hardcodedThisSubdir
init|=
literal|"hbase-common"
decl_stmt|;
specifier|final
name|ClassFinder
operator|.
name|ResourcePathFilter
name|notExcJarFilter
init|=
operator|new
name|ClassFinder
operator|.
name|ResourcePathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isCandidatePath
parameter_list|(
name|String
name|resourcePath
parameter_list|,
name|boolean
name|isJar
parameter_list|)
block|{
return|return
name|isJar
operator|||
operator|!
name|resourcePath
operator|.
name|contains
argument_list|(
name|hardcodedThisSubdir
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|String
name|thisPackage
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ClassFinder
name|notThisClassFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|notExcJarFilter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|notAllClasses
init|=
name|notThisClassFinder
operator|.
name|findClasses
argument_list|(
name|thisPackage
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notAllClasses
operator|.
name|contains
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClassFinderDefaultsToOwnPackage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Correct handling of nested packages is tested elsewhere, so here we just assume
comment|// pkgClasses is the correct answer that we don't have to check.
name|ClassFinder
name|allClassesFinder
init|=
operator|new
name|ClassFinder
argument_list|(
name|classLoader
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|pkgClasses
init|=
name|allClassesFinder
operator|.
name|findClasses
argument_list|(
name|ClassFinder
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|defaultClasses
init|=
name|allClassesFinder
operator|.
name|findClasses
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|pkgClasses
operator|.
name|toArray
argument_list|()
argument_list|,
name|defaultClasses
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FileAndPath
block|{
name|String
name|path
decl_stmt|;
name|File
name|file
decl_stmt|;
specifier|public
name|FileAndPath
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|makeClass
parameter_list|(
name|String
name|nestedPkgSuffix
parameter_list|,
name|String
name|className
parameter_list|,
name|long
name|counter
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|String
name|name
init|=
name|makePackageName
argument_list|(
name|nestedPkgSuffix
argument_list|,
name|counter
argument_list|)
operator|+
literal|"."
operator|+
name|className
operator|+
name|counter
decl_stmt|;
return|return
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|makePackageName
parameter_list|(
name|String
name|nestedSuffix
parameter_list|,
name|long
name|counter
parameter_list|)
block|{
return|return
name|BASEPKG
operator|+
name|counter
operator|+
name|nestedSuffix
return|;
block|}
comment|/**    * Compiles the test class with bogus code into a .class file.    * Unfortunately it's very tedious.    * @param counter Unique test counter.    * @param packageNameSuffix Package name suffix (e.g. ".suffix") for nesting, or "".    * @return The resulting .class file and the location in jar it is supposed to go to.    */
specifier|private
specifier|static
name|FileAndPath
name|compileTestClass
parameter_list|(
name|long
name|counter
parameter_list|,
name|String
name|packageNameSuffix
parameter_list|,
name|String
name|classNamePrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|classNamePrefix
operator|=
name|classNamePrefix
operator|+
name|counter
expr_stmt|;
name|String
name|packageName
init|=
name|makePackageName
argument_list|(
name|packageNameSuffix
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|String
name|javaPath
init|=
name|basePath
operator|+
name|classNamePrefix
operator|+
literal|".java"
decl_stmt|;
name|String
name|classPath
init|=
name|basePath
operator|+
name|classNamePrefix
operator|+
literal|".class"
decl_stmt|;
name|PrintStream
name|source
init|=
operator|new
name|PrintStream
argument_list|(
name|javaPath
argument_list|)
decl_stmt|;
name|source
operator|.
name|println
argument_list|(
literal|"package "
operator|+
name|packageName
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|source
operator|.
name|println
argument_list|(
literal|"public class "
operator|+
name|classNamePrefix
operator|+
literal|" { public static void main(String[] args) { } };"
argument_list|)
expr_stmt|;
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
name|JavaCompiler
name|jc
init|=
name|ToolProvider
operator|.
name|getSystemJavaCompiler
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|jc
operator|.
name|run
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|javaPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|File
name|classFile
init|=
operator|new
name|File
argument_list|(
name|classPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|classFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|FileAndPath
argument_list|(
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|'/'
argument_list|,
name|classFile
argument_list|)
return|;
block|}
comment|/**    * Makes a jar out of some class files. Unfortunately it's very tedious.    * @param filesInJar Files created via compileTestClass.    * @return path to the resulting jar file.    */
specifier|private
specifier|static
name|String
name|packageAndLoadJar
parameter_list|(
name|FileAndPath
modifier|...
name|filesInJar
parameter_list|)
throws|throws
name|Exception
block|{
comment|// First, write the bogus jar file.
name|String
name|path
init|=
name|basePath
operator|+
literal|"jar"
operator|+
name|jarCounter
operator|.
name|incrementAndGet
argument_list|()
operator|+
literal|".jar"
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|manifest
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jarOutputStream
init|=
operator|new
name|JarOutputStream
argument_list|(
name|fos
argument_list|,
name|manifest
argument_list|)
decl_stmt|;
comment|// Directory entries for all packages have to be added explicitly for
comment|// resources to be findable via ClassLoader. Directory entries must end
comment|// with "/"; the initial one is expected to, also.
name|Set
argument_list|<
name|String
argument_list|>
name|pathsInJar
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileAndPath
name|fileAndPath
range|:
name|filesInJar
control|)
block|{
name|String
name|pathToAdd
init|=
name|fileAndPath
operator|.
name|path
decl_stmt|;
while|while
condition|(
name|pathsInJar
operator|.
name|add
argument_list|(
name|pathToAdd
argument_list|)
condition|)
block|{
name|int
name|ix
init|=
name|pathToAdd
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|,
name|pathToAdd
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|ix
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|pathToAdd
operator|=
name|pathToAdd
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ix
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|pathInJar
range|:
name|pathsInJar
control|)
block|{
name|jarOutputStream
operator|.
name|putNextEntry
argument_list|(
operator|new
name|JarEntry
argument_list|(
name|pathInJar
argument_list|)
argument_list|)
expr_stmt|;
name|jarOutputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|FileAndPath
name|fileAndPath
range|:
name|filesInJar
control|)
block|{
name|File
name|file
init|=
name|fileAndPath
operator|.
name|file
decl_stmt|;
name|jarOutputStream
operator|.
name|putNextEntry
argument_list|(
operator|new
name|JarEntry
argument_list|(
name|fileAndPath
operator|.
name|path
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|allBytes
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|file
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fis
operator|.
name|read
argument_list|(
name|allBytes
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|jarOutputStream
operator|.
name|write
argument_list|(
name|allBytes
argument_list|)
expr_stmt|;
name|jarOutputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|jarOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add the file to classpath.
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jarFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|classLoader
operator|.
name|addURL
argument_list|(
name|jarFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jarFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
comment|// Java 11 workaround - Custom class loader to expose addUrl method of URLClassLoader
specifier|private
specifier|static
class|class
name|CustomClassloader
extends|extends
name|URLClassLoader
block|{
specifier|public
name|CustomClassloader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|,
name|ClassLoader
name|parentLoader
parameter_list|)
block|{
name|super
argument_list|(
name|urls
argument_list|,
name|parentLoader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addURL
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|super
operator|.
name|addURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

