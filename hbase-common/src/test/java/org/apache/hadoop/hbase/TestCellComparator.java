begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCellComparator
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCellComparator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CellComparator
name|comparator
init|=
name|CellComparator
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row_1_0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row10"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam_1_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam12"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCompareCells
parameter_list|()
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|comparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|comparator
operator|.
name|compareFamilies
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|2L
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|comparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|comparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellUtil
operator|.
name|equals
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareCellWithKey
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|PrivateCellUtil
operator|.
name|compare
argument_list|(
name|comparator
argument_list|,
name|kv1
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|)
operator|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|PrivateCellUtil
operator|.
name|compare
argument_list|(
name|comparator
argument_list|,
name|kv1
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|2L
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|PrivateCellUtil
operator|.
name|compare
argument_list|(
name|comparator
argument_list|,
name|kv1
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|PrivateCellUtil
operator|.
name|compare
argument_list|(
name|comparator
argument_list|,
name|kv1
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|PrivateCellUtil
operator|.
name|compare
argument_list|(
name|comparator
argument_list|,
name|kv1
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|kv2
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareByteBufferedCell
parameter_list|()
block|{
name|byte
index|[]
name|r1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|f1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|r1
argument_list|,
name|f1
argument_list|,
name|q1
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
decl_stmt|;
name|Cell
name|bbCell1
init|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|r2
argument_list|,
name|f1
argument_list|,
name|q1
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|bbCell2
init|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
comment|// compareColumns not on CellComparator so use Impl directly
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compareColumns
argument_list|(
name|bbCell1
argument_list|,
name|bbCell2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compareColumns
argument_list|(
name|bbCell1
argument_list|,
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|r2
argument_list|,
name|f1
argument_list|,
name|q2
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|bbCell3
init|=
operator|new
name|ByteBufferKeyValue
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compareFamilies
argument_list|(
name|bbCell2
argument_list|,
name|bbCell3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compareQualifiers
argument_list|(
name|bbCell2
argument_list|,
name|bbCell3
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compareColumns
argument_list|(
name|bbCell2
argument_list|,
name|bbCell3
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compareRows
argument_list|(
name|bbCell2
argument_list|,
name|bbCell3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comparator
operator|.
name|compareRows
argument_list|(
name|bbCell1
argument_list|,
name|bbCell2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test meta comparisons using our new ByteBufferKeyValue Cell type, the type we use everywhere    * in 2.0.    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaComparisons
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Meta compares
name|Cell
name|aaa
init|=
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236020145502"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|bbb
init|=
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,,99999999999999"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
decl_stmt|;
name|CellComparator
name|c
init|=
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|bbb
argument_list|,
name|aaa
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|Cell
name|ccc
init|=
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,,1236023996656"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"regioninfo"
argument_list|)
argument_list|,
literal|1236024396271L
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|ccc
argument_list|,
name|bbb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|Cell
name|x
init|=
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236034574162"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|9223372036854775807L
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|y
init|=
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestScanMultipleVersions,row_0500,1236034574162"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"regioninfo"
argument_list|)
argument_list|,
literal|1236034574912L
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Cell
name|createByteBufferKeyValueFromKeyValue
parameter_list|(
name|KeyValue
name|kv
parameter_list|)
block|{
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getBuffer
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteBufferKeyValue
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|,
name|bb
operator|.
name|remaining
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * More tests using ByteBufferKeyValue copied over from TestKeyValue which uses old KVs only.    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaComparisons2
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|CellComparator
name|c
init|=
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Cell
name|a
init|=
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|b
init|=
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,2"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,2"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",a,,0,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,2"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|compare
argument_list|(
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,2"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|",,1"
argument_list|)
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Cell
argument_list|>
name|set
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"umn"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|nb
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|Cell
index|[]
name|keys
init|=
block|{
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,\u0000\u0000,2"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|2
argument_list|,
name|nb
argument_list|)
argument_list|)
block|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,\u0001,3"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|3
argument_list|,
name|nb
argument_list|)
argument_list|)
block|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,,1"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|1
argument_list|,
name|nb
argument_list|)
argument_list|)
block|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,\u1000,5"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|5
argument_list|,
name|nb
argument_list|)
argument_list|)
block|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa,a,4"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|4
argument_list|,
name|nb
argument_list|)
argument_list|)
block|,
name|createByteBufferKeyValueFromKeyValue
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a,a,0"
argument_list|)
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
literal|0
argument_list|,
name|nb
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
comment|// Add to set with bad comparator
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|keys
argument_list|)
expr_stmt|;
comment|// This will output the keys incorrectly.
name|boolean
name|assertion
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|Cell
name|k
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
literal|"count="
operator|+
name|count
operator|+
literal|", "
operator|+
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|count
operator|++
operator|==
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// Expected
name|assertion
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
comment|// Make set with good comparator
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|set
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Cell
name|k
range|:
name|set
control|)
block|{
name|assertTrue
argument_list|(
literal|"count="
operator|+
name|count
operator|+
literal|", "
operator|+
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|count
operator|++
operator|==
name|k
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

