begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|KVComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCellComparator
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row_1_0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row10"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam_1_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam12"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCompareCells
parameter_list|()
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|false
argument_list|)
operator|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellComparator
operator|.
name|compareFamilies
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|2l
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|false
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|false
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam_1_2
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellComparator
operator|.
name|compareCommonFamilyPrefix
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|4
argument_list|)
operator|<
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row_1_0
argument_list|,
name|fam_1_2
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellComparator
operator|.
name|compareCommonRowPrefix
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|4
argument_list|)
operator|<
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual2
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellComparator
operator|.
name|compareCommonQualifierPrefix
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|4
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|CellComparator
operator|.
name|equals
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetShortMidpoint
parameter_list|()
block|{
name|KeyValue
operator|.
name|KVComparator
name|comparator
init|=
operator|new
name|KeyValue
operator|.
name|KVComparator
argument_list|()
decl_stmt|;
name|Cell
name|left
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|right
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|mid
init|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbbbbbb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mid
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaaaaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|mid
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaaaaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|mid
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
expr_stmt|;
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
name|comparator
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|mid
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that if meta comparator, it returns the right cell -- i.e.  no optimization done.
name|left
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|mid
operator|=
name|CellComparator
operator|.
name|getMidpoint
argument_list|(
operator|new
name|KeyValue
operator|.
name|MetaComparator
argument_list|()
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|mid
argument_list|,
literal|true
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|compare
argument_list|(
name|mid
argument_list|,
name|right
argument_list|,
literal|true
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

