begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestWeakObjectPool
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ObjectPool
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pool
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|pool
operator|=
operator|new
name|WeakObjectPool
argument_list|<>
argument_list|(
operator|new
name|ObjectPool
operator|.
name|ObjectFactory
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|createObject
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeys
parameter_list|()
block|{
name|Object
name|obj1
init|=
name|pool
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Object
name|obj2
init|=
name|pool
operator|.
name|get
argument_list|(
operator|new
name|String
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|obj1
argument_list|,
name|obj2
argument_list|)
expr_stmt|;
name|Object
name|obj3
init|=
name|pool
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|obj1
argument_list|,
name|obj3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWeakReference
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|obj1
init|=
name|pool
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|int
name|hash1
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|obj1
argument_list|)
decl_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Sleep a while because references newly becoming stale
comment|// may still remain when calling the {@code purge} method.
name|pool
operator|.
name|purge
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj2
init|=
name|pool
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|obj1
argument_list|,
name|obj2
argument_list|)
expr_stmt|;
name|obj1
operator|=
literal|null
expr_stmt|;
name|obj2
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|pool
operator|.
name|purge
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj3
init|=
name|pool
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|hash1
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|obj3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCongestion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|THREAD_COUNT
init|=
literal|100
decl_stmt|;
specifier|final
name|AtomicBoolean
name|assertionFailed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|expectedObjRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|prepareLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|endLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|THREAD_COUNT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|THREAD_COUNT
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|prepareLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|startLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|Object
name|obj
init|=
name|pool
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedObjRef
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|obj
argument_list|)
condition|)
block|{
if|if
condition|(
name|expectedObjRef
operator|.
name|get
argument_list|()
operator|!=
name|obj
condition|)
block|{
name|assertionFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertionFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|prepareLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|startLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|endLatch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|assertionFailed
operator|.
name|get
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

