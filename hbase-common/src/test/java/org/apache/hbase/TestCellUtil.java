begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestCellUtil
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCreateCellScannerCellList
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
literal|3
decl_stmt|;
name|Cell
index|[]
name|cs
init|=
name|getCells
argument_list|(
name|count
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|CellScanner
name|scanner
init|=
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateCellScannerFamilyMap
parameter_list|()
block|{
specifier|final
name|int
name|count
init|=
literal|3
decl_stmt|;
specifier|final
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Cell
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Cell
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|cs
init|=
name|getCells
argument_list|(
name|count
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|cs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CellScanner
name|scanner
init|=
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|advance
argument_list|()
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
operator|*
name|count
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|static
name|KeyValue
index|[]
name|getCells
parameter_list|(
specifier|final
name|int
name|howMany
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
block|{
name|KeyValue
index|[]
name|cells
init|=
operator|new
name|KeyValue
index|[
name|howMany
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|howMany
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|index
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|index
argument_list|,
name|family
argument_list|,
name|index
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|cells
index|[
name|i
index|]
operator|=
name|kv
expr_stmt|;
block|}
return|return
name|cells
return|;
block|}
block|}
end_class

end_unit

