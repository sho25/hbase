begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|TestBackupBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupSystemTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestBackupLogCleaner
extends|extends
name|TestBackupBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBackupLogCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// implements all test cases in 1 test since incremental full backup/
comment|// incremental backup has dependencies
annotation|@
name|Test
specifier|public
name|void
name|testBackupLogCleaner
parameter_list|()
throws|throws
name|Exception
block|{
comment|// #1 - create full backup for all tables
name|LOG
operator|.
name|info
argument_list|(
literal|"create full backup image for all tables"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableSetFullList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|table1
argument_list|,
name|table2
argument_list|,
name|table3
argument_list|,
name|table4
argument_list|)
decl_stmt|;
try|try
init|(
name|BackupSystemTable
name|systemTable
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
init|)
block|{
comment|// Verify that we have no backup sessions yet
name|assertFalse
argument_list|(
name|systemTable
operator|.
name|hasBackupSessions
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|walFiles
init|=
name|getListOfWALFiles
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|swalFiles
init|=
name|convert
argument_list|(
name|walFiles
argument_list|)
decl_stmt|;
name|BackupLogCleaner
name|cleaner
init|=
operator|new
name|BackupLogCleaner
argument_list|()
decl_stmt|;
name|cleaner
operator|.
name|setConf
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|setConf
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|deletable
init|=
name|cleaner
operator|.
name|getDeletableFiles
argument_list|(
name|walFiles
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|Iterables
operator|.
name|size
argument_list|(
name|deletable
argument_list|)
decl_stmt|;
comment|// We can delete all files because we do not have yet recorded backup sessions
name|assertTrue
argument_list|(
name|size
operator|==
name|walFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|systemTable
operator|.
name|addWALFiles
argument_list|(
name|swalFiles
argument_list|,
literal|"backup"
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|String
name|backupIdFull
init|=
name|fullTableBackup
argument_list|(
name|tableSetFullList
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkSucceeded
argument_list|(
name|backupIdFull
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check one more time
name|deletable
operator|=
name|cleaner
operator|.
name|getDeletableFiles
argument_list|(
name|walFiles
argument_list|)
expr_stmt|;
comment|// We can delete wal files because they were saved into backup system table table
name|size
operator|=
name|Iterables
operator|.
name|size
argument_list|(
name|deletable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|size
operator|==
name|walFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|newWalFiles
init|=
name|getListOfWALFiles
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"WAL list after full backup"
argument_list|)
expr_stmt|;
name|convert
argument_list|(
name|newWalFiles
argument_list|)
expr_stmt|;
comment|// New list of wal files is greater than the previous one,
comment|// because new wal per RS have been opened after full backup
name|assertTrue
argument_list|(
name|walFiles
operator|.
name|size
argument_list|()
operator|<
name|newWalFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
comment|// #2 - insert some data to table
name|HTable
name|t1
init|=
operator|(
name|HTable
operator|)
name|conn
operator|.
name|getTable
argument_list|(
name|table1
argument_list|)
decl_stmt|;
name|Put
name|p1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|p1
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row-t1"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|t1
operator|.
name|put
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
name|t1
operator|.
name|close
argument_list|()
expr_stmt|;
name|HTable
name|t2
init|=
operator|(
name|HTable
operator|)
name|conn
operator|.
name|getTable
argument_list|(
name|table2
argument_list|)
decl_stmt|;
name|Put
name|p2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|p2
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row-t2"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|t2
operator|.
name|put
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
name|t2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// #3 - incremental backup for multiple tables
name|List
argument_list|<
name|TableName
argument_list|>
name|tableSetIncList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|table1
argument_list|,
name|table2
argument_list|,
name|table3
argument_list|)
decl_stmt|;
name|String
name|backupIdIncMultiple
init|=
name|backupTables
argument_list|(
name|BackupType
operator|.
name|INCREMENTAL
argument_list|,
name|tableSetIncList
argument_list|,
name|BACKUP_ROOT_DIR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkSucceeded
argument_list|(
name|backupIdIncMultiple
argument_list|)
argument_list|)
expr_stmt|;
name|deletable
operator|=
name|cleaner
operator|.
name|getDeletableFiles
argument_list|(
name|newWalFiles
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|size
argument_list|(
name|deletable
argument_list|)
operator|==
name|newWalFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|convert
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|walFiles
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|fs
range|:
name|walFiles
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"+++WAL: "
operator|+
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getListOfWALFiles
parameter_list|(
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|logRoot
init|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|c
argument_list|)
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|it
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|logRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|logFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|lfs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lfs
operator|.
name|isFile
argument_list|()
operator|&&
operator|!
name|AbstractFSWALProvider
operator|.
name|isMetaFile
argument_list|(
name|lfs
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|logFiles
operator|.
name|add
argument_list|(
name|lfs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|lfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|logFiles
return|;
block|}
block|}
end_class

end_unit

