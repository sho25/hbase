begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLongArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestBackupManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBackupManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBackupManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|MiniHBaseCluster
name|cluster
decl_stmt|;
specifier|protected
specifier|static
name|Connection
name|conn
decl_stmt|;
specifier|protected
name|BackupManager
name|backupManager
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BackupManager
operator|.
name|decorateMasterConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|BackupManager
operator|.
name|decorateRegionServerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|conn
operator|=
name|UTIL
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|backupManager
operator|=
operator|new
name|BackupManager
argument_list|(
name|conn
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|backupManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|AtomicLongArray
name|startTimes
init|=
operator|new
name|AtomicLongArray
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|AtomicLongArray
name|stopTimes
init|=
operator|new
name|AtomicLongArray
argument_list|(
literal|2
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testStartBackupExclusiveOperation
parameter_list|()
block|{
name|long
name|sleepTime
init|=
literal|2000
decl_stmt|;
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|backupManager
operator|.
name|startBackupSession
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
name|startTimes
operator|.
name|compareAndSet
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|result
operator|=
name|startTimes
operator|.
name|compareAndSet
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"PANIC! Unreachable code"
argument_list|)
throw|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|result
operator|=
name|stopTimes
operator|.
name|compareAndSet
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|result
operator|=
name|stopTimes
operator|.
name|compareAndSet
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"PANIC! Unreachable code"
argument_list|)
throw|;
block|}
block|}
name|backupManager
operator|.
name|finishBackupSession
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
index|[]
name|workers
init|=
operator|new
name|Thread
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|workers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|workers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|workers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|workers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|workers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Diff start time="
operator|+
operator|(
name|startTimes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|-
name|startTimes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Diff finish time="
operator|+
operator|(
name|stopTimes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|-
name|stopTimes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|startTimes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|-
name|startTimes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|>=
name|sleepTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stopTimes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|-
name|stopTimes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|>=
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

