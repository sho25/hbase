begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
operator|.
name|succeeded
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupAdminImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupSystemTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|mapreduce
operator|.
name|MapReduceBackupMergeJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|mapreduce
operator|.
name|MapReduceHFileSplitterJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
operator|.
name|BackupUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestIncrementalBackupMergeWithFailures
extends|extends
name|TestBackupBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestIncrementalBackupMergeWithFailures
operator|.
name|class
argument_list|)
decl_stmt|;
enum|enum
name|FailurePhase
block|{
name|PHASE1
block|,
name|PHASE2
block|,
name|PHASE3
block|,
name|PHASE4
block|}
specifier|public
specifier|final
specifier|static
name|String
name|FAILURE_PHASE_KEY
init|=
literal|"failurePhase"
decl_stmt|;
specifier|static
class|class
name|BackupMergeJobWithFailures
extends|extends
name|MapReduceBackupMergeJob
block|{
name|FailurePhase
name|failurePhase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|val
init|=
name|conf
operator|.
name|get
argument_list|(
name|FAILURE_PHASE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|failurePhase
operator|=
name|FailurePhase
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failure phase is not set"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This is the exact copy of parent's run() with injections      * of different types of failures      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|bulkOutputConfKey
decl_stmt|;
comment|// TODO : run player on remote cluster
name|player
operator|=
operator|new
name|MapReduceHFileSplitterJob
argument_list|()
expr_stmt|;
name|bulkOutputConfKey
operator|=
name|MapReduceHFileSplitterJob
operator|.
name|BULK_OUTPUT_CONF_KEY
expr_stmt|;
comment|// Player reads all files in arbitrary directory structure and creates
comment|// a Map task for each file
name|String
name|bids
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|backupIds
argument_list|,
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Merge backup images "
operator|+
name|bids
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
argument_list|>
name|processedTableList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|finishedTables
init|=
literal|false
decl_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Start backup exclusive operation
name|table
operator|.
name|startBackupExclusiveOperation
argument_list|()
expr_stmt|;
comment|// Start merge operation
name|table
operator|.
name|startMergeOperation
argument_list|(
name|backupIds
argument_list|)
expr_stmt|;
comment|// Select most recent backup id
name|String
name|mergedBackupId
init|=
name|findMostRecentBackupId
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|tableNames
init|=
name|getTableNamesInBackupImages
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
name|BackupInfo
name|bInfo
init|=
name|table
operator|.
name|readBackupInfo
argument_list|(
name|backupIds
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|backupRoot
init|=
name|bInfo
operator|.
name|getBackupRootDir
argument_list|()
decl_stmt|;
comment|// PHASE 1
name|checkFailure
argument_list|(
name|FailurePhase
operator|.
name|PHASE1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Merge backup images for "
operator|+
name|tableNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Find input directories for table
name|Path
index|[]
name|dirPaths
init|=
name|findInputDirectories
argument_list|(
name|fs
argument_list|,
name|backupRoot
argument_list|,
name|tableNames
index|[
name|i
index|]
argument_list|,
name|backupIds
argument_list|)
decl_stmt|;
name|String
name|dirs
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|dirPaths
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|Path
name|bulkOutputPath
init|=
name|BackupUtils
operator|.
name|getBulkOutputDir
argument_list|(
name|BackupUtils
operator|.
name|getFileNameCompatibleString
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Delete content if exists
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|bulkOutputPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|bulkOutputPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not delete: "
operator|+
name|bulkOutputPath
argument_list|)
expr_stmt|;
block|}
block|}
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|bulkOutputConfKey
argument_list|,
name|bulkOutputPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|playerArgs
init|=
block|{
name|dirs
block|,
name|tableNames
index|[
name|i
index|]
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
comment|// PHASE 2
name|checkFailure
argument_list|(
name|FailurePhase
operator|.
name|PHASE2
argument_list|)
expr_stmt|;
name|player
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|player
operator|.
name|run
argument_list|(
name|playerArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|succeeded
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|// Add to processed table list
name|processedTableList
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|tableNames
index|[
name|i
index|]
argument_list|,
name|bulkOutputPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not merge backup images for "
operator|+
name|dirs
operator|+
literal|" (check Hadoop/MR and HBase logs). Player return code ="
operator|+
name|result
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Merge Job finished:"
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
init|=
name|toTableNameList
argument_list|(
name|processedTableList
argument_list|)
decl_stmt|;
comment|// PHASE 3
name|checkFailure
argument_list|(
name|FailurePhase
operator|.
name|PHASE3
argument_list|)
expr_stmt|;
name|table
operator|.
name|updateProcessedTablesForMerge
argument_list|(
name|tableList
argument_list|)
expr_stmt|;
name|finishedTables
operator|=
literal|true
expr_stmt|;
comment|// Move data
for|for
control|(
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
name|tn
range|:
name|processedTableList
control|)
block|{
name|moveData
argument_list|(
name|fs
argument_list|,
name|backupRoot
argument_list|,
name|tn
operator|.
name|getSecond
argument_list|()
argument_list|,
name|tn
operator|.
name|getFirst
argument_list|()
argument_list|,
name|mergedBackupId
argument_list|)
expr_stmt|;
block|}
comment|// PHASE 4
name|checkFailure
argument_list|(
name|FailurePhase
operator|.
name|PHASE4
argument_list|)
expr_stmt|;
comment|// Delete old data and update manifest
name|List
argument_list|<
name|String
argument_list|>
name|backupsToDelete
init|=
name|getBackupIdsToDelete
argument_list|(
name|backupIds
argument_list|,
name|mergedBackupId
argument_list|)
decl_stmt|;
name|deleteBackupImages
argument_list|(
name|backupsToDelete
argument_list|,
name|conn
argument_list|,
name|fs
argument_list|,
name|backupRoot
argument_list|)
expr_stmt|;
name|updateBackupManifest
argument_list|(
name|backupRoot
argument_list|,
name|mergedBackupId
argument_list|,
name|backupsToDelete
argument_list|)
expr_stmt|;
comment|// Finish merge session
name|table
operator|.
name|finishMergeOperation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finishedTables
condition|)
block|{
comment|// cleanup bulk directories and finish merge
comment|// merge MUST be repeated (no need for repair)
name|cleanupBulkLoadDirs
argument_list|(
name|fs
argument_list|,
name|toPathList
argument_list|(
name|processedTableList
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|finishMergeOperation
argument_list|()
expr_stmt|;
name|table
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Backup merge operation failed, you should try it again"
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
comment|// backup repair must be run
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Backup merge operation failed, run backup repair tool to restore system's integrity"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkFailure
parameter_list|(
name|FailurePhase
name|phase
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failurePhase
operator|!=
literal|null
operator|&&
name|failurePhase
operator|==
name|phase
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|phase
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestIncBackupMergeRestore
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|ADD_ROWS
init|=
literal|99
decl_stmt|;
comment|// #1 - create full backup for all tables
name|LOG
operator|.
name|info
argument_list|(
literal|"create full backup image for all tables"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|table1
argument_list|,
name|table2
argument_list|)
decl_stmt|;
comment|// Set custom Merge Job implementation
name|conf1
operator|.
name|setClass
argument_list|(
name|BackupRestoreFactory
operator|.
name|HBASE_BACKUP_MERGE_IMPL_CLASS
argument_list|,
name|BackupMergeJobWithFailures
operator|.
name|class
argument_list|,
name|BackupMergeJob
operator|.
name|class
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|(
name|HBaseAdmin
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|BackupAdminImpl
name|client
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|BackupRequest
name|request
init|=
name|createBackupRequest
argument_list|(
name|BackupType
operator|.
name|FULL
argument_list|,
name|tables
argument_list|,
name|BACKUP_ROOT_DIR
argument_list|)
decl_stmt|;
name|String
name|backupIdFull
init|=
name|client
operator|.
name|backupTables
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkSucceeded
argument_list|(
name|backupIdFull
argument_list|)
argument_list|)
expr_stmt|;
comment|// #2 - insert some data to table1
name|HTable
name|t1
init|=
name|insertIntoTable
argument_list|(
name|conn
argument_list|,
name|table1
argument_list|,
name|famName
argument_list|,
literal|1
argument_list|,
name|ADD_ROWS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"writing "
operator|+
name|ADD_ROWS
operator|+
literal|" rows to "
operator|+
name|table1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t1
argument_list|)
argument_list|,
name|NB_ROWS_IN_BATCH
operator|+
name|ADD_ROWS
argument_list|)
expr_stmt|;
name|t1
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"written "
operator|+
name|ADD_ROWS
operator|+
literal|" rows to "
operator|+
name|table1
argument_list|)
expr_stmt|;
name|HTable
name|t2
init|=
name|insertIntoTable
argument_list|(
name|conn
argument_list|,
name|table2
argument_list|,
name|famName
argument_list|,
literal|1
argument_list|,
name|ADD_ROWS
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t2
argument_list|)
argument_list|,
name|NB_ROWS_IN_BATCH
operator|+
name|ADD_ROWS
argument_list|)
expr_stmt|;
name|t2
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"written "
operator|+
name|ADD_ROWS
operator|+
literal|" rows to "
operator|+
name|table2
argument_list|)
expr_stmt|;
comment|// #3 - incremental backup for multiple tables
name|tables
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|table1
argument_list|,
name|table2
argument_list|)
expr_stmt|;
name|request
operator|=
name|createBackupRequest
argument_list|(
name|BackupType
operator|.
name|INCREMENTAL
argument_list|,
name|tables
argument_list|,
name|BACKUP_ROOT_DIR
argument_list|)
expr_stmt|;
name|String
name|backupIdIncMultiple
init|=
name|client
operator|.
name|backupTables
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkSucceeded
argument_list|(
name|backupIdIncMultiple
argument_list|)
argument_list|)
expr_stmt|;
name|t1
operator|=
name|insertIntoTable
argument_list|(
name|conn
argument_list|,
name|table1
argument_list|,
name|famName
argument_list|,
literal|2
argument_list|,
name|ADD_ROWS
argument_list|)
expr_stmt|;
name|t1
operator|.
name|close
argument_list|()
expr_stmt|;
name|t2
operator|=
name|insertIntoTable
argument_list|(
name|conn
argument_list|,
name|table2
argument_list|,
name|famName
argument_list|,
literal|2
argument_list|,
name|ADD_ROWS
argument_list|)
expr_stmt|;
name|t2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// #3 - incremental backup for multiple tables
name|request
operator|=
name|createBackupRequest
argument_list|(
name|BackupType
operator|.
name|INCREMENTAL
argument_list|,
name|tables
argument_list|,
name|BACKUP_ROOT_DIR
argument_list|)
expr_stmt|;
name|String
name|backupIdIncMultiple2
init|=
name|client
operator|.
name|backupTables
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkSucceeded
argument_list|(
name|backupIdIncMultiple2
argument_list|)
argument_list|)
expr_stmt|;
comment|// #4 Merge backup images with failures
for|for
control|(
name|FailurePhase
name|phase
range|:
name|FailurePhase
operator|.
name|values
argument_list|()
control|)
block|{
name|Configuration
name|conf
init|=
name|conn
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FAILURE_PHASE_KEY
argument_list|,
name|phase
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|BackupAdmin
name|bAdmin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|String
index|[]
name|backups
init|=
operator|new
name|String
index|[]
block|{
name|backupIdIncMultiple
block|,
name|backupIdIncMultiple2
block|}
decl_stmt|;
name|bAdmin
operator|.
name|mergeBackups
argument_list|(
name|backups
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|phase
operator|.
name|ordinal
argument_list|()
operator|<
name|FailurePhase
operator|.
name|PHASE4
operator|.
name|ordinal
argument_list|()
condition|)
block|{
comment|// No need to repair:
comment|// Both Merge and backup exclusive operations are finished
name|assertFalse
argument_list|(
name|table
operator|.
name|isMergeInProgress
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"IOException is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ee
parameter_list|)
block|{
comment|// Expected
block|}
block|}
else|else
block|{
comment|// Repair is required
name|assertTrue
argument_list|(
name|table
operator|.
name|isMergeInProgress
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|startBackupExclusiveOperation
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"IOException is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ee
parameter_list|)
block|{
comment|// Expected - clean up before proceeding
name|table
operator|.
name|finishMergeOperation
argument_list|()
expr_stmt|;
name|table
operator|.
name|finishBackupExclusiveOperation
argument_list|()
expr_stmt|;
block|}
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expected :"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now merge w/o failures
name|Configuration
name|conf
init|=
name|conn
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|FAILURE_PHASE_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|BackupRestoreFactory
operator|.
name|HBASE_BACKUP_MERGE_IMPL_CLASS
argument_list|)
expr_stmt|;
try|try
init|(
name|BackupAdmin
name|bAdmin
init|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|String
index|[]
name|backups
init|=
operator|new
name|String
index|[]
block|{
name|backupIdIncMultiple
block|,
name|backupIdIncMultiple2
block|}
decl_stmt|;
name|bAdmin
operator|.
name|mergeBackups
argument_list|(
name|backups
argument_list|)
expr_stmt|;
block|}
comment|// #6 - restore incremental backup for multiple tables, with overwrite
name|TableName
index|[]
name|tablesRestoreIncMultiple
init|=
operator|new
name|TableName
index|[]
block|{
name|table1
block|,
name|table2
block|}
decl_stmt|;
name|TableName
index|[]
name|tablesMapIncMultiple
init|=
operator|new
name|TableName
index|[]
block|{
name|table1_restore
block|,
name|table2_restore
block|}
decl_stmt|;
name|client
operator|.
name|restore
argument_list|(
name|BackupUtils
operator|.
name|createRestoreRequest
argument_list|(
name|BACKUP_ROOT_DIR
argument_list|,
name|backupIdIncMultiple2
argument_list|,
literal|false
argument_list|,
name|tablesRestoreIncMultiple
argument_list|,
name|tablesMapIncMultiple
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|hTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|table1_restore
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"After incremental restore: "
operator|+
name|hTable
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"f1 has "
operator|+
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|hTable
argument_list|,
name|famName
argument_list|)
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|hTable
argument_list|,
name|famName
argument_list|)
argument_list|,
name|NB_ROWS_IN_BATCH
operator|+
literal|2
operator|*
name|ADD_ROWS
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|close
argument_list|()
expr_stmt|;
name|hTable
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|table2_restore
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|hTable
argument_list|)
argument_list|,
name|NB_ROWS_IN_BATCH
operator|+
literal|2
operator|*
name|ADD_ROWS
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

