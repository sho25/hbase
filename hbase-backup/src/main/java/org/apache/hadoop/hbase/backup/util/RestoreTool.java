begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HBackupFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|RestoreJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|BulkLoadHFilesTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_comment
comment|/**  * A collection for methods used by multiple classes to restore HBase tables.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RestoreTool
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BackupUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|long
name|TABLE_AVAILABILITY_WAIT_TIME
init|=
literal|180000
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|ignoreDirs
init|=
block|{
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
block|}
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|Path
name|backupRootPath
decl_stmt|;
specifier|protected
name|String
name|backupId
decl_stmt|;
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
comment|// store table name and snapshot dir mapping
specifier|private
specifier|final
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|Path
argument_list|>
name|snapshotMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|RestoreTool
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|backupRootPath
parameter_list|,
specifier|final
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|backupRootPath
operator|=
name|backupRootPath
expr_stmt|;
name|this
operator|.
name|backupId
operator|=
name|backupId
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|backupRootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * return value represent path for:    * ".../user/biadmin/backup1/default/t1_dn/backup_1396650096738/archive/data/default/t1_dn"    * @param tableName table name    * @return path to table archive    * @throws IOException exception    */
name|Path
name|getTableArchivePath
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|HBackupFileSystem
operator|.
name|getTableBackupPath
argument_list|(
name|tableName
argument_list|,
name|backupRootPath
argument_list|,
name|backupId
argument_list|)
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
decl_stmt|;
name|Path
name|dataDir
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
decl_stmt|;
name|Path
name|archivePath
init|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|,
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tableArchivePath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|tableArchivePath
argument_list|)
operator|||
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tableArchivePath
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Folder tableArchivePath: "
operator|+
name|tableArchivePath
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exists"
argument_list|)
expr_stmt|;
name|tableArchivePath
operator|=
literal|null
expr_stmt|;
comment|// empty table has no archive
block|}
return|return
name|tableArchivePath
return|;
block|}
comment|/**    * Gets region list    * @param tableName table name    * @return RegionList region list    * @throws IOException exception    */
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|getRegionList
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableArchivePath
init|=
name|getTableArchivePath
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|children
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableArchivePath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|childStatus
range|:
name|children
control|)
block|{
comment|// here child refer to each region(Name)
name|Path
name|child
init|=
name|childStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|regionDirList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|regionDirList
return|;
block|}
name|void
name|modifyTableSync
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|modifyTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|int
name|attempt
init|=
literal|0
decl_stmt|;
name|int
name|maxAttempts
init|=
literal|600
decl_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|attempt
operator|++
expr_stmt|;
if|if
condition|(
name|attempt
operator|++
operator|>
name|maxAttempts
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timeout expired "
operator|+
operator|(
name|maxAttempts
operator|*
literal|100
operator|)
operator|+
literal|"ms"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * During incremental backup operation. Call WalPlayer to replay WAL in backup image Currently    * tableNames and newTablesNames only contain single table, will be expanded to multiple tables in    * the future    * @param conn HBase connection    * @param tableBackupPath backup path    * @param logDirs : incremental backup folders, which contains WAL    * @param tableNames : source tableNames(table names were backuped)    * @param newTableNames : target tableNames(table names to be restored to)    * @param incrBackupId incremental backup Id    * @throws IOException exception    */
specifier|public
name|void
name|incrementalRestoreTable
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Path
name|tableBackupPath
parameter_list|,
name|Path
index|[]
name|logDirs
parameter_list|,
name|TableName
index|[]
name|tableNames
parameter_list|,
name|TableName
index|[]
name|newTableNames
parameter_list|,
name|String
name|incrBackupId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
if|if
condition|(
name|tableNames
operator|.
name|length
operator|!=
name|newTableNames
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Number of source tables and target tables does not match!"
argument_list|)
throw|;
block|}
name|FileSystem
name|fileSys
init|=
name|tableBackupPath
operator|.
name|getFileSystem
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// for incremental backup image, expect the table already created either by user or previous
comment|// full backup. Here, check that all new tables exists
for|for
control|(
name|TableName
name|tableName
range|:
name|newTableNames
control|)
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HBase table "
operator|+
name|tableName
operator|+
literal|" does not exist. Create the table first, e.g. by restoring a full backup."
argument_list|)
throw|;
block|}
block|}
comment|// adjust table schema
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TableName
name|tableName
init|=
name|tableNames
index|[
name|i
index|]
decl_stmt|;
name|TableDescriptor
name|tableDescriptor
init|=
name|getTableDescriptor
argument_list|(
name|fileSys
argument_list|,
name|tableName
argument_list|,
name|incrBackupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableDescriptor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't find "
operator|+
name|tableName
operator|+
literal|"'s descriptor."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found descriptor "
operator|+
name|tableDescriptor
operator|+
literal|" through "
operator|+
name|incrBackupId
argument_list|)
expr_stmt|;
name|TableName
name|newTableName
init|=
name|newTableNames
index|[
name|i
index|]
decl_stmt|;
name|TableDescriptor
name|newTableDescriptor
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|newTableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|families
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tableDescriptor
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|existingFamilies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|newTableDescriptor
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|newTableDescriptor
argument_list|)
decl_stmt|;
name|boolean
name|schemaChangeNeeded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|family
range|:
name|families
control|)
block|{
if|if
condition|(
operator|!
name|existingFamilies
operator|.
name|contains
argument_list|(
name|family
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|schemaChangeNeeded
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|ColumnFamilyDescriptor
name|family
range|:
name|existingFamilies
control|)
block|{
if|if
condition|(
operator|!
name|families
operator|.
name|contains
argument_list|(
name|family
argument_list|)
condition|)
block|{
name|builder
operator|.
name|removeColumnFamily
argument_list|(
name|family
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaChangeNeeded
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schemaChangeNeeded
condition|)
block|{
name|modifyTableSync
argument_list|(
name|conn
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Changed "
operator|+
name|newTableDescriptor
operator|.
name|getTableName
argument_list|()
operator|+
literal|" to: "
operator|+
name|newTableDescriptor
argument_list|)
expr_stmt|;
block|}
block|}
name|RestoreJob
name|restoreService
init|=
name|BackupRestoreFactory
operator|.
name|getRestoreJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|restoreService
operator|.
name|run
argument_list|(
name|logDirs
argument_list|,
name|tableNames
argument_list|,
name|newTableNames
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fullRestoreTable
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Path
name|tableBackupPath
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableName
name|newTableName
parameter_list|,
name|boolean
name|truncateIfExists
parameter_list|,
name|String
name|lastIncrBackupId
parameter_list|)
throws|throws
name|IOException
block|{
name|createAndRestoreTable
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|newTableName
argument_list|,
name|tableBackupPath
argument_list|,
name|truncateIfExists
argument_list|,
name|lastIncrBackupId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns value represent path for path to backup table snapshot directory:    * "/$USER/SBACKUP_ROOT/backup_id/namespace/table/.hbase-snapshot"    * @param backupRootPath backup root path    * @param tableName table name    * @param backupId backup Id    * @return path for snapshot    */
name|Path
name|getTableSnapshotPath
parameter_list|(
name|Path
name|backupRootPath
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|backupId
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|HBackupFileSystem
operator|.
name|getTableBackupPath
argument_list|(
name|tableName
argument_list|,
name|backupRootPath
argument_list|,
name|backupId
argument_list|)
argument_list|,
name|HConstants
operator|.
name|SNAPSHOT_DIR_NAME
argument_list|)
return|;
block|}
comment|/**    * Returns value represent path for:    * ""/$USER/SBACKUP_ROOT/backup_id/namespace/table/.hbase-snapshot/    *    snapshot_1396650097621_namespace_table"    * this path contains .snapshotinfo, .tabledesc (0.96 and 0.98) this path contains .snapshotinfo,    * .data.manifest (trunk)    * @param tableName table name    * @return path to table info    * @throws IOException exception    */
name|Path
name|getTableInfoPath
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableSnapShotPath
init|=
name|getTableSnapshotPath
argument_list|(
name|backupRootPath
argument_list|,
name|tableName
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
name|Path
name|tableInfoPath
init|=
literal|null
decl_stmt|;
comment|// can't build the path directly as the timestamp values are different
name|FileStatus
index|[]
name|snapshots
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableSnapShotPath
argument_list|,
operator|new
name|SnapshotDescriptionUtils
operator|.
name|CompletedSnaphotDirectoriesFilter
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|snapshot
range|:
name|snapshots
control|)
block|{
name|tableInfoPath
operator|=
name|snapshot
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|// SnapshotManifest.DATA_MANIFEST_NAME = "data.manifest";
if|if
condition|(
name|tableInfoPath
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"data.manifest"
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|tableInfoPath
return|;
block|}
comment|/**    * Get table descriptor    * @param tableName is the table backed up    * @return {@link TableDescriptor} saved in backup image of the table    */
name|TableDescriptor
name|getTableDesc
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableInfoPath
init|=
name|this
operator|.
name|getTableInfoPath
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|SnapshotDescription
name|desc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|tableInfoPath
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableInfoPath
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|TableDescriptor
name|tableDescriptor
init|=
name|manifest
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"couldn't find Table Desc for table: "
operator|+
name|tableName
operator|+
literal|" under tableInfoPath: "
operator|+
name|tableInfoPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"tableDescriptor.getNameAsString() = "
operator|+
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"couldn't find Table Desc for table: "
operator|+
name|tableName
operator|+
literal|" under tableInfoPath: "
operator|+
name|tableInfoPath
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|tableDescriptor
return|;
block|}
specifier|private
name|TableDescriptor
name|getTableDescriptor
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|lastIncrBackupId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|lastIncrBackupId
operator|!=
literal|null
condition|)
block|{
name|String
name|target
init|=
name|BackupUtils
operator|.
name|getTableBackupDir
argument_list|(
name|backupRootPath
operator|.
name|toString
argument_list|()
argument_list|,
name|lastIncrBackupId
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|FSTableDescriptors
operator|.
name|getTableDescriptorFromFs
argument_list|(
name|fileSys
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|createAndRestoreTable
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableName
name|newTableName
parameter_list|,
name|Path
name|tableBackupPath
parameter_list|,
name|boolean
name|truncateIfExists
parameter_list|,
name|String
name|lastIncrBackupId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|newTableName
operator|==
literal|null
condition|)
block|{
name|newTableName
operator|=
name|tableName
expr_stmt|;
block|}
name|FileSystem
name|fileSys
init|=
name|tableBackupPath
operator|.
name|getFileSystem
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// get table descriptor first
name|TableDescriptor
name|tableDescriptor
init|=
name|getTableDescriptor
argument_list|(
name|fileSys
argument_list|,
name|tableName
argument_list|,
name|lastIncrBackupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableDescriptor
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieved descriptor: "
operator|+
name|tableDescriptor
operator|+
literal|" thru "
operator|+
name|lastIncrBackupId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableDescriptor
operator|==
literal|null
condition|)
block|{
name|Path
name|tableSnapshotPath
init|=
name|getTableSnapshotPath
argument_list|(
name|backupRootPath
argument_list|,
name|tableName
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSys
operator|.
name|exists
argument_list|(
name|tableSnapshotPath
argument_list|)
condition|)
block|{
comment|// snapshot path exist means the backup path is in HDFS
comment|// check whether snapshot dir already recorded for target table
if|if
condition|(
name|snapshotMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SnapshotDescription
name|desc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fileSys
argument_list|,
name|tableSnapshotPath
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fileSys
argument_list|,
name|tableSnapshotPath
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|=
name|manifest
operator|.
name|getTableDescriptor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableDescriptor
operator|=
name|getTableDesc
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|snapshotMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|getTableInfoPath
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableDescriptor
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found no table descriptor in the snapshot dir, previous schema would be lost"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Table snapshot directory: "
operator|+
name|tableSnapshotPath
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
block|}
name|Path
name|tableArchivePath
init|=
name|getTableArchivePath
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableArchivePath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tableDescriptor
operator|!=
literal|null
condition|)
block|{
comment|// find table descriptor but no archive dir means the table is empty, create table and exit
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"find table descriptor but no archive dir for table "
operator|+
name|tableName
operator|+
literal|", will only create table"
argument_list|)
expr_stmt|;
block|}
name|tableDescriptor
operator|=
name|TableDescriptorBuilder
operator|.
name|copy
argument_list|(
name|newTableName
argument_list|,
name|tableDescriptor
argument_list|)
expr_stmt|;
name|checkAndCreateTable
argument_list|(
name|conn
argument_list|,
name|tableBackupPath
argument_list|,
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|null
argument_list|,
name|tableDescriptor
argument_list|,
name|truncateIfExists
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot restore hbase table because directory '"
operator|+
literal|" tableArchivePath is null."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|tableDescriptor
operator|==
literal|null
condition|)
block|{
name|tableDescriptor
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|newTableName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableDescriptor
operator|=
name|TableDescriptorBuilder
operator|.
name|copy
argument_list|(
name|newTableName
argument_list|,
name|tableDescriptor
argument_list|)
expr_stmt|;
block|}
comment|// record all region dirs:
comment|// load all files in dir
try|try
block|{
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionPathList
init|=
name|getRegionList
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// should only try to create the table with all region informations, so we could pre-split
comment|// the regions in fine grain
name|checkAndCreateTable
argument_list|(
name|conn
argument_list|,
name|tableBackupPath
argument_list|,
name|tableName
argument_list|,
name|newTableName
argument_list|,
name|regionPathList
argument_list|,
name|tableDescriptor
argument_list|,
name|truncateIfExists
argument_list|)
expr_stmt|;
name|RestoreJob
name|restoreService
init|=
name|BackupRestoreFactory
operator|.
name|getRestoreJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[
name|regionPathList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|regionPathList
operator|.
name|toArray
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|restoreService
operator|.
name|run
argument_list|(
name|paths
argument_list|,
operator|new
name|TableName
index|[]
block|{
name|tableName
block|}
argument_list|,
operator|new
name|TableName
index|[]
block|{
name|newTableName
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot restore hbase table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Gets region list    * @param tableArchivePath table archive path    * @return RegionList region list    * @throws IOException exception    */
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|getRegionList
parameter_list|(
name|Path
name|tableArchivePath
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|children
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableArchivePath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|childStatus
range|:
name|children
control|)
block|{
comment|// here child refer to each region(Name)
name|Path
name|child
init|=
name|childStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|regionDirList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|regionDirList
return|;
block|}
comment|/**    * Calculate region boundaries and add all the column families to the table descriptor    * @param regionDirList region dir list    * @return a set of keys to store the boundaries    */
name|byte
index|[]
index|[]
name|generateBoundaryKeys
parameter_list|(
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirList
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|// Build a set of keys to store the boundaries
comment|// calculate region boundaries and add all the column families to the table descriptor
for|for
control|(
name|Path
name|regionDir
range|:
name|regionDirList
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing region dir: "
operator|+
name|regionDir
argument_list|)
expr_stmt|;
name|Path
name|hfofDir
init|=
name|regionDir
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|hfofDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"HFileOutputFormat dir "
operator|+
name|hfofDir
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
name|FileStatus
index|[]
name|familyDirStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|hfofDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyDirStatuses
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No families found in "
operator|+
name|hfofDir
argument_list|)
throw|;
block|}
for|for
control|(
name|FileStatus
name|stat
range|:
name|familyDirStatuses
control|)
block|{
if|if
condition|(
operator|!
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping non-directory "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|isIgnore
init|=
literal|false
decl_stmt|;
name|String
name|pathName
init|=
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ignore
range|:
name|ignoreDirs
control|)
block|{
if|if
condition|(
name|pathName
operator|.
name|contains
argument_list|(
name|ignore
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping non-family directory"
operator|+
name|pathName
argument_list|)
expr_stmt|;
name|isIgnore
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isIgnore
condition|)
block|{
continue|continue;
block|}
name|Path
name|familyDir
init|=
name|stat
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing family dir ["
operator|+
name|familyDir
operator|.
name|toString
argument_list|()
operator|+
literal|" in region ["
operator|+
name|regionDir
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// Skip _logs, etc
if|if
condition|(
name|familyDir
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|||
name|familyDir
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// start to parse hfile inside one family dir
name|Path
index|[]
name|hfiles
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|familyDir
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|hfile
range|:
name|hfiles
control|)
block|{
if|if
condition|(
name|hfile
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|||
name|hfile
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|||
name|StoreFileInfo
operator|.
name|isReference
argument_list|(
name|hfile
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|hfile
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|hfile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|first
decl_stmt|,
name|last
decl_stmt|;
try|try
block|{
name|first
operator|=
name|reader
operator|.
name|getFirstRowKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|last
operator|=
name|reader
operator|.
name|getLastRowKey
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to figure out region boundaries hfile="
operator|+
name|hfile
operator|+
literal|" first="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
argument_list|)
operator|+
literal|" last="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
comment|// To eventually infer start key-end key boundaries
name|Integer
name|value
init|=
name|map
operator|.
name|containsKey
argument_list|(
name|first
argument_list|)
condition|?
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
name|first
argument_list|)
else|:
literal|0
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|first
argument_list|,
name|value
operator|+
literal|1
argument_list|)
expr_stmt|;
name|value
operator|=
name|map
operator|.
name|containsKey
argument_list|(
name|last
argument_list|)
condition|?
operator|(
name|Integer
operator|)
name|map
operator|.
name|get
argument_list|(
name|last
argument_list|)
else|:
literal|0
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|last
argument_list|,
name|value
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|BulkLoadHFilesTool
operator|.
name|inferBoundaries
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**    * Prepare the table for bulkload, most codes copied from {@code createTable} method in    * {@code BulkLoadHFilesTool}.    * @param conn connection    * @param tableBackupPath path    * @param tableName table name    * @param targetTableName target table name    * @param regionDirList region directory list    * @param htd table descriptor    * @param truncateIfExists truncates table if exists    * @throws IOException exception    */
specifier|private
name|void
name|checkAndCreateTable
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Path
name|tableBackupPath
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableName
name|targetTableName
parameter_list|,
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|regionDirList
parameter_list|,
name|TableDescriptor
name|htd
parameter_list|,
name|boolean
name|truncateIfExists
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|boolean
name|createNew
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|targetTableName
argument_list|)
condition|)
block|{
if|if
condition|(
name|truncateIfExists
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Truncating exising target table '"
operator|+
name|targetTableName
operator|+
literal|"', preserving region splits"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|targetTableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|truncateTable
argument_list|(
name|targetTableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using exising target table '"
operator|+
name|targetTableName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|createNew
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|createNew
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating target table '"
operator|+
name|targetTableName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|keys
decl_stmt|;
if|if
condition|(
name|regionDirList
operator|==
literal|null
operator|||
name|regionDirList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keys
operator|=
name|generateBoundaryKeys
argument_list|(
name|regionDirList
argument_list|)
expr_stmt|;
comment|// create table using table descriptor and region boundaries
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|targetTableName
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
operator|>
name|TABLE_AVAILABILITY_WAIT_TIME
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Time out "
operator|+
name|TABLE_AVAILABILITY_WAIT_TIME
operator|+
literal|"ms expired, table "
operator|+
name|targetTableName
operator|+
literal|" is still not available"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

