begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|HBackupFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|RestoreRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupManifest
operator|.
name|BackupImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A collection for methods used by multiple classes to backup HBase tables.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|BackupUtils
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BackupUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOGNAME_SEPARATOR
init|=
literal|"."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MILLISEC_IN_HOUR
init|=
literal|3600000
decl_stmt|;
specifier|private
name|BackupUtils
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Instantiating utility class..."
argument_list|)
throw|;
block|}
comment|/**    * Loop through the RS log timestamp map for the tables, for each RS, find the min timestamp value    * for the RS among the tables.    * @param rsLogTimestampMap timestamp map    * @return the min timestamp of each RS    */
specifier|public
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getRSLogTimestampMins
parameter_list|(
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|rsLogTimestampMap
parameter_list|)
block|{
if|if
condition|(
name|rsLogTimestampMap
operator|==
literal|null
operator|||
name|rsLogTimestampMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|rsLogTimestampMins
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
argument_list|>
name|rsLogTimestampMapByRS
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|tableEntry
range|:
name|rsLogTimestampMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TableName
name|table
init|=
name|tableEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|rsLogTimestamp
init|=
name|tableEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|rsEntry
range|:
name|rsLogTimestamp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|rs
init|=
name|rsEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|ts
init|=
name|rsEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rsLogTimestampMapByRS
operator|.
name|containsKey
argument_list|(
name|rs
argument_list|)
condition|)
block|{
name|rsLogTimestampMapByRS
operator|.
name|put
argument_list|(
name|rs
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|rsLogTimestampMapByRS
operator|.
name|get
argument_list|(
name|rs
argument_list|)
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsLogTimestampMapByRS
operator|.
name|get
argument_list|(
name|rs
argument_list|)
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|rsLogTimestampMapByRS
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|rs
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|rsLogTimestampMins
operator|.
name|put
argument_list|(
name|rs
argument_list|,
name|BackupUtils
operator|.
name|getMinValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rsLogTimestampMins
return|;
block|}
comment|/**    * copy out Table RegionInfo into incremental backup image need to consider move this logic into    * HBackupFileSystem    * @param conn connection    * @param backupInfo backup info    * @param conf configuration    * @throws IOException exception    */
specifier|public
specifier|static
name|void
name|copyTableRegionInfo
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|BackupInfo
name|backupInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// for each table in the table set, copy out the table info and region
comment|// info files in the correct directory structure
for|for
control|(
name|TableName
name|table
range|:
name|backupInfo
operator|.
name|getTables
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|conn
argument_list|,
name|table
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Table "
operator|+
name|table
operator|+
literal|" does not exists, skipping it."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TableDescriptor
name|orig
init|=
name|FSTableDescriptors
operator|.
name|getTableDescriptorFromFs
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|table
argument_list|)
decl_stmt|;
comment|// write a copy of descriptor to the target directory
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|backupInfo
operator|.
name|getTableBackupDir
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|targetFs
init|=
name|target
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSTableDescriptors
name|descriptors
init|=
operator|new
name|FSTableDescriptors
argument_list|(
name|conf
argument_list|,
name|targetFs
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|descriptors
operator|.
name|createTableDescriptorForTableDirectory
argument_list|(
name|target
argument_list|,
name|orig
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to copy table info for:"
operator|+
name|table
operator|+
literal|" target: "
operator|+
name|target
operator|+
literal|" descriptor: "
operator|+
name|orig
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished copying tableinfo."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|conn
argument_list|,
name|table
argument_list|)
decl_stmt|;
comment|// For each region, write the region info to disk
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting to write region info for table "
operator|+
name|table
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|regions
control|)
block|{
name|Path
name|regionDir
init|=
name|HRegion
operator|.
name|getRegionDir
argument_list|(
operator|new
name|Path
argument_list|(
name|backupInfo
operator|.
name|getTableBackupDir
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|,
name|regionInfo
argument_list|)
decl_stmt|;
name|regionDir
operator|=
operator|new
name|Path
argument_list|(
name|backupInfo
operator|.
name|getTableBackupDir
argument_list|(
name|table
argument_list|)
argument_list|,
name|regionDir
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writeRegioninfoOnFilesystem
argument_list|(
name|conf
argument_list|,
name|targetFs
argument_list|,
name|regionDir
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished writing region info for table "
operator|+
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Write the .regioninfo file on-disk.    */
specifier|public
specifier|static
name|void
name|writeRegioninfoOnFilesystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|regionInfoDir
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|content
init|=
name|RegionInfo
operator|.
name|toDelimitedByteArray
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|Path
name|regionInfoFile
init|=
operator|new
name|Path
argument_list|(
name|regionInfoDir
argument_list|,
literal|"."
operator|+
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER_STR
argument_list|)
decl_stmt|;
comment|// First check to get the permissions
name|FsPermission
name|perms
init|=
name|FSUtils
operator|.
name|getFilePermissions
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|HConstants
operator|.
name|DATA_FILE_UMASK_KEY
argument_list|)
decl_stmt|;
comment|// Write the RegionInfo file content
name|FSDataOutputStream
name|out
init|=
name|FSUtils
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|regionInfoFile
argument_list|,
name|perms
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Parses hostname:port from WAL file path    * @param p path to WAL file    * @return hostname:port    */
specifier|public
specifier|static
name|String
name|parseHostNameFromLogFile
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|AbstractFSWALProvider
operator|.
name|isArchivedLogFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
name|BackupUtils
operator|.
name|parseHostFromOldLog
argument_list|(
name|p
argument_list|)
return|;
block|}
else|else
block|{
name|ServerName
name|sname
init|=
name|AbstractFSWALProvider
operator|.
name|getServerNameFromWALDirectoryName
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|sname
operator|!=
literal|null
condition|)
block|{
return|return
name|sname
operator|.
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Skip log file (can't parse): "
operator|+
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Skip log file (can't parse): "
operator|+
name|p
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Returns WAL file name    * @param walFileName WAL file name    * @return WAL file name    */
specifier|public
specifier|static
name|String
name|getUniqueWALFileNamePart
parameter_list|(
name|String
name|walFileName
parameter_list|)
block|{
return|return
name|getUniqueWALFileNamePart
argument_list|(
operator|new
name|Path
argument_list|(
name|walFileName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns WAL file name    * @param p WAL file path    * @return WAL file name    */
specifier|public
specifier|static
name|String
name|getUniqueWALFileNamePart
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * Get the total length of files under the given directory recursively.    * @param fs The hadoop file system    * @param dir The target directory    * @return the total length of files    * @throws IOException exception    */
specifier|public
specifier|static
name|long
name|getFilesLength
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalLength
init|=
literal|0
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|files
control|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|totalLength
operator|+=
name|getFilesLength
argument_list|(
name|fs
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|totalLength
operator|+=
name|fileStatus
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|totalLength
return|;
block|}
comment|/**    * Get list of all old WAL files (WALs and archive)    * @param c configuration    * @param hostTimestampMap {host,timestamp} map    * @return list of WAL files    * @throws IOException exception    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getWALFilesOlderThan
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|hostTimestampMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|Path
name|oldLogDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|PathFilter
name|filter
init|=
name|p
lambda|->
block|{
try|try
block|{
if|if
condition|(
name|AbstractFSWALProvider
operator|.
name|isMetaFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|host
init|=
name|parseHostNameFromLogFile
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Long
name|oldTimestamp
init|=
name|hostTimestampMap
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|Long
name|currentLogTS
init|=
name|BackupUtils
operator|.
name|getCreationTime
argument_list|(
name|p
argument_list|)
decl_stmt|;
return|return
name|currentLogTS
operator|<=
name|oldTimestamp
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not parse"
operator|+
name|p
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|logFiles
operator|=
name|BackupUtils
operator|.
name|getFiles
argument_list|(
name|fs
argument_list|,
name|logDir
argument_list|,
name|logFiles
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|logFiles
operator|=
name|BackupUtils
operator|.
name|getFiles
argument_list|(
name|fs
argument_list|,
name|oldLogDir
argument_list|,
name|logFiles
argument_list|,
name|filter
argument_list|)
expr_stmt|;
return|return
name|logFiles
return|;
block|}
specifier|public
specifier|static
name|TableName
index|[]
name|parseTableNames
parameter_list|(
name|String
name|tables
parameter_list|)
block|{
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|tableArray
init|=
name|tables
operator|.
name|split
argument_list|(
name|BackupRestoreConstants
operator|.
name|TABLENAME_DELIMITER_IN_COMMAND
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|ret
init|=
operator|new
name|TableName
index|[
name|tableArray
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Check whether the backup path exist    * @param backupStr backup    * @param conf configuration    * @return Yes if path exists    * @throws IOException exception    */
specifier|public
specifier|static
name|boolean
name|checkPathExist
parameter_list|(
name|String
name|backupStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isExist
init|=
literal|false
decl_stmt|;
name|Path
name|backupPath
init|=
operator|new
name|Path
argument_list|(
name|backupStr
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|backupPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|targetFsScheme
init|=
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Schema of given url: "
operator|+
name|backupStr
operator|+
literal|" is: "
operator|+
name|targetFsScheme
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileSys
operator|.
name|exists
argument_list|(
name|backupPath
argument_list|)
condition|)
block|{
name|isExist
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|isExist
return|;
block|}
comment|/**    * Check target path first, confirm it doesn't exist before backup    * @param backupRootPath backup destination path    * @param conf configuration    * @throws IOException exception    */
specifier|public
specifier|static
name|void
name|checkTargetDir
parameter_list|(
name|String
name|backupRootPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|targetExists
decl_stmt|;
try|try
block|{
name|targetExists
operator|=
name|checkPathExist
argument_list|(
name|backupRootPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|expMsg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|newMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expMsg
operator|.
name|contains
argument_list|(
literal|"No FileSystem for scheme"
argument_list|)
condition|)
block|{
name|newMsg
operator|=
literal|"Unsupported filesystem scheme found in the backup target url. Error Message: "
operator|+
name|newMsg
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|newMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|newMsg
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|targetExists
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using existing backup root dir: "
operator|+
name|backupRootPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup root dir "
operator|+
name|backupRootPath
operator|+
literal|" does not exist. Will be created."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the min value for all the Values a map.    * @param map map    * @return the min value    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Long
name|getMinValue
parameter_list|(
name|HashMap
argument_list|<
name|T
argument_list|,
name|Long
argument_list|>
name|map
parameter_list|)
block|{
name|Long
name|minTimestamp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|timestampList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|timestampList
argument_list|)
expr_stmt|;
comment|// The min among all the RS log timestamps will be kept in backup system table table.
name|minTimestamp
operator|=
name|timestampList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|minTimestamp
return|;
block|}
comment|/**    * Parses host name:port from archived WAL path    * @param p path    * @return host name    */
specifier|public
specifier|static
name|String
name|parseHostFromOldLog
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
name|String
name|n
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|n
operator|.
name|lastIndexOf
argument_list|(
name|LOGNAME_SEPARATOR
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|n
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
literal|"UTF8"
argument_list|)
decl_stmt|;
return|return
name|ServerName
operator|.
name|parseHostname
argument_list|(
name|s
argument_list|)
operator|+
literal|":"
operator|+
name|ServerName
operator|.
name|parsePort
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skip log file (can't parse): "
operator|+
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Given the log file, parse the timestamp from the file name. The timestamp is the last number.    * @param p a path to the log file    * @return the timestamp    * @throws IOException exception    */
specifier|public
specifier|static
name|Long
name|getCreationTime
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|idx
init|=
name|p
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|LOGNAME_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot parse timestamp from path "
operator|+
name|p
argument_list|)
throw|;
block|}
name|String
name|ts
init|=
name|p
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|ts
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|it
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|lfs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lfs
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// apply filter
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|lfs
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|lfs
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|files
return|;
block|}
specifier|public
specifier|static
name|void
name|cleanupBackupData
parameter_list|(
name|BackupInfo
name|context
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|cleanupHLogDir
argument_list|(
name|context
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cleanupTargetDir
argument_list|(
name|context
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clean up directories which are generated when DistCp copying hlogs    * @param backupInfo backup info    * @param conf configuration    * @throws IOException exception    */
specifier|private
specifier|static
name|void
name|cleanupHLogDir
parameter_list|(
name|BackupInfo
name|backupInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|logDir
init|=
name|backupInfo
operator|.
name|getHLogTargetDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|logDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No log directory specified for "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|rootPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|listStatus
argument_list|(
name|fs
argument_list|,
name|rootPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete log files: "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|cleanupTargetDir
parameter_list|(
name|BackupInfo
name|backupInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
comment|// clean up the data at target directory
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to cleanup up target dir : "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|targetDir
init|=
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No target directory specified for "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileSystem
name|outputFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|backupInfo
operator|.
name|getTables
argument_list|()
control|)
block|{
name|Path
name|targetDirPath
init|=
operator|new
name|Path
argument_list|(
name|getTableBackupDir
argument_list|(
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
argument_list|,
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|,
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFs
operator|.
name|delete
argument_list|(
name|targetDirPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up backup data at "
operator|+
name|targetDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|" done."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No data has been found in "
operator|+
name|targetDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
name|Path
name|tableDir
init|=
name|targetDirPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|backups
init|=
name|listStatus
argument_list|(
name|outputFs
argument_list|,
name|tableDir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|backups
operator|==
literal|null
operator|||
name|backups
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|outputFs
operator|.
name|delete
argument_list|(
name|tableDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|tableDir
operator|.
name|toString
argument_list|()
operator|+
literal|" is empty, remove it."
argument_list|)
expr_stmt|;
block|}
block|}
name|outputFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|targetDir
argument_list|,
name|backupInfo
operator|.
name|getBackupId
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cleaning up backup data of "
operator|+
name|backupInfo
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" at "
operator|+
name|backupInfo
operator|.
name|getBackupRootDir
argument_list|()
operator|+
literal|" failed due to "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Given the backup root dir, backup id and the table name, return the backup image location,    * which is also where the backup manifest file is. return value look like:    * "hdfs://backup.hbase.org:9000/user/biadmin/backup1/backup_1396650096738/default/t1_dn/"    * @param backupRootDir backup root directory    * @param backupId backup id    * @param tableName table name    * @return backupPath String for the particular table    */
specifier|public
specifier|static
name|String
name|getTableBackupDir
parameter_list|(
name|String
name|backupRootDir
parameter_list|,
name|String
name|backupId
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|backupRootDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|backupId
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
return|;
block|}
comment|/**    * Sort history list by start time in descending order.    * @param historyList history list    * @return sorted list of BackupCompleteData    */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|sortHistoryListDesc
parameter_list|(
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|historyList
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|BackupInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|BackupInfo
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupInfo
name|h
range|:
name|historyList
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|h
operator|.
name|getStartTs
argument_list|()
argument_list|)
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|map
operator|.
name|descendingKeySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Calls fs.listStatus() and treats FileNotFoundException as non-fatal This accommodates    * differences between hadoop versions, where hadoop 1 does not throw a FileNotFoundException, and    * return an empty FileStatus[] while Hadoop 2 will throw FileNotFoundException.    * @param fs file system    * @param dir directory    * @param filter path filter    * @return null if dir is empty or doesn't exist, otherwise FileStatus array    */
specifier|public
specifier|static
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|status
operator|=
name|filter
operator|==
literal|null
condition|?
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
else|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// if directory doesn't exist, return null
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|dir
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|status
operator|.
name|length
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|status
return|;
block|}
comment|/**    * Return the 'path' component of a Path. In Hadoop, Path is an URI. This method returns the    * 'path' component of a Path's URI: e.g. If a Path is    *<code>hdfs://example.org:9000/hbase_trunk/TestTable/compaction.dir</code>, this method returns    *<code>/hbase_trunk/TestTable/compaction.dir</code>. This method is useful if you want to print    * out a Path without qualifying Filesystem instance.    * @param p file system Path whose 'path' component we are to return.    * @return Path portion of the Filesystem    */
specifier|public
specifier|static
name|String
name|getPath
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**    * Given the backup root dir and the backup id, return the log file location for an incremental    * backup.    * @param backupRootDir backup root directory    * @param backupId backup id    * @return logBackupDir: ".../user/biadmin/backup1/WALs/backup_1396650096738"    */
specifier|public
specifier|static
name|String
name|getLogBackupDir
parameter_list|(
name|String
name|backupRootDir
parameter_list|,
name|String
name|backupId
parameter_list|)
block|{
return|return
name|backupRootDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|backupId
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getHistory
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|backupRootPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get all (n) history from backup root destination
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|backupRootPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|it
init|=
name|fs
operator|.
name|listLocatedStatus
argument_list|(
name|backupRootPath
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|lfs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lfs
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|backupId
init|=
name|lfs
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|BackupInfo
name|info
init|=
name|loadBackupInfo
argument_list|(
name|backupRootPath
argument_list|,
name|backupId
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not load backup info from: "
operator|+
name|lfs
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sort
name|Collections
operator|.
name|sort
argument_list|(
name|infos
argument_list|,
operator|new
name|Comparator
argument_list|<
name|BackupInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|BackupInfo
name|o1
parameter_list|,
name|BackupInfo
name|o2
parameter_list|)
block|{
name|long
name|ts1
init|=
name|getTimestamp
argument_list|(
name|o1
operator|.
name|getBackupId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|ts2
init|=
name|getTimestamp
argument_list|(
name|o2
operator|.
name|getBackupId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts1
operator|==
name|ts2
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|ts1
operator|<
name|ts2
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
specifier|private
name|long
name|getTimestamp
parameter_list|(
name|String
name|backupId
parameter_list|)
block|{
name|String
index|[]
name|split
init|=
name|backupId
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|infos
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|getHistory
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|n
parameter_list|,
name|Path
name|backupRootPath
parameter_list|,
name|BackupInfo
operator|.
name|Filter
modifier|...
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|infos
init|=
name|getHistory
argument_list|(
name|conf
argument_list|,
name|backupRootPath
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BackupInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupInfo
name|info
range|:
name|infos
control|)
block|{
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|==
name|n
condition|)
block|{
break|break;
block|}
name|boolean
name|passed
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|filters
index|[
name|i
index|]
operator|.
name|apply
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|passed
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|passed
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|BackupInfo
name|loadBackupInfo
parameter_list|(
name|Path
name|backupRootPath
parameter_list|,
name|String
name|backupId
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|backupPath
init|=
operator|new
name|Path
argument_list|(
name|backupRootPath
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|it
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|backupPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|lfs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lfs
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupManifest
operator|.
name|MANIFEST_FILE_NAME
argument_list|)
condition|)
block|{
comment|// Load BackupManifest
name|BackupManifest
name|manifest
init|=
operator|new
name|BackupManifest
argument_list|(
name|fs
argument_list|,
name|lfs
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|BackupInfo
name|info
init|=
name|manifest
operator|.
name|toBackupInfo
argument_list|()
decl_stmt|;
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Create restore request.    * @param backupRootDir backup root dir    * @param backupId backup id    * @param check check only    * @param fromTables table list from    * @param toTables table list to    * @param isOverwrite overwrite data    * @return request obkect    */
specifier|public
specifier|static
name|RestoreRequest
name|createRestoreRequest
parameter_list|(
name|String
name|backupRootDir
parameter_list|,
name|String
name|backupId
parameter_list|,
name|boolean
name|check
parameter_list|,
name|TableName
index|[]
name|fromTables
parameter_list|,
name|TableName
index|[]
name|toTables
parameter_list|,
name|boolean
name|isOverwrite
parameter_list|)
block|{
name|RestoreRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|RestoreRequest
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|RestoreRequest
name|request
init|=
name|builder
operator|.
name|withBackupRootDir
argument_list|(
name|backupRootDir
argument_list|)
operator|.
name|withBackupId
argument_list|(
name|backupId
argument_list|)
operator|.
name|withCheck
argument_list|(
name|check
argument_list|)
operator|.
name|withFromTables
argument_list|(
name|fromTables
argument_list|)
operator|.
name|withToTables
argument_list|(
name|toTables
argument_list|)
operator|.
name|withOvewrite
argument_list|(
name|isOverwrite
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|request
return|;
block|}
specifier|public
specifier|static
name|boolean
name|validate
parameter_list|(
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|BackupManifest
argument_list|>
name|backupManifestMap
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|BackupManifest
argument_list|>
name|manifestEntry
range|:
name|backupManifestMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TableName
name|table
init|=
name|manifestEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|BackupImage
argument_list|>
name|imageSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|BackupImage
argument_list|>
name|depList
init|=
name|manifestEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getDependentListByTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|depList
operator|!=
literal|null
operator|&&
operator|!
name|depList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|imageSet
operator|.
name|addAll
argument_list|(
name|depList
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Dependent image(s) from old to new:"
argument_list|)
expr_stmt|;
for|for
control|(
name|BackupImage
name|image
range|:
name|imageSet
control|)
block|{
name|String
name|imageDir
init|=
name|HBackupFileSystem
operator|.
name|getTableBackupDir
argument_list|(
name|image
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|image
operator|.
name|getBackupId
argument_list|()
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|BackupUtils
operator|.
name|checkPathExist
argument_list|(
name|imageDir
argument_list|,
name|conf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ERROR: backup image does not exist: "
operator|+
name|imageDir
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Backup image: "
operator|+
name|image
operator|.
name|getBackupId
argument_list|()
operator|+
literal|" for '"
operator|+
name|table
operator|+
literal|"' is available"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|isValid
return|;
block|}
specifier|public
specifier|static
name|Path
name|getBulkOutputDir
parameter_list|(
name|String
name|tableName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|deleteOnExit
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|tmp
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|TEMPORARY_FS_DIRECTORY_KEY
argument_list|,
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|+
literal|"/hbase-staging"
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|tmp
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"bulk_output-"
operator|+
name|tableName
operator|+
literal|"-"
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteOnExit
condition|)
block|{
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|public
specifier|static
name|Path
name|getBulkOutputDir
parameter_list|(
name|String
name|tableName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBulkOutputDir
argument_list|(
name|tableName
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getFileNameCompatibleString
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
return|return
name|table
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
literal|"-"
operator|+
name|table
operator|.
name|getQualifierAsString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|failed
parameter_list|(
name|int
name|result
parameter_list|)
block|{
return|return
name|result
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|static
name|boolean
name|succeeded
parameter_list|(
name|int
name|result
parameter_list|)
block|{
return|return
name|result
operator|==
literal|0
return|;
block|}
specifier|public
specifier|static
name|LoadIncrementalHFiles
name|createLoader
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set configuration for restore:
comment|// LoadIncrementalHFile needs more time
comment|//<name>hbase.rpc.timeout</name><value>600000</value>
comment|// calculates
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|MILLISEC_IN_HOUR
argument_list|)
expr_stmt|;
comment|// By default, it is 32 and loader will fail if # of files in any region exceed this
comment|// limit. Bad for snapshot restore.
name|conf
operator|.
name|setInt
argument_list|(
name|LoadIncrementalHFiles
operator|.
name|MAX_FILES_PER_REGION_PER_FAMILY
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LoadIncrementalHFiles
operator|.
name|IGNORE_UNMATCHED_CF_CONF_KEY
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|LoadIncrementalHFiles
name|loader
decl_stmt|;
try|try
block|{
name|loader
operator|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|loader
return|;
block|}
specifier|public
specifier|static
name|String
name|findMostRecentBackupId
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|)
block|{
name|long
name|recentTimestamp
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|String
name|backupId
range|:
name|backupIds
control|)
block|{
name|long
name|ts
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|backupId
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|>
name|recentTimestamp
condition|)
block|{
name|recentTimestamp
operator|=
name|ts
expr_stmt|;
block|}
block|}
return|return
name|BackupRestoreConstants
operator|.
name|BACKUPID_PREFIX
operator|+
name|recentTimestamp
return|;
block|}
block|}
end_class

end_unit

