begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_BACKUP_LIST_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_BANDWIDTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_BANDWIDTH_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_DEBUG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_DEBUG_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_KEEP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_KEEP_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_LIST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_PATH_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_RECORD_NUMBER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_RECORD_NUMBER_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_SET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_SET_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_TABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_TABLE_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_WORKERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_WORKERS_DESC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_YARN_QUEUE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|OPTION_YARN_QUEUE_NAME_DESC
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
operator|.
name|BackupCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupCommands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_comment
comment|/**  *  * Command-line entry point for backup operation  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BackupDriver
extends|extends
name|AbstractHBaseTool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BackupDriver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CommandLine
name|cmd
decl_stmt|;
specifier|public
name|BackupDriver
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
comment|// disable irrelevant loggers to avoid it mess up command output
name|LogUtils
operator|.
name|disableZkAndClientLoggers
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|parseAndRun
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if backup is enabled
if|if
condition|(
operator|!
name|BackupManager
operator|.
name|isBackupEnabled
argument_list|(
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|BackupRestoreConstants
operator|.
name|ENABLE_BACKUP
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|BackupRestoreConstants
operator|.
name|VERIFY_BACKUP
argument_list|)
expr_stmt|;
name|String
name|cmd
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|remainArgs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printToolUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|cmd
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
name|remainArgs
operator|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|remainArgs
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|BackupCommand
name|type
init|=
name|BackupCommand
operator|.
name|HELP
decl_stmt|;
if|if
condition|(
name|BackupCommand
operator|.
name|CREATE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|CREATE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|HELP
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|HELP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|DELETE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|DELETE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|DESCRIBE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|DESCRIBE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|HISTORY
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|HISTORY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|PROGRESS
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|PROGRESS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|SET
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|SET
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|REPAIR
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|REPAIR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BackupCommand
operator|.
name|MERGE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|type
operator|=
name|BackupCommand
operator|.
name|MERGE
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unsupported command for backup: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|printToolUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// enable debug logging
if|if
condition|(
name|this
operator|.
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPTION_DEBUG
argument_list|)
condition|)
block|{
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.backup"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogManager
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.backup"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
block|}
name|BackupCommands
operator|.
name|Command
name|command
init|=
name|BackupCommands
operator|.
name|createCommand
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|type
argument_list|,
name|this
operator|.
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BackupCommand
operator|.
name|CREATE
operator|&&
name|conf
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|BackupCommands
operator|.
name|CreateCommand
operator|)
name|command
operator|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|BackupCommands
operator|.
name|INCORRECT_USAGE
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|command
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
comment|// define supported options
name|addOptNoArg
argument_list|(
name|OPTION_DEBUG
argument_list|,
name|OPTION_DEBUG_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_TABLE
argument_list|,
name|OPTION_TABLE_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_BANDWIDTH
argument_list|,
name|OPTION_BANDWIDTH_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_LIST
argument_list|,
name|OPTION_BACKUP_LIST_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_WORKERS
argument_list|,
name|OPTION_WORKERS_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_RECORD_NUMBER
argument_list|,
name|OPTION_RECORD_NUMBER_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_SET
argument_list|,
name|OPTION_SET_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_PATH
argument_list|,
name|OPTION_PATH_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_KEEP
argument_list|,
name|OPTION_KEEP_DESC
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPTION_YARN_QUEUE_NAME
argument_list|,
name|OPTION_YARN_QUEUE_NAME_DESC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|parseAndRun
argument_list|(
name|cmd
operator|.
name|getArgs
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|Path
name|hbasedir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|URI
name|defaultFs
init|=
name|hbasedir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|FSUtils
operator|.
name|setFsDefault
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|defaultFs
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|BackupDriver
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|conf
argument_list|,
literal|"Tool configuration is not initialized"
argument_list|)
expr_stmt|;
name|CommandLine
name|cmd
decl_stmt|;
try|try
block|{
comment|// parse the command line arguments
name|cmd
operator|=
name|parseArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|cmdLineArgs
operator|=
name|args
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error when parsing command-line arguments: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printToolUsage
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|processOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|EXIT_FAILURE
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|doWork
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error running command-line tool"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|void
name|printToolUsage
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|BackupCommands
operator|.
name|USAGE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

